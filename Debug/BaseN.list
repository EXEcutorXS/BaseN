
BaseN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a714  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ef8  0800a828  0800a828  0001a828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b720  0800b720  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  0800b720  0800b720  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b720  0800b720  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b720  0800b720  0001b720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b724  0800b724  0001b724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  0800b728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001920  200000c0  0800b7e4  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200019e0  0800b7e4  000219e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000299a3  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bc  00000000  00000000  00049a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000124be  00000000  00000000  0004f044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00061508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001ea8  00000000  00000000  00062988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cde3  00000000  00000000  00064830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000251e5  00000000  00000000  00081613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009897a  00000000  00000000  000a67f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013f172  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004eac  00000000  00000000  0013f1c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a80c 	.word	0x0800a80c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	0800a80c 	.word	0x0800a80c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_drsub>:
 80003b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003b8:	e002      	b.n	80003c0 <__adddf3>
 80003ba:	bf00      	nop

080003bc <__aeabi_dsub>:
 80003bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003c0 <__adddf3>:
 80003c0:	b530      	push	{r4, r5, lr}
 80003c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ca:	ea94 0f05 	teq	r4, r5
 80003ce:	bf08      	it	eq
 80003d0:	ea90 0f02 	teqeq	r0, r2
 80003d4:	bf1f      	itttt	ne
 80003d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e6:	f000 80e2 	beq.w	80005ae <__adddf3+0x1ee>
 80003ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003f2:	bfb8      	it	lt
 80003f4:	426d      	neglt	r5, r5
 80003f6:	dd0c      	ble.n	8000412 <__adddf3+0x52>
 80003f8:	442c      	add	r4, r5
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	ea82 0000 	eor.w	r0, r2, r0
 8000406:	ea83 0101 	eor.w	r1, r3, r1
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	2d36      	cmp	r5, #54	; 0x36
 8000414:	bf88      	it	hi
 8000416:	bd30      	pophi	{r4, r5, pc}
 8000418:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800041c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000420:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000424:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x70>
 800042a:	4240      	negs	r0, r0
 800042c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000430:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000434:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000438:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800043c:	d002      	beq.n	8000444 <__adddf3+0x84>
 800043e:	4252      	negs	r2, r2
 8000440:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000444:	ea94 0f05 	teq	r4, r5
 8000448:	f000 80a7 	beq.w	800059a <__adddf3+0x1da>
 800044c:	f1a4 0401 	sub.w	r4, r4, #1
 8000450:	f1d5 0e20 	rsbs	lr, r5, #32
 8000454:	db0d      	blt.n	8000472 <__adddf3+0xb2>
 8000456:	fa02 fc0e 	lsl.w	ip, r2, lr
 800045a:	fa22 f205 	lsr.w	r2, r2, r5
 800045e:	1880      	adds	r0, r0, r2
 8000460:	f141 0100 	adc.w	r1, r1, #0
 8000464:	fa03 f20e 	lsl.w	r2, r3, lr
 8000468:	1880      	adds	r0, r0, r2
 800046a:	fa43 f305 	asr.w	r3, r3, r5
 800046e:	4159      	adcs	r1, r3
 8000470:	e00e      	b.n	8000490 <__adddf3+0xd0>
 8000472:	f1a5 0520 	sub.w	r5, r5, #32
 8000476:	f10e 0e20 	add.w	lr, lr, #32
 800047a:	2a01      	cmp	r2, #1
 800047c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000480:	bf28      	it	cs
 8000482:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	18c0      	adds	r0, r0, r3
 800048c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	d507      	bpl.n	80004a6 <__adddf3+0xe6>
 8000496:	f04f 0e00 	mov.w	lr, #0
 800049a:	f1dc 0c00 	rsbs	ip, ip, #0
 800049e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004aa:	d31b      	bcc.n	80004e4 <__adddf3+0x124>
 80004ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004b0:	d30c      	bcc.n	80004cc <__adddf3+0x10c>
 80004b2:	0849      	lsrs	r1, r1, #1
 80004b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004bc:	f104 0401 	add.w	r4, r4, #1
 80004c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004c8:	f080 809a 	bcs.w	8000600 <__adddf3+0x240>
 80004cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004d0:	bf08      	it	eq
 80004d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d6:	f150 0000 	adcs.w	r0, r0, #0
 80004da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004de:	ea41 0105 	orr.w	r1, r1, r5
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e8:	4140      	adcs	r0, r0
 80004ea:	eb41 0101 	adc.w	r1, r1, r1
 80004ee:	3c01      	subs	r4, #1
 80004f0:	bf28      	it	cs
 80004f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004f6:	d2e9      	bcs.n	80004cc <__adddf3+0x10c>
 80004f8:	f091 0f00 	teq	r1, #0
 80004fc:	bf04      	itt	eq
 80004fe:	4601      	moveq	r1, r0
 8000500:	2000      	moveq	r0, #0
 8000502:	fab1 f381 	clz	r3, r1
 8000506:	bf08      	it	eq
 8000508:	3320      	addeq	r3, #32
 800050a:	f1a3 030b 	sub.w	r3, r3, #11
 800050e:	f1b3 0220 	subs.w	r2, r3, #32
 8000512:	da0c      	bge.n	800052e <__adddf3+0x16e>
 8000514:	320c      	adds	r2, #12
 8000516:	dd08      	ble.n	800052a <__adddf3+0x16a>
 8000518:	f102 0c14 	add.w	ip, r2, #20
 800051c:	f1c2 020c 	rsb	r2, r2, #12
 8000520:	fa01 f00c 	lsl.w	r0, r1, ip
 8000524:	fa21 f102 	lsr.w	r1, r1, r2
 8000528:	e00c      	b.n	8000544 <__adddf3+0x184>
 800052a:	f102 0214 	add.w	r2, r2, #20
 800052e:	bfd8      	it	le
 8000530:	f1c2 0c20 	rsble	ip, r2, #32
 8000534:	fa01 f102 	lsl.w	r1, r1, r2
 8000538:	fa20 fc0c 	lsr.w	ip, r0, ip
 800053c:	bfdc      	itt	le
 800053e:	ea41 010c 	orrle.w	r1, r1, ip
 8000542:	4090      	lslle	r0, r2
 8000544:	1ae4      	subs	r4, r4, r3
 8000546:	bfa2      	ittt	ge
 8000548:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800054c:	4329      	orrge	r1, r5
 800054e:	bd30      	popge	{r4, r5, pc}
 8000550:	ea6f 0404 	mvn.w	r4, r4
 8000554:	3c1f      	subs	r4, #31
 8000556:	da1c      	bge.n	8000592 <__adddf3+0x1d2>
 8000558:	340c      	adds	r4, #12
 800055a:	dc0e      	bgt.n	800057a <__adddf3+0x1ba>
 800055c:	f104 0414 	add.w	r4, r4, #20
 8000560:	f1c4 0220 	rsb	r2, r4, #32
 8000564:	fa20 f004 	lsr.w	r0, r0, r4
 8000568:	fa01 f302 	lsl.w	r3, r1, r2
 800056c:	ea40 0003 	orr.w	r0, r0, r3
 8000570:	fa21 f304 	lsr.w	r3, r1, r4
 8000574:	ea45 0103 	orr.w	r1, r5, r3
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	f1c4 040c 	rsb	r4, r4, #12
 800057e:	f1c4 0220 	rsb	r2, r4, #32
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 f304 	lsl.w	r3, r1, r4
 800058a:	ea40 0003 	orr.w	r0, r0, r3
 800058e:	4629      	mov	r1, r5
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	fa21 f004 	lsr.w	r0, r1, r4
 8000596:	4629      	mov	r1, r5
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	f094 0f00 	teq	r4, #0
 800059e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005a2:	bf06      	itte	eq
 80005a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005a8:	3401      	addeq	r4, #1
 80005aa:	3d01      	subne	r5, #1
 80005ac:	e74e      	b.n	800044c <__adddf3+0x8c>
 80005ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005b2:	bf18      	it	ne
 80005b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b8:	d029      	beq.n	800060e <__adddf3+0x24e>
 80005ba:	ea94 0f05 	teq	r4, r5
 80005be:	bf08      	it	eq
 80005c0:	ea90 0f02 	teqeq	r0, r2
 80005c4:	d005      	beq.n	80005d2 <__adddf3+0x212>
 80005c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ca:	bf04      	itt	eq
 80005cc:	4619      	moveq	r1, r3
 80005ce:	4610      	moveq	r0, r2
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	ea91 0f03 	teq	r1, r3
 80005d6:	bf1e      	ittt	ne
 80005d8:	2100      	movne	r1, #0
 80005da:	2000      	movne	r0, #0
 80005dc:	bd30      	popne	{r4, r5, pc}
 80005de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005e2:	d105      	bne.n	80005f0 <__adddf3+0x230>
 80005e4:	0040      	lsls	r0, r0, #1
 80005e6:	4149      	adcs	r1, r1
 80005e8:	bf28      	it	cs
 80005ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005f4:	bf3c      	itt	cc
 80005f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005fa:	bd30      	popcc	{r4, r5, pc}
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000604:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000608:	f04f 0000 	mov.w	r0, #0
 800060c:	bd30      	pop	{r4, r5, pc}
 800060e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000612:	bf1a      	itte	ne
 8000614:	4619      	movne	r1, r3
 8000616:	4610      	movne	r0, r2
 8000618:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800061c:	bf1c      	itt	ne
 800061e:	460b      	movne	r3, r1
 8000620:	4602      	movne	r2, r0
 8000622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000626:	bf06      	itte	eq
 8000628:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800062c:	ea91 0f03 	teqeq	r1, r3
 8000630:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	bf00      	nop

08000638 <__aeabi_ui2d>:
 8000638:	f090 0f00 	teq	r0, #0
 800063c:	bf04      	itt	eq
 800063e:	2100      	moveq	r1, #0
 8000640:	4770      	bxeq	lr
 8000642:	b530      	push	{r4, r5, lr}
 8000644:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000648:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064c:	f04f 0500 	mov.w	r5, #0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e750      	b.n	80004f8 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_i2d>:
 8000658:	f090 0f00 	teq	r0, #0
 800065c:	bf04      	itt	eq
 800065e:	2100      	moveq	r1, #0
 8000660:	4770      	bxeq	lr
 8000662:	b530      	push	{r4, r5, lr}
 8000664:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000668:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000670:	bf48      	it	mi
 8000672:	4240      	negmi	r0, r0
 8000674:	f04f 0100 	mov.w	r1, #0
 8000678:	e73e      	b.n	80004f8 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_f2d>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000682:	ea4f 0131 	mov.w	r1, r1, rrx
 8000686:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800068a:	bf1f      	itttt	ne
 800068c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000690:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000694:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000698:	4770      	bxne	lr
 800069a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800069e:	bf08      	it	eq
 80006a0:	4770      	bxeq	lr
 80006a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006a6:	bf04      	itt	eq
 80006a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006ac:	4770      	bxeq	lr
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	e71c      	b.n	80004f8 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_ul2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f04f 0500 	mov.w	r5, #0
 80006ce:	e00a      	b.n	80006e6 <__aeabi_l2d+0x16>

080006d0 <__aeabi_l2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006de:	d502      	bpl.n	80006e6 <__aeabi_l2d+0x16>
 80006e0:	4240      	negs	r0, r0
 80006e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006f2:	f43f aed8 	beq.w	80004a6 <__adddf3+0xe6>
 80006f6:	f04f 0203 	mov.w	r2, #3
 80006fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fe:	bf18      	it	ne
 8000700:	3203      	addne	r2, #3
 8000702:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000706:	bf18      	it	ne
 8000708:	3203      	addne	r2, #3
 800070a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070e:	f1c2 0320 	rsb	r3, r2, #32
 8000712:	fa00 fc03 	lsl.w	ip, r0, r3
 8000716:	fa20 f002 	lsr.w	r0, r0, r2
 800071a:	fa01 fe03 	lsl.w	lr, r1, r3
 800071e:	ea40 000e 	orr.w	r0, r0, lr
 8000722:	fa21 f102 	lsr.w	r1, r1, r2
 8000726:	4414      	add	r4, r2
 8000728:	e6bd      	b.n	80004a6 <__adddf3+0xe6>
 800072a:	bf00      	nop

0800072c <__gedf2>:
 800072c:	f04f 3cff 	mov.w	ip, #4294967295
 8000730:	e006      	b.n	8000740 <__cmpdf2+0x4>
 8000732:	bf00      	nop

08000734 <__ledf2>:
 8000734:	f04f 0c01 	mov.w	ip, #1
 8000738:	e002      	b.n	8000740 <__cmpdf2+0x4>
 800073a:	bf00      	nop

0800073c <__cmpdf2>:
 800073c:	f04f 0c01 	mov.w	ip, #1
 8000740:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000744:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000748:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800074c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000756:	d01b      	beq.n	8000790 <__cmpdf2+0x54>
 8000758:	b001      	add	sp, #4
 800075a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800075e:	bf0c      	ite	eq
 8000760:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000764:	ea91 0f03 	teqne	r1, r3
 8000768:	bf02      	ittt	eq
 800076a:	ea90 0f02 	teqeq	r0, r2
 800076e:	2000      	moveq	r0, #0
 8000770:	4770      	bxeq	lr
 8000772:	f110 0f00 	cmn.w	r0, #0
 8000776:	ea91 0f03 	teq	r1, r3
 800077a:	bf58      	it	pl
 800077c:	4299      	cmppl	r1, r3
 800077e:	bf08      	it	eq
 8000780:	4290      	cmpeq	r0, r2
 8000782:	bf2c      	ite	cs
 8000784:	17d8      	asrcs	r0, r3, #31
 8000786:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800078a:	f040 0001 	orr.w	r0, r0, #1
 800078e:	4770      	bx	lr
 8000790:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d102      	bne.n	80007a0 <__cmpdf2+0x64>
 800079a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800079e:	d107      	bne.n	80007b0 <__cmpdf2+0x74>
 80007a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a8:	d1d6      	bne.n	8000758 <__cmpdf2+0x1c>
 80007aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007ae:	d0d3      	beq.n	8000758 <__cmpdf2+0x1c>
 80007b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdrcmple>:
 80007b8:	4684      	mov	ip, r0
 80007ba:	4610      	mov	r0, r2
 80007bc:	4662      	mov	r2, ip
 80007be:	468c      	mov	ip, r1
 80007c0:	4619      	mov	r1, r3
 80007c2:	4663      	mov	r3, ip
 80007c4:	e000      	b.n	80007c8 <__aeabi_cdcmpeq>
 80007c6:	bf00      	nop

080007c8 <__aeabi_cdcmpeq>:
 80007c8:	b501      	push	{r0, lr}
 80007ca:	f7ff ffb7 	bl	800073c <__cmpdf2>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	bf48      	it	mi
 80007d2:	f110 0f00 	cmnmi.w	r0, #0
 80007d6:	bd01      	pop	{r0, pc}

080007d8 <__aeabi_dcmpeq>:
 80007d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007dc:	f7ff fff4 	bl	80007c8 <__aeabi_cdcmpeq>
 80007e0:	bf0c      	ite	eq
 80007e2:	2001      	moveq	r0, #1
 80007e4:	2000      	movne	r0, #0
 80007e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ea:	bf00      	nop

080007ec <__aeabi_dcmplt>:
 80007ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f0:	f7ff ffea 	bl	80007c8 <__aeabi_cdcmpeq>
 80007f4:	bf34      	ite	cc
 80007f6:	2001      	movcc	r0, #1
 80007f8:	2000      	movcs	r0, #0
 80007fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80007fe:	bf00      	nop

08000800 <__aeabi_dcmple>:
 8000800:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000804:	f7ff ffe0 	bl	80007c8 <__aeabi_cdcmpeq>
 8000808:	bf94      	ite	ls
 800080a:	2001      	movls	r0, #1
 800080c:	2000      	movhi	r0, #0
 800080e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000812:	bf00      	nop

08000814 <__aeabi_dcmpge>:
 8000814:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000818:	f7ff ffce 	bl	80007b8 <__aeabi_cdrcmple>
 800081c:	bf94      	ite	ls
 800081e:	2001      	movls	r0, #1
 8000820:	2000      	movhi	r0, #0
 8000822:	f85d fb08 	ldr.w	pc, [sp], #8
 8000826:	bf00      	nop

08000828 <__aeabi_dcmpgt>:
 8000828:	f84d ed08 	str.w	lr, [sp, #-8]!
 800082c:	f7ff ffc4 	bl	80007b8 <__aeabi_cdrcmple>
 8000830:	bf34      	ite	cc
 8000832:	2001      	movcc	r0, #1
 8000834:	2000      	movcs	r0, #0
 8000836:	f85d fb08 	ldr.w	pc, [sp], #8
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_d2f>:
 800088c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000890:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000894:	bf24      	itt	cs
 8000896:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800089a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800089e:	d90d      	bls.n	80008bc <__aeabi_d2f+0x30>
 80008a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008b4:	bf08      	it	eq
 80008b6:	f020 0001 	biceq.w	r0, r0, #1
 80008ba:	4770      	bx	lr
 80008bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008c0:	d121      	bne.n	8000906 <__aeabi_d2f+0x7a>
 80008c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008c6:	bfbc      	itt	lt
 80008c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008cc:	4770      	bxlt	lr
 80008ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008d6:	f1c2 0218 	rsb	r2, r2, #24
 80008da:	f1c2 0c20 	rsb	ip, r2, #32
 80008de:	fa10 f30c 	lsls.w	r3, r0, ip
 80008e2:	fa20 f002 	lsr.w	r0, r0, r2
 80008e6:	bf18      	it	ne
 80008e8:	f040 0001 	orrne.w	r0, r0, #1
 80008ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008f8:	ea40 000c 	orr.w	r0, r0, ip
 80008fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000900:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000904:	e7cc      	b.n	80008a0 <__aeabi_d2f+0x14>
 8000906:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800090a:	d107      	bne.n	800091c <__aeabi_d2f+0x90>
 800090c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000910:	bf1e      	ittt	ne
 8000912:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000916:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800091a:	4770      	bxne	lr
 800091c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000920:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000924:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_fmul>:
 8000b48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b50:	bf1e      	ittt	ne
 8000b52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b56:	ea92 0f0c 	teqne	r2, ip
 8000b5a:	ea93 0f0c 	teqne	r3, ip
 8000b5e:	d06f      	beq.n	8000c40 <__aeabi_fmul+0xf8>
 8000b60:	441a      	add	r2, r3
 8000b62:	ea80 0c01 	eor.w	ip, r0, r1
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	bf18      	it	ne
 8000b6a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000b6e:	d01e      	beq.n	8000bae <__aeabi_fmul+0x66>
 8000b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000b74:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000b78:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000b7c:	fba0 3101 	umull	r3, r1, r0, r1
 8000b80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b84:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000b88:	bf3e      	ittt	cc
 8000b8a:	0049      	lslcc	r1, r1, #1
 8000b8c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b90:	005b      	lslcc	r3, r3, #1
 8000b92:	ea40 0001 	orr.w	r0, r0, r1
 8000b96:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000b9a:	2afd      	cmp	r2, #253	; 0xfd
 8000b9c:	d81d      	bhi.n	8000bda <__aeabi_fmul+0x92>
 8000b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	4770      	bx	lr
 8000bae:	f090 0f00 	teq	r0, #0
 8000bb2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb6:	bf08      	it	eq
 8000bb8:	0249      	lsleq	r1, r1, #9
 8000bba:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bbe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bc2:	3a7f      	subs	r2, #127	; 0x7f
 8000bc4:	bfc2      	ittt	gt
 8000bc6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bca:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bce:	4770      	bxgt	lr
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	3a01      	subs	r2, #1
 8000bda:	dc5d      	bgt.n	8000c98 <__aeabi_fmul+0x150>
 8000bdc:	f112 0f19 	cmn.w	r2, #25
 8000be0:	bfdc      	itt	le
 8000be2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000be6:	4770      	bxle	lr
 8000be8:	f1c2 0200 	rsb	r2, r2, #0
 8000bec:	0041      	lsls	r1, r0, #1
 8000bee:	fa21 f102 	lsr.w	r1, r1, r2
 8000bf2:	f1c2 0220 	rsb	r2, r2, #32
 8000bf6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bfa:	ea5f 0031 	movs.w	r0, r1, rrx
 8000bfe:	f140 0000 	adc.w	r0, r0, #0
 8000c02:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c06:	bf08      	it	eq
 8000c08:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c0c:	4770      	bx	lr
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0040      	lsleq	r0, r0, #1
 8000c1a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c1e:	3a01      	subeq	r2, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fmul+0xce>
 8000c22:	ea40 000c 	orr.w	r0, r0, ip
 8000c26:	f093 0f00 	teq	r3, #0
 8000c2a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c2e:	bf02      	ittt	eq
 8000c30:	0049      	lsleq	r1, r1, #1
 8000c32:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c36:	3b01      	subeq	r3, #1
 8000c38:	d0f9      	beq.n	8000c2e <__aeabi_fmul+0xe6>
 8000c3a:	ea41 010c 	orr.w	r1, r1, ip
 8000c3e:	e78f      	b.n	8000b60 <__aeabi_fmul+0x18>
 8000c40:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c44:	ea92 0f0c 	teq	r2, ip
 8000c48:	bf18      	it	ne
 8000c4a:	ea93 0f0c 	teqne	r3, ip
 8000c4e:	d00a      	beq.n	8000c66 <__aeabi_fmul+0x11e>
 8000c50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c54:	bf18      	it	ne
 8000c56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c5a:	d1d8      	bne.n	8000c0e <__aeabi_fmul+0xc6>
 8000c5c:	ea80 0001 	eor.w	r0, r0, r1
 8000c60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f090 0f00 	teq	r0, #0
 8000c6a:	bf17      	itett	ne
 8000c6c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000c70:	4608      	moveq	r0, r1
 8000c72:	f091 0f00 	teqne	r1, #0
 8000c76:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000c7a:	d014      	beq.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c7c:	ea92 0f0c 	teq	r2, ip
 8000c80:	d101      	bne.n	8000c86 <__aeabi_fmul+0x13e>
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	d10f      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c86:	ea93 0f0c 	teq	r3, ip
 8000c8a:	d103      	bne.n	8000c94 <__aeabi_fmul+0x14c>
 8000c8c:	024b      	lsls	r3, r1, #9
 8000c8e:	bf18      	it	ne
 8000c90:	4608      	movne	r0, r1
 8000c92:	d108      	bne.n	8000ca6 <__aeabi_fmul+0x15e>
 8000c94:	ea80 0001 	eor.w	r0, r0, r1
 8000c98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000caa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cae:	4770      	bx	lr

08000cb0 <__aeabi_fdiv>:
 8000cb0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cb4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cb8:	bf1e      	ittt	ne
 8000cba:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cbe:	ea92 0f0c 	teqne	r2, ip
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d069      	beq.n	8000d9c <__aeabi_fdiv+0xec>
 8000cc8:	eba2 0203 	sub.w	r2, r2, r3
 8000ccc:	ea80 0c01 	eor.w	ip, r0, r1
 8000cd0:	0249      	lsls	r1, r1, #9
 8000cd2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000cd6:	d037      	beq.n	8000d48 <__aeabi_fdiv+0x98>
 8000cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cdc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ce0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ce4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	bf38      	it	cc
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000cf2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	bf24      	itt	cs
 8000cfa:	1a5b      	subcs	r3, r3, r1
 8000cfc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d00:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d04:	bf24      	itt	cs
 8000d06:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d0a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d0e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d12:	bf24      	itt	cs
 8000d14:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d1c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d20:	bf24      	itt	cs
 8000d22:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d26:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	bf18      	it	ne
 8000d2e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d32:	d1e0      	bne.n	8000cf6 <__aeabi_fdiv+0x46>
 8000d34:	2afd      	cmp	r2, #253	; 0xfd
 8000d36:	f63f af50 	bhi.w	8000bda <__aeabi_fmul+0x92>
 8000d3a:	428b      	cmp	r3, r1
 8000d3c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d40:	bf08      	it	eq
 8000d42:	f020 0001 	biceq.w	r0, r0, #1
 8000d46:	4770      	bx	lr
 8000d48:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d4c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d50:	327f      	adds	r2, #127	; 0x7f
 8000d52:	bfc2      	ittt	gt
 8000d54:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d58:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5c:	4770      	bxgt	lr
 8000d5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d62:	f04f 0300 	mov.w	r3, #0
 8000d66:	3a01      	subs	r2, #1
 8000d68:	e737      	b.n	8000bda <__aeabi_fmul+0x92>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fdiv+0xc2>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fdiv+0xda>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e795      	b.n	8000cc8 <__aeabi_fdiv+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	d108      	bne.n	8000db8 <__aeabi_fdiv+0x108>
 8000da6:	0242      	lsls	r2, r0, #9
 8000da8:	f47f af7d 	bne.w	8000ca6 <__aeabi_fmul+0x15e>
 8000dac:	ea93 0f0c 	teq	r3, ip
 8000db0:	f47f af70 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000db4:	4608      	mov	r0, r1
 8000db6:	e776      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000db8:	ea93 0f0c 	teq	r3, ip
 8000dbc:	d104      	bne.n	8000dc8 <__aeabi_fdiv+0x118>
 8000dbe:	024b      	lsls	r3, r1, #9
 8000dc0:	f43f af4c 	beq.w	8000c5c <__aeabi_fmul+0x114>
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	e76e      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000dc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dcc:	bf18      	it	ne
 8000dce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000dd2:	d1ca      	bne.n	8000d6a <__aeabi_fdiv+0xba>
 8000dd4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000dd8:	f47f af5c 	bne.w	8000c94 <__aeabi_fmul+0x14c>
 8000ddc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000de0:	f47f af3c 	bne.w	8000c5c <__aeabi_fmul+0x114>
 8000de4:	e75f      	b.n	8000ca6 <__aeabi_fmul+0x15e>
 8000de6:	bf00      	nop

08000de8 <__gesf2>:
 8000de8:	f04f 3cff 	mov.w	ip, #4294967295
 8000dec:	e006      	b.n	8000dfc <__cmpsf2+0x4>
 8000dee:	bf00      	nop

08000df0 <__lesf2>:
 8000df0:	f04f 0c01 	mov.w	ip, #1
 8000df4:	e002      	b.n	8000dfc <__cmpsf2+0x4>
 8000df6:	bf00      	nop

08000df8 <__cmpsf2>:
 8000df8:	f04f 0c01 	mov.w	ip, #1
 8000dfc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e00:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e04:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e08:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e0c:	bf18      	it	ne
 8000e0e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e12:	d011      	beq.n	8000e38 <__cmpsf2+0x40>
 8000e14:	b001      	add	sp, #4
 8000e16:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e1a:	bf18      	it	ne
 8000e1c:	ea90 0f01 	teqne	r0, r1
 8000e20:	bf58      	it	pl
 8000e22:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e26:	bf88      	it	hi
 8000e28:	17c8      	asrhi	r0, r1, #31
 8000e2a:	bf38      	it	cc
 8000e2c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e30:	bf18      	it	ne
 8000e32:	f040 0001 	orrne.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e3c:	d102      	bne.n	8000e44 <__cmpsf2+0x4c>
 8000e3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000e42:	d105      	bne.n	8000e50 <__cmpsf2+0x58>
 8000e44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000e48:	d1e4      	bne.n	8000e14 <__cmpsf2+0x1c>
 8000e4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000e4e:	d0e1      	beq.n	8000e14 <__cmpsf2+0x1c>
 8000e50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <__aeabi_cfrcmple>:
 8000e58:	4684      	mov	ip, r0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	4661      	mov	r1, ip
 8000e5e:	e7ff      	b.n	8000e60 <__aeabi_cfcmpeq>

08000e60 <__aeabi_cfcmpeq>:
 8000e60:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e62:	f7ff ffc9 	bl	8000df8 <__cmpsf2>
 8000e66:	2800      	cmp	r0, #0
 8000e68:	bf48      	it	mi
 8000e6a:	f110 0f00 	cmnmi.w	r0, #0
 8000e6e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e70 <__aeabi_fcmpeq>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff fff4 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e78:	bf0c      	ite	eq
 8000e7a:	2001      	moveq	r0, #1
 8000e7c:	2000      	movne	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <__aeabi_fcmplt>:
 8000e84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e88:	f7ff ffea 	bl	8000e60 <__aeabi_cfcmpeq>
 8000e8c:	bf34      	ite	cc
 8000e8e:	2001      	movcc	r0, #1
 8000e90:	2000      	movcs	r0, #0
 8000e92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e96:	bf00      	nop

08000e98 <__aeabi_fcmple>:
 8000e98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e9c:	f7ff ffe0 	bl	8000e60 <__aeabi_cfcmpeq>
 8000ea0:	bf94      	ite	ls
 8000ea2:	2001      	movls	r0, #1
 8000ea4:	2000      	movhi	r0, #0
 8000ea6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000eaa:	bf00      	nop

08000eac <__aeabi_fcmpge>:
 8000eac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eb0:	f7ff ffd2 	bl	8000e58 <__aeabi_cfrcmple>
 8000eb4:	bf94      	ite	ls
 8000eb6:	2001      	movls	r0, #1
 8000eb8:	2000      	movhi	r0, #0
 8000eba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ebe:	bf00      	nop

08000ec0 <__aeabi_fcmpgt>:
 8000ec0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ec4:	f7ff ffc8 	bl	8000e58 <__aeabi_cfrcmple>
 8000ec8:	bf34      	ite	cc
 8000eca:	2001      	movcc	r0, #1
 8000ecc:	2000      	movcs	r0, #0
 8000ece:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_f2iz>:
 8000ed4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ed8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000edc:	d30f      	bcc.n	8000efe <__aeabi_f2iz+0x2a>
 8000ede:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000ee2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ee6:	d90d      	bls.n	8000f04 <__aeabi_f2iz+0x30>
 8000ee8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000eec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ef0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ef4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ef8:	bf18      	it	ne
 8000efa:	4240      	negne	r0, r0
 8000efc:	4770      	bx	lr
 8000efe:	f04f 0000 	mov.w	r0, #0
 8000f02:	4770      	bx	lr
 8000f04:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f08:	d101      	bne.n	8000f0e <__aeabi_f2iz+0x3a>
 8000f0a:	0242      	lsls	r2, r0, #9
 8000f0c:	d105      	bne.n	8000f1a <__aeabi_f2iz+0x46>
 8000f0e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f12:	bf08      	it	eq
 8000f14:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f18:	4770      	bx	lr
 8000f1a:	f04f 0000 	mov.w	r0, #0
 8000f1e:	4770      	bx	lr

08000f20 <__aeabi_f2uiz>:
 8000f20:	0042      	lsls	r2, r0, #1
 8000f22:	d20e      	bcs.n	8000f42 <__aeabi_f2uiz+0x22>
 8000f24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f28:	d30b      	bcc.n	8000f42 <__aeabi_f2uiz+0x22>
 8000f2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f32:	d409      	bmi.n	8000f48 <__aeabi_f2uiz+0x28>
 8000f34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f40:	4770      	bx	lr
 8000f42:	f04f 0000 	mov.w	r0, #0
 8000f46:	4770      	bx	lr
 8000f48:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_f2uiz+0x32>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d102      	bne.n	8000f58 <__aeabi_f2uiz+0x38>
 8000f52:	f04f 30ff 	mov.w	r0, #4294967295
 8000f56:	4770      	bx	lr
 8000f58:	f04f 0000 	mov.w	r0, #0
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <SendCommand>:
extern NetHandler_t netHandler;

uint32_t lastStatusCheck = 0;

void SendCommand (char com, char *data)
{
 8000f60:	b530      	push	{r4, r5, lr}
 8000f62:	4604      	mov	r4, r0
 8000f64:	460d      	mov	r5, r1
	char tmpStr[256] = { 0, };
 8000f66:	2100      	movs	r1, #0
{
 8000f68:	b0c1      	sub	sp, #260	; 0x104
	char tmpStr[256] = { 0, };
 8000f6a:	22fc      	movs	r2, #252	; 0xfc
 8000f6c:	a801      	add	r0, sp, #4
 8000f6e:	9100      	str	r1, [sp, #0]
 8000f70:	f007 faa0 	bl	80084b4 <memset>
	uint8_t len;
	sprintf (tmpStr, "<%c%s", com, data);
 8000f74:	462b      	mov	r3, r5
 8000f76:	4622      	mov	r2, r4
 8000f78:	4909      	ldr	r1, [pc, #36]	; (8000fa0 <SendCommand+0x40>)
 8000f7a:	4668      	mov	r0, sp
 8000f7c:	f007 fb30 	bl	80085e0 <siprintf>
	len = strlen (tmpStr);
 8000f80:	4668      	mov	r0, sp
 8000f82:	f7ff f8e5 	bl	8000150 <strlen>
	tmpStr[len] = '>';
 8000f86:	233e      	movs	r3, #62	; 0x3e
 8000f88:	f80d 3000 	strb.w	r3, [sp, r0]
	HAL_UART_Transmit (&huart1, (uint8_t*) tmpStr, len + 1, 1000);
 8000f8c:	3001      	adds	r0, #1
 8000f8e:	b282      	uxth	r2, r0
 8000f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f94:	4669      	mov	r1, sp
 8000f96:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <SendCommand+0x44>)
 8000f98:	f007 f870 	bl	800807c <HAL_UART_Transmit>
}
 8000f9c:	b041      	add	sp, #260	; 0x104
 8000f9e:	bd30      	pop	{r4, r5, pc}
 8000fa0:	0800a828 	.word	0x0800a828
 8000fa4:	20000c30 	.word	0x20000c30

08000fa8 <NetInitialise>:


}

void NetInitialise (NetHandler_t *h)
{
 8000fa8:	b538      	push	{r3, r4, r5, lr}
	SendCommand (UARTW_SSID, settings.SSID);
 8000faa:	4d08      	ldr	r5, [pc, #32]	; (8000fcc <NetInitialise+0x24>)
{
 8000fac:	4604      	mov	r4, r0
	SendCommand (UARTW_SSID, settings.SSID);
 8000fae:	4629      	mov	r1, r5
 8000fb0:	205a      	movs	r0, #90	; 0x5a
 8000fb2:	f7ff ffd5 	bl	8000f60 <SendCommand>
	HAL_Delay (100);
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f004 fcdc 	bl	8005974 <HAL_Delay>
	SendCommand (UARTW_WIFIPASS, settings.WiFiPass);
 8000fbc:	2058      	movs	r0, #88	; 0x58
 8000fbe:	f105 0110 	add.w	r1, r5, #16
 8000fc2:	f7ff ffcd 	bl	8000f60 <SendCommand>
	h->initialised = true;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	7063      	strb	r3, [r4, #1]
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	20000a8b 	.word	0x20000a8b

08000fd0 <NetSendAsync>:
{
	SendCommand (UARTW_DEBUGOFF, "0");
}

void NetSendAsync (NetHandler_t *h, char *ptr)
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
	if (h->nMessages < 7)
 8000fd2:	f890 5630 	ldrb.w	r5, [r0, #1584]	; 0x630
{
 8000fd6:	4604      	mov	r4, r0
	if (h->nMessages < 7)
 8000fd8:	2d06      	cmp	r5, #6
{
 8000fda:	460e      	mov	r6, r1
	if (h->nMessages < 7)
 8000fdc:	d80f      	bhi.n	8000ffe <NetSendAsync+0x2e>
		{
			memcpy (h->messages[h->nMessages], ptr, strlen (ptr));
 8000fde:	4608      	mov	r0, r1
 8000fe0:	f7ff f8b6 	bl	8000150 <strlen>
 8000fe4:	eb04 15c5 	add.w	r5, r4, r5, lsl #7
 8000fe8:	4602      	mov	r2, r0
 8000fea:	4631      	mov	r1, r6
 8000fec:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000ff0:	f007 fa52 	bl	8008498 <memcpy>
			h->nMessages++;
 8000ff4:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
		}
}
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}

08001000 <NetStatusCheck>:

}

void NetStatusCheck ()
{
	SendCommand (UARTW_STATUS, "");
 8001000:	2074      	movs	r0, #116	; 0x74
 8001002:	4901      	ldr	r1, [pc, #4]	; (8001008 <NetStatusCheck+0x8>)
 8001004:	f7ff bfac 	b.w	8000f60 <SendCommand>
 8001008:	0800b442 	.word	0x0800b442

0800100c <NetRoutine>:
{
 800100c:	b538      	push	{r3, r4, r5, lr}
	if (h->TX && HAL_GetTick()-h->lastTransmit>3000)
 800100e:	7943      	ldrb	r3, [r0, #5]
{
 8001010:	4604      	mov	r4, r0
	if (h->TX && HAL_GetTick()-h->lastTransmit>3000)
 8001012:	b14b      	cbz	r3, 8001028 <NetRoutine+0x1c>
 8001014:	f004 fca8 	bl	8005968 <HAL_GetTick>
 8001018:	68e3      	ldr	r3, [r4, #12]
 800101a:	1ac0      	subs	r0, r0, r3
 800101c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001020:	4298      	cmp	r0, r3
		h->TX=false;
 8001022:	bf84      	itt	hi
 8001024:	2300      	movhi	r3, #0
 8001026:	7163      	strbhi	r3, [r4, #5]
	if (HAL_GetTick () - h->lastStatusCheck > 10000)
 8001028:	f004 fc9e 	bl	8005968 <HAL_GetTick>
 800102c:	6923      	ldr	r3, [r4, #16]
 800102e:	1ac0      	subs	r0, r0, r3
 8001030:	f242 7310 	movw	r3, #10000	; 0x2710
 8001034:	4298      	cmp	r0, r3
 8001036:	d904      	bls.n	8001042 <NetRoutine+0x36>
			h->lastStatusCheck = HAL_GetTick ();
 8001038:	f004 fc96 	bl	8005968 <HAL_GetTick>
 800103c:	6120      	str	r0, [r4, #16]
			NetStatusCheck ();
 800103e:	f7ff ffdf 	bl	8001000 <NetStatusCheck>
	if (!h->plugged)
 8001042:	7823      	ldrb	r3, [r4, #0]
 8001044:	b373      	cbz	r3, 80010a4 <NetRoutine+0x98>
	if (!h->initialised && settings.SSID[0] != 0 && settings.WiFiPass[0] != 0)
 8001046:	7863      	ldrb	r3, [r4, #1]
 8001048:	b943      	cbnz	r3, 800105c <NetRoutine+0x50>
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <NetRoutine+0x9c>)
 800104c:	7cda      	ldrb	r2, [r3, #19]
 800104e:	b12a      	cbz	r2, 800105c <NetRoutine+0x50>
 8001050:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001054:	b113      	cbz	r3, 800105c <NetRoutine+0x50>
			NetInitialise (h);
 8001056:	4620      	mov	r0, r4
 8001058:	f7ff ffa6 	bl	8000fa8 <NetInitialise>
	if (h->online && !h->TX)
 800105c:	78e3      	ldrb	r3, [r4, #3]
 800105e:	b30b      	cbz	r3, 80010a4 <NetRoutine+0x98>
 8001060:	7965      	ldrb	r5, [r4, #5]
 8001062:	b9fd      	cbnz	r5, 80010a4 <NetRoutine+0x98>
			if (h->nMessages)
 8001064:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8001068:	b1e3      	cbz	r3, 80010a4 <NetRoutine+0x98>
					h->TX = true;
 800106a:	2301      	movs	r3, #1
 800106c:	7163      	strb	r3, [r4, #5]
					h->lastTransmit=HAL_GetTick();
 800106e:	f004 fc7b 	bl	8005968 <HAL_GetTick>
					SendCommand (UARTW_GETSTRING, h->messages[h->nMessages - 1]);
 8001072:	f894 1630 	ldrb.w	r1, [r4, #1584]	; 0x630
					h->lastTransmit=HAL_GetTick();
 8001076:	60e0      	str	r0, [r4, #12]
					SendCommand (UARTW_GETSTRING, h->messages[h->nMessages - 1]);
 8001078:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
 800107c:	2046      	movs	r0, #70	; 0x46
 800107e:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 8001082:	f7ff ff6d 	bl	8000f60 <SendCommand>
					memset(h->messages[h->nMessages - 1],0,sizeof(h->messages[h->nMessages - 1]));
 8001086:	f894 0630 	ldrb.w	r0, [r4, #1584]	; 0x630
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	eb04 10c0 	add.w	r0, r4, r0, lsl #7
 8001090:	4629      	mov	r1, r5
 8001092:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 8001096:	f007 fa0d 	bl	80084b4 <memset>
					h->nMessages--;
 800109a:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 800109e:	3b01      	subs	r3, #1
 80010a0:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
}
 80010a4:	bd38      	pop	{r3, r4, r5, pc}
 80010a6:	bf00      	nop
 80010a8:	20000a78 	.word	0x20000a78

080010ac <NetRefreshNetworkList>:
}

void NetRefreshNetworkList (NetHandler_t *h)
{
 80010ac:	b508      	push	{r3, lr}
	h->netRefreshDone = false;
	h->netRefreshInProgress=true;
 80010ae:	2301      	movs	r3, #1
	memset (h->nets, 0, sizeof(h->nets));
 80010b0:	2100      	movs	r1, #0
	h->netRefreshInProgress=true;
 80010b2:	80c3      	strh	r3, [r0, #6]
	memset (h->nets, 0, sizeof(h->nets));
 80010b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b8:	3030      	adds	r0, #48	; 0x30
 80010ba:	f007 f9fb 	bl	80084b4 <memset>
	SendCommand (UARTW_WIFIREFRESH, "");
}
 80010be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SendCommand (UARTW_WIFIREFRESH, "");
 80010c2:	2057      	movs	r0, #87	; 0x57
 80010c4:	4901      	ldr	r1, [pc, #4]	; (80010cc <NetRefreshNetworkList+0x20>)
 80010c6:	f7ff bf4b 	b.w	8000f60 <SendCommand>
 80010ca:	bf00      	nop
 80010cc:	0800b442 	.word	0x0800b442

080010d0 <sendCommand>:
GPIO_TypeDef * rstPort;
uint16_t rstPin;
uint8_t biasRatio=0x88;

void sendCommand (uint8_t com)
{
 80010d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80010d2:	4d0f      	ldr	r5, [pc, #60]	; (8001110 <sendCommand+0x40>)
 80010d4:	4c0f      	ldr	r4, [pc, #60]	; (8001114 <sendCommand+0x44>)
 80010d6:	8829      	ldrh	r1, [r5, #0]
{
 80010d8:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	6820      	ldr	r0, [r4, #0]
 80010e0:	f005 fa5c 	bl	800659c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <sendCommand+0x48>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	8819      	ldrh	r1, [r3, #0]
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <sendCommand+0x4c>)
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	f005 fa55 	bl	800659c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <sendCommand+0x50>)
 80010f4:	230a      	movs	r3, #10
 80010f6:	f10d 0107 	add.w	r1, sp, #7
 80010fa:	2201      	movs	r2, #1
 80010fc:	6800      	ldr	r0, [r0, #0]
 80010fe:	f006 faa5 	bl	800764c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8001102:	2201      	movs	r2, #1
 8001104:	8829      	ldrh	r1, [r5, #0]
 8001106:	6820      	ldr	r0, [r4, #0]
 8001108:	f005 fa48 	bl	800659c <HAL_GPIO_WritePin>
}
 800110c:	b003      	add	sp, #12
 800110e:	bd30      	pop	{r4, r5, pc}
 8001110:	20000380 	.word	0x20000380
 8001114:	20000990 	.word	0x20000990
 8001118:	2000098a 	.word	0x2000098a
 800111c:	20000384 	.word	0x20000384
 8001120:	20000994 	.word	0x20000994

08001124 <UC1609_SoftwareReset>:

void UC1609_SoftwareReset()
{
 8001124:	b508      	push	{r3, lr}
sendCommand(0b11100010);
 8001126:	20e2      	movs	r0, #226	; 0xe2
 8001128:	f7ff ffd2 	bl	80010d0 <sendCommand>
HAL_Delay (20);
}
 800112c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_Delay (20);
 8001130:	2014      	movs	r0, #20
 8001132:	f004 bc1f 	b.w	8005974 <HAL_Delay>
	...

08001138 <UC1609_HardwareReset>:

void UC1609_HardwareReset()
{
 8001138:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin (rstPort, rstPin, 0);
 800113a:	4d0a      	ldr	r5, [pc, #40]	; (8001164 <UC1609_HardwareReset+0x2c>)
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <UC1609_HardwareReset+0x30>)
 800113e:	8829      	ldrh	r1, [r5, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	6820      	ldr	r0, [r4, #0]
 8001144:	f005 fa2a 	bl	800659c <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8001148:	2001      	movs	r0, #1
 800114a:	f004 fc13 	bl	8005974 <HAL_Delay>
	HAL_GPIO_WritePin (rstPort, rstPin, 1);
 800114e:	6820      	ldr	r0, [r4, #0]
 8001150:	8829      	ldrh	r1, [r5, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	f005 fa22 	bl	800659c <HAL_GPIO_WritePin>
	HAL_Delay (5);
}
 8001158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay (5);
 800115c:	2005      	movs	r0, #5
 800115e:	f004 bc09 	b.w	8005974 <HAL_Delay>
 8001162:	bf00      	nop
 8001164:	20000388 	.word	0x20000388
 8001168:	2000098c 	.word	0x2000098c

0800116c <UC1609_Init>:
									uint16_t csGpioPin,
									GPIO_TypeDef* cdGpioPort,
									uint16_t cdGpioPin,
									GPIO_TypeDef* rstGpioPort,
									uint16_t rstGpioPin)
{
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	hspi = spiHandler;
 800116e:	4f15      	ldr	r7, [pc, #84]	; (80011c4 <UC1609_Init+0x58>)
{
 8001170:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	hspi = spiHandler;
 8001174:	6038      	str	r0, [r7, #0]
	csPort=csGpioPort;
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <UC1609_Init+0x5c>)
{
 8001178:	9c07      	ldr	r4, [sp, #28]
	csPort=csGpioPort;
 800117a:	6001      	str	r1, [r0, #0]
	csPin=csGpioPin;
 800117c:	4913      	ldr	r1, [pc, #76]	; (80011cc <UC1609_Init+0x60>)
{
 800117e:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	csPin=csGpioPin;
 8001182:	800a      	strh	r2, [r1, #0]
	cdPort=cdGpioPort;
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <UC1609_Init+0x64>)
 8001186:	6013      	str	r3, [r2, #0]
	cdPin=cdGpioPin;
 8001188:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <UC1609_Init+0x68>)
 800118a:	801e      	strh	r6, [r3, #0]
	rstPort=rstGpioPort;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <UC1609_Init+0x6c>)
 800118e:	601c      	str	r4, [r3, #0]
	rstPin=rstGpioPin;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <UC1609_Init+0x70>)
 8001192:	801d      	strh	r5, [r3, #0]
if (rstPin==0 || rstPort==0)
 8001194:	b105      	cbz	r5, 8001198 <UC1609_Init+0x2c>
 8001196:	b994      	cbnz	r4, 80011be <UC1609_Init+0x52>
	{
	UC1609_SoftwareReset();
 8001198:	f7ff ffc4 	bl	8001124 <UC1609_SoftwareReset>
	}
else
	{
	UC1609_HardwareReset();
	}
	sendCommand (UC1609_CMD_MAPPING | MIRROR_X);
 800119c:	20c4      	movs	r0, #196	; 0xc4
 800119e:	f7ff ff97 	bl	80010d0 <sendCommand>
	sendCommand (UC1609_CMD_SET_BIAS_RATIO|DEFAULT_BIAS_RATIO);
 80011a2:	20eb      	movs	r0, #235	; 0xeb
 80011a4:	f7ff ff94 	bl	80010d0 <sendCommand>
	sendCommand (UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 80011a8:	2081      	movs	r0, #129	; 0x81
 80011aa:	f7ff ff91 	bl	80010d0 <sendCommand>
	sendCommand (IMHO_BEST_LOOKING_BIAS_RATIO);
 80011ae:	2083      	movs	r0, #131	; 0x83
 80011b0:	f7ff ff8e 	bl	80010d0 <sendCommand>
	UC1609_Scroll(0);
}
 80011b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

void UC1609_Scroll (uint8_t lines)
{
lines%=64;
sendCommand(UC1609_CMD_SCROLL|lines);
 80011b8:	2040      	movs	r0, #64	; 0x40
 80011ba:	f7ff bf89 	b.w	80010d0 <sendCommand>
	UC1609_HardwareReset();
 80011be:	f7ff ffbb 	bl	8001138 <UC1609_HardwareReset>
 80011c2:	e7eb      	b.n	800119c <UC1609_Init+0x30>
 80011c4:	20000994 	.word	0x20000994
 80011c8:	20000990 	.word	0x20000990
 80011cc:	20000380 	.word	0x20000380
 80011d0:	20000384 	.word	0x20000384
 80011d4:	2000098a 	.word	0x2000098a
 80011d8:	2000098c 	.word	0x2000098c
 80011dc:	20000388 	.word	0x20000388

080011e0 <UC1609_SetXY>:
{
 80011e0:	b538      	push	{r3, r4, r5, lr}
 80011e2:	4604      	mov	r4, r0
 80011e4:	460d      	mov	r5, r1
	sendCommand (0b00000000 | (x & 0xF));
 80011e6:	f000 000f 	and.w	r0, r0, #15
 80011ea:	f7ff ff71 	bl	80010d0 <sendCommand>
	sendCommand (0b00010000 | ((x >> 4) & 0xF));
 80011ee:	0920      	lsrs	r0, r4, #4
 80011f0:	f040 0010 	orr.w	r0, r0, #16
 80011f4:	f7ff ff6c 	bl	80010d0 <sendCommand>
	sendCommand (0b10110000 | y);
 80011f8:	f045 00b0 	orr.w	r0, r5, #176	; 0xb0
}
 80011fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sendCommand (0b10110000 | y);
 8001200:	f7ff bf66 	b.w	80010d0 <sendCommand>

08001204 <UC1609_SetPos>:
	cursor = x * 6 + UC1609_WIDTH * y;
 8001204:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <UC1609_SetPos+0x14>)
 800120a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800120e:	0189      	lsls	r1, r1, #6
 8001210:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001214:	8019      	strh	r1, [r3, #0]
}
 8001216:	4770      	bx	lr
 8001218:	20000370 	.word	0x20000370

0800121c <UC1609_UpdateScreen>:
	UC1609_SetXY (0, 0);
 800121c:	2100      	movs	r1, #0
{
 800121e:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8001220:	4d11      	ldr	r5, [pc, #68]	; (8001268 <UC1609_UpdateScreen+0x4c>)
 8001222:	4c12      	ldr	r4, [pc, #72]	; (800126c <UC1609_UpdateScreen+0x50>)
	UC1609_SetXY (0, 0);
 8001224:	4608      	mov	r0, r1
 8001226:	f7ff ffdb 	bl	80011e0 <UC1609_SetXY>
	HAL_GPIO_WritePin (csPort, csPin, 0);
 800122a:	8829      	ldrh	r1, [r5, #0]
 800122c:	6820      	ldr	r0, [r4, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	f005 f9b4 	bl	800659c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 1);
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <UC1609_UpdateScreen+0x54>)
 8001236:	2201      	movs	r2, #1
 8001238:	8819      	ldrh	r1, [r3, #0]
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <UC1609_UpdateScreen+0x58>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f005 f9ad 	bl	800659c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, buffer, BUFFER_SIZE, 1000);
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <UC1609_UpdateScreen+0x5c>)
 8001244:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001248:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800124c:	490b      	ldr	r1, [pc, #44]	; (800127c <UC1609_UpdateScreen+0x60>)
 800124e:	6800      	ldr	r0, [r0, #0]
 8001250:	f006 f9fc 	bl	800764c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8001254:	6820      	ldr	r0, [r4, #0]
 8001256:	8829      	ldrh	r1, [r5, #0]
 8001258:	2201      	movs	r2, #1
 800125a:	f005 f99f 	bl	800659c <HAL_GPIO_WritePin>
}
 800125e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sendCommand (UC1609_CMD_ENABLE);
 8001262:	20af      	movs	r0, #175	; 0xaf
 8001264:	f7ff bf34 	b.w	80010d0 <sendCommand>
 8001268:	20000380 	.word	0x20000380
 800126c:	20000990 	.word	0x20000990
 8001270:	2000098a 	.word	0x2000098a
 8001274:	20000384 	.word	0x20000384
 8001278:	20000994 	.word	0x20000994
 800127c:	2000038a 	.word	0x2000038a

08001280 <UC1609_Clean>:
{
 8001280:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		buffer[i] = 0;
 8001284:	2100      	movs	r1, #0
 8001286:	4a04      	ldr	r2, [pc, #16]	; (8001298 <UC1609_Clean+0x18>)
 8001288:	3b01      	subs	r3, #1
 800128a:	b29b      	uxth	r3, r3
 800128c:	f802 1b01 	strb.w	r1, [r2], #1
	for (uint16_t i = 0; i < BUFFER_SIZE; ++i)
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1f9      	bne.n	8001288 <UC1609_Clean+0x8>
}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	2000038a 	.word	0x2000038a

0800129c <UC1609_PutRuC>:
{
 800129c:	b570      	push	{r4, r5, r6, lr}
	if (*c == 0xD0)
 800129e:	7803      	ldrb	r3, [r0, #0]
 80012a0:	2bd0      	cmp	r3, #208	; 0xd0
 80012a2:	d111      	bne.n	80012c8 <UC1609_PutRuC+0x2c>
		pos = *(c + 1) - 144 + 101;
 80012a4:	7843      	ldrb	r3, [r0, #1]
 80012a6:	3b2b      	subs	r3, #43	; 0x2b
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 80012a8:	490a      	ldr	r1, [pc, #40]	; (80012d4 <UC1609_PutRuC+0x38>)
 80012aa:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <UC1609_PutRuC+0x3c>)
		pos = *(c + 1) - 128 + 149;
 80012ac:	b2db      	uxtb	r3, r3
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 80012ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80012b2:	880a      	ldrh	r2, [r1, #0]
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <UC1609_PutRuC+0x40>)
 80012b6:	191e      	adds	r6, r3, r4
 80012b8:	58e3      	ldr	r3, [r4, r3]
 80012ba:	1815      	adds	r5, r2, r0
 80012bc:	5013      	str	r3, [r2, r0]
 80012be:	7933      	ldrb	r3, [r6, #4]
	cursor += 5;
 80012c0:	3205      	adds	r2, #5
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 80012c2:	712b      	strb	r3, [r5, #4]
	cursor += 5;
 80012c4:	800a      	strh	r2, [r1, #0]
}
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
	else if (*c == 0xD1)
 80012c8:	2bd1      	cmp	r3, #209	; 0xd1
 80012ca:	d1fc      	bne.n	80012c6 <UC1609_PutRuC+0x2a>
		pos = *(c + 1) - 128 + 149;
 80012cc:	7843      	ldrb	r3, [r0, #1]
 80012ce:	3315      	adds	r3, #21
 80012d0:	e7ea      	b.n	80012a8 <UC1609_PutRuC+0xc>
 80012d2:	bf00      	nop
 80012d4:	20000370 	.word	0x20000370
 80012d8:	0800b0c0 	.word	0x0800b0c0
 80012dc:	2000038a 	.word	0x2000038a

080012e0 <UC1609_Put>:
{
 80012e0:	b570      	push	{r4, r5, r6, lr}
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 80012e2:	4a08      	ldr	r2, [pc, #32]	; (8001304 <UC1609_Put+0x24>)
 80012e4:	4c08      	ldr	r4, [pc, #32]	; (8001308 <UC1609_Put+0x28>)
 80012e6:	3820      	subs	r0, #32
 80012e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80012ec:	8813      	ldrh	r3, [r2, #0]
 80012ee:	4907      	ldr	r1, [pc, #28]	; (800130c <UC1609_Put+0x2c>)
 80012f0:	1906      	adds	r6, r0, r4
 80012f2:	5820      	ldr	r0, [r4, r0]
 80012f4:	185d      	adds	r5, r3, r1
 80012f6:	5058      	str	r0, [r3, r1]
 80012f8:	7931      	ldrb	r1, [r6, #4]
	cursor += 5;
 80012fa:	3305      	adds	r3, #5
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 80012fc:	7129      	strb	r1, [r5, #4]
	cursor += 5;
 80012fe:	8013      	strh	r3, [r2, #0]
}
 8001300:	bd70      	pop	{r4, r5, r6, pc}
 8001302:	bf00      	nop
 8001304:	20000370 	.word	0x20000370
 8001308:	0800b0c0 	.word	0x0800b0c0
 800130c:	2000038a 	.word	0x2000038a

08001310 <UC1609_PutString>:
{
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	4604      	mov	r4, r0
			cursor %= BUFFER_SIZE;
 8001314:	f44f 66c0 	mov.w	r6, #1536	; 0x600
 8001318:	4d0d      	ldr	r5, [pc, #52]	; (8001350 <UC1609_PutString+0x40>)
	while (*c)
 800131a:	7823      	ldrb	r3, [r4, #0]
 800131c:	b903      	cbnz	r3, 8001320 <UC1609_PutString+0x10>
}
 800131e:	bd70      	pop	{r4, r5, r6, pc}
			cursor %= BUFFER_SIZE;
 8001320:	882a      	ldrh	r2, [r5, #0]
 8001322:	fbb2 f3f6 	udiv	r3, r2, r6
 8001326:	fb06 2313 	mls	r3, r6, r3, r2
 800132a:	802b      	strh	r3, [r5, #0]
			if (*c == 0xD0 || *c == 0xD1)
 800132c:	7820      	ldrb	r0, [r4, #0]
 800132e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b01      	cmp	r3, #1
 8001336:	d807      	bhi.n	8001348 <UC1609_PutString+0x38>
					UC1609_PutRuC (c);
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff ffaf 	bl	800129c <UC1609_PutRuC>
					c += 2;
 800133e:	3402      	adds	r4, #2
			cursor++;
 8001340:	882b      	ldrh	r3, [r5, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	802b      	strh	r3, [r5, #0]
 8001346:	e7e8      	b.n	800131a <UC1609_PutString+0xa>
				UC1609_Put (*c++);
 8001348:	3401      	adds	r4, #1
 800134a:	f7ff ffc9 	bl	80012e0 <UC1609_Put>
 800134e:	e7f7      	b.n	8001340 <UC1609_PutString+0x30>
 8001350:	20000370 	.word	0x20000370

08001354 <pow10_>:
	while(pos<255 && str[pos]!=sym)
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
 8001354:	4603      	mov	r3, r0
 8001356:	220a      	movs	r2, #10
 8001358:	2001      	movs	r0, #1
  if (value>0)
 800135a:	b11b      	cbz	r3, 8001364 <pow10_+0x10>
  	return 10*pow10_(value-1);
 800135c:	3b01      	subs	r3, #1
 800135e:	4350      	muls	r0, r2
 8001360:	b2db      	uxtb	r3, r3
 8001362:	e7fa      	b.n	800135a <pow10_+0x6>
  else
  	return 1;
}
 8001364:	4770      	bx	lr
	...

08001368 <floatToString2>:
{
	return 1<<(value*4);
}

char* floatToString2(float arg)
{
 8001368:	b538      	push	{r3, r4, r5, lr}
static char resString[32];
int32_t leftPart = (int32_t) arg;
int16_t rightPart = abs((int16_t)(arg*100))%100;
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <floatToString2+0x3c>)
{
 800136c:	4605      	mov	r5, r0
int16_t rightPart = abs((int16_t)(arg*100))%100;
 800136e:	f7ff fbeb 	bl	8000b48 <__aeabi_fmul>
 8001372:	f7ff fdaf 	bl	8000ed4 <__aeabi_f2iz>
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	b202      	sxth	r2, r0
 800137a:	2a00      	cmp	r2, #0
 800137c:	bfb8      	it	lt
 800137e:	4252      	neglt	r2, r2
 8001380:	b292      	uxth	r2, r2
 8001382:	fbb2 f4f3 	udiv	r4, r2, r3
int32_t leftPart = (int32_t) arg;
 8001386:	4628      	mov	r0, r5
int16_t rightPart = abs((int16_t)(arg*100))%100;
 8001388:	fb03 2414 	mls	r4, r3, r4, r2
int32_t leftPart = (int32_t) arg;
 800138c:	f7ff fda2 	bl	8000ed4 <__aeabi_f2iz>
sprintf(resString,"%li.%02d",leftPart,rightPart);
 8001390:	4d05      	ldr	r5, [pc, #20]	; (80013a8 <floatToString2+0x40>)
int32_t leftPart = (int32_t) arg;
 8001392:	4602      	mov	r2, r0
sprintf(resString,"%li.%02d",leftPart,rightPart);
 8001394:	4623      	mov	r3, r4
 8001396:	4628      	mov	r0, r5
 8001398:	4904      	ldr	r1, [pc, #16]	; (80013ac <floatToString2+0x44>)
 800139a:	f007 f921 	bl	80085e0 <siprintf>
return resString;
}
 800139e:	4628      	mov	r0, r5
 80013a0:	bd38      	pop	{r3, r4, r5, pc}
 80013a2:	bf00      	nop
 80013a4:	42c80000 	.word	0x42c80000
 80013a8:	200000dc 	.word	0x200000dc
 80013ac:	0800a82e 	.word	0x0800a82e

080013b0 <floatToString1>:

char* floatToString1(float arg)
{
 80013b0:	b538      	push	{r3, r4, r5, lr}
static char resString[32];
int32_t leftPart = (int32_t) arg;
int16_t rightPart = abs((int16_t)(arg*10))%10;
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <floatToString1+0x3c>)
{
 80013b4:	4605      	mov	r5, r0
int16_t rightPart = abs((int16_t)(arg*10))%10;
 80013b6:	f7ff fbc7 	bl	8000b48 <__aeabi_fmul>
 80013ba:	f7ff fd8b 	bl	8000ed4 <__aeabi_f2iz>
 80013be:	230a      	movs	r3, #10
 80013c0:	b202      	sxth	r2, r0
 80013c2:	2a00      	cmp	r2, #0
 80013c4:	bfb8      	it	lt
 80013c6:	4252      	neglt	r2, r2
 80013c8:	b292      	uxth	r2, r2
 80013ca:	fbb2 f4f3 	udiv	r4, r2, r3
int32_t leftPart = (int32_t) arg;
 80013ce:	4628      	mov	r0, r5
int16_t rightPart = abs((int16_t)(arg*10))%10;
 80013d0:	fb03 2414 	mls	r4, r3, r4, r2
int32_t leftPart = (int32_t) arg;
 80013d4:	f7ff fd7e 	bl	8000ed4 <__aeabi_f2iz>
sprintf(resString,"%li.%d",leftPart,rightPart);
 80013d8:	4d05      	ldr	r5, [pc, #20]	; (80013f0 <floatToString1+0x40>)
int32_t leftPart = (int32_t) arg;
 80013da:	4602      	mov	r2, r0
sprintf(resString,"%li.%d",leftPart,rightPart);
 80013dc:	4623      	mov	r3, r4
 80013de:	4628      	mov	r0, r5
 80013e0:	4904      	ldr	r1, [pc, #16]	; (80013f4 <floatToString1+0x44>)
 80013e2:	f007 f8fd 	bl	80085e0 <siprintf>
return resString;
}
 80013e6:	4628      	mov	r0, r5
 80013e8:	bd38      	pop	{r3, r4, r5, pc}
 80013ea:	bf00      	nop
 80013ec:	41200000 	.word	0x41200000
 80013f0:	200000fc 	.word	0x200000fc
 80013f4:	0800a837 	.word	0x0800a837

080013f8 <DecToInt>:

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
 80013f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t value=0;
 80013fa:	2400      	movs	r4, #0
 80013fc:	1e45      	subs	r5, r0, #1
	uint8_t i=0;
	for(i=0;i<len;i++)
 80013fe:	b189      	cbz	r1, 8001424 <DecToInt+0x2c>
	if (string[i]>='0' && string[i]<='9')
 8001400:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8001404:	3901      	subs	r1, #1
 8001406:	3e30      	subs	r6, #48	; 0x30
 8001408:	b2f3      	uxtb	r3, r6
 800140a:	2b09      	cmp	r3, #9
 800140c:	b2c9      	uxtb	r1, r1
 800140e:	d805      	bhi.n	800141c <DecToInt+0x24>
	value+=(string[i]-'0')*pow10_(len-i-1);
 8001410:	4608      	mov	r0, r1
 8001412:	f7ff ff9f 	bl	8001354 <pow10_>
 8001416:	fb00 4406 	mla	r4, r0, r6, r4
	for(i=0;i<len;i++)
 800141a:	e7f0      	b.n	80013fe <DecToInt+0x6>
	else
	{
		Error_Handler();
 800141c:	f003 f890 	bl	8004540 <Error_Handler>
		return 0xFFFFFFFF;
 8001420:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return value;
}
 8001424:	4620      	mov	r0, r4
 8001426:	bd70      	pop	{r4, r5, r6, pc}

08001428 <HexToInt>:
{
	uint32_t value=0;
	uint32_t tmp=0;
	uint8_t i=0;

	for(i=0;i<len;i++)
 8001428:	1e42      	subs	r2, r0, #1
	uint32_t value=0;
 800142a:	2000      	movs	r0, #0
{
 800142c:	b510      	push	{r4, lr}
 800142e:	3901      	subs	r1, #1
 8001430:	b2c9      	uxtb	r1, r1
	for(i=0;i<len;i++)
 8001432:	29ff      	cmp	r1, #255	; 0xff
 8001434:	d047      	beq.n	80014c6 <HexToInt+0x9e>
	{
		switch (string[i])
 8001436:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800143a:	3b30      	subs	r3, #48	; 0x30
 800143c:	2b36      	cmp	r3, #54	; 0x36
 800143e:	d83e      	bhi.n	80014be <HexToInt+0x96>
 8001440:	e8df f003 	tbb	[pc, r3]
 8001444:	23441c42 	.word	0x23441c42
 8001448:	2b292725 	.word	0x2b292725
 800144c:	3d3d2f2d 	.word	0x3d3d2f2d
 8001450:	3d3d3d3d 	.word	0x3d3d3d3d
 8001454:	3533313d 	.word	0x3533313d
 8001458:	3d3b3937 	.word	0x3d3b3937
 800145c:	3d3d3d3d 	.word	0x3d3d3d3d
 8001460:	3d3d3d3d 	.word	0x3d3d3d3d
 8001464:	3d3d3d3d 	.word	0x3d3d3d3d
 8001468:	3d3d3d3d 	.word	0x3d3d3d3d
 800146c:	3d3d3d3d 	.word	0x3d3d3d3d
 8001470:	3d3d3d3d 	.word	0x3d3d3d3d
 8001474:	3533313d 	.word	0x3533313d
 8001478:	3937      	.short	0x3937
 800147a:	3b          	.byte	0x3b
 800147b:	00          	.byte	0x00
 800147c:	2301      	movs	r3, #1
	return 1<<(value*4);
 800147e:	008c      	lsls	r4, r1, #2
		case 'f': tmp=15; break;
		default:
			Error_Handler();
			return 0xFFFFFFFF;
		}
		value+=tmp*pow16(len-i-1);
 8001480:	40a3      	lsls	r3, r4
 8001482:	3901      	subs	r1, #1
 8001484:	4418      	add	r0, r3
	for(i=0;i<len;i++)
 8001486:	b2c9      	uxtb	r1, r1
 8001488:	e7d3      	b.n	8001432 <HexToInt+0xa>
		case '3': tmp=3; break;
 800148a:	2303      	movs	r3, #3
 800148c:	e7f7      	b.n	800147e <HexToInt+0x56>
		case '4': tmp=4; break;
 800148e:	2304      	movs	r3, #4
 8001490:	e7f5      	b.n	800147e <HexToInt+0x56>
		case '5': tmp=5; break;
 8001492:	2305      	movs	r3, #5
 8001494:	e7f3      	b.n	800147e <HexToInt+0x56>
		case '6': tmp=6; break;
 8001496:	2306      	movs	r3, #6
 8001498:	e7f1      	b.n	800147e <HexToInt+0x56>
		case '7': tmp=7; break;
 800149a:	2307      	movs	r3, #7
 800149c:	e7ef      	b.n	800147e <HexToInt+0x56>
		case '8': tmp=8; break;
 800149e:	2308      	movs	r3, #8
 80014a0:	e7ed      	b.n	800147e <HexToInt+0x56>
		case '9': tmp=9; break;
 80014a2:	2309      	movs	r3, #9
 80014a4:	e7eb      	b.n	800147e <HexToInt+0x56>
		case 'a': tmp=10; break;
 80014a6:	230a      	movs	r3, #10
 80014a8:	e7e9      	b.n	800147e <HexToInt+0x56>
		case 'b': tmp=11; break;
 80014aa:	230b      	movs	r3, #11
 80014ac:	e7e7      	b.n	800147e <HexToInt+0x56>
		case 'c': tmp=12; break;
 80014ae:	230c      	movs	r3, #12
 80014b0:	e7e5      	b.n	800147e <HexToInt+0x56>
		case 'd': tmp=13; break;
 80014b2:	230d      	movs	r3, #13
 80014b4:	e7e3      	b.n	800147e <HexToInt+0x56>
		case 'e': tmp=14; break;
 80014b6:	230e      	movs	r3, #14
 80014b8:	e7e1      	b.n	800147e <HexToInt+0x56>
		case 'f': tmp=15; break;
 80014ba:	230f      	movs	r3, #15
 80014bc:	e7df      	b.n	800147e <HexToInt+0x56>
			Error_Handler();
 80014be:	f003 f83f 	bl	8004540 <Error_Handler>
			return 0xFFFFFFFF;
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return value;
}
 80014c6:	bd10      	pop	{r4, pc}
		case '0': tmp=0; break;
 80014c8:	2300      	movs	r3, #0
 80014ca:	e7d8      	b.n	800147e <HexToInt+0x56>
		case '2': tmp=2; break;
 80014cc:	2302      	movs	r3, #2
 80014ce:	e7d6      	b.n	800147e <HexToInt+0x56>

080014d0 <delayMicro>:
	    {
	      tick++;
	    }
	    tick = 0;
	  }
}
 80014d0:	4770      	bx	lr

080014d2 <writeToEeprom>:
* @brief Writes data array to external EEPROM
* @param None
* @retval None
*/
void writeToEeprom(uint8_t to, uint8_t* from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
 80014d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014d6:	4606      	mov	r6, r0
 80014d8:	460f      	mov	r7, r1
 80014da:	4614      	mov	r4, r2
 80014dc:	4698      	mov	r8, r3
	uint8_t bytesLeft=size;
	uint8_t part;
	uint8_t shift=0;
 80014de:	2500      	movs	r5, #0
	while(bytesLeft)
	{
		part=(bytesLeft>16)?16:bytesLeft;
		HAL_I2C_Mem_Write(hi2c, 0xA0, to+shift, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 80014e0:	f04f 0932 	mov.w	r9, #50	; 0x32
	while(bytesLeft)
 80014e4:	b914      	cbnz	r4, 80014ec <writeToEeprom+0x1a>
		bytesLeft-=part;
		shift+=part;
		HAL_Delay(5);
	}
}
 80014e6:	b004      	add	sp, #16
 80014e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		part=(bytesLeft>16)?16:bytesLeft;
 80014ec:	2c10      	cmp	r4, #16
 80014ee:	46a2      	mov	sl, r4
 80014f0:	bf28      	it	cs
 80014f2:	f04f 0a10 	movcs.w	sl, #16
		HAL_I2C_Mem_Write(hi2c, 0xA0, to+shift, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 80014f6:	197b      	adds	r3, r7, r5
 80014f8:	1972      	adds	r2, r6, r5
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	21a0      	movs	r1, #160	; 0xa0
 80014fe:	2301      	movs	r3, #1
 8001500:	4640      	mov	r0, r8
 8001502:	e9cd a901 	strd	sl, r9, [sp, #4]
 8001506:	f005 fadf 	bl	8006ac8 <HAL_I2C_Mem_Write>
		bytesLeft-=part;
 800150a:	eba4 040a 	sub.w	r4, r4, sl
		shift+=part;
 800150e:	eb05 020a 	add.w	r2, r5, sl
		HAL_Delay(5);
 8001512:	2005      	movs	r0, #5
		bytesLeft-=part;
 8001514:	b2e4      	uxtb	r4, r4
		shift+=part;
 8001516:	b2d5      	uxtb	r5, r2
		HAL_Delay(5);
 8001518:	f004 fa2c 	bl	8005974 <HAL_Delay>
 800151c:	e7e2      	b.n	80014e4 <writeToEeprom+0x12>

0800151e <readFromEeprom>:
* @param None
* @retval None
*/

void readFromEeprom(uint8_t* to, uint8_t from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
 800151e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001522:	4606      	mov	r6, r0
 8001524:	460f      	mov	r7, r1
 8001526:	4614      	mov	r4, r2
 8001528:	4698      	mov	r8, r3
	uint8_t bytesLeft=size;
	uint8_t part;
	uint8_t shift=0;
 800152a:	2500      	movs	r5, #0
	while(bytesLeft)
	{
		part=(bytesLeft>16)?16:bytesLeft;
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 800152c:	f04f 0932 	mov.w	r9, #50	; 0x32
	while(bytesLeft)
 8001530:	b914      	cbnz	r4, 8001538 <readFromEeprom+0x1a>
		bytesLeft-=part;
		shift+=part;
		HAL_Delay(5);
	}
}
 8001532:	b004      	add	sp, #16
 8001534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		part=(bytesLeft>16)?16:bytesLeft;
 8001538:	2c10      	cmp	r4, #16
 800153a:	46a2      	mov	sl, r4
 800153c:	bf28      	it	cs
 800153e:	f04f 0a10 	movcs.w	sl, #16
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8001542:	1973      	adds	r3, r6, r5
 8001544:	197a      	adds	r2, r7, r5
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	21a0      	movs	r1, #160	; 0xa0
 800154a:	2301      	movs	r3, #1
 800154c:	4640      	mov	r0, r8
 800154e:	e9cd a901 	strd	sl, r9, [sp, #4]
 8001552:	f005 fb49 	bl	8006be8 <HAL_I2C_Mem_Read>
		bytesLeft-=part;
 8001556:	eba4 040a 	sub.w	r4, r4, sl
		shift+=part;
 800155a:	eb05 020a 	add.w	r2, r5, sl
		HAL_Delay(5);
 800155e:	2005      	movs	r0, #5
		bytesLeft-=part;
 8001560:	b2e4      	uxtb	r4, r4
		shift+=part;
 8001562:	b2d5      	uxtb	r5, r2
		HAL_Delay(5);
 8001564:	f004 fa06 	bl	8005974 <HAL_Delay>
 8001568:	e7e2      	b.n	8001530 <readFromEeprom+0x12>
	...

0800156c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int fd, char *ptr, int len)
{
 800156c:	b510      	push	{r4, lr}
 800156e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 1000);
 8001570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001574:	b292      	uxth	r2, r2
 8001576:	4802      	ldr	r0, [pc, #8]	; (8001580 <_write+0x14>)
 8001578:	f006 fd80 	bl	800807c <HAL_UART_Transmit>
	return len;
}
 800157c:	4620      	mov	r0, r4
 800157e:	bd10      	pop	{r4, pc}
 8001580:	20000c30 	.word	0x20000c30

08001584 <eraseNodeData>:
	return ch;
}

void eraseNodeData()
{
	for (int i = 0; i < MAX_NODES; ++i)
 8001584:	2200      	movs	r2, #0
 8001586:	4906      	ldr	r1, [pc, #24]	; (80015a0 <eraseNodeData+0x1c>)
	{
		nodeData[i].disarmRequest = 0;
		nodeData[i].disarmed = 0;
		nodeData[i].masked = 0;
 8001588:	5c53      	ldrb	r3, [r2, r1]
 800158a:	f023 030f 	bic.w	r3, r3, #15
 800158e:	5453      	strb	r3, [r2, r1]
	for (int i = 0; i < MAX_NODES; ++i)
 8001590:	3201      	adds	r2, #1
 8001592:	2a08      	cmp	r2, #8
 8001594:	d1f8      	bne.n	8001588 <eraseNodeData+0x4>
	}
	writeToEeprom(0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8001596:	2000      	movs	r0, #0
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <eraseNodeData+0x20>)
 800159a:	4901      	ldr	r1, [pc, #4]	; (80015a0 <eraseNodeData+0x1c>)
 800159c:	f7ff bf99 	b.w	80014d2 <writeToEeprom>
 80015a0:	20000de0 	.word	0x20000de0
 80015a4:	20000ae0 	.word	0x20000ae0

080015a8 <saveNodeData>:
}

void saveNodeData()
{
	for (int i = 0; i < MAX_NODES; ++i)
 80015a8:	2200      	movs	r2, #0
{
 80015aa:	b410      	push	{r4}
 80015ac:	490e      	ldr	r1, [pc, #56]	; (80015e8 <saveNodeData+0x40>)
 80015ae:	4c0f      	ldr	r4, [pc, #60]	; (80015ec <saveNodeData+0x44>)
	{
		nodeData[i].disarmRequest = nodes[i].disarmRequest;
		nodeData[i].disarmed = nodes[i].disarmed;
		nodeData[i].masked = nodes[i].masked;
 80015b0:	7b4b      	ldrb	r3, [r1, #13]
 80015b2:	7b08      	ldrb	r0, [r1, #12]
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	f000 0003 	and.w	r0, r0, #3
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	4303      	orrs	r3, r0
 80015c0:	7b88      	ldrb	r0, [r1, #14]
 80015c2:	3120      	adds	r1, #32
 80015c4:	00c0      	lsls	r0, r0, #3
 80015c6:	f000 0008 	and.w	r0, r0, #8
 80015ca:	4303      	orrs	r3, r0
 80015cc:	5d10      	ldrb	r0, [r2, r4]
 80015ce:	f020 000f 	bic.w	r0, r0, #15
 80015d2:	4303      	orrs	r3, r0
 80015d4:	5513      	strb	r3, [r2, r4]
	for (int i = 0; i < MAX_NODES; ++i)
 80015d6:	3201      	adds	r2, #1
 80015d8:	2a08      	cmp	r2, #8
 80015da:	d1e9      	bne.n	80015b0 <saveNodeData+0x8>
	}
	writeToEeprom(0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 80015dc:	2000      	movs	r0, #0
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <saveNodeData+0x48>)
 80015e0:	4902      	ldr	r1, [pc, #8]	; (80015ec <saveNodeData+0x44>)
}
 80015e2:	bc10      	pop	{r4}
	writeToEeprom(0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 80015e4:	f7ff bf75 	b.w	80014d2 <writeToEeprom>
 80015e8:	20000ce0 	.word	0x20000ce0
 80015ec:	20000de0 	.word	0x20000de0
 80015f0:	20000ae0 	.word	0x20000ae0

080015f4 <loadNodeData>:

void loadNodeData()
{
	readFromEeprom((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 80015f4:	2100      	movs	r1, #0
{
 80015f6:	b510      	push	{r4, lr}
	readFromEeprom((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <loadNodeData+0x34>)
 80015fa:	2208      	movs	r2, #8
 80015fc:	480b      	ldr	r0, [pc, #44]	; (800162c <loadNodeData+0x38>)
 80015fe:	f7ff ff8e 	bl	800151e <readFromEeprom>
	for (int i = 0; i < MAX_NODES; ++i)
 8001602:	2100      	movs	r1, #0
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <loadNodeData+0x3c>)
	{
		nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8001606:	4c09      	ldr	r4, [pc, #36]	; (800162c <loadNodeData+0x38>)
 8001608:	5c62      	ldrb	r2, [r4, r1]
	for (int i = 0; i < MAX_NODES; ++i)
 800160a:	3101      	adds	r1, #1
		nodes[i].disarmRequest = nodeData[i].disarmRequest;
 800160c:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8001610:	7398      	strb	r0, [r3, #14]
	for (int i = 0; i < MAX_NODES; ++i)
 8001612:	2908      	cmp	r1, #8
		nodes[i].disarmed = nodeData[i].disarmed;
 8001614:	f3c2 0080 	ubfx	r0, r2, #2, #1
		nodes[i].masked = nodeData[i].masked;
 8001618:	f3c2 0201 	ubfx	r2, r2, #0, #2
		nodes[i].disarmed = nodeData[i].disarmed;
 800161c:	7358      	strb	r0, [r3, #13]
		nodes[i].masked = nodeData[i].masked;
 800161e:	731a      	strb	r2, [r3, #12]
	for (int i = 0; i < MAX_NODES; ++i)
 8001620:	f103 0320 	add.w	r3, r3, #32
 8001624:	d1f0      	bne.n	8001608 <loadNodeData+0x14>
	}

}
 8001626:	bd10      	pop	{r4, pc}
 8001628:	20000ae0 	.word	0x20000ae0
 800162c:	20000de0 	.word	0x20000de0
 8001630:	20000ce0 	.word	0x20000ce0

08001634 <HAL_UART_RxCpltCallback>:
 * @brief Callback for UART interrupt
 * @param  *huart - uart handler
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001634:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT(&huart1, &uartIn, 1);
 8001636:	2201      	movs	r2, #1
 8001638:	4905      	ldr	r1, [pc, #20]	; (8001650 <HAL_UART_RxCpltCallback+0x1c>)
 800163a:	4806      	ldr	r0, [pc, #24]	; (8001654 <HAL_UART_RxCpltCallback+0x20>)
 800163c:	f006 fee9 	bl	8008412 <HAL_UART_Receive_IT>
	lastUartConnect = HAL_GetTick();
 8001640:	f004 f992 	bl	8005968 <HAL_GetTick>
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_UART_RxCpltCallback+0x24>)
 8001646:	6018      	str	r0, [r3, #0]
	readByte();
}
 8001648:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	readByte();
 800164c:	f003 bdbe 	b.w	80051cc <readByte>
 8001650:	20000b98 	.word	0x20000b98
 8001654:	20000c30 	.word	0x20000c30
 8001658:	200015c0 	.word	0x200015c0

0800165c <defaultSettings>:
 * @brief sets settings to default values
 * @param None
 * @retval None
 */
void defaultSettings()
{
 800165c:	b510      	push	{r4, lr}
	settings.power = SX127X_POWER_20DBM;
	settings.sf = SX127X_LORA_SF_12;
	settings.preamble = 5;
	settings.superWarningDelay = SUPER_WARNING_DELAY;
	settings.syncWord = 0x1;
	settings.warningDelay = WARNING_DELAY;
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <defaultSettings+0x4c>)
	settings.realFrequency = DEF_FREQUENCY;
 8001660:	4c12      	ldr	r4, [pc, #72]	; (80016ac <defaultSettings+0x50>)
	settings.warningDelay = WARNING_DELAY;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <defaultSettings+0x54>)
	settings.realFrequency = DEF_FREQUENCY;
	settings.baseID = 1;
	sprintf(settings.SSID, "EXEcutor");
 8001664:	4913      	ldr	r1, [pc, #76]	; (80016b4 <defaultSettings+0x58>)
	settings.warningDelay = WARNING_DELAY;
 8001666:	e9c4 2300 	strd	r2, r3, [r4]
	settings.superWarningDelay = SUPER_WARNING_DELAY;
 800166a:	f503 2312 	add.w	r3, r3, #598016	; 0x92000
 800166e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8001672:	60a3      	str	r3, [r4, #8]
	settings.preamble = 5;
 8001674:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <defaultSettings+0x5c>)
	sprintf(settings.SSID, "EXEcutor");
 8001676:	f104 0013 	add.w	r0, r4, #19
	settings.preamble = 5;
 800167a:	60e3      	str	r3, [r4, #12]
	settings.cr = SX127X_CR_4_8;
 800167c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001680:	8223      	strh	r3, [r4, #16]
	settings.power = SX127X_POWER_20DBM;
 8001682:	2314      	movs	r3, #20
 8001684:	74a3      	strb	r3, [r4, #18]
	settings.baseID = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	6663      	str	r3, [r4, #100]	; 0x64
	sprintf(settings.SSID, "EXEcutor");
 800168a:	f006 ffc9 	bl	8008620 <strcpy>
	sprintf(settings.WiFiPass, "executor");
 800168e:	490b      	ldr	r1, [pc, #44]	; (80016bc <defaultSettings+0x60>)
 8001690:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8001694:	f006 ffc4 	bl	8008620 <strcpy>
	sprintf(settings.ServerPass, "12345");
 8001698:	f104 0033 	add.w	r0, r4, #51	; 0x33
 800169c:	4908      	ldr	r1, [pc, #32]	; (80016c0 <defaultSettings+0x64>)

}
 800169e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sprintf(settings.ServerPass, "12345");
 80016a2:	f006 bfbd 	b.w	8008620 <strcpy>
 80016a6:	bf00      	nop
 80016a8:	33c8d600 	.word	0x33c8d600
 80016ac:	20000a78 	.word	0x20000a78
 80016b0:	0009eb10 	.word	0x0009eb10
 80016b4:	0800a83e 	.word	0x0800a83e
 80016b8:	070c0005 	.word	0x070c0005
 80016bc:	0800a847 	.word	0x0800a847
 80016c0:	0800a850 	.word	0x0800a850

080016c4 <clearStrings>:
 * @param None
 * @retval None
 */
void clearStrings()
{
	memset(string, 0, sizeof(string));
 80016c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c8:	2100      	movs	r1, #0
 80016ca:	4801      	ldr	r0, [pc, #4]	; (80016d0 <clearStrings+0xc>)
 80016cc:	f006 bef2 	b.w	80084b4 <memset>
 80016d0:	20000168 	.word	0x20000168

080016d4 <setCursor>:
}

void setCursor(char *string, int8_t pos)
{
	for (int i = 0; i < pos; i++)
 80016d4:	2300      	movs	r3, #0
		string[i] = ' ';
 80016d6:	2220      	movs	r2, #32
	for (int i = 0; i < pos; i++)
 80016d8:	4299      	cmp	r1, r3
 80016da:	dc02      	bgt.n	80016e2 <setCursor+0xe>
	string[pos] = '^';
 80016dc:	235e      	movs	r3, #94	; 0x5e
 80016de:	5443      	strb	r3, [r0, r1]
}
 80016e0:	4770      	bx	lr
		string[i] = ' ';
 80016e2:	54c2      	strb	r2, [r0, r3]
	for (int i = 0; i < pos; i++)
 80016e4:	3301      	adds	r3, #1
 80016e6:	e7f7      	b.n	80016d8 <setCursor+0x4>

080016e8 <updateLcd>:
 * @brief Writes string[0]..string[3] to all screens
 * @param None
 * @retval None
 */
void updateLcd()
{
 80016e8:	b570      	push	{r4, r5, r6, lr}
 80016ea:	4d13      	ldr	r5, [pc, #76]	; (8001738 <updateLcd+0x50>)
	ssd1306_Clean();
 80016ec:	f002 fff4 	bl	80046d8 <ssd1306_Clean>
 80016f0:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 80016f2:	2400      	movs	r4, #0
	{
		ssd1306_GotoXY(0, i);
 80016f4:	4621      	mov	r1, r4
 80016f6:	2000      	movs	r0, #0
 80016f8:	f002 ff92 	bl	8004620 <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 80016fc:	3401      	adds	r4, #1
		ssd1306_PutString(string[i]);
 80016fe:	4630      	mov	r0, r6
 8001700:	f002 ffd0 	bl	80046a4 <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8001704:	2c08      	cmp	r4, #8
 8001706:	f106 0640 	add.w	r6, r6, #64	; 0x40
 800170a:	d1f3      	bne.n	80016f4 <updateLcd+0xc>
	}

	ssd1306_Update();
 800170c:	f002 fff2 	bl	80046f4 <ssd1306_Update>

	UC1609_Clean();

	for (int i = 0; i < 8; i++)
 8001710:	2400      	movs	r4, #0
	UC1609_Clean();
 8001712:	f7ff fdb5 	bl	8001280 <UC1609_Clean>
	{
		UC1609_SetPos(0, i);
 8001716:	b2e1      	uxtb	r1, r4
 8001718:	2000      	movs	r0, #0
 800171a:	f7ff fd73 	bl	8001204 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 800171e:	3401      	adds	r4, #1
		UC1609_PutString(string[i]);
 8001720:	4628      	mov	r0, r5
 8001722:	f7ff fdf5 	bl	8001310 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8001726:	2c08      	cmp	r4, #8
 8001728:	f105 0540 	add.w	r5, r5, #64	; 0x40
 800172c:	d1f3      	bne.n	8001716 <updateLcd+0x2e>
	}
	UC1609_UpdateScreen();

}
 800172e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	UC1609_UpdateScreen();
 8001732:	f7ff bd73 	b.w	800121c <UC1609_UpdateScreen>
 8001736:	bf00      	nop
 8001738:	20000168 	.word	0x20000168

0800173c <settingsInitiate>:
 * @brief Initiates settings from settings structure to radio structure
 * @param None
 * @retval None
 */
void settingsInitiate()
{
 800173c:	b538      	push	{r3, r4, r5, lr}
	myRadio.sf = settings.sf;
 800173e:	4d0c      	ldr	r5, [pc, #48]	; (8001770 <settingsInitiate+0x34>)
 8001740:	4c0c      	ldr	r4, [pc, #48]	; (8001774 <settingsInitiate+0x38>)
 8001742:	7bab      	ldrb	r3, [r5, #14]
	myRadio.bw = settings.bw;
	myRadio.cr = settings.cr;
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8001744:	6828      	ldr	r0, [r5, #0]
	myRadio.sf = settings.sf;
 8001746:	7163      	strb	r3, [r4, #5]
	myRadio.bw = settings.bw;
 8001748:	7beb      	ldrb	r3, [r5, #15]
 800174a:	71a3      	strb	r3, [r4, #6]
	myRadio.cr = settings.cr;
 800174c:	7c2b      	ldrb	r3, [r5, #16]
 800174e:	71e3      	strb	r3, [r4, #7]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8001750:	f7ff f9a2 	bl	8000a98 <__aeabi_ui2f>
 8001754:	4908      	ldr	r1, [pc, #32]	; (8001778 <settingsInitiate+0x3c>)
 8001756:	f7ff faab 	bl	8000cb0 <__aeabi_fdiv>
 800175a:	f7ff fbe1 	bl	8000f20 <__aeabi_f2uiz>
	myRadio.preamble = settings.preamble;
 800175e:	89ab      	ldrh	r3, [r5, #12]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8001760:	6020      	str	r0, [r4, #0]
	myRadio.preamble = settings.preamble;
 8001762:	81a3      	strh	r3, [r4, #12]
	myRadio.power = settings.power;
 8001764:	7cab      	ldrb	r3, [r5, #18]
 8001766:	7123      	strb	r3, [r4, #4]
	myRadio.syncWord = settings.syncWord;
 8001768:	7c6b      	ldrb	r3, [r5, #17]
 800176a:	73a3      	strb	r3, [r4, #14]
	myRadio.preamble = settings.preamble;
}
 800176c:	bd38      	pop	{r3, r4, r5, pc}
 800176e:	bf00      	nop
 8001770:	20000a78 	.word	0x20000a78
 8001774:	20000998 	.word	0x20000998
 8001778:	427423d7 	.word	0x427423d7

0800177c <tryLoadSettings>:
 * @brief tries to load settings from page 63 flash memory
 * @param None
 * @retval 1 - success 0 - fail
 */
bool tryLoadSettings()
{
 800177c:	b538      	push	{r3, r4, r5, lr}
	if (flashSettings->realFrequency >= MIN_FREQUENCY
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <tryLoadSettings+0x94>)
 8001780:	4a24      	ldr	r2, [pc, #144]	; (8001814 <tryLoadSettings+0x98>)
 8001782:	6819      	ldr	r1, [r3, #0]
			&& flashSettings->realFrequency <= MAX_FREQUENCY)
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <tryLoadSettings+0x9c>)
	if (flashSettings->realFrequency >= MIN_FREQUENCY
 8001786:	6808      	ldr	r0, [r1, #0]
			&& flashSettings->realFrequency <= MAX_FREQUENCY)
 8001788:	4403      	add	r3, r0
	if (flashSettings->realFrequency >= MIN_FREQUENCY
 800178a:	4293      	cmp	r3, r2
 800178c:	d83d      	bhi.n	800180a <tryLoadSettings+0x8e>
		if (flashSettings->sf > 6 && flashSettings->sf < 13)
 800178e:	7b8b      	ldrb	r3, [r1, #14]
 8001790:	3b07      	subs	r3, #7
 8001792:	2b05      	cmp	r3, #5
 8001794:	d839      	bhi.n	800180a <tryLoadSettings+0x8e>
			if (flashSettings->bw < 10)
 8001796:	7bcb      	ldrb	r3, [r1, #15]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d836      	bhi.n	800180a <tryLoadSettings+0x8e>
				if (flashSettings->cr > 0 && flashSettings->cr < 5)
 800179c:	7c0b      	ldrb	r3, [r1, #16]
 800179e:	3b01      	subs	r3, #1
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d832      	bhi.n	800180a <tryLoadSettings+0x8e>
					if (flashSettings->preamble > 1
 80017a4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
							&& flashSettings->preamble < 65535)
 80017a8:	898b      	ldrh	r3, [r1, #12]
 80017aa:	3b02      	subs	r3, #2
 80017ac:	b29b      	uxth	r3, r3
					if (flashSettings->preamble > 1
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d82b      	bhi.n	800180a <tryLoadSettings+0x8e>
						if (flashSettings->realFrequency > MIN_FREQUENCY
								&& flashSettings->realFrequency < MAX_FREQUENCY)
 80017b2:	4a1a      	ldr	r2, [pc, #104]	; (800181c <tryLoadSettings+0xa0>)
 80017b4:	4402      	add	r2, r0
						if (flashSettings->realFrequency > MIN_FREQUENCY
 80017b6:	481a      	ldr	r0, [pc, #104]	; (8001820 <tryLoadSettings+0xa4>)
 80017b8:	4282      	cmp	r2, r0
 80017ba:	d226      	bcs.n	800180a <tryLoadSettings+0x8e>
							if (flashSettings->syncWord != 0x34
 80017bc:	7c4a      	ldrb	r2, [r1, #17]
 80017be:	2a34      	cmp	r2, #52	; 0x34
 80017c0:	d023      	beq.n	800180a <tryLoadSettings+0x8e>
									&& flashSettings->syncWord != 0x55
 80017c2:	2a55      	cmp	r2, #85	; 0x55
 80017c4:	d021      	beq.n	800180a <tryLoadSettings+0x8e>
									&& flashSettings->syncWord != 0xAA)
 80017c6:	2aaa      	cmp	r2, #170	; 0xaa
 80017c8:	d01f      	beq.n	800180a <tryLoadSettings+0x8e>
								if (flashSettings->power < 21
										|| flashSettings->power > 9)
									if (flashSettings->warningDelay
 80017ca:	684d      	ldr	r5, [r1, #4]
 80017cc:	4a15      	ldr	r2, [pc, #84]	; (8001824 <tryLoadSettings+0xa8>)
											> MIN_WARNING_DELAY
											&& flashSettings->warningDelay
 80017ce:	f5a5 406a 	sub.w	r0, r5, #59904	; 0xea00
 80017d2:	3861      	subs	r0, #97	; 0x61
									if (flashSettings->warningDelay
 80017d4:	4290      	cmp	r0, r2
 80017d6:	d818      	bhi.n	800180a <tryLoadSettings+0x8e>
													< MAX_WARNING_DELAY)
										if (flashSettings->superWarningDelay
 80017d8:	688c      	ldr	r4, [r1, #8]
												> MIN_WARNING_DELAY
												&& flashSettings->superWarningDelay
 80017da:	f5a4 406a 	sub.w	r0, r4, #59904	; 0xea00
 80017de:	3861      	subs	r0, #97	; 0x61
										if (flashSettings->superWarningDelay
 80017e0:	4290      	cmp	r0, r2
 80017e2:	d812      	bhi.n	800180a <tryLoadSettings+0x8e>
														< MAX_WARNING_DELAY)
											if (flashSettings->superWarningDelay
 80017e4:	42a5      	cmp	r5, r4
 80017e6:	d210      	bcs.n	800180a <tryLoadSettings+0x8e>
													> flashSettings->warningDelay)
												if (flashSettings->preamble
 80017e8:	f240 32e6 	movw	r2, #998	; 0x3e6
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d80c      	bhi.n	800180a <tryLoadSettings+0x8e>
														>= MIN_PREAMBLE
														&& flashSettings->preamble
																<= MAX_PREAMBLE)
													if (flashSettings->baseID
															> 0&& flashSettings->baseID < MAX_BASEID)
 80017f0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
													if (flashSettings->baseID
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <tryLoadSettings+0xac>)
															> 0&& flashSettings->baseID < MAX_BASEID)
 80017f4:	3b01      	subs	r3, #1
													if (flashSettings->baseID
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d807      	bhi.n	800180a <tryLoadSettings+0x8e>
													{
														settings =
 80017fa:	2268      	movs	r2, #104	; 0x68
 80017fc:	480b      	ldr	r0, [pc, #44]	; (800182c <tryLoadSettings+0xb0>)
 80017fe:	f006 fe4b 	bl	8008498 <memcpy>
																*flashSettings;
														settingsInitiate();
 8001802:	f7ff ff9b 	bl	800173c <settingsInitiate>
														return true;
 8001806:	2001      	movs	r0, #1
													}
	return false;
}
 8001808:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 800180a:	2000      	movs	r0, #0
 800180c:	e7fc      	b.n	8001808 <tryLoadSettings+0x8c>
 800180e:	bf00      	nop
 8001810:	20000028 	.word	0x20000028
 8001814:	3351d140 	.word	0x3351d140
 8001818:	f7c64980 	.word	0xf7c64980
 800181c:	f7c6497f 	.word	0xf7c6497f
 8001820:	3351d13f 	.word	0x3351d13f
 8001824:	0292439e 	.word	0x0292439e
 8001828:	0098967d 	.word	0x0098967d
 800182c:	20000a78 	.word	0x20000a78

08001830 <saveSettings>:
 * @brief Saves current device settings from RAM to page 63 of internal flash
 * @param None
 * @retval None
 */
void saveSettings()
{
 8001830:	b570      	push	{r4, r5, r6, lr}
	uint16_t i = 0;
	uint16_t const settingsSize = (sizeof(baseSettings_t) + 3) / 4;
	FLASH_EraseInitTypeDef eraseInit;
	uint32_t pageError;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
	eraseInit.PageAddress = (uint32_t) flashSettings;
 8001832:	4d10      	ldr	r5, [pc, #64]	; (8001874 <saveSettings+0x44>)
{
 8001834:	b086      	sub	sp, #24
	eraseInit.PageAddress = (uint32_t) flashSettings;
 8001836:	682b      	ldr	r3, [r5, #0]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001838:	2400      	movs	r4, #0
	eraseInit.PageAddress = (uint32_t) flashSettings;
 800183a:	9304      	str	r3, [sp, #16]
	eraseInit.NbPages = 1;
 800183c:	2301      	movs	r3, #1
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800183e:	9402      	str	r4, [sp, #8]
	eraseInit.NbPages = 1;
 8001840:	9305      	str	r3, [sp, #20]
	HAL_FLASH_Unlock();
 8001842:	f004 fcc1 	bl	80061c8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8001846:	a901      	add	r1, sp, #4
 8001848:	a802      	add	r0, sp, #8
 800184a:	f004 fd79 	bl	8006340 <HAL_FLASHEx_Erase>
	for (i = 0; i < settingsSize; i++)
 800184e:	4e0a      	ldr	r6, [pc, #40]	; (8001878 <saveSettings+0x48>)
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 8001850:	6829      	ldr	r1, [r5, #0]
 8001852:	2300      	movs	r3, #0
 8001854:	4421      	add	r1, r4
 8001856:	2002      	movs	r0, #2
 8001858:	f856 2b04 	ldr.w	r2, [r6], #4
 800185c:	3404      	adds	r4, #4
 800185e:	f004 fcf9 	bl	8006254 <HAL_FLASH_Program>
	for (i = 0; i < settingsSize; i++)
 8001862:	2c68      	cmp	r4, #104	; 0x68
 8001864:	d1f4      	bne.n	8001850 <saveSettings+0x20>
				((uint32_t) flashSettings) + 4 * i,
				*(((uint32_t*) &settings) + i));
	HAL_FLASH_Lock();
 8001866:	f004 fcc1 	bl	80061ec <HAL_FLASH_Lock>
	settingsInitiate();
 800186a:	f7ff ff67 	bl	800173c <settingsInitiate>
}
 800186e:	b006      	add	sp, #24
 8001870:	bd70      	pop	{r4, r5, r6, pc}
 8001872:	bf00      	nop
 8001874:	20000028 	.word	0x20000028
 8001878:	20000a78 	.word	0x20000a78

0800187c <encoderPinChanged>:
	static uint8_t right;
	static uint8_t left;
	static uint16_t lastStatus;
	static uint8_t r = 0;
	static uint8_t l = 0;
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 800187c:	4b32      	ldr	r3, [pc, #200]	; (8001948 <encoderPinChanged+0xcc>)
{
 800187e:	b530      	push	{r4, r5, lr}
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a32      	ldr	r2, [pc, #200]	; (800194c <encoderPinChanged+0xd0>)
 8001884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00

	switch (status)
 8001888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800188c:	d04d      	beq.n	800192a <encoderPinChanged+0xae>
 800188e:	d806      	bhi.n	800189e <encoderPinChanged+0x22>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d03c      	beq.n	800190e <encoderPinChanged+0x92>
 8001894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001898:	d020      	beq.n	80018dc <encoderPinChanged+0x60>
			left++;
			l = 1;
			r = 0;
		}
	}
	lastStatus = status;
 800189a:	8013      	strh	r3, [r2, #0]
}
 800189c:	bd30      	pop	{r4, r5, pc}
	switch (status)
 800189e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80018a2:	d1fa      	bne.n	800189a <encoderPinChanged+0x1e>
		if (right > 2)
 80018a4:	4c2a      	ldr	r4, [pc, #168]	; (8001950 <encoderPinChanged+0xd4>)
 80018a6:	7820      	ldrb	r0, [r4, #0]
 80018a8:	2802      	cmp	r0, #2
			flag.encDec = 1;
 80018aa:	bf81      	itttt	hi
 80018ac:	4829      	ldrhi	r0, [pc, #164]	; (8001954 <encoderPinChanged+0xd8>)
 80018ae:	7801      	ldrbhi	r1, [r0, #0]
 80018b0:	f041 0102 	orrhi.w	r1, r1, #2
 80018b4:	7001      	strbhi	r1, [r0, #0]
		if (left > 2)
 80018b6:	4928      	ldr	r1, [pc, #160]	; (8001958 <encoderPinChanged+0xdc>)
 80018b8:	7808      	ldrb	r0, [r1, #0]
 80018ba:	2802      	cmp	r0, #2
			flag.encInc = 1;
 80018bc:	bf88      	it	hi
 80018be:	4d25      	ldrhi	r5, [pc, #148]	; (8001954 <encoderPinChanged+0xd8>)
 80018c0:	4608      	mov	r0, r1
 80018c2:	bf82      	ittt	hi
 80018c4:	7829      	ldrbhi	r1, [r5, #0]
 80018c6:	f041 0101 	orrhi.w	r1, r1, #1
 80018ca:	7029      	strbhi	r1, [r5, #0]
		right = 0;
 80018cc:	2100      	movs	r1, #0
		left = 0;
 80018ce:	7001      	strb	r1, [r0, #0]
		r = 0;
 80018d0:	4822      	ldr	r0, [pc, #136]	; (800195c <encoderPinChanged+0xe0>)
		right = 0;
 80018d2:	7021      	strb	r1, [r4, #0]
		r = 0;
 80018d4:	7001      	strb	r1, [r0, #0]
		l = 0;
 80018d6:	4822      	ldr	r0, [pc, #136]	; (8001960 <encoderPinChanged+0xe4>)
			right++;
 80018d8:	7001      	strb	r1, [r0, #0]
 80018da:	e7de      	b.n	800189a <encoderPinChanged+0x1e>
		if (lastStatus == 0xC00)
 80018dc:	8811      	ldrh	r1, [r2, #0]
 80018de:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80018e2:	d10a      	bne.n	80018fa <encoderPinChanged+0x7e>
			right++;
 80018e4:	481a      	ldr	r0, [pc, #104]	; (8001950 <encoderPinChanged+0xd4>)
 80018e6:	7801      	ldrb	r1, [r0, #0]
 80018e8:	3101      	adds	r1, #1
 80018ea:	7001      	strb	r1, [r0, #0]
			r = 1;
 80018ec:	2001      	movs	r0, #1
 80018ee:	491b      	ldr	r1, [pc, #108]	; (800195c <encoderPinChanged+0xe0>)
 80018f0:	7008      	strb	r0, [r1, #0]
			l = 0;
 80018f2:	491b      	ldr	r1, [pc, #108]	; (8001960 <encoderPinChanged+0xe4>)
			r = 0;
 80018f4:	2000      	movs	r0, #0
 80018f6:	7008      	strb	r0, [r1, #0]
 80018f8:	e7cf      	b.n	800189a <encoderPinChanged+0x1e>
		if (lastStatus == 0 && l)
 80018fa:	2900      	cmp	r1, #0
 80018fc:	d1cd      	bne.n	800189a <encoderPinChanged+0x1e>
 80018fe:	4918      	ldr	r1, [pc, #96]	; (8001960 <encoderPinChanged+0xe4>)
 8001900:	7809      	ldrb	r1, [r1, #0]
 8001902:	2900      	cmp	r1, #0
 8001904:	d0c9      	beq.n	800189a <encoderPinChanged+0x1e>
			left++;
 8001906:	4814      	ldr	r0, [pc, #80]	; (8001958 <encoderPinChanged+0xdc>)
			right++;
 8001908:	7801      	ldrb	r1, [r0, #0]
 800190a:	3101      	adds	r1, #1
 800190c:	e7e4      	b.n	80018d8 <encoderPinChanged+0x5c>
		if (lastStatus == 0x400 && r)
 800190e:	8811      	ldrh	r1, [r2, #0]
 8001910:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001914:	d105      	bne.n	8001922 <encoderPinChanged+0xa6>
 8001916:	4911      	ldr	r1, [pc, #68]	; (800195c <encoderPinChanged+0xe0>)
 8001918:	7809      	ldrb	r1, [r1, #0]
 800191a:	2900      	cmp	r1, #0
 800191c:	d0bd      	beq.n	800189a <encoderPinChanged+0x1e>
			right++;
 800191e:	480c      	ldr	r0, [pc, #48]	; (8001950 <encoderPinChanged+0xd4>)
 8001920:	e7f2      	b.n	8001908 <encoderPinChanged+0x8c>
		if (lastStatus == 0x800 && l)
 8001922:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001926:	d0ea      	beq.n	80018fe <encoderPinChanged+0x82>
 8001928:	e7b7      	b.n	800189a <encoderPinChanged+0x1e>
		if ((lastStatus == 0x000) && r)
 800192a:	8811      	ldrh	r1, [r2, #0]
 800192c:	2900      	cmp	r1, #0
 800192e:	d0f2      	beq.n	8001916 <encoderPinChanged+0x9a>
		if (lastStatus == 0xC00)
 8001930:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8001934:	d1b1      	bne.n	800189a <encoderPinChanged+0x1e>
			left++;
 8001936:	4808      	ldr	r0, [pc, #32]	; (8001958 <encoderPinChanged+0xdc>)
 8001938:	7801      	ldrb	r1, [r0, #0]
 800193a:	3101      	adds	r1, #1
 800193c:	7001      	strb	r1, [r0, #0]
			l = 1;
 800193e:	2001      	movs	r0, #1
 8001940:	4907      	ldr	r1, [pc, #28]	; (8001960 <encoderPinChanged+0xe4>)
 8001942:	7008      	strb	r0, [r1, #0]
			r = 0;
 8001944:	4905      	ldr	r1, [pc, #20]	; (800195c <encoderPinChanged+0xe0>)
 8001946:	e7d5      	b.n	80018f4 <encoderPinChanged+0x78>
 8001948:	40010c08 	.word	0x40010c08
 800194c:	20000134 	.word	0x20000134
 8001950:	20000161 	.word	0x20000161
 8001954:	20000b4c 	.word	0x20000b4c
 8001958:	2000014e 	.word	0x2000014e
 800195c:	20000150 	.word	0x20000150
 8001960:	20000126 	.word	0x20000126

08001964 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin)
 8001964:	2804      	cmp	r0, #4
{
 8001966:	b510      	push	{r4, lr}
 8001968:	4604      	mov	r4, r0
	switch (GPIO_Pin)
 800196a:	d01d      	beq.n	80019a8 <HAL_GPIO_EXTI_Callback+0x44>
 800196c:	d802      	bhi.n	8001974 <HAL_GPIO_EXTI_Callback+0x10>
 800196e:	2802      	cmp	r0, #2
 8001970:	d00a      	beq.n	8001988 <HAL_GPIO_EXTI_Callback+0x24>
}
 8001972:	bd10      	pop	{r4, pc}
	switch (GPIO_Pin)
 8001974:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001978:	d002      	beq.n	8001980 <HAL_GPIO_EXTI_Callback+0x1c>
 800197a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800197e:	d1f8      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0xe>
}
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		encoderPinChanged();
 8001984:	f7ff bf7a 	b.w	800187c <encoderPinChanged>
		delayMicro(20000);
 8001988:	f644 6020 	movw	r0, #20000	; 0x4e20
 800198c:	f7ff fda0 	bl	80014d0 <delayMicro>
		if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001990:	4621      	mov	r1, r4
 8001992:	480d      	ldr	r0, [pc, #52]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x64>)
 8001994:	f004 fdfc 	bl	8006590 <HAL_GPIO_ReadPin>
 8001998:	2800      	cmp	r0, #0
 800199a:	d1ea      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0xe>
			flag.encOk = 1;
 800199c:	4a0b      	ldr	r2, [pc, #44]	; (80019cc <HAL_GPIO_EXTI_Callback+0x68>)
 800199e:	7813      	ldrb	r3, [r2, #0]
 80019a0:	f043 0304 	orr.w	r3, r3, #4
			flag.back = 1;
 80019a4:	7013      	strb	r3, [r2, #0]
 80019a6:	e7e4      	b.n	8001972 <HAL_GPIO_EXTI_Callback+0xe>
		delayMicro(20000);
 80019a8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80019ac:	f7ff fd90 	bl	80014d0 <delayMicro>
		if (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80019b0:	4621      	mov	r1, r4
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x64>)
 80019b4:	f004 fdec 	bl	8006590 <HAL_GPIO_ReadPin>
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1da      	bne.n	8001972 <HAL_GPIO_EXTI_Callback+0xe>
			flag.back = 1;
 80019bc:	4a03      	ldr	r2, [pc, #12]	; (80019cc <HAL_GPIO_EXTI_Callback+0x68>)
 80019be:	7813      	ldrb	r3, [r2, #0]
 80019c0:	f043 0308 	orr.w	r3, r3, #8
 80019c4:	e7ee      	b.n	80019a4 <HAL_GPIO_EXTI_Callback+0x40>
 80019c6:	bf00      	nop
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	20000b4c 	.word	0x20000b4c

080019d0 <nextNodeAwaited>:

uint8_t nextNodeAwaited()
{
 80019d0:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret = 255;
	int32_t minDelay = 0x40000000;
	uint32_t tick = HAL_GetTick();
 80019d2:	f003 ffc9 	bl	8005968 <HAL_GetTick>
	int32_t minDelay = 0x40000000;
 80019d6:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	uint32_t tick = HAL_GetTick();
 80019da:	4601      	mov	r1, r0
	for (int i = 0; i < MAX_NODES; i++)
 80019dc:	2300      	movs	r3, #0
	uint8_t ret = 255;
 80019de:	20ff      	movs	r0, #255	; 0xff
 80019e0:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <nextNodeAwaited+0x34>)
	{
		if (nodes[i].activated && (nodes[i].NextMessageTick - tick) < minDelay
 80019e2:	7c55      	ldrb	r5, [r2, #17]
 80019e4:	b13d      	cbz	r5, 80019f6 <nextNodeAwaited+0x26>
 80019e6:	6856      	ldr	r6, [r2, #4]
 80019e8:	1a75      	subs	r5, r6, r1
 80019ea:	42a5      	cmp	r5, r4
 80019ec:	d203      	bcs.n	80019f6 <nextNodeAwaited+0x26>
				&& (nodes[i].NextMessageTick - tick) > 0)
 80019ee:	428e      	cmp	r6, r1
		{
			ret = i;
			minDelay = nodes[i].NextMessageTick - tick;
 80019f0:	bf1c      	itt	ne
 80019f2:	462c      	movne	r4, r5
			ret = i;
 80019f4:	b2d8      	uxtbne	r0, r3
	for (int i = 0; i < MAX_NODES; i++)
 80019f6:	3301      	adds	r3, #1
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	f102 0220 	add.w	r2, r2, #32
 80019fe:	d1f0      	bne.n	80019e2 <nextNodeAwaited+0x12>
		}
	}
	return ret;
}
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
 8001a02:	bf00      	nop
 8001a04:	20000ce0 	.word	0x20000ce0

08001a08 <calcDelay>:

void calcDelay(uint8_t nodeNum)
{
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	4606      	mov	r6, r0
	uint32_t maxDelay = 0;

	uint16_t delay = 0;

	uint32_t tick = HAL_GetTick();
 8001a0c:	f003 ffac 	bl	8005968 <HAL_GetTick>

	for (int i = 0; i < MAX_NODES; i++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	4918      	ldr	r1, [pc, #96]	; (8001a74 <calcDelay+0x6c>)
	uint32_t maxDelay = 0;
 8001a14:	461a      	mov	r2, r3
 8001a16:	460d      	mov	r5, r1
	{
		if (nodes[i].activated
				&& ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000))
 8001a18:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
		if (nodes[i].activated
 8001a1c:	7c4c      	ldrb	r4, [r1, #17]
 8001a1e:	b164      	cbz	r4, 8001a3a <calcDelay+0x32>
				&& ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000))
 8001a20:	fb07 fc02 	mul.w	ip, r7, r2
 8001a24:	684c      	ldr	r4, [r1, #4]
 8001a26:	1a24      	subs	r4, r4, r0
 8001a28:	4564      	cmp	r4, ip
 8001a2a:	d906      	bls.n	8001a3a <calcDelay+0x32>
				&& (nodes[i].NextMessageTick - tick < 0x8000000)
 8001a2c:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8001a30:	d203      	bcs.n	8001a3a <calcDelay+0x32>
				&& (i != nodeNum))
 8001a32:	429e      	cmp	r6, r3
			maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 8001a34:	bf18      	it	ne
 8001a36:	fbb4 f2f7 	udivne	r2, r4, r7
	for (int i = 0; i < MAX_NODES; i++)
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	f101 0120 	add.w	r1, r1, #32
 8001a42:	d1eb      	bne.n	8001a1c <calcDelay+0x14>
	}

	if (maxDelay > (nodeSettings.workInterval - SAFE_INTERVAL))
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <calcDelay+0x70>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f1a3 010a 	sub.w	r1, r3, #10
 8001a4c:	4291      	cmp	r1, r2
		delay = maxDelay + SAFE_INTERVAL;
	else
		delay = nodeSettings.workInterval;
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 8001a4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		delay = maxDelay + SAFE_INTERVAL;
 8001a52:	bf38      	it	cc
 8001a54:	f102 030a 	addcc.w	r3, r2, #10
		delay = nodeSettings.workInterval;
 8001a58:	b29b      	uxth	r3, r3
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 8001a5a:	fb01 0003 	mla	r0, r1, r3, r0
 8001a5e:	eb05 1246 	add.w	r2, r5, r6, lsl #5
 8001a62:	6050      	str	r0, [r2, #4]
	nodes[nodeNum].delay = delay;
 8001a64:	8113      	strh	r3, [r2, #8]
	absoluteMaxDelay = absoluteMaxDelay < delay ? delay : absoluteMaxDelay;
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <calcDelay+0x74>)
 8001a68:	6811      	ldr	r1, [r2, #0]
 8001a6a:	4299      	cmp	r1, r3
 8001a6c:	bf2c      	ite	cs
 8001a6e:	6011      	strcs	r1, [r2, #0]
 8001a70:	6013      	strcc	r3, [r2, #0]

}
 8001a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a74:	20000ce0 	.word	0x20000ce0
 8001a78:	20000c74 	.word	0x20000c74
 8001a7c:	2000011c 	.word	0x2000011c

08001a80 <handleMessage>:
 * @brief Received radio message handler
 * @param message length
 * @retval None
 */
void handleMessage(uint8_t len)
{
 8001a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t nodeNum = rxMes->adr;
 8001a84:	4c94      	ldr	r4, [pc, #592]	; (8001cd8 <handleMessage+0x258>)
	receivedMesCnt++;
 8001a86:	4a95      	ldr	r2, [pc, #596]	; (8001cdc <handleMessage+0x25c>)
	uint8_t nodeNum = rxMes->adr;
 8001a88:	6823      	ldr	r3, [r4, #0]
{
 8001a8a:	b0df      	sub	sp, #380	; 0x17c
	uint8_t nodeNum = rxMes->adr;
 8001a8c:	781d      	ldrb	r5, [r3, #0]
	receivedMesCnt++;
 8001a8e:	6813      	ldr	r3, [r2, #0]
	uint8_t nodeNum = rxMes->adr;
 8001a90:	f3c5 08c4 	ubfx	r8, r5, #3, #5
	receivedMesCnt++;
 8001a94:	3301      	adds	r3, #1
 8001a96:	6013      	str	r3, [r2, #0]
	clearStrings();
 8001a98:	f7ff fe14 	bl	80016c4 <clearStrings>
	if (rxMes->uplink == 0)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	46a2      	mov	sl, r4
 8001aa0:	781b      	ldrb	r3, [r3, #0]
	uint8_t nodeNum = rxMes->adr;
 8001aa2:	08ed      	lsrs	r5, r5, #3
	if (rxMes->uplink == 0)
 8001aa4:	f013 0f01 	tst.w	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <handleMessage+0x36>
	{
		printf("Received downlink message!\n");
 8001aaa:	488d      	ldr	r0, [pc, #564]	; (8001ce0 <handleMessage+0x260>)
		return;
	}
	if (myRadio.badCrc == 1)
	{
		printf("Bad CRC in received message!\n");
 8001aac:	f006 fd90 	bl	80085d0 <puts>
		nodes[nodeNum].NetAlarm = ALARM_OFF;
	}

	memset(myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));

}
 8001ab0:	b05f      	add	sp, #380	; 0x17c
 8001ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (myRadio.badCrc == 1)
 8001ab6:	4a8b      	ldr	r2, [pc, #556]	; (8001ce4 <handleMessage+0x264>)
 8001ab8:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001abc:	b10a      	cbz	r2, 8001ac2 <handleMessage+0x42>
		printf("Bad CRC in received message!\n");
 8001abe:	488a      	ldr	r0, [pc, #552]	; (8001ce8 <handleMessage+0x268>)
 8001ac0:	e7f4      	b.n	8001aac <handleMessage+0x2c>
	if (rxMes->adr >= MAX_NODES)
 8001ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ac4:	d905      	bls.n	8001ad2 <handleMessage+0x52>
		printf("Node %d not supported! Max is %d\n", nodeNum, MAX_NODES);
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4629      	mov	r1, r5
 8001aca:	4888      	ldr	r0, [pc, #544]	; (8001cec <handleMessage+0x26c>)
 8001acc:	f006 fcfa 	bl	80084c4 <iprintf>
		return;
 8001ad0:	e7ee      	b.n	8001ab0 <handleMessage+0x30>
	receivedMesCntSuc++;
 8001ad2:	4a87      	ldr	r2, [pc, #540]	; (8001cf0 <handleMessage+0x270>)
	if (nodes[nodeNum].activated == 0)
 8001ad4:	4c87      	ldr	r4, [pc, #540]	; (8001cf4 <handleMessage+0x274>)
	receivedMesCntSuc++;
 8001ad6:	6813      	ldr	r3, [r2, #0]
	if (nodes[nodeNum].activated == 0)
 8001ad8:	016f      	lsls	r7, r5, #5
	receivedMesCntSuc++;
 8001ada:	3301      	adds	r3, #1
 8001adc:	6013      	str	r3, [r2, #0]
	if (nodes[nodeNum].activated == 0)
 8001ade:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001ae2:	7c5a      	ldrb	r2, [r3, #17]
 8001ae4:	b91a      	cbnz	r2, 8001aee <handleMessage+0x6e>
		nodes[nodeNum].activated = 1;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	745a      	strb	r2, [r3, #17]
		saveNodeData();
 8001aea:	f7ff fd5d 	bl	80015a8 <saveNodeData>
	nodes[nodeNum].disarmed = rxMes->disarm;
 8001aee:	f8da 3000 	ldr.w	r3, [sl]
 8001af2:	19e6      	adds	r6, r4, r7
 8001af4:	785b      	ldrb	r3, [r3, #1]
 8001af6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001afa:	7373      	strb	r3, [r6, #13]
	nodes[nodeNum].lastContact = HAL_GetTick();
 8001afc:	f003 ff34 	bl	8005968 <HAL_GetTick>
	nodes[nodeNum].opened = rxMes->opened;
 8001b00:	f8da 9000 	ldr.w	r9, [sl]
	nodes[nodeNum].lastContact = HAL_GetTick();
 8001b04:	51e0      	str	r0, [r4, r7]
	nodes[nodeNum].opened = rxMes->opened;
 8001b06:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001b0a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b0e:	73f3      	strb	r3, [r6, #15]
	nodes[nodeNum].powered = rxMes->powered;
 8001b10:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001b14:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b18:	7433      	strb	r3, [r6, #16]
	nodes[nodeNum].voltage = 1.9F + rxMes->codedVoltage / 10.0F;
 8001b1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8001b1e:	08c0      	lsrs	r0, r0, #3
 8001b20:	f7fe ffbe 	bl	8000aa0 <__aeabi_i2f>
 8001b24:	4974      	ldr	r1, [pc, #464]	; (8001cf8 <handleMessage+0x278>)
 8001b26:	f7ff f8c3 	bl	8000cb0 <__aeabi_fdiv>
 8001b2a:	4974      	ldr	r1, [pc, #464]	; (8001cfc <handleMessage+0x27c>)
 8001b2c:	f7fe ff04 	bl	8000938 <__addsf3>
 8001b30:	6170      	str	r0, [r6, #20]
	nodes[nodeNum].temperature = rxMes->codedTemperature / 2.0F - 40.0F;
 8001b32:	f899 0002 	ldrb.w	r0, [r9, #2]
 8001b36:	f7fe ffb3 	bl	8000aa0 <__aeabi_i2f>
 8001b3a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001b3e:	f7ff f803 	bl	8000b48 <__aeabi_fmul>
 8001b42:	496f      	ldr	r1, [pc, #444]	; (8001d00 <handleMessage+0x280>)
 8001b44:	f7fe fef6 	bl	8000934 <__aeabi_fsub>
 8001b48:	61f0      	str	r0, [r6, #28]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack(&myRadio);
 8001b4a:	4866      	ldr	r0, [pc, #408]	; (8001ce4 <handleMessage+0x264>)
 8001b4c:	f003 fa42 	bl	8004fd4 <SX127X_RSSI_Pack>
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 8001b50:	7b31      	ldrb	r1, [r6, #12]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack(&myRadio);
 8001b52:	8170      	strh	r0, [r6, #10]
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 8001b54:	07ca      	lsls	r2, r1, #31
 8001b56:	d40a      	bmi.n	8001b6e <handleMessage+0xee>
 8001b58:	7bf3      	ldrb	r3, [r6, #15]
 8001b5a:	b143      	cbz	r3, 8001b6e <handleMessage+0xee>
		nodes[nodeNum].NetAlarm |= ALARM_DOOR;
 8001b5c:	f107 0210 	add.w	r2, r7, #16
 8001b60:	4422      	add	r2, r4
		nodes[nodeNum].alarm |= ALARM_DOOR;
 8001b62:	8853      	ldrh	r3, [r2, #2]
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	8053      	strh	r3, [r2, #2]
	if ((nodes[nodeNum].masked & MASK_POWER) == 0 && !nodes[nodeNum].powered)
 8001b6e:	078b      	lsls	r3, r1, #30
 8001b70:	d40b      	bmi.n	8001b8a <handleMessage+0x10a>
 8001b72:	19e3      	adds	r3, r4, r7
 8001b74:	7c1b      	ldrb	r3, [r3, #16]
 8001b76:	b943      	cbnz	r3, 8001b8a <handleMessage+0x10a>
		nodes[nodeNum].NetAlarm |= ALARM_POWER;
 8001b78:	f107 0210 	add.w	r2, r7, #16
 8001b7c:	4422      	add	r2, r4
		nodes[nodeNum].alarm |= ALARM_POWER;
 8001b7e:	8853      	ldrh	r3, [r2, #2]
 8001b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b84:	f043 0302 	orr.w	r3, r3, #2
 8001b88:	8053      	strh	r3, [r2, #2]
	flag.lcdRefreshRequest = 1;
 8001b8a:	4a5e      	ldr	r2, [pc, #376]	; (8001d04 <handleMessage+0x284>)
	lastMessageFrom = nodeNum;
 8001b8c:	4b5e      	ldr	r3, [pc, #376]	; (8001d08 <handleMessage+0x288>)
	calcDelay(nodeNum);
 8001b8e:	4628      	mov	r0, r5
	lastMessageFrom = nodeNum;
 8001b90:	f883 8000 	strb.w	r8, [r3]
	flag.lcdRefreshRequest = 1;
 8001b94:	7813      	ldrb	r3, [r2, #0]
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 8001b96:	443c      	add	r4, r7
	flag.lcdRefreshRequest = 1;
 8001b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b9c:	7013      	strb	r3, [r2, #0]
	calcDelay(nodeNum);
 8001b9e:	f7ff ff33 	bl	8001a08 <calcDelay>
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 8001ba2:	4b5a      	ldr	r3, [pc, #360]	; (8001d0c <handleMessage+0x28c>)
 8001ba4:	8922      	ldrh	r2, [r4, #8]
 8001ba6:	6819      	ldr	r1, [r3, #0]
	txMes->uplink = 0;
 8001ba8:	00ed      	lsls	r5, r5, #3
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 8001baa:	708a      	strb	r2, [r1, #2]
	txMes->disarm = nodes[nodeNum].disarmRequest;
 8001bac:	7ba3      	ldrb	r3, [r4, #14]
	txMes->codedDelayMSB = (nodes[nodeNum].delay >> 8) & 0x7F;
 8001bae:	0a12      	lsrs	r2, r2, #8
	txMes->disarm = nodes[nodeNum].disarmRequest;
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8001bb8:	704b      	strb	r3, [r1, #1]
	txMes->uplink = 0;
 8001bba:	700d      	strb	r5, [r1, #0]
	HAL_Delay(2);
 8001bbc:	2002      	movs	r0, #2
	if (netHandler.online)
 8001bbe:	4d54      	ldr	r5, [pc, #336]	; (8001d10 <handleMessage+0x290>)
	HAL_Delay(2);
 8001bc0:	f003 fed8 	bl	8005974 <HAL_Delay>
	SX127X_transmitAsync(&myRadio, 3);
 8001bc4:	2103      	movs	r1, #3
 8001bc6:	4847      	ldr	r0, [pc, #284]	; (8001ce4 <handleMessage+0x264>)
 8001bc8:	f003 f9e6 	bl	8004f98 <SX127X_transmitAsync>
	if (netHandler.online)
 8001bcc:	78eb      	ldrb	r3, [r5, #3]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d07a      	beq.n	8001cc8 <handleMessage+0x248>
				nodes[nodeNum].NetAlarm & ALARM_DOOR ? "&DA=true" : "");
 8001bd2:	7ce7      	ldrb	r7, [r4, #19]
		sprintf(DAstr, "%s",
 8001bd4:	4e4f      	ldr	r6, [pc, #316]	; (8001d14 <handleMessage+0x294>)
 8001bd6:	f017 0f01 	tst.w	r7, #1
 8001bda:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 8001bde:	494e      	ldr	r1, [pc, #312]	; (8001d18 <handleMessage+0x298>)
 8001be0:	4640      	mov	r0, r8
 8001be2:	bf08      	it	eq
 8001be4:	4631      	moveq	r1, r6
 8001be6:	f006 fd1b 	bl	8008620 <strcpy>
		sprintf(PAstr, "%s",
 8001bea:	f017 0f02 	tst.w	r7, #2
		sprintf(Vstr, "&V=%d.%d", (19 + rxMes->codedVoltage) / 10,
 8001bee:	f04f 070a 	mov.w	r7, #10
		sprintf(PAstr, "%s",
 8001bf2:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8001bf6:	4949      	ldr	r1, [pc, #292]	; (8001d1c <handleMessage+0x29c>)
 8001bf8:	4648      	mov	r0, r9
 8001bfa:	bf08      	it	eq
 8001bfc:	4631      	moveq	r1, r6
 8001bfe:	f006 fd0f 	bl	8008620 <strcpy>
		sprintf(Vstr, "&V=%d.%d", (19 + rxMes->codedVoltage) / 10,
 8001c02:	f8da 3000 	ldr.w	r3, [sl]
 8001c06:	ae0e      	add	r6, sp, #56	; 0x38
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	4945      	ldr	r1, [pc, #276]	; (8001d20 <handleMessage+0x2a0>)
 8001c0c:	08db      	lsrs	r3, r3, #3
 8001c0e:	3313      	adds	r3, #19
 8001c10:	fbb3 f2f7 	udiv	r2, r3, r7
 8001c14:	4630      	mov	r0, r6
 8001c16:	fb07 3312 	mls	r3, r7, r2, r3
 8001c1a:	f006 fce1 	bl	80085e0 <siprintf>
		sprintf(Tstr, "&T=%d.%d", (int) nodes[nodeNum].temperature,
 8001c1e:	69e2      	ldr	r2, [r4, #28]
				((int) (nodes[nodeNum].temperature * 10.0f)) % 10);
 8001c20:	4935      	ldr	r1, [pc, #212]	; (8001cf8 <handleMessage+0x278>)
 8001c22:	4610      	mov	r0, r2
 8001c24:	920d      	str	r2, [sp, #52]	; 0x34
 8001c26:	f7fe ff8f 	bl	8000b48 <__aeabi_fmul>
 8001c2a:	f7ff f953 	bl	8000ed4 <__aeabi_f2iz>
		sprintf(Tstr, "&T=%d.%d", (int) nodes[nodeNum].temperature,
 8001c2e:	fb90 fbf7 	sdiv	fp, r0, r7
 8001c32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001c34:	fb0b 0b17 	mls	fp, fp, r7, r0
 8001c38:	4610      	mov	r0, r2
 8001c3a:	f7ff f94b 	bl	8000ed4 <__aeabi_f2iz>
 8001c3e:	af12      	add	r7, sp, #72	; 0x48
 8001c40:	465b      	mov	r3, fp
 8001c42:	4602      	mov	r2, r0
 8001c44:	4937      	ldr	r1, [pc, #220]	; (8001d24 <handleMessage+0x2a4>)
 8001c46:	4638      	mov	r0, r7
 8001c48:	f006 fcca 	bl	80085e0 <siprintf>
				settings.host, rxMes->adr, settings.baseID, settings.ServerPass,
 8001c4c:	f8da 1000 	ldr.w	r1, [sl]
		sprintf(message,
 8001c50:	4835      	ldr	r0, [pc, #212]	; (8001d28 <handleMessage+0x2a8>)
				rxMes->opened ? "true" : "false",
 8001c52:	f891 c001 	ldrb.w	ip, [r1, #1]
				settings.host, rxMes->adr, settings.baseID, settings.ServerPass,
 8001c56:	780b      	ldrb	r3, [r1, #0]
		sprintf(message,
 8001c58:	4934      	ldr	r1, [pc, #208]	; (8001d2c <handleMessage+0x2ac>)
 8001c5a:	f01c 0f02 	tst.w	ip, #2
				settings.host, rxMes->adr, settings.baseID, settings.ServerPass,
 8001c5e:	930d      	str	r3, [sp, #52]	; 0x34
		sprintf(message,
 8001c60:	bf14      	ite	ne
 8001c62:	460b      	movne	r3, r1
 8001c64:	4603      	moveq	r3, r0
 8001c66:	f01c 0f04 	tst.w	ip, #4
 8001c6a:	bf14      	ite	ne
 8001c6c:	468e      	movne	lr, r1
 8001c6e:	4686      	moveq	lr, r0
 8001c70:	f01c 0f01 	tst.w	ip, #1
				nodes[nodeNum].masked & MASK_DOOR ? "true" : "false",
 8001c74:	f894 c00c 	ldrb.w	ip, [r4, #12]
		sprintf(message,
 8001c78:	bf14      	ite	ne
 8001c7a:	468a      	movne	sl, r1
 8001c7c:	4682      	moveq	sl, r0
 8001c7e:	f01c 0f01 	tst.w	ip, #1
 8001c82:	bf14      	ite	ne
 8001c84:	468b      	movne	fp, r1
 8001c86:	4683      	moveq	fp, r0
 8001c88:	f01c 0f02 	tst.w	ip, #2
 8001c8c:	bf08      	it	eq
 8001c8e:	4601      	moveq	r1, r0
 8001c90:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <handleMessage+0x2b0>)
 8001c92:	e9cd b105 	strd	fp, r1, [sp, #20]
 8001c96:	e9cd ea03 	strd	lr, sl, [sp, #12]
 8001c9a:	e9cd 8909 	strd	r8, r9, [sp, #36]	; 0x24
 8001c9e:	e9cd 6707 	strd	r6, r7, [sp, #28]
 8001ca2:	f102 0133 	add.w	r1, r2, #51	; 0x33
 8001ca6:	9101      	str	r1, [sp, #4]
 8001ca8:	9302      	str	r3, [sp, #8]
 8001caa:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001cac:	4921      	ldr	r1, [pc, #132]	; (8001d34 <handleMessage+0x2b4>)
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001cb2:	3243      	adds	r2, #67	; 0x43
 8001cb4:	08db      	lsrs	r3, r3, #3
 8001cb6:	a81e      	add	r0, sp, #120	; 0x78
 8001cb8:	f006 fc92 	bl	80085e0 <siprintf>
		NetSendAsync(&netHandler, message);
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	a91e      	add	r1, sp, #120	; 0x78
 8001cc0:	f7ff f986 	bl	8000fd0 <NetSendAsync>
		nodes[nodeNum].NetAlarm = ALARM_OFF;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	74e3      	strb	r3, [r4, #19]
	memset(myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 8001cc8:	2220      	movs	r2, #32
 8001cca:	2100      	movs	r1, #0
 8001ccc:	481a      	ldr	r0, [pc, #104]	; (8001d38 <handleMessage+0x2b8>)
}
 8001cce:	b05f      	add	sp, #380	; 0x17c
 8001cd0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset(myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 8001cd4:	f006 bbee 	b.w	80084b4 <memset>
 8001cd8:	20000044 	.word	0x20000044
 8001cdc:	20000154 	.word	0x20000154
 8001ce0:	0800a86e 	.word	0x0800a86e
 8001ce4:	20000998 	.word	0x20000998
 8001ce8:	0800a889 	.word	0x0800a889
 8001cec:	0800a8a6 	.word	0x0800a8a6
 8001cf0:	20000158 	.word	0x20000158
 8001cf4:	20000ce0 	.word	0x20000ce0
 8001cf8:	41200000 	.word	0x41200000
 8001cfc:	3ff33333 	.word	0x3ff33333
 8001d00:	42200000 	.word	0x42200000
 8001d04:	20000b4c 	.word	0x20000b4c
 8001d08:	2000002c 	.word	0x2000002c
 8001d0c:	20000048 	.word	0x20000048
 8001d10:	20000e8c 	.word	0x20000e8c
 8001d14:	0800b442 	.word	0x0800b442
 8001d18:	0800a856 	.word	0x0800a856
 8001d1c:	0800a85f 	.word	0x0800a85f
 8001d20:	0800a8c8 	.word	0x0800a8c8
 8001d24:	0800a8d1 	.word	0x0800a8d1
 8001d28:	0800a868 	.word	0x0800a868
 8001d2c:	0800a85a 	.word	0x0800a85a
 8001d30:	20000a78 	.word	0x20000a78
 8001d34:	0800a8da 	.word	0x0800a8da
 8001d38:	200009b5 	.word	0x200009b5

08001d3c <alarmRoutine>:
 * @brief Handles alarm situations
 * @param None
 * @retval None
 */
void alarmRoutine()
{
 8001d3c:	b508      	push	{r3, lr}
 8001d3e:	2300      	movs	r3, #0
	uint16_t i;
	uint8_t gotAlarm = 0;
 8001d40:	461a      	mov	r2, r3
 8001d42:	4917      	ldr	r1, [pc, #92]	; (8001da0 <alarmRoutine+0x64>)
	for (i = 0; i < MAX_NODES; i++)
		if (nodes[i].alarm)
 8001d44:	7c88      	ldrb	r0, [r1, #18]
 8001d46:	3301      	adds	r3, #1
			gotAlarm = true;
 8001d48:	2800      	cmp	r0, #0
 8001d4a:	bf18      	it	ne
 8001d4c:	2201      	movne	r2, #1
	for (i = 0; i < MAX_NODES; i++)
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	f101 0120 	add.w	r1, r1, #32
 8001d54:	d1f6      	bne.n	8001d44 <alarmRoutine+0x8>

	if (gotAlarm)
 8001d56:	b1ea      	cbz	r2, 8001d94 <alarmRoutine+0x58>
	{
		uint8_t tact = (HAL_GetTick() / 80) % 12;
 8001d58:	f003 fe06 	bl	8005968 <HAL_GetTick>
 8001d5c:	2350      	movs	r3, #80	; 0x50
 8001d5e:	220c      	movs	r2, #12
 8001d60:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d64:	fbb3 f0f2 	udiv	r0, r3, r2
 8001d68:	fb02 3010 	mls	r0, r2, r0, r3
		if (tact % 2 && tact < 9)
 8001d6c:	07c2      	lsls	r2, r0, #31
		uint8_t tact = (HAL_GetTick() / 80) % 12;
 8001d6e:	b2c3      	uxtb	r3, r0
		if (tact % 2 && tact < 9)
 8001d70:	d50e      	bpl.n	8001d90 <alarmRoutine+0x54>
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d80c      	bhi.n	8001d90 <alarmRoutine+0x54>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001d76:	2201      	movs	r2, #1
		else
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001d78:	2120      	movs	r1, #32
 8001d7a:	480a      	ldr	r0, [pc, #40]	; (8001da4 <alarmRoutine+0x68>)
 8001d7c:	f004 fc0e 	bl	800659c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 8001d80:	2200      	movs	r2, #0
	else
	{
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
	}
}
 8001d82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 8001d86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <alarmRoutine+0x6c>)
 8001d8c:	f004 bc06 	b.w	800659c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	e7f1      	b.n	8001d78 <alarmRoutine+0x3c>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001d94:	2120      	movs	r1, #32
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <alarmRoutine+0x68>)
 8001d98:	f004 fc00 	bl	800659c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	e7f0      	b.n	8001d82 <alarmRoutine+0x46>
 8001da0:	20000ce0 	.word	0x20000ce0
 8001da4:	40010c00 	.word	0x40010c00
 8001da8:	40010800 	.word	0x40010800

08001dac <alarmOff>:
 */
void alarmOff()
{
	uint16_t i;
	for (i = 0; i < MAX_NODES; i++)
		nodes[i].alarm = 0;
 8001dac:	2200      	movs	r2, #0
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <alarmOff+0x24>)
 8001db0:	749a      	strb	r2, [r3, #18]
 8001db2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8001db6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8001dba:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 8001dbe:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 8001dc2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8001dc6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 8001dca:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
}
 8001dce:	4770      	bx	lr
 8001dd0:	20000ce0 	.word	0x20000ce0

08001dd4 <ledNodeStatusIndication>:

void ledNodeStatusIndication()
{
 8001dd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	for (i = 0; i < MAX_NODES; i++)
 8001dd8:	f04f 0a00 	mov.w	sl, #0
		{
#if RECEIVE_ANIMATION == WAVE
			float fTemp;
			uint32_t temp = (HAL_GetTick() - nodes[i].lastContact) % 1000;
			if (temp < 500)
				fTemp = 1.0f + (float) temp / 125.0f;
 8001ddc:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8001de0:	4c73      	ldr	r4, [pc, #460]	; (8001fb0 <ledNodeStatusIndication+0x1dc>)
			else
				fTemp = 9.0f - (float) temp / 125.0f;
 8001de2:	4f74      	ldr	r7, [pc, #464]	; (8001fb4 <ledNodeStatusIndication+0x1e0>)
 8001de4:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8001fc4 <ledNodeStatusIndication+0x1f0>
		wsSetColor(i + 1, GREEN);
 8001de8:	2300      	movs	r3, #0
 8001dea:	f10a 0601 	add.w	r6, sl, #1
 8001dee:	b2f5      	uxtb	r5, r6
 8001df0:	4619      	mov	r1, r3
 8001df2:	2210      	movs	r2, #16
 8001df4:	4628      	mov	r0, r5
 8001df6:	f003 fce3 	bl	80057c0 <wsSetColor>
		if (nodes[i].powered == 0)
 8001dfa:	7c21      	ldrb	r1, [r4, #16]
 8001dfc:	b921      	cbnz	r1, 8001e08 <ledNodeStatusIndication+0x34>
			wsSetColor(i + 1, CYAN);
 8001dfe:	2310      	movs	r3, #16
 8001e00:	4628      	mov	r0, r5
 8001e02:	461a      	mov	r2, r3
 8001e04:	f003 fcdc 	bl	80057c0 <wsSetColor>
		if (nodes[i].voltage < nodes[i].voltageTrashold)
 8001e08:	69a1      	ldr	r1, [r4, #24]
 8001e0a:	6960      	ldr	r0, [r4, #20]
 8001e0c:	f7ff f83a 	bl	8000e84 <__aeabi_fcmplt>
 8001e10:	b150      	cbz	r0, 8001e28 <ledNodeStatusIndication+0x54>
			blinkProvider ? wsSetColor(i + 1, CYAN) : wsSetColor(i + 1, BLACK);
 8001e12:	4b69      	ldr	r3, [pc, #420]	; (8001fb8 <ledNodeStatusIndication+0x1e4>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 80aa 	beq.w	8001f70 <ledNodeStatusIndication+0x19c>
 8001e1c:	2310      	movs	r3, #16
 8001e1e:	2100      	movs	r1, #0
 8001e20:	461a      	mov	r2, r3
 8001e22:	4628      	mov	r0, r5
 8001e24:	f003 fccc 	bl	80057c0 <wsSetColor>
		if (nodes[i].masked & MASK_DOOR)
 8001e28:	7b23      	ldrb	r3, [r4, #12]
 8001e2a:	07db      	lsls	r3, r3, #31
 8001e2c:	d50e      	bpl.n	8001e4c <ledNodeStatusIndication+0x78>
					wsSetColor(i + 1, BLACK) : wsSetColor(i + 1, BLUE); // Blinking - opened
 8001e2e:	7be3      	ldrb	r3, [r4, #15]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 80a0 	beq.w	8001f76 <ledNodeStatusIndication+0x1a2>
			(nodes[i].opened && blinkProvider) ?
 8001e36:	4b60      	ldr	r3, [pc, #384]	; (8001fb8 <ledNodeStatusIndication+0x1e4>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 809b 	beq.w	8001f76 <ledNodeStatusIndication+0x1a2>
					wsSetColor(i + 1, BLACK) : wsSetColor(i + 1, BLUE); // Blinking - opened
 8001e40:	2300      	movs	r3, #0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	4628      	mov	r0, r5
 8001e48:	f003 fcba 	bl	80057c0 <wsSetColor>
		if (nodes[i].alarm)
 8001e4c:	7ca3      	ldrb	r3, [r4, #18]
 8001e4e:	b16b      	cbz	r3, 8001e6c <ledNodeStatusIndication+0x98>
			(blinkProvider && nodes[i].alarm == ALARM_DOOR) ?
 8001e50:	4a59      	ldr	r2, [pc, #356]	; (8001fb8 <ledNodeStatusIndication+0x1e4>)
					wsSetColor(i + 1, BLACK) : wsSetColor(i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001e52:	7812      	ldrb	r2, [r2, #0]
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	f000 8092 	beq.w	8001f7e <ledNodeStatusIndication+0x1aa>
			(blinkProvider && nodes[i].alarm == ALARM_DOOR) ?
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	f040 808f 	bne.w	8001f7e <ledNodeStatusIndication+0x1aa>
					wsSetColor(i + 1, BLACK) : wsSetColor(i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001e60:	2300      	movs	r3, #0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	4628      	mov	r0, r5
 8001e68:	f003 fcaa 	bl	80057c0 <wsSetColor>
		if (HAL_GetTick() - nodes[i].lastContact > settings.warningDelay
 8001e6c:	f003 fd7c 	bl	8005968 <HAL_GetTick>
 8001e70:	f8df b154 	ldr.w	fp, [pc, #340]	; 8001fc8 <ledNodeStatusIndication+0x1f4>
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	1ac0      	subs	r0, r0, r3
 8001e78:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001e7c:	4298      	cmp	r0, r3
 8001e7e:	d90d      	bls.n	8001e9c <ledNodeStatusIndication+0xc8>
				&& HAL_GetTick() > (nodes[i].NextMessageTick + 10000))
 8001e80:	f003 fd72 	bl	8005968 <HAL_GetTick>
 8001e84:	6863      	ldr	r3, [r4, #4]
 8001e86:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001e8a:	3310      	adds	r3, #16
 8001e8c:	4298      	cmp	r0, r3
 8001e8e:	d905      	bls.n	8001e9c <ledNodeStatusIndication+0xc8>
			wsSetColor(i + 1, YELLOW);
 8001e90:	2210      	movs	r2, #16
 8001e92:	2300      	movs	r3, #0
 8001e94:	4611      	mov	r1, r2
 8001e96:	4628      	mov	r0, r5
 8001e98:	f003 fc92 	bl	80057c0 <wsSetColor>
		if (HAL_GetTick() - nodes[i].lastContact > settings.superWarningDelay
 8001e9c:	f003 fd64 	bl	8005968 <HAL_GetTick>
 8001ea0:	6823      	ldr	r3, [r4, #0]
 8001ea2:	1ac0      	subs	r0, r0, r3
 8001ea4:	f8db 3008 	ldr.w	r3, [fp, #8]
 8001ea8:	4298      	cmp	r0, r3
 8001eaa:	d910      	bls.n	8001ece <ledNodeStatusIndication+0xfa>
				&& blinkProvider
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <ledNodeStatusIndication+0x1e4>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b16b      	cbz	r3, 8001ece <ledNodeStatusIndication+0xfa>
				&& HAL_GetTick() > (nodes[i].NextMessageTick + 10000))
 8001eb2:	f003 fd59 	bl	8005968 <HAL_GetTick>
 8001eb6:	6863      	ldr	r3, [r4, #4]
 8001eb8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001ebc:	3310      	adds	r3, #16
 8001ebe:	4298      	cmp	r0, r3
 8001ec0:	d905      	bls.n	8001ece <ledNodeStatusIndication+0xfa>
			wsSetColor(i + 1, BLACK);
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	4628      	mov	r0, r5
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f003 fc79 	bl	80057c0 <wsSetColor>
		if (nodes[i].disarmed && nodes[i].disarmRequest)
 8001ece:	7b63      	ldrb	r3, [r4, #13]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05e      	beq.n	8001f92 <ledNodeStatusIndication+0x1be>
 8001ed4:	7ba3      	ldrb	r3, [r4, #14]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d155      	bne.n	8001f86 <ledNodeStatusIndication+0x1b2>
			wsSetColor(i + 1, MAGENTA);
 8001eda:	2310      	movs	r3, #16
 8001edc:	2200      	movs	r2, #0
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4628      	mov	r0, r5
 8001ee2:	f003 fc6d 	bl	80057c0 <wsSetColor>
		if (nodes[i].activated == 0)
 8001ee6:	7c63      	ldrb	r3, [r4, #17]
 8001ee8:	b92b      	cbnz	r3, 8001ef6 <ledNodeStatusIndication+0x122>
			wsSetColor(i + 1, WHITE);
 8001eea:	2310      	movs	r3, #16
 8001eec:	4628      	mov	r0, r5
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	f003 fc65 	bl	80057c0 <wsSetColor>
		if (selectedNode == i
 8001ef6:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <ledNodeStatusIndication+0x1e8>)
 8001ef8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efc:	4553      	cmp	r3, sl
 8001efe:	d10c      	bne.n	8001f1a <ledNodeStatusIndication+0x146>
				&& HAL_GetTick() - lastNodeChangeTick < DELAY_SELECTED_MARK
 8001f00:	f003 fd32 	bl	8005968 <HAL_GetTick>
 8001f04:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f08:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <ledNodeStatusIndication+0x1ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1ac0      	subs	r0, r0, r3
 8001f0e:	4290      	cmp	r0, r2
 8001f10:	d803      	bhi.n	8001f1a <ledNodeStatusIndication+0x146>
				&& lastNodeChangeTick)
 8001f12:	b113      	cbz	r3, 8001f1a <ledNodeStatusIndication+0x146>
			wsDoubleBright(i + 1);
 8001f14:	4628      	mov	r0, r5
 8001f16:	f003 fc5f 	bl	80057d8 <wsDoubleBright>
		if (HAL_GetTick() - nodes[i].lastContact < DELAY_SHOW_CONTACT
 8001f1a:	f003 fd25 	bl	8005968 <HAL_GetTick>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	1ac0      	subs	r0, r0, r3
 8001f22:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001f26:	4298      	cmp	r0, r3
 8001f28:	d81a      	bhi.n	8001f60 <ledNodeStatusIndication+0x18c>
				&& nodes[i].activated)
 8001f2a:	7c63      	ldrb	r3, [r4, #17]
 8001f2c:	b1c3      	cbz	r3, 8001f60 <ledNodeStatusIndication+0x18c>
			uint32_t temp = (HAL_GetTick() - nodes[i].lastContact) % 1000;
 8001f2e:	f003 fd1b 	bl	8005968 <HAL_GetTick>
 8001f32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	1ac3      	subs	r3, r0, r3
 8001f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8001f3e:	fb02 3010 	mls	r0, r2, r0, r3
			if (temp < 500)
 8001f42:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001f46:	d229      	bcs.n	8001f9c <ledNodeStatusIndication+0x1c8>
				fTemp = 1.0f + (float) temp / 125.0f;
 8001f48:	f7fe fda6 	bl	8000a98 <__aeabi_ui2f>
 8001f4c:	4639      	mov	r1, r7
 8001f4e:	f7fe feaf 	bl	8000cb0 <__aeabi_fdiv>
 8001f52:	4649      	mov	r1, r9
 8001f54:	f7fe fcf0 	bl	8000938 <__addsf3>
				fTemp = 9.0f - (float) temp / 125.0f;
 8001f58:	4601      	mov	r1, r0

			wsMultiply(i + 1, fTemp);
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	f003 fc4c 	bl	80057f8 <wsMultiply>
	for (i = 0; i < MAX_NODES; i++)
 8001f60:	2e08      	cmp	r6, #8
 8001f62:	46b2      	mov	sl, r6
 8001f64:	f104 0420 	add.w	r4, r4, #32
 8001f68:	f47f af3e 	bne.w	8001de8 <ledNodeStatusIndication+0x14>
					if (fastBlinkProvider)
						wsDoubleBright (i + 1);
#endif
		}
	}
}
 8001f6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			blinkProvider ? wsSetColor(i + 1, CYAN) : wsSetColor(i + 1, BLACK);
 8001f70:	461a      	mov	r2, r3
 8001f72:	4619      	mov	r1, r3
 8001f74:	e755      	b.n	8001e22 <ledNodeStatusIndication+0x4e>
					wsSetColor(i + 1, BLACK) : wsSetColor(i + 1, BLUE); // Blinking - opened
 8001f76:	2200      	movs	r2, #0
 8001f78:	2310      	movs	r3, #16
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	e763      	b.n	8001e46 <ledNodeStatusIndication+0x72>
					wsSetColor(i + 1, BLACK) : wsSetColor(i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2110      	movs	r1, #16
 8001f82:	461a      	mov	r2, r3
 8001f84:	e76f      	b.n	8001e66 <ledNodeStatusIndication+0x92>
			wsSetColor(i + 1, ORANGE);
 8001f86:	2300      	movs	r3, #0
 8001f88:	2210      	movs	r2, #16
 8001f8a:	2120      	movs	r1, #32
 8001f8c:	4628      	mov	r0, r5
 8001f8e:	f003 fc17 	bl	80057c0 <wsSetColor>
		if (nodes[i].disarmRequest != nodes[i].disarmed)
 8001f92:	7ba2      	ldrb	r2, [r4, #14]
 8001f94:	7b63      	ldrb	r3, [r4, #13]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d0a5      	beq.n	8001ee6 <ledNodeStatusIndication+0x112>
 8001f9a:	e79e      	b.n	8001eda <ledNodeStatusIndication+0x106>
				fTemp = 9.0f - (float) temp / 125.0f;
 8001f9c:	f7fe fd7c 	bl	8000a98 <__aeabi_ui2f>
 8001fa0:	4639      	mov	r1, r7
 8001fa2:	f7fe fe85 	bl	8000cb0 <__aeabi_fdiv>
 8001fa6:	4601      	mov	r1, r0
 8001fa8:	4640      	mov	r0, r8
 8001faa:	f7fe fcc3 	bl	8000934 <__aeabi_fsub>
 8001fae:	e7d3      	b.n	8001f58 <ledNodeStatusIndication+0x184>
 8001fb0:	20000ce0 	.word	0x20000ce0
 8001fb4:	42fa0000 	.word	0x42fa0000
 8001fb8:	20000de8 	.word	0x20000de8
 8001fbc:	20000166 	.word	0x20000166
 8001fc0:	2000012c 	.word	0x2000012c
 8001fc4:	41100000 	.word	0x41100000
 8001fc8:	20000a78 	.word	0x20000a78

08001fcc <ledFillBlack>:

void ledFillBlack()
{
 8001fcc:	b510      	push	{r4, lr}
	int i;
	for (i = 0; i < MAX_NODES + 1; i++)
 8001fce:	2400      	movs	r4, #0
		wsSetColor(i, BLACK);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	b2e0      	uxtb	r0, r4
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4619      	mov	r1, r3
	for (i = 0; i < MAX_NODES + 1; i++)
 8001fd8:	3401      	adds	r4, #1
		wsSetColor(i, BLACK);
 8001fda:	f003 fbf1 	bl	80057c0 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 8001fde:	2c09      	cmp	r4, #9
 8001fe0:	d1f6      	bne.n	8001fd0 <ledFillBlack+0x4>
}
 8001fe2:	bd10      	pop	{r4, pc}

08001fe4 <ledRoutine>:
 */
void ledRoutine()
{
	uint8_t i = 0;

	wsSetColor(0, BLACK);
 8001fe4:	2300      	movs	r3, #0
{
 8001fe6:	b510      	push	{r4, lr}

	if (myRadio.status == TX)
 8001fe8:	4c29      	ldr	r4, [pc, #164]	; (8002090 <ledRoutine+0xac>)
	wsSetColor(0, BLACK);
 8001fea:	461a      	mov	r2, r3
 8001fec:	4619      	mov	r1, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fbe6 	bl	80057c0 <wsSetColor>
	if (myRadio.status == TX)
 8001ff4:	7c22      	ldrb	r2, [r4, #16]
 8001ff6:	2a03      	cmp	r2, #3
 8001ff8:	d105      	bne.n	8002006 <ledRoutine+0x22>
		wsSetColor(0, RED);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	2110      	movs	r1, #16
 8001ffe:	461a      	mov	r2, r3
 8002000:	4618      	mov	r0, r3
 8002002:	f003 fbdd 	bl	80057c0 <wsSetColor>
	if (myRadio.signalDetected == 1)
 8002006:	7f23      	ldrb	r3, [r4, #28]
 8002008:	b12b      	cbz	r3, 8002016 <ledRoutine+0x32>
		wsSetColor(0, GREEN);
 800200a:	2300      	movs	r3, #0
 800200c:	2210      	movs	r2, #16
 800200e:	4619      	mov	r1, r3
 8002010:	4618      	mov	r0, r3
 8002012:	f003 fbd5 	bl	80057c0 <wsSetColor>
	if (HAL_GetTick() - lastUartConnect < 200)
 8002016:	f003 fca7 	bl	8005968 <HAL_GetTick>
 800201a:	4b1e      	ldr	r3, [pc, #120]	; (8002094 <ledRoutine+0xb0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	1ac0      	subs	r0, r0, r3
 8002020:	28c7      	cmp	r0, #199	; 0xc7
 8002022:	d805      	bhi.n	8002030 <ledRoutine+0x4c>
		wsSetColor(0, YELLOW);
 8002024:	2300      	movs	r3, #0
 8002026:	2210      	movs	r2, #16
 8002028:	4618      	mov	r0, r3
 800202a:	4611      	mov	r1, r2
 800202c:	f003 fbc8 	bl	80057c0 <wsSetColor>

	if (screenMode == smRegular)
 8002030:	4b19      	ldr	r3, [pc, #100]	; (8002098 <ledRoutine+0xb4>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	b92b      	cbnz	r3, 8002042 <ledRoutine+0x5e>
	{
		ledNodeStatusIndication();
 8002036:	f7ff fecd 	bl	8001dd4 <ledNodeStatusIndication>
			wsSetColor(i, BLACK);
		}

	}
	wsPrepareArray();
}
 800203a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wsPrepareArray();
 800203e:	f003 bbff 	b.w	8005840 <wsPrepareArray>
	else if (screenMode == smSaveConfig)
 8002042:	2b18      	cmp	r3, #24
 8002044:	d102      	bne.n	800204c <ledRoutine+0x68>
		ledFillBlack();
 8002046:	f7ff ffc1 	bl	8001fcc <ledFillBlack>
 800204a:	e7f6      	b.n	800203a <ledRoutine+0x56>
	else if (screenMode == smNodeAction)
 800204c:	2b1d      	cmp	r3, #29
 800204e:	f04f 0400 	mov.w	r4, #0
 8002052:	d112      	bne.n	800207a <ledRoutine+0x96>
			wsSetColor(i, BLACK);
 8002054:	2300      	movs	r3, #0
 8002056:	b2e0      	uxtb	r0, r4
 8002058:	461a      	mov	r2, r3
 800205a:	4619      	mov	r1, r3
 800205c:	3401      	adds	r4, #1
 800205e:	f003 fbaf 	bl	80057c0 <wsSetColor>
		for (i = 0; i < MAX_NODES + 1; i++)
 8002062:	2c09      	cmp	r4, #9
 8002064:	d1f6      	bne.n	8002054 <ledRoutine+0x70>
		wsSetColor(selectedNode + 1, WHITE);
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <ledRoutine+0xb8>)
 8002068:	7818      	ldrb	r0, [r3, #0]
 800206a:	2310      	movs	r3, #16
 800206c:	3001      	adds	r0, #1
 800206e:	461a      	mov	r2, r3
 8002070:	4619      	mov	r1, r3
 8002072:	b2c0      	uxtb	r0, r0
 8002074:	f003 fba4 	bl	80057c0 <wsSetColor>
 8002078:	e7df      	b.n	800203a <ledRoutine+0x56>
			wsSetColor(i, BLACK);
 800207a:	2300      	movs	r3, #0
 800207c:	b2e0      	uxtb	r0, r4
 800207e:	461a      	mov	r2, r3
 8002080:	4619      	mov	r1, r3
 8002082:	3401      	adds	r4, #1
 8002084:	f003 fb9c 	bl	80057c0 <wsSetColor>
		for (i = 0; i < MAX_NODES + 1; i++)
 8002088:	2c09      	cmp	r4, #9
 800208a:	d1f6      	bne.n	800207a <ledRoutine+0x96>
 800208c:	e7d5      	b.n	800203a <ledRoutine+0x56>
 800208e:	bf00      	nop
 8002090:	20000998 	.word	0x20000998
 8002094:	200015c0 	.word	0x200015c0
 8002098:	20000162 	.word	0x20000162
 800209c:	20000166 	.word	0x20000166

080020a0 <ShowLogo>:
 * @brief Handles turn on logo
 * @param None
 * @retval None
 */
void ShowLogo()
{
 80020a0:	b510      	push	{r4, lr}
	int i = 0;
	for (i = 0; i < MAX_NODES + 1; i++)
 80020a2:	2400      	movs	r4, #0
	{
		wsSetColor(i, WHITE);
 80020a4:	2310      	movs	r3, #16
 80020a6:	b2e0      	uxtb	r0, r4
 80020a8:	461a      	mov	r2, r3
 80020aa:	4619      	mov	r1, r3
 80020ac:	f003 fb88 	bl	80057c0 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 80020b0:	3401      	adds	r4, #1
		wsPrepareArray();
 80020b2:	f003 fbc5 	bl	8005840 <wsPrepareArray>
		HAL_Delay(20);
 80020b6:	2014      	movs	r0, #20
 80020b8:	f003 fc5c 	bl	8005974 <HAL_Delay>
	for (i = 0; i < MAX_NODES + 1; i++)
 80020bc:	2c09      	cmp	r4, #9
 80020be:	d1f1      	bne.n	80020a4 <ShowLogo+0x4>
	}
	clearStrings();
 80020c0:	f7ff fb00 	bl	80016c4 <clearStrings>
	sprintf(string[0], "SX127* is OK ");
 80020c4:	4912      	ldr	r1, [pc, #72]	; (8002110 <ShowLogo+0x70>)
 80020c6:	4813      	ldr	r0, [pc, #76]	; (8002114 <ShowLogo+0x74>)
 80020c8:	f006 faaa 	bl	8008620 <strcpy>
	sprintf(string[1], "Module Firmware:");
 80020cc:	4912      	ldr	r1, [pc, #72]	; (8002118 <ShowLogo+0x78>)
 80020ce:	4813      	ldr	r0, [pc, #76]	; (800211c <ShowLogo+0x7c>)
 80020d0:	f006 faa6 	bl	8008620 <strcpy>
	sprintf(string[2], "0x%X", myRadio.revision);
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <ShowLogo+0x80>)
 80020d6:	4913      	ldr	r1, [pc, #76]	; (8002124 <ShowLogo+0x84>)
 80020d8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 80020dc:	4812      	ldr	r0, [pc, #72]	; (8002128 <ShowLogo+0x88>)
 80020de:	f006 fa7f 	bl	80085e0 <siprintf>
	updateLcd();
 80020e2:	f7ff fb01 	bl	80016e8 <updateLcd>
	HAL_Delay(100);
 80020e6:	2064      	movs	r0, #100	; 0x64
 80020e8:	f003 fc44 	bl	8005974 <HAL_Delay>
	clearStrings();
 80020ec:	f7ff faea 	bl	80016c4 <clearStrings>
	sprintf(string[0], "Firmware:");
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <ShowLogo+0x8c>)
 80020f2:	4808      	ldr	r0, [pc, #32]	; (8002114 <ShowLogo+0x74>)
 80020f4:	f006 fa94 	bl	8008620 <strcpy>
	sprintf(string[1], "%lu", version);
 80020f8:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <ShowLogo+0x90>)
 80020fa:	490e      	ldr	r1, [pc, #56]	; (8002134 <ShowLogo+0x94>)
 80020fc:	4807      	ldr	r0, [pc, #28]	; (800211c <ShowLogo+0x7c>)
 80020fe:	f006 fa6f 	bl	80085e0 <siprintf>
	updateLcd();
 8002102:	f7ff faf1 	bl	80016e8 <updateLcd>
	HAL_Delay(100);
}
 8002106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 800210a:	2064      	movs	r0, #100	; 0x64
 800210c:	f003 bc32 	b.w	8005974 <HAL_Delay>
 8002110:	0800a925 	.word	0x0800a925
 8002114:	20000168 	.word	0x20000168
 8002118:	0800a933 	.word	0x0800a933
 800211c:	200001a8 	.word	0x200001a8
 8002120:	20000998 	.word	0x20000998
 8002124:	0800a944 	.word	0x0800a944
 8002128:	200001e8 	.word	0x200001e8
 800212c:	0800a93a 	.word	0x0800a93a
 8002130:	08082021 	.word	0x08082021
 8002134:	0800aa52 	.word	0x0800aa52

08002138 <changeDisarmNode>:
 * @param  selectedNode obvious
 * @retval None
 */
void changeDisarmNode(int16_t selectedNode)
{
	nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <changeDisarmNode+0x2c>)
 800213a:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 800213e:	7b93      	ldrb	r3, [r2, #14]
	txMes->adr = selectedNode;
	txMes->disarm = nodes[selectedNode].disarmRequest;
	txMes->message = MSG_DOWN_REQUEST;
	txMes->uplink = 0;
 8002140:	00c0      	lsls	r0, r0, #3
	nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	7393      	strb	r3, [r2, #14]
	txMes->adr = selectedNode;
 800214a:	4a07      	ldr	r2, [pc, #28]	; (8002168 <changeDisarmNode+0x30>)
	txMes->uplink = 0;
 800214c:	f040 0002 	orr.w	r0, r0, #2
	txMes->adr = selectedNode;
 8002150:	6812      	ldr	r2, [r2, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8002152:	7851      	ldrb	r1, [r2, #1]
	txMes->uplink = 0;
 8002154:	7010      	strb	r0, [r2, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8002156:	f363 0100 	bfi	r1, r3, #0, #1
 800215a:	7051      	strb	r1, [r2, #1]
	SX127X_transmitAsync(&myRadio, 3);
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <changeDisarmNode+0x34>)
 800215e:	2103      	movs	r1, #3
 8002160:	f002 bf1a 	b.w	8004f98 <SX127X_transmitAsync>
 8002164:	20000ce0 	.word	0x20000ce0
 8002168:	20000048 	.word	0x20000048
 800216c:	20000998 	.word	0x20000998

08002170 <pingNode>:
 * @param  None
 * @retval None
 */
void pingNode(int16_t selectedNode)
{
	txMes->adr = selectedNode;
 8002170:	4b08      	ldr	r3, [pc, #32]	; (8002194 <pingNode+0x24>)
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <pingNode+0x28>)
	txMes->adr = selectedNode;
 8002174:	681b      	ldr	r3, [r3, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8002176:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 800217a:	7b91      	ldrb	r1, [r2, #14]
 800217c:	785a      	ldrb	r2, [r3, #1]
	txMes->message = MSG_DOWN_REQUEST;
	txMes->uplink = 0;
 800217e:	00c0      	lsls	r0, r0, #3
 8002180:	f040 0002 	orr.w	r0, r0, #2
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8002184:	f361 0200 	bfi	r2, r1, #0, #1
	txMes->uplink = 0;
 8002188:	7018      	strb	r0, [r3, #0]
	SX127X_transmitAsync(&myRadio, 3);
 800218a:	2103      	movs	r1, #3
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <pingNode+0x2c>)
	txMes->disarm = nodes[selectedNode].disarmRequest;
 800218e:	705a      	strb	r2, [r3, #1]
	SX127X_transmitAsync(&myRadio, 3);
 8002190:	f002 bf02 	b.w	8004f98 <SX127X_transmitAsync>
 8002194:	20000048 	.word	0x20000048
 8002198:	20000ce0 	.word	0x20000ce0
 800219c:	20000998 	.word	0x20000998

080021a0 <button_back>:
 * @brief Called when back button pressed
 * @param  None
 * @retval None
 */
void button_back()
{
 80021a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ssd1306_Init();
 80021a2:	f002 f9e3 	bl	800456c <ssd1306_Init>
	UC1609_Init(&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 80021a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021aa:	2400      	movs	r4, #0
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4b22      	ldr	r3, [pc, #136]	; (8002238 <button_back+0x98>)
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	4619      	mov	r1, r3
 80021b6:	4821      	ldr	r0, [pc, #132]	; (800223c <button_back+0x9c>)
 80021b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80021bc:	f7fe ffd6 	bl	800116c <UC1609_Init>
	menuPosition = 0;
 80021c0:	491f      	ldr	r1, [pc, #124]	; (8002240 <button_back+0xa0>)
 80021c2:	700c      	strb	r4, [r1, #0]
	alarmOff();
 80021c4:	f7ff fdf2 	bl	8001dac <alarmOff>
	switch (screenMode)
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <button_back+0xa4>)
 80021ca:	4622      	mov	r2, r4
 80021cc:	7818      	ldrb	r0, [r3, #0]
 80021ce:	281e      	cmp	r0, #30
 80021d0:	d82f      	bhi.n	8002232 <button_back+0x92>
 80021d2:	e8df f000 	tbb	[pc, r0]
 80021d6:	1213      	.short	0x1213
 80021d8:	10101010 	.word	0x10101010
 80021dc:	1a1a1a1a 	.word	0x1a1a1a1a
 80021e0:	1d1a1a1a 	.word	0x1d1a1a1a
 80021e4:	2020201d 	.word	0x2020201d
 80021e8:	26262323 	.word	0x26262323
 80021ec:	10102626 	.word	0x10102626
 80021f0:	122e1010 	.word	0x122e1010
 80021f4:	13          	.byte	0x13
 80021f5:	00          	.byte	0x00
	case smRadioMenu:
	case smBaseMenu:
	case smNodeMenu:
	case smNetworkMenu:

		menuPosition = 0;
 80021f6:	700a      	strb	r2, [r1, #0]
		screenMode = smMainMenu;
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]

	default:
		screenMode--;
	}

	flag.lcdRefreshRequest = 1;
 80021fc:	4a12      	ldr	r2, [pc, #72]	; (8002248 <button_back+0xa8>)
 80021fe:	7813      	ldrb	r3, [r2, #0]
 8002200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002204:	7013      	strb	r3, [r2, #0]
}
 8002206:	b004      	add	sp, #16
 8002208:	bd10      	pop	{r4, pc}
		menuPosition = 0;
 800220a:	700a      	strb	r2, [r1, #0]
		screenMode = smRadioMenu;
 800220c:	2202      	movs	r2, #2
 800220e:	e7f4      	b.n	80021fa <button_back+0x5a>
		menuPosition = 0;
 8002210:	700a      	strb	r2, [r1, #0]
		screenMode = smBaseMenu;
 8002212:	2203      	movs	r2, #3
 8002214:	e7f1      	b.n	80021fa <button_back+0x5a>
		menuPosition = 0;
 8002216:	700a      	strb	r2, [r1, #0]
		screenMode = smNodeMenu;
 8002218:	2204      	movs	r2, #4
 800221a:	e7ee      	b.n	80021fa <button_back+0x5a>
		menuPosition = 0;
 800221c:	700a      	strb	r2, [r1, #0]
			screenMode = smNetworkMenu;
 800221e:	2205      	movs	r2, #5
 8002220:	e7eb      	b.n	80021fa <button_back+0x5a>
		if (cursorPos)
 8002222:	490a      	ldr	r1, [pc, #40]	; (800224c <button_back+0xac>)
 8002224:	f991 2000 	ldrsb.w	r2, [r1]
 8002228:	2a00      	cmp	r2, #0
 800222a:	d0f8      	beq.n	800221e <button_back+0x7e>
			cursorPos--;
 800222c:	3a01      	subs	r2, #1
 800222e:	700a      	strb	r2, [r1, #0]
 8002230:	e7e4      	b.n	80021fc <button_back+0x5c>
		screenMode--;
 8002232:	3801      	subs	r0, #1
 8002234:	7018      	strb	r0, [r3, #0]
 8002236:	e7e1      	b.n	80021fc <button_back+0x5c>
 8002238:	40010c00 	.word	0x40010c00
 800223c:	20000a1c 	.word	0x20000a1c
 8002240:	2000014f 	.word	0x2000014f
 8002244:	20000162 	.word	0x20000162
 8002248:	20000b4c 	.word	0x20000b4c
 800224c:	20000122 	.word	0x20000122

08002250 <lcdRoutine>:
 * @brief Forms and updates information on LCD, depends by selected screen mode
 * @param None
 * @retval None
 */
void lcdRoutine()
{
 8002250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	clearStrings();
 8002254:	f7ff fa36 	bl	80016c4 <clearStrings>
	switch (screenMode)
 8002258:	4bab      	ldr	r3, [pc, #684]	; (8002508 <lcdRoutine+0x2b8>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b1e      	cmp	r3, #30
 800225e:	f200 8083 	bhi.w	8002368 <lcdRoutine+0x118>
 8002262:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002266:	001f      	.short	0x001f
 8002268:	012000fe 	.word	0x012000fe
 800226c:	01d101c3 	.word	0x01d101c3
 8002270:	020401e4 	.word	0x020401e4
 8002274:	024c023d 	.word	0x024c023d
 8002278:	02620259 	.word	0x02620259
 800227c:	0273026b 	.word	0x0273026b
 8002280:	02a40294 	.word	0x02a40294
 8002284:	02b702af 	.word	0x02b702af
 8002288:	02c902c3 	.word	0x02c902c3
 800228c:	02f302e0 	.word	0x02f302e0
 8002290:	03aa0395 	.word	0x03aa0395
 8002294:	03d003bf 	.word	0x03d003bf
 8002298:	03e103e8 	.word	0x03e103e8
 800229c:	043103d6 	.word	0x043103d6
 80022a0:	04900466 	.word	0x04900466
	{
	case smRegular:

		if (HAL_GetTick() - lastNodeChangeTick < DELAY_SELECTED_MARK)
 80022a4:	f003 fb60 	bl	8005968 <HAL_GetTick>
 80022a8:	4b98      	ldr	r3, [pc, #608]	; (800250c <lcdRoutine+0x2bc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1ac0      	subs	r0, r0, r3
 80022ae:	f241 3387 	movw	r3, #4999	; 0x1387
 80022b2:	4298      	cmp	r0, r3
 80022b4:	d864      	bhi.n	8002380 <lcdRoutine+0x130>
		{
			if (nodes[selectedNode].activated)
 80022b6:	4d96      	ldr	r5, [pc, #600]	; (8002510 <lcdRoutine+0x2c0>)
 80022b8:	4c96      	ldr	r4, [pc, #600]	; (8002514 <lcdRoutine+0x2c4>)
 80022ba:	f9b5 2000 	ldrsh.w	r2, [r5]
 80022be:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 80022c2:	7c59      	ldrb	r1, [r3, #17]
 80022c4:	2900      	cmp	r1, #0
 80022c6:	d058      	beq.n	800237a <lcdRoutine+0x12a>
			{
				sprintf(string[0], "Node %d Last RSSI:%ddB", lastMessageFrom,
 80022c8:	4a93      	ldr	r2, [pc, #588]	; (8002518 <lcdRoutine+0x2c8>)
 80022ca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80022ce:	7812      	ldrb	r2, [r2, #0]
 80022d0:	4992      	ldr	r1, [pc, #584]	; (800251c <lcdRoutine+0x2cc>)
 80022d2:	4893      	ldr	r0, [pc, #588]	; (8002520 <lcdRoutine+0x2d0>)
 80022d4:	f006 f984 	bl	80085e0 <siprintf>
						nodes[selectedNode].rssi);
				if (nodes[selectedNode].opened)
 80022d8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80022dc:	015e      	lsls	r6, r3, #5
 80022de:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80022e2:	7bdb      	ldrb	r3, [r3, #15]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d044      	beq.n	8002372 <lcdRoutine+0x122>
					sprintf(string[1], "Door: Opened");
 80022e8:	498e      	ldr	r1, [pc, #568]	; (8002524 <lcdRoutine+0x2d4>)
				else
					sprintf(string[1], "Door: Closed");
 80022ea:	488f      	ldr	r0, [pc, #572]	; (8002528 <lcdRoutine+0x2d8>)
 80022ec:	f006 f998 	bl	8008620 <strcpy>
				if (nodes[selectedNode].powered)
 80022f0:	19a3      	adds	r3, r4, r6
 80022f2:	7c1b      	ldrb	r3, [r3, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03e      	beq.n	8002376 <lcdRoutine+0x126>
					sprintf(string[2], "Powered by PS");
 80022f8:	498c      	ldr	r1, [pc, #560]	; (800252c <lcdRoutine+0x2dc>)
				else
					sprintf(string[2], "Powered by battery");
				sprintf(string[3], "Voltage:%s V",
 80022fa:	4426      	add	r6, r4
					sprintf(string[2], "Powered by battery");
 80022fc:	488c      	ldr	r0, [pc, #560]	; (8002530 <lcdRoutine+0x2e0>)
 80022fe:	f006 f98f 	bl	8008620 <strcpy>
				sprintf(string[3], "Voltage:%s V",
 8002302:	6970      	ldr	r0, [r6, #20]
 8002304:	f7ff f830 	bl	8001368 <floatToString2>
 8002308:	498a      	ldr	r1, [pc, #552]	; (8002534 <lcdRoutine+0x2e4>)
 800230a:	4602      	mov	r2, r0
 800230c:	488a      	ldr	r0, [pc, #552]	; (8002538 <lcdRoutine+0x2e8>)
 800230e:	f006 f967 	bl	80085e0 <siprintf>
						floatToString2(nodes[selectedNode].voltage));
				sprintf(string[4], "Temperature:%s C",
 8002312:	f9b5 3000 	ldrsh.w	r3, [r5]
 8002316:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 800231a:	69d8      	ldr	r0, [r3, #28]
 800231c:	f7ff f848 	bl	80013b0 <floatToString1>
 8002320:	4986      	ldr	r1, [pc, #536]	; (800253c <lcdRoutine+0x2ec>)
 8002322:	4602      	mov	r2, r0
 8002324:	4886      	ldr	r0, [pc, #536]	; (8002540 <lcdRoutine+0x2f0>)
 8002326:	f006 f95b 	bl	80085e0 <siprintf>
						floatToString1(nodes[selectedNode].temperature));
				sprintf(string[5], "Next message in %d s",
						(int16_t) (nodes[selectedNode].NextMessageTick
 800232a:	f9b5 3000 	ldrsh.w	r3, [r5]
 800232e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
								- HAL_GetTick()) / 1000);
 8002332:	889e      	ldrh	r6, [r3, #4]
 8002334:	f003 fb18 	bl	8005968 <HAL_GetTick>
				sprintf(string[5], "Next message in %d s",
 8002338:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
								- HAL_GetTick()) / 1000);
 800233c:	1a36      	subs	r6, r6, r0
				sprintf(string[5], "Next message in %d s",
 800233e:	b236      	sxth	r6, r6
 8002340:	fb96 f2f2 	sdiv	r2, r6, r2
 8002344:	497f      	ldr	r1, [pc, #508]	; (8002544 <lcdRoutine+0x2f4>)
 8002346:	4880      	ldr	r0, [pc, #512]	; (8002548 <lcdRoutine+0x2f8>)
 8002348:	f006 f94a 	bl	80085e0 <siprintf>
				sprintf(string[6], "Alarm: %s",
						maskNames[nodes[selectedNode].masked]);
 800234c:	f9b5 3000 	ldrsh.w	r3, [r5]
				sprintf(string[6], "Alarm: %s",
 8002350:	497e      	ldr	r1, [pc, #504]	; (800254c <lcdRoutine+0x2fc>)
						maskNames[nodes[selectedNode].masked]);
 8002352:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8002356:	7b22      	ldrb	r2, [r4, #12]
				sprintf(string[6], "Alarm: %s",
 8002358:	4b7d      	ldr	r3, [pc, #500]	; (8002550 <lcdRoutine+0x300>)
 800235a:	487e      	ldr	r0, [pc, #504]	; (8002554 <lcdRoutine+0x304>)
 800235c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
								"Door opened" : "Door closed",
						nodes[lastMessageFrom].powered ? "PS" : "Battery");
				sprintf(string[6], "T:%d, V:%s",
						(int) nodes[lastMessageFrom].temperature,
						floatToString1(nodes[lastMessageFrom].voltage));
				sprintf(string[7], "Delay:%d", nodes[lastMessageFrom].delay);
 8002360:	f006 f93e 	bl	80085e0 <siprintf>
			}

		}
		updateLcd();
 8002364:	f7ff f9c0 	bl	80016e8 <updateLcd>
		string[selectedMode][0] = 0x83;

		break;
	}
	updateLcd();
}
 8002368:	b002      	add	sp, #8
 800236a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	updateLcd();
 800236e:	f7ff b9bb 	b.w	80016e8 <updateLcd>
					sprintf(string[1], "Door: Closed");
 8002372:	4979      	ldr	r1, [pc, #484]	; (8002558 <lcdRoutine+0x308>)
 8002374:	e7b9      	b.n	80022ea <lcdRoutine+0x9a>
					sprintf(string[2], "Powered by battery");
 8002376:	4979      	ldr	r1, [pc, #484]	; (800255c <lcdRoutine+0x30c>)
 8002378:	e7bf      	b.n	80022fa <lcdRoutine+0xaa>
				sprintf(string[0], "Node %d not activated", selectedNode);
 800237a:	4979      	ldr	r1, [pc, #484]	; (8002560 <lcdRoutine+0x310>)
 800237c:	4868      	ldr	r0, [pc, #416]	; (8002520 <lcdRoutine+0x2d0>)
 800237e:	e7ef      	b.n	8002360 <lcdRoutine+0x110>
			sprintf(string[0], "Up:%lu d & %lu:%02lu:%02lu ", upTime / 86400,
 8002380:	203c      	movs	r0, #60	; 0x3c
					upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002382:	f44f 6161 	mov.w	r1, #3600	; 0xe10
			sprintf(string[0], "Up:%lu d & %lu:%02lu:%02lu ", upTime / 86400,
 8002386:	4b77      	ldr	r3, [pc, #476]	; (8002564 <lcdRoutine+0x314>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	2318      	movs	r3, #24
 800238c:	fbb2 f5f0 	udiv	r5, r2, r0
					upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002390:	fbb2 f1f1 	udiv	r1, r2, r1
			sprintf(string[0], "Up:%lu d & %lu:%02lu:%02lu ", upTime / 86400,
 8002394:	fb00 2415 	mls	r4, r0, r5, r2
 8002398:	9401      	str	r4, [sp, #4]
 800239a:	fbb5 f4f0 	udiv	r4, r5, r0
 800239e:	fbb1 f6f3 	udiv	r6, r1, r3
 80023a2:	fb00 5014 	mls	r0, r0, r4, r5
 80023a6:	fb03 1316 	mls	r3, r3, r6, r1
 80023aa:	496f      	ldr	r1, [pc, #444]	; (8002568 <lcdRoutine+0x318>)
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	fbb2 f2f1 	udiv	r2, r2, r1
 80023b2:	485b      	ldr	r0, [pc, #364]	; (8002520 <lcdRoutine+0x2d0>)
 80023b4:	496d      	ldr	r1, [pc, #436]	; (800256c <lcdRoutine+0x31c>)
 80023b6:	f006 f913 	bl	80085e0 <siprintf>
			sprintf(string[1], "Msg:%lu/%lu", receivedMesCntSuc,
 80023ba:	4b6d      	ldr	r3, [pc, #436]	; (8002570 <lcdRoutine+0x320>)
 80023bc:	4a6d      	ldr	r2, [pc, #436]	; (8002574 <lcdRoutine+0x324>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	496d      	ldr	r1, [pc, #436]	; (8002578 <lcdRoutine+0x328>)
 80023c4:	4858      	ldr	r0, [pc, #352]	; (8002528 <lcdRoutine+0x2d8>)
 80023c6:	f006 f90b 	bl	80085e0 <siprintf>
			sprintf(string[2], "Max delay: %lu", absoluteMaxDelay);
 80023ca:	4b6c      	ldr	r3, [pc, #432]	; (800257c <lcdRoutine+0x32c>)
			if (lastMessageFrom != 255)
 80023cc:	4d52      	ldr	r5, [pc, #328]	; (8002518 <lcdRoutine+0x2c8>)
			sprintf(string[2], "Max delay: %lu", absoluteMaxDelay);
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	496b      	ldr	r1, [pc, #428]	; (8002580 <lcdRoutine+0x330>)
 80023d2:	4857      	ldr	r0, [pc, #348]	; (8002530 <lcdRoutine+0x2e0>)
 80023d4:	f006 f904 	bl	80085e0 <siprintf>
			if (lastMessageFrom != 255)
 80023d8:	782b      	ldrb	r3, [r5, #0]
 80023da:	2bff      	cmp	r3, #255	; 0xff
 80023dc:	d0c2      	beq.n	8002364 <lcdRoutine+0x114>
				uint8_t next = nextNodeAwaited();
 80023de:	f7ff faf7 	bl	80019d0 <nextNodeAwaited>
						(nodes[next].NextMessageTick - HAL_GetTick()) / 1000);
 80023e2:	4c4c      	ldr	r4, [pc, #304]	; (8002514 <lcdRoutine+0x2c4>)
				uint8_t next = nextNodeAwaited();
 80023e4:	4606      	mov	r6, r0
						(nodes[next].NextMessageTick - HAL_GetTick()) / 1000);
 80023e6:	eb04 1340 	add.w	r3, r4, r0, lsl #5
 80023ea:	685f      	ldr	r7, [r3, #4]
 80023ec:	f003 fabc 	bl	8005968 <HAL_GetTick>
				sprintf(string[3], "Waiting # %d in %lu s", next,
 80023f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						(nodes[next].NextMessageTick - HAL_GetTick()) / 1000);
 80023f4:	1a3f      	subs	r7, r7, r0
				sprintf(string[3], "Waiting # %d in %lu s", next,
 80023f6:	fbb7 f3f3 	udiv	r3, r7, r3
 80023fa:	4632      	mov	r2, r6
 80023fc:	4961      	ldr	r1, [pc, #388]	; (8002584 <lcdRoutine+0x334>)
 80023fe:	484e      	ldr	r0, [pc, #312]	; (8002538 <lcdRoutine+0x2e8>)
 8002400:	f006 f8ee 	bl	80085e0 <siprintf>
				sprintf(string[4], "Last message from %d", lastMessageFrom);
 8002404:	782a      	ldrb	r2, [r5, #0]
 8002406:	4960      	ldr	r1, [pc, #384]	; (8002588 <lcdRoutine+0x338>)
 8002408:	484d      	ldr	r0, [pc, #308]	; (8002540 <lcdRoutine+0x2f0>)
 800240a:	f006 f8e9 	bl	80085e0 <siprintf>
						nodes[lastMessageFrom].opened ?
 800240e:	782b      	ldrb	r3, [r5, #0]
				sprintf(string[5], "%s, %s",
 8002410:	4a5e      	ldr	r2, [pc, #376]	; (800258c <lcdRoutine+0x33c>)
						nodes[lastMessageFrom].opened ?
 8002412:	eb04 1343 	add.w	r3, r4, r3, lsl #5
				sprintf(string[5], "%s, %s",
 8002416:	7bd8      	ldrb	r0, [r3, #15]
 8002418:	7c19      	ldrb	r1, [r3, #16]
 800241a:	4b5d      	ldr	r3, [pc, #372]	; (8002590 <lcdRoutine+0x340>)
 800241c:	2900      	cmp	r1, #0
 800241e:	bf08      	it	eq
 8002420:	4613      	moveq	r3, r2
 8002422:	495c      	ldr	r1, [pc, #368]	; (8002594 <lcdRoutine+0x344>)
 8002424:	4a5c      	ldr	r2, [pc, #368]	; (8002598 <lcdRoutine+0x348>)
 8002426:	2800      	cmp	r0, #0
 8002428:	bf08      	it	eq
 800242a:	460a      	moveq	r2, r1
 800242c:	495b      	ldr	r1, [pc, #364]	; (800259c <lcdRoutine+0x34c>)
 800242e:	4846      	ldr	r0, [pc, #280]	; (8002548 <lcdRoutine+0x2f8>)
 8002430:	f006 f8d6 	bl	80085e0 <siprintf>
						(int) nodes[lastMessageFrom].temperature,
 8002434:	782e      	ldrb	r6, [r5, #0]
 8002436:	eb04 1646 	add.w	r6, r4, r6, lsl #5
				sprintf(string[6], "T:%d, V:%s",
 800243a:	69f0      	ldr	r0, [r6, #28]
 800243c:	f7fe fd4a 	bl	8000ed4 <__aeabi_f2iz>
 8002440:	4607      	mov	r7, r0
 8002442:	6970      	ldr	r0, [r6, #20]
 8002444:	f7fe ffb4 	bl	80013b0 <floatToString1>
 8002448:	463a      	mov	r2, r7
 800244a:	4603      	mov	r3, r0
 800244c:	4954      	ldr	r1, [pc, #336]	; (80025a0 <lcdRoutine+0x350>)
 800244e:	4841      	ldr	r0, [pc, #260]	; (8002554 <lcdRoutine+0x304>)
 8002450:	f006 f8c6 	bl	80085e0 <siprintf>
				sprintf(string[7], "Delay:%d", nodes[lastMessageFrom].delay);
 8002454:	782b      	ldrb	r3, [r5, #0]
 8002456:	4953      	ldr	r1, [pc, #332]	; (80025a4 <lcdRoutine+0x354>)
 8002458:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 800245c:	8922      	ldrh	r2, [r4, #8]
 800245e:	4852      	ldr	r0, [pc, #328]	; (80025a8 <lcdRoutine+0x358>)
 8002460:	e77e      	b.n	8002360 <lcdRoutine+0x110>
		sprintf(string[0], "Main Menu");
 8002462:	4c2f      	ldr	r4, [pc, #188]	; (8002520 <lcdRoutine+0x2d0>)
 8002464:	4951      	ldr	r1, [pc, #324]	; (80025ac <lcdRoutine+0x35c>)
 8002466:	4620      	mov	r0, r4
 8002468:	f006 f8da 	bl	8008620 <strcpy>
		sprintf(string[1], " Radio Settings");
 800246c:	4950      	ldr	r1, [pc, #320]	; (80025b0 <lcdRoutine+0x360>)
 800246e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002472:	f006 f8d5 	bl	8008620 <strcpy>
		sprintf(string[2], " Base Settings");
 8002476:	494f      	ldr	r1, [pc, #316]	; (80025b4 <lcdRoutine+0x364>)
 8002478:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800247c:	f006 f8d0 	bl	8008620 <strcpy>
		sprintf(string[3], " Node Settings");
 8002480:	494d      	ldr	r1, [pc, #308]	; (80025b8 <lcdRoutine+0x368>)
 8002482:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002486:	f006 f8cb 	bl	8008620 <strcpy>
		sprintf(string[4], " Network Settings");
 800248a:	494c      	ldr	r1, [pc, #304]	; (80025bc <lcdRoutine+0x36c>)
 800248c:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002490:	f006 f8c6 	bl	8008620 <strcpy>
		sprintf(string[5], " Save Settings");
 8002494:	494a      	ldr	r1, [pc, #296]	; (80025c0 <lcdRoutine+0x370>)
 8002496:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800249a:	f006 f8c1 	bl	8008620 <strcpy>
		sprintf(string[6], " Info");
 800249e:	4949      	ldr	r1, [pc, #292]	; (80025c4 <lcdRoutine+0x374>)
		sprintf(string[6], " Set Host");
 80024a0:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 80024a4:	e025      	b.n	80024f2 <lcdRoutine+0x2a2>
		sprintf(string[0], "Radio settings");
 80024a6:	4c1e      	ldr	r4, [pc, #120]	; (8002520 <lcdRoutine+0x2d0>)
 80024a8:	4947      	ldr	r1, [pc, #284]	; (80025c8 <lcdRoutine+0x378>)
 80024aa:	4620      	mov	r0, r4
 80024ac:	f006 f8b8 	bl	8008620 <strcpy>
		sprintf(string[1], " Frequency");
 80024b0:	4946      	ldr	r1, [pc, #280]	; (80025cc <lcdRoutine+0x37c>)
 80024b2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80024b6:	f006 f8b3 	bl	8008620 <strcpy>
		sprintf(string[2], " Bandwidth");
 80024ba:	4945      	ldr	r1, [pc, #276]	; (80025d0 <lcdRoutine+0x380>)
 80024bc:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80024c0:	f006 f8ae 	bl	8008620 <strcpy>
		sprintf(string[3], " Spreading Factor");
 80024c4:	4943      	ldr	r1, [pc, #268]	; (80025d4 <lcdRoutine+0x384>)
 80024c6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80024ca:	f006 f8a9 	bl	8008620 <strcpy>
		sprintf(string[4], " SyncWord");
 80024ce:	4942      	ldr	r1, [pc, #264]	; (80025d8 <lcdRoutine+0x388>)
 80024d0:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80024d4:	f006 f8a4 	bl	8008620 <strcpy>
		sprintf(string[5], " Coding rate");
 80024d8:	4940      	ldr	r1, [pc, #256]	; (80025dc <lcdRoutine+0x38c>)
 80024da:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 80024de:	f006 f89f 	bl	8008620 <strcpy>
		sprintf(string[6], " Preamble");
 80024e2:	493f      	ldr	r1, [pc, #252]	; (80025e0 <lcdRoutine+0x390>)
 80024e4:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 80024e8:	f006 f89a 	bl	8008620 <strcpy>
		sprintf(string[7], " Power");
 80024ec:	493d      	ldr	r1, [pc, #244]	; (80025e4 <lcdRoutine+0x394>)
 80024ee:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 80024f2:	f006 f895 	bl	8008620 <strcpy>
		string[1 + menuPosition][0] = 0x83;
 80024f6:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <lcdRoutine+0x398>)
 80024f8:	f993 3000 	ldrsb.w	r3, [r3]
 80024fc:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 8002500:	2383      	movs	r3, #131	; 0x83
 8002502:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		break;
 8002506:	e72f      	b.n	8002368 <lcdRoutine+0x118>
 8002508:	20000162 	.word	0x20000162
 800250c:	2000012c 	.word	0x2000012c
 8002510:	20000166 	.word	0x20000166
 8002514:	20000ce0 	.word	0x20000ce0
 8002518:	2000002c 	.word	0x2000002c
 800251c:	0800a97a 	.word	0x0800a97a
 8002520:	20000168 	.word	0x20000168
 8002524:	0800a991 	.word	0x0800a991
 8002528:	200001a8 	.word	0x200001a8
 800252c:	0800a9ab 	.word	0x0800a9ab
 8002530:	200001e8 	.word	0x200001e8
 8002534:	0800a9cc 	.word	0x0800a9cc
 8002538:	20000228 	.word	0x20000228
 800253c:	0800a9d9 	.word	0x0800a9d9
 8002540:	20000268 	.word	0x20000268
 8002544:	0800a9ea 	.word	0x0800a9ea
 8002548:	200002a8 	.word	0x200002a8
 800254c:	0800a9ff 	.word	0x0800a9ff
 8002550:	20000030 	.word	0x20000030
 8002554:	200002e8 	.word	0x200002e8
 8002558:	0800a99e 	.word	0x0800a99e
 800255c:	0800a9b9 	.word	0x0800a9b9
 8002560:	0800aa09 	.word	0x0800aa09
 8002564:	20000b40 	.word	0x20000b40
 8002568:	00015180 	.word	0x00015180
 800256c:	0800aa1f 	.word	0x0800aa1f
 8002570:	20000154 	.word	0x20000154
 8002574:	20000158 	.word	0x20000158
 8002578:	0800aa3b 	.word	0x0800aa3b
 800257c:	2000011c 	.word	0x2000011c
 8002580:	0800aa47 	.word	0x0800aa47
 8002584:	0800aa56 	.word	0x0800aa56
 8002588:	0800aa6c 	.word	0x0800aa6c
 800258c:	0800a961 	.word	0x0800a961
 8002590:	0800a9b6 	.word	0x0800a9b6
 8002594:	0800a955 	.word	0x0800a955
 8002598:	0800a949 	.word	0x0800a949
 800259c:	0800aa81 	.word	0x0800aa81
 80025a0:	0800aa88 	.word	0x0800aa88
 80025a4:	0800aa93 	.word	0x0800aa93
 80025a8:	20000328 	.word	0x20000328
 80025ac:	0800aa9c 	.word	0x0800aa9c
 80025b0:	0800aaa6 	.word	0x0800aaa6
 80025b4:	0800aab6 	.word	0x0800aab6
 80025b8:	0800aac5 	.word	0x0800aac5
 80025bc:	0800aad4 	.word	0x0800aad4
 80025c0:	0800aae6 	.word	0x0800aae6
 80025c4:	0800aaf5 	.word	0x0800aaf5
 80025c8:	0800aafb 	.word	0x0800aafb
 80025cc:	0800ab0a 	.word	0x0800ab0a
 80025d0:	0800ab15 	.word	0x0800ab15
 80025d4:	0800ab20 	.word	0x0800ab20
 80025d8:	0800ab32 	.word	0x0800ab32
 80025dc:	0800ab3c 	.word	0x0800ab3c
 80025e0:	0800ab49 	.word	0x0800ab49
 80025e4:	0800ab53 	.word	0x0800ab53
 80025e8:	2000014f 	.word	0x2000014f
		sprintf(string[0], "Base settings");
 80025ec:	4ca4      	ldr	r4, [pc, #656]	; (8002880 <lcdRoutine+0x630>)
 80025ee:	49a5      	ldr	r1, [pc, #660]	; (8002884 <lcdRoutine+0x634>)
 80025f0:	4620      	mov	r0, r4
 80025f2:	f006 f815 	bl	8008620 <strcpy>
		sprintf(string[1], " Warning Delay 1");
 80025f6:	49a4      	ldr	r1, [pc, #656]	; (8002888 <lcdRoutine+0x638>)
 80025f8:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80025fc:	f006 f810 	bl	8008620 <strcpy>
		sprintf(string[2], " Warning Delay 2");
 8002600:	49a2      	ldr	r1, [pc, #648]	; (800288c <lcdRoutine+0x63c>)
 8002602:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002606:	e774      	b.n	80024f2 <lcdRoutine+0x2a2>
		sprintf(string[0], "Node settings");
 8002608:	4c9d      	ldr	r4, [pc, #628]	; (8002880 <lcdRoutine+0x630>)
 800260a:	49a1      	ldr	r1, [pc, #644]	; (8002890 <lcdRoutine+0x640>)
 800260c:	4620      	mov	r0, r4
 800260e:	f006 f807 	bl	8008620 <strcpy>
		sprintf(string[1], " Working Interval");
 8002612:	49a0      	ldr	r1, [pc, #640]	; (8002894 <lcdRoutine+0x644>)
 8002614:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002618:	f006 f802 	bl	8008620 <strcpy>
		sprintf(string[2], " Use LED");
 800261c:	499e      	ldr	r1, [pc, #632]	; (8002898 <lcdRoutine+0x648>)
 800261e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002622:	f005 fffd 	bl	8008620 <strcpy>
		sprintf(string[3], " Clean saved data");
 8002626:	499d      	ldr	r1, [pc, #628]	; (800289c <lcdRoutine+0x64c>)
 8002628:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 800262c:	e761      	b.n	80024f2 <lcdRoutine+0x2a2>
		sprintf(string[0], "Network settings");
 800262e:	4c94      	ldr	r4, [pc, #592]	; (8002880 <lcdRoutine+0x630>)
 8002630:	499b      	ldr	r1, [pc, #620]	; (80028a0 <lcdRoutine+0x650>)
 8002632:	4620      	mov	r0, r4
 8002634:	f005 fff4 	bl	8008620 <strcpy>
		sprintf(string[1], " Refresh Network List");
 8002638:	499a      	ldr	r1, [pc, #616]	; (80028a4 <lcdRoutine+0x654>)
 800263a:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800263e:	f005 ffef 	bl	8008620 <strcpy>
		sprintf(string[2], " Select Network");
 8002642:	4999      	ldr	r1, [pc, #612]	; (80028a8 <lcdRoutine+0x658>)
 8002644:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002648:	f005 ffea 	bl	8008620 <strcpy>
		sprintf(string[3], " Set WiFi Password");
 800264c:	4997      	ldr	r1, [pc, #604]	; (80028ac <lcdRoutine+0x65c>)
 800264e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002652:	f005 ffe5 	bl	8008620 <strcpy>
		sprintf(string[4], " Set Server Password");
 8002656:	4996      	ldr	r1, [pc, #600]	; (80028b0 <lcdRoutine+0x660>)
 8002658:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800265c:	f005 ffe0 	bl	8008620 <strcpy>
		sprintf(string[5], " Set BaseID");
 8002660:	4994      	ldr	r1, [pc, #592]	; (80028b4 <lcdRoutine+0x664>)
 8002662:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8002666:	f005 ffdb 	bl	8008620 <strcpy>
		sprintf(string[6], " Set Host");
 800266a:	4993      	ldr	r1, [pc, #588]	; (80028b8 <lcdRoutine+0x668>)
 800266c:	e718      	b.n	80024a0 <lcdRoutine+0x250>
		sprintf(string[0], "Frequency");
 800266e:	4993      	ldr	r1, [pc, #588]	; (80028bc <lcdRoutine+0x66c>)
 8002670:	4883      	ldr	r0, [pc, #524]	; (8002880 <lcdRoutine+0x630>)
 8002672:	f005 ffd5 	bl	8008620 <strcpy>
				(settings.realFrequency / 10000) % 100);
 8002676:	f242 7110 	movw	r1, #10000	; 0x2710
		sprintf(string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000,
 800267a:	4b91      	ldr	r3, [pc, #580]	; (80028c0 <lcdRoutine+0x670>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2364      	movs	r3, #100	; 0x64
				(settings.realFrequency / 10000) % 100);
 8002680:	fbb2 f1f1 	udiv	r1, r2, r1
		sprintf(string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000,
 8002684:	fbb1 f0f3 	udiv	r0, r1, r3
 8002688:	fb03 1310 	mls	r3, r3, r0, r1
 800268c:	498d      	ldr	r1, [pc, #564]	; (80028c4 <lcdRoutine+0x674>)
 800268e:	488e      	ldr	r0, [pc, #568]	; (80028c8 <lcdRoutine+0x678>)
 8002690:	fbb2 f2f1 	udiv	r2, r2, r1
 8002694:	498d      	ldr	r1, [pc, #564]	; (80028cc <lcdRoutine+0x67c>)
 8002696:	f005 ffa3 	bl	80085e0 <siprintf>
		if (currentInterval != BAD_INTERVAL)
 800269a:	4e8d      	ldr	r6, [pc, #564]	; (80028d0 <lcdRoutine+0x680>)
 800269c:	f996 3000 	ldrsb.w	r3, [r6]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	d018      	beq.n	80026d6 <lcdRoutine+0x486>
					legalFreq.interval[currentInterval].maxPower);
 80026a4:	250c      	movs	r5, #12
 80026a6:	4c8b      	ldr	r4, [pc, #556]	; (80028d4 <lcdRoutine+0x684>)
			sprintf(string[2], "Power:%u dB",
 80026a8:	498b      	ldr	r1, [pc, #556]	; (80028d8 <lcdRoutine+0x688>)
					legalFreq.interval[currentInterval].maxPower);
 80026aa:	fb05 4303 	mla	r3, r5, r3, r4
			sprintf(string[2], "Power:%u dB",
 80026ae:	488b      	ldr	r0, [pc, #556]	; (80028dc <lcdRoutine+0x68c>)
 80026b0:	7b1a      	ldrb	r2, [r3, #12]
 80026b2:	f005 ff95 	bl	80085e0 <siprintf>
					legalFreq.interval[currentInterval].maxAirUse / 10,
 80026b6:	f996 3000 	ldrsb.w	r3, [r6]
			sprintf(string[3], "Air use.%u.%u%%",
 80026ba:	4889      	ldr	r0, [pc, #548]	; (80028e0 <lcdRoutine+0x690>)
					legalFreq.interval[currentInterval].maxAirUse / 10,
 80026bc:	fb05 4303 	mla	r3, r5, r3, r4
 80026c0:	89d9      	ldrh	r1, [r3, #14]
			sprintf(string[3], "Air use.%u.%u%%",
 80026c2:	230a      	movs	r3, #10
 80026c4:	fbb1 f2f3 	udiv	r2, r1, r3
 80026c8:	fb03 1312 	mls	r3, r3, r2, r1
 80026cc:	4985      	ldr	r1, [pc, #532]	; (80028e4 <lcdRoutine+0x694>)
 80026ce:	b29b      	uxth	r3, r3
		sprintf(string[1], "%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 80026d0:	f005 ff86 	bl	80085e0 <siprintf>
		break;
 80026d4:	e648      	b.n	8002368 <lcdRoutine+0x118>
			sprintf(string[3], "Not within ISM Band!");
 80026d6:	4984      	ldr	r1, [pc, #528]	; (80028e8 <lcdRoutine+0x698>)
			sprintf(string[3], "Not within ISM band");
 80026d8:	4881      	ldr	r0, [pc, #516]	; (80028e0 <lcdRoutine+0x690>)
 80026da:	f005 ffa1 	bl	8008620 <strcpy>
 80026de:	e643      	b.n	8002368 <lcdRoutine+0x118>
		sprintf(string[0], "Spreading");
 80026e0:	4982      	ldr	r1, [pc, #520]	; (80028ec <lcdRoutine+0x69c>)
 80026e2:	4867      	ldr	r0, [pc, #412]	; (8002880 <lcdRoutine+0x630>)
 80026e4:	f005 ff9c 	bl	8008620 <strcpy>
		sprintf(string[1], "factor");
 80026e8:	4981      	ldr	r1, [pc, #516]	; (80028f0 <lcdRoutine+0x6a0>)
 80026ea:	4877      	ldr	r0, [pc, #476]	; (80028c8 <lcdRoutine+0x678>)
 80026ec:	f005 ff98 	bl	8008620 <strcpy>
		sprintf(string[2], "%d", settings.sf);
 80026f0:	4b73      	ldr	r3, [pc, #460]	; (80028c0 <lcdRoutine+0x670>)
 80026f2:	4980      	ldr	r1, [pc, #512]	; (80028f4 <lcdRoutine+0x6a4>)
 80026f4:	7b9a      	ldrb	r2, [r3, #14]
		sprintf(string[2], "%lu s", settings.superWarningDelay / 1000);
 80026f6:	4879      	ldr	r0, [pc, #484]	; (80028dc <lcdRoutine+0x68c>)
		sprintf(string[7], "TX:%d", netHandler.TX);
 80026f8:	f005 ff72 	bl	80085e0 <siprintf>
		break;
 80026fc:	e634      	b.n	8002368 <lcdRoutine+0x118>
		sprintf(string[0], "Bandwidth");
 80026fe:	497e      	ldr	r1, [pc, #504]	; (80028f8 <lcdRoutine+0x6a8>)
 8002700:	485f      	ldr	r0, [pc, #380]	; (8002880 <lcdRoutine+0x630>)
 8002702:	f005 ff8d 	bl	8008620 <strcpy>
		sprintf(string[1], "%s", bandwidthNames[settings.bw]);
 8002706:	4b6e      	ldr	r3, [pc, #440]	; (80028c0 <lcdRoutine+0x670>)
 8002708:	486f      	ldr	r0, [pc, #444]	; (80028c8 <lcdRoutine+0x678>)
 800270a:	7bda      	ldrb	r2, [r3, #15]
 800270c:	4b7b      	ldr	r3, [pc, #492]	; (80028fc <lcdRoutine+0x6ac>)
 800270e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002712:	f005 ff85 	bl	8008620 <strcpy>
 8002716:	e7c0      	b.n	800269a <lcdRoutine+0x44a>
		sprintf(string[0], "SyncWord");
 8002718:	4979      	ldr	r1, [pc, #484]	; (8002900 <lcdRoutine+0x6b0>)
 800271a:	4859      	ldr	r0, [pc, #356]	; (8002880 <lcdRoutine+0x630>)
 800271c:	f005 ff80 	bl	8008620 <strcpy>
		sprintf(string[1], "0x%X", settings.syncWord);
 8002720:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <lcdRoutine+0x670>)
 8002722:	4978      	ldr	r1, [pc, #480]	; (8002904 <lcdRoutine+0x6b4>)
 8002724:	7c5a      	ldrb	r2, [r3, #17]
		sprintf(string[1], "release %lu", version);
 8002726:	4868      	ldr	r0, [pc, #416]	; (80028c8 <lcdRoutine+0x678>)
 8002728:	e7e6      	b.n	80026f8 <lcdRoutine+0x4a8>
		sprintf(string[0], "Coding rate");
 800272a:	4977      	ldr	r1, [pc, #476]	; (8002908 <lcdRoutine+0x6b8>)
 800272c:	4854      	ldr	r0, [pc, #336]	; (8002880 <lcdRoutine+0x630>)
 800272e:	f005 ff77 	bl	8008620 <strcpy>
		sprintf(string[1], "4/%d", settings.cr + 4);
 8002732:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <lcdRoutine+0x670>)
 8002734:	4975      	ldr	r1, [pc, #468]	; (800290c <lcdRoutine+0x6bc>)
 8002736:	7c1a      	ldrb	r2, [r3, #16]
 8002738:	3204      	adds	r2, #4
 800273a:	e7f4      	b.n	8002726 <lcdRoutine+0x4d6>
		sprintf(string[0], "Preamble");
 800273c:	4974      	ldr	r1, [pc, #464]	; (8002910 <lcdRoutine+0x6c0>)
 800273e:	4850      	ldr	r0, [pc, #320]	; (8002880 <lcdRoutine+0x630>)
 8002740:	f005 ff6e 	bl	8008620 <strcpy>
		sprintf(string[1], "%d sym", settings.preamble);
 8002744:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <lcdRoutine+0x670>)
 8002746:	4973      	ldr	r1, [pc, #460]	; (8002914 <lcdRoutine+0x6c4>)
 8002748:	899a      	ldrh	r2, [r3, #12]
 800274a:	e7ec      	b.n	8002726 <lcdRoutine+0x4d6>
		sprintf(string[0], "Transmission power");
 800274c:	4972      	ldr	r1, [pc, #456]	; (8002918 <lcdRoutine+0x6c8>)
 800274e:	484c      	ldr	r0, [pc, #304]	; (8002880 <lcdRoutine+0x630>)
 8002750:	f005 ff66 	bl	8008620 <strcpy>
		sprintf(string[1], "%d dBm (%d mW)", settings.power,
 8002754:	4b5a      	ldr	r3, [pc, #360]	; (80028c0 <lcdRoutine+0x670>)
 8002756:	4971      	ldr	r1, [pc, #452]	; (800291c <lcdRoutine+0x6cc>)
 8002758:	7c9a      	ldrb	r2, [r3, #18]
				mW[settings.power - 10]);
 800275a:	4b71      	ldr	r3, [pc, #452]	; (8002920 <lcdRoutine+0x6d0>)
		sprintf(string[1], "%d dBm (%d mW)", settings.power,
 800275c:	485a      	ldr	r0, [pc, #360]	; (80028c8 <lcdRoutine+0x678>)
				mW[settings.power - 10]);
 800275e:	4413      	add	r3, r2
		sprintf(string[1], "%d dBm (%d mW)", settings.power,
 8002760:	f813 3c0a 	ldrb.w	r3, [r3, #-10]
 8002764:	f005 ff3c 	bl	80085e0 <siprintf>
		if (currentInterval != BAD_INTERVAL)
 8002768:	4b59      	ldr	r3, [pc, #356]	; (80028d0 <lcdRoutine+0x680>)
 800276a:	f993 4000 	ldrsb.w	r4, [r3]
 800276e:	1c63      	adds	r3, r4, #1
 8002770:	d00b      	beq.n	800278a <lcdRoutine+0x53a>
			sprintf(string[2], "For this frequency");
 8002772:	496c      	ldr	r1, [pc, #432]	; (8002924 <lcdRoutine+0x6d4>)
 8002774:	4859      	ldr	r0, [pc, #356]	; (80028dc <lcdRoutine+0x68c>)
 8002776:	f005 ff53 	bl	8008620 <strcpy>
					legalFreq.interval[currentInterval].maxPower);
 800277a:	220c      	movs	r2, #12
 800277c:	4b55      	ldr	r3, [pc, #340]	; (80028d4 <lcdRoutine+0x684>)
			sprintf(string[3], "Max:%d dBm",
 800277e:	496a      	ldr	r1, [pc, #424]	; (8002928 <lcdRoutine+0x6d8>)
					legalFreq.interval[currentInterval].maxPower);
 8002780:	fb02 3404 	mla	r4, r2, r4, r3
			sprintf(string[3], "Max:%d dBm",
 8002784:	7b22      	ldrb	r2, [r4, #12]
			sprintf(string[3], "Found %d Nets", netHandler.netCount);
 8002786:	4856      	ldr	r0, [pc, #344]	; (80028e0 <lcdRoutine+0x690>)
 8002788:	e7b6      	b.n	80026f8 <lcdRoutine+0x4a8>
			sprintf(string[3], "Not within ISM band");
 800278a:	4968      	ldr	r1, [pc, #416]	; (800292c <lcdRoutine+0x6dc>)
 800278c:	e7a4      	b.n	80026d8 <lcdRoutine+0x488>
		sprintf(string[0], "Level 1");
 800278e:	4968      	ldr	r1, [pc, #416]	; (8002930 <lcdRoutine+0x6e0>)
 8002790:	483b      	ldr	r0, [pc, #236]	; (8002880 <lcdRoutine+0x630>)
 8002792:	f005 ff45 	bl	8008620 <strcpy>
		sprintf(string[1], "Silence Alarm");
 8002796:	4967      	ldr	r1, [pc, #412]	; (8002934 <lcdRoutine+0x6e4>)
 8002798:	484b      	ldr	r0, [pc, #300]	; (80028c8 <lcdRoutine+0x678>)
 800279a:	f005 ff41 	bl	8008620 <strcpy>
		sprintf(string[2], "%lu s", settings.warningDelay / 1000);
 800279e:	4b48      	ldr	r3, [pc, #288]	; (80028c0 <lcdRoutine+0x670>)
 80027a0:	685a      	ldr	r2, [r3, #4]
		sprintf(string[2], "%lu s", settings.superWarningDelay / 1000);
 80027a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a6:	4964      	ldr	r1, [pc, #400]	; (8002938 <lcdRoutine+0x6e8>)
 80027a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ac:	e7a3      	b.n	80026f6 <lcdRoutine+0x4a6>
		sprintf(string[0], "Level 2");
 80027ae:	4963      	ldr	r1, [pc, #396]	; (800293c <lcdRoutine+0x6ec>)
 80027b0:	4833      	ldr	r0, [pc, #204]	; (8002880 <lcdRoutine+0x630>)
 80027b2:	f005 ff35 	bl	8008620 <strcpy>
		sprintf(string[1], "Silence alarm");
 80027b6:	4962      	ldr	r1, [pc, #392]	; (8002940 <lcdRoutine+0x6f0>)
 80027b8:	4843      	ldr	r0, [pc, #268]	; (80028c8 <lcdRoutine+0x678>)
 80027ba:	f005 ff31 	bl	8008620 <strcpy>
		sprintf(string[2], "%lu s", settings.superWarningDelay / 1000);
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <lcdRoutine+0x670>)
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	e7ee      	b.n	80027a2 <lcdRoutine+0x552>
		sprintf(string[0], "Send status every");
 80027c4:	495f      	ldr	r1, [pc, #380]	; (8002944 <lcdRoutine+0x6f4>)
 80027c6:	482e      	ldr	r0, [pc, #184]	; (8002880 <lcdRoutine+0x630>)
 80027c8:	f005 ff2a 	bl	8008620 <strcpy>
		sprintf(string[1], "%lu s", nodeSettings.workInterval);
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <lcdRoutine+0x6f8>)
 80027ce:	495a      	ldr	r1, [pc, #360]	; (8002938 <lcdRoutine+0x6e8>)
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	e7a8      	b.n	8002726 <lcdRoutine+0x4d6>
		sprintf(string[0], "Node LED use");
 80027d4:	495d      	ldr	r1, [pc, #372]	; (800294c <lcdRoutine+0x6fc>)
 80027d6:	482a      	ldr	r0, [pc, #168]	; (8002880 <lcdRoutine+0x630>)
 80027d8:	f005 ff22 	bl	8008620 <strcpy>
		if (nodeSettings.useLed)
 80027dc:	4b5a      	ldr	r3, [pc, #360]	; (8002948 <lcdRoutine+0x6f8>)
 80027de:	7c1b      	ldrb	r3, [r3, #16]
 80027e0:	b113      	cbz	r3, 80027e8 <lcdRoutine+0x598>
			sprintf(string[1], "On");
 80027e2:	495b      	ldr	r1, [pc, #364]	; (8002950 <lcdRoutine+0x700>)
		sprintf(string[1], "OK:Yes BACK:No");
 80027e4:	4838      	ldr	r0, [pc, #224]	; (80028c8 <lcdRoutine+0x678>)
 80027e6:	e778      	b.n	80026da <lcdRoutine+0x48a>
			sprintf(string[1], "Off");
 80027e8:	495a      	ldr	r1, [pc, #360]	; (8002954 <lcdRoutine+0x704>)
 80027ea:	e7fb      	b.n	80027e4 <lcdRoutine+0x594>
		sprintf(string[0], "Clean saved");
 80027ec:	495a      	ldr	r1, [pc, #360]	; (8002958 <lcdRoutine+0x708>)
 80027ee:	4824      	ldr	r0, [pc, #144]	; (8002880 <lcdRoutine+0x630>)
 80027f0:	f005 ff16 	bl	8008620 <strcpy>
		sprintf(string[1], "Node data");
 80027f4:	4959      	ldr	r1, [pc, #356]	; (800295c <lcdRoutine+0x70c>)
 80027f6:	e7f5      	b.n	80027e4 <lcdRoutine+0x594>
		sprintf(string[0], "Refresh Network");
 80027f8:	4959      	ldr	r1, [pc, #356]	; (8002960 <lcdRoutine+0x710>)
 80027fa:	4821      	ldr	r0, [pc, #132]	; (8002880 <lcdRoutine+0x630>)
		if (netHandler.netRefreshInProgress)
 80027fc:	4c59      	ldr	r4, [pc, #356]	; (8002964 <lcdRoutine+0x714>)
		sprintf(string[0], "Refresh Network");
 80027fe:	f005 ff0f 	bl	8008620 <strcpy>
		sprintf(string[1], "List");
 8002802:	4959      	ldr	r1, [pc, #356]	; (8002968 <lcdRoutine+0x718>)
 8002804:	4830      	ldr	r0, [pc, #192]	; (80028c8 <lcdRoutine+0x678>)
 8002806:	f005 ff0b 	bl	8008620 <strcpy>
		if (netHandler.netRefreshInProgress)
 800280a:	79a3      	ldrb	r3, [r4, #6]
 800280c:	b11b      	cbz	r3, 8002816 <lcdRoutine+0x5c6>
			sprintf(string[2], "In progress...");
 800280e:	4957      	ldr	r1, [pc, #348]	; (800296c <lcdRoutine+0x71c>)
 8002810:	4832      	ldr	r0, [pc, #200]	; (80028dc <lcdRoutine+0x68c>)
 8002812:	f005 ff05 	bl	8008620 <strcpy>
		if (netHandler.netRefreshDone)
 8002816:	79e3      	ldrb	r3, [r4, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f43f ada5 	beq.w	8002368 <lcdRoutine+0x118>
			sprintf(string[3], "Found %d Nets", netHandler.netCount);
 800281e:	f894 2631 	ldrb.w	r2, [r4, #1585]	; 0x631
 8002822:	4953      	ldr	r1, [pc, #332]	; (8002970 <lcdRoutine+0x720>)
 8002824:	e7af      	b.n	8002786 <lcdRoutine+0x536>
		sprintf(string[0], "Select WLAN");
 8002826:	4953      	ldr	r1, [pc, #332]	; (8002974 <lcdRoutine+0x724>)
 8002828:	4815      	ldr	r0, [pc, #84]	; (8002880 <lcdRoutine+0x630>)
 800282a:	f005 fef9 	bl	8008620 <strcpy>
		if (netHandler.nets[selectedNetwork][0] == 0)
 800282e:	4b52      	ldr	r3, [pc, #328]	; (8002978 <lcdRoutine+0x728>)
 8002830:	494c      	ldr	r1, [pc, #304]	; (8002964 <lcdRoutine+0x714>)
 8002832:	f993 2000 	ldrsb.w	r2, [r3]
 8002836:	eb01 1042 	add.w	r0, r1, r2, lsl #5
 800283a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 800283e:	0153      	lsls	r3, r2, #5
 8002840:	b908      	cbnz	r0, 8002846 <lcdRoutine+0x5f6>
			sprintf(string[1], "Slot %d is empty", selectedNetwork);
 8002842:	494e      	ldr	r1, [pc, #312]	; (800297c <lcdRoutine+0x72c>)
 8002844:	e76f      	b.n	8002726 <lcdRoutine+0x4d6>
			sprintf(string[1], "%s", netHandler.nets[selectedNetwork]);
 8002846:	3330      	adds	r3, #48	; 0x30
 8002848:	4419      	add	r1, r3
 800284a:	e7cb      	b.n	80027e4 <lcdRoutine+0x594>
		sprintf(string[0], "Set WiFi password");
 800284c:	494c      	ldr	r1, [pc, #304]	; (8002980 <lcdRoutine+0x730>)
		setCursor(string[2], cursorPos);
 800284e:	4c4d      	ldr	r4, [pc, #308]	; (8002984 <lcdRoutine+0x734>)
		sprintf(string[0], "Set WiFi password");
 8002850:	480b      	ldr	r0, [pc, #44]	; (8002880 <lcdRoutine+0x630>)
 8002852:	f005 fee5 	bl	8008620 <strcpy>
		sprintf(string[1], settings.WiFiPass);
 8002856:	494c      	ldr	r1, [pc, #304]	; (8002988 <lcdRoutine+0x738>)
 8002858:	481b      	ldr	r0, [pc, #108]	; (80028c8 <lcdRoutine+0x678>)
 800285a:	f005 fec1 	bl	80085e0 <siprintf>
		setCursor(string[2], cursorPos);
 800285e:	f994 1000 	ldrsb.w	r1, [r4]
 8002862:	481e      	ldr	r0, [pc, #120]	; (80028dc <lcdRoutine+0x68c>)
 8002864:	f7fe ff36 	bl	80016d4 <setCursor>
		if (settings.WiFiPass[cursorPos] == ' '
 8002868:	f994 2000 	ldrsb.w	r2, [r4]
 800286c:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <lcdRoutine+0x670>)
 800286e:	4413      	add	r3, r2
				|| settings.WiFiPass[cursorPos] == '\0')
 8002870:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002874:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8002878:	f47f ad76 	bne.w	8002368 <lcdRoutine+0x118>
			sprintf(string[3], "Done");
 800287c:	4943      	ldr	r1, [pc, #268]	; (800298c <lcdRoutine+0x73c>)
 800287e:	e72b      	b.n	80026d8 <lcdRoutine+0x488>
 8002880:	20000168 	.word	0x20000168
 8002884:	0800ab5a 	.word	0x0800ab5a
 8002888:	0800ab68 	.word	0x0800ab68
 800288c:	0800ab79 	.word	0x0800ab79
 8002890:	0800ab8a 	.word	0x0800ab8a
 8002894:	0800ab98 	.word	0x0800ab98
 8002898:	0800abaa 	.word	0x0800abaa
 800289c:	0800abb3 	.word	0x0800abb3
 80028a0:	0800abc5 	.word	0x0800abc5
 80028a4:	0800abd6 	.word	0x0800abd6
 80028a8:	0800abec 	.word	0x0800abec
 80028ac:	0800abfc 	.word	0x0800abfc
 80028b0:	0800ac0f 	.word	0x0800ac0f
 80028b4:	0800ac24 	.word	0x0800ac24
 80028b8:	0800ac30 	.word	0x0800ac30
 80028bc:	0800ab0b 	.word	0x0800ab0b
 80028c0:	20000a78 	.word	0x20000a78
 80028c4:	000f4240 	.word	0x000f4240
 80028c8:	200001a8 	.word	0x200001a8
 80028cc:	0800ac3a 	.word	0x0800ac3a
 80028d0:	200015c8 	.word	0x200015c8
 80028d4:	20000bcc 	.word	0x20000bcc
 80028d8:	0800ac4a 	.word	0x0800ac4a
 80028dc:	200001e8 	.word	0x200001e8
 80028e0:	20000228 	.word	0x20000228
 80028e4:	0800ac56 	.word	0x0800ac56
 80028e8:	0800ac66 	.word	0x0800ac66
 80028ec:	0800ac7b 	.word	0x0800ac7b
 80028f0:	0800ac85 	.word	0x0800ac85
 80028f4:	0800aa7e 	.word	0x0800aa7e
 80028f8:	0800ab16 	.word	0x0800ab16
 80028fc:	20000000 	.word	0x20000000
 8002900:	0800ab33 	.word	0x0800ab33
 8002904:	0800a944 	.word	0x0800a944
 8002908:	0800ab3d 	.word	0x0800ab3d
 800290c:	0800ac8c 	.word	0x0800ac8c
 8002910:	0800ab4a 	.word	0x0800ab4a
 8002914:	0800ac91 	.word	0x0800ac91
 8002918:	0800ac98 	.word	0x0800ac98
 800291c:	0800acab 	.word	0x0800acab
 8002920:	0800b0b0 	.word	0x0800b0b0
 8002924:	0800acba 	.word	0x0800acba
 8002928:	0800accd 	.word	0x0800accd
 800292c:	0800acd8 	.word	0x0800acd8
 8002930:	0800acec 	.word	0x0800acec
 8002934:	0800acf4 	.word	0x0800acf4
 8002938:	0800aa66 	.word	0x0800aa66
 800293c:	0800ad02 	.word	0x0800ad02
 8002940:	0800ad0a 	.word	0x0800ad0a
 8002944:	0800ad18 	.word	0x0800ad18
 8002948:	20000c74 	.word	0x20000c74
 800294c:	0800ad2a 	.word	0x0800ad2a
 8002950:	0800ad37 	.word	0x0800ad37
 8002954:	0800ad3a 	.word	0x0800ad3a
 8002958:	0800ad3e 	.word	0x0800ad3e
 800295c:	0800ad4a 	.word	0x0800ad4a
 8002960:	0800ad54 	.word	0x0800ad54
 8002964:	20000e8c 	.word	0x20000e8c
 8002968:	0800abe7 	.word	0x0800abe7
 800296c:	0800ad64 	.word	0x0800ad64
 8002970:	0800ad73 	.word	0x0800ad73
 8002974:	0800ad81 	.word	0x0800ad81
 8002978:	20000164 	.word	0x20000164
 800297c:	0800ad8d 	.word	0x0800ad8d
 8002980:	0800ad9e 	.word	0x0800ad9e
 8002984:	20000122 	.word	0x20000122
 8002988:	20000a9b 	.word	0x20000a9b
 800298c:	0800adb0 	.word	0x0800adb0
		sprintf(string[0], "Set Server password");
 8002990:	4990      	ldr	r1, [pc, #576]	; (8002bd4 <lcdRoutine+0x984>)
		setCursor(string[2], cursorPos);
 8002992:	4c91      	ldr	r4, [pc, #580]	; (8002bd8 <lcdRoutine+0x988>)
		sprintf(string[0], "Set Server password");
 8002994:	4891      	ldr	r0, [pc, #580]	; (8002bdc <lcdRoutine+0x98c>)
 8002996:	f005 fe43 	bl	8008620 <strcpy>
		sprintf(string[1], settings.ServerPass);
 800299a:	4991      	ldr	r1, [pc, #580]	; (8002be0 <lcdRoutine+0x990>)
 800299c:	4891      	ldr	r0, [pc, #580]	; (8002be4 <lcdRoutine+0x994>)
 800299e:	f005 fe1f 	bl	80085e0 <siprintf>
		setCursor(string[2], cursorPos);
 80029a2:	f994 1000 	ldrsb.w	r1, [r4]
 80029a6:	4890      	ldr	r0, [pc, #576]	; (8002be8 <lcdRoutine+0x998>)
 80029a8:	f7fe fe94 	bl	80016d4 <setCursor>
		if (settings.ServerPass[cursorPos] == ' '
 80029ac:	f994 2000 	ldrsb.w	r2, [r4]
 80029b0:	4b8e      	ldr	r3, [pc, #568]	; (8002bec <lcdRoutine+0x99c>)
 80029b2:	4413      	add	r3, r2
				|| settings.ServerPass[cursorPos] == '\0')
 80029b4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80029b8:	e75c      	b.n	8002874 <lcdRoutine+0x624>
		sprintf(string[0], "Set Host");
 80029ba:	498d      	ldr	r1, [pc, #564]	; (8002bf0 <lcdRoutine+0x9a0>)
		setCursor(string[2], cursorPos);
 80029bc:	4c86      	ldr	r4, [pc, #536]	; (8002bd8 <lcdRoutine+0x988>)
		sprintf(string[0], "Set Host");
 80029be:	4887      	ldr	r0, [pc, #540]	; (8002bdc <lcdRoutine+0x98c>)
 80029c0:	f005 fe2e 	bl	8008620 <strcpy>
		sprintf(string[1], settings.host);
 80029c4:	498b      	ldr	r1, [pc, #556]	; (8002bf4 <lcdRoutine+0x9a4>)
 80029c6:	4887      	ldr	r0, [pc, #540]	; (8002be4 <lcdRoutine+0x994>)
 80029c8:	f005 fe0a 	bl	80085e0 <siprintf>
		setCursor(string[2], cursorPos);
 80029cc:	f994 1000 	ldrsb.w	r1, [r4]
 80029d0:	4885      	ldr	r0, [pc, #532]	; (8002be8 <lcdRoutine+0x998>)
 80029d2:	f7fe fe7f 	bl	80016d4 <setCursor>
		if (settings.host[cursorPos] == ' ' || settings.host[cursorPos] == '\0')
 80029d6:	f994 2000 	ldrsb.w	r2, [r4]
 80029da:	4b84      	ldr	r3, [pc, #528]	; (8002bec <lcdRoutine+0x99c>)
 80029dc:	4413      	add	r3, r2
 80029de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029e2:	e747      	b.n	8002874 <lcdRoutine+0x624>
		sprintf(string[0], "Set Base ID");
 80029e4:	4984      	ldr	r1, [pc, #528]	; (8002bf8 <lcdRoutine+0x9a8>)
 80029e6:	487d      	ldr	r0, [pc, #500]	; (8002bdc <lcdRoutine+0x98c>)
 80029e8:	f005 fe1a 	bl	8008620 <strcpy>
		sprintf(string[1], "%07lu", settings.baseID);
 80029ec:	4b7f      	ldr	r3, [pc, #508]	; (8002bec <lcdRoutine+0x99c>)
 80029ee:	4983      	ldr	r1, [pc, #524]	; (8002bfc <lcdRoutine+0x9ac>)
 80029f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029f2:	487c      	ldr	r0, [pc, #496]	; (8002be4 <lcdRoutine+0x994>)
 80029f4:	f005 fdf4 	bl	80085e0 <siprintf>
		setCursor(string[2], cursorPos);
 80029f8:	4b77      	ldr	r3, [pc, #476]	; (8002bd8 <lcdRoutine+0x988>)
 80029fa:	487b      	ldr	r0, [pc, #492]	; (8002be8 <lcdRoutine+0x998>)
 80029fc:	f993 1000 	ldrsb.w	r1, [r3]
 8002a00:	f7fe fe68 	bl	80016d4 <setCursor>
		break;
 8002a04:	e4b0      	b.n	8002368 <lcdRoutine+0x118>
		sprintf(string[0], "Save to Flash?");
 8002a06:	497e      	ldr	r1, [pc, #504]	; (8002c00 <lcdRoutine+0x9b0>)
 8002a08:	4874      	ldr	r0, [pc, #464]	; (8002bdc <lcdRoutine+0x98c>)
 8002a0a:	f005 fe09 	bl	8008620 <strcpy>
		sprintf(string[1], "OK:Yes BACK:No");
 8002a0e:	497d      	ldr	r1, [pc, #500]	; (8002c04 <lcdRoutine+0x9b4>)
 8002a10:	e6e8      	b.n	80027e4 <lcdRoutine+0x594>
		sprintf(string[0], "Total received:");
 8002a12:	497d      	ldr	r1, [pc, #500]	; (8002c08 <lcdRoutine+0x9b8>)
 8002a14:	4871      	ldr	r0, [pc, #452]	; (8002bdc <lcdRoutine+0x98c>)
 8002a16:	f005 fe03 	bl	8008620 <strcpy>
		sprintf(string[1], "%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 8002a1a:	4b7c      	ldr	r3, [pc, #496]	; (8002c0c <lcdRoutine+0x9bc>)
 8002a1c:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <lcdRoutine+0x9c0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	497c      	ldr	r1, [pc, #496]	; (8002c14 <lcdRoutine+0x9c4>)
 8002a24:	486f      	ldr	r0, [pc, #444]	; (8002be4 <lcdRoutine+0x994>)
 8002a26:	e653      	b.n	80026d0 <lcdRoutine+0x480>
		sprintf(string[0], "Firmware: ");
 8002a28:	497b      	ldr	r1, [pc, #492]	; (8002c18 <lcdRoutine+0x9c8>)
 8002a2a:	486c      	ldr	r0, [pc, #432]	; (8002bdc <lcdRoutine+0x98c>)
 8002a2c:	f005 fdf8 	bl	8008620 <strcpy>
		sprintf(string[1], "release %lu", version);
 8002a30:	4a7a      	ldr	r2, [pc, #488]	; (8002c1c <lcdRoutine+0x9cc>)
 8002a32:	497b      	ldr	r1, [pc, #492]	; (8002c20 <lcdRoutine+0x9d0>)
 8002a34:	e677      	b.n	8002726 <lcdRoutine+0x4d6>
		sprintf(string[0], "Uptime:");
 8002a36:	497b      	ldr	r1, [pc, #492]	; (8002c24 <lcdRoutine+0x9d4>)
 8002a38:	4868      	ldr	r0, [pc, #416]	; (8002bdc <lcdRoutine+0x98c>)
 8002a3a:	f005 fdf1 	bl	8008620 <strcpy>
		sprintf(string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400,
 8002a3e:	203c      	movs	r0, #60	; 0x3c
				upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002a40:	f44f 6161 	mov.w	r1, #3600	; 0xe10
		sprintf(string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400,
 8002a44:	4b78      	ldr	r3, [pc, #480]	; (8002c28 <lcdRoutine+0x9d8>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2318      	movs	r3, #24
 8002a4a:	fbb2 f5f0 	udiv	r5, r2, r0
				upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002a4e:	fbb2 f1f1 	udiv	r1, r2, r1
		sprintf(string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400,
 8002a52:	fb00 2415 	mls	r4, r0, r5, r2
 8002a56:	9401      	str	r4, [sp, #4]
 8002a58:	fbb5 f4f0 	udiv	r4, r5, r0
 8002a5c:	fbb1 f6f3 	udiv	r6, r1, r3
 8002a60:	fb00 5014 	mls	r0, r0, r4, r5
 8002a64:	fb03 1316 	mls	r3, r3, r6, r1
 8002a68:	4970      	ldr	r1, [pc, #448]	; (8002c2c <lcdRoutine+0x9dc>)
 8002a6a:	9000      	str	r0, [sp, #0]
 8002a6c:	fbb2 f2f1 	udiv	r2, r2, r1
 8002a70:	485c      	ldr	r0, [pc, #368]	; (8002be4 <lcdRoutine+0x994>)
 8002a72:	496f      	ldr	r1, [pc, #444]	; (8002c30 <lcdRoutine+0x9e0>)
 8002a74:	f005 fdb4 	bl	80085e0 <siprintf>
		sprintf(string[2], "RX use: %s", floatToString2(airUseForRx));
 8002a78:	4b6e      	ldr	r3, [pc, #440]	; (8002c34 <lcdRoutine+0x9e4>)
				netHandler.connected);
 8002a7a:	4c6f      	ldr	r4, [pc, #444]	; (8002c38 <lcdRoutine+0x9e8>)
		sprintf(string[2], "RX use: %s", floatToString2(airUseForRx));
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	f7fe fc73 	bl	8001368 <floatToString2>
 8002a82:	496e      	ldr	r1, [pc, #440]	; (8002c3c <lcdRoutine+0x9ec>)
 8002a84:	4602      	mov	r2, r0
 8002a86:	4858      	ldr	r0, [pc, #352]	; (8002be8 <lcdRoutine+0x998>)
 8002a88:	f005 fdaa 	bl	80085e0 <siprintf>
		sprintf(string[3], "TX use: %s", floatToString2(airUseForTx));
 8002a8c:	4b6c      	ldr	r3, [pc, #432]	; (8002c40 <lcdRoutine+0x9f0>)
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	f7fe fc6a 	bl	8001368 <floatToString2>
 8002a94:	496b      	ldr	r1, [pc, #428]	; (8002c44 <lcdRoutine+0x9f4>)
 8002a96:	4602      	mov	r2, r0
 8002a98:	486b      	ldr	r0, [pc, #428]	; (8002c48 <lcdRoutine+0x9f8>)
 8002a9a:	f005 fda1 	bl	80085e0 <siprintf>
		sprintf(string[4], "WiFI:%d,Connected:%d", netHandler.plugged,
 8002a9e:	78a3      	ldrb	r3, [r4, #2]
 8002aa0:	7822      	ldrb	r2, [r4, #0]
 8002aa2:	496a      	ldr	r1, [pc, #424]	; (8002c4c <lcdRoutine+0x9fc>)
 8002aa4:	486a      	ldr	r0, [pc, #424]	; (8002c50 <lcdRoutine+0xa00>)
 8002aa6:	f005 fd9b 	bl	80085e0 <siprintf>
		sprintf(string[5], "Local IP:%s", netHandler.ip);
 8002aaa:	496a      	ldr	r1, [pc, #424]	; (8002c54 <lcdRoutine+0xa04>)
 8002aac:	f104 0214 	add.w	r2, r4, #20
 8002ab0:	4869      	ldr	r0, [pc, #420]	; (8002c58 <lcdRoutine+0xa08>)
 8002ab2:	f005 fd95 	bl	80085e0 <siprintf>
		sprintf(string[6], "Online:%d", netHandler.online);
 8002ab6:	78e2      	ldrb	r2, [r4, #3]
 8002ab8:	4968      	ldr	r1, [pc, #416]	; (8002c5c <lcdRoutine+0xa0c>)
 8002aba:	4869      	ldr	r0, [pc, #420]	; (8002c60 <lcdRoutine+0xa10>)
 8002abc:	f005 fd90 	bl	80085e0 <siprintf>
		sprintf(string[7], "TX:%d", netHandler.TX);
 8002ac0:	7962      	ldrb	r2, [r4, #5]
 8002ac2:	4968      	ldr	r1, [pc, #416]	; (8002c64 <lcdRoutine+0xa14>)
 8002ac4:	4868      	ldr	r0, [pc, #416]	; (8002c68 <lcdRoutine+0xa18>)
 8002ac6:	e617      	b.n	80026f8 <lcdRoutine+0x4a8>
			for (int i = 0; i < MAX_NODES; i++)
 8002ac8:	2400      	movs	r4, #0
 8002aca:	4d44      	ldr	r5, [pc, #272]	; (8002bdc <lcdRoutine+0x98c>)
				sprintf(string[i], "%d", i);
 8002acc:	4e67      	ldr	r6, [pc, #412]	; (8002c6c <lcdRoutine+0xa1c>)
 8002ace:	4622      	mov	r2, r4
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	4631      	mov	r1, r6
			for (int i = 0; i < MAX_NODES; i++)
 8002ad4:	3401      	adds	r4, #1
				sprintf(string[i], "%d", i);
 8002ad6:	f005 fd83 	bl	80085e0 <siprintf>
			for (int i = 0; i < MAX_NODES; i++)
 8002ada:	2c08      	cmp	r4, #8
 8002adc:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8002ae0:	d1f5      	bne.n	8002ace <lcdRoutine+0x87e>
			ssd1306_DrawLine(6, 0, 6, 63);
 8002ae2:	2206      	movs	r2, #6
 8002ae4:	233f      	movs	r3, #63	; 0x3f
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	2100      	movs	r1, #0
 8002aea:	f001 fe35 	bl	8004758 <ssd1306_DrawLine>
			ssd1306_DrawLine(106, 0, 106, 63);
 8002aee:	226a      	movs	r2, #106	; 0x6a
 8002af0:	233f      	movs	r3, #63	; 0x3f
 8002af2:	2100      	movs	r1, #0
 8002af4:	4610      	mov	r0, r2
 8002af6:	f001 fe2f 	bl	8004758 <ssd1306_DrawLine>
 8002afa:	2404      	movs	r4, #4
				ssd1306_DrawLine(7, i*8 + 4, nodes[i].NextMessageTick-HAL_GetTick()*100/nodeSettings.workInterval, i*8 + 4);
 8002afc:	2764      	movs	r7, #100	; 0x64
 8002afe:	4d5c      	ldr	r5, [pc, #368]	; (8002c70 <lcdRoutine+0xa20>)
 8002b00:	4e5c      	ldr	r6, [pc, #368]	; (8002c74 <lcdRoutine+0xa24>)
 8002b02:	f895 8004 	ldrb.w	r8, [r5, #4]
 8002b06:	f002 ff2f 	bl	8005968 <HAL_GetTick>
 8002b0a:	fb07 f200 	mul.w	r2, r7, r0
 8002b0e:	6870      	ldr	r0, [r6, #4]
 8002b10:	4623      	mov	r3, r4
 8002b12:	fbb2 f2f0 	udiv	r2, r2, r0
 8002b16:	4621      	mov	r1, r4
 8002b18:	eba8 0202 	sub.w	r2, r8, r2
 8002b1c:	3408      	adds	r4, #8
 8002b1e:	2007      	movs	r0, #7
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	b2e4      	uxtb	r4, r4
 8002b24:	f001 fe18 	bl	8004758 <ssd1306_DrawLine>
			for (int i = 0; i < MAX_NODES; i++) {
 8002b28:	2c44      	cmp	r4, #68	; 0x44
 8002b2a:	f105 0520 	add.w	r5, r5, #32
 8002b2e:	d1e8      	bne.n	8002b02 <lcdRoutine+0x8b2>
 8002b30:	e41a      	b.n	8002368 <lcdRoutine+0x118>
		sprintf(string[0], "   Node Actions:");
 8002b32:	4951      	ldr	r1, [pc, #324]	; (8002c78 <lcdRoutine+0xa28>)
		sprintf(string[2], "Alarm: %s", maskNames[nodes[selectedNode].masked]);
 8002b34:	4d51      	ldr	r5, [pc, #324]	; (8002c7c <lcdRoutine+0xa2c>)
		sprintf(string[0], "   Node Actions:");
 8002b36:	4829      	ldr	r0, [pc, #164]	; (8002bdc <lcdRoutine+0x98c>)
 8002b38:	f005 fd72 	bl	8008620 <strcpy>
		sprintf(string[1], " Ping");
 8002b3c:	4950      	ldr	r1, [pc, #320]	; (8002c80 <lcdRoutine+0xa30>)
 8002b3e:	4829      	ldr	r0, [pc, #164]	; (8002be4 <lcdRoutine+0x994>)
 8002b40:	f005 fd6e 	bl	8008620 <strcpy>
		sprintf(string[2], "Alarm: %s", maskNames[nodes[selectedNode].masked]);
 8002b44:	4c4a      	ldr	r4, [pc, #296]	; (8002c70 <lcdRoutine+0xa20>)
 8002b46:	f9b5 3000 	ldrsh.w	r3, [r5]
 8002b4a:	494e      	ldr	r1, [pc, #312]	; (8002c84 <lcdRoutine+0xa34>)
 8002b4c:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8002b50:	7b1a      	ldrb	r2, [r3, #12]
 8002b52:	4b4d      	ldr	r3, [pc, #308]	; (8002c88 <lcdRoutine+0xa38>)
 8002b54:	4824      	ldr	r0, [pc, #144]	; (8002be8 <lcdRoutine+0x998>)
 8002b56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b5a:	f005 fd41 	bl	80085e0 <siprintf>
				nodes[selectedNode].disarmRequest ? " Disarmed" : " Armed");
 8002b5e:	f9b5 3000 	ldrsh.w	r3, [r5]
		sprintf(string[3],
 8002b62:	4a4a      	ldr	r2, [pc, #296]	; (8002c8c <lcdRoutine+0xa3c>)
				nodes[selectedNode].disarmRequest ? " Disarmed" : " Armed");
 8002b64:	eb04 1443 	add.w	r4, r4, r3, lsl #5
		sprintf(string[3],
 8002b68:	7ba1      	ldrb	r1, [r4, #14]
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <lcdRoutine+0xa40>)
 8002b6c:	4c1b      	ldr	r4, [pc, #108]	; (8002bdc <lcdRoutine+0x98c>)
 8002b6e:	2900      	cmp	r1, #0
 8002b70:	bf14      	ite	ne
 8002b72:	4611      	movne	r1, r2
 8002b74:	4619      	moveq	r1, r3
 8002b76:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002b7a:	f005 fd31 	bl	80085e0 <siprintf>
		sprintf(string[4], " Config Node");
 8002b7e:	4945      	ldr	r1, [pc, #276]	; (8002c94 <lcdRoutine+0xa44>)
 8002b80:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002b84:	e4b5      	b.n	80024f2 <lcdRoutine+0x2a2>
		sprintf(string[0], " Work");
 8002b86:	4c15      	ldr	r4, [pc, #84]	; (8002bdc <lcdRoutine+0x98c>)
		clearStrings();
 8002b88:	f7fe fd9c 	bl	80016c4 <clearStrings>
		sprintf(string[0], " Work");
 8002b8c:	4942      	ldr	r1, [pc, #264]	; (8002c98 <lcdRoutine+0xa48>)
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f005 fd46 	bl	8008620 <strcpy>
		sprintf(string[1], " Color test");
 8002b94:	4941      	ldr	r1, [pc, #260]	; (8002c9c <lcdRoutine+0xa4c>)
 8002b96:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002b9a:	f005 fd41 	bl	8008620 <strcpy>
		sprintf(string[2], " Transmitter test");
 8002b9e:	4940      	ldr	r1, [pc, #256]	; (8002ca0 <lcdRoutine+0xa50>)
 8002ba0:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002ba4:	f005 fd3c 	bl	8008620 <strcpy>
		sprintf(string[3], " Receiver Test");
 8002ba8:	493e      	ldr	r1, [pc, #248]	; (8002ca4 <lcdRoutine+0xa54>)
 8002baa:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002bae:	f005 fd37 	bl	8008620 <strcpy>
		sprintf(string[4], " Ping test");
 8002bb2:	493d      	ldr	r1, [pc, #244]	; (8002ca8 <lcdRoutine+0xa58>)
 8002bb4:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002bb8:	f005 fd32 	bl	8008620 <strcpy>
		sprintf(string[5], " RSSI Indicator");
 8002bbc:	493b      	ldr	r1, [pc, #236]	; (8002cac <lcdRoutine+0xa5c>)
 8002bbe:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8002bc2:	f005 fd2d 	bl	8008620 <strcpy>
		string[selectedMode][0] = 0x83;
 8002bc6:	2283      	movs	r2, #131	; 0x83
 8002bc8:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <lcdRoutine+0xa60>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	019b      	lsls	r3, r3, #6
 8002bce:	54e2      	strb	r2, [r4, r3]
		break;
 8002bd0:	f7ff bbca 	b.w	8002368 <lcdRoutine+0x118>
 8002bd4:	0800adb5 	.word	0x0800adb5
 8002bd8:	20000122 	.word	0x20000122
 8002bdc:	20000168 	.word	0x20000168
 8002be0:	20000aab 	.word	0x20000aab
 8002be4:	200001a8 	.word	0x200001a8
 8002be8:	200001e8 	.word	0x200001e8
 8002bec:	20000a78 	.word	0x20000a78
 8002bf0:	0800ac31 	.word	0x0800ac31
 8002bf4:	20000abb 	.word	0x20000abb
 8002bf8:	0800adc9 	.word	0x0800adc9
 8002bfc:	0800add5 	.word	0x0800add5
 8002c00:	0800addb 	.word	0x0800addb
 8002c04:	0800adea 	.word	0x0800adea
 8002c08:	0800adf9 	.word	0x0800adf9
 8002c0c:	20000154 	.word	0x20000154
 8002c10:	20000158 	.word	0x20000158
 8002c14:	0800aa3f 	.word	0x0800aa3f
 8002c18:	0800ae09 	.word	0x0800ae09
 8002c1c:	08082021 	.word	0x08082021
 8002c20:	0800ae14 	.word	0x0800ae14
 8002c24:	0800ae20 	.word	0x0800ae20
 8002c28:	20000b40 	.word	0x20000b40
 8002c2c:	00015180 	.word	0x00015180
 8002c30:	0800aa22 	.word	0x0800aa22
 8002c34:	20000b94 	.word	0x20000b94
 8002c38:	20000e8c 	.word	0x20000e8c
 8002c3c:	0800ae28 	.word	0x0800ae28
 8002c40:	20000b44 	.word	0x20000b44
 8002c44:	0800ae33 	.word	0x0800ae33
 8002c48:	20000228 	.word	0x20000228
 8002c4c:	0800ae3e 	.word	0x0800ae3e
 8002c50:	20000268 	.word	0x20000268
 8002c54:	0800ae53 	.word	0x0800ae53
 8002c58:	200002a8 	.word	0x200002a8
 8002c5c:	0800ae5f 	.word	0x0800ae5f
 8002c60:	200002e8 	.word	0x200002e8
 8002c64:	0800ae69 	.word	0x0800ae69
 8002c68:	20000328 	.word	0x20000328
 8002c6c:	0800aa7e 	.word	0x0800aa7e
 8002c70:	20000ce0 	.word	0x20000ce0
 8002c74:	20000c74 	.word	0x20000c74
 8002c78:	0800ae6f 	.word	0x0800ae6f
 8002c7c:	20000166 	.word	0x20000166
 8002c80:	0800ae80 	.word	0x0800ae80
 8002c84:	0800a9ff 	.word	0x0800a9ff
 8002c88:	20000030 	.word	0x20000030
 8002c8c:	0800a969 	.word	0x0800a969
 8002c90:	0800a973 	.word	0x0800a973
 8002c94:	0800ae86 	.word	0x0800ae86
 8002c98:	0800ae93 	.word	0x0800ae93
 8002c9c:	0800ae99 	.word	0x0800ae99
 8002ca0:	0800aea5 	.word	0x0800aea5
 8002ca4:	0800aeb7 	.word	0x0800aeb7
 8002ca8:	0800aec6 	.word	0x0800aec6
 8002cac:	0800aed1 	.word	0x0800aed1
 8002cb0:	20000163 	.word	0x20000163

08002cb4 <colorTest>:
 * @param  None
 * @retval None
 */
void colorTest()
{
	flag.lcdRefreshRequest = 1;
 8002cb4:	4c44      	ldr	r4, [pc, #272]	; (8002dc8 <colorTest+0x114>)
{
 8002cb6:	b580      	push	{r7, lr}
	flag.lcdRefreshRequest = 1;
 8002cb8:	7823      	ldrb	r3, [r4, #0]
 8002cba:	4d44      	ldr	r5, [pc, #272]	; (8002dcc <colorTest+0x118>)
 8002cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		static uint8_t currentCol = 0;

		if (flag.encInc)
		{
			flag.encInc = 0;
			switch (currentCol)
 8002cc0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8002de8 <colorTest+0x134>
	flag.lcdRefreshRequest = 1;
 8002cc4:	7023      	strb	r3, [r4, #0]
		if (flag.encInc)
 8002cc6:	7823      	ldrb	r3, [r4, #0]
 8002cc8:	4f41      	ldr	r7, [pc, #260]	; (8002dd0 <colorTest+0x11c>)
 8002cca:	f013 0f01 	tst.w	r3, #1
 8002cce:	4e41      	ldr	r6, [pc, #260]	; (8002dd4 <colorTest+0x120>)
 8002cd0:	d010      	beq.n	8002cf4 <colorTest+0x40>
			flag.encInc = 0;
 8002cd2:	f36f 0300 	bfc	r3, #0, #1
 8002cd6:	7023      	strb	r3, [r4, #0]
			switch (currentCol)
 8002cd8:	f898 3000 	ldrb.w	r3, [r8]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d067      	beq.n	8002db0 <colorTest+0xfc>
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d061      	beq.n	8002da8 <colorTest+0xf4>
 8002ce4:	b913      	cbnz	r3, 8002cec <colorTest+0x38>
			{
			case 0:
				red++;
 8002ce6:	782b      	ldrb	r3, [r5, #0]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	702b      	strb	r3, [r5, #0]
				break;
			case 1:
				green++;
				break;
			}
			flag.lcdRefreshRequest = 1;
 8002cec:	7823      	ldrb	r3, [r4, #0]
 8002cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf2:	7023      	strb	r3, [r4, #0]
		}

		if (flag.encDec)
 8002cf4:	7823      	ldrb	r3, [r4, #0]
 8002cf6:	0798      	lsls	r0, r3, #30
 8002cf8:	d510      	bpl.n	8002d1c <colorTest+0x68>
		{
			flag.encDec = 0;
 8002cfa:	f36f 0341 	bfc	r3, #1, #1
 8002cfe:	7023      	strb	r3, [r4, #0]
			switch (currentCol)
 8002d00:	f898 3000 	ldrb.w	r3, [r8]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d05b      	beq.n	8002dc0 <colorTest+0x10c>
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d055      	beq.n	8002db8 <colorTest+0x104>
 8002d0c:	b913      	cbnz	r3, 8002d14 <colorTest+0x60>
			{
			case 0:
				red--;
 8002d0e:	782b      	ldrb	r3, [r5, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	702b      	strb	r3, [r5, #0]
				break;
			case 1:
				green--;
				break;
			}
			flag.lcdRefreshRequest = 1;
 8002d14:	7823      	ldrb	r3, [r4, #0]
 8002d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1a:	7023      	strb	r3, [r4, #0]
		}

		if (flag.encOk)
 8002d1c:	7822      	ldrb	r2, [r4, #0]
 8002d1e:	0751      	lsls	r1, r2, #29
 8002d20:	d50d      	bpl.n	8002d3e <colorTest+0x8a>
		{
			flag.encOk = 0;
			currentCol = (++currentCol > 2) ? 0 : currentCol;
 8002d22:	f898 3000 	ldrb.w	r3, [r8]
			flag.lcdRefreshRequest = 1;
 8002d26:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
			currentCol = (++currentCol > 2) ? 0 : currentCol;
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	bf28      	it	cs
 8002d32:	2300      	movcs	r3, #0
			flag.lcdRefreshRequest = 1;
 8002d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			currentCol = (++currentCol > 2) ? 0 : currentCol;
 8002d38:	f888 3000 	strb.w	r3, [r8]
			flag.lcdRefreshRequest = 1;
 8002d3c:	7022      	strb	r2, [r4, #0]
		}

		if (flag.lcdRefreshRequest == 1)
 8002d3e:	7823      	ldrb	r3, [r4, #0]
 8002d40:	065a      	lsls	r2, r3, #25
 8002d42:	d528      	bpl.n	8002d96 <colorTest+0xe2>
		{
			flag.lcdRefreshRequest = 0;
			clearStrings();
			sprintf(string[0], "Color test");
 8002d44:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002dec <colorTest+0x138>
			flag.lcdRefreshRequest = 0;
 8002d48:	f36f 1386 	bfc	r3, #6, #1
 8002d4c:	7023      	strb	r3, [r4, #0]
			clearStrings();
 8002d4e:	f7fe fcb9 	bl	80016c4 <clearStrings>
			sprintf(string[0], "Color test");
 8002d52:	4648      	mov	r0, r9
 8002d54:	4920      	ldr	r1, [pc, #128]	; (8002dd8 <colorTest+0x124>)
 8002d56:	f005 fc63 	bl	8008620 <strcpy>
			sprintf(string[1], " Red:  %3d %02X", red, red);
 8002d5a:	782b      	ldrb	r3, [r5, #0]
 8002d5c:	491f      	ldr	r1, [pc, #124]	; (8002ddc <colorTest+0x128>)
 8002d5e:	461a      	mov	r2, r3
 8002d60:	f109 0040 	add.w	r0, r9, #64	; 0x40
 8002d64:	f005 fc3c 	bl	80085e0 <siprintf>
			sprintf(string[2], " Green:%3d %02X", green, green);
 8002d68:	7833      	ldrb	r3, [r6, #0]
 8002d6a:	491d      	ldr	r1, [pc, #116]	; (8002de0 <colorTest+0x12c>)
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f109 0080 	add.w	r0, r9, #128	; 0x80
 8002d72:	f005 fc35 	bl	80085e0 <siprintf>
			sprintf(string[3], " Blue: %3d %02X", blue, blue);
 8002d76:	783b      	ldrb	r3, [r7, #0]
 8002d78:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4919      	ldr	r1, [pc, #100]	; (8002de4 <colorTest+0x130>)
 8002d80:	f005 fc2e 	bl	80085e0 <siprintf>
			string[currentCol + 1][0] = 0x83;
 8002d84:	f898 3000 	ldrb.w	r3, [r8]
 8002d88:	eb09 1983 	add.w	r9, r9, r3, lsl #6
 8002d8c:	2383      	movs	r3, #131	; 0x83
 8002d8e:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40

			updateLcd();
 8002d92:	f7fe fca9 	bl	80016e8 <updateLcd>
		}
		wsSetColor(0, red, green, blue);
 8002d96:	2000      	movs	r0, #0
 8002d98:	783b      	ldrb	r3, [r7, #0]
 8002d9a:	7832      	ldrb	r2, [r6, #0]
 8002d9c:	7829      	ldrb	r1, [r5, #0]
 8002d9e:	f002 fd0f 	bl	80057c0 <wsSetColor>
		wsPrepareArray();
 8002da2:	f002 fd4d 	bl	8005840 <wsPrepareArray>
	{
 8002da6:	e78e      	b.n	8002cc6 <colorTest+0x12>
				blue++;
 8002da8:	783b      	ldrb	r3, [r7, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	703b      	strb	r3, [r7, #0]
				break;
 8002dae:	e79d      	b.n	8002cec <colorTest+0x38>
				green++;
 8002db0:	7833      	ldrb	r3, [r6, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	7033      	strb	r3, [r6, #0]
				break;
 8002db6:	e799      	b.n	8002cec <colorTest+0x38>
				blue--;
 8002db8:	783b      	ldrb	r3, [r7, #0]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	703b      	strb	r3, [r7, #0]
				break;
 8002dbe:	e7a9      	b.n	8002d14 <colorTest+0x60>
				green--;
 8002dc0:	7833      	ldrb	r3, [r6, #0]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	7033      	strb	r3, [r6, #0]
				break;
 8002dc6:	e7a5      	b.n	8002d14 <colorTest+0x60>
 8002dc8:	20000b4c 	.word	0x20000b4c
 8002dcc:	20000160 	.word	0x20000160
 8002dd0:	20000120 	.word	0x20000120
 8002dd4:	20000123 	.word	0x20000123
 8002dd8:	0800ae9a 	.word	0x0800ae9a
 8002ddc:	0800aee1 	.word	0x0800aee1
 8002de0:	0800aef1 	.word	0x0800aef1
 8002de4:	0800af01 	.word	0x0800af01
 8002de8:	20000121 	.word	0x20000121
 8002dec:	20000168 	.word	0x20000168

08002df0 <radioTestTransmit>:
 * Transmittion power can be cyclic increased or static 20dbm
 * @param  None
 * @retval None
 */
void radioTestTransmit()
{
 8002df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			else
				wsSetColor(i, BLACK);
		}
		wsPrepareArray();

		if (myRadio.status != TX)
 8002df4:	4f45      	ldr	r7, [pc, #276]	; (8002f0c <radioTestTransmit+0x11c>)
	SX127X_defaultConfig(&myRadio);
 8002df6:	4845      	ldr	r0, [pc, #276]	; (8002f0c <radioTestTransmit+0x11c>)
 8002df8:	463e      	mov	r6, r7
	flag.lcdRefreshRequest = 1;
 8002dfa:	4c45      	ldr	r4, [pc, #276]	; (8002f10 <radioTestTransmit+0x120>)
	SX127X_defaultConfig(&myRadio);
 8002dfc:	f001 ff42 	bl	8004c84 <SX127X_defaultConfig>
	tryLoadSettings();
 8002e00:	f7fe fcbc 	bl	800177c <tryLoadSettings>
	SX127X_config(&myRadio);
 8002e04:	4841      	ldr	r0, [pc, #260]	; (8002f0c <radioTestTransmit+0x11c>)
 8002e06:	f001 ff89 	bl	8004d1c <SX127X_config>
	flag.lcdRefreshRequest = 1;
 8002e0a:	7823      	ldrb	r3, [r4, #0]
			if (power - 12 == i)
 8002e0c:	4d41      	ldr	r5, [pc, #260]	; (8002f14 <radioTestTransmit+0x124>)
	flag.lcdRefreshRequest = 1;
 8002e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e12:	7023      	strb	r3, [r4, #0]
{
 8002e14:	f04f 0800 	mov.w	r8, #0
			if (power - 12 == i)
 8002e18:	782b      	ldrb	r3, [r5, #0]
 8002e1a:	fa5f f088 	uxtb.w	r0, r8
 8002e1e:	3b0c      	subs	r3, #12
 8002e20:	4543      	cmp	r3, r8
				wsSetColor(i, GREEN);
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2210      	moveq	r2, #16
				wsSetColor(i, BLACK);
 8002e2a:	461a      	movne	r2, r3
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f108 0801 	add.w	r8, r8, #1
 8002e32:	f002 fcc5 	bl	80057c0 <wsSetColor>
		for (i = 0; i < 9; i++)
 8002e36:	f1b8 0f09 	cmp.w	r8, #9
 8002e3a:	d1ed      	bne.n	8002e18 <radioTestTransmit+0x28>
		wsPrepareArray();
 8002e3c:	f002 fd00 	bl	8005840 <wsPrepareArray>
		if (myRadio.status != TX)
 8002e40:	7c3b      	ldrb	r3, [r7, #16]
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d01b      	beq.n	8002e7e <radioTestTransmit+0x8e>
		{
			if (radioTxTestMode == 0)
 8002e46:	4b34      	ldr	r3, [pc, #208]	; (8002f18 <radioTestTransmit+0x128>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d154      	bne.n	8002ef8 <radioTestTransmit+0x108>
				power = (power + 1 > 20) ? 10 : power + 1;
 8002e4e:	782b      	ldrb	r3, [r5, #0]
 8002e50:	2b13      	cmp	r3, #19
 8002e52:	bf8e      	itee	hi
 8002e54:	230a      	movhi	r3, #10
 8002e56:	3301      	addls	r3, #1
 8002e58:	b2db      	uxtbls	r3, r3
			else
				power = radioTxTestMode + 9;
 8002e5a:	702b      	strb	r3, [r5, #0]
			myRadio.power = power;
 8002e5c:	782b      	ldrb	r3, [r5, #0]
			SX127X_config(&myRadio);
 8002e5e:	4630      	mov	r0, r6
			myRadio.power = power;
 8002e60:	7133      	strb	r3, [r6, #4]
			SX127X_config(&myRadio);
 8002e62:	f001 ff5b 	bl	8004d1c <SX127X_config>
			myRadio.txBuf[0] = 'a' + power - 10;
 8002e66:	782b      	ldrb	r3, [r5, #0]
			SX127X_transmitAsync(&myRadio, 3);
 8002e68:	2103      	movs	r1, #3
			myRadio.txBuf[0] = 'a' + power - 10;
 8002e6a:	3357      	adds	r3, #87	; 0x57
			SX127X_transmitAsync(&myRadio, 3);
 8002e6c:	4630      	mov	r0, r6
			myRadio.txBuf[0] = 'a' + power - 10;
 8002e6e:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
			SX127X_transmitAsync(&myRadio, 3);
 8002e72:	f002 f891 	bl	8004f98 <SX127X_transmitAsync>
			flag.lcdRefreshRequest = 1;
 8002e76:	7823      	ldrb	r3, [r4, #0]
 8002e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7c:	7023      	strb	r3, [r4, #0]
		}

		if (flag.encInc || flag.encDec)
 8002e7e:	7822      	ldrb	r2, [r4, #0]
 8002e80:	0793      	lsls	r3, r2, #30
 8002e82:	d017      	beq.n	8002eb4 <radioTestTransmit+0xc4>
		{
			if (flag.encInc)
 8002e84:	07d0      	lsls	r0, r2, #31
 8002e86:	d507      	bpl.n	8002e98 <radioTestTransmit+0xa8>
				radioTxTestMode =
						(radioTxTestMode == 11) ? 0 : radioTxTestMode + 1;
 8002e88:	4923      	ldr	r1, [pc, #140]	; (8002f18 <radioTestTransmit+0x128>)
 8002e8a:	780b      	ldrb	r3, [r1, #0]
				radioTxTestMode =
 8002e8c:	2b0b      	cmp	r3, #11
 8002e8e:	bf0e      	itee	eq
 8002e90:	2300      	moveq	r3, #0
 8002e92:	3301      	addne	r3, #1
 8002e94:	b2db      	uxtbne	r3, r3
 8002e96:	700b      	strb	r3, [r1, #0]
			if (flag.encDec)
 8002e98:	0791      	lsls	r1, r2, #30
 8002e9a:	d505      	bpl.n	8002ea8 <radioTestTransmit+0xb8>
				radioTxTestMode =
						(radioTxTestMode == 0) ? 11 : radioTxTestMode - 1;
 8002e9c:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <radioTestTransmit+0x128>)
 8002e9e:	7813      	ldrb	r3, [r2, #0]
				radioTxTestMode =
 8002ea0:	b363      	cbz	r3, 8002efc <radioTestTransmit+0x10c>
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	7013      	strb	r3, [r2, #0]
			flag.encInc = 0;
 8002ea8:	7823      	ldrb	r3, [r4, #0]
 8002eaa:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8002eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eb2:	7023      	strb	r3, [r4, #0]
			flag.encDec = 0;
			flag.lcdRefreshRequest = 1;
		}

		SX127X_Routine(&myRadio);
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f002 f8bd 	bl	8005034 <SX127X_Routine>
		if (flag.lcdRefreshRequest)
 8002eba:	7823      	ldrb	r3, [r4, #0]
 8002ebc:	065a      	lsls	r2, r3, #25
 8002ebe:	d5a9      	bpl.n	8002e14 <radioTestTransmit+0x24>
		{
			flag.lcdRefreshRequest = 0;
 8002ec0:	f36f 1386 	bfc	r3, #6, #1
 8002ec4:	7023      	strb	r3, [r4, #0]

			clearStrings();
 8002ec6:	f7fe fbfd 	bl	80016c4 <clearStrings>
			sprintf(string[0], "Transmitter");
 8002eca:	4914      	ldr	r1, [pc, #80]	; (8002f1c <radioTestTransmit+0x12c>)
 8002ecc:	4814      	ldr	r0, [pc, #80]	; (8002f20 <radioTestTransmit+0x130>)
 8002ece:	f005 fba7 	bl	8008620 <strcpy>
			sprintf(string[1], "Mode:");
 8002ed2:	4914      	ldr	r1, [pc, #80]	; (8002f24 <radioTestTransmit+0x134>)
 8002ed4:	4814      	ldr	r0, [pc, #80]	; (8002f28 <radioTestTransmit+0x138>)
 8002ed6:	f005 fba3 	bl	8008620 <strcpy>
			if (!radioTxTestMode)
 8002eda:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <radioTestTransmit+0x128>)
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	b97a      	cbnz	r2, 8002f00 <radioTestTransmit+0x110>
				sprintf(string[3], "Cyclic");
 8002ee0:	4912      	ldr	r1, [pc, #72]	; (8002f2c <radioTestTransmit+0x13c>)
 8002ee2:	4813      	ldr	r0, [pc, #76]	; (8002f30 <radioTestTransmit+0x140>)
 8002ee4:	f005 fb9c 	bl	8008620 <strcpy>
			else
				sprintf(string[3], "Constant %u mw", radioTxTestMode + 9);
			sprintf(string[2], "Pow:%d dBm", power);
 8002ee8:	782a      	ldrb	r2, [r5, #0]
 8002eea:	4912      	ldr	r1, [pc, #72]	; (8002f34 <radioTestTransmit+0x144>)
 8002eec:	4812      	ldr	r0, [pc, #72]	; (8002f38 <radioTestTransmit+0x148>)
 8002eee:	f005 fb77 	bl	80085e0 <siprintf>
			updateLcd();
 8002ef2:	f7fe fbf9 	bl	80016e8 <updateLcd>
 8002ef6:	e78d      	b.n	8002e14 <radioTestTransmit+0x24>
				power = radioTxTestMode + 9;
 8002ef8:	3309      	adds	r3, #9
 8002efa:	e7ae      	b.n	8002e5a <radioTestTransmit+0x6a>
				radioTxTestMode =
 8002efc:	230b      	movs	r3, #11
 8002efe:	e7d2      	b.n	8002ea6 <radioTestTransmit+0xb6>
				sprintf(string[3], "Constant %u mw", radioTxTestMode + 9);
 8002f00:	490e      	ldr	r1, [pc, #56]	; (8002f3c <radioTestTransmit+0x14c>)
 8002f02:	3209      	adds	r2, #9
 8002f04:	480a      	ldr	r0, [pc, #40]	; (8002f30 <radioTestTransmit+0x140>)
 8002f06:	f005 fb6b 	bl	80085e0 <siprintf>
 8002f0a:	e7ed      	b.n	8002ee8 <radioTestTransmit+0xf8>
 8002f0c:	20000998 	.word	0x20000998
 8002f10:	20000b4c 	.word	0x20000b4c
 8002f14:	20000040 	.word	0x20000040
 8002f18:	20000151 	.word	0x20000151
 8002f1c:	0800af11 	.word	0x0800af11
 8002f20:	20000168 	.word	0x20000168
 8002f24:	0800af1d 	.word	0x0800af1d
 8002f28:	200001a8 	.word	0x200001a8
 8002f2c:	0800af23 	.word	0x0800af23
 8002f30:	20000228 	.word	0x20000228
 8002f34:	0800af39 	.word	0x0800af39
 8002f38:	200001e8 	.word	0x200001e8
 8002f3c:	0800af2a 	.word	0x0800af2a

08002f40 <radioTestReceive>:
 * Transmission powerd displayed by LCD and led
 * @param  None
 * @retval None
 */
void radioTestReceive()
{
 8002f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SX127X_defaultConfig(&myRadio);
 8002f44:	4d62      	ldr	r5, [pc, #392]	; (80030d0 <radioTestReceive+0x190>)
{
 8002f46:	b08b      	sub	sp, #44	; 0x2c
	SX127X_defaultConfig(&myRadio);
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f001 fe9b 	bl	8004c84 <SX127X_defaultConfig>
	tryLoadSettings();
 8002f4e:	f7fe fc15 	bl	800177c <tryLoadSettings>
	SX127X_config(&myRadio);
 8002f52:	4628      	mov	r0, r5
 8002f54:	f001 fee2 	bl	8004d1c <SX127X_config>
	myRadio.alwaysRX = 1;
 8002f58:	2301      	movs	r3, #1
		uint8_t i;
		uint32_t lastMessageReceived = 0;
		char message[20] =
		{ 0, };

		SX127X_Routine(&myRadio);
 8002f5a:	462f      	mov	r7, r5
	flag.lcdRefreshRequest = 1;
 8002f5c:	4e5d      	ldr	r6, [pc, #372]	; (80030d4 <radioTestReceive+0x194>)
	myRadio.alwaysRX = 1;
 8002f5e:	73eb      	strb	r3, [r5, #15]
	flag.lcdRefreshRequest = 1;
 8002f60:	7833      	ldrb	r3, [r6, #0]
		else
			wsSetColor(1, 0, 0, 0);

		for (i = 2; i < 9; i++)
		{
			wsSetColor(i, 0, ledPower[i] / 256, 0);
 8002f62:	f8df 8178 	ldr.w	r8, [pc, #376]	; 80030dc <radioTestReceive+0x19c>
	flag.lcdRefreshRequest = 1;
 8002f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
		if (flag.lcdRefreshRequest)
		{
			flag.lcdRefreshRequest = 0;

			clearStrings();
			sprintf(string[0], "Receiver RSSI:%d dB",
 8002f6a:	f8df 9188 	ldr.w	r9, [pc, #392]	; 80030f4 <radioTestReceive+0x1b4>
	flag.lcdRefreshRequest = 1;
 8002f6e:	7033      	strb	r3, [r6, #0]
		char message[20] =
 8002f70:	2400      	movs	r4, #0
 8002f72:	2210      	movs	r2, #16
 8002f74:	4621      	mov	r1, r4
 8002f76:	a806      	add	r0, sp, #24
 8002f78:	9405      	str	r4, [sp, #20]
 8002f7a:	f005 fa9b 	bl	80084b4 <memset>
		SX127X_Routine(&myRadio);
 8002f7e:	4638      	mov	r0, r7
 8002f80:	f002 f858 	bl	8005034 <SX127X_Routine>
		if (flag.uartGotMessage)
 8002f84:	7873      	ldrb	r3, [r6, #1]
 8002f86:	07d9      	lsls	r1, r3, #31
 8002f88:	d504      	bpl.n	8002f94 <radioTestReceive+0x54>
			flag.uartGotMessage = 0;
 8002f8a:	f364 0300 	bfi	r3, r4, #0, #1
 8002f8e:	7073      	strb	r3, [r6, #1]
			uartReceiveHandler();
 8002f90:	f002 f948 	bl	8005224 <uartReceiveHandler>
		if (myRadio.readBytes)
 8002f94:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	f000 8090 	beq.w	80030be <radioTestReceive+0x17e>
			if (myRadio.badCrc)
 8002f9e:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
 8002fa2:	b11c      	cbz	r4, 8002fac <radioTestReceive+0x6c>
				myRadio.readBytes = 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
				continue;
 8002faa:	e7e1      	b.n	8002f70 <radioTestReceive+0x30>
			memcpy(message, myRadio.rxBuf, myRadio.readBytes);
 8002fac:	494a      	ldr	r1, [pc, #296]	; (80030d8 <radioTestReceive+0x198>)
 8002fae:	a805      	add	r0, sp, #20
 8002fb0:	f005 fa72 	bl	8008498 <memcpy>
			ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8002fb4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002fb8:	7f6b      	ldrb	r3, [r5, #29]
			myRadio.readBytes = 0;
 8002fba:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8002fbe:	3b61      	subs	r3, #97	; 0x61
 8002fc0:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
			lastMessageReceived = HAL_GetTick();
 8002fc4:	f002 fcd0 	bl	8005968 <HAL_GetTick>
 8002fc8:	4604      	mov	r4, r0
			flag.lcdRefreshRequest = 1;
 8002fca:	7833      	ldrb	r3, [r6, #0]
 8002fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fd0:	7033      	strb	r3, [r6, #0]
		if (myRadio.signalDetected)
 8002fd2:	7f2b      	ldrb	r3, [r5, #28]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d074      	beq.n	80030c2 <radioTestReceive+0x182>
			wsSetColor(0, 0, 0, 20);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2314      	movs	r3, #20
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4610      	mov	r0, r2
			wsSetColor(0, 0, 0, 0);
 8002fe0:	f002 fbee 	bl	80057c0 <wsSetColor>
		if (HAL_GetTick() - lastMessageReceived < 1000)
 8002fe4:	f002 fcc0 	bl	8005968 <HAL_GetTick>
 8002fe8:	1b00      	subs	r0, r0, r4
 8002fea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
			wsSetColor(1, 0, 20, 0);
 8002fee:	f04f 0300 	mov.w	r3, #0
		if (HAL_GetTick() - lastMessageReceived < 1000)
 8002ff2:	d26a      	bcs.n	80030ca <radioTestReceive+0x18a>
			wsSetColor(1, 0, 20, 0);
 8002ff4:	2214      	movs	r2, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f002 fbe1 	bl	80057c0 <wsSetColor>
		uint32_t lastMessageReceived = 0;
 8002ffe:	2402      	movs	r4, #2
			wsSetColor(i, 0, ledPower[i] / 256, 0);
 8003000:	2300      	movs	r3, #0
 8003002:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 8003006:	b2e0      	uxtb	r0, r4
 8003008:	4619      	mov	r1, r3
 800300a:	0a12      	lsrs	r2, r2, #8
 800300c:	3401      	adds	r4, #1
 800300e:	f002 fbd7 	bl	80057c0 <wsSetColor>
		for (i = 2; i < 9; i++)
 8003012:	2c09      	cmp	r4, #9
 8003014:	d1f4      	bne.n	8003000 <radioTestReceive+0xc0>
		wsPrepareArray();
 8003016:	f002 fc13 	bl	8005840 <wsPrepareArray>
		for (i = 0; i < 9; i++)
 800301a:	4a30      	ldr	r2, [pc, #192]	; (80030dc <radioTestReceive+0x19c>)
			ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 800301c:	f832 3b02 	ldrh.w	r3, [r2], #2
 8003020:	b10b      	cbz	r3, 8003026 <radioTestReceive+0xe6>
 8003022:	3b01      	subs	r3, #1
 8003024:	b29b      	uxth	r3, r3
 8003026:	3c01      	subs	r4, #1
		for (i = 0; i < 9; i++)
 8003028:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
			ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 800302c:	f822 3c02 	strh.w	r3, [r2, #-2]
		for (i = 0; i < 9; i++)
 8003030:	d1f4      	bne.n	800301c <radioTestReceive+0xdc>
		if (flag.lcdRefreshRequest)
 8003032:	7833      	ldrb	r3, [r6, #0]
 8003034:	065a      	lsls	r2, r3, #25
 8003036:	d59b      	bpl.n	8002f70 <radioTestReceive+0x30>
			flag.lcdRefreshRequest = 0;
 8003038:	f364 1386 	bfi	r3, r4, #6, #1
 800303c:	7033      	strb	r3, [r6, #0]
			clearStrings();
 800303e:	f7fe fb41 	bl	80016c4 <clearStrings>
					SX127X_RSSI_Pack(&myRadio));
 8003042:	4638      	mov	r0, r7
 8003044:	f001 ffc6 	bl	8004fd4 <SX127X_RSSI_Pack>
			sprintf(string[0], "Receiver RSSI:%d dB",
 8003048:	4649      	mov	r1, r9
					SX127X_RSSI_Pack(&myRadio));
 800304a:	4602      	mov	r2, r0
			sprintf(string[0], "Receiver RSSI:%d dB",
 800304c:	4824      	ldr	r0, [pc, #144]	; (80030e0 <radioTestReceive+0x1a0>)
 800304e:	f005 fac7 	bl	80085e0 <siprintf>
			memcpy(string[1], message, 14);
 8003052:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <radioTestReceive+0x1a4>)
 8003054:	aa05      	add	r2, sp, #20
 8003056:	f10d 0c1c 	add.w	ip, sp, #28
 800305a:	4614      	mov	r4, r2
 800305c:	cc03      	ldmia	r4!, {r0, r1}
 800305e:	4564      	cmp	r4, ip
 8003060:	6018      	str	r0, [r3, #0]
 8003062:	6059      	str	r1, [r3, #4]
 8003064:	4622      	mov	r2, r4
 8003066:	f103 0308 	add.w	r3, r3, #8
 800306a:	d1f6      	bne.n	800305a <radioTestReceive+0x11a>
 800306c:	6820      	ldr	r0, [r4, #0]
			sprintf(string[2], "%02x %02x %02x %02x %02x", message[0],
 800306e:	491e      	ldr	r1, [pc, #120]	; (80030e8 <radioTestReceive+0x1a8>)
			memcpy(string[1], message, 14);
 8003070:	6018      	str	r0, [r3, #0]
 8003072:	88a2      	ldrh	r2, [r4, #4]
			sprintf(string[2], "%02x %02x %02x %02x %02x", message[0],
 8003074:	481d      	ldr	r0, [pc, #116]	; (80030ec <radioTestReceive+0x1ac>)
			memcpy(string[1], message, 14);
 8003076:	809a      	strh	r2, [r3, #4]
			sprintf(string[2], "%02x %02x %02x %02x %02x", message[0],
 8003078:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800307c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003080:	9302      	str	r3, [sp, #8]
 8003082:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003092:	f005 faa5 	bl	80085e0 <siprintf>
					message[1], message[2], message[3], message[4]);
			sprintf(string[3], "%02x %02x %02x %02x %02x", message[5],
 8003096:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800309a:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800309e:	9302      	str	r3, [sp, #8]
 80030a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80030a4:	4910      	ldr	r1, [pc, #64]	; (80030e8 <radioTestReceive+0x1a8>)
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80030ac:	4810      	ldr	r0, [pc, #64]	; (80030f0 <radioTestReceive+0x1b0>)
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80030b4:	f005 fa94 	bl	80085e0 <siprintf>
					message[6], message[7], message[8], message[9]);
			updateLcd();
 80030b8:	f7fe fb16 	bl	80016e8 <updateLcd>
 80030bc:	e758      	b.n	8002f70 <radioTestReceive+0x30>
		uint32_t lastMessageReceived = 0;
 80030be:	4614      	mov	r4, r2
 80030c0:	e787      	b.n	8002fd2 <radioTestReceive+0x92>
			wsSetColor(0, 0, 0, 0);
 80030c2:	461a      	mov	r2, r3
 80030c4:	4619      	mov	r1, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	e78a      	b.n	8002fe0 <radioTestReceive+0xa0>
			wsSetColor(1, 0, 0, 0);
 80030ca:	461a      	mov	r2, r3
 80030cc:	e793      	b.n	8002ff6 <radioTestReceive+0xb6>
 80030ce:	bf00      	nop
 80030d0:	20000998 	.word	0x20000998
 80030d4:	20000b4c 	.word	0x20000b4c
 80030d8:	200009b5 	.word	0x200009b5
 80030dc:	2000013c 	.word	0x2000013c
 80030e0:	20000168 	.word	0x20000168
 80030e4:	200001a8 	.word	0x200001a8
 80030e8:	0800af58 	.word	0x0800af58
 80030ec:	200001e8 	.word	0x200001e8
 80030f0:	20000228 	.word	0x20000228
 80030f4:	0800af44 	.word	0x0800af44

080030f8 <radioTestPing>:
 * Pings Base in manual or automatic mode
 * @param  None
 * @retval None
 */
void radioTestPing()
{
 80030f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSend = 0;
	uint32_t lastReceived = 0;
	uint32_t lastLcdUpdate = 0;
	uint8_t i;
	uint32_t sendCount = 0;
	uint32_t receivedCount = 0;
 80030fc:	2600      	movs	r6, #0
	SX127X_defaultConfig(&myRadio);
 80030fe:	4c83      	ldr	r4, [pc, #524]	; (800330c <radioTestPing+0x214>)
	uint32_t sendCount = 0;
 8003100:	46b0      	mov	r8, r6
	SX127X_defaultConfig(&myRadio);
 8003102:	4620      	mov	r0, r4
 8003104:	f001 fdbe 	bl	8004c84 <SX127X_defaultConfig>
	tryLoadSettings();
 8003108:	f7fe fb38 	bl	800177c <tryLoadSettings>
	SX127X_config(&myRadio);
 800310c:	4620      	mov	r0, r4
 800310e:	f001 fe05 	bl	8004d1c <SX127X_config>
	myRadio.alwaysRX = 1;
 8003112:	2301      	movs	r3, #1

	txMes->adr = 0;
	txMes->disarm = 0;
	txMes->uplink = 0;
 8003114:	2202      	movs	r2, #2
	uint32_t lastReceived = 0;
 8003116:	46b1      	mov	r9, r6
	uint32_t lastSend = 0;
 8003118:	46b2      	mov	sl, r6
	uint8_t autoPing = 0;
 800311a:	4637      	mov	r7, r6
	myRadio.alwaysRX = 1;
 800311c:	73e3      	strb	r3, [r4, #15]
	txMes->adr = 0;
 800311e:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <radioTestPing+0x218>)
	uint32_t lastLcdUpdate = 0;
 8003120:	9601      	str	r6, [sp, #4]
	txMes->adr = 0;
 8003122:	681b      	ldr	r3, [r3, #0]
	txMes->uplink = 0;
 8003124:	701a      	strb	r2, [r3, #0]
	txMes->disarm = 0;
 8003126:	785a      	ldrb	r2, [r3, #1]
 8003128:	f36f 0200 	bfc	r2, #0, #1
 800312c:	705a      	strb	r2, [r3, #1]

	while (1)
	{
		HAL_UART_Receive_IT(&huart1, &uartIn, 1);

		if (flag.encInc || flag.encDec)
 800312e:	4d79      	ldr	r5, [pc, #484]	; (8003314 <radioTestPing+0x21c>)
		HAL_UART_Receive_IT(&huart1, &uartIn, 1);
 8003130:	2201      	movs	r2, #1
 8003132:	4979      	ldr	r1, [pc, #484]	; (8003318 <radioTestPing+0x220>)
 8003134:	4879      	ldr	r0, [pc, #484]	; (800331c <radioTestPing+0x224>)
 8003136:	f005 f96c 	bl	8008412 <HAL_UART_Receive_IT>
		if (flag.encInc || flag.encDec)
 800313a:	782b      	ldrb	r3, [r5, #0]
 800313c:	0798      	lsls	r0, r3, #30
 800313e:	d006      	beq.n	800314e <radioTestPing+0x56>
		{
			flag.encInc = 0;
			flag.encDec = 0;
			autoPing = ~autoPing;
 8003140:	43ff      	mvns	r7, r7
			flag.encInc = 0;
 8003142:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8003146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			autoPing = ~autoPing;
 800314a:	b2ff      	uxtb	r7, r7
			flag.encInc = 0;
 800314c:	702b      	strb	r3, [r5, #0]
			flag.lcdRefreshRequest = 1;
		}

		if (myRadio.readBytes > 0)
 800314e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003152:	b173      	cbz	r3, 8003172 <radioTestPing+0x7a>
		{
			if (myRadio.badCrc != 0)
 8003154:	f894 b060 	ldrb.w	fp, [r4, #96]	; 0x60
 8003158:	f1bb 0f00 	cmp.w	fp, #0
 800315c:	d003      	beq.n	8003166 <radioTestPing+0x6e>
			{
				myRadio.readBytes = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
				continue;
 8003164:	e7e3      	b.n	800312e <radioTestPing+0x36>
			}
			receivedCount++;
			lastReceived = HAL_GetTick();
 8003166:	f002 fbff 	bl	8005968 <HAL_GetTick>
 800316a:	4681      	mov	r9, r0
			receivedCount++;
 800316c:	3601      	adds	r6, #1
			myRadio.readBytes = 0;
 800316e:	f884 b05d 	strb.w	fp, [r4, #93]	; 0x5d
		}

		if (HAL_GetTick() - lastSend > 2000 && (autoPing || flag.encOk))
 8003172:	f002 fbf9 	bl	8005968 <HAL_GetTick>
 8003176:	eba0 000a 	sub.w	r0, r0, sl
 800317a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800317e:	d910      	bls.n	80031a2 <radioTestPing+0xaa>
 8003180:	782b      	ldrb	r3, [r5, #0]
 8003182:	f003 0204 	and.w	r2, r3, #4
 8003186:	433a      	orrs	r2, r7
 8003188:	d00b      	beq.n	80031a2 <radioTestPing+0xaa>
		{
			sendCount++;
			flag.encOk = 0;
 800318a:	f36f 0382 	bfc	r3, #2, #1
			SX127X_transmitAsync(&myRadio, 3);
 800318e:	2103      	movs	r1, #3
 8003190:	485e      	ldr	r0, [pc, #376]	; (800330c <radioTestPing+0x214>)
			flag.encOk = 0;
 8003192:	702b      	strb	r3, [r5, #0]
			SX127X_transmitAsync(&myRadio, 3);
 8003194:	f001 ff00 	bl	8004f98 <SX127X_transmitAsync>
			lastSend = HAL_GetTick();
 8003198:	f002 fbe6 	bl	8005968 <HAL_GetTick>
 800319c:	4682      	mov	sl, r0
			sendCount++;
 800319e:	f108 0801 	add.w	r8, r8, #1
		}

		SX127X_Routine(&myRadio);
 80031a2:	485a      	ldr	r0, [pc, #360]	; (800330c <radioTestPing+0x214>)
 80031a4:	f001 ff46 	bl	8005034 <SX127X_Routine>
 80031a8:	f04f 0b00 	mov.w	fp, #0

//Handle LED
		for (i = 0; i < 9; i++)
			wsSetColor(i, BLACK);
 80031ac:	2300      	movs	r3, #0
 80031ae:	fa5f f08b 	uxtb.w	r0, fp
 80031b2:	461a      	mov	r2, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	f10b 0b01 	add.w	fp, fp, #1
 80031ba:	f002 fb01 	bl	80057c0 <wsSetColor>
		for (i = 0; i < 9; i++)
 80031be:	f1bb 0f09 	cmp.w	fp, #9
 80031c2:	d1f3      	bne.n	80031ac <radioTestPing+0xb4>
		if (myRadio.status == TX)
 80031c4:	f894 b010 	ldrb.w	fp, [r4, #16]
 80031c8:	f1bb 0f03 	cmp.w	fp, #3
 80031cc:	d117      	bne.n	80031fe <radioTestPing+0x106>
		{
			wsSetColor(1, MAGENTA);
 80031ce:	2310      	movs	r3, #16
 80031d0:	2200      	movs	r2, #0
 80031d2:	4619      	mov	r1, r3
 80031d4:	2001      	movs	r0, #1
 80031d6:	f002 faf3 	bl	80057c0 <wsSetColor>
			wsSetColor(2, MAGENTA);
 80031da:	2310      	movs	r3, #16
 80031dc:	2200      	movs	r2, #0
 80031de:	4619      	mov	r1, r3
 80031e0:	2002      	movs	r0, #2
 80031e2:	f002 faed 	bl	80057c0 <wsSetColor>
			wsSetColor(3, MAGENTA);
 80031e6:	2310      	movs	r3, #16
 80031e8:	2200      	movs	r2, #0
 80031ea:	4619      	mov	r1, r3
 80031ec:	4658      	mov	r0, fp
 80031ee:	f002 fae7 	bl	80057c0 <wsSetColor>
			wsSetColor(4, MAGENTA);
 80031f2:	2310      	movs	r3, #16
 80031f4:	2200      	movs	r2, #0
 80031f6:	4619      	mov	r1, r3
 80031f8:	2004      	movs	r0, #4
 80031fa:	f002 fae1 	bl	80057c0 <wsSetColor>
		}
		if (HAL_GetTick() - lastReceived < 600 && lastReceived)
 80031fe:	f002 fbb3 	bl	8005968 <HAL_GetTick>
 8003202:	eba0 0009 	sub.w	r0, r0, r9
 8003206:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 800320a:	d21a      	bcs.n	8003242 <radioTestPing+0x14a>
 800320c:	f1b9 0f00 	cmp.w	r9, #0
 8003210:	d017      	beq.n	8003242 <radioTestPing+0x14a>
		{
			wsSetColor(5, GREEN);
 8003212:	2300      	movs	r3, #0
 8003214:	2210      	movs	r2, #16
 8003216:	4619      	mov	r1, r3
 8003218:	2005      	movs	r0, #5
 800321a:	f002 fad1 	bl	80057c0 <wsSetColor>
			wsSetColor(6, GREEN);
 800321e:	2300      	movs	r3, #0
 8003220:	2210      	movs	r2, #16
 8003222:	4619      	mov	r1, r3
 8003224:	2006      	movs	r0, #6
 8003226:	f002 facb 	bl	80057c0 <wsSetColor>
			wsSetColor(7, GREEN);
 800322a:	2300      	movs	r3, #0
 800322c:	2210      	movs	r2, #16
 800322e:	4619      	mov	r1, r3
 8003230:	2007      	movs	r0, #7
 8003232:	f002 fac5 	bl	80057c0 <wsSetColor>
			wsSetColor(8, GREEN);
 8003236:	2300      	movs	r3, #0
 8003238:	2210      	movs	r2, #16
 800323a:	4619      	mov	r1, r3
 800323c:	2008      	movs	r0, #8
 800323e:	f002 fabf 	bl	80057c0 <wsSetColor>
		}
		if (HAL_GetTick() - lastUartConnect < 200)
 8003242:	f002 fb91 	bl	8005968 <HAL_GetTick>
 8003246:	f8df b100 	ldr.w	fp, [pc, #256]	; 8003348 <radioTestPing+0x250>
 800324a:	f8db 3000 	ldr.w	r3, [fp]
 800324e:	1ac0      	subs	r0, r0, r3
 8003250:	28c7      	cmp	r0, #199	; 0xc7
 8003252:	d805      	bhi.n	8003260 <radioTestPing+0x168>
		{
			wsSetColor(0, YELLOW);
 8003254:	2300      	movs	r3, #0
 8003256:	2210      	movs	r2, #16
 8003258:	4618      	mov	r0, r3
 800325a:	4611      	mov	r1, r2
 800325c:	f002 fab0 	bl	80057c0 <wsSetColor>
		}
		wsPrepareArray();
 8003260:	f002 faee 	bl	8005840 <wsPrepareArray>

//Handle UART
		if (HAL_GetTick() - lastLcdUpdate > 300)
 8003264:	f002 fb80 	bl	8005968 <HAL_GetTick>
 8003268:	9b01      	ldr	r3, [sp, #4]
 800326a:	1ac0      	subs	r0, r0, r3
 800326c:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
			flag.lcdRefreshRequest = 1;
 8003270:	bf82      	ittt	hi
 8003272:	782b      	ldrbhi	r3, [r5, #0]
 8003274:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8003278:	702b      	strbhi	r3, [r5, #0]

		if (flag.uartGotMessage)
 800327a:	786b      	ldrb	r3, [r5, #1]
 800327c:	07d9      	lsls	r1, r3, #31
 800327e:	d508      	bpl.n	8003292 <radioTestPing+0x19a>
		{
			flag.uartGotMessage = 0;
 8003280:	f36f 0300 	bfc	r3, #0, #1
 8003284:	706b      	strb	r3, [r5, #1]
			lastUartConnect = HAL_GetTick();
 8003286:	f002 fb6f 	bl	8005968 <HAL_GetTick>
 800328a:	f8cb 0000 	str.w	r0, [fp]

			uartReceiveHandler();
 800328e:	f001 ffc9 	bl	8005224 <uartReceiveHandler>
		}

//Handle LCD
		if (flag.lcdRefreshRequest)
 8003292:	782b      	ldrb	r3, [r5, #0]
 8003294:	065a      	lsls	r2, r3, #25
 8003296:	f57f af4a 	bpl.w	800312e <radioTestPing+0x36>
		{
			flag.lcdRefreshRequest = 0;
 800329a:	f36f 1386 	bfc	r3, #6, #1
 800329e:	702b      	strb	r3, [r5, #0]

			float sucess;
			if (sendCount != 0)
 80032a0:	f1b8 0f00 	cmp.w	r8, #0
 80032a4:	d02d      	beq.n	8003302 <radioTestPing+0x20a>
				sucess = (float) receivedCount / (float) sendCount;
 80032a6:	4630      	mov	r0, r6
 80032a8:	f7fd fbf6 	bl	8000a98 <__aeabi_ui2f>
 80032ac:	4605      	mov	r5, r0
 80032ae:	4640      	mov	r0, r8
 80032b0:	f7fd fbf2 	bl	8000a98 <__aeabi_ui2f>
 80032b4:	4601      	mov	r1, r0
 80032b6:	4628      	mov	r0, r5
 80032b8:	f7fd fcfa 	bl	8000cb0 <__aeabi_fdiv>
 80032bc:	4605      	mov	r5, r0
			else
				sucess = 0;

			lastLcdUpdate = HAL_GetTick();
 80032be:	f002 fb53 	bl	8005968 <HAL_GetTick>
 80032c2:	9001      	str	r0, [sp, #4]
			clearStrings();
 80032c4:	f7fe f9fe 	bl	80016c4 <clearStrings>

			if (autoPing)
 80032c8:	b1ef      	cbz	r7, 8003306 <radioTestPing+0x20e>
				sprintf(string[0], "Ping auto");
 80032ca:	4915      	ldr	r1, [pc, #84]	; (8003320 <radioTestPing+0x228>)
			else
				sprintf(string[0], "Ping manual");
 80032cc:	4815      	ldr	r0, [pc, #84]	; (8003324 <radioTestPing+0x22c>)
 80032ce:	f005 f9a7 	bl	8008620 <strcpy>
			sprintf(string[1], "send %lu", sendCount);
 80032d2:	4642      	mov	r2, r8
 80032d4:	4914      	ldr	r1, [pc, #80]	; (8003328 <radioTestPing+0x230>)
 80032d6:	4815      	ldr	r0, [pc, #84]	; (800332c <radioTestPing+0x234>)
 80032d8:	f005 f982 	bl	80085e0 <siprintf>
			sprintf(string[2], "received %lu", receivedCount);
 80032dc:	4632      	mov	r2, r6
 80032de:	4914      	ldr	r1, [pc, #80]	; (8003330 <radioTestPing+0x238>)
 80032e0:	4814      	ldr	r0, [pc, #80]	; (8003334 <radioTestPing+0x23c>)
 80032e2:	f005 f97d 	bl	80085e0 <siprintf>
			sprintf(string[3], "%d%% sucess", (int) (sucess * 100));
 80032e6:	4914      	ldr	r1, [pc, #80]	; (8003338 <radioTestPing+0x240>)
 80032e8:	4628      	mov	r0, r5
 80032ea:	f7fd fc2d 	bl	8000b48 <__aeabi_fmul>
 80032ee:	f7fd fdf1 	bl	8000ed4 <__aeabi_f2iz>
 80032f2:	4912      	ldr	r1, [pc, #72]	; (800333c <radioTestPing+0x244>)
 80032f4:	4602      	mov	r2, r0
 80032f6:	4812      	ldr	r0, [pc, #72]	; (8003340 <radioTestPing+0x248>)
 80032f8:	f005 f972 	bl	80085e0 <siprintf>
			updateLcd();
 80032fc:	f7fe f9f4 	bl	80016e8 <updateLcd>
 8003300:	e715      	b.n	800312e <radioTestPing+0x36>
				sucess = 0;
 8003302:	2500      	movs	r5, #0
 8003304:	e7db      	b.n	80032be <radioTestPing+0x1c6>
				sprintf(string[0], "Ping manual");
 8003306:	490f      	ldr	r1, [pc, #60]	; (8003344 <radioTestPing+0x24c>)
 8003308:	e7e0      	b.n	80032cc <radioTestPing+0x1d4>
 800330a:	bf00      	nop
 800330c:	20000998 	.word	0x20000998
 8003310:	20000048 	.word	0x20000048
 8003314:	20000b4c 	.word	0x20000b4c
 8003318:	20000b98 	.word	0x20000b98
 800331c:	20000c30 	.word	0x20000c30
 8003320:	0800af71 	.word	0x0800af71
 8003324:	20000168 	.word	0x20000168
 8003328:	0800af87 	.word	0x0800af87
 800332c:	200001a8 	.word	0x200001a8
 8003330:	0800af90 	.word	0x0800af90
 8003334:	200001e8 	.word	0x200001e8
 8003338:	42c80000 	.word	0x42c80000
 800333c:	0800af9d 	.word	0x0800af9d
 8003340:	20000228 	.word	0x20000228
 8003344:	0800af7b 	.word	0x0800af7b
 8003348:	200015c0 	.word	0x200015c0

0800334c <radioSignalIndicator>:
 * Shows current RSSI
 * @param  None
 * @retval None
 */
void radioSignalIndicator()
{
 800334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	int16_t rssi;
	int16_t scale;
	SX127X_defaultConfig(&myRadio);
 8003350:	4829      	ldr	r0, [pc, #164]	; (80033f8 <radioSignalIndicator+0xac>)
 8003352:	f001 fc97 	bl	8004c84 <SX127X_defaultConfig>
	tryLoadSettings();
 8003356:	f7fe fa11 	bl	800177c <tryLoadSettings>
	SX127X_config(&myRadio);
 800335a:	4827      	ldr	r0, [pc, #156]	; (80033f8 <radioSignalIndicator+0xac>)
 800335c:	f001 fcde 	bl	8004d1c <SX127X_config>
	while (1)
	{
		rssi = SX127X_RSSI(&myRadio);
 8003360:	4e25      	ldr	r6, [pc, #148]	; (80033f8 <radioSignalIndicator+0xac>)
		scale = (rssi > -120) ? 120 + rssi : 0;
		clearStrings();
		sprintf(string[0], "RSSI Meter");
 8003362:	4f26      	ldr	r7, [pc, #152]	; (80033fc <radioSignalIndicator+0xb0>)
		rssi = SX127X_RSSI(&myRadio);
 8003364:	4630      	mov	r0, r6
 8003366:	f001 fe23 	bl	8004fb0 <SX127X_RSSI>
		scale = (rssi > -120) ? 120 + rssi : 0;
 800336a:	f110 0f77 	cmn.w	r0, #119	; 0x77
 800336e:	bfb8      	it	lt
 8003370:	2400      	movlt	r4, #0
		rssi = SX127X_RSSI(&myRadio);
 8003372:	4605      	mov	r5, r0
		scale = (rssi > -120) ? 120 + rssi : 0;
 8003374:	bfa4      	itt	ge
 8003376:	f100 0378 	addge.w	r3, r0, #120	; 0x78
 800337a:	b21c      	sxthge	r4, r3
		clearStrings();
 800337c:	f7fe f9a2 	bl	80016c4 <clearStrings>
		sprintf(string[0], "RSSI Meter");
 8003380:	4639      	mov	r1, r7
 8003382:	481f      	ldr	r0, [pc, #124]	; (8003400 <radioSignalIndicator+0xb4>)
 8003384:	f005 f94c 	bl	8008620 <strcpy>
		sprintf(string[1], "RSSI:%4d C:%d", rssi, scale);
 8003388:	4623      	mov	r3, r4
 800338a:	462a      	mov	r2, r5
 800338c:	491d      	ldr	r1, [pc, #116]	; (8003404 <radioSignalIndicator+0xb8>)
 800338e:	481e      	ldr	r0, [pc, #120]	; (8003408 <radioSignalIndicator+0xbc>)
 8003390:	f005 f926 	bl	80085e0 <siprintf>
		SX127X_Routine(&myRadio);
 8003394:	4818      	ldr	r0, [pc, #96]	; (80033f8 <radioSignalIndicator+0xac>)
 8003396:	f001 fe4d 	bl	8005034 <SX127X_Routine>
		updateLcd();
 800339a:	f7fe f9a5 	bl	80016e8 <updateLcd>
		wsSetColor(0, BLACK);
 800339e:	2300      	movs	r3, #0
 80033a0:	461a      	mov	r2, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	4618      	mov	r0, r3
 80033a6:	f002 fa0b 	bl	80057c0 <wsSetColor>
		if (myRadio.signalDetected)
 80033aa:	7f33      	ldrb	r3, [r6, #28]
 80033ac:	b12b      	cbz	r3, 80033ba <radioSignalIndicator+0x6e>
			wsSetColor(0, CYAN);
 80033ae:	2310      	movs	r3, #16
 80033b0:	2100      	movs	r1, #0
 80033b2:	461a      	mov	r2, r3
 80033b4:	4608      	mov	r0, r1
 80033b6:	f002 fa03 	bl	80057c0 <wsSetColor>
		for (i = 0; i < 8; i++)
		{
			if (scale / 10 > i)
 80033ba:	220a      	movs	r2, #10
 80033bc:	fb94 f3f2 	sdiv	r3, r4, r2
				wsSetColor(8 - i, 0, 10, 0);
			else if (scale / 10 < i)
				wsSetColor(8 - i, 0, 0, 0);
			else
				wsSetColor(8 - i, 0, scale % 10, 0);
 80033c0:	2500      	movs	r5, #0
			if (scale / 10 > i)
 80033c2:	fa0f f883 	sxth.w	r8, r3
				wsSetColor(8 - i, 0, scale % 10, 0);
 80033c6:	fb02 4313 	mls	r3, r2, r3, r4
 80033ca:	b2dc      	uxtb	r4, r3
			if (scale / 10 > i)
 80033cc:	f1c5 0008 	rsb	r0, r5, #8
 80033d0:	45a8      	cmp	r8, r5
				wsSetColor(8 - i, 0, 10, 0);
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	b2c0      	uxtb	r0, r0
			if (scale / 10 > i)
 80033d8:	dd09      	ble.n	80033ee <radioSignalIndicator+0xa2>
				wsSetColor(8 - i, 0, 10, 0);
 80033da:	220a      	movs	r2, #10
				wsSetColor(8 - i, 0, scale % 10, 0);
 80033dc:	4619      	mov	r1, r3
 80033de:	3501      	adds	r5, #1
 80033e0:	f002 f9ee 	bl	80057c0 <wsSetColor>
		for (i = 0; i < 8; i++)
 80033e4:	2d08      	cmp	r5, #8
 80033e6:	d1f1      	bne.n	80033cc <radioSignalIndicator+0x80>

		}
		wsPrepareArray();
 80033e8:	f002 fa2a 	bl	8005840 <wsPrepareArray>
		rssi = SX127X_RSSI(&myRadio);
 80033ec:	e7ba      	b.n	8003364 <radioSignalIndicator+0x18>
				wsSetColor(8 - i, 0, 0, 0);
 80033ee:	bfb4      	ite	lt
 80033f0:	461a      	movlt	r2, r3
				wsSetColor(8 - i, 0, scale % 10, 0);
 80033f2:	4622      	movge	r2, r4
 80033f4:	e7f2      	b.n	80033dc <radioSignalIndicator+0x90>
 80033f6:	bf00      	nop
 80033f8:	20000998 	.word	0x20000998
 80033fc:	0800afa9 	.word	0x0800afa9
 8003400:	20000168 	.word	0x20000168
 8003404:	0800afb4 	.word	0x0800afb4
 8003408:	200001a8 	.word	0x200001a8

0800340c <button_ok>:
{
 800340c:	b538      	push	{r3, r4, r5, lr}
	if (screenMode == smModeSelect)
 800340e:	4aa0      	ldr	r2, [pc, #640]	; (8003690 <button_ok+0x284>)
 8003410:	7813      	ldrb	r3, [r2, #0]
 8003412:	4614      	mov	r4, r2
 8003414:	2b1e      	cmp	r3, #30
 8003416:	d116      	bne.n	8003446 <button_ok+0x3a>
		switch (selectedMode)
 8003418:	4b9e      	ldr	r3, [pc, #632]	; (8003694 <button_ok+0x288>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b05      	cmp	r3, #5
 800341e:	f200 8094 	bhi.w	800354a <button_ok+0x13e>
 8003422:	e8df f003 	tbb	[pc, r3]
 8003426:	0603      	.short	0x0603
 8003428:	0e0c0a08 	.word	0x0e0c0a08
			screenMode = smRegular;
 800342c:	2300      	movs	r3, #0
		screenMode = smRadioMenu;
 800342e:	7023      	strb	r3, [r4, #0]
 8003430:	e08b      	b.n	800354a <button_ok+0x13e>
			colorTest();
 8003432:	f7ff fc3f 	bl	8002cb4 <colorTest>
			radioTestTransmit();
 8003436:	f7ff fcdb 	bl	8002df0 <radioTestTransmit>
			radioTestReceive();
 800343a:	f7ff fd81 	bl	8002f40 <radioTestReceive>
			radioTestPing();
 800343e:	f7ff fe5b 	bl	80030f8 <radioTestPing>
			radioSignalIndicator();
 8003442:	f7ff ff83 	bl	800334c <radioSignalIndicator>
	else if (screenMode == smRegular)
 8003446:	b913      	cbnz	r3, 800344e <button_ok+0x42>
		screenMode = smNodeAction;
 8003448:	231d      	movs	r3, #29
			cursorPos++;
 800344a:	7013      	strb	r3, [r2, #0]
 800344c:	e07d      	b.n	800354a <button_ok+0x13e>
	else if (screenMode == smMainMenu)
 800344e:	2b01      	cmp	r3, #1
 8003450:	d116      	bne.n	8003480 <button_ok+0x74>
		switch (menuPosition)
 8003452:	4b91      	ldr	r3, [pc, #580]	; (8003698 <button_ok+0x28c>)
 8003454:	f993 3000 	ldrsb.w	r3, [r3]
 8003458:	2b05      	cmp	r3, #5
 800345a:	d834      	bhi.n	80034c6 <button_ok+0xba>
 800345c:	e8df f003 	tbb	[pc, r3]
 8003460:	0a080603 	.word	0x0a080603
 8003464:	0e0c      	.short	0x0e0c
			screenMode = smRadioMenu;
 8003466:	2302      	movs	r3, #2
		screenMode = smMainMenu;
 8003468:	7023      	strb	r3, [r4, #0]
 800346a:	e02c      	b.n	80034c6 <button_ok+0xba>
			screenMode = smBaseMenu;
 800346c:	2303      	movs	r3, #3
 800346e:	e7fb      	b.n	8003468 <button_ok+0x5c>
			screenMode = smNodeMenu;
 8003470:	2304      	movs	r3, #4
 8003472:	e7f9      	b.n	8003468 <button_ok+0x5c>
			screenMode = smNetworkMenu;
 8003474:	2305      	movs	r3, #5
 8003476:	e7f7      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSaveConfig;
 8003478:	2318      	movs	r3, #24
 800347a:	e7f5      	b.n	8003468 <button_ok+0x5c>
			screenMode = smStatus;
 800347c:	2319      	movs	r3, #25
 800347e:	e7f3      	b.n	8003468 <button_ok+0x5c>
	else if (screenMode == smRadioMenu)
 8003480:	2b02      	cmp	r3, #2
 8003482:	d118      	bne.n	80034b6 <button_ok+0xaa>
		switch (menuPosition)
 8003484:	4b84      	ldr	r3, [pc, #528]	; (8003698 <button_ok+0x28c>)
 8003486:	f993 3000 	ldrsb.w	r3, [r3]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d81b      	bhi.n	80034c6 <button_ok+0xba>
 800348e:	e8df f003 	tbb	[pc, r3]
 8003492:	0604      	.short	0x0604
 8003494:	0e0c0a08 	.word	0x0e0c0a08
 8003498:	10          	.byte	0x10
 8003499:	00          	.byte	0x00
			screenMode = smFrequency;
 800349a:	2306      	movs	r3, #6
 800349c:	e7e4      	b.n	8003468 <button_ok+0x5c>
			screenMode = smBw;
 800349e:	2308      	movs	r3, #8
 80034a0:	e7e2      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSf;
 80034a2:	2307      	movs	r3, #7
 80034a4:	e7e0      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSw;
 80034a6:	2309      	movs	r3, #9
 80034a8:	e7de      	b.n	8003468 <button_ok+0x5c>
			screenMode = smCr;
 80034aa:	230a      	movs	r3, #10
 80034ac:	e7dc      	b.n	8003468 <button_ok+0x5c>
			screenMode = smPreamble;
 80034ae:	230b      	movs	r3, #11
 80034b0:	e7da      	b.n	8003468 <button_ok+0x5c>
			screenMode = smPower;
 80034b2:	230c      	movs	r3, #12
 80034b4:	e7d8      	b.n	8003468 <button_ok+0x5c>
	else if (screenMode == smBaseMenu)
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d10c      	bne.n	80034d4 <button_ok+0xc8>
		switch (menuPosition)
 80034ba:	4b77      	ldr	r3, [pc, #476]	; (8003698 <button_ok+0x28c>)
 80034bc:	f993 3000 	ldrsb.w	r3, [r3]
 80034c0:	b11b      	cbz	r3, 80034ca <button_ok+0xbe>
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d004      	beq.n	80034d0 <button_ok+0xc4>
		menuPosition = 0;
 80034c6:	4b74      	ldr	r3, [pc, #464]	; (8003698 <button_ok+0x28c>)
 80034c8:	e084      	b.n	80035d4 <button_ok+0x1c8>
			screenMode = smInterval1;
 80034ca:	230d      	movs	r3, #13
			screenMode = smCleanNodeData;
 80034cc:	7013      	strb	r3, [r2, #0]
			break;
 80034ce:	e7fa      	b.n	80034c6 <button_ok+0xba>
			screenMode = smInterval2;
 80034d0:	230e      	movs	r3, #14
 80034d2:	e7fb      	b.n	80034cc <button_ok+0xc0>
	else if (screenMode == smNodeMenu)
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d10e      	bne.n	80034f6 <button_ok+0xea>
		switch (menuPosition)
 80034d8:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <button_ok+0x28c>)
 80034da:	f993 3000 	ldrsb.w	r3, [r3]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d005      	beq.n	80034ee <button_ok+0xe2>
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d005      	beq.n	80034f2 <button_ok+0xe6>
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1ed      	bne.n	80034c6 <button_ok+0xba>
			screenMode = smWorkInterval;
 80034ea:	230f      	movs	r3, #15
 80034ec:	e7ee      	b.n	80034cc <button_ok+0xc0>
			screenMode = smLed;
 80034ee:	2310      	movs	r3, #16
 80034f0:	e7ec      	b.n	80034cc <button_ok+0xc0>
			screenMode = smCleanNodeData;
 80034f2:	2311      	movs	r3, #17
 80034f4:	e7ea      	b.n	80034cc <button_ok+0xc0>
	else if (screenMode == smNetworkMenu)
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	d115      	bne.n	8003526 <button_ok+0x11a>
		switch (menuPosition)
 80034fa:	4b67      	ldr	r3, [pc, #412]	; (8003698 <button_ok+0x28c>)
 80034fc:	f993 3000 	ldrsb.w	r3, [r3]
 8003500:	2b05      	cmp	r3, #5
 8003502:	d8e0      	bhi.n	80034c6 <button_ok+0xba>
 8003504:	e8df f003 	tbb	[pc, r3]
 8003508:	09070503 	.word	0x09070503
 800350c:	0d0b      	.short	0x0d0b
			screenMode = smRefreshNetworks;
 800350e:	2312      	movs	r3, #18
 8003510:	e7aa      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSelectNet;
 8003512:	2313      	movs	r3, #19
 8003514:	e7a8      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSetWiFiPassword;
 8003516:	2314      	movs	r3, #20
 8003518:	e7a6      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSetServerPassword;
 800351a:	2315      	movs	r3, #21
 800351c:	e7a4      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSetBaseID;
 800351e:	2317      	movs	r3, #23
 8003520:	e7a2      	b.n	8003468 <button_ok+0x5c>
			screenMode = smSetHost;
 8003522:	2316      	movs	r3, #22
 8003524:	e7a0      	b.n	8003468 <button_ok+0x5c>
	else if (screenMode == smNodeAction)
 8003526:	2b1d      	cmp	r3, #29
 8003528:	d139      	bne.n	800359e <button_ok+0x192>
		switch (menuPosition)
 800352a:	4b5b      	ldr	r3, [pc, #364]	; (8003698 <button_ok+0x28c>)
 800352c:	f993 3000 	ldrsb.w	r3, [r3]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d80a      	bhi.n	800354a <button_ok+0x13e>
 8003534:	e8df f003 	tbb	[pc, r3]
 8003538:	27210f02 	.word	0x27210f02
			screenMode = smRegular;
 800353c:	2300      	movs	r3, #0
 800353e:	7023      	strb	r3, [r4, #0]
			pingNode(selectedNode);
 8003540:	4b56      	ldr	r3, [pc, #344]	; (800369c <button_ok+0x290>)
 8003542:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003546:	f7fe fe13 	bl	8002170 <pingNode>
	flag.lcdRefreshRequest = 1;
 800354a:	4a55      	ldr	r2, [pc, #340]	; (80036a0 <button_ok+0x294>)
 800354c:	7813      	ldrb	r3, [r2, #0]
 800354e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003552:	7013      	strb	r3, [r2, #0]
}
 8003554:	bd38      	pop	{r3, r4, r5, pc}
					(nodes[selectedNode].masked == 3) ?
 8003556:	4b51      	ldr	r3, [pc, #324]	; (800369c <button_ok+0x290>)
 8003558:	4a52      	ldr	r2, [pc, #328]	; (80036a4 <button_ok+0x298>)
 800355a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8003564:	7b1b      	ldrb	r3, [r3, #12]
			nodes[selectedNode].masked =
 8003566:	440a      	add	r2, r1
 8003568:	2b03      	cmp	r3, #3
 800356a:	bf0e      	itee	eq
 800356c:	2300      	moveq	r3, #0
 800356e:	3301      	addne	r3, #1
 8003570:	b2db      	uxtbne	r3, r3
 8003572:	7313      	strb	r3, [r2, #12]
			saveNodeData();
 8003574:	f7fe f818 	bl	80015a8 <saveNodeData>
			break;
 8003578:	e7e7      	b.n	800354a <button_ok+0x13e>
			changeDisarmNode(selectedNode);
 800357a:	4b48      	ldr	r3, [pc, #288]	; (800369c <button_ok+0x290>)
 800357c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8003580:	f7fe fdda 	bl	8002138 <changeDisarmNode>
 8003584:	e7f6      	b.n	8003574 <button_ok+0x168>
			configNodeViaUart(selectedNode);
 8003586:	4b45      	ldr	r3, [pc, #276]	; (800369c <button_ok+0x290>)
 8003588:	7818      	ldrb	r0, [r3, #0]
 800358a:	f002 f897 	bl	80056bc <configNodeViaUart>
			configTime = HAL_GetTick();
 800358e:	f002 f9eb 	bl	8005968 <HAL_GetTick>
			configStep = 1;
 8003592:	2201      	movs	r2, #1
			configTime = HAL_GetTick();
 8003594:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <button_ok+0x29c>)
 8003596:	6018      	str	r0, [r3, #0]
			configStep = 1;
 8003598:	4b44      	ldr	r3, [pc, #272]	; (80036ac <button_ok+0x2a0>)
 800359a:	701a      	strb	r2, [r3, #0]
			break;
 800359c:	e7d5      	b.n	800354a <button_ok+0x13e>
	else if (screenMode == smSaveConfig)
 800359e:	2b18      	cmp	r3, #24
 80035a0:	d104      	bne.n	80035ac <button_ok+0x1a0>
		screenMode = smMainMenu;
 80035a2:	2301      	movs	r3, #1
 80035a4:	7013      	strb	r3, [r2, #0]
		saveSettings();
 80035a6:	f7fe f943 	bl	8001830 <saveSettings>
 80035aa:	e7ce      	b.n	800354a <button_ok+0x13e>
	else if (screenMode == smRefreshNetworks)
 80035ac:	2b12      	cmp	r3, #18
 80035ae:	d103      	bne.n	80035b8 <button_ok+0x1ac>
		NetRefreshNetworkList(&netHandler);
 80035b0:	483f      	ldr	r0, [pc, #252]	; (80036b0 <button_ok+0x2a4>)
 80035b2:	f7fd fd7b 	bl	80010ac <NetRefreshNetworkList>
 80035b6:	e7c8      	b.n	800354a <button_ok+0x13e>
	else if (screenMode == smSelectNet)
 80035b8:	2b13      	cmp	r3, #19
 80035ba:	d10d      	bne.n	80035d8 <button_ok+0x1cc>
		sprintf(settings.SSID, "%s", netHandler.nets[selectedNetwork]);
 80035bc:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <button_ok+0x2a8>)
 80035be:	483e      	ldr	r0, [pc, #248]	; (80036b8 <button_ok+0x2ac>)
 80035c0:	f993 1000 	ldrsb.w	r1, [r3]
 80035c4:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <button_ok+0x2b0>)
 80035c6:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 80035ca:	f005 f829 	bl	8008620 <strcpy>
		screenMode = smNetworkMenu;
 80035ce:	2305      	movs	r3, #5
 80035d0:	7023      	strb	r3, [r4, #0]
		cursorPos = 0;
 80035d2:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <button_ok+0x2b4>)
		menuPosition = 0;
 80035d4:	2200      	movs	r2, #0
 80035d6:	e7e0      	b.n	800359a <button_ok+0x18e>
	else if (screenMode == smSetWiFiPassword)
 80035d8:	2b14      	cmp	r3, #20
 80035da:	d117      	bne.n	800360c <button_ok+0x200>
		if (cursorPos < 20 && settings.WiFiPass[cursorPos] != ' '
 80035dc:	4938      	ldr	r1, [pc, #224]	; (80036c0 <button_ok+0x2b4>)
 80035de:	4a39      	ldr	r2, [pc, #228]	; (80036c4 <button_ok+0x2b8>)
 80035e0:	f991 3000 	ldrsb.w	r3, [r1]
 80035e4:	4608      	mov	r0, r1
 80035e6:	2b13      	cmp	r3, #19
 80035e8:	dc08      	bgt.n	80035fc <button_ok+0x1f0>
 80035ea:	18d5      	adds	r5, r2, r3
				&& settings.WiFiPass[cursorPos] != '\0')
 80035ec:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 80035f0:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 80035f4:	d002      	beq.n	80035fc <button_ok+0x1f0>
			cursorPos++;
 80035f6:	3301      	adds	r3, #1
 80035f8:	700b      	strb	r3, [r1, #0]
 80035fa:	e7a6      	b.n	800354a <button_ok+0x13e>
			settings.WiFiPass[cursorPos] = 0;
 80035fc:	4413      	add	r3, r2
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			screenMode = smNetworkMenu;
 8003604:	2305      	movs	r3, #5
			cursorPos = 0;
 8003606:	7002      	strb	r2, [r0, #0]
			screenMode = smNetworkMenu;
 8003608:	7023      	strb	r3, [r4, #0]
			cursorPos = 0;
 800360a:	e79e      	b.n	800354a <button_ok+0x13e>
	else if (screenMode == smSetHost)
 800360c:	2b16      	cmp	r3, #22
 800360e:	d111      	bne.n	8003634 <button_ok+0x228>
		if (cursorPos < 20 && settings.host[cursorPos] != ' '
 8003610:	492b      	ldr	r1, [pc, #172]	; (80036c0 <button_ok+0x2b4>)
 8003612:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <button_ok+0x2b8>)
 8003614:	f991 3000 	ldrsb.w	r3, [r1]
 8003618:	4608      	mov	r0, r1
 800361a:	2b13      	cmp	r3, #19
 800361c:	dc05      	bgt.n	800362a <button_ok+0x21e>
 800361e:	18d5      	adds	r5, r2, r3
				&& settings.host[cursorPos] != '\0')
 8003620:	f895 5043 	ldrb.w	r5, [r5, #67]	; 0x43
 8003624:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8003628:	d1e5      	bne.n	80035f6 <button_ok+0x1ea>
			settings.host[cursorPos] = 0;
 800362a:	4413      	add	r3, r2
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			screenMode = smNetworkMenu;
 8003632:	e7e7      	b.n	8003604 <button_ok+0x1f8>
	else if (screenMode == smSetServerPassword)
 8003634:	2b15      	cmp	r3, #21
 8003636:	d111      	bne.n	800365c <button_ok+0x250>
		if (cursorPos < 20 && settings.ServerPass[cursorPos] != ' '
 8003638:	4921      	ldr	r1, [pc, #132]	; (80036c0 <button_ok+0x2b4>)
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <button_ok+0x2b8>)
 800363c:	f991 3000 	ldrsb.w	r3, [r1]
 8003640:	4608      	mov	r0, r1
 8003642:	2b13      	cmp	r3, #19
 8003644:	dc05      	bgt.n	8003652 <button_ok+0x246>
 8003646:	18d5      	adds	r5, r2, r3
				&& settings.ServerPass[cursorPos] != '\0')
 8003648:	f895 5033 	ldrb.w	r5, [r5, #51]	; 0x33
 800364c:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8003650:	d1d1      	bne.n	80035f6 <button_ok+0x1ea>
			settings.ServerPass[cursorPos] = 0;
 8003652:	4413      	add	r3, r2
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800365a:	e7d3      	b.n	8003604 <button_ok+0x1f8>
	else if (screenMode == smSetBaseID)
 800365c:	2b17      	cmp	r3, #23
 800365e:	d108      	bne.n	8003672 <button_ok+0x266>
		if (cursorPos < 7)
 8003660:	4a17      	ldr	r2, [pc, #92]	; (80036c0 <button_ok+0x2b4>)
 8003662:	f992 3000 	ldrsb.w	r3, [r2]
 8003666:	2b06      	cmp	r3, #6
 8003668:	dc01      	bgt.n	800366e <button_ok+0x262>
			cursorPos++;
 800366a:	3301      	adds	r3, #1
 800366c:	e6ed      	b.n	800344a <button_ok+0x3e>
			screenMode = smNetworkMenu;
 800366e:	2305      	movs	r3, #5
 8003670:	e6dd      	b.n	800342e <button_ok+0x22>
	else if (screenMode == smMessageCounter)
 8003672:	2b1b      	cmp	r3, #27
 8003674:	d101      	bne.n	800367a <button_ok+0x26e>
		screenMode = smMainMenu;
 8003676:	2301      	movs	r3, #1
 8003678:	e6f6      	b.n	8003468 <button_ok+0x5c>
	else if (screenMode == smCleanNodeData)
 800367a:	2b11      	cmp	r3, #17
 800367c:	d102      	bne.n	8003684 <button_ok+0x278>
		eraseNodeData();
 800367e:	f7fd ff81 	bl	8001584 <eraseNodeData>
 8003682:	e762      	b.n	800354a <button_ok+0x13e>
	else if (screenMode >= smFrequency && screenMode <= smPower)
 8003684:	3b06      	subs	r3, #6
 8003686:	2b06      	cmp	r3, #6
 8003688:	f63f af5f 	bhi.w	800354a <button_ok+0x13e>
		screenMode = smRadioMenu;
 800368c:	2302      	movs	r3, #2
 800368e:	e6ce      	b.n	800342e <button_ok+0x22>
 8003690:	20000162 	.word	0x20000162
 8003694:	20000163 	.word	0x20000163
 8003698:	2000014f 	.word	0x2000014f
 800369c:	20000166 	.word	0x20000166
 80036a0:	20000b4c 	.word	0x20000b4c
 80036a4:	20000ce0 	.word	0x20000ce0
 80036a8:	20000cdc 	.word	0x20000cdc
 80036ac:	20000b99 	.word	0x20000b99
 80036b0:	20000e8c 	.word	0x20000e8c
 80036b4:	20000164 	.word	0x20000164
 80036b8:	20000a8b 	.word	0x20000a8b
 80036bc:	20000ebc 	.word	0x20000ebc
 80036c0:	20000122 	.word	0x20000122
 80036c4:	20000a78 	.word	0x20000a78

080036c8 <defaultNodeSettings>:
void defaultNodeSettings()
{
	nodeSettings.bw = SX127X_LORA_BW_125KHZ;
	nodeSettings.cr = SX127X_CR_4_8;
	nodeSettings.power = SX127X_POWER_20DBM;
	nodeSettings.preamble = 5;
 80036c8:	2205      	movs	r2, #5
 80036ca:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <defaultNodeSettings+0x20>)
 80036cc:	811a      	strh	r2, [r3, #8]
	nodeSettings.realFrequency = DEF_FREQUENCY;
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <defaultNodeSettings+0x24>)
 80036d0:	601a      	str	r2, [r3, #0]
	nodeSettings.cr = SX127X_CR_4_8;
 80036d2:	2204      	movs	r2, #4
 80036d4:	72da      	strb	r2, [r3, #11]
	nodeSettings.sf = SX127X_LORA_SF_12;
 80036d6:	4a06      	ldr	r2, [pc, #24]	; (80036f0 <defaultNodeSettings+0x28>)
 80036d8:	60da      	str	r2, [r3, #12]
	nodeSettings.sw = 0x1;
	nodeSettings.useLed = true;
 80036da:	2201      	movs	r2, #1
 80036dc:	741a      	strb	r2, [r3, #16]
	nodeSettings.voltageTreshold = 2.5f;
 80036de:	4a05      	ldr	r2, [pc, #20]	; (80036f4 <defaultNodeSettings+0x2c>)
 80036e0:	615a      	str	r2, [r3, #20]
	nodeSettings.workInterval = 60;
 80036e2:	223c      	movs	r2, #60	; 0x3c
 80036e4:	605a      	str	r2, [r3, #4]
}
 80036e6:	4770      	bx	lr
 80036e8:	20000c74 	.word	0x20000c74
 80036ec:	33c8d600 	.word	0x33c8d600
 80036f0:	1401070c 	.word	0x1401070c
 80036f4:	40200000 	.word	0x40200000

080036f8 <initLegalFreq>:
 * @param  None
 * @retval None
 */
void initLegalFreq()
{
	legalFreq.intervalCount = 3;
 80036f8:	2203      	movs	r2, #3
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <initLegalFreq+0x4c>)

	legalFreq.interval[0].minFreq = 864000000;
	legalFreq.interval[0].maxFreq = 865000000;
	legalFreq.interval[0].maxPower = 14; //25mW
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 80036fc:	2101      	movs	r1, #1
	legalFreq.intervalCount = 3;
 80036fe:	701a      	strb	r2, [r3, #0]
	legalFreq.interval[0].minFreq = 864000000;
 8003700:	4a11      	ldr	r2, [pc, #68]	; (8003748 <initLegalFreq+0x50>)
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 8003702:	81d9      	strh	r1, [r3, #14]
	legalFreq.interval[0].minFreq = 864000000;
 8003704:	605a      	str	r2, [r3, #4]
	legalFreq.interval[0].maxFreq = 865000000;
 8003706:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
 800370a:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800370e:	609a      	str	r2, [r3, #8]
	legalFreq.interval[0].maxPower = 14; //25mW
 8003710:	220e      	movs	r2, #14
 8003712:	731a      	strb	r2, [r3, #12]

	legalFreq.interval[1].minFreq = 866000000;
	legalFreq.interval[1].maxFreq = 868000000;
	legalFreq.interval[1].maxPower = 14;
 8003714:	761a      	strb	r2, [r3, #24]
	legalFreq.interval[1].maxAirUse = 10; //1%
 8003716:	220a      	movs	r2, #10
 8003718:	835a      	strh	r2, [r3, #26]

	legalFreq.interval[2].minFreq = 868700000;
 800371a:	4a0c      	ldr	r2, [pc, #48]	; (800374c <initLegalFreq+0x54>)
	legalFreq.interval[1].minFreq = 866000000;
 800371c:	490c      	ldr	r1, [pc, #48]	; (8003750 <initLegalFreq+0x58>)
	legalFreq.interval[2].minFreq = 868700000;
 800371e:	61da      	str	r2, [r3, #28]
	legalFreq.interval[2].maxFreq = 869200000;
 8003720:	f502 22f4 	add.w	r2, r2, #499712	; 0x7a000
 8003724:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8003728:	621a      	str	r2, [r3, #32]
	legalFreq.interval[2].maxPower = 20;
 800372a:	2214      	movs	r2, #20
 800372c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	legalFreq.interval[2].maxAirUse = 100; //10%
 8003730:	2264      	movs	r2, #100	; 0x64
	legalFreq.interval[1].minFreq = 866000000;
 8003732:	6119      	str	r1, [r3, #16]
	legalFreq.interval[1].maxFreq = 868000000;
 8003734:	f501 11f4 	add.w	r1, r1, #1998848	; 0x1e8000
 8003738:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 800373c:	6159      	str	r1, [r3, #20]
	legalFreq.interval[2].maxAirUse = 100; //10%
 800373e:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000bcc 	.word	0x20000bcc
 8003748:	337f9800 	.word	0x337f9800
 800374c:	33c74f60 	.word	0x33c74f60
 8003750:	339e1c80 	.word	0x339e1c80

08003754 <checkFreq>:
 * that the frequency is included in
 * @param  real frequency in Hz, bandwidth index
 * @retval returns interval
 */
uint8_t checkFreq(uint32_t frequency, uint8_t bw)
{
 8003754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003758:	4604      	mov	r4, r0
	uint8_t i;
	for (i = 0; i < legalFreq.intervalCount; i++)
 800375a:	2600      	movs	r6, #0
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <checkFreq+0x48>)
	{
		if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq
 800375e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80037a0 <checkFreq+0x4c>
	for (i = 0; i < legalFreq.intervalCount; i++)
 8003762:	f893 e000 	ldrb.w	lr, [r3]
 8003766:	b2f0      	uxtb	r0, r6
 8003768:	4586      	cmp	lr, r0
 800376a:	d802      	bhi.n	8003772 <checkFreq+0x1e>
						<= legalFreq.interval[i].maxFreq)
		{
			return i;
		}
	}
	return BAD_INTERVAL;
 800376c:	20ff      	movs	r0, #255	; 0xff
}
 800376e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq
 8003772:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 8003776:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800377a:	0855      	lsrs	r5, r2, #1
 800377c:	eba4 0252 	sub.w	r2, r4, r2, lsr #1
 8003780:	4562      	cmp	r2, ip
 8003782:	d307      	bcc.n	8003794 <checkFreq+0x40>
						<= legalFreq.interval[i].maxFreq
 8003784:	689f      	ldr	r7, [r3, #8]
				&& frequency - bandWidth[bw] / 2
 8003786:	42ba      	cmp	r2, r7
 8003788:	d804      	bhi.n	8003794 <checkFreq+0x40>
				&& frequency + bandWidth[bw] / 2
 800378a:	192a      	adds	r2, r5, r4
 800378c:	4594      	cmp	ip, r2
 800378e:	d801      	bhi.n	8003794 <checkFreq+0x40>
				&& frequency + bandWidth[bw] / 2
 8003790:	4297      	cmp	r7, r2
 8003792:	d2ec      	bcs.n	800376e <checkFreq+0x1a>
	for (i = 0; i < legalFreq.intervalCount; i++)
 8003794:	3601      	adds	r6, #1
 8003796:	330c      	adds	r3, #12
 8003798:	e7e5      	b.n	8003766 <checkFreq+0x12>
 800379a:	bf00      	nop
 800379c:	20000bcc 	.word	0x20000bcc
 80037a0:	0800b088 	.word	0x0800b088

080037a4 <button_right>:
{
 80037a4:	b510      	push	{r4, lr}
	switch (screenMode)
 80037a6:	4b99      	ldr	r3, [pc, #612]	; (8003a0c <button_right+0x268>)
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	2a1e      	cmp	r2, #30
 80037ac:	d82c      	bhi.n	8003808 <button_right+0x64>
 80037ae:	e8df f012 	tbh	[pc, r2, lsl #1]
 80037b2:	001f      	.short	0x001f
 80037b4:	00310045 	.word	0x00310045
 80037b8:	0040003b 	.word	0x0040003b
 80037bc:	004f0045 	.word	0x004f0045
 80037c0:	0072006b 	.word	0x0072006b
 80037c4:	0088007f 	.word	0x0088007f
 80037c8:	009a0090 	.word	0x009a0090
 80037cc:	00bb00b1 	.word	0x00bb00b1
 80037d0:	00cf00c5 	.word	0x00cf00c5
 80037d4:	002b00d5 	.word	0x002b00d5
 80037d8:	00dd00d8 	.word	0x00dd00d8
 80037dc:	00fd00ed 	.word	0x00fd00ed
 80037e0:	002b010d 	.word	0x002b010d
 80037e4:	011e011e 	.word	0x011e011e
 80037e8:	0121011e 	.word	0x0121011e
 80037ec:	0123004a 	.word	0x0123004a
		lastNodeChangeTick = HAL_GetTick();
 80037f0:	f002 f8ba 	bl	8005968 <HAL_GetTick>
 80037f4:	4b86      	ldr	r3, [pc, #536]	; (8003a10 <button_right+0x26c>)
		selectedNode++;
 80037f6:	4a87      	ldr	r2, [pc, #540]	; (8003a14 <button_right+0x270>)
		lastNodeChangeTick = HAL_GetTick();
 80037f8:	6018      	str	r0, [r3, #0]
		selectedNode++;
 80037fa:	8813      	ldrh	r3, [r2, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	b21b      	sxth	r3, r3
		if (selectedNode > MAX_NODES - 1)
 8003800:	2b07      	cmp	r3, #7
			selectedNode = 0;
 8003802:	bfc8      	it	gt
 8003804:	2300      	movgt	r3, #0
 8003806:	8013      	strh	r3, [r2, #0]
	flag.lcdRefreshRequest = 1;
 8003808:	4a83      	ldr	r2, [pc, #524]	; (8003a18 <button_right+0x274>)
 800380a:	7813      	ldrb	r3, [r2, #0]
 800380c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003810:	7013      	strb	r3, [r2, #0]
}
 8003812:	bd10      	pop	{r4, pc}
		menuPosition = (menuPosition > 5) ? 0 : menuPosition + 1;
 8003814:	4a81      	ldr	r2, [pc, #516]	; (8003a1c <button_right+0x278>)
 8003816:	f992 3000 	ldrsb.w	r3, [r2]
 800381a:	2b05      	cmp	r3, #5
		selectedNetwork = (selectedNetwork > 14) ? 0 : selectedNetwork + 1;
 800381c:	f300 80f3 	bgt.w	8003a06 <button_right+0x262>
 8003820:	3301      	adds	r3, #1
 8003822:	b25b      	sxtb	r3, r3
			selectedMode = 0;
 8003824:	7013      	strb	r3, [r2, #0]
 8003826:	e7ef      	b.n	8003808 <button_right+0x64>
		menuPosition = (menuPosition > 0) ? 0 : menuPosition + 1;
 8003828:	4a7c      	ldr	r2, [pc, #496]	; (8003a1c <button_right+0x278>)
 800382a:	f992 3000 	ldrsb.w	r3, [r2]
 800382e:	2b00      	cmp	r3, #0
 8003830:	e7f4      	b.n	800381c <button_right+0x78>
		menuPosition = (menuPosition > 1) ? 0 : menuPosition + 1;
 8003832:	4a7a      	ldr	r2, [pc, #488]	; (8003a1c <button_right+0x278>)
 8003834:	f992 3000 	ldrsb.w	r3, [r2]
 8003838:	2b01      	cmp	r3, #1
 800383a:	e7ef      	b.n	800381c <button_right+0x78>
		menuPosition = (menuPosition > 4) ? 0 : menuPosition + 1;
 800383c:	4a77      	ldr	r2, [pc, #476]	; (8003a1c <button_right+0x278>)
 800383e:	f992 3000 	ldrsb.w	r3, [r2]
 8003842:	2b04      	cmp	r3, #4
 8003844:	e7ea      	b.n	800381c <button_right+0x78>
		menuPosition = (menuPosition > 2) ? 0 : menuPosition + 1;
 8003846:	4a75      	ldr	r2, [pc, #468]	; (8003a1c <button_right+0x278>)
 8003848:	f992 3000 	ldrsb.w	r3, [r2]
 800384c:	2b02      	cmp	r3, #2
 800384e:	e7e5      	b.n	800381c <button_right+0x78>
		if (settings.realFrequency < MAX_FREQUENCY)
 8003850:	4c73      	ldr	r4, [pc, #460]	; (8003a20 <button_right+0x27c>)
 8003852:	4a74      	ldr	r2, [pc, #464]	; (8003a24 <button_right+0x280>)
 8003854:	6823      	ldr	r3, [r4, #0]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 8003856:	7be1      	ldrb	r1, [r4, #15]
		if (settings.realFrequency < MAX_FREQUENCY)
 8003858:	4293      	cmp	r3, r2
			settings.realFrequency += 50000;
 800385a:	bf9e      	ittt	ls
 800385c:	f503 4343 	addls.w	r3, r3, #49920	; 0xc300
 8003860:	3350      	addls	r3, #80	; 0x50
 8003862:	6023      	strls	r3, [r4, #0]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 8003864:	6820      	ldr	r0, [r4, #0]
 8003866:	f7ff ff75 	bl	8003754 <checkFreq>
 800386a:	4b6f      	ldr	r3, [pc, #444]	; (8003a28 <button_right+0x284>)
 800386c:	b240      	sxtb	r0, r0
 800386e:	7018      	strb	r0, [r3, #0]
		if (currentInterval != BAD_INTERVAL
 8003870:	1c43      	adds	r3, r0, #1
 8003872:	d0c9      	beq.n	8003808 <button_right+0x64>
						> legalFreq.interval[currentInterval].maxPower)
 8003874:	220c      	movs	r2, #12
 8003876:	4b6d      	ldr	r3, [pc, #436]	; (8003a2c <button_right+0x288>)
 8003878:	fb02 3000 	mla	r0, r2, r0, r3
				&& settings.power
 800387c:	7ca2      	ldrb	r2, [r4, #18]
						> legalFreq.interval[currentInterval].maxPower)
 800387e:	7b03      	ldrb	r3, [r0, #12]
				&& settings.power
 8003880:	429a      	cmp	r2, r3
 8003882:	d9c1      	bls.n	8003808 <button_right+0x64>
			settings.power = legalFreq.interval[currentInterval].maxPower;
 8003884:	74a3      	strb	r3, [r4, #18]
 8003886:	e7bf      	b.n	8003808 <button_right+0x64>
		if (settings.sf < 12)
 8003888:	4a65      	ldr	r2, [pc, #404]	; (8003a20 <button_right+0x27c>)
 800388a:	7b93      	ldrb	r3, [r2, #14]
 800388c:	2b0b      	cmp	r3, #11
 800388e:	d8bb      	bhi.n	8003808 <button_right+0x64>
			settings.sf++;
 8003890:	3301      	adds	r3, #1
 8003892:	7393      	strb	r3, [r2, #14]
 8003894:	e7b8      	b.n	8003808 <button_right+0x64>
		if (settings.bw < 9)
 8003896:	4b62      	ldr	r3, [pc, #392]	; (8003a20 <button_right+0x27c>)
 8003898:	7bda      	ldrb	r2, [r3, #15]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 800389a:	6818      	ldr	r0, [r3, #0]
		if (settings.bw < 9)
 800389c:	2a08      	cmp	r2, #8
			settings.bw++;
 800389e:	bf9c      	itt	ls
 80038a0:	3201      	addls	r2, #1
 80038a2:	73da      	strbls	r2, [r3, #15]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 80038a4:	7bd9      	ldrb	r1, [r3, #15]
 80038a6:	f7ff ff55 	bl	8003754 <checkFreq>
 80038aa:	4b5f      	ldr	r3, [pc, #380]	; (8003a28 <button_right+0x284>)
 80038ac:	7018      	strb	r0, [r3, #0]
		break;
 80038ae:	e7ab      	b.n	8003808 <button_right+0x64>
		settings.syncWord++;
 80038b0:	4a5b      	ldr	r2, [pc, #364]	; (8003a20 <button_right+0x27c>)
 80038b2:	7c53      	ldrb	r3, [r2, #17]
 80038b4:	3301      	adds	r3, #1
 80038b6:	b2db      	uxtb	r3, r3
		if (settings.syncWord == 0x34)
 80038b8:	2b34      	cmp	r3, #52	; 0x34
			settings.syncWord = 0x35;
 80038ba:	bf08      	it	eq
 80038bc:	2335      	moveq	r3, #53	; 0x35
 80038be:	7453      	strb	r3, [r2, #17]
 80038c0:	e7a2      	b.n	8003808 <button_right+0x64>
		settings.cr = (settings.cr >= 4) ? 4 : settings.cr + 1;
 80038c2:	4a57      	ldr	r2, [pc, #348]	; (8003a20 <button_right+0x27c>)
 80038c4:	7c13      	ldrb	r3, [r2, #16]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	bf28      	it	cs
 80038ca:	2303      	movcs	r3, #3
 80038cc:	3301      	adds	r3, #1
		nodeSettings.useLed = !nodeSettings.useLed;
 80038ce:	7413      	strb	r3, [r2, #16]
		break;
 80038d0:	e79a      	b.n	8003808 <button_right+0x64>
		settings.preamble =
 80038d2:	f240 31e7 	movw	r1, #999	; 0x3e7
 80038d6:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <button_right+0x27c>)
 80038d8:	8993      	ldrh	r3, [r2, #12]
 80038da:	428b      	cmp	r3, r1
 80038dc:	bf28      	it	cs
 80038de:	460b      	movcs	r3, r1
 80038e0:	3301      	adds	r3, #1
 80038e2:	8193      	strh	r3, [r2, #12]
		break;
 80038e4:	e790      	b.n	8003808 <button_right+0x64>
		settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 80038e6:	494e      	ldr	r1, [pc, #312]	; (8003a20 <button_right+0x27c>)
		if (currentInterval != BAD_INTERVAL
 80038e8:	4a4f      	ldr	r2, [pc, #316]	; (8003a28 <button_right+0x284>)
		settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 80038ea:	7c8b      	ldrb	r3, [r1, #18]
		if (currentInterval != BAD_INTERVAL
 80038ec:	f992 2000 	ldrsb.w	r2, [r2]
		settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 80038f0:	2b13      	cmp	r3, #19
 80038f2:	bf28      	it	cs
 80038f4:	2313      	movcs	r3, #19
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2db      	uxtb	r3, r3
		if (currentInterval != BAD_INTERVAL
 80038fa:	1c50      	adds	r0, r2, #1
		settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 80038fc:	748b      	strb	r3, [r1, #18]
		if (currentInterval != BAD_INTERVAL
 80038fe:	d083      	beq.n	8003808 <button_right+0x64>
						> legalFreq.interval[currentInterval].maxPower)
 8003900:	240c      	movs	r4, #12
 8003902:	484a      	ldr	r0, [pc, #296]	; (8003a2c <button_right+0x288>)
 8003904:	fb04 0202 	mla	r2, r4, r2, r0
 8003908:	7b12      	ldrb	r2, [r2, #12]
				&& settings.power
 800390a:	4293      	cmp	r3, r2
 800390c:	f67f af7c 	bls.w	8003808 <button_right+0x64>
			settings.power = legalFreq.interval[currentInterval].maxPower;
 8003910:	748a      	strb	r2, [r1, #18]
 8003912:	e779      	b.n	8003808 <button_right+0x64>
				(settings.warningDelay >= MAX_WARNING_DELAY) ?
 8003914:	4a42      	ldr	r2, [pc, #264]	; (8003a20 <button_right+0x27c>)
						MAX_WARNING_DELAY : settings.warningDelay + 10000;
 8003916:	4b46      	ldr	r3, [pc, #280]	; (8003a30 <button_right+0x28c>)
				(settings.warningDelay >= MAX_WARNING_DELAY) ?
 8003918:	6851      	ldr	r1, [r2, #4]
						MAX_WARNING_DELAY : settings.warningDelay + 10000;
 800391a:	4299      	cmp	r1, r3
 800391c:	bf3c      	itt	cc
 800391e:	f501 531c 	addcc.w	r3, r1, #9984	; 0x2700
 8003922:	3310      	addcc	r3, #16
		settings.warningDelay =
 8003924:	6053      	str	r3, [r2, #4]
		break;
 8003926:	e76f      	b.n	8003808 <button_right+0x64>
				(settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 8003928:	4a3d      	ldr	r2, [pc, #244]	; (8003a20 <button_right+0x27c>)
						MAX_WARNING_DELAY : settings.superWarningDelay + 10000;
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <button_right+0x28c>)
				(settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 800392c:	6891      	ldr	r1, [r2, #8]
						MAX_WARNING_DELAY : settings.superWarningDelay + 10000;
 800392e:	4299      	cmp	r1, r3
 8003930:	bf3c      	itt	cc
 8003932:	f501 531c 	addcc.w	r3, r1, #9984	; 0x2700
 8003936:	3310      	addcc	r3, #16
		settings.superWarningDelay =
 8003938:	6093      	str	r3, [r2, #8]
		break;
 800393a:	e765      	b.n	8003808 <button_right+0x64>
		nodeSettings.workInterval += 5;
 800393c:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 8003940:	4a3c      	ldr	r2, [pc, #240]	; (8003a34 <button_right+0x290>)
 8003942:	6853      	ldr	r3, [r2, #4]
 8003944:	3305      	adds	r3, #5
 8003946:	428b      	cmp	r3, r1
 8003948:	bf94      	ite	ls
 800394a:	6053      	strls	r3, [r2, #4]
 800394c:	6051      	strhi	r1, [r2, #4]
 800394e:	e75b      	b.n	8003808 <button_right+0x64>
		nodeSettings.useLed = !nodeSettings.useLed;
 8003950:	4a38      	ldr	r2, [pc, #224]	; (8003a34 <button_right+0x290>)
 8003952:	7c13      	ldrb	r3, [r2, #16]
 8003954:	fab3 f383 	clz	r3, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	e7b8      	b.n	80038ce <button_right+0x12a>
		eraseNodeData();
 800395c:	f7fd fe12 	bl	8001584 <eraseNodeData>
		break;
 8003960:	e752      	b.n	8003808 <button_right+0x64>
		selectedNetwork = (selectedNetwork > 14) ? 0 : selectedNetwork + 1;
 8003962:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <button_right+0x294>)
 8003964:	f992 3000 	ldrsb.w	r3, [r2]
 8003968:	2b0e      	cmp	r3, #14
 800396a:	e757      	b.n	800381c <button_right+0x78>
				(settings.WiFiPass[cursorPos] >= 'z') ?
 800396c:	4b33      	ldr	r3, [pc, #204]	; (8003a3c <button_right+0x298>)
 800396e:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <button_right+0x27c>)
 8003970:	f993 1000 	ldrsb.w	r1, [r3]
 8003974:	1853      	adds	r3, r2, r1
 8003976:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		settings.WiFiPass[cursorPos] =
 800397a:	440a      	add	r2, r1
 800397c:	2b79      	cmp	r3, #121	; 0x79
 800397e:	bf8e      	itee	hi
 8003980:	2320      	movhi	r3, #32
 8003982:	3301      	addls	r3, #1
 8003984:	b2db      	uxtbls	r3, r3
 8003986:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		break;
 800398a:	e73d      	b.n	8003808 <button_right+0x64>
				(settings.ServerPass[cursorPos] >= 'z') ?
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <button_right+0x298>)
 800398e:	4a24      	ldr	r2, [pc, #144]	; (8003a20 <button_right+0x27c>)
 8003990:	f993 1000 	ldrsb.w	r1, [r3]
 8003994:	1853      	adds	r3, r2, r1
 8003996:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		settings.ServerPass[cursorPos] =
 800399a:	440a      	add	r2, r1
 800399c:	2b79      	cmp	r3, #121	; 0x79
 800399e:	bf8e      	itee	hi
 80039a0:	2320      	movhi	r3, #32
 80039a2:	3301      	addls	r3, #1
 80039a4:	b2db      	uxtbls	r3, r3
 80039a6:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
		break;
 80039aa:	e72d      	b.n	8003808 <button_right+0x64>
				(settings.host[cursorPos] >= 'z') ?
 80039ac:	4b23      	ldr	r3, [pc, #140]	; (8003a3c <button_right+0x298>)
 80039ae:	4a1c      	ldr	r2, [pc, #112]	; (8003a20 <button_right+0x27c>)
 80039b0:	f993 1000 	ldrsb.w	r1, [r3]
 80039b4:	1853      	adds	r3, r2, r1
 80039b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
		settings.host[cursorPos] =
 80039ba:	440a      	add	r2, r1
 80039bc:	2b79      	cmp	r3, #121	; 0x79
 80039be:	bf8e      	itee	hi
 80039c0:	2320      	movhi	r3, #32
 80039c2:	3301      	addls	r3, #1
 80039c4:	b2db      	uxtbls	r3, r3
 80039c6:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
		break;
 80039ca:	e71d      	b.n	8003808 <button_right+0x64>
		settings.baseID += pow10_(6 - cursorPos);
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <button_right+0x298>)
 80039ce:	7818      	ldrb	r0, [r3, #0]
 80039d0:	f1c0 0006 	rsb	r0, r0, #6
 80039d4:	b2c0      	uxtb	r0, r0
 80039d6:	f7fd fcbd 	bl	8001354 <pow10_>
 80039da:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <button_right+0x27c>)
 80039dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80039de:	4410      	add	r0, r2
		if (settings.baseID > MAX_BASEID)
 80039e0:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <button_right+0x29c>)
 80039e2:	4290      	cmp	r0, r2
			settings.baseID = MAX_BASEID;
 80039e4:	bfaa      	itet	ge
 80039e6:	4a17      	ldrge	r2, [pc, #92]	; (8003a44 <button_right+0x2a0>)
		settings.baseID += pow10_(6 - cursorPos);
 80039e8:	6658      	strlt	r0, [r3, #100]	; 0x64
			settings.baseID = MAX_BASEID;
 80039ea:	665a      	strge	r2, [r3, #100]	; 0x64
 80039ec:	e70c      	b.n	8003808 <button_right+0x64>
		screenMode++;
 80039ee:	3201      	adds	r2, #1
		screenMode = smStatus;
 80039f0:	701a      	strb	r2, [r3, #0]
		break;
 80039f2:	e709      	b.n	8003808 <button_right+0x64>
		screenMode = smStatus;
 80039f4:	2219      	movs	r2, #25
 80039f6:	e7fb      	b.n	80039f0 <button_right+0x24c>
		selectedMode++;
 80039f8:	4a13      	ldr	r2, [pc, #76]	; (8003a48 <button_right+0x2a4>)
 80039fa:	7813      	ldrb	r3, [r2, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	b2db      	uxtb	r3, r3
		if (selectedMode > testSignal)
 8003a00:	2b05      	cmp	r3, #5
 8003a02:	f67f af0f 	bls.w	8003824 <button_right+0x80>
			selectedMode = 0;
 8003a06:	2300      	movs	r3, #0
 8003a08:	e70c      	b.n	8003824 <button_right+0x80>
 8003a0a:	bf00      	nop
 8003a0c:	20000162 	.word	0x20000162
 8003a10:	2000012c 	.word	0x2000012c
 8003a14:	20000166 	.word	0x20000166
 8003a18:	20000b4c 	.word	0x20000b4c
 8003a1c:	2000014f 	.word	0x2000014f
 8003a20:	20000a78 	.word	0x20000a78
 8003a24:	3b8b87bf 	.word	0x3b8b87bf
 8003a28:	200015c8 	.word	0x200015c8
 8003a2c:	20000bcc 	.word	0x20000bcc
 8003a30:	02932e00 	.word	0x02932e00
 8003a34:	20000c74 	.word	0x20000c74
 8003a38:	20000164 	.word	0x20000164
 8003a3c:	20000122 	.word	0x20000122
 8003a40:	00989680 	.word	0x00989680
 8003a44:	0098967f 	.word	0x0098967f
 8003a48:	20000163 	.word	0x20000163

08003a4c <button_left>:
{
 8003a4c:	b538      	push	{r3, r4, r5, lr}
	switch (screenMode)
 8003a4e:	4d9e      	ldr	r5, [pc, #632]	; (8003cc8 <button_left+0x27c>)
 8003a50:	782b      	ldrb	r3, [r5, #0]
 8003a52:	2b1e      	cmp	r3, #30
 8003a54:	d82c      	bhi.n	8003ab0 <button_left+0x64>
 8003a56:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003a5a:	001f      	.short	0x001f
 8003a5c:	0033004c 	.word	0x0033004c
 8003a60:	0045003e 	.word	0x0045003e
 8003a64:	005a004c 	.word	0x005a004c
 8003a68:	007d0076 	.word	0x007d0076
 8003a6c:	0094008b 	.word	0x0094008b
 8003a70:	00a4009c 	.word	0x00a4009c
 8003a74:	00c700bc 	.word	0x00c700bc
 8003a78:	00d900d2 	.word	0x00d900d2
 8003a7c:	002b002b 	.word	0x002b002b
 8003a80:	00e700df 	.word	0x00e700df
 8003a84:	010900f8 	.word	0x010900f8
 8003a88:	002b011a 	.word	0x002b011a
 8003a8c:	012d012a 	.word	0x012d012a
 8003a90:	012d012d 	.word	0x012d012d
 8003a94:	012f0053 	.word	0x012f0053
		lastNodeChangeTick = HAL_GetTick();
 8003a98:	f001 ff66 	bl	8005968 <HAL_GetTick>
 8003a9c:	4b8b      	ldr	r3, [pc, #556]	; (8003ccc <button_left+0x280>)
		selectedNode--;
 8003a9e:	4a8c      	ldr	r2, [pc, #560]	; (8003cd0 <button_left+0x284>)
		lastNodeChangeTick = HAL_GetTick();
 8003aa0:	6018      	str	r0, [r3, #0]
		selectedNode--;
 8003aa2:	8813      	ldrh	r3, [r2, #0]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	b21b      	sxth	r3, r3
		if (selectedNode < 0)
 8003aa8:	2b00      	cmp	r3, #0
			selectedNode = MAX_NODES - 1;
 8003aaa:	bfb8      	it	lt
 8003aac:	2307      	movlt	r3, #7
 8003aae:	8013      	strh	r3, [r2, #0]
	if (screenMode != smRegular)
 8003ab0:	782b      	ldrb	r3, [r5, #0]
 8003ab2:	b123      	cbz	r3, 8003abe <button_left+0x72>
		flag.lcdRefreshRequest = 1;
 8003ab4:	4a87      	ldr	r2, [pc, #540]	; (8003cd4 <button_left+0x288>)
 8003ab6:	7813      	ldrb	r3, [r2, #0]
 8003ab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003abc:	7013      	strb	r3, [r2, #0]
}
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
		menuPosition = (menuPosition < 1) ? 6 : menuPosition - 1;
 8003ac0:	4a85      	ldr	r2, [pc, #532]	; (8003cd8 <button_left+0x28c>)
 8003ac2:	f992 3000 	ldrsb.w	r3, [r2]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	dd02      	ble.n	8003ad0 <button_left+0x84>
		selectedNetwork = (selectedNetwork < 1) ? 15 : selectedNetwork - 1;
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	e000      	b.n	8003ad2 <button_left+0x86>
		menuPosition = (menuPosition < 1) ? 6 : menuPosition - 1;
 8003ad0:	2306      	movs	r3, #6
			selectedMode = testSignal;
 8003ad2:	7013      	strb	r3, [r2, #0]
 8003ad4:	e7ec      	b.n	8003ab0 <button_left+0x64>
		menuPosition = (menuPosition < 1) ? 1 : menuPosition - 1;
 8003ad6:	4a80      	ldr	r2, [pc, #512]	; (8003cd8 <button_left+0x28c>)
 8003ad8:	f992 3000 	ldrsb.w	r3, [r2]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	dcf4      	bgt.n	8003aca <button_left+0x7e>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e7f6      	b.n	8003ad2 <button_left+0x86>
		menuPosition = (menuPosition < 1) ? 2 : menuPosition - 1;
 8003ae4:	4a7c      	ldr	r2, [pc, #496]	; (8003cd8 <button_left+0x28c>)
 8003ae6:	f992 3000 	ldrsb.w	r3, [r2]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	dced      	bgt.n	8003aca <button_left+0x7e>
 8003aee:	2302      	movs	r3, #2
 8003af0:	e7ef      	b.n	8003ad2 <button_left+0x86>
		menuPosition = (menuPosition < 1) ? 5 : menuPosition - 1;
 8003af2:	4a79      	ldr	r2, [pc, #484]	; (8003cd8 <button_left+0x28c>)
 8003af4:	f992 3000 	ldrsb.w	r3, [r2]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	dce6      	bgt.n	8003aca <button_left+0x7e>
			selectedMode = testSignal;
 8003afc:	2305      	movs	r3, #5
 8003afe:	e7e8      	b.n	8003ad2 <button_left+0x86>
		menuPosition = (menuPosition < 1) ? 3 : menuPosition - 1;
 8003b00:	4a75      	ldr	r2, [pc, #468]	; (8003cd8 <button_left+0x28c>)
 8003b02:	f992 3000 	ldrsb.w	r3, [r2]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	dcdf      	bgt.n	8003aca <button_left+0x7e>
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e7e1      	b.n	8003ad2 <button_left+0x86>
		if (settings.realFrequency > MIN_FREQUENCY)
 8003b0e:	4c73      	ldr	r4, [pc, #460]	; (8003cdc <button_left+0x290>)
 8003b10:	4a73      	ldr	r2, [pc, #460]	; (8003ce0 <button_left+0x294>)
 8003b12:	6823      	ldr	r3, [r4, #0]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 8003b14:	7be1      	ldrb	r1, [r4, #15]
		if (settings.realFrequency > MIN_FREQUENCY)
 8003b16:	4293      	cmp	r3, r2
			settings.realFrequency -= 50000;
 8003b18:	bf82      	ittt	hi
 8003b1a:	f5a3 4343 	subhi.w	r3, r3, #49920	; 0xc300
 8003b1e:	3b50      	subhi	r3, #80	; 0x50
 8003b20:	6023      	strhi	r3, [r4, #0]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 8003b22:	6820      	ldr	r0, [r4, #0]
 8003b24:	f7ff fe16 	bl	8003754 <checkFreq>
 8003b28:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <button_left+0x298>)
 8003b2a:	b240      	sxtb	r0, r0
 8003b2c:	7018      	strb	r0, [r3, #0]
		if (currentInterval != BAD_INTERVAL
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	d0be      	beq.n	8003ab0 <button_left+0x64>
						> legalFreq.interval[currentInterval].maxPower)
 8003b32:	220c      	movs	r2, #12
 8003b34:	4b6c      	ldr	r3, [pc, #432]	; (8003ce8 <button_left+0x29c>)
 8003b36:	fb02 3000 	mla	r0, r2, r0, r3
				&& settings.power
 8003b3a:	7ca2      	ldrb	r2, [r4, #18]
						> legalFreq.interval[currentInterval].maxPower)
 8003b3c:	7b03      	ldrb	r3, [r0, #12]
				&& settings.power
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d9b6      	bls.n	8003ab0 <button_left+0x64>
			settings.power = legalFreq.interval[currentInterval].maxPower;
 8003b42:	74a3      	strb	r3, [r4, #18]
 8003b44:	e7b4      	b.n	8003ab0 <button_left+0x64>
		if (settings.sf > 7)
 8003b46:	4a65      	ldr	r2, [pc, #404]	; (8003cdc <button_left+0x290>)
 8003b48:	7b93      	ldrb	r3, [r2, #14]
 8003b4a:	2b07      	cmp	r3, #7
 8003b4c:	d9b0      	bls.n	8003ab0 <button_left+0x64>
			settings.sf--;
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	7393      	strb	r3, [r2, #14]
 8003b52:	e7ad      	b.n	8003ab0 <button_left+0x64>
		if (settings.bw > 1)
 8003b54:	4b61      	ldr	r3, [pc, #388]	; (8003cdc <button_left+0x290>)
 8003b56:	7bda      	ldrb	r2, [r3, #15]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 8003b58:	6818      	ldr	r0, [r3, #0]
		if (settings.bw > 1)
 8003b5a:	2a01      	cmp	r2, #1
			settings.bw--;
 8003b5c:	bf84      	itt	hi
 8003b5e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8003b62:	73da      	strbhi	r2, [r3, #15]
		currentInterval = checkFreq(settings.realFrequency, settings.bw);
 8003b64:	7bd9      	ldrb	r1, [r3, #15]
 8003b66:	f7ff fdf5 	bl	8003754 <checkFreq>
 8003b6a:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <button_left+0x298>)
 8003b6c:	7018      	strb	r0, [r3, #0]
		break;
 8003b6e:	e79f      	b.n	8003ab0 <button_left+0x64>
		settings.syncWord--;
 8003b70:	4a5a      	ldr	r2, [pc, #360]	; (8003cdc <button_left+0x290>)
 8003b72:	7c53      	ldrb	r3, [r2, #17]
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b2db      	uxtb	r3, r3
		if (settings.syncWord == 0x34)
 8003b78:	2b34      	cmp	r3, #52	; 0x34
			settings.syncWord = 0x33;
 8003b7a:	bf08      	it	eq
 8003b7c:	2333      	moveq	r3, #51	; 0x33
 8003b7e:	7453      	strb	r3, [r2, #17]
 8003b80:	e796      	b.n	8003ab0 <button_left+0x64>
		settings.cr = (settings.cr <= 1) ? 1 : settings.cr - 1;
 8003b82:	4a56      	ldr	r2, [pc, #344]	; (8003cdc <button_left+0x290>)
 8003b84:	7c13      	ldrb	r3, [r2, #16]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	bf38      	it	cc
 8003b8a:	2302      	movcc	r3, #2
 8003b8c:	3b01      	subs	r3, #1
		nodeSettings.useLed = !nodeSettings.useLed;
 8003b8e:	7413      	strb	r3, [r2, #16]
		break;
 8003b90:	e78e      	b.n	8003ab0 <button_left+0x64>
		settings.preamble =
 8003b92:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <button_left+0x290>)
 8003b94:	8993      	ldrh	r3, [r2, #12]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	bf38      	it	cc
 8003b9a:	2303      	movcc	r3, #3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	8193      	strh	r3, [r2, #12]
		break;
 8003ba0:	e786      	b.n	8003ab0 <button_left+0x64>
		settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003ba2:	494e      	ldr	r1, [pc, #312]	; (8003cdc <button_left+0x290>)
		if (currentInterval != BAD_INTERVAL
 8003ba4:	4a4f      	ldr	r2, [pc, #316]	; (8003ce4 <button_left+0x298>)
		settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003ba6:	7c8b      	ldrb	r3, [r1, #18]
		if (currentInterval != BAD_INTERVAL
 8003ba8:	f992 2000 	ldrsb.w	r2, [r2]
		settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003bac:	2b0b      	cmp	r3, #11
 8003bae:	bf38      	it	cc
 8003bb0:	230b      	movcc	r3, #11
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
		if (currentInterval != BAD_INTERVAL
 8003bb6:	1c50      	adds	r0, r2, #1
		settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003bb8:	748b      	strb	r3, [r1, #18]
		if (currentInterval != BAD_INTERVAL
 8003bba:	f43f af79 	beq.w	8003ab0 <button_left+0x64>
						> legalFreq.interval[currentInterval].maxPower)
 8003bbe:	240c      	movs	r4, #12
 8003bc0:	4849      	ldr	r0, [pc, #292]	; (8003ce8 <button_left+0x29c>)
 8003bc2:	fb04 0202 	mla	r2, r4, r2, r0
 8003bc6:	7b12      	ldrb	r2, [r2, #12]
				&& settings.power
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	f67f af71 	bls.w	8003ab0 <button_left+0x64>
			settings.power = legalFreq.interval[currentInterval].maxPower;
 8003bce:	748a      	strb	r2, [r1, #18]
 8003bd0:	e76e      	b.n	8003ab0 <button_left+0x64>
						MIN_WARNING_DELAY : settings.warningDelay - 10000;
 8003bd2:	f64e 2360 	movw	r3, #60000	; 0xea60
				(settings.warningDelay <= MIN_WARNING_DELAY) ?
 8003bd6:	4a41      	ldr	r2, [pc, #260]	; (8003cdc <button_left+0x290>)
 8003bd8:	6851      	ldr	r1, [r2, #4]
						MIN_WARNING_DELAY : settings.warningDelay - 10000;
 8003bda:	4299      	cmp	r1, r3
 8003bdc:	d902      	bls.n	8003be4 <button_left+0x198>
 8003bde:	f5a1 531c 	sub.w	r3, r1, #9984	; 0x2700
 8003be2:	3b10      	subs	r3, #16
		nodeSettings.workInterval =
 8003be4:	6053      	str	r3, [r2, #4]
		break;
 8003be6:	e763      	b.n	8003ab0 <button_left+0x64>
						MIN_WARNING_DELAY : settings.superWarningDelay - 10000;
 8003be8:	f64e 2360 	movw	r3, #60000	; 0xea60
				(settings.superWarningDelay <= MIN_WARNING_DELAY) ?
 8003bec:	4a3b      	ldr	r2, [pc, #236]	; (8003cdc <button_left+0x290>)
 8003bee:	6891      	ldr	r1, [r2, #8]
						MIN_WARNING_DELAY : settings.superWarningDelay - 10000;
 8003bf0:	4299      	cmp	r1, r3
 8003bf2:	bf84      	itt	hi
 8003bf4:	f5a1 531c 	subhi.w	r3, r1, #9984	; 0x2700
 8003bf8:	3b10      	subhi	r3, #16
		settings.superWarningDelay =
 8003bfa:	6093      	str	r3, [r2, #8]
		break;
 8003bfc:	e758      	b.n	8003ab0 <button_left+0x64>
				nodeSettings.workInterval <= MIN_WORK_INTERVAL ?
 8003bfe:	4a3b      	ldr	r2, [pc, #236]	; (8003cec <button_left+0x2a0>)
 8003c00:	6853      	ldr	r3, [r2, #4]
						MIN_WORK_INTERVAL : nodeSettings.workInterval - 5;
 8003c02:	2b14      	cmp	r3, #20
 8003c04:	bf94      	ite	ls
 8003c06:	2314      	movls	r3, #20
 8003c08:	3b05      	subhi	r3, #5
 8003c0a:	e7eb      	b.n	8003be4 <button_left+0x198>
		nodeSettings.useLed = !nodeSettings.useLed;
 8003c0c:	4a37      	ldr	r2, [pc, #220]	; (8003cec <button_left+0x2a0>)
 8003c0e:	7c13      	ldrb	r3, [r2, #16]
 8003c10:	fab3 f383 	clz	r3, r3
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	e7ba      	b.n	8003b8e <button_left+0x142>
		selectedNetwork = (selectedNetwork < 1) ? 15 : selectedNetwork - 1;
 8003c18:	4a35      	ldr	r2, [pc, #212]	; (8003cf0 <button_left+0x2a4>)
 8003c1a:	f992 3000 	ldrsb.w	r3, [r2]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f73f af53 	bgt.w	8003aca <button_left+0x7e>
 8003c24:	230f      	movs	r3, #15
 8003c26:	e754      	b.n	8003ad2 <button_left+0x86>
				(settings.WiFiPass[cursorPos] <= ' ') ?
 8003c28:	4b32      	ldr	r3, [pc, #200]	; (8003cf4 <button_left+0x2a8>)
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <button_left+0x290>)
 8003c2c:	f993 1000 	ldrsb.w	r1, [r3]
 8003c30:	1853      	adds	r3, r2, r1
 8003c32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
		settings.WiFiPass[cursorPos] =
 8003c36:	440a      	add	r2, r1
 8003c38:	2b20      	cmp	r3, #32
 8003c3a:	bf92      	itee	ls
 8003c3c:	237a      	movls	r3, #122	; 0x7a
 8003c3e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003c42:	b2db      	uxtbhi	r3, r3
 8003c44:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
		break;
 8003c48:	e732      	b.n	8003ab0 <button_left+0x64>
				(settings.ServerPass[cursorPos] <= ' ') ?
 8003c4a:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <button_left+0x2a8>)
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <button_left+0x290>)
 8003c4e:	f993 1000 	ldrsb.w	r1, [r3]
 8003c52:	1853      	adds	r3, r2, r1
 8003c54:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
		settings.ServerPass[cursorPos] =
 8003c58:	440a      	add	r2, r1
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	bf92      	itee	ls
 8003c5e:	237a      	movls	r3, #122	; 0x7a
 8003c60:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003c64:	b2db      	uxtbhi	r3, r3
 8003c66:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
		break;
 8003c6a:	e721      	b.n	8003ab0 <button_left+0x64>
				(settings.host[cursorPos] <= ' ') ?
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <button_left+0x2a8>)
 8003c6e:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <button_left+0x290>)
 8003c70:	f993 1000 	ldrsb.w	r1, [r3]
 8003c74:	1853      	adds	r3, r2, r1
 8003c76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
		settings.host[cursorPos] =
 8003c7a:	440a      	add	r2, r1
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	bf92      	itee	ls
 8003c80:	237a      	movls	r3, #122	; 0x7a
 8003c82:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003c86:	b2db      	uxtbhi	r3, r3
 8003c88:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
		break;
 8003c8c:	e710      	b.n	8003ab0 <button_left+0x64>
		settings.baseID -= pow10_(6 - cursorPos);
 8003c8e:	4b19      	ldr	r3, [pc, #100]	; (8003cf4 <button_left+0x2a8>)
 8003c90:	7818      	ldrb	r0, [r3, #0]
 8003c92:	f1c0 0006 	rsb	r0, r0, #6
 8003c96:	b2c0      	uxtb	r0, r0
 8003c98:	f7fd fb5c 	bl	8001354 <pow10_>
 8003c9c:	4a0f      	ldr	r2, [pc, #60]	; (8003cdc <button_left+0x290>)
 8003c9e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8003ca0:	1a18      	subs	r0, r3, r0
		if (settings.baseID <= 0)
 8003ca2:	2800      	cmp	r0, #0
			settings.baseID = 0;
 8003ca4:	bfd6      	itet	le
 8003ca6:	2300      	movle	r3, #0
		settings.baseID -= pow10_(6 - cursorPos);
 8003ca8:	6650      	strgt	r0, [r2, #100]	; 0x64
			settings.baseID = 0;
 8003caa:	6653      	strle	r3, [r2, #100]	; 0x64
 8003cac:	e700      	b.n	8003ab0 <button_left+0x64>
		screenMode = smGraph;
 8003cae:	231c      	movs	r3, #28
		screenMode--;
 8003cb0:	702b      	strb	r3, [r5, #0]
		break;
 8003cb2:	e6fd      	b.n	8003ab0 <button_left+0x64>
		screenMode--;
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	e7fb      	b.n	8003cb0 <button_left+0x264>
		selectedMode--;
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <button_left+0x2ac>)
 8003cba:	7813      	ldrb	r3, [r2, #0]
 8003cbc:	3b01      	subs	r3, #1
		if (selectedMode <= work)
 8003cbe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003cc2:	f43f af1b 	beq.w	8003afc <button_left+0xb0>
 8003cc6:	e704      	b.n	8003ad2 <button_left+0x86>
 8003cc8:	20000162 	.word	0x20000162
 8003ccc:	2000012c 	.word	0x2000012c
 8003cd0:	20000166 	.word	0x20000166
 8003cd4:	20000b4c 	.word	0x20000b4c
 8003cd8:	2000014f 	.word	0x2000014f
 8003cdc:	20000a78 	.word	0x20000a78
 8003ce0:	0839b680 	.word	0x0839b680
 8003ce4:	200015c8 	.word	0x200015c8
 8003ce8:	20000bcc 	.word	0x20000bcc
 8003cec:	20000c74 	.word	0x20000c74
 8003cf0:	20000164 	.word	0x20000164
 8003cf4:	20000122 	.word	0x20000122
 8003cf8:	20000163 	.word	0x20000163

08003cfc <backButtonHoldRoutine>:

void backButtonHoldRoutine()
{
	if (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == false
 8003cfc:	2104      	movs	r1, #4
{
 8003cfe:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == false
 8003d00:	480e      	ldr	r0, [pc, #56]	; (8003d3c <backButtonHoldRoutine+0x40>)
 8003d02:	f002 fc45 	bl	8006590 <HAL_GPIO_ReadPin>
			&& screenMode == smRegular)
 8003d06:	490e      	ldr	r1, [pc, #56]	; (8003d40 <backButtonHoldRoutine+0x44>)
 8003d08:	4a0e      	ldr	r2, [pc, #56]	; (8003d44 <backButtonHoldRoutine+0x48>)
 8003d0a:	780b      	ldrb	r3, [r1, #0]
 8003d0c:	4318      	orrs	r0, r3
 8003d0e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003d12:	d107      	bne.n	8003d24 <backButtonHoldRoutine+0x28>
		infoCounter++;
 8003d14:	8813      	ldrh	r3, [r2, #0]
 8003d16:	3301      	adds	r3, #1
 8003d18:	b29b      	uxth	r3, r3
	else
		infoCounter = 0;

	if (infoCounter > 2000)
 8003d1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003d1e:	d803      	bhi.n	8003d28 <backButtonHoldRoutine+0x2c>
 8003d20:	8013      	strh	r3, [r2, #0]
		infoCounter = 0;
		screenMode = smMainMenu;
		flag.lcdRefreshRequest = 1;
	}

}
 8003d22:	bd08      	pop	{r3, pc}
		infoCounter = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e7fb      	b.n	8003d20 <backButtonHoldRoutine+0x24>
		screenMode = smMainMenu;
 8003d28:	2301      	movs	r3, #1
		infoCounter = 0;
 8003d2a:	8010      	strh	r0, [r2, #0]
		flag.lcdRefreshRequest = 1;
 8003d2c:	4a06      	ldr	r2, [pc, #24]	; (8003d48 <backButtonHoldRoutine+0x4c>)
		screenMode = smMainMenu;
 8003d2e:	700b      	strb	r3, [r1, #0]
		flag.lcdRefreshRequest = 1;
 8003d30:	7813      	ldrb	r3, [r2, #0]
 8003d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d36:	7013      	strb	r3, [r2, #0]
}
 8003d38:	e7f3      	b.n	8003d22 <backButtonHoldRoutine+0x26>
 8003d3a:	bf00      	nop
 8003d3c:	40010c00 	.word	0x40010c00
 8003d40:	20000162 	.word	0x20000162
 8003d44:	20000124 	.word	0x20000124
 8003d48:	20000b4c 	.word	0x20000b4c

08003d4c <halfSecondRoutine>:

void halfSecondRoutine()
{
 8003d4c:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastHalf = 0;
	if (lastHalf != HAL_GetTick() / 500
 8003d4e:	f001 fe0b 	bl	8005968 <HAL_GetTick>
 8003d52:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8003d56:	fbb0 f0f5 	udiv	r0, r0, r5
 8003d5a:	4c0a      	ldr	r4, [pc, #40]	; (8003d84 <halfSecondRoutine+0x38>)
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	4298      	cmp	r0, r3
 8003d60:	d00e      	beq.n	8003d80 <halfSecondRoutine+0x34>
			&& ((screenMode >= smStatus && screenMode <= smMessageCounter)))
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <halfSecondRoutine+0x3c>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	3b19      	subs	r3, #25
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d809      	bhi.n	8003d80 <halfSecondRoutine+0x34>
	{
		lastHalf = HAL_GetTick() / 500;
 8003d6c:	f001 fdfc 	bl	8005968 <HAL_GetTick>
 8003d70:	fbb0 f0f5 	udiv	r0, r0, r5

		flag.lcdRefreshRequest = 1;
 8003d74:	4a05      	ldr	r2, [pc, #20]	; (8003d8c <halfSecondRoutine+0x40>)
		lastHalf = HAL_GetTick() / 500;
 8003d76:	6020      	str	r0, [r4, #0]
		flag.lcdRefreshRequest = 1;
 8003d78:	7813      	ldrb	r3, [r2, #0]
 8003d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7e:	7013      	strb	r3, [r2, #0]
	}
}
 8003d80:	bd38      	pop	{r3, r4, r5, pc}
 8003d82:	bf00      	nop
 8003d84:	20000128 	.word	0x20000128
 8003d88:	20000162 	.word	0x20000162
 8003d8c:	20000b4c 	.word	0x20000b4c

08003d90 <secondRoutine>:

void secondRoutine()
{
 8003d90:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastSecond = 0;
	if (HAL_GetTick() / 1000 != lastSecond)
 8003d92:	f001 fde9 	bl	8005968 <HAL_GetTick>
 8003d96:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003d9a:	fbb0 f0f5 	udiv	r0, r0, r5
 8003d9e:	4c09      	ldr	r4, [pc, #36]	; (8003dc4 <secondRoutine+0x34>)
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	4298      	cmp	r0, r3
 8003da4:	d00c      	beq.n	8003dc0 <secondRoutine+0x30>
	{
		lastSecond = HAL_GetTick() / 1000;
 8003da6:	f001 fddf 	bl	8005968 <HAL_GetTick>
 8003daa:	fbb0 f0f5 	udiv	r0, r0, r5
		if (screenMode == smRegular)
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <secondRoutine+0x38>)
		lastSecond = HAL_GetTick() / 1000;
 8003db0:	6020      	str	r0, [r4, #0]
		if (screenMode == smRegular)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b923      	cbnz	r3, 8003dc0 <secondRoutine+0x30>
			flag.lcdRefreshRequest = 1;
 8003db6:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <secondRoutine+0x3c>)
 8003db8:	7813      	ldrb	r3, [r2, #0]
 8003dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dbe:	7013      	strb	r3, [r2, #0]
	}
}
 8003dc0:	bd38      	pop	{r3, r4, r5, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000130 	.word	0x20000130
 8003dc8:	20000162 	.word	0x20000162
 8003dcc:	20000b4c 	.word	0x20000b4c

08003dd0 <checkNodeConfigure>:

uint8_t checkNodeConfigure()
{
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr
 8003dd0:	4a11      	ldr	r2, [pc, #68]	; (8003e18 <checkNodeConfigure+0x48>)
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <checkNodeConfigure+0x4c>)
			&& settings.sf == nodeSettings.sf
			&& settings.realFrequency == nodeSettings.realFrequency
			&& settings.preamble == nodeSettings.preamble
			&& settings.syncWord == nodeSettings.sw
			&& selectedNode == nodeSettings.nodeNum);
 8003dd4:	7bd0      	ldrb	r0, [r2, #15]
 8003dd6:	7b59      	ldrb	r1, [r3, #13]
 8003dd8:	4288      	cmp	r0, r1
 8003dda:	d11b      	bne.n	8003e14 <checkNodeConfigure+0x44>
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr
 8003ddc:	7c10      	ldrb	r0, [r2, #16]
 8003dde:	7ad9      	ldrb	r1, [r3, #11]
 8003de0:	4288      	cmp	r0, r1
 8003de2:	d117      	bne.n	8003e14 <checkNodeConfigure+0x44>
			&& settings.sf == nodeSettings.sf
 8003de4:	7b90      	ldrb	r0, [r2, #14]
 8003de6:	7b19      	ldrb	r1, [r3, #12]
 8003de8:	4288      	cmp	r0, r1
 8003dea:	d113      	bne.n	8003e14 <checkNodeConfigure+0x44>
			&& settings.realFrequency == nodeSettings.realFrequency
 8003dec:	6810      	ldr	r0, [r2, #0]
 8003dee:	6819      	ldr	r1, [r3, #0]
 8003df0:	4288      	cmp	r0, r1
 8003df2:	d10f      	bne.n	8003e14 <checkNodeConfigure+0x44>
			&& settings.preamble == nodeSettings.preamble
 8003df4:	8990      	ldrh	r0, [r2, #12]
 8003df6:	8919      	ldrh	r1, [r3, #8]
 8003df8:	4288      	cmp	r0, r1
 8003dfa:	d10b      	bne.n	8003e14 <checkNodeConfigure+0x44>
			&& settings.syncWord == nodeSettings.sw
 8003dfc:	7c51      	ldrb	r1, [r2, #17]
 8003dfe:	7b9a      	ldrb	r2, [r3, #14]
 8003e00:	4291      	cmp	r1, r2
 8003e02:	d107      	bne.n	8003e14 <checkNodeConfigure+0x44>
			&& selectedNode == nodeSettings.nodeNum);
 8003e04:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <checkNodeConfigure+0x50>)
 8003e06:	7a9b      	ldrb	r3, [r3, #10]
 8003e08:	f9b2 0000 	ldrsh.w	r0, [r2]
 8003e0c:	1ac3      	subs	r3, r0, r3
 8003e0e:	4258      	negs	r0, r3
 8003e10:	4158      	adcs	r0, r3
 8003e12:	4770      	bx	lr
 8003e14:	2000      	movs	r0, #0
}
 8003e16:	4770      	bx	lr
 8003e18:	20000a78 	.word	0x20000a78
 8003e1c:	20000c74 	.word	0x20000c74
 8003e20:	20000166 	.word	0x20000166

08003e24 <nodeConfigureRoutine>:

void nodeConfigureRoutine()
{
 8003e24:	b538      	push	{r3, r4, r5, lr}
	if (HAL_GetTick() - configTime > 500 && configStep == 1)
 8003e26:	f001 fd9f 	bl	8005968 <HAL_GetTick>
 8003e2a:	4c16      	ldr	r4, [pc, #88]	; (8003e84 <nodeConfigureRoutine+0x60>)
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	1a80      	subs	r0, r0, r2
 8003e30:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003e34:	d910      	bls.n	8003e58 <nodeConfigureRoutine+0x34>
 8003e36:	4d14      	ldr	r5, [pc, #80]	; (8003e88 <nodeConfigureRoutine+0x64>)
 8003e38:	782a      	ldrb	r2, [r5, #0]
 8003e3a:	2a01      	cmp	r2, #1
 8003e3c:	d10c      	bne.n	8003e58 <nodeConfigureRoutine+0x34>
	{
		clearStrings();
 8003e3e:	f7fd fc41 	bl	80016c4 <clearStrings>
		if (checkNodeConfigure())
 8003e42:	f7ff ffc5 	bl	8003dd0 <checkNodeConfigure>
 8003e46:	b1d8      	cbz	r0, 8003e80 <nodeConfigureRoutine+0x5c>
		{
			sprintf(string[0], "Sucess");
 8003e48:	4910      	ldr	r1, [pc, #64]	; (8003e8c <nodeConfigureRoutine+0x68>)
		}
		else
		{
			sprintf(string[0], "Failure");
 8003e4a:	4811      	ldr	r0, [pc, #68]	; (8003e90 <nodeConfigureRoutine+0x6c>)
 8003e4c:	f004 fbe8 	bl	8008620 <strcpy>
		}
		updateLcd();
 8003e50:	f7fd fc4a 	bl	80016e8 <updateLcd>
		configStep = 2;
 8003e54:	2302      	movs	r3, #2
 8003e56:	702b      	strb	r3, [r5, #0]
	}

	if (HAL_GetTick() - configTime > 1500 && configStep == 2)
 8003e58:	f001 fd86 	bl	8005968 <HAL_GetTick>
 8003e5c:	6823      	ldr	r3, [r4, #0]
 8003e5e:	1ac0      	subs	r0, r0, r3
 8003e60:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003e64:	4298      	cmp	r0, r3
 8003e66:	d90a      	bls.n	8003e7e <nodeConfigureRoutine+0x5a>
 8003e68:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <nodeConfigureRoutine+0x64>)
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	2a02      	cmp	r2, #2
 8003e6e:	d106      	bne.n	8003e7e <nodeConfigureRoutine+0x5a>
	{
		configStep = 0;
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
		flag.lcdRefreshRequest = 1;
 8003e74:	4a07      	ldr	r2, [pc, #28]	; (8003e94 <nodeConfigureRoutine+0x70>)
 8003e76:	7813      	ldrb	r3, [r2, #0]
 8003e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e7c:	7013      	strb	r3, [r2, #0]
	}
}
 8003e7e:	bd38      	pop	{r3, r4, r5, pc}
			sprintf(string[0], "Failure");
 8003e80:	4905      	ldr	r1, [pc, #20]	; (8003e98 <nodeConfigureRoutine+0x74>)
 8003e82:	e7e2      	b.n	8003e4a <nodeConfigureRoutine+0x26>
 8003e84:	20000cdc 	.word	0x20000cdc
 8003e88:	20000b99 	.word	0x20000b99
 8003e8c:	0800afc2 	.word	0x0800afc2
 8003e90:	20000168 	.word	0x20000168
 8003e94:	20000b4c 	.word	0x20000b4c
 8003e98:	0800afc9 	.word	0x0800afc9

08003e9c <RadioInit>:

void RadioInit()
{
 8003e9c:	b510      	push	{r4, lr}
	SX127X_dio_t nss;
	SX127X_dio_t reset;
	SX127X_defaultConfig(&myRadio);
 8003e9e:	4c0d      	ldr	r4, [pc, #52]	; (8003ed4 <RadioInit+0x38>)
{
 8003ea0:	b086      	sub	sp, #24
	SX127X_defaultConfig(&myRadio);
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 feee 	bl	8004c84 <SX127X_defaultConfig>
	defaultSettings();
 8003ea8:	f7fd fbd8 	bl	800165c <defaultSettings>

	nss.pin = NSS_Pin;
	nss.port = NSS_GPIO_Port;
	reset.pin = RESET_Pin;
 8003eac:	2208      	movs	r2, #8
	nss.port = NSS_GPIO_Port;
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <RadioInit+0x3c>)
	reset.port = RESET_GPIO_Port;
	SX127X_PortConfig(&myRadio, reset, nss, &hspi1);
 8003eb0:	4620      	mov	r0, r4
	reset.port = RESET_GPIO_Port;
 8003eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
	SX127X_PortConfig(&myRadio, reset, nss, &hspi1);
 8003eb6:	4a09      	ldr	r2, [pc, #36]	; (8003edc <RadioInit+0x40>)
 8003eb8:	e9cd 3200 	strd	r3, r2, [sp]
 8003ebc:	aa06      	add	r2, sp, #24
 8003ebe:	2310      	movs	r3, #16
 8003ec0:	e912 0006 	ldmdb	r2, {r1, r2}
 8003ec4:	f000 fef0 	bl	8004ca8 <SX127X_PortConfig>
	SX127X_init(&myRadio);
 8003ec8:	4620      	mov	r0, r4
}
 8003eca:	b006      	add	sp, #24
 8003ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SX127X_init(&myRadio);
 8003ed0:	f001 b915 	b.w	80050fe <SX127X_init>
 8003ed4:	20000998 	.word	0x20000998
 8003ed8:	40010800 	.word	0x40010800
 8003edc:	20000dec 	.word	0x20000dec

08003ee0 <airCounter>:

void airCounter()
{
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint32_t upTimeMs;
	static uint32_t transmittingTimeMs;
	static uint32_t receivingTimeMs;
	static uint32_t lastTick;

	uint32_t delta = HAL_GetTick() - lastTick;
 8003ee2:	f001 fd41 	bl	8005968 <HAL_GetTick>
 8003ee6:	4d31      	ldr	r5, [pc, #196]	; (8003fac <airCounter+0xcc>)
	upTimeMs += delta;
 8003ee8:	4931      	ldr	r1, [pc, #196]	; (8003fb0 <airCounter+0xd0>)
	uint32_t delta = HAL_GetTick() - lastTick;
 8003eea:	682b      	ldr	r3, [r5, #0]
	upTimeMs += delta;
 8003eec:	680e      	ldr	r6, [r1, #0]
	uint32_t delta = HAL_GetTick() - lastTick;
 8003eee:	1ac0      	subs	r0, r0, r3
	if (myRadio.signalDetected)
 8003ef0:	4b30      	ldr	r3, [pc, #192]	; (8003fb4 <airCounter+0xd4>)
 8003ef2:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <airCounter+0xd8>)
 8003ef4:	7f1c      	ldrb	r4, [r3, #28]
	upTimeMs += delta;
 8003ef6:	1987      	adds	r7, r0, r6
	if (myRadio.signalDetected)
 8003ef8:	b114      	cbz	r4, 8003f00 <airCounter+0x20>
		receivingTimeMs += delta;
 8003efa:	6814      	ldr	r4, [r2, #0]
 8003efc:	4404      	add	r4, r0
 8003efe:	6014      	str	r4, [r2, #0]
	if (myRadio.status == TX)
 8003f00:	7c1b      	ldrb	r3, [r3, #16]
		transmittingTimeMs += delta;
	upTime += upTimeMs / 1000;
 8003f02:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8003fd0 <airCounter+0xf0>
	if (myRadio.status == TX)
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	4b2c      	ldr	r3, [pc, #176]	; (8003fbc <airCounter+0xdc>)
		transmittingTimeMs += delta;
 8003f0a:	bf02      	ittt	eq
 8003f0c:	681c      	ldreq	r4, [r3, #0]
 8003f0e:	1900      	addeq	r0, r0, r4
 8003f10:	6018      	streq	r0, [r3, #0]
	upTime += upTimeMs / 1000;
 8003f12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f16:	fbb7 f6f0 	udiv	r6, r7, r0
 8003f1a:	f8dc 4000 	ldr.w	r4, [ip]
 8003f1e:	4434      	add	r4, r6
	upTimeMs %= 1000;
 8003f20:	fb00 7616 	mls	r6, r0, r6, r7
	upTime += upTimeMs / 1000;
 8003f24:	f8cc 4000 	str.w	r4, [ip]
	if (receivingTimeMs > 1000)
 8003f28:	f8d2 c000 	ldr.w	ip, [r2]
 8003f2c:	4f24      	ldr	r7, [pc, #144]	; (8003fc0 <airCounter+0xe0>)
 8003f2e:	4584      	cmp	ip, r0
	upTimeMs %= 1000;
 8003f30:	600e      	str	r6, [r1, #0]
	if (receivingTimeMs > 1000)
 8003f32:	d907      	bls.n	8003f44 <airCounter+0x64>
	{
		receivingTime += receivingTimeMs / 1000;
 8003f34:	fbbc f1f0 	udiv	r1, ip, r0
 8003f38:	683e      	ldr	r6, [r7, #0]
 8003f3a:	440e      	add	r6, r1
		receivingTimeMs %= 1000;
 8003f3c:	fb00 c111 	mls	r1, r0, r1, ip
		receivingTime += receivingTimeMs / 1000;
 8003f40:	603e      	str	r6, [r7, #0]
		receivingTimeMs %= 1000;
 8003f42:	6011      	str	r1, [r2, #0]
	}
	if (transmittingTimeMs > 1000)
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	4e1f      	ldr	r6, [pc, #124]	; (8003fc4 <airCounter+0xe4>)
 8003f48:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003f4c:	d909      	bls.n	8003f62 <airCounter+0x82>
	{
		transmittingTime += transmittingTimeMs / 1000;
 8003f4e:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8003f52:	fbb1 f2fc 	udiv	r2, r1, ip
 8003f56:	6830      	ldr	r0, [r6, #0]
 8003f58:	4410      	add	r0, r2
		transmittingTimeMs %= 1000;
 8003f5a:	fb0c 1212 	mls	r2, ip, r2, r1
		transmittingTime += transmittingTimeMs / 1000;
 8003f5e:	6030      	str	r0, [r6, #0]
		transmittingTimeMs %= 1000;
 8003f60:	601a      	str	r2, [r3, #0]
	}
	airUseForRx =
			(receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 8003f62:	6838      	ldr	r0, [r7, #0]
 8003f64:	b1e8      	cbz	r0, 8003fa2 <airCounter+0xc2>
 8003f66:	f7fc fd97 	bl	8000a98 <__aeabi_ui2f>
 8003f6a:	4607      	mov	r7, r0
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f7fc fd93 	bl	8000a98 <__aeabi_ui2f>
 8003f72:	4601      	mov	r1, r0
 8003f74:	4638      	mov	r0, r7
 8003f76:	f7fc fe9b 	bl	8000cb0 <__aeabi_fdiv>
	airUseForRx =
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <airCounter+0xe8>)
 8003f7c:	6018      	str	r0, [r3, #0]
	airUseForTx =
			(transmittingTime == 0) ?
 8003f7e:	6830      	ldr	r0, [r6, #0]
					0 : (float) transmittingTime / (float) upTime;
 8003f80:	b188      	cbz	r0, 8003fa6 <airCounter+0xc6>
 8003f82:	f7fc fd89 	bl	8000a98 <__aeabi_ui2f>
 8003f86:	4606      	mov	r6, r0
 8003f88:	4620      	mov	r0, r4
 8003f8a:	f7fc fd85 	bl	8000a98 <__aeabi_ui2f>
 8003f8e:	4601      	mov	r1, r0
 8003f90:	4630      	mov	r0, r6
 8003f92:	f7fc fe8d 	bl	8000cb0 <__aeabi_fdiv>
	airUseForTx =
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <airCounter+0xec>)
 8003f98:	6018      	str	r0, [r3, #0]
	lastTick = HAL_GetTick();
 8003f9a:	f001 fce5 	bl	8005968 <HAL_GetTick>
 8003f9e:	6028      	str	r0, [r5, #0]

}
 8003fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e7e9      	b.n	8003f7a <airCounter+0x9a>
					0 : (float) transmittingTime / (float) upTime;
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	e7f5      	b.n	8003f96 <airCounter+0xb6>
 8003faa:	bf00      	nop
 8003fac:	20000138 	.word	0x20000138
 8003fb0:	2000036c 	.word	0x2000036c
 8003fb4:	20000998 	.word	0x20000998
 8003fb8:	2000015c 	.word	0x2000015c
 8003fbc:	20000368 	.word	0x20000368
 8003fc0:	20000a74 	.word	0x20000a74
 8003fc4:	200015c4 	.word	0x200015c4
 8003fc8:	20000b94 	.word	0x20000b94
 8003fcc:	20000b44 	.word	0x20000b44
 8003fd0:	20000b40 	.word	0x20000b40

08003fd4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003fd4:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct =
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8003fd6:	2214      	movs	r2, #20
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8003fd8:	2400      	movs	r4, #0
{
 8003fda:	b094      	sub	sp, #80	; 0x50
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8003fdc:	4621      	mov	r1, r4
 8003fde:	eb0d 0002 	add.w	r0, sp, r2
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8003fe2:	940d      	str	r4, [sp, #52]	; 0x34
 8003fe4:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8003fe6:	f004 fa65 	bl	80084b4 <memset>
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8003fea:	2210      	movs	r2, #16
 8003fec:	4621      	mov	r1, r4
 8003fee:	a801      	add	r0, sp, #4
 8003ff0:	f004 fa60 	bl	80084b4 <memset>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ff4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ff8:	2209      	movs	r2, #9
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003ffa:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ffc:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ffe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004002:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004006:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004008:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800400c:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800400e:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004010:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004012:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004014:	f002 ff54 	bl	8006ec0 <HAL_RCC_OscConfig>
 8004018:	b100      	cbz	r0, 800401c <SystemClock_Config+0x48>
 */
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */

	while (1)
 800401a:	e7fe      	b.n	800401a <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800401c:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800401e:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004022:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004026:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004028:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800402c:	4621      	mov	r1, r4
 800402e:	a805      	add	r0, sp, #20
 8004030:	f003 f91c 	bl	800726c <HAL_RCC_ClockConfig>
 8004034:	b100      	cbz	r0, 8004038 <SystemClock_Config+0x64>
	while (1)
 8004036:	e7fe      	b.n	8004036 <SystemClock_Config+0x62>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800403c:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800403e:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004040:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004042:	f003 f9cf 	bl	80073e4 <HAL_RCCEx_PeriphCLKConfig>
 8004046:	b100      	cbz	r0, 800404a <SystemClock_Config+0x76>
	while (1)
 8004048:	e7fe      	b.n	8004048 <SystemClock_Config+0x74>
}
 800404a:	b014      	add	sp, #80	; 0x50
 800404c:	bd10      	pop	{r4, pc}
	...

08004050 <main>:
{
 8004050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004054:	4d91      	ldr	r5, [pc, #580]	; (800429c <main+0x24c>)
{
 8004056:	b093      	sub	sp, #76	; 0x4c
	HAL_Init();
 8004058:	f001 fc68 	bl	800592c <HAL_Init>
	SystemClock_Config();
 800405c:	f7ff ffba 	bl	8003fd4 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct =
 8004060:	2210      	movs	r2, #16
 8004062:	2100      	movs	r1, #0
 8004064:	a80b      	add	r0, sp, #44	; 0x2c
 8004066:	f004 fa25 	bl	80084b4 <memset>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800406a:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 800406c:	2200      	movs	r2, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800406e:	f043 0320 	orr.w	r3, r3, #32
 8004072:	61ab      	str	r3, [r5, #24]
 8004074:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 8004076:	f44f 718c 	mov.w	r1, #280	; 0x118
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800407a:	f003 0320 	and.w	r3, r3, #32
 800407e:	9306      	str	r3, [sp, #24]
 8004080:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004082:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin(GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 8004084:	4886      	ldr	r0, [pc, #536]	; (80042a0 <main+0x250>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	61ab      	str	r3, [r5, #24]
 800408c:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800408e:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	9307      	str	r3, [sp, #28]
 8004096:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004098:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800409a:	2601      	movs	r6, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800409c:	f043 0308 	orr.w	r3, r3, #8
 80040a0:	61ab      	str	r3, [r5, #24]
 80040a2:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040a4:	2703      	movs	r7, #3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	9308      	str	r3, [sp, #32]
 80040ac:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin(GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 80040ae:	f002 fa75 	bl	800659c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, CS_Pin | CD_Pin | BUZZER_Pin, GPIO_PIN_RESET);
 80040b2:	2200      	movs	r2, #0
 80040b4:	f245 0120 	movw	r1, #20512	; 0x5020
 80040b8:	487a      	ldr	r0, [pc, #488]	; (80042a4 <main+0x254>)
 80040ba:	f002 fa6f 	bl	800659c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040be:	f44f 738c 	mov.w	r3, #280	; 0x118
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c2:	4877      	ldr	r0, [pc, #476]	; (80042a0 <main+0x250>)
 80040c4:	a90b      	add	r1, sp, #44	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040c6:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040ca:	e9cd 470d 	strd	r4, r7, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ce:	f002 f983 	bl	80063d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80040d2:	f640 4c06 	movw	ip, #3078	; 0xc06
 80040d6:	4b74      	ldr	r3, [pc, #464]	; (80042a8 <main+0x258>)
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d8:	4872      	ldr	r0, [pc, #456]	; (80042a4 <main+0x254>)
 80040da:	a90b      	add	r1, sp, #44	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80040dc:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e0:	960d      	str	r6, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e2:	f002 f979 	bl	80063d8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_Pin | CD_Pin | BUZZER_Pin;
 80040e6:	f245 0320 	movw	r3, #20512	; 0x5020
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ea:	486e      	ldr	r0, [pc, #440]	; (80042a4 <main+0x254>)
 80040ec:	a90b      	add	r1, sp, #44	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040ee:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040f2:	e9cd 470d 	strd	r4, r7, [sp, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f6:	f002 f96f 	bl	80063d8 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80040fa:	4622      	mov	r2, r4
 80040fc:	4621      	mov	r1, r4
 80040fe:	2007      	movs	r0, #7
 8004100:	f001 fe84 	bl	8005e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004104:	2007      	movs	r0, #7
 8004106:	f001 feb3 	bl	8005e70 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800410a:	4622      	mov	r2, r4
 800410c:	4621      	mov	r1, r4
 800410e:	2008      	movs	r0, #8
 8004110:	f001 fe7c 	bl	8005e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004114:	2008      	movs	r0, #8
 8004116:	f001 feab 	bl	8005e70 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800411a:	4622      	mov	r2, r4
 800411c:	4639      	mov	r1, r7
 800411e:	2028      	movs	r0, #40	; 0x28
 8004120:	f001 fe74 	bl	8005e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004124:	2028      	movs	r0, #40	; 0x28
 8004126:	f001 fea3 	bl	8005e70 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 800412a:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 800412c:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 800412e:	4333      	orrs	r3, r6
 8004130:	616b      	str	r3, [r5, #20]
 8004132:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8004134:	2102      	movs	r1, #2
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004136:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8004138:	2011      	movs	r0, #17
	__HAL_RCC_DMA1_CLK_ENABLE();
 800413a:	9305      	str	r3, [sp, #20]
 800413c:	9b05      	ldr	r3, [sp, #20]
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 800413e:	f001 fe65 	bl	8005e0c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004142:	2011      	movs	r0, #17
 8004144:	f001 fe94 	bl	8005e70 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 8004148:	4858      	ldr	r0, [pc, #352]	; (80042ac <main+0x25c>)
	hi2c1.Init.ClockSpeed = 400000;
 800414a:	f8df e194 	ldr.w	lr, [pc, #404]	; 80042e0 <main+0x290>
 800414e:	4b58      	ldr	r3, [pc, #352]	; (80042b0 <main+0x260>)
	hi2c1.Init.OwnAddress1 = 0;
 8004150:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hi2c1.Init.ClockSpeed = 400000;
 8004154:	e9c0 e300 	strd	lr, r3, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004158:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800415c:	e9c0 4406 	strd	r4, r4, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004160:	e9c0 3404 	strd	r3, r4, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004164:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004166:	f002 fc07 	bl	8006978 <HAL_I2C_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	b100      	cbz	r0, 8004170 <main+0x120>
	while (1)
 800416e:	e7fe      	b.n	800416e <main+0x11e>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004170:	f44f 7882 	mov.w	r8, #260	; 0x104
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004174:	f44f 7700 	mov.w	r7, #512	; 0x200
 8004178:	2508      	movs	r5, #8
	hspi1.Init.CRCPolynomial = 10;
 800417a:	240a      	movs	r4, #10
	hspi1.Instance = SPI1;
 800417c:	484d      	ldr	r0, [pc, #308]	; (80042b4 <main+0x264>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800417e:	4a4e      	ldr	r2, [pc, #312]	; (80042b8 <main+0x268>)
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004180:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004184:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004188:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800418c:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800418e:	e9c0 2800 	strd	r2, r8, [r0]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004192:	e9c0 7506 	strd	r7, r5, [r0, #24]
	hspi1.Init.CRCPolynomial = 10;
 8004196:	62c4      	str	r4, [r0, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004198:	f003 fa00 	bl	800759c <HAL_SPI_Init>
 800419c:	4603      	mov	r3, r0
 800419e:	b100      	cbz	r0, 80041a2 <main+0x152>
	while (1)
 80041a0:	e7fe      	b.n	80041a0 <main+0x150>
	hspi2.Instance = SPI2;
 80041a2:	4846      	ldr	r0, [pc, #280]	; (80042bc <main+0x26c>)
 80041a4:	4a46      	ldr	r2, [pc, #280]	; (80042c0 <main+0x270>)
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80041a6:	e9c0 7506 	strd	r7, r5, [r0, #24]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80041aa:	e9c0 2800 	strd	r2, r8, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80041ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80041b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80041b6:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.CRCPolynomial = 10;
 80041ba:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80041be:	f003 f9ed 	bl	800759c <HAL_SPI_Init>
 80041c2:	4605      	mov	r5, r0
 80041c4:	b100      	cbz	r0, 80041c8 <main+0x178>
	while (1)
 80041c6:	e7fe      	b.n	80041c6 <main+0x176>
	TIM_OC_InitTypeDef sConfigOC =
 80041c8:	4601      	mov	r1, r0
	TIM_MasterConfigTypeDef sMasterConfig =
 80041ca:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC =
 80041ce:	221c      	movs	r2, #28
 80041d0:	a80b      	add	r0, sp, #44	; 0x2c
 80041d2:	f004 f96f 	bl	80084b4 <memset>
	htim2.Instance = TIM2;
 80041d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041da:	4c3a      	ldr	r4, [pc, #232]	; (80042c4 <main+0x274>)
	htim2.Init.Prescaler = 0;
 80041dc:	e9c4 3500 	strd	r3, r5, [r4]
	htim2.Init.Period = 89;
 80041e0:	2359      	movs	r3, #89	; 0x59
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041e2:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041e8:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ea:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80041ec:	f003 fcfa 	bl	8007be4 <HAL_TIM_PWM_Init>
 80041f0:	b100      	cbz	r0, 80041f4 <main+0x1a4>
	while (1)
 80041f2:	e7fe      	b.n	80041f2 <main+0x1a2>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041f4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80041f8:	a909      	add	r1, sp, #36	; 0x24
 80041fa:	4620      	mov	r0, r4
 80041fc:	f003 fe6a 	bl	8007ed4 <HAL_TIMEx_MasterConfigSynchronization>
 8004200:	b100      	cbz	r0, 8004204 <main+0x1b4>
	while (1)
 8004202:	e7fe      	b.n	8004202 <main+0x1b2>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004204:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004206:	900d      	str	r0, [sp, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8004208:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800420c:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800420e:	2204      	movs	r2, #4
 8004210:	4620      	mov	r0, r4
 8004212:	a90b      	add	r1, sp, #44	; 0x2c
 8004214:	f003 fd3e 	bl	8007c94 <HAL_TIM_PWM_ConfigChannel>
 8004218:	4605      	mov	r5, r0
 800421a:	b100      	cbz	r0, 800421e <main+0x1ce>
	while (1)
 800421c:	e7fe      	b.n	800421c <main+0x1cc>
	HAL_TIM_MspPostInit(&htim2);
 800421e:	4620      	mov	r0, r4
 8004220:	f000 fbfa 	bl	8004a18 <HAL_TIM_MspPostInit>
	huart1.Init.BaudRate = 9600;
 8004224:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart1.Instance = USART1;
 8004228:	4827      	ldr	r0, [pc, #156]	; (80042c8 <main+0x278>)
	huart1.Init.BaudRate = 9600;
 800422a:	4f28      	ldr	r7, [pc, #160]	; (80042cc <main+0x27c>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 800422c:	e9c0 5502 	strd	r5, r5, [r0, #8]
	huart1.Init.BaudRate = 9600;
 8004230:	e9c0 7300 	strd	r7, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004234:	230c      	movs	r3, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 8004236:	6105      	str	r5, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004238:	e9c0 3505 	strd	r3, r5, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800423c:	61c5      	str	r5, [r0, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800423e:	f003 feef 	bl	8008020 <HAL_UART_Init>
 8004242:	b100      	cbz	r0, 8004246 <main+0x1f6>
	while (1)
 8004244:	e7fe      	b.n	8004244 <main+0x1f4>
	hadc1.Instance = ADC1;
 8004246:	4c22      	ldr	r4, [pc, #136]	; (80042d0 <main+0x280>)
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <main+0x284>)
	ADC_ChannelConfTypeDef sConfig =
 800424a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	hadc1.Instance = ADC1;
 800424e:	6023      	str	r3, [r4, #0]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004250:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	ADC_ChannelConfTypeDef sConfig =
 8004254:	900d      	str	r0, [sp, #52]	; 0x34
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004256:	60a0      	str	r0, [r4, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004258:	7520      	strb	r0, [r4, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800425a:	6060      	str	r0, [r4, #4]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800425c:	4620      	mov	r0, r4
	hadc1.Init.ContinuousConvMode = ENABLE;
 800425e:	7326      	strb	r6, [r4, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004260:	61e3      	str	r3, [r4, #28]
	hadc1.Init.NbrOfConversion = 1;
 8004262:	6126      	str	r6, [r4, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004264:	f001 fd42 	bl	8005cec <HAL_ADC_Init>
 8004268:	b100      	cbz	r0, 800426c <main+0x21c>
	while (1)
 800426a:	e7fe      	b.n	800426a <main+0x21a>
	sConfig.Channel = ADC_CHANNEL_2;
 800426c:	2302      	movs	r3, #2
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800426e:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004272:	2307      	movs	r3, #7
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004274:	4620      	mov	r0, r4
 8004276:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004278:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800427a:	f001 fbc9 	bl	8005a10 <HAL_ADC_ConfigChannel>
 800427e:	b100      	cbz	r0, 8004282 <main+0x232>
	while (1)
 8004280:	e7fe      	b.n	8004280 <main+0x230>
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004282:	2306      	movs	r3, #6
	hiwdg.Instance = IWDG;
 8004284:	4814      	ldr	r0, [pc, #80]	; (80042d8 <main+0x288>)
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004286:	4c15      	ldr	r4, [pc, #84]	; (80042dc <main+0x28c>)
 8004288:	e9c0 4300 	strd	r4, r3, [r0]
	hiwdg.Init.Reload = 4095;
 800428c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004290:	6083      	str	r3, [r0, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004292:	f002 fde7 	bl	8006e64 <HAL_IWDG_Init>
 8004296:	b328      	cbz	r0, 80042e4 <main+0x294>
	while (1)
 8004298:	e7fe      	b.n	8004298 <main+0x248>
 800429a:	bf00      	nop
 800429c:	40021000 	.word	0x40021000
 80042a0:	40010800 	.word	0x40010800
 80042a4:	40010c00 	.word	0x40010c00
 80042a8:	10310000 	.word	0x10310000
 80042ac:	20000ae0 	.word	0x20000ae0
 80042b0:	00061a80 	.word	0x00061a80
 80042b4:	20000dec 	.word	0x20000dec
 80042b8:	40013000 	.word	0x40013000
 80042bc:	20000a1c 	.word	0x20000a1c
 80042c0:	40003800 	.word	0x40003800
 80042c4:	20000e44 	.word	0x20000e44
 80042c8:	20000c30 	.word	0x20000c30
 80042cc:	40013800 	.word	0x40013800
 80042d0:	20000b9c 	.word	0x20000b9c
 80042d4:	40012400 	.word	0x40012400
 80042d8:	20000b34 	.word	0x20000b34
 80042dc:	40003000 	.word	0x40003000
 80042e0:	40005400 	.word	0x40005400
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80042e4:	4a7d      	ldr	r2, [pc, #500]	; (80044dc <main+0x48c>)
	HAL_Delay(300);
 80042e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80042ea:	6853      	ldr	r3, [r2, #4]
	UC1609_Init(&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 80042ec:	2400      	movs	r4, #0
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80042ee:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80042f2:	6053      	str	r3, [r2, #4]
	HAL_Delay(300);
 80042f4:	f001 fb3e 	bl	8005974 <HAL_Delay>
	ssd1306_Init();
 80042f8:	f000 f938 	bl	800456c <ssd1306_Init>
	UC1609_Init(&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 80042fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	4b77      	ldr	r3, [pc, #476]	; (80044e0 <main+0x490>)
 8004304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004308:	4619      	mov	r1, r3
 800430a:	4876      	ldr	r0, [pc, #472]	; (80044e4 <main+0x494>)
 800430c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004310:	f7fc ff2c 	bl	800116c <UC1609_Init>
	wsInit(&htim2, TIM_CHANNEL_2);
 8004314:	2104      	movs	r1, #4
 8004316:	4874      	ldr	r0, [pc, #464]	; (80044e8 <main+0x498>)
 8004318:	f001 fab6 	bl	8005888 <wsInit>
	uartInit(&huart1);
 800431c:	4873      	ldr	r0, [pc, #460]	; (80044ec <main+0x49c>)
 800431e:	f000 ff4b 	bl	80051b8 <uartInit>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc, 1);
 8004322:	2201      	movs	r2, #1
 8004324:	4972      	ldr	r1, [pc, #456]	; (80044f0 <main+0x4a0>)
 8004326:	4873      	ldr	r0, [pc, #460]	; (80044f4 <main+0x4a4>)
 8004328:	f001 fc2c 	bl	8005b84 <HAL_ADC_Start_DMA>
	RadioInit();
 800432c:	f7ff fdb6 	bl	8003e9c <RadioInit>
	initLegalFreq();
 8004330:	f7ff f9e2 	bl	80036f8 <initLegalFreq>
	memset(nodes, 0, sizeof(nodes));
 8004334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004338:	4621      	mov	r1, r4
 800433a:	486f      	ldr	r0, [pc, #444]	; (80044f8 <main+0x4a8>)
 800433c:	f004 f8ba 	bl	80084b4 <memset>
	loadNodeData();
 8004340:	f7fd f958 	bl	80015f4 <loadNodeData>
	defaultNodeSettings();
 8004344:	f7ff f9c0 	bl	80036c8 <defaultNodeSettings>
	ShowLogo();
 8004348:	f7fd feaa 	bl	80020a0 <ShowLogo>
	clearStrings();
 800434c:	f7fd f9ba 	bl	80016c4 <clearStrings>
	if (tryLoadSettings() == 1)
 8004350:	f7fd fa14 	bl	800177c <tryLoadSettings>
 8004354:	2800      	cmp	r0, #0
 8004356:	f000 80b6 	beq.w	80044c6 <main+0x476>
		sprintf(string[0], "Settings loaded");
 800435a:	4968      	ldr	r1, [pc, #416]	; (80044fc <main+0x4ac>)
 800435c:	4868      	ldr	r0, [pc, #416]	; (8004500 <main+0x4b0>)
 800435e:	f004 f95f 	bl	8008620 <strcpy>
		sprintf(string[1], "from flash");
 8004362:	4968      	ldr	r1, [pc, #416]	; (8004504 <main+0x4b4>)
 8004364:	4868      	ldr	r0, [pc, #416]	; (8004508 <main+0x4b8>)
	flag.lcdRefreshRequest = 1;
 8004366:	4c69      	ldr	r4, [pc, #420]	; (800450c <main+0x4bc>)
		sprintf(string[2], "Using defaults");
 8004368:	f004 f95a 	bl	8008620 <strcpy>
	updateLcd();
 800436c:	f7fd f9bc 	bl	80016e8 <updateLcd>
	HAL_Delay(1000);
 8004370:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004374:	f001 fafe 	bl	8005974 <HAL_Delay>
	flag.lcdRefreshRequest = 1;
 8004378:	7823      	ldrb	r3, [r4, #0]
	myRadio.alwaysRX = true;   //Always listen for AIR
 800437a:	4d65      	ldr	r5, [pc, #404]	; (8004510 <main+0x4c0>)
	flag.lcdRefreshRequest = 1;
 800437c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004380:	7023      	strb	r3, [r4, #0]
	myRadio.alwaysRX = true;   //Always listen for AIR
 8004382:	2301      	movs	r3, #1
	if (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 8004384:	2104      	movs	r1, #4
 8004386:	4856      	ldr	r0, [pc, #344]	; (80044e0 <main+0x490>)
	myRadio.alwaysRX = true;   //Always listen for AIR
 8004388:	73eb      	strb	r3, [r5, #15]
	if (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 800438a:	f002 f901 	bl	8006590 <HAL_GPIO_ReadPin>
 800438e:	4e61      	ldr	r6, [pc, #388]	; (8004514 <main+0x4c4>)
 8004390:	b908      	cbnz	r0, 8004396 <main+0x346>
		screenMode = smModeSelect;
 8004392:	231e      	movs	r3, #30
 8004394:	7033      	strb	r3, [r6, #0]
		float x = sin(SX127X_getRandom(&myRadio));
 8004396:	4f5e      	ldr	r7, [pc, #376]	; (8004510 <main+0x4c0>)
		printf("%d",(int)x);
 8004398:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8004538 <main+0x4e8>
		HAL_IWDG_Refresh(&hiwdg);
 800439c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 800453c <main+0x4ec>
		float x = sin(SX127X_getRandom(&myRadio));
 80043a0:	4638      	mov	r0, r7
 80043a2:	f000 fea9 	bl	80050f8 <SX127X_getRandom>
 80043a6:	f7fc f947 	bl	8000638 <__aeabi_ui2d>
 80043aa:	f005 fa2d 	bl	8009808 <sin>
 80043ae:	f7fc fa6d 	bl	800088c <__aeabi_d2f>
		printf("%d",(int)x);
 80043b2:	f7fc fd8f 	bl	8000ed4 <__aeabi_f2iz>
 80043b6:	4601      	mov	r1, r0
 80043b8:	4640      	mov	r0, r8
 80043ba:	f004 f883 	bl	80084c4 <iprintf>
		HAL_IWDG_Refresh(&hiwdg);
 80043be:	4648      	mov	r0, r9
 80043c0:	f002 fd77 	bl	8006eb2 <HAL_IWDG_Refresh>
		blinkProvider = HAL_GetTick() % 1000 > 500;
 80043c4:	f001 fad0 	bl	8005968 <HAL_GetTick>
 80043c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043cc:	fbb0 f2f3 	udiv	r2, r0, r3
 80043d0:	fb02 0313 	mls	r3, r2, r3, r0
 80043d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043d8:	bf94      	ite	ls
 80043da:	2300      	movls	r3, #0
 80043dc:	2301      	movhi	r3, #1
 80043de:	4a4e      	ldr	r2, [pc, #312]	; (8004518 <main+0x4c8>)
 80043e0:	7013      	strb	r3, [r2, #0]
		fastBlinkProvider = HAL_GetTick() % 70 > 35;
 80043e2:	f001 fac1 	bl	8005968 <HAL_GetTick>
 80043e6:	2346      	movs	r3, #70	; 0x46
 80043e8:	fbb0 f2f3 	udiv	r2, r0, r3
 80043ec:	fb02 0313 	mls	r3, r2, r3, r0
 80043f0:	2b23      	cmp	r3, #35	; 0x23
 80043f2:	bf94      	ite	ls
 80043f4:	2300      	movls	r3, #0
 80043f6:	2301      	movhi	r3, #1
 80043f8:	4a48      	ldr	r2, [pc, #288]	; (800451c <main+0x4cc>)
 80043fa:	7013      	strb	r3, [r2, #0]
		backButtonHoldRoutine();
 80043fc:	f7ff fc7e 	bl	8003cfc <backButtonHoldRoutine>
		halfSecondRoutine();
 8004400:	f7ff fca4 	bl	8003d4c <halfSecondRoutine>
		secondRoutine();
 8004404:	f7ff fcc4 	bl	8003d90 <secondRoutine>
		alarmRoutine();
 8004408:	f7fd fc98 	bl	8001d3c <alarmRoutine>
		ledRoutine();
 800440c:	f7fd fdea 	bl	8001fe4 <ledRoutine>
		airCounter();
 8004410:	f7ff fd66 	bl	8003ee0 <airCounter>
		NetRoutine(&netHandler);
 8004414:	4842      	ldr	r0, [pc, #264]	; (8004520 <main+0x4d0>)
 8004416:	f7fc fdf9 	bl	800100c <NetRoutine>
		SX127X_Routine(&myRadio);
 800441a:	4638      	mov	r0, r7
 800441c:	f000 fe0a 	bl	8005034 <SX127X_Routine>
		if (flag.lcdRefreshRequest)
 8004420:	7823      	ldrb	r3, [r4, #0]
 8004422:	0659      	lsls	r1, r3, #25
 8004424:	d504      	bpl.n	8004430 <main+0x3e0>
			flag.lcdRefreshRequest = 0;
 8004426:	f36f 1386 	bfc	r3, #6, #1
 800442a:	7023      	strb	r3, [r4, #0]
			lcdRoutine();
 800442c:	f7fd ff10 	bl	8002250 <lcdRoutine>
		if (myRadio.readBytes)
 8004430:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
 8004434:	b120      	cbz	r0, 8004440 <main+0x3f0>
			handleMessage(myRadio.readBytes);
 8004436:	f7fd fb23 	bl	8001a80 <handleMessage>
			myRadio.readBytes = 0;
 800443a:	2300      	movs	r3, #0
 800443c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		if (flag.encDec)
 8004440:	7823      	ldrb	r3, [r4, #0]
 8004442:	079a      	lsls	r2, r3, #30
 8004444:	d504      	bpl.n	8004450 <main+0x400>
			flag.encDec = 0;
 8004446:	f36f 0341 	bfc	r3, #1, #1
 800444a:	7023      	strb	r3, [r4, #0]
			button_left();
 800444c:	f7ff fafe 	bl	8003a4c <button_left>
		if (flag.encInc)
 8004450:	7823      	ldrb	r3, [r4, #0]
 8004452:	07d8      	lsls	r0, r3, #31
 8004454:	d504      	bpl.n	8004460 <main+0x410>
			flag.encInc = 0;
 8004456:	f36f 0300 	bfc	r3, #0, #1
 800445a:	7023      	strb	r3, [r4, #0]
			button_right();
 800445c:	f7ff f9a2 	bl	80037a4 <button_right>
		if (flag.encOk)
 8004460:	7823      	ldrb	r3, [r4, #0]
 8004462:	0759      	lsls	r1, r3, #29
 8004464:	d504      	bpl.n	8004470 <main+0x420>
			flag.encOk = 0;
 8004466:	f36f 0382 	bfc	r3, #2, #1
 800446a:	7023      	strb	r3, [r4, #0]
			button_ok();
 800446c:	f7fe ffce 	bl	800340c <button_ok>
		if (flag.back == 1)
 8004470:	7823      	ldrb	r3, [r4, #0]
 8004472:	071a      	lsls	r2, r3, #28
 8004474:	d504      	bpl.n	8004480 <main+0x430>
			flag.back = 0;
 8004476:	f36f 03c3 	bfc	r3, #3, #1
 800447a:	7023      	strb	r3, [r4, #0]
			button_back();
 800447c:	f7fd fe90 	bl	80021a0 <button_back>
		if (screenMode == smModeSelect)
 8004480:	7833      	ldrb	r3, [r6, #0]
 8004482:	2b1e      	cmp	r3, #30
 8004484:	d08c      	beq.n	80043a0 <main+0x350>
		if (flag.uartGotMessage)
 8004486:	7863      	ldrb	r3, [r4, #1]
 8004488:	07d8      	lsls	r0, r3, #31
 800448a:	d504      	bpl.n	8004496 <main+0x446>
			flag.uartGotMessage = 0;
 800448c:	f36f 0300 	bfc	r3, #0, #1
 8004490:	7063      	strb	r3, [r4, #1]
			uartReceiveHandler();
 8004492:	f000 fec7 	bl	8005224 <uartReceiveHandler>
		if (flag.saveSettings)
 8004496:	7823      	ldrb	r3, [r4, #0]
 8004498:	06d9      	lsls	r1, r3, #27
 800449a:	d504      	bpl.n	80044a6 <main+0x456>
			flag.saveSettings = 0;
 800449c:	f36f 1304 	bfc	r3, #4, #1
 80044a0:	7023      	strb	r3, [r4, #0]
			saveSettings();
 80044a2:	f7fd f9c5 	bl	8001830 <saveSettings>
		if (flag.sendConfig)
 80044a6:	7823      	ldrb	r3, [r4, #0]
 80044a8:	069a      	lsls	r2, r3, #26
 80044aa:	d504      	bpl.n	80044b6 <main+0x466>
			flag.sendConfig = 0;
 80044ac:	f36f 1345 	bfc	r3, #5, #1
 80044b0:	7023      	strb	r3, [r4, #0]
			sendConfig();
 80044b2:	f001 f8ad 	bl	8005610 <sendConfig>
		if (configStep)
 80044b6:	4b1b      	ldr	r3, [pc, #108]	; (8004524 <main+0x4d4>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f43f af70 	beq.w	80043a0 <main+0x350>
			nodeConfigureRoutine();
 80044c0:	f7ff fcb0 	bl	8003e24 <nodeConfigureRoutine>
 80044c4:	e76c      	b.n	80043a0 <main+0x350>
		sprintf(string[0], "Failed to load");
 80044c6:	4918      	ldr	r1, [pc, #96]	; (8004528 <main+0x4d8>)
 80044c8:	480d      	ldr	r0, [pc, #52]	; (8004500 <main+0x4b0>)
 80044ca:	f004 f8a9 	bl	8008620 <strcpy>
		sprintf(string[1], "settings from flash");
 80044ce:	4917      	ldr	r1, [pc, #92]	; (800452c <main+0x4dc>)
 80044d0:	480d      	ldr	r0, [pc, #52]	; (8004508 <main+0x4b8>)
 80044d2:	f004 f8a5 	bl	8008620 <strcpy>
		sprintf(string[2], "Using defaults");
 80044d6:	4916      	ldr	r1, [pc, #88]	; (8004530 <main+0x4e0>)
 80044d8:	4816      	ldr	r0, [pc, #88]	; (8004534 <main+0x4e4>)
 80044da:	e744      	b.n	8004366 <main+0x316>
 80044dc:	e0042000 	.word	0xe0042000
 80044e0:	40010c00 	.word	0x40010c00
 80044e4:	20000a1c 	.word	0x20000a1c
 80044e8:	20000e44 	.word	0x20000e44
 80044ec:	20000c30 	.word	0x20000c30
 80044f0:	20000c90 	.word	0x20000c90
 80044f4:	20000b9c 	.word	0x20000b9c
 80044f8:	20000ce0 	.word	0x20000ce0
 80044fc:	0800afd1 	.word	0x0800afd1
 8004500:	20000168 	.word	0x20000168
 8004504:	0800aff9 	.word	0x0800aff9
 8004508:	200001a8 	.word	0x200001a8
 800450c:	20000b4c 	.word	0x20000b4c
 8004510:	20000998 	.word	0x20000998
 8004514:	20000162 	.word	0x20000162
 8004518:	20000de8 	.word	0x20000de8
 800451c:	20000b48 	.word	0x20000b48
 8004520:	20000e8c 	.word	0x20000e8c
 8004524:	20000b99 	.word	0x20000b99
 8004528:	0800afe1 	.word	0x0800afe1
 800452c:	0800aff0 	.word	0x0800aff0
 8004530:	0800b004 	.word	0x0800b004
 8004534:	200001e8 	.word	0x200001e8
 8004538:	0800aa7e 	.word	0x0800aa7e
 800453c:	20000b34 	.word	0x20000b34

08004540 <Error_Handler>:
	while (1)
 8004540:	e7fe      	b.n	8004540 <Error_Handler>
	...

08004544 <ssd1306_WriteCommand>:
uint8_t buffer[SSD1306_HEIGHT * SSD1306_WIDTH / 8];
uint16_t cursor = 0;
//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command) {
 8004544:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8004546:	2301      	movs	r3, #1
 8004548:	220a      	movs	r2, #10
 800454a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800454e:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t command) {
 8004552:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8004556:	9200      	str	r2, [sp, #0]
 8004558:	2178      	movs	r1, #120	; 0x78
 800455a:	2200      	movs	r2, #0
 800455c:	4802      	ldr	r0, [pc, #8]	; (8004568 <ssd1306_WriteCommand+0x24>)
 800455e:	f002 fab3 	bl	8006ac8 <HAL_I2C_Mem_Write>
}
 8004562:	b007      	add	sp, #28
 8004564:	f85d fb04 	ldr.w	pc, [sp], #4
 8004568:	20000ae0 	.word	0x20000ae0

0800456c <ssd1306_Init>:

//
//	Initialize the oled screen
//
void ssd1306_Init(void) {
 800456c:	b508      	push	{r3, lr}

	// Wait for the screen to boot
	HAL_Delay(100);
 800456e:	2064      	movs	r0, #100	; 0x64
 8004570:	f001 fa00 	bl	8005974 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8004574:	20ae      	movs	r0, #174	; 0xae
 8004576:	f7ff ffe5 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 800457a:	2020      	movs	r0, #32
 800457c:	f7ff ffe2 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004580:	2010      	movs	r0, #16
 8004582:	f7ff ffdf 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004586:	20b0      	movs	r0, #176	; 0xb0
 8004588:	f7ff ffdc 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800458c:	20c8      	movs	r0, #200	; 0xc8
 800458e:	f7ff ffd9 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8004592:	2000      	movs	r0, #0
 8004594:	f7ff ffd6 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004598:	2010      	movs	r0, #16
 800459a:	f7ff ffd3 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 800459e:	2040      	movs	r0, #64	; 0x40
 80045a0:	f7ff ffd0 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80045a4:	2081      	movs	r0, #129	; 0x81
 80045a6:	f7ff ffcd 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 80045aa:	20ff      	movs	r0, #255	; 0xff
 80045ac:	f7ff ffca 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80045b0:	20a1      	movs	r0, #161	; 0xa1
 80045b2:	f7ff ffc7 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80045b6:	20a6      	movs	r0, #166	; 0xa6
 80045b8:	f7ff ffc4 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 80045bc:	20a8      	movs	r0, #168	; 0xa8
 80045be:	f7ff ffc1 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 80045c2:	203f      	movs	r0, #63	; 0x3f
 80045c4:	f7ff ffbe 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80045c8:	20a4      	movs	r0, #164	; 0xa4
 80045ca:	f7ff ffbb 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80045ce:	20d3      	movs	r0, #211	; 0xd3
 80045d0:	f7ff ffb8 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80045d4:	2000      	movs	r0, #0
 80045d6:	f7ff ffb5 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80045da:	20d5      	movs	r0, #213	; 0xd5
 80045dc:	f7ff ffb2 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80045e0:	20f0      	movs	r0, #240	; 0xf0
 80045e2:	f7ff ffaf 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80045e6:	20d9      	movs	r0, #217	; 0xd9
 80045e8:	f7ff ffac 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80045ec:	2022      	movs	r0, #34	; 0x22
 80045ee:	f7ff ffa9 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80045f2:	20da      	movs	r0, #218	; 0xda
 80045f4:	f7ff ffa6 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80045f8:	2012      	movs	r0, #18
 80045fa:	f7ff ffa3 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80045fe:	20db      	movs	r0, #219	; 0xdb
 8004600:	f7ff ffa0 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004604:	2020      	movs	r0, #32
 8004606:	f7ff ff9d 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800460a:	208d      	movs	r0, #141	; 0x8d
 800460c:	f7ff ff9a 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8004610:	2014      	movs	r0, #20
 8004612:	f7ff ff97 	bl	8004544 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
}
 8004616:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800461a:	20af      	movs	r0, #175	; 0xaf
 800461c:	f7ff bf92 	b.w	8004544 <ssd1306_WriteCommand>

08004620 <ssd1306_GotoXY>:

void ssd1306_GotoXY(int x, int y) {
	cursor = SSD1306_WIDTH * y + x;
 8004620:	4b02      	ldr	r3, [pc, #8]	; (800462c <ssd1306_GotoXY+0xc>)
 8004622:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 8004626:	8018      	strh	r0, [r3, #0]
}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	20000370 	.word	0x20000370

08004630 <ssd1306_PutRuC>:

void ssd1306_PutRuC(char *c) {
 8004630:	b570      	push	{r4, r5, r6, lr}

	uint8_t pos;
	if (*c == 0xD0)
 8004632:	7803      	ldrb	r3, [r0, #0]
 8004634:	2bd0      	cmp	r3, #208	; 0xd0
 8004636:	d111      	bne.n	800465c <ssd1306_PutRuC+0x2c>
		pos = *(c + 1) - 144 + 101;
 8004638:	7843      	ldrb	r3, [r0, #1]
 800463a:	3b2b      	subs	r3, #43	; 0x2b
	else if (*c == 0xD1)
		pos = *(c + 1) - 128 + 149;
	else
		return;
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 800463c:	490a      	ldr	r1, [pc, #40]	; (8004668 <ssd1306_PutRuC+0x38>)
 800463e:	4c0b      	ldr	r4, [pc, #44]	; (800466c <ssd1306_PutRuC+0x3c>)
		pos = *(c + 1) - 128 + 149;
 8004640:	b2db      	uxtb	r3, r3
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 8004642:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004646:	880a      	ldrh	r2, [r1, #0]
 8004648:	4809      	ldr	r0, [pc, #36]	; (8004670 <ssd1306_PutRuC+0x40>)
 800464a:	191e      	adds	r6, r3, r4
 800464c:	58e3      	ldr	r3, [r4, r3]
 800464e:	1815      	adds	r5, r2, r0
 8004650:	5013      	str	r3, [r2, r0]
 8004652:	7933      	ldrb	r3, [r6, #4]
	cursor += 5;
 8004654:	3205      	adds	r2, #5
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 8004656:	712b      	strb	r3, [r5, #4]
	cursor += 5;
 8004658:	800a      	strh	r2, [r1, #0]
}
 800465a:	bd70      	pop	{r4, r5, r6, pc}
	else if (*c == 0xD1)
 800465c:	2bd1      	cmp	r3, #209	; 0xd1
 800465e:	d1fc      	bne.n	800465a <ssd1306_PutRuC+0x2a>
		pos = *(c + 1) - 128 + 149;
 8004660:	7843      	ldrb	r3, [r0, #1]
 8004662:	3315      	adds	r3, #21
 8004664:	e7ea      	b.n	800463c <ssd1306_PutRuC+0xc>
 8004666:	bf00      	nop
 8004668:	20000370 	.word	0x20000370
 800466c:	0800b0c0 	.word	0x0800b0c0
 8004670:	2000038a 	.word	0x2000038a

08004674 <ssd1306_Put>:

void ssd1306_Put(char c) {
 8004674:	b570      	push	{r4, r5, r6, lr}
	memcpy(buffer + cursor, &myFont[c - 0x20][0], 5);
 8004676:	4a08      	ldr	r2, [pc, #32]	; (8004698 <ssd1306_Put+0x24>)
 8004678:	4c08      	ldr	r4, [pc, #32]	; (800469c <ssd1306_Put+0x28>)
 800467a:	3820      	subs	r0, #32
 800467c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004680:	8813      	ldrh	r3, [r2, #0]
 8004682:	4907      	ldr	r1, [pc, #28]	; (80046a0 <ssd1306_Put+0x2c>)
 8004684:	1906      	adds	r6, r0, r4
 8004686:	5820      	ldr	r0, [r4, r0]
 8004688:	185d      	adds	r5, r3, r1
 800468a:	5058      	str	r0, [r3, r1]
 800468c:	7931      	ldrb	r1, [r6, #4]
	cursor += 5;
 800468e:	3305      	adds	r3, #5
	memcpy(buffer + cursor, &myFont[c - 0x20][0], 5);
 8004690:	7129      	strb	r1, [r5, #4]
	cursor += 5;
 8004692:	8013      	strh	r3, [r2, #0]
}
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	bf00      	nop
 8004698:	20000370 	.word	0x20000370
 800469c:	0800b0c0 	.word	0x0800b0c0
 80046a0:	2000038a 	.word	0x2000038a

080046a4 <ssd1306_PutString>:

void ssd1306_PutString(char *c) {
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4604      	mov	r4, r0
		if (*c == 0xD0 || *c == 0xD1) {
			ssd1306_PutRuC(c);
			c += 2;
		} else
			ssd1306_Put(*c++);
		cursor++;
 80046a8:	4d0a      	ldr	r5, [pc, #40]	; (80046d4 <ssd1306_PutString+0x30>)
	while (*c) {
 80046aa:	7820      	ldrb	r0, [r4, #0]
 80046ac:	b900      	cbnz	r0, 80046b0 <ssd1306_PutString+0xc>
	}
}
 80046ae:	bd38      	pop	{r3, r4, r5, pc}
		if (*c == 0xD0 || *c == 0xD1) {
 80046b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d807      	bhi.n	80046ca <ssd1306_PutString+0x26>
			ssd1306_PutRuC(c);
 80046ba:	4620      	mov	r0, r4
 80046bc:	f7ff ffb8 	bl	8004630 <ssd1306_PutRuC>
			c += 2;
 80046c0:	3402      	adds	r4, #2
		cursor++;
 80046c2:	882b      	ldrh	r3, [r5, #0]
 80046c4:	3301      	adds	r3, #1
 80046c6:	802b      	strh	r3, [r5, #0]
 80046c8:	e7ef      	b.n	80046aa <ssd1306_PutString+0x6>
			ssd1306_Put(*c++);
 80046ca:	3401      	adds	r4, #1
 80046cc:	f7ff ffd2 	bl	8004674 <ssd1306_Put>
 80046d0:	e7f7      	b.n	80046c2 <ssd1306_PutString+0x1e>
 80046d2:	bf00      	nop
 80046d4:	20000370 	.word	0x20000370

080046d8 <ssd1306_Clean>:

void ssd1306_Clean(void) {
 80046d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	uint16_t i;
	for (i = 0; i < SSD1306_HEIGHT * SSD1306_WIDTH / 8; i++)
		buffer[i] = 0;
 80046dc:	2100      	movs	r1, #0
 80046de:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <ssd1306_Clean+0x18>)
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < SSD1306_HEIGHT * SSD1306_WIDTH / 8; i++)
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f9      	bne.n	80046e0 <ssd1306_Clean+0x8>
}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	2000038a 	.word	0x2000038a

080046f4 <ssd1306_Update>:

void ssd1306_Update(void) {
 80046f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80046f6:	24b0      	movs	r4, #176	; 0xb0
 80046f8:	4d0f      	ldr	r5, [pc, #60]	; (8004738 <ssd1306_Update+0x44>)

	for (j = 0; j < 8; j++) {
		ssd1306_WriteCommand(0xB0 + j);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);
		HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer + j * 128,
 80046fa:	4e10      	ldr	r6, [pc, #64]	; (800473c <ssd1306_Update+0x48>)
		ssd1306_WriteCommand(0xB0 + j);
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff ff21 	bl	8004544 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8004702:	2000      	movs	r0, #0
 8004704:	f7ff ff1e 	bl	8004544 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8004708:	2010      	movs	r0, #16
 800470a:	f7ff ff1b 	bl	8004544 <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer + j * 128,
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004714:	3401      	adds	r4, #1
 8004716:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800471a:	9500      	str	r5, [sp, #0]
 800471c:	2301      	movs	r3, #1
 800471e:	2240      	movs	r2, #64	; 0x40
 8004720:	2178      	movs	r1, #120	; 0x78
 8004722:	4630      	mov	r0, r6
 8004724:	b2e4      	uxtb	r4, r4
 8004726:	f002 f9cf 	bl	8006ac8 <HAL_I2C_Mem_Write>
	for (j = 0; j < 8; j++) {
 800472a:	2cb8      	cmp	r4, #184	; 0xb8
 800472c:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8004730:	d1e4      	bne.n	80046fc <ssd1306_Update+0x8>
				128, 1000);

	}
}
 8004732:	b004      	add	sp, #16
 8004734:	bd70      	pop	{r4, r5, r6, pc}
 8004736:	bf00      	nop
 8004738:	2000038a 	.word	0x2000038a
 800473c:	20000ae0 	.word	0x20000ae0

08004740 <ssd1306_PutPixel>:
void ssd1306_DrawBitmap(uint8_t *buf) {
	memcpy(buffer, buf, sizeof(buffer));
}

void ssd1306_PutPixel(uint8_t x, uint8_t y) {
	buffer[x + SSD1306_WIDTH * y] |= y % 8;
 8004740:	4a04      	ldr	r2, [pc, #16]	; (8004754 <ssd1306_PutPixel+0x14>)
 8004742:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 8004746:	5c13      	ldrb	r3, [r2, r0]
 8004748:	f001 0107 	and.w	r1, r1, #7
 800474c:	4319      	orrs	r1, r3
 800474e:	5411      	strb	r1, [r2, r0]
}
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000038a 	.word	0x2000038a

08004758 <ssd1306_DrawLine>:

void ssd1306_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x2 - x1 > y2 - y1) {
 800475c:	1a16      	subs	r6, r2, r0
 800475e:	1a5f      	subs	r7, r3, r1
 8004760:	42be      	cmp	r6, r7
void ssd1306_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004762:	4605      	mov	r5, r0
 8004764:	460c      	mov	r4, r1
 8004766:	4692      	mov	sl, r2
 8004768:	4698      	mov	r8, r3
	if (x2 - x1 > y2 - y1) {
 800476a:	4683      	mov	fp, r0
 800476c:	4689      	mov	r9, r1
 800476e:	dc1a      	bgt.n	80047a6 <ssd1306_DrawLine+0x4e>
		for (uint8_t i = x1; i < x2 + 1; ++i) {
			ssd1306_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
		}
	} else {
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 8004770:	4544      	cmp	r4, r8
 8004772:	d81a      	bhi.n	80047aa <ssd1306_DrawLine+0x52>
			ssd1306_PutPixel(i, x1 + (x2 - x1) * (i - y1) / (y2 - y1));
 8004774:	eba4 0109 	sub.w	r1, r4, r9
 8004778:	4371      	muls	r1, r6
 800477a:	fb91 f1f7 	sdiv	r1, r1, r7
 800477e:	4429      	add	r1, r5
 8004780:	4620      	mov	r0, r4
 8004782:	b2c9      	uxtb	r1, r1
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 8004784:	3401      	adds	r4, #1
			ssd1306_PutPixel(i, x1 + (x2 - x1) * (i - y1) / (y2 - y1));
 8004786:	f7ff ffdb 	bl	8004740 <ssd1306_PutPixel>
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 800478a:	b2e4      	uxtb	r4, r4
 800478c:	e7f0      	b.n	8004770 <ssd1306_DrawLine+0x18>
			ssd1306_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 800478e:	eba5 010b 	sub.w	r1, r5, fp
 8004792:	4379      	muls	r1, r7
 8004794:	fb91 f1f6 	sdiv	r1, r1, r6
 8004798:	4421      	add	r1, r4
 800479a:	4628      	mov	r0, r5
 800479c:	b2c9      	uxtb	r1, r1
 800479e:	f7ff ffcf 	bl	8004740 <ssd1306_PutPixel>
		for (uint8_t i = x1; i < x2 + 1; ++i) {
 80047a2:	3501      	adds	r5, #1
 80047a4:	b2ed      	uxtb	r5, r5
 80047a6:	4555      	cmp	r5, sl
 80047a8:	d9f1      	bls.n	800478e <ssd1306_DrawLine+0x36>
		}
	}
}
 80047aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080047b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80047b0:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_MspInit+0x3c>)
{
 80047b2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	f042 0201 	orr.w	r2, r2, #1
 80047ba:	619a      	str	r2, [r3, #24]
 80047bc:	699a      	ldr	r2, [r3, #24]
 80047be:	f002 0201 	and.w	r2, r2, #1
 80047c2:	9200      	str	r2, [sp, #0]
 80047c4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80047cc:	61da      	str	r2, [r3, #28]
 80047ce:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047d0:	4a07      	ldr	r2, [pc, #28]	; (80047f0 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80047d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80047da:	6853      	ldr	r3, [r2, #4]
 80047dc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80047e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047e6:	b002      	add	sp, #8
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40021000 	.word	0x40021000
 80047f0:	40010000 	.word	0x40010000

080047f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047f4:	b530      	push	{r4, r5, lr}
 80047f6:	4605      	mov	r5, r0
 80047f8:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fa:	2210      	movs	r2, #16
 80047fc:	2100      	movs	r1, #0
 80047fe:	a802      	add	r0, sp, #8
 8004800:	f003 fe58 	bl	80084b4 <memset>
  if(hadc->Instance==ADC1)
 8004804:	682a      	ldr	r2, [r5, #0]
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_ADC_MspInit+0x84>)
 8004808:	429a      	cmp	r2, r3
 800480a:	d133      	bne.n	8004874 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800480c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004810:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	481a      	ldr	r0, [pc, #104]	; (800487c <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004818:	619a      	str	r2, [r3, #24]
 800481a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800481e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004822:	9200      	str	r2, [sp, #0]
 8004824:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004826:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004828:	4c15      	ldr	r4, [pc, #84]	; (8004880 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800482a:	f042 0204 	orr.w	r2, r2, #4
 800482e:	619a      	str	r2, [r3, #24]
 8004830:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004832:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	9301      	str	r3, [sp, #4]
 800483a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800483c:	2303      	movs	r3, #3
 800483e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004842:	f001 fdc9 	bl	80063d8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004846:	f44f 7080 	mov.w	r0, #256	; 0x100
 800484a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800484e:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004850:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004854:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004856:	490b      	ldr	r1, [pc, #44]	; (8004884 <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004858:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800485a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 800485e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004862:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004866:	f001 fb27 	bl	8005eb8 <HAL_DMA_Init>
 800486a:	b108      	cbz	r0, 8004870 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 800486c:	f7ff fe68 	bl	8004540 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004870:	622c      	str	r4, [r5, #32]
 8004872:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004874:	b007      	add	sp, #28
 8004876:	bd30      	pop	{r4, r5, pc}
 8004878:	40012400 	.word	0x40012400
 800487c:	40010800 	.word	0x40010800
 8004880:	20000c94 	.word	0x20000c94
 8004884:	40020008 	.word	0x40020008

08004888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004888:	b510      	push	{r4, lr}
 800488a:	4604      	mov	r4, r0
 800488c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800488e:	2210      	movs	r2, #16
 8004890:	2100      	movs	r1, #0
 8004892:	a802      	add	r0, sp, #8
 8004894:	f003 fe0e 	bl	80084b4 <memset>
  if(hi2c->Instance==I2C1)
 8004898:	6822      	ldr	r2, [r4, #0]
 800489a:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <HAL_I2C_MspInit+0x58>)
 800489c:	429a      	cmp	r2, r3
 800489e:	d11c      	bne.n	80048da <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a0:	4c10      	ldr	r4, [pc, #64]	; (80048e4 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048a2:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a4:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a6:	4810      	ldr	r0, [pc, #64]	; (80048e8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a8:	f043 0308 	orr.w	r3, r3, #8
 80048ac:	61a3      	str	r3, [r4, #24]
 80048ae:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048b0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048ba:	2312      	movs	r3, #18
 80048bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048c0:	2303      	movs	r3, #3
 80048c2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048c4:	f001 fd88 	bl	80063d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80048c8:	69e3      	ldr	r3, [r4, #28]
 80048ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048ce:	61e3      	str	r3, [r4, #28]
 80048d0:	69e3      	ldr	r3, [r4, #28]
 80048d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80048da:	b006      	add	sp, #24
 80048dc:	bd10      	pop	{r4, pc}
 80048de:	bf00      	nop
 80048e0:	40005400 	.word	0x40005400
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40010c00 	.word	0x40010c00

080048ec <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	2210      	movs	r2, #16
{
 80048ee:	b510      	push	{r4, lr}
 80048f0:	4604      	mov	r4, r0
 80048f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f4:	eb0d 0002 	add.w	r0, sp, r2
 80048f8:	2100      	movs	r1, #0
 80048fa:	f003 fddb 	bl	80084b4 <memset>
  if(hspi->Instance==SPI1)
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	4a25      	ldr	r2, [pc, #148]	; (8004998 <HAL_SPI_MspInit+0xac>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d127      	bne.n	8004956 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004906:	4b25      	ldr	r3, [pc, #148]	; (800499c <HAL_SPI_MspInit+0xb0>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	21a0      	movs	r1, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 800490a:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800490c:	4824      	ldr	r0, [pc, #144]	; (80049a0 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800490e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004912:	619a      	str	r2, [r3, #24]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800491a:	9200      	str	r2, [sp, #0]
 800491c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	f042 0204 	orr.w	r2, r2, #4
 8004924:	619a      	str	r2, [r3, #24]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f003 0304 	and.w	r3, r3, #4
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004930:	2302      	movs	r3, #2
 8004932:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004936:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004938:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800493a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800493c:	f001 fd4c 	bl	80063d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004940:	2040      	movs	r0, #64	; 0x40
 8004942:	2300      	movs	r3, #0
 8004944:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004948:	4815      	ldr	r0, [pc, #84]	; (80049a0 <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800494c:	a904      	add	r1, sp, #16
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494e:	f001 fd43 	bl	80063d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004952:	b008      	add	sp, #32
 8004954:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8004956:	4a13      	ldr	r2, [pc, #76]	; (80049a4 <HAL_SPI_MspInit+0xb8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d1fa      	bne.n	8004952 <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800495c:	4b0f      	ldr	r3, [pc, #60]	; (800499c <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800495e:	4812      	ldr	r0, [pc, #72]	; (80049a8 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004960:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004962:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004968:	61da      	str	r2, [r3, #28]
 800496a:	69da      	ldr	r2, [r3, #28]
 800496c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004970:	9202      	str	r2, [sp, #8]
 8004972:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	f042 0208 	orr.w	r2, r2, #8
 800497a:	619a      	str	r2, [r3, #24]
 800497c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800497e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004982:	f003 0308 	and.w	r3, r3, #8
 8004986:	9303      	str	r3, [sp, #12]
 8004988:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	2302      	movs	r3, #2
 800498c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004990:	2303      	movs	r3, #3
 8004992:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004994:	e7db      	b.n	800494e <HAL_SPI_MspInit+0x62>
 8004996:	bf00      	nop
 8004998:	40013000 	.word	0x40013000
 800499c:	40021000 	.word	0x40021000
 80049a0:	40010800 	.word	0x40010800
 80049a4:	40003800 	.word	0x40003800
 80049a8:	40010c00 	.word	0x40010c00

080049ac <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80049ac:	6803      	ldr	r3, [r0, #0]
{
 80049ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_pwm->Instance==TIM2)
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80049b4:	4605      	mov	r5, r0
  if(htim_pwm->Instance==TIM2)
 80049b6:	d128      	bne.n	8004a0a <HAL_TIM_PWM_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80049bc:	69da      	ldr	r2, [r3, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80049be:	4c14      	ldr	r4, [pc, #80]	; (8004a10 <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049c0:	f042 0201 	orr.w	r2, r2, #1
 80049c4:	61da      	str	r2, [r3, #28]
 80049c6:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049c8:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <HAL_TIM_PWM_MspInit+0x68>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049d2:	2310      	movs	r3, #16
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80049d4:	2100      	movs	r1, #0
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80049d6:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80049da:	2380      	movs	r3, #128	; 0x80
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049dc:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80049e0:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80049e8:	f04f 0c20 	mov.w	ip, #32
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049ec:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80049f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80049f4:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80049f6:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80049fa:	f001 fa5d 	bl	8005eb8 <HAL_DMA_Init>
 80049fe:	b108      	cbz	r0, 8004a04 <HAL_TIM_PWM_MspInit+0x58>
    {
      Error_Handler();
 8004a00:	f7ff fd9e 	bl	8004540 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8004a04:	62ac      	str	r4, [r5, #40]	; 0x28
 8004a06:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8004a08:	632c      	str	r4, [r5, #48]	; 0x30
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004a0a:	b003      	add	sp, #12
 8004a0c:	bd30      	pop	{r4, r5, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000b50 	.word	0x20000b50
 8004a14:	40020080 	.word	0x40020080

08004a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a1e:	2210      	movs	r2, #16
 8004a20:	2100      	movs	r1, #0
 8004a22:	a802      	add	r0, sp, #8
 8004a24:	f003 fd46 	bl	80084b4 <memset>
  if(htim->Instance==TIM2)
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a2e:	d112      	bne.n	8004a56 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a30:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004a34:	699a      	ldr	r2, [r3, #24]
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	4809      	ldr	r0, [pc, #36]	; (8004a5c <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a38:	f042 0204 	orr.w	r2, r2, #4
 8004a3c:	619a      	str	r2, [r3, #24]
 8004a3e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a40:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a42:	f003 0304 	and.w	r3, r3, #4
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004a4a:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4c:	e9cd 3302 	strd	r3, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a50:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a52:	f001 fcc1 	bl	80063d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004a56:	b006      	add	sp, #24
 8004a58:	bd10      	pop	{r4, pc}
 8004a5a:	bf00      	nop
 8004a5c:	40010800 	.word	0x40010800

08004a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a60:	b530      	push	{r4, r5, lr}
 8004a62:	4604      	mov	r4, r0
 8004a64:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a66:	2210      	movs	r2, #16
 8004a68:	2100      	movs	r1, #0
 8004a6a:	a802      	add	r0, sp, #8
 8004a6c:	f003 fd22 	bl	80084b4 <memset>
  if(huart->Instance==USART1)
 8004a70:	6822      	ldr	r2, [r4, #0]
 8004a72:	4b1b      	ldr	r3, [pc, #108]	; (8004ae0 <HAL_UART_MspInit+0x80>)
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d130      	bne.n	8004ada <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a78:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004a7c:	699a      	ldr	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a84:	619a      	str	r2, [r3, #24]
 8004a86:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a88:	4816      	ldr	r0, [pc, #88]	; (8004ae4 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a8a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004a8e:	9200      	str	r2, [sp, #0]
 8004a90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a92:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a94:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a96:	f042 0204 	orr.w	r2, r2, #4
 8004a9a:	619a      	str	r2, [r3, #24]
 8004a9c:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a9e:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	9301      	str	r3, [sp, #4]
 8004aa6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aac:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab4:	f001 fc90 	bl	80063d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004abc:	4809      	ldr	r0, [pc, #36]	; (8004ae4 <HAL_UART_MspInit+0x84>)
 8004abe:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ac0:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac4:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ac6:	f001 fc87 	bl	80063d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004aca:	2025      	movs	r0, #37	; 0x25
 8004acc:	4622      	mov	r2, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f001 f99c 	bl	8005e0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004ad4:	2025      	movs	r0, #37	; 0x25
 8004ad6:	f001 f9cb 	bl	8005e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ada:	b007      	add	sp, #28
 8004adc:	bd30      	pop	{r4, r5, pc}
 8004ade:	bf00      	nop
 8004ae0:	40013800 	.word	0x40013800
 8004ae4:	40010800 	.word	0x40010800

08004ae8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ae8:	e7fe      	b.n	8004ae8 <NMI_Handler>

08004aea <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004aea:	e7fe      	b.n	8004aea <HardFault_Handler>

08004aec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004aec:	e7fe      	b.n	8004aec <MemManage_Handler>

08004aee <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004aee:	e7fe      	b.n	8004aee <BusFault_Handler>

08004af0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004af0:	e7fe      	b.n	8004af0 <UsageFault_Handler>

08004af2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004af2:	4770      	bx	lr

08004af4 <DebugMon_Handler>:
 8004af4:	4770      	bx	lr

08004af6 <PendSV_Handler>:
 8004af6:	4770      	bx	lr

08004af8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004af8:	f000 bf2a 	b.w	8005950 <HAL_IncTick>

08004afc <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004afc:	2002      	movs	r0, #2
 8004afe:	f001 bd53 	b.w	80065a8 <HAL_GPIO_EXTI_IRQHandler>

08004b02 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004b02:	2004      	movs	r0, #4
 8004b04:	f001 bd50 	b.w	80065a8 <HAL_GPIO_EXTI_IRQHandler>

08004b08 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <DMA1_Channel7_IRQHandler+0x8>)
 8004b0a:	f001 baa3 	b.w	8006054 <HAL_DMA_IRQHandler>
 8004b0e:	bf00      	nop
 8004b10:	20000b50 	.word	0x20000b50

08004b14 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <USART1_IRQHandler+0x8>)
 8004b16:	f003 bb63 	b.w	80081e0 <HAL_UART_IRQHandler>
 8004b1a:	bf00      	nop
 8004b1c:	20000c30 	.word	0x20000c30

08004b20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004b20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004b22:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004b26:	f001 fd3f 	bl	80065a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004b2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004b2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004b32:	f001 bd39 	b.w	80065a8 <HAL_GPIO_EXTI_IRQHandler>

08004b36 <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 8004b36:	460a      	mov	r2, r1
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 8004b38:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
 8004b3c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8004b3e:	f001 bd2d 	b.w	800659c <HAL_GPIO_WritePin>

08004b42 <SX127X_Reset>:
}

__weak void SX127X_Reset(SX127X_t *module)
{
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 8004b46:	2101      	movs	r1, #1
 8004b48:	f7ff fff5 	bl	8004b36 <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 8004b4c:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8004b50:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004b52:	2200      	movs	r2, #0
 8004b54:	f001 fd22 	bl	800659c <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8004b58:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8004b5c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004b5e:	2201      	movs	r2, #1

	SX127X_delayMicro(6000);
}
 8004b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8004b64:	f001 bd1a 	b.w	800659c <HAL_GPIO_WritePin>

08004b68 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 8004b68:	b513      	push	{r0, r1, r4, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	f88d 1007 	strb.w	r1, [sp, #7]
	SX127X_SetNSS(module, 0);
 8004b70:	2100      	movs	r1, #0
 8004b72:	f7ff ffe0 	bl	8004b36 <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 8004b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004b7e:	f10d 0107 	add.w	r1, sp, #7
 8004b82:	f002 fd63 	bl	800764c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 8004b86:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004b88:	f002 fefc 	bl	8007984 <HAL_SPI_GetState>
 8004b8c:	2801      	cmp	r0, #1
 8004b8e:	d1fa      	bne.n	8004b86 <SX127X_SPICommand+0x1e>
		;
}
 8004b90:	b002      	add	sp, #8
 8004b92:	bd10      	pop	{r4, pc}

08004b94 <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
 8004b94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t txByte = 0x00;
 8004b96:	2100      	movs	r1, #0
{
 8004b98:	4604      	mov	r4, r0
	uint8_t txByte = 0x00;
 8004b9a:	f88d 100e 	strb.w	r1, [sp, #14]
	uint8_t rxByte = 0x00;
 8004b9e:	f88d 100f 	strb.w	r1, [sp, #15]

	SX127X_SetNSS(module, 0);
 8004ba2:	f7ff ffc8 	bl	8004b36 <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 8004ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004baa:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	f10d 020f 	add.w	r2, sp, #15
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f10d 010e 	add.w	r1, sp, #14
 8004bb8:	f002 fdf5 	bl	80077a6 <HAL_SPI_TransmitReceive>
	return rxByte;
}
 8004bbc:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd10      	pop	{r4, pc}

08004bc4 <SX127X_SPIRead>:
//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX127X_SPIRead(SX127X_t *module, uint8_t addr)
{
 8004bc4:	b538      	push	{r3, r4, r5, lr}
 8004bc6:	4604      	mov	r4, r0
	uint8_t tmp;
	SX127X_SPICommand(module, addr);
 8004bc8:	f7ff ffce 	bl	8004b68 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7ff ffe1 	bl	8004b94 <SX127X_SPIReadByte>
 8004bd2:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f7ff ffad 	bl	8004b36 <SX127X_SetNSS>
	return tmp;
}
 8004bdc:	4628      	mov	r0, r5
 8004bde:	bd38      	pop	{r3, r4, r5, pc}

08004be0 <SX127X_SPIWrite>:

void SX127X_SPIWrite(SX127X_t *module, uint8_t addr, uint8_t cmd)
{
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	4604      	mov	r4, r0
 8004be4:	460e      	mov	r6, r1
 8004be6:	4615      	mov	r5, r2
	SX127X_SetNSS(module, 0);
 8004be8:	2100      	movs	r1, #0
 8004bea:	f7ff ffa4 	bl	8004b36 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8004bf4:	f7ff ffb8 	bl	8004b68 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8004bf8:	4629      	mov	r1, r5
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f7ff ffb4 	bl	8004b68 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8004c00:	2101      	movs	r1, #1
 8004c02:	4620      	mov	r0, r4
 8004c04:	f7ff ff97 	bl	8004b36 <SX127X_SetNSS>
}
 8004c08:	bd70      	pop	{r4, r5, r6, pc}

08004c0a <SX127X_SPIBurstRead>:

void SX127X_SPIBurstRead(SX127X_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length)
{
	uint8_t i;
	if (length <= 1)
 8004c0a:	2b01      	cmp	r3, #1
{
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	4615      	mov	r5, r2
 8004c14:	461c      	mov	r4, r3
	if (length <= 1)
 8004c16:	d915      	bls.n	8004c44 <SX127X_SPIBurstRead+0x3a>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f7ff ff8c 	bl	8004b36 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 8004c1e:	4639      	mov	r1, r7
 8004c20:	4630      	mov	r0, r6
 8004c22:	f7ff ffa1 	bl	8004b68 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8004c26:	3c01      	subs	r4, #1
 8004c28:	b2e4      	uxtb	r4, r4
 8004c2a:	1e6f      	subs	r7, r5, #1
 8004c2c:	442c      	add	r4, r5
		{
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 8004c2e:	4630      	mov	r0, r6
 8004c30:	f7ff ffb0 	bl	8004b94 <SX127X_SPIReadByte>
 8004c34:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++)
 8004c38:	42a7      	cmp	r7, r4
 8004c3a:	d1f8      	bne.n	8004c2e <SX127X_SPIBurstRead+0x24>
		}
		SX127X_SetNSS(module, 1);
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	4630      	mov	r0, r6
 8004c40:	f7ff ff79 	bl	8004b36 <SX127X_SetNSS>
	}
}
 8004c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c46 <SX127X_SPIBurstWrite>:

void SX127X_SPIBurstWrite(SX127X_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length)
{
	unsigned char i;
	if (length <= 1)
 8004c46:	2b01      	cmp	r3, #1
{
 8004c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	4615      	mov	r5, r2
 8004c50:	461c      	mov	r4, r3
	if (length <= 1)
 8004c52:	d916      	bls.n	8004c82 <SX127X_SPIBurstWrite+0x3c>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 8004c54:	2100      	movs	r1, #0
 8004c56:	f7ff ff6e 	bl	8004b36 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 8004c5a:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 8004c5e:	4630      	mov	r0, r6
 8004c60:	f7ff ff82 	bl	8004b68 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8004c64:	3c01      	subs	r4, #1
 8004c66:	b2e4      	uxtb	r4, r4
 8004c68:	1e6f      	subs	r7, r5, #1
 8004c6a:	442c      	add	r4, r5
		{
			SX127X_SPICommand(module, *(txBuf + i));
 8004c6c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004c70:	4630      	mov	r0, r6
 8004c72:	f7ff ff79 	bl	8004b68 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8004c76:	42a7      	cmp	r7, r4
 8004c78:	d1f8      	bne.n	8004c6c <SX127X_SPIBurstWrite+0x26>
		}
		SX127X_SetNSS(module, 1);
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f7ff ff5a 	bl	8004b36 <SX127X_SetNSS>
	}
}
 8004c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004c84 <SX127X_defaultConfig>:
	module->cr = SX127X_CR_4_8;
	module->crcEnable = 1;
	module->frequency = SX127X_FREQ_DEFAULT;
	module->implicitHeader = 1;
	module->len = 3;
	module->power = SX127X_POWER_20DBM;
 8004c84:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <SX127X_defaultConfig+0x18>)
 8004c86:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <SX127X_defaultConfig+0x1c>)
 8004c88:	e9c0 2300 	strd	r2, r3, [r0]
	module->len = 3;
 8004c8c:	f240 1303 	movw	r3, #259	; 0x103
 8004c90:	8103      	strh	r3, [r0, #8]
	module->implicitHeader = 1;
 8004c92:	2301      	movs	r3, #1
 8004c94:	7283      	strb	r3, [r0, #10]
	module->preamble = 5;
 8004c96:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <SX127X_defaultConfig+0x20>)
 8004c98:	60c3      	str	r3, [r0, #12]
	module->sf = SX127X_LORA_SF_12;
	module->syncWord = 0x1;
	module->alwaysRX = 1;
}
 8004c9a:	4770      	bx	lr
 8004c9c:	04070c14 	.word	0x04070c14
 8004ca0:	00d94024 	.word	0x00d94024
 8004ca4:	01010005 	.word	0x01010005

08004ca8 <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi)
{
 8004ca8:	b082      	sub	sp, #8
 8004caa:	b513      	push	{r0, r1, r4, lr}
 8004cac:	4604      	mov	r4, r0
 8004cae:	4668      	mov	r0, sp
 8004cb0:	e880 0006 	stmia.w	r0, {r1, r2}
 8004cb4:	9305      	str	r3, [sp, #20]
	module->reset = reset;
 8004cb6:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8004cba:	c803      	ldmia	r0, {r0, r1}
 8004cbc:	e883 0005 	stmia.w	r3, {r0, r2}
	module->nss = nss;
 8004cc0:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8004cc4:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8004cc8:	e883 0003 	stmia.w	r3, {r0, r1}
	module->spi = hspi;
 8004ccc:	9b07      	ldr	r3, [sp, #28]
 8004cce:	6763      	str	r3, [r4, #116]	; 0x74
}
 8004cd0:	b002      	add	sp, #8
 8004cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd6:	b002      	add	sp, #8
 8004cd8:	4770      	bx	lr
	...

08004cdc <SX127X_standby>:

void SX127X_standby(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004cdc:	6802      	ldr	r2, [r0, #0]
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <SX127X_standby+0x1c>)
{
 8004ce0:	b510      	push	{r4, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004ce2:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x89);
 8004ce4:	bf94      	ite	ls
 8004ce6:	2289      	movls	r2, #137	; 0x89
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8004ce8:	2281      	movhi	r2, #129	; 0x81
 8004cea:	2101      	movs	r1, #1
{
 8004cec:	4604      	mov	r4, r0
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8004cee:	f7ff ff77 	bl	8004be0 <SX127X_SPIWrite>
	module->status = STANDBY;
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	7423      	strb	r3, [r4, #16]
}
 8004cf6:	bd10      	pop	{r4, pc}
 8004cf8:	00834015 	.word	0x00834015

08004cfc <SX127X_sleep>:

void SX127X_sleep(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004cfc:	6802      	ldr	r2, [r0, #0]
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <SX127X_sleep+0x1c>)
{
 8004d00:	b510      	push	{r4, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004d02:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
 8004d04:	bf94      	ite	ls
 8004d06:	2288      	movls	r2, #136	; 0x88
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004d08:	2280      	movhi	r2, #128	; 0x80
 8004d0a:	2101      	movs	r1, #1
{
 8004d0c:	4604      	mov	r4, r0
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004d0e:	f7ff ff67 	bl	8004be0 <SX127X_SPIWrite>
	module->status = SLEEP;
 8004d12:	2301      	movs	r3, #1
 8004d14:	7423      	strb	r3, [r4, #16]
}
 8004d16:	bd10      	pop	{r4, pc}
 8004d18:	00834015 	.word	0x00834015

08004d1c <SX127X_config>:
{
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	4604      	mov	r4, r0
	SX127X_sleep(module); //Change modem mode Must in Sleep mode
 8004d20:	f7ff ffec 	bl	8004cfc <SX127X_sleep>
	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 8004d24:	2106      	movs	r1, #6
 8004d26:	4620      	mov	r0, r4
 8004d28:	78a2      	ldrb	r2, [r4, #2]
 8004d2a:	f7ff ff59 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8004d2e:	2107      	movs	r1, #7
 8004d30:	4620      	mov	r0, r4
 8004d32:	7862      	ldrb	r2, [r4, #1]
 8004d34:	f7ff ff54 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 8004d38:	2108      	movs	r1, #8
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	7822      	ldrb	r2, [r4, #0]
 8004d3e:	f7ff ff4f 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8004d42:	7922      	ldrb	r2, [r4, #4]
 8004d44:	2109      	movs	r1, #9
 8004d46:	3a05      	subs	r2, #5
 8004d48:	f062 020f 	orn	r2, r2, #15
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	f7ff ff46 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 8004d54:	2232      	movs	r2, #50	; 0x32
 8004d56:	210b      	movs	r1, #11
 8004d58:	4620      	mov	r0, r4
 8004d5a:	f7ff ff41 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 8004d5e:	2223      	movs	r2, #35	; 0x23
 8004d60:	210c      	movs	r1, #12
 8004d62:	4620      	mov	r0, r4
 8004d64:	f7ff ff3c 	bl	8004be0 <SX127X_SPIWrite>
			(module->cr << 1)) +         //Coding rate
 8004d68:	79e2      	ldrb	r2, [r4, #7]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004d6a:	79a3      	ldrb	r3, [r4, #6]
			(module->cr << 1)) +         //Coding rate
 8004d6c:	0052      	lsls	r2, r2, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004d6e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
			(module->implicitHeader & 1)); //Implicit header flag
 8004d72:	7aa3      	ldrb	r3, [r4, #10]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004d74:	211d      	movs	r1, #29
			(module->implicitHeader & 1)); //Implicit header flag
 8004d76:	f003 0301 	and.w	r3, r3, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004d7a:	441a      	add	r2, r3
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f7ff ff2e 	bl	8004be0 <SX127X_SPIWrite>
			(module->crcEnable << 2) +     //CRC enable flag
 8004d84:	7a62      	ldrb	r2, [r4, #9]
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8004d86:	7963      	ldrb	r3, [r4, #5]
			(module->crcEnable << 2) +     //CRC enable flag
 8004d88:	0092      	lsls	r2, r2, #2
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8004d8a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004d8e:	3203      	adds	r2, #3
 8004d90:	211e      	movs	r1, #30
 8004d92:	4620      	mov	r0, r4
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	f7ff ff23 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 8004d9a:	22ff      	movs	r2, #255	; 0xff
 8004d9c:	211f      	movs	r1, #31
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff ff1e 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8004da4:	89a2      	ldrh	r2, [r4, #12]
 8004da6:	2120      	movs	r1, #32
 8004da8:	4620      	mov	r0, r4
 8004daa:	0a12      	lsrs	r2, r2, #8
 8004dac:	f7ff ff18 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8004db0:	2121      	movs	r1, #33	; 0x21
 8004db2:	4620      	mov	r0, r4
 8004db4:	7b22      	ldrb	r2, [r4, #12]
 8004db6:	f7ff ff13 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8004dba:	2122      	movs	r1, #34	; 0x22
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	7a22      	ldrb	r2, [r4, #8]
 8004dc0:	f7ff ff0e 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8004dc4:	2139      	movs	r1, #57	; 0x39
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	7ba2      	ldrb	r2, [r4, #14]
 8004dca:	f7ff ff09 	bl	8004be0 <SX127X_SPIWrite>
	module->readBytes = 0;
 8004dce:	2300      	movs	r3, #0
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004dd0:	2142      	movs	r1, #66	; 0x42
	module->readBytes = 0;
 8004dd2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7ff fef4 	bl	8004bc4 <SX127X_SPIRead>
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8004ddc:	79a3      	ldrb	r3, [r4, #6]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004dde:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8004de2:	2b09      	cmp	r3, #9
 8004de4:	d123      	bne.n	8004e2e <SX127X_config+0x112>
 8004de6:	2812      	cmp	r0, #18
 8004de8:	d121      	bne.n	8004e2e <SX127X_config+0x112>
				&& module->frequency < SX127X_FREQ_1020MHZ)
 8004dea:	6823      	ldr	r3, [r4, #0]
		if (module->frequency > SX127X_FREQ_820MHZ
 8004dec:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <SX127X_config+0x11c>)
				&& module->frequency < SX127X_FREQ_1020MHZ)
 8004dee:	f5a3 034d 	sub.w	r3, r3, #13434880	; 0xcd0000
 8004df2:	3b23      	subs	r3, #35	; 0x23
		if (module->frequency > SX127X_FREQ_820MHZ
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d809      	bhi.n	8004e0c <SX127X_config+0xf0>
			SX127X_SPIWrite(module, 0x36, 0x2);
 8004df8:	2202      	movs	r2, #2
 8004dfa:	2136      	movs	r1, #54	; 0x36
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7ff feef 	bl	8004be0 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x64);
 8004e02:	2264      	movs	r2, #100	; 0x64
 8004e04:	213a      	movs	r1, #58	; 0x3a
 8004e06:	4620      	mov	r0, r4
 8004e08:	f7ff feea 	bl	8004be0 <SX127X_SPIWrite>
				&& module->frequency < SX127X_FREQ_525MHZ)
 8004e0c:	6823      	ldr	r3, [r4, #0]
		if (module->frequency > SX127X_FREQ_410MHZ
 8004e0e:	4a0b      	ldr	r2, [pc, #44]	; (8004e3c <SX127X_config+0x120>)
				&& module->frequency < SX127X_FREQ_525MHZ)
 8004e10:	f5a3 03cd 	sub.w	r3, r3, #6717440	; 0x668000
 8004e14:	3b12      	subs	r3, #18
		if (module->frequency > SX127X_FREQ_410MHZ
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d809      	bhi.n	8004e2e <SX127X_config+0x112>
			SX127X_SPIWrite(module, 0x36, 0x3);
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	2136      	movs	r1, #54	; 0x36
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f7ff fede 	bl	8004be0 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x7F);
 8004e24:	227f      	movs	r2, #127	; 0x7f
 8004e26:	213a      	movs	r1, #58	; 0x3a
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7ff fed9 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_standby(module); //Entry standby mode
 8004e2e:	4620      	mov	r0, r4
}
 8004e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SX127X_standby(module); //Entry standby mode
 8004e34:	f7ff bf52 	b.w	8004cdc <SX127X_standby>
 8004e38:	00320006 	.word	0x00320006
 8004e3c:	001cc003 	.word	0x001cc003

08004e40 <SX127X_clearIrq>:

void SX127X_clearIrq(SX127X_t *module)
{
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8004e40:	22ff      	movs	r2, #255	; 0xff
 8004e42:	2112      	movs	r1, #18
 8004e44:	f7ff becc 	b.w	8004be0 <SX127X_SPIWrite>

08004e48 <SX127X_startRx>:
}

int SX127X_startRx(SX127X_t *module, uint32_t timeout)
{
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	460d      	mov	r5, r1
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8004e4e:	f7ff ff65 	bl	8004d1c <SX127X_config>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004e52:	2284      	movs	r2, #132	; 0x84
 8004e54:	214d      	movs	r1, #77	; 0x4d
 8004e56:	4620      	mov	r0, r4
 8004e58:	f7ff fec2 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2124      	movs	r1, #36	; 0x24
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7ff febd 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8004e66:	4620      	mov	r0, r4
 8004e68:	f7ff ffea 	bl	8004e40 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8004e6c:	7a22      	ldrb	r2, [r4, #8]
 8004e6e:	2122      	movs	r1, #34	; 0x22
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7ff feb5 	bl	8004be0 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004e76:	210f      	movs	r1, #15
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7ff fea3 	bl	8004bc4 <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004e7e:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004e80:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004e82:	4620      	mov	r0, r4
 8004e84:	f7ff feac 	bl	8004be0 <SX127X_SPIWrite>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004e88:	6822      	ldr	r2, [r4, #0]
 8004e8a:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <SX127X_startRx+0x8c>)
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8004e8c:	2101      	movs	r1, #1
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004e8e:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
 8004e90:	bf94      	ite	ls
 8004e92:	228d      	movls	r2, #141	; 0x8d
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8004e94:	2285      	movhi	r2, #133	; 0x85
 8004e96:	4620      	mov	r0, r4
 8004e98:	f7ff fea2 	bl	8004be0 <SX127X_SPIWrite>
	module->readBytes = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	while (1)
	{
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
 8004ea2:	2118      	movs	r1, #24
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7ff fe8d 	bl	8004bc4 <SX127X_SPIRead>
		if (status & 0x04)
 8004eaa:	0743      	lsls	r3, r0, #29
 8004eac:	d503      	bpl.n	8004eb6 <SX127X_startRx+0x6e>
		{	//Rx-on going RegModemStat
			module->status = RX;
 8004eae:	2304      	movs	r3, #4
			return 1;
 8004eb0:	2001      	movs	r0, #1
			module->status = RX;
 8004eb2:	7423      	strb	r3, [r4, #16]
			return 0;
		}

		HAL_Delay(1);
	}
}
 8004eb4:	bd38      	pop	{r3, r4, r5, pc}
		if (--timeout == 0)
 8004eb6:	3d01      	subs	r5, #1
 8004eb8:	d107      	bne.n	8004eca <SX127X_startRx+0x82>
			SX127X_Reset(module);
 8004eba:	4620      	mov	r0, r4
 8004ebc:	f7ff fe41 	bl	8004b42 <SX127X_Reset>
			SX127X_config(module);
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f7ff ff2b 	bl	8004d1c <SX127X_config>
			return 0;
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e7f4      	b.n	8004eb4 <SX127X_startRx+0x6c>
		HAL_Delay(1);
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f000 fd52 	bl	8005974 <HAL_Delay>
	{
 8004ed0:	e7e7      	b.n	8004ea2 <SX127X_startRx+0x5a>
 8004ed2:	bf00      	nop
 8004ed4:	00834015 	.word	0x00834015

08004ed8 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module)
{
 8004ed8:	b570      	push	{r4, r5, r6, lr}
 8004eda:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8004edc:	f100 061d 	add.w	r6, r0, #29
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4630      	mov	r0, r6
 8004ee6:	f003 fae5 	bl	80084b4 <memset>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8004eea:	2110      	movs	r1, #16
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff fe69 	bl	8004bc4 <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004ef2:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8004ef4:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	f7ff fe72 	bl	8004be0 <SX127X_SPIWrite>
	if (module->sf == SX127X_LORA_SF_6)
 8004efc:	7963      	ldrb	r3, [r4, #5]
 8004efe:	2b06      	cmp	r3, #6
 8004f00:	d10a      	bne.n	8004f18 <SX127X_receive+0x40>
		packet_size = module->len;
 8004f02:	7a25      	ldrb	r5, [r4, #8]
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8004f04:	4620      	mov	r0, r4
 8004f06:	462b      	mov	r3, r5
 8004f08:	4632      	mov	r2, r6
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f7ff fe7d 	bl	8004c0a <SX127X_SPIBurstRead>
	module->readBytes = packet_size;
	return module->readBytes;
}
 8004f10:	4628      	mov	r0, r5
	module->readBytes = packet_size;
 8004f12:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
}
 8004f16:	bd70      	pop	{r4, r5, r6, pc}
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004f18:	2113      	movs	r1, #19
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f7ff fe52 	bl	8004bc4 <SX127X_SPIRead>
 8004f20:	4605      	mov	r5, r0
 8004f22:	e7ef      	b.n	8004f04 <SX127X_receive+0x2c>

08004f24 <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module)
{
 8004f24:	b510      	push	{r4, lr}
 8004f26:	4604      	mov	r4, r0
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8004f28:	f7ff fef8 	bl	8004d1c <SX127X_config>
	module->status = TX;
 8004f2c:	2303      	movs	r3, #3
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004f2e:	2287      	movs	r2, #135	; 0x87
	module->status = TX;
 8004f30:	7423      	strb	r3, [r4, #16]
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004f32:	214d      	movs	r1, #77	; 0x4d
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7ff fe53 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	2124      	movs	r1, #36	; 0x24
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fe4e 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8004f44:	4620      	mov	r0, r4
 8004f46:	f7ff ff7b 	bl	8004e40 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8004f4a:	7a22      	ldrb	r2, [r4, #8]
 8004f4c:	2122      	movs	r1, #34	; 0x22
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7ff fe46 	bl	8004be0 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004f54:	210e      	movs	r1, #14
 8004f56:	4620      	mov	r0, r4
 8004f58:	f7ff fe34 	bl	8004bc4 <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004f5c:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004f5e:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7ff fe3d 	bl	8004be0 <SX127X_SPIWrite>
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 8004f66:	2100      	movs	r1, #0
 8004f68:	7a23      	ldrb	r3, [r4, #8]
 8004f6a:	f104 023d 	add.w	r2, r4, #61	; 0x3d
 8004f6e:	4620      	mov	r0, r4
 8004f70:	f7ff fe69 	bl	8004c46 <SX127X_SPIBurstWrite>
	module->lastTransTick = HAL_GetTick();
 8004f74:	f000 fcf8 	bl	8005968 <HAL_GetTick>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	4b06      	ldr	r3, [pc, #24]	; (8004f94 <SX127X_startTransmission+0x70>)
	module->lastTransTick = HAL_GetTick();
 8004f7c:	6160      	str	r0, [r4, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004f7e:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8004f80:	bf94      	ite	ls
 8004f82:	228b      	movls	r2, #139	; 0x8b
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8004f84:	2283      	movhi	r2, #131	; 0x83
 8004f86:	2101      	movs	r1, #1
 8004f88:	4620      	mov	r0, r4
 8004f8a:	f7ff fe29 	bl	8004be0 <SX127X_SPIWrite>
	module->TXrequest = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	7463      	strb	r3, [r4, #17]

}
 8004f92:	bd10      	pop	{r4, pc}
 8004f94:	00834015 	.word	0x00834015

08004f98 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght)
{
 8004f98:	4603      	mov	r3, r0
	if (module->TXrequest == 0 && module->status != TX)
 8004f9a:	7c40      	ldrb	r0, [r0, #17]
 8004f9c:	b930      	cbnz	r0, 8004fac <SX127X_transmitAsync+0x14>
 8004f9e:	7c1a      	ldrb	r2, [r3, #16]
 8004fa0:	2a03      	cmp	r2, #3
 8004fa2:	d003      	beq.n	8004fac <SX127X_transmitAsync+0x14>
	{
		module->len = lenght;
		module->TXrequest = 1;
 8004fa4:	2201      	movs	r2, #1
		module->len = lenght;
 8004fa6:	7219      	strb	r1, [r3, #8]
		module->TXrequest = 1;
 8004fa8:	745a      	strb	r2, [r3, #17]

		return HAL_OK;
 8004faa:	4770      	bx	lr
	}
	else
		return HAL_ERROR;
 8004fac:	2001      	movs	r0, #1
}
 8004fae:	4770      	bx	lr

08004fb0 <SX127X_RSSI>:
		module->status = UNINITIALISED;
	}
}

int16_t SX127X_RSSI(SX127X_t *module)
{
 8004fb0:	b508      	push	{r3, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004fb2:	6802      	ldr	r2, [r0, #0]
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <SX127X_RSSI+0x20>)
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 164;
 8004fb6:	211b      	movs	r1, #27
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d804      	bhi.n	8004fc6 <SX127X_RSSI+0x16>
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 164;
 8004fbc:	f7ff fe02 	bl	8004bc4 <SX127X_SPIRead>
 8004fc0:	38a4      	subs	r0, #164	; 0xa4
	else
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 157;
 8004fc2:	b200      	sxth	r0, r0
}
 8004fc4:	bd08      	pop	{r3, pc}
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 157;
 8004fc6:	f7ff fdfd 	bl	8004bc4 <SX127X_SPIRead>
 8004fca:	389d      	subs	r0, #157	; 0x9d
 8004fcc:	e7f9      	b.n	8004fc2 <SX127X_RSSI+0x12>
 8004fce:	bf00      	nop
 8004fd0:	00834015 	.word	0x00834015

08004fd4 <SX127X_RSSI_Pack>:

int16_t SX127X_RSSI_Pack(SX127X_t *module)
{
 8004fd4:	b508      	push	{r3, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004fd6:	6802      	ldr	r2, [r0, #0]
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <SX127X_RSSI_Pack+0x20>)
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 164;
 8004fda:	211a      	movs	r1, #26
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d804      	bhi.n	8004fea <SX127X_RSSI_Pack+0x16>
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 164;
 8004fe0:	f7ff fdf0 	bl	8004bc4 <SX127X_SPIRead>
 8004fe4:	38a4      	subs	r0, #164	; 0xa4
	else
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 157;
 8004fe6:	b200      	sxth	r0, r0
}
 8004fe8:	bd08      	pop	{r3, pc}
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 157;
 8004fea:	f7ff fdeb 	bl	8004bc4 <SX127X_SPIRead>
 8004fee:	389d      	subs	r0, #157	; 0x9d
 8004ff0:	e7f9      	b.n	8004fe6 <SX127X_RSSI_Pack+0x12>
 8004ff2:	bf00      	nop
 8004ff4:	00834015 	.word	0x00834015

08004ff8 <SX127X_readStatus>:
	else
		return -ret;
}

void SX127X_readStatus(SX127X_t *module)
{
 8004ff8:	b510      	push	{r4, lr}
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8004ffa:	2118      	movs	r1, #24
{
 8004ffc:	4604      	mov	r4, r0
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8004ffe:	f7ff fde1 	bl	8004bc4 <SX127X_SPIRead>
 8005002:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 8005006:	f010 0001 	ands.w	r0, r0, #1
 800500a:	d008      	beq.n	800501e <SX127X_readStatus+0x26>
	{
		module->signalDetected = true;
 800500c:	2301      	movs	r3, #1
 800500e:	7723      	strb	r3, [r4, #28]
		module->lastSignalTick = HAL_GetTick();
 8005010:	f000 fcaa 	bl	8005968 <HAL_GetTick>
 8005014:	61a0      	str	r0, [r4, #24]
		module->watchdogTick = HAL_GetTick();
 8005016:	f000 fca7 	bl	8005968 <HAL_GetTick>
 800501a:	67e0      	str	r0, [r4, #124]	; 0x7c
	}
	else
		module->signalDetected = false;
}
 800501c:	bd10      	pop	{r4, pc}
		module->signalDetected = false;
 800501e:	7720      	strb	r0, [r4, #28]
}
 8005020:	e7fc      	b.n	800501c <SX127X_readStatus+0x24>

08005022 <SX127X_readIrq>:

void SX127X_readIrq(SX127X_t *module)
{
 8005022:	b510      	push	{r4, lr}
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8005024:	2112      	movs	r1, #18
{
 8005026:	4604      	mov	r4, r0
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8005028:	f7ff fdcc 	bl	8004bc4 <SX127X_SPIRead>
 800502c:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 8005030:	bd10      	pop	{r4, pc}
	...

08005034 <SX127X_Routine>:
{
 8005034:	b510      	push	{r4, lr}
 8005036:	4604      	mov	r4, r0
	SX127X_readStatus(module);
 8005038:	f7ff ffde 	bl	8004ff8 <SX127X_readStatus>
	SX127X_readIrq(module);
 800503c:	4620      	mov	r0, r4
 800503e:	f7ff fff0 	bl	8005022 <SX127X_readIrq>
	if (module->status == UNINITIALISED)
 8005042:	7c23      	ldrb	r3, [r4, #16]
 8005044:	b92b      	cbnz	r3, 8005052 <SX127X_Routine+0x1e>
		SX127X_Reset(module);
 8005046:	4620      	mov	r0, r4
 8005048:	f7ff fd7b 	bl	8004b42 <SX127X_Reset>
		SX127X_config(module);
 800504c:	4620      	mov	r0, r4
 800504e:	f7ff fe65 	bl	8004d1c <SX127X_config>
	if ((module->status == SLEEP || module->status == STANDBY)
 8005052:	7c23      	ldrb	r3, [r4, #16]
 8005054:	3b01      	subs	r3, #1
 8005056:	2b01      	cmp	r3, #1
 8005058:	d806      	bhi.n	8005068 <SX127X_Routine+0x34>
			&& module->alwaysRX)
 800505a:	7be3      	ldrb	r3, [r4, #15]
 800505c:	b123      	cbz	r3, 8005068 <SX127X_Routine+0x34>
		SX127X_startRx(module, 1000);
 800505e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff fef0 	bl	8004e48 <SX127X_startRx>
	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 8005068:	7c63      	ldrb	r3, [r4, #17]
 800506a:	b133      	cbz	r3, 800507a <SX127X_Routine+0x46>
 800506c:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8005070:	07d8      	lsls	r0, r3, #31
 8005072:	d402      	bmi.n	800507a <SX127X_Routine+0x46>
		SX127X_startTransmission(module);
 8005074:	4620      	mov	r0, r4
 8005076:	f7ff ff55 	bl	8004f24 <SX127X_startTransmission>
	SX127X_readIrq(module);
 800507a:	4620      	mov	r0, r4
 800507c:	f7ff ffd1 	bl	8005022 <SX127X_readIrq>
	if (module->irq & IRQ_TX_DONE)
 8005080:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8005084:	0719      	lsls	r1, r3, #28
 8005086:	d506      	bpl.n	8005096 <SX127X_Routine+0x62>
		SX127X_clearIrq(module);
 8005088:	4620      	mov	r0, r4
 800508a:	f7ff fed9 	bl	8004e40 <SX127X_clearIrq>
		SX127X_startRx(module, 100);
 800508e:	2164      	movs	r1, #100	; 0x64
 8005090:	4620      	mov	r0, r4
 8005092:	f7ff fed9 	bl	8004e48 <SX127X_startRx>
	if (module->irq & IRQ_RX_DONE)
 8005096:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800509a:	065a      	lsls	r2, r3, #25
 800509c:	d509      	bpl.n	80050b2 <SX127X_Routine+0x7e>
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 800509e:	f3c3 1340 	ubfx	r3, r3, #5, #1
		SX127X_receive(module);
 80050a2:	4620      	mov	r0, r4
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 80050a4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		SX127X_receive(module);
 80050a8:	f7ff ff16 	bl	8004ed8 <SX127X_receive>
		SX127X_clearIrq(module);
 80050ac:	4620      	mov	r0, r4
 80050ae:	f7ff fec7 	bl	8004e40 <SX127X_clearIrq>
	if (((SX127X_SPIRead(module, 0x1D)) != (module->bw << 4 | module->cr << 1 | module->implicitHeader))
 80050b2:	211d      	movs	r1, #29
 80050b4:	4620      	mov	r0, r4
 80050b6:	f7ff fd85 	bl	8004bc4 <SX127X_SPIRead>
 80050ba:	79e3      	ldrb	r3, [r4, #7]
 80050bc:	79a2      	ldrb	r2, [r4, #6]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80050c4:	7aa2      	ldrb	r2, [r4, #10]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	4298      	cmp	r0, r3
 80050ca:	d00a      	beq.n	80050e2 <SX127X_Routine+0xae>
		module->wdCounter++;
 80050cc:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 80050d0:	3301      	adds	r3, #1
 80050d2:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
		module->watchdogTick = HAL_GetTick();
 80050d6:	f000 fc47 	bl	8005968 <HAL_GetTick>
		module->status = UNINITIALISED;
 80050da:	2300      	movs	r3, #0
		module->watchdogTick = HAL_GetTick();
 80050dc:	67e0      	str	r0, [r4, #124]	; 0x7c
		module->status = UNINITIALISED;
 80050de:	7423      	strb	r3, [r4, #16]
}
 80050e0:	bd10      	pop	{r4, pc}
			|| (HAL_GetTick() - module->watchdogTick > 120000)) //Watchdog
 80050e2:	f000 fc41 	bl	8005968 <HAL_GetTick>
 80050e6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80050e8:	1ac0      	subs	r0, r0, r3
 80050ea:	4b02      	ldr	r3, [pc, #8]	; (80050f4 <SX127X_Routine+0xc0>)
 80050ec:	4298      	cmp	r0, r3
 80050ee:	d8ed      	bhi.n	80050cc <SX127X_Routine+0x98>
 80050f0:	e7f6      	b.n	80050e0 <SX127X_Routine+0xac>
 80050f2:	bf00      	nop
 80050f4:	0001d4c0 	.word	0x0001d4c0

080050f8 <SX127X_getRandom>:
		;
}

uint8_t SX127X_getRandom(SX127X_t *module)
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
 80050f8:	212c      	movs	r1, #44	; 0x2c
 80050fa:	f7ff bd63 	b.w	8004bc4 <SX127X_SPIRead>

080050fe <SX127X_init>:
}

void SX127X_init(SX127X_t *module)
{
 80050fe:	b510      	push	{r4, lr}
 8005100:	4604      	mov	r4, r0

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 8005102:	f8b0 1064 	ldrh.w	r1, [r0, #100]	; 0x64
 8005106:	2200      	movs	r2, #0
 8005108:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800510a:	f001 fa47 	bl	800659c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 800510e:	200f      	movs	r0, #15
 8005110:	f000 fc30 	bl	8005974 <HAL_Delay>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8005114:	2201      	movs	r2, #1
 8005116:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 800511a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800511c:	f001 fa3e 	bl	800659c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8005120:	200f      	movs	r0, #15
 8005122:	f000 fc27 	bl	8005974 <HAL_Delay>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005126:	2142      	movs	r1, #66	; 0x42
 8005128:	4620      	mov	r0, r4
 800512a:	f7ff fd4b 	bl	8004bc4 <SX127X_SPIRead>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 800512e:	2142      	movs	r1, #66	; 0x42
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005130:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff fd45 	bl	8004bc4 <SX127X_SPIRead>
 800513a:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 800513e:	bd10      	pop	{r4, pc}

08005140 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005140:	b570      	push	{r4, r5, r6, lr}
 8005142:	460e      	mov	r6, r1
 8005144:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005146:	2500      	movs	r5, #0
 8005148:	42a5      	cmp	r5, r4
 800514a:	db01      	blt.n	8005150 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800514c:	4620      	mov	r0, r4
 800514e:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005150:	f3af 8000 	nop.w
 8005154:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005156:	3501      	adds	r5, #1
 8005158:	e7f6      	b.n	8005148 <_read+0x8>

0800515a <_close>:
}

int _close(int file)
{
	return -1;
}
 800515a:	f04f 30ff 	mov.w	r0, #4294967295
 800515e:	4770      	bx	lr

08005160 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8005160:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8005164:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005166:	604b      	str	r3, [r1, #4]
}
 8005168:	4770      	bx	lr

0800516a <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800516a:	2001      	movs	r0, #1
 800516c:	4770      	bx	lr

0800516e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800516e:	2000      	movs	r0, #0
 8005170:	4770      	bx	lr
	...

08005174 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005174:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <_sbrk+0x30>)
{
 8005176:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8005178:	6819      	ldr	r1, [r3, #0]
{
 800517a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800517c:	b909      	cbnz	r1, 8005182 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800517e:	490a      	ldr	r1, [pc, #40]	; (80051a8 <_sbrk+0x34>)
 8005180:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	4909      	ldr	r1, [pc, #36]	; (80051ac <_sbrk+0x38>)
 8005186:	4c0a      	ldr	r4, [pc, #40]	; (80051b0 <_sbrk+0x3c>)
 8005188:	4402      	add	r2, r0
 800518a:	1b09      	subs	r1, r1, r4
 800518c:	428a      	cmp	r2, r1
 800518e:	d906      	bls.n	800519e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8005190:	f003 f958 	bl	8008444 <__errno>
 8005194:	230c      	movs	r3, #12
 8005196:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005198:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800519c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800519e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 80051a0:	e7fc      	b.n	800519c <_sbrk+0x28>
 80051a2:	bf00      	nop
 80051a4:	20000374 	.word	0x20000374
 80051a8:	200019e0 	.word	0x200019e0
 80051ac:	20005000 	.word	0x20005000
 80051b0:	00000400 	.word	0x00000400

080051b4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80051b4:	4770      	bx	lr
	...

080051b8 <uartInit>:
uint8_t uartPos;
uint8_t len;
uint8_t nodeNum;

void uartInit() {
	HAL_UART_Receive_IT(&huart1, &uartIn, 1);
 80051b8:	2201      	movs	r2, #1
 80051ba:	4902      	ldr	r1, [pc, #8]	; (80051c4 <uartInit+0xc>)
 80051bc:	4802      	ldr	r0, [pc, #8]	; (80051c8 <uartInit+0x10>)
 80051be:	f003 b928 	b.w	8008412 <HAL_UART_Receive_IT>
 80051c2:	bf00      	nop
 80051c4:	20000b98 	.word	0x20000b98
 80051c8:	20000c30 	.word	0x20000c30

080051cc <readByte>:
}

void readByte(void) {
 80051cc:	b510      	push	{r4, lr}
	switch (uartIn) {
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <readByte+0x44>)
 80051d0:	7819      	ldrb	r1, [r3, #0]
 80051d2:	4b10      	ldr	r3, [pc, #64]	; (8005214 <readByte+0x48>)
 80051d4:	293c      	cmp	r1, #60	; 0x3c
 80051d6:	d00b      	beq.n	80051f0 <readByte+0x24>
 80051d8:	293e      	cmp	r1, #62	; 0x3e
 80051da:	4c0f      	ldr	r4, [pc, #60]	; (8005218 <readByte+0x4c>)
 80051dc:	d00b      	beq.n	80051f6 <readByte+0x2a>
		flag.uartGotMessage = 1;
		uartPos = 0;
		break;

	default:
		uartRx[uartPos++] = uartIn;
 80051de:	7818      	ldrb	r0, [r3, #0]
 80051e0:	1c42      	adds	r2, r0, #1
 80051e2:	b2d2      	uxtb	r2, r2
		break;
	}
	if (uartPos > 126)
 80051e4:	2a7e      	cmp	r2, #126	; 0x7e
		uartRx[uartPos++] = uartIn;
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	5421      	strb	r1, [r4, r0]
	if (uartPos > 126)
 80051ea:	d90f      	bls.n	800520c <readByte+0x40>
		uartPos = 126;
 80051ec:	227e      	movs	r2, #126	; 0x7e
 80051ee:	e000      	b.n	80051f2 <readByte+0x26>
		uartPos = 0;
 80051f0:	2200      	movs	r2, #0
		uartPos = 126;
 80051f2:	701a      	strb	r2, [r3, #0]
}
 80051f4:	e00a      	b.n	800520c <readByte+0x40>
		len = uartPos;
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	4908      	ldr	r1, [pc, #32]	; (800521c <readByte+0x50>)
		flag.uartGotMessage = 1;
 80051fa:	4809      	ldr	r0, [pc, #36]	; (8005220 <readByte+0x54>)
		len = uartPos;
 80051fc:	700a      	strb	r2, [r1, #0]
		uartRx[uartPos] = 0;
 80051fe:	2100      	movs	r1, #0
 8005200:	54a1      	strb	r1, [r4, r2]
		flag.uartGotMessage = 1;
 8005202:	7842      	ldrb	r2, [r0, #1]
		uartPos = 0;
 8005204:	7019      	strb	r1, [r3, #0]
		flag.uartGotMessage = 1;
 8005206:	f042 0201 	orr.w	r2, r2, #1
 800520a:	7042      	strb	r2, [r0, #1]
}
 800520c:	bd10      	pop	{r4, pc}
 800520e:	bf00      	nop
 8005210:	20000b98 	.word	0x20000b98
 8005214:	200015c9 	.word	0x200015c9
 8005218:	200015cb 	.word	0x200015cb
 800521c:	2000164b 	.word	0x2000164b
 8005220:	20000b4c 	.word	0x20000b4c

08005224 <uartReceiveHandler>:

void uartReceiveHandler() {
 8005224:	b530      	push	{r4, r5, lr}
	char tempString[20];

	uint8_t l = len - 1;
 8005226:	4bbc      	ldr	r3, [pc, #752]	; (8005518 <uartReceiveHandler+0x2f4>)
void uartReceiveHandler() {
 8005228:	b087      	sub	sp, #28
	uint8_t l = len - 1;
 800522a:	781c      	ldrb	r4, [r3, #0]
	uint8_t *ptr = uartRx + 1;

	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 800522c:	f000 fb9c 	bl	8005968 <HAL_GetTick>
 8005230:	4bba      	ldr	r3, [pc, #744]	; (800551c <uartReceiveHandler+0x2f8>)
 8005232:	4dbb      	ldr	r5, [pc, #748]	; (8005520 <uartReceiveHandler+0x2fc>)
 8005234:	681b      	ldr	r3, [r3, #0]
	uint8_t l = len - 1;
 8005236:	3c01      	subs	r4, #1
	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 8005238:	1ac0      	subs	r0, r0, r3
 800523a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
		switch (uartRx[0]) {
 800523e:	782b      	ldrb	r3, [r5, #0]
	uint8_t l = len - 1;
 8005240:	b2e4      	uxtb	r4, r4
	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 8005242:	f240 8183 	bls.w	800554c <uartReceiveHandler+0x328>
		switch (uartRx[0]) {
 8005246:	2b5a      	cmp	r3, #90	; 0x5a
 8005248:	d860      	bhi.n	800530c <uartReceiveHandler+0xe8>
 800524a:	2b30      	cmp	r3, #48	; 0x30
 800524c:	d803      	bhi.n	8005256 <uartReceiveHandler+0x32>
			netHandler.connected = true;
			flag.lcdRefreshRequest = true;
			break;

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) "//Bad Format", 10, 100);
 800524e:	2364      	movs	r3, #100	; 0x64
 8005250:	220a      	movs	r2, #10
 8005252:	49b4      	ldr	r1, [pc, #720]	; (8005524 <uartReceiveHandler+0x300>)
 8005254:	e0d9      	b.n	800540a <uartReceiveHandler+0x1e6>
 8005256:	3b31      	subs	r3, #49	; 0x31
 8005258:	2b29      	cmp	r3, #41	; 0x29
 800525a:	d8f8      	bhi.n	800524e <uartReceiveHandler+0x2a>
 800525c:	a201      	add	r2, pc, #4	; (adr r2, 8005264 <uartReceiveHandler+0x40>)
 800525e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005262:	bf00      	nop
 8005264:	08005379 	.word	0x08005379
 8005268:	08005387 	.word	0x08005387
 800526c:	08005395 	.word	0x08005395
 8005270:	080053a3 	.word	0x080053a3
 8005274:	080053cf 	.word	0x080053cf
 8005278:	0800524f 	.word	0x0800524f
 800527c:	0800524f 	.word	0x0800524f
 8005280:	080053b3 	.word	0x080053b3
 8005284:	080053c1 	.word	0x080053c1
 8005288:	0800524f 	.word	0x0800524f
 800528c:	0800524f 	.word	0x0800524f
 8005290:	0800524f 	.word	0x0800524f
 8005294:	0800524f 	.word	0x0800524f
 8005298:	0800524f 	.word	0x0800524f
 800529c:	0800524f 	.word	0x0800524f
 80052a0:	0800524f 	.word	0x0800524f
 80052a4:	0800524f 	.word	0x0800524f
 80052a8:	0800524f 	.word	0x0800524f
 80052ac:	080053f3 	.word	0x080053f3
 80052b0:	080054e7 	.word	0x080054e7
 80052b4:	0800524f 	.word	0x0800524f
 80052b8:	0800524f 	.word	0x0800524f
 80052bc:	0800524f 	.word	0x0800524f
 80052c0:	0800524f 	.word	0x0800524f
 80052c4:	08005501 	.word	0x08005501
 80052c8:	0800524f 	.word	0x0800524f
 80052cc:	080054e7 	.word	0x080054e7
 80052d0:	0800524f 	.word	0x0800524f
 80052d4:	0800524f 	.word	0x0800524f
 80052d8:	080054e7 	.word	0x080054e7
 80052dc:	0800524f 	.word	0x0800524f
 80052e0:	0800524f 	.word	0x0800524f
 80052e4:	0800524f 	.word	0x0800524f
 80052e8:	080053e9 	.word	0x080053e9
 80052ec:	080053dd 	.word	0x080053dd
 80052f0:	0800524f 	.word	0x0800524f
 80052f4:	0800524f 	.word	0x0800524f
 80052f8:	0800524f 	.word	0x0800524f
 80052fc:	0800524f 	.word	0x0800524f
 8005300:	08005455 	.word	0x08005455
 8005304:	0800524f 	.word	0x0800524f
 8005308:	0800543b 	.word	0x0800543b
		switch (uartRx[0]) {
 800530c:	3b65      	subs	r3, #101	; 0x65
 800530e:	b2da      	uxtb	r2, r3
 8005310:	2a15      	cmp	r2, #21
 8005312:	d89c      	bhi.n	800524e <uartReceiveHandler+0x2a>
 8005314:	2b15      	cmp	r3, #21
 8005316:	d89a      	bhi.n	800524e <uartReceiveHandler+0x2a>
 8005318:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <uartReceiveHandler+0xfc>)
 800531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800531e:	bf00      	nop
 8005320:	080054b7 	.word	0x080054b7
 8005324:	0800524f 	.word	0x0800524f
 8005328:	0800524f 	.word	0x0800524f
 800532c:	080054e7 	.word	0x080054e7
 8005330:	0800524f 	.word	0x0800524f
 8005334:	0800524f 	.word	0x0800524f
 8005338:	0800524f 	.word	0x0800524f
 800533c:	0800524f 	.word	0x0800524f
 8005340:	0800524f 	.word	0x0800524f
 8005344:	0800524f 	.word	0x0800524f
 8005348:	08005487 	.word	0x08005487
 800534c:	0800524f 	.word	0x0800524f
 8005350:	08005413 	.word	0x08005413
 8005354:	0800524f 	.word	0x0800524f
 8005358:	0800524f 	.word	0x0800524f
 800535c:	0800524f 	.word	0x0800524f
 8005360:	08005473 	.word	0x08005473
 8005364:	0800524f 	.word	0x0800524f
 8005368:	08005427 	.word	0x08005427
 800536c:	0800524f 	.word	0x0800524f
 8005370:	0800549b 	.word	0x0800549b
 8005374:	0800545d 	.word	0x0800545d
			settings.realFrequency = DecToInt(ptr, l);
 8005378:	4621      	mov	r1, r4
 800537a:	486b      	ldr	r0, [pc, #428]	; (8005528 <uartReceiveHandler+0x304>)
 800537c:	f7fc f83c 	bl	80013f8 <DecToInt>
 8005380:	4b6a      	ldr	r3, [pc, #424]	; (800552c <uartReceiveHandler+0x308>)
			break;
		}
	else {
		switch (uartRx[0]) {
		case UART_FREQUENCY:
			nodeSettings.realFrequency = DecToInt(ptr, l);
 8005382:	6018      	str	r0, [r3, #0]
			break;
 8005384:	e013      	b.n	80053ae <uartReceiveHandler+0x18a>
			settings.sf = DecToInt(ptr, l);
 8005386:	4621      	mov	r1, r4
 8005388:	4867      	ldr	r0, [pc, #412]	; (8005528 <uartReceiveHandler+0x304>)
 800538a:	f7fc f835 	bl	80013f8 <DecToInt>
 800538e:	4b67      	ldr	r3, [pc, #412]	; (800552c <uartReceiveHandler+0x308>)
		case UART_BW:
			nodeSettings.bw = DecToInt(ptr, l);
			break;

		case UART_SYNCWORD:
			nodeSettings.sw = HexToInt(ptr, l);
 8005390:	7398      	strb	r0, [r3, #14]
			break;
 8005392:	e00c      	b.n	80053ae <uartReceiveHandler+0x18a>
			settings.bw = DecToInt(ptr, l);
 8005394:	4621      	mov	r1, r4
 8005396:	4864      	ldr	r0, [pc, #400]	; (8005528 <uartReceiveHandler+0x304>)
 8005398:	f7fc f82e 	bl	80013f8 <DecToInt>
 800539c:	4b63      	ldr	r3, [pc, #396]	; (800552c <uartReceiveHandler+0x308>)
		case UART_CR:
			nodeSettings.cr = DecToInt(ptr, l);
			break;

		case UART_POWER:
			nodeSettings.power = DecToInt(ptr, l);
 800539e:	73d8      	strb	r0, [r3, #15]
			break;
 80053a0:	e005      	b.n	80053ae <uartReceiveHandler+0x18a>
			settings.syncWord = HexToInt(ptr, l);
 80053a2:	4621      	mov	r1, r4
 80053a4:	4860      	ldr	r0, [pc, #384]	; (8005528 <uartReceiveHandler+0x304>)
 80053a6:	f7fc f83f 	bl	8001428 <HexToInt>
 80053aa:	4b60      	ldr	r3, [pc, #384]	; (800552c <uartReceiveHandler+0x308>)
 80053ac:	7458      	strb	r0, [r3, #17]
		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
			break;
		}
	}
}
 80053ae:	b007      	add	sp, #28
 80053b0:	bd30      	pop	{r4, r5, pc}
			settings.preamble = DecToInt(ptr, l);
 80053b2:	4621      	mov	r1, r4
 80053b4:	485c      	ldr	r0, [pc, #368]	; (8005528 <uartReceiveHandler+0x304>)
 80053b6:	f7fc f81f 	bl	80013f8 <DecToInt>
 80053ba:	4b5c      	ldr	r3, [pc, #368]	; (800552c <uartReceiveHandler+0x308>)
 80053bc:	8198      	strh	r0, [r3, #12]
			break;
 80053be:	e7f6      	b.n	80053ae <uartReceiveHandler+0x18a>
			settings.cr = DecToInt(ptr, l);
 80053c0:	4621      	mov	r1, r4
 80053c2:	4859      	ldr	r0, [pc, #356]	; (8005528 <uartReceiveHandler+0x304>)
 80053c4:	f7fc f818 	bl	80013f8 <DecToInt>
 80053c8:	4b58      	ldr	r3, [pc, #352]	; (800552c <uartReceiveHandler+0x308>)
			nodeSettings.useLed = DecToInt(ptr, l);
 80053ca:	7418      	strb	r0, [r3, #16]
			break;
 80053cc:	e7ef      	b.n	80053ae <uartReceiveHandler+0x18a>
			settings.power = DecToInt(ptr, l);
 80053ce:	4621      	mov	r1, r4
 80053d0:	4855      	ldr	r0, [pc, #340]	; (8005528 <uartReceiveHandler+0x304>)
 80053d2:	f7fc f811 	bl	80013f8 <DecToInt>
 80053d6:	4b55      	ldr	r3, [pc, #340]	; (800552c <uartReceiveHandler+0x308>)
 80053d8:	7498      	strb	r0, [r3, #18]
			break;
 80053da:	e7e8      	b.n	80053ae <uartReceiveHandler+0x18a>
			flag.saveSettings = 1;
 80053dc:	4a54      	ldr	r2, [pc, #336]	; (8005530 <uartReceiveHandler+0x30c>)
 80053de:	7813      	ldrb	r3, [r2, #0]
 80053e0:	f043 0310 	orr.w	r3, r3, #16
			flag.sendConfig = 1;
 80053e4:	7013      	strb	r3, [r2, #0]
			break;
 80053e6:	e7e2      	b.n	80053ae <uartReceiveHandler+0x18a>
			flag.sendConfig = 1;
 80053e8:	4a51      	ldr	r2, [pc, #324]	; (8005530 <uartReceiveHandler+0x30c>)
 80053ea:	7813      	ldrb	r3, [r2, #0]
 80053ec:	f043 0320 	orr.w	r3, r3, #32
 80053f0:	e7f8      	b.n	80053e4 <uartReceiveHandler+0x1c0>
			sprintf(tempString, "<aBv%d>", version);
 80053f2:	4b50      	ldr	r3, [pc, #320]	; (8005534 <uartReceiveHandler+0x310>)
 80053f4:	4950      	ldr	r1, [pc, #320]	; (8005538 <uartReceiveHandler+0x314>)
 80053f6:	881a      	ldrh	r2, [r3, #0]
 80053f8:	a801      	add	r0, sp, #4
 80053fa:	f003 f8f1 	bl	80085e0 <siprintf>
					strlen(tempString), 100);
 80053fe:	a801      	add	r0, sp, #4
 8005400:	f7fa fea6 	bl	8000150 <strlen>
			HAL_UART_Transmit(&huart1, (uint8_t*) tempString,
 8005404:	2364      	movs	r3, #100	; 0x64
 8005406:	b282      	uxth	r2, r0
 8005408:	a901      	add	r1, sp, #4
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
 800540a:	484c      	ldr	r0, [pc, #304]	; (800553c <uartReceiveHandler+0x318>)
 800540c:	f002 fe36 	bl	800807c <HAL_UART_Transmit>
}
 8005410:	e7cd      	b.n	80053ae <uartReceiveHandler+0x18a>
			settings.warningDelay = 1000 * DecToInt(ptr, l);
 8005412:	4621      	mov	r1, r4
 8005414:	4844      	ldr	r0, [pc, #272]	; (8005528 <uartReceiveHandler+0x304>)
 8005416:	f7fb ffef 	bl	80013f8 <DecToInt>
 800541a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800541e:	4343      	muls	r3, r0
 8005420:	4a42      	ldr	r2, [pc, #264]	; (800552c <uartReceiveHandler+0x308>)
 8005422:	6053      	str	r3, [r2, #4]
			break;
 8005424:	e7c3      	b.n	80053ae <uartReceiveHandler+0x18a>
			settings.superWarningDelay = 1000 * DecToInt(ptr, l);
 8005426:	4621      	mov	r1, r4
 8005428:	483f      	ldr	r0, [pc, #252]	; (8005528 <uartReceiveHandler+0x304>)
 800542a:	f7fb ffe5 	bl	80013f8 <DecToInt>
 800542e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005432:	4343      	muls	r3, r0
 8005434:	4a3d      	ldr	r2, [pc, #244]	; (800552c <uartReceiveHandler+0x308>)
 8005436:	6093      	str	r3, [r2, #8]
			break;
 8005438:	e7b9      	b.n	80053ae <uartReceiveHandler+0x18a>
			memset(settings.SSID, 0, sizeof(settings.SSID));
 800543a:	2210      	movs	r2, #16
 800543c:	2100      	movs	r1, #0
 800543e:	4840      	ldr	r0, [pc, #256]	; (8005540 <uartReceiveHandler+0x31c>)
 8005440:	f003 f838 	bl	80084b4 <memset>
			memcpy(settings.SSID, ptr, l);
 8005444:	4622      	mov	r2, r4
 8005446:	4938      	ldr	r1, [pc, #224]	; (8005528 <uartReceiveHandler+0x304>)
 8005448:	483d      	ldr	r0, [pc, #244]	; (8005540 <uartReceiveHandler+0x31c>)
}
 800544a:	b007      	add	sp, #28
 800544c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			memcpy(settings.WiFiPass, ptr, l);
 8005450:	f003 b822 	b.w	8008498 <memcpy>
 8005454:	4622      	mov	r2, r4
 8005456:	4934      	ldr	r1, [pc, #208]	; (8005528 <uartReceiveHandler+0x304>)
 8005458:	483a      	ldr	r0, [pc, #232]	; (8005544 <uartReceiveHandler+0x320>)
 800545a:	e7f6      	b.n	800544a <uartReceiveHandler+0x226>
			netHandler.lastStatusCheck = HAL_GetTick();
 800545c:	f000 fa84 	bl	8005968 <HAL_GetTick>
			netHandler.plugged = true;
 8005460:	2201      	movs	r2, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8005462:	4b39      	ldr	r3, [pc, #228]	; (8005548 <uartReceiveHandler+0x324>)
 8005464:	6118      	str	r0, [r3, #16]
			netHandler.plugged = true;
 8005466:	701a      	strb	r2, [r3, #0]
			flag.lcdRefreshRequest = true;
 8005468:	4a31      	ldr	r2, [pc, #196]	; (8005530 <uartReceiveHandler+0x30c>)
 800546a:	7813      	ldrb	r3, [r2, #0]
 800546c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005470:	e7b8      	b.n	80053e4 <uartReceiveHandler+0x1c0>
			netHandler.lastStatusCheck = HAL_GetTick();
 8005472:	f000 fa79 	bl	8005968 <HAL_GetTick>
			netHandler.connected = ptr[0];
 8005476:	786b      	ldrb	r3, [r5, #1]
			netHandler.lastStatusCheck = HAL_GetTick();
 8005478:	4a33      	ldr	r2, [pc, #204]	; (8005548 <uartReceiveHandler+0x324>)
			netHandler.connected = ptr[0];
 800547a:	3b00      	subs	r3, #0
 800547c:	bf18      	it	ne
 800547e:	2301      	movne	r3, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8005480:	6110      	str	r0, [r2, #16]
			netHandler.connected = ptr[0];
 8005482:	7093      	strb	r3, [r2, #2]
 8005484:	e7f0      	b.n	8005468 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 8005486:	f000 fa6f 	bl	8005968 <HAL_GetTick>
			netHandler.online = ptr[0];
 800548a:	786b      	ldrb	r3, [r5, #1]
			netHandler.lastStatusCheck = HAL_GetTick();
 800548c:	4a2e      	ldr	r2, [pc, #184]	; (8005548 <uartReceiveHandler+0x324>)
			netHandler.online = ptr[0];
 800548e:	3b00      	subs	r3, #0
 8005490:	bf18      	it	ne
 8005492:	2301      	movne	r3, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8005494:	6110      	str	r0, [r2, #16]
			netHandler.online = ptr[0];
 8005496:	70d3      	strb	r3, [r2, #3]
			flag.lcdRefreshRequest = true;
 8005498:	e7e6      	b.n	8005468 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 800549a:	f000 fa65 	bl	8005968 <HAL_GetTick>
 800549e:	4d2a      	ldr	r5, [pc, #168]	; (8005548 <uartReceiveHandler+0x324>)
			netHandler.netCount = DecToInt(ptr, l);
 80054a0:	4621      	mov	r1, r4
			netHandler.lastStatusCheck = HAL_GetTick();
 80054a2:	6128      	str	r0, [r5, #16]
			netHandler.netCount = DecToInt(ptr, l);
 80054a4:	4820      	ldr	r0, [pc, #128]	; (8005528 <uartReceiveHandler+0x304>)
 80054a6:	f7fb ffa7 	bl	80013f8 <DecToInt>
			netHandler.netRefreshInProgress = false;
 80054aa:	f44f 7380 	mov.w	r3, #256	; 0x100
			netHandler.netCount = DecToInt(ptr, l);
 80054ae:	f885 0631 	strb.w	r0, [r5, #1585]	; 0x631
			netHandler.netRefreshInProgress = false;
 80054b2:	80eb      	strh	r3, [r5, #6]
			flag.lcdRefreshRequest = 1;
 80054b4:	e7d8      	b.n	8005468 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 80054b6:	f000 fa57 	bl	8005968 <HAL_GetTick>
 80054ba:	4b23      	ldr	r3, [pc, #140]	; (8005548 <uartReceiveHandler+0x324>)
 80054bc:	6118      	str	r0, [r3, #16]
				while (i < 16) {
 80054be:	461a      	mov	r2, r3
				int i = 0;
 80054c0:	2000      	movs	r0, #0
					if (netHandler.nets[i][0] == 0) {
 80054c2:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80054c6:	b941      	cbnz	r1, 80054da <uartReceiveHandler+0x2b6>
						sprintf(netHandler.nets[i], "%s", ptr);
 80054c8:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 80054cc:	4916      	ldr	r1, [pc, #88]	; (8005528 <uartReceiveHandler+0x304>)
 80054ce:	3030      	adds	r0, #48	; 0x30
}
 80054d0:	b007      	add	sp, #28
 80054d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						sprintf(netHandler.nets[i], "%s", ptr);
 80054d6:	f003 b8a3 	b.w	8008620 <strcpy>
						i++;
 80054da:	3001      	adds	r0, #1
				while (i < 16) {
 80054dc:	2810      	cmp	r0, #16
 80054de:	f103 0320 	add.w	r3, r3, #32
 80054e2:	d1ee      	bne.n	80054c2 <uartReceiveHandler+0x29e>
 80054e4:	e763      	b.n	80053ae <uartReceiveHandler+0x18a>
			netHandler.TX = false;
 80054e6:	2500      	movs	r5, #0
 80054e8:	4c17      	ldr	r4, [pc, #92]	; (8005548 <uartReceiveHandler+0x324>)
 80054ea:	7165      	strb	r5, [r4, #5]
			netHandler.lastStatusCheck = HAL_GetTick();
 80054ec:	f000 fa3c 	bl	8005968 <HAL_GetTick>
			sprintf(netHandler.response, "%s", ptr);
 80054f0:	490d      	ldr	r1, [pc, #52]	; (8005528 <uartReceiveHandler+0x304>)
			netHandler.lastStatusCheck = HAL_GetTick();
 80054f2:	6120      	str	r0, [r4, #16]
			sprintf(netHandler.response, "%s", ptr);
 80054f4:	f204 6032 	addw	r0, r4, #1586	; 0x632
 80054f8:	f003 f892 	bl	8008620 <strcpy>
			netHandler.TX = false;
 80054fc:	7165      	strb	r5, [r4, #5]
			flag.lcdRefreshRequest = true;
 80054fe:	e7b3      	b.n	8005468 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 8005500:	f000 fa32 	bl	8005968 <HAL_GetTick>
 8005504:	4c10      	ldr	r4, [pc, #64]	; (8005548 <uartReceiveHandler+0x324>)
			sprintf(netHandler.ip, "%s", ptr);
 8005506:	4908      	ldr	r1, [pc, #32]	; (8005528 <uartReceiveHandler+0x304>)
			netHandler.lastStatusCheck = HAL_GetTick();
 8005508:	6120      	str	r0, [r4, #16]
			sprintf(netHandler.ip, "%s", ptr);
 800550a:	f104 0014 	add.w	r0, r4, #20
 800550e:	f003 f887 	bl	8008620 <strcpy>
			netHandler.connected = true;
 8005512:	2301      	movs	r3, #1
 8005514:	70a3      	strb	r3, [r4, #2]
			flag.lcdRefreshRequest = true;
 8005516:	e7a7      	b.n	8005468 <uartReceiveHandler+0x244>
 8005518:	2000164b 	.word	0x2000164b
 800551c:	20000cdc 	.word	0x20000cdc
 8005520:	200015cb 	.word	0x200015cb
 8005524:	0800b419 	.word	0x0800b419
 8005528:	200015cc 	.word	0x200015cc
 800552c:	20000a78 	.word	0x20000a78
 8005530:	20000b4c 	.word	0x20000b4c
 8005534:	0800b0bc 	.word	0x0800b0bc
 8005538:	0800b411 	.word	0x0800b411
 800553c:	20000c30 	.word	0x20000c30
 8005540:	20000a8b 	.word	0x20000a8b
 8005544:	20000a9b 	.word	0x20000a9b
 8005548:	20000e8c 	.word	0x20000e8c
		switch (uartRx[0]) {
 800554c:	2b39      	cmp	r3, #57	; 0x39
 800554e:	d80b      	bhi.n	8005568 <uartReceiveHandler+0x344>
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d90f      	bls.n	8005574 <uartReceiveHandler+0x350>
 8005554:	3b31      	subs	r3, #49	; 0x31
 8005556:	2b08      	cmp	r3, #8
 8005558:	d80c      	bhi.n	8005574 <uartReceiveHandler+0x350>
 800555a:	e8df f003 	tbb	[pc, r3]
 800555e:	150f      	.short	0x150f
 8005560:	0b37231c 	.word	0x0b37231c
 8005564:	290b      	.short	0x290b
 8005566:	30          	.byte	0x30
 8005567:	00          	.byte	0x00
 8005568:	2b69      	cmp	r3, #105	; 0x69
 800556a:	d042      	beq.n	80055f2 <uartReceiveHandler+0x3ce>
 800556c:	2b6e      	cmp	r3, #110	; 0x6e
 800556e:	d033      	beq.n	80055d8 <uartReceiveHandler+0x3b4>
 8005570:	2b4c      	cmp	r3, #76	; 0x4c
 8005572:	d038      	beq.n	80055e6 <uartReceiveHandler+0x3c2>
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
 8005574:	2364      	movs	r3, #100	; 0x64
 8005576:	220a      	movs	r2, #10
 8005578:	4921      	ldr	r1, [pc, #132]	; (8005600 <uartReceiveHandler+0x3dc>)
 800557a:	e746      	b.n	800540a <uartReceiveHandler+0x1e6>
			nodeSettings.realFrequency = DecToInt(ptr, l);
 800557c:	4621      	mov	r1, r4
 800557e:	4821      	ldr	r0, [pc, #132]	; (8005604 <uartReceiveHandler+0x3e0>)
 8005580:	f7fb ff3a 	bl	80013f8 <DecToInt>
 8005584:	4b20      	ldr	r3, [pc, #128]	; (8005608 <uartReceiveHandler+0x3e4>)
 8005586:	e6fc      	b.n	8005382 <uartReceiveHandler+0x15e>
			nodeSettings.sf = DecToInt(ptr, l);
 8005588:	4621      	mov	r1, r4
 800558a:	481e      	ldr	r0, [pc, #120]	; (8005604 <uartReceiveHandler+0x3e0>)
 800558c:	f7fb ff34 	bl	80013f8 <DecToInt>
 8005590:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <uartReceiveHandler+0x3e4>)
 8005592:	7318      	strb	r0, [r3, #12]
			break;
 8005594:	e70b      	b.n	80053ae <uartReceiveHandler+0x18a>
			nodeSettings.bw = DecToInt(ptr, l);
 8005596:	4621      	mov	r1, r4
 8005598:	481a      	ldr	r0, [pc, #104]	; (8005604 <uartReceiveHandler+0x3e0>)
 800559a:	f7fb ff2d 	bl	80013f8 <DecToInt>
 800559e:	4b1a      	ldr	r3, [pc, #104]	; (8005608 <uartReceiveHandler+0x3e4>)
 80055a0:	7358      	strb	r0, [r3, #13]
			break;
 80055a2:	e704      	b.n	80053ae <uartReceiveHandler+0x18a>
			nodeSettings.sw = HexToInt(ptr, l);
 80055a4:	4621      	mov	r1, r4
 80055a6:	4817      	ldr	r0, [pc, #92]	; (8005604 <uartReceiveHandler+0x3e0>)
 80055a8:	f7fb ff3e 	bl	8001428 <HexToInt>
 80055ac:	4b16      	ldr	r3, [pc, #88]	; (8005608 <uartReceiveHandler+0x3e4>)
 80055ae:	e6ef      	b.n	8005390 <uartReceiveHandler+0x16c>
			nodeSettings.preamble = DecToInt(ptr, l);
 80055b0:	4621      	mov	r1, r4
 80055b2:	4814      	ldr	r0, [pc, #80]	; (8005604 <uartReceiveHandler+0x3e0>)
 80055b4:	f7fb ff20 	bl	80013f8 <DecToInt>
 80055b8:	4b13      	ldr	r3, [pc, #76]	; (8005608 <uartReceiveHandler+0x3e4>)
 80055ba:	8118      	strh	r0, [r3, #8]
			break;
 80055bc:	e6f7      	b.n	80053ae <uartReceiveHandler+0x18a>
			nodeSettings.cr = DecToInt(ptr, l);
 80055be:	4621      	mov	r1, r4
 80055c0:	4810      	ldr	r0, [pc, #64]	; (8005604 <uartReceiveHandler+0x3e0>)
 80055c2:	f7fb ff19 	bl	80013f8 <DecToInt>
 80055c6:	4b10      	ldr	r3, [pc, #64]	; (8005608 <uartReceiveHandler+0x3e4>)
 80055c8:	72d8      	strb	r0, [r3, #11]
			break;
 80055ca:	e6f0      	b.n	80053ae <uartReceiveHandler+0x18a>
			nodeSettings.power = DecToInt(ptr, l);
 80055cc:	4621      	mov	r1, r4
 80055ce:	480d      	ldr	r0, [pc, #52]	; (8005604 <uartReceiveHandler+0x3e0>)
 80055d0:	f7fb ff12 	bl	80013f8 <DecToInt>
 80055d4:	4b0c      	ldr	r3, [pc, #48]	; (8005608 <uartReceiveHandler+0x3e4>)
 80055d6:	e6e2      	b.n	800539e <uartReceiveHandler+0x17a>
			nodeNum = DecToInt(ptr, l);
 80055d8:	4621      	mov	r1, r4
 80055da:	1c68      	adds	r0, r5, #1
 80055dc:	f7fb ff0c 	bl	80013f8 <DecToInt>
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <uartReceiveHandler+0x3e8>)
 80055e2:	7018      	strb	r0, [r3, #0]
			break;
 80055e4:	e6e3      	b.n	80053ae <uartReceiveHandler+0x18a>
			nodeSettings.useLed = DecToInt(ptr, l);
 80055e6:	4621      	mov	r1, r4
 80055e8:	1c68      	adds	r0, r5, #1
 80055ea:	f7fb ff05 	bl	80013f8 <DecToInt>
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <uartReceiveHandler+0x3e4>)
 80055f0:	e6eb      	b.n	80053ca <uartReceiveHandler+0x1a6>
			nodeSettings.workInterval = DecToInt(ptr, l);
 80055f2:	4621      	mov	r1, r4
 80055f4:	1c68      	adds	r0, r5, #1
 80055f6:	f7fb feff 	bl	80013f8 <DecToInt>
 80055fa:	4b03      	ldr	r3, [pc, #12]	; (8005608 <uartReceiveHandler+0x3e4>)
 80055fc:	6058      	str	r0, [r3, #4]
			break;
 80055fe:	e6d6      	b.n	80053ae <uartReceiveHandler+0x18a>
 8005600:	0800b41b 	.word	0x0800b41b
 8005604:	200015cc 	.word	0x200015cc
 8005608:	20000c74 	.word	0x20000c74
 800560c:	200015ca 	.word	0x200015ca

08005610 <sendConfig>:

void sendConfig(void) {
 8005610:	b538      	push	{r3, r4, r5, lr}
	lastUartConnect = HAL_GetTick();
 8005612:	f000 f9a9 	bl	8005968 <HAL_GetTick>
	printf("<3%u>\n", settings.bw);
	printf("<4%X>\n", settings.syncWord);
	printf("<5%u>\n", settings.power);
	printf("<8%u>\n", settings.preamble);
	printf("<9%u>\n", settings.cr);
	printf("<q%lu>\n", settings.warningDelay / 1000);
 8005616:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	lastUartConnect = HAL_GetTick();
 800561a:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <sendConfig+0x78>)
	printf("<1%ld>\n", settings.realFrequency);
 800561c:	4c1b      	ldr	r4, [pc, #108]	; (800568c <sendConfig+0x7c>)
	lastUartConnect = HAL_GetTick();
 800561e:	6018      	str	r0, [r3, #0]
	printf("<1%ld>\n", settings.realFrequency);
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	481b      	ldr	r0, [pc, #108]	; (8005690 <sendConfig+0x80>)
 8005624:	f002 ff4e 	bl	80084c4 <iprintf>
	printf("<2%u>\n", settings.sf);
 8005628:	7ba1      	ldrb	r1, [r4, #14]
 800562a:	481a      	ldr	r0, [pc, #104]	; (8005694 <sendConfig+0x84>)
 800562c:	f002 ff4a 	bl	80084c4 <iprintf>
	printf("<3%u>\n", settings.bw);
 8005630:	7be1      	ldrb	r1, [r4, #15]
 8005632:	4819      	ldr	r0, [pc, #100]	; (8005698 <sendConfig+0x88>)
 8005634:	f002 ff46 	bl	80084c4 <iprintf>
	printf("<4%X>\n", settings.syncWord);
 8005638:	7c61      	ldrb	r1, [r4, #17]
 800563a:	4818      	ldr	r0, [pc, #96]	; (800569c <sendConfig+0x8c>)
 800563c:	f002 ff42 	bl	80084c4 <iprintf>
	printf("<5%u>\n", settings.power);
 8005640:	7ca1      	ldrb	r1, [r4, #18]
 8005642:	4817      	ldr	r0, [pc, #92]	; (80056a0 <sendConfig+0x90>)
 8005644:	f002 ff3e 	bl	80084c4 <iprintf>
	printf("<8%u>\n", settings.preamble);
 8005648:	89a1      	ldrh	r1, [r4, #12]
 800564a:	4816      	ldr	r0, [pc, #88]	; (80056a4 <sendConfig+0x94>)
 800564c:	f002 ff3a 	bl	80084c4 <iprintf>
	printf("<9%u>\n", settings.cr);
 8005650:	7c21      	ldrb	r1, [r4, #16]
 8005652:	4815      	ldr	r0, [pc, #84]	; (80056a8 <sendConfig+0x98>)
 8005654:	f002 ff36 	bl	80084c4 <iprintf>
	printf("<q%lu>\n", settings.warningDelay / 1000);
 8005658:	6861      	ldr	r1, [r4, #4]
 800565a:	4814      	ldr	r0, [pc, #80]	; (80056ac <sendConfig+0x9c>)
 800565c:	fbb1 f1f5 	udiv	r1, r1, r5
 8005660:	f002 ff30 	bl	80084c4 <iprintf>
	printf("<w%lu>\n", settings.superWarningDelay / 1000);
 8005664:	68a1      	ldr	r1, [r4, #8]
 8005666:	4812      	ldr	r0, [pc, #72]	; (80056b0 <sendConfig+0xa0>)
 8005668:	fbb1 f1f5 	udiv	r1, r1, r5
 800566c:	f002 ff2a 	bl	80084c4 <iprintf>
	printf("<Z%s>\n", settings.SSID);
 8005670:	f104 0113 	add.w	r1, r4, #19
 8005674:	480f      	ldr	r0, [pc, #60]	; (80056b4 <sendConfig+0xa4>)
 8005676:	f002 ff25 	bl	80084c4 <iprintf>
	printf("<X%s>\n", settings.WiFiPass);
 800567a:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800567e:	480e      	ldr	r0, [pc, #56]	; (80056b8 <sendConfig+0xa8>)
}
 8005680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("<X%s>\n", settings.WiFiPass);
 8005684:	f002 bf1e 	b.w	80084c4 <iprintf>
 8005688:	200015c0 	.word	0x200015c0
 800568c:	20000a78 	.word	0x20000a78
 8005690:	0800b426 	.word	0x0800b426
 8005694:	0800b42e 	.word	0x0800b42e
 8005698:	0800b435 	.word	0x0800b435
 800569c:	0800b43c 	.word	0x0800b43c
 80056a0:	0800b443 	.word	0x0800b443
 80056a4:	0800b44a 	.word	0x0800b44a
 80056a8:	0800b451 	.word	0x0800b451
 80056ac:	0800b458 	.word	0x0800b458
 80056b0:	0800b460 	.word	0x0800b460
 80056b4:	0800b468 	.word	0x0800b468
 80056b8:	0800b46f 	.word	0x0800b46f

080056bc <configNodeViaUart>:

void configNodeViaUart(uint8_t nodeNum) {
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	4606      	mov	r6, r0
	memset(&nodeSettings, 0, sizeof(nodeSettings_t));
 80056c0:	4d2f      	ldr	r5, [pc, #188]	; (8005780 <configNodeViaUart+0xc4>)
	printf("<1%ld\n>", settings.realFrequency);
 80056c2:	4c30      	ldr	r4, [pc, #192]	; (8005784 <configNodeViaUart+0xc8>)
	memset(&nodeSettings, 0, sizeof(nodeSettings_t));
 80056c4:	221c      	movs	r2, #28
 80056c6:	2100      	movs	r1, #0
 80056c8:	4628      	mov	r0, r5
 80056ca:	f002 fef3 	bl	80084b4 <memset>
	printf("<1%ld\n>", settings.realFrequency);
 80056ce:	6821      	ldr	r1, [r4, #0]
 80056d0:	482d      	ldr	r0, [pc, #180]	; (8005788 <configNodeViaUart+0xcc>)
 80056d2:	f002 fef7 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 80056d6:	2005      	movs	r0, #5
 80056d8:	f000 f94c 	bl	8005974 <HAL_Delay>
	printf("<2%u>\n", settings.sf);
 80056dc:	7ba1      	ldrb	r1, [r4, #14]
 80056de:	482b      	ldr	r0, [pc, #172]	; (800578c <configNodeViaUart+0xd0>)
 80056e0:	f002 fef0 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 80056e4:	2005      	movs	r0, #5
 80056e6:	f000 f945 	bl	8005974 <HAL_Delay>
	printf("<3%u>\n", settings.bw);
 80056ea:	7be1      	ldrb	r1, [r4, #15]
 80056ec:	4828      	ldr	r0, [pc, #160]	; (8005790 <configNodeViaUart+0xd4>)
 80056ee:	f002 fee9 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 80056f2:	2005      	movs	r0, #5
 80056f4:	f000 f93e 	bl	8005974 <HAL_Delay>
	printf("<4%X>\n", settings.syncWord);
 80056f8:	7c61      	ldrb	r1, [r4, #17]
 80056fa:	4826      	ldr	r0, [pc, #152]	; (8005794 <configNodeViaUart+0xd8>)
 80056fc:	f002 fee2 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 8005700:	2005      	movs	r0, #5
 8005702:	f000 f937 	bl	8005974 <HAL_Delay>
	printf("<5%u>\n", settings.power);
 8005706:	7ca1      	ldrb	r1, [r4, #18]
 8005708:	4823      	ldr	r0, [pc, #140]	; (8005798 <configNodeViaUart+0xdc>)
 800570a:	f002 fedb 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 800570e:	2005      	movs	r0, #5
 8005710:	f000 f930 	bl	8005974 <HAL_Delay>
	printf("<8%u>\n", settings.preamble);
 8005714:	89a1      	ldrh	r1, [r4, #12]
 8005716:	4821      	ldr	r0, [pc, #132]	; (800579c <configNodeViaUart+0xe0>)
 8005718:	f002 fed4 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 800571c:	2005      	movs	r0, #5
 800571e:	f000 f929 	bl	8005974 <HAL_Delay>
	printf("<9%u>\n", settings.cr);
 8005722:	7c21      	ldrb	r1, [r4, #16]
 8005724:	481e      	ldr	r0, [pc, #120]	; (80057a0 <configNodeViaUart+0xe4>)
 8005726:	f002 fecd 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 800572a:	2005      	movs	r0, #5
 800572c:	f000 f922 	bl	8005974 <HAL_Delay>
	printf("<n%u>\n", nodeNum);
 8005730:	4631      	mov	r1, r6
 8005732:	481c      	ldr	r0, [pc, #112]	; (80057a4 <configNodeViaUart+0xe8>)
 8005734:	f002 fec6 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 8005738:	2005      	movs	r0, #5
 800573a:	f000 f91b 	bl	8005974 <HAL_Delay>
	printf("<i%lu>\n", nodeSettings.workInterval);
 800573e:	6869      	ldr	r1, [r5, #4]
 8005740:	4819      	ldr	r0, [pc, #100]	; (80057a8 <configNodeViaUart+0xec>)
 8005742:	f002 febf 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 8005746:	2005      	movs	r0, #5
 8005748:	f000 f914 	bl	8005974 <HAL_Delay>
	printf("<L%u>\n", nodeSettings.useLed);
 800574c:	7c29      	ldrb	r1, [r5, #16]
 800574e:	4817      	ldr	r0, [pc, #92]	; (80057ac <configNodeViaUart+0xf0>)
 8005750:	f002 feb8 	bl	80084c4 <iprintf>
	HAL_Delay(5);
 8005754:	2005      	movs	r0, #5
 8005756:	f000 f90d 	bl	8005974 <HAL_Delay>
	printf("<S>\n");
 800575a:	4815      	ldr	r0, [pc, #84]	; (80057b0 <configNodeViaUart+0xf4>)
 800575c:	f002 ff38 	bl	80085d0 <puts>
	HAL_Delay(10);
 8005760:	200a      	movs	r0, #10
 8005762:	f000 f907 	bl	8005974 <HAL_Delay>
	printf("<R>\n");
 8005766:	4813      	ldr	r0, [pc, #76]	; (80057b4 <configNodeViaUart+0xf8>)
 8005768:	f002 ff32 	bl	80085d0 <puts>
	configTime = HAL_GetTick();
 800576c:	f000 f8fc 	bl	8005968 <HAL_GetTick>
 8005770:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <configNodeViaUart+0xfc>)
 8005772:	6018      	str	r0, [r3, #0]
	lastUartConnect = HAL_GetTick();
 8005774:	f000 f8f8 	bl	8005968 <HAL_GetTick>
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <configNodeViaUart+0x100>)
 800577a:	6018      	str	r0, [r3, #0]
}
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	bf00      	nop
 8005780:	20000c74 	.word	0x20000c74
 8005784:	20000a78 	.word	0x20000a78
 8005788:	0800b476 	.word	0x0800b476
 800578c:	0800b42e 	.word	0x0800b42e
 8005790:	0800b435 	.word	0x0800b435
 8005794:	0800b43c 	.word	0x0800b43c
 8005798:	0800b443 	.word	0x0800b443
 800579c:	0800b44a 	.word	0x0800b44a
 80057a0:	0800b451 	.word	0x0800b451
 80057a4:	0800b47e 	.word	0x0800b47e
 80057a8:	0800b485 	.word	0x0800b485
 80057ac:	0800b48d 	.word	0x0800b48d
 80057b0:	0800b494 	.word	0x0800b494
 80057b4:	0800b498 	.word	0x0800b498
 80057b8:	20000cdc 	.word	0x20000cdc
 80057bc:	200015c0 	.word	0x200015c0

080057c0 <wsSetColor>:

uint16_t wsBuffer[ARRAY_LEN];
color_t cBuffer[LED_COUNT];

void wsSetColor(uint8_t num, uint8_t red, uint8_t green, uint8_t blue)
{
 80057c0:	b530      	push	{r4, r5, lr}
cBuffer[num].red=red;
 80057c2:	4d04      	ldr	r5, [pc, #16]	; (80057d4 <wsSetColor+0x14>)
 80057c4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80057c8:	182c      	adds	r4, r5, r0
 80057ca:	7061      	strb	r1, [r4, #1]
cBuffer[num].green=green;
cBuffer[num].blue=blue;
 80057cc:	70a3      	strb	r3, [r4, #2]
cBuffer[num].green=green;
 80057ce:	542a      	strb	r2, [r5, r0]
}
 80057d0:	bd30      	pop	{r4, r5, pc}
 80057d2:	bf00      	nop
 80057d4:	2000198c 	.word	0x2000198c

080057d8 <wsDoubleBright>:

void wsDoubleBright(uint8_t num)
{
	cBuffer[num].red*=2;
 80057d8:	4a06      	ldr	r2, [pc, #24]	; (80057f4 <wsDoubleBright+0x1c>)
 80057da:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80057de:	1813      	adds	r3, r2, r0
 80057e0:	7859      	ldrb	r1, [r3, #1]
 80057e2:	0049      	lsls	r1, r1, #1
 80057e4:	7059      	strb	r1, [r3, #1]
	cBuffer[num].green*=2;
 80057e6:	5c11      	ldrb	r1, [r2, r0]
 80057e8:	0049      	lsls	r1, r1, #1
 80057ea:	5411      	strb	r1, [r2, r0]
	cBuffer[num].blue*=2;
 80057ec:	789a      	ldrb	r2, [r3, #2]
 80057ee:	0052      	lsls	r2, r2, #1
 80057f0:	709a      	strb	r2, [r3, #2]
}
 80057f2:	4770      	bx	lr
 80057f4:	2000198c 	.word	0x2000198c

080057f8 <wsMultiply>:

void wsMultiply(uint8_t num, float k)
{
 80057f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fa:	460d      	mov	r5, r1
	cBuffer[num].red*=k;
 80057fc:	4f0f      	ldr	r7, [pc, #60]	; (800583c <wsMultiply+0x44>)
 80057fe:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8005802:	193e      	adds	r6, r7, r4
 8005804:	7870      	ldrb	r0, [r6, #1]
 8005806:	f7fb f94b 	bl	8000aa0 <__aeabi_i2f>
 800580a:	4629      	mov	r1, r5
 800580c:	f7fb f99c 	bl	8000b48 <__aeabi_fmul>
 8005810:	f7fb fb86 	bl	8000f20 <__aeabi_f2uiz>
 8005814:	7070      	strb	r0, [r6, #1]
	cBuffer[num].green*=k;
 8005816:	5d38      	ldrb	r0, [r7, r4]
 8005818:	f7fb f942 	bl	8000aa0 <__aeabi_i2f>
 800581c:	4629      	mov	r1, r5
 800581e:	f7fb f993 	bl	8000b48 <__aeabi_fmul>
 8005822:	f7fb fb7d 	bl	8000f20 <__aeabi_f2uiz>
 8005826:	5538      	strb	r0, [r7, r4]
	cBuffer[num].blue*=k;
 8005828:	78b0      	ldrb	r0, [r6, #2]
 800582a:	f7fb f939 	bl	8000aa0 <__aeabi_i2f>
 800582e:	4629      	mov	r1, r5
 8005830:	f7fb f98a 	bl	8000b48 <__aeabi_fmul>
 8005834:	f7fb fb74 	bl	8000f20 <__aeabi_f2uiz>
 8005838:	70b0      	strb	r0, [r6, #2]
}
 800583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800583c:	2000198c 	.word	0x2000198c

08005840 <wsPrepareArray>:


void wsPrepareArray()
{
 8005840:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
}

uint32_t * getBitBanded(uint32_t * adr,uint8_t bit)
{
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8005842:	2400      	movs	r4, #0
	  wsBuffer[i*8+j]=LOW;
 8005844:	251a      	movs	r5, #26
      wsBuffer[i*8+j]=HIGH;
 8005846:	2641      	movs	r6, #65	; 0x41
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8005848:	4b0d      	ldr	r3, [pc, #52]	; (8005880 <wsPrepareArray+0x40>)
 800584a:	480e      	ldr	r0, [pc, #56]	; (8005884 <wsPrepareArray+0x44>)
 800584c:	b29b      	uxth	r3, r3
 800584e:	015b      	lsls	r3, r3, #5
 8005850:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8005854:	3320      	adds	r3, #32
{
 8005856:	4602      	mov	r2, r0
 8005858:	f1a3 0120 	sub.w	r1, r3, #32
		if (*adr++)
 800585c:	f851 7b04 	ldr.w	r7, [r1], #4
 8005860:	b167      	cbz	r7, 800587c <wsPrepareArray+0x3c>
      wsBuffer[i*8+j]=HIGH;
 8005862:	81d6      	strh	r6, [r2, #14]
	for(j=7;j>=0;j--)
 8005864:	4299      	cmp	r1, r3
 8005866:	f1a2 0202 	sub.w	r2, r2, #2
 800586a:	d1f7      	bne.n	800585c <wsPrepareArray+0x1c>
	for(i=0;i<LED_COUNT*3;i++)
 800586c:	3408      	adds	r4, #8
 800586e:	2cd8      	cmp	r4, #216	; 0xd8
 8005870:	f101 0320 	add.w	r3, r1, #32
 8005874:	f100 0010 	add.w	r0, r0, #16
 8005878:	d1ed      	bne.n	8005856 <wsPrepareArray+0x16>
}
 800587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  wsBuffer[i*8+j]=LOW;
 800587c:	81d5      	strh	r5, [r2, #14]
 800587e:	e7f1      	b.n	8005864 <wsPrepareArray+0x24>
 8005880:	2000198c 	.word	0x2000198c
 8005884:	2000164c 	.word	0x2000164c

08005888 <wsInit>:
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
 8005888:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800588c:	4a01      	ldr	r2, [pc, #4]	; (8005894 <wsInit+0xc>)
 800588e:	f002 bb1f 	b.w	8007ed0 <HAL_TIM_PWM_Start_DMA>
 8005892:	bf00      	nop
 8005894:	2000164c 	.word	0x2000164c

08005898 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005898:	480c      	ldr	r0, [pc, #48]	; (80058cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800589a:	490d      	ldr	r1, [pc, #52]	; (80058d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800589c:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800589e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058a0:	e002      	b.n	80058a8 <LoopCopyDataInit>

080058a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058a6:	3304      	adds	r3, #4

080058a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058ac:	d3f9      	bcc.n	80058a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058b0:	4c0a      	ldr	r4, [pc, #40]	; (80058dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80058b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058b4:	e001      	b.n	80058ba <LoopFillZerobss>

080058b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058b8:	3204      	adds	r2, #4

080058ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058bc:	d3fb      	bcc.n	80058b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80058be:	f7ff fc79 	bl	80051b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80058c2:	f002 fdc5 	bl	8008450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80058c6:	f7fe fbc3 	bl	8004050 <main>
  bx lr
 80058ca:	4770      	bx	lr
  ldr r0, =_sdata
 80058cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058d0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80058d4:	0800b728 	.word	0x0800b728
  ldr r2, =_sbss
 80058d8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80058dc:	200019e0 	.word	0x200019e0

080058e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058e0:	e7fe      	b.n	80058e0 <ADC1_2_IRQHandler>
	...

080058e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058e4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058e6:	4b0e      	ldr	r3, [pc, #56]	; (8005920 <HAL_InitTick+0x3c>)
{
 80058e8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80058ea:	7818      	ldrb	r0, [r3, #0]
 80058ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058f0:	fbb3 f3f0 	udiv	r3, r3, r0
 80058f4:	4a0b      	ldr	r2, [pc, #44]	; (8005924 <HAL_InitTick+0x40>)
 80058f6:	6810      	ldr	r0, [r2, #0]
 80058f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80058fc:	f000 fac6 	bl	8005e8c <HAL_SYSTICK_Config>
 8005900:	4604      	mov	r4, r0
 8005902:	b958      	cbnz	r0, 800591c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005904:	2d0f      	cmp	r5, #15
 8005906:	d809      	bhi.n	800591c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005908:	4602      	mov	r2, r0
 800590a:	4629      	mov	r1, r5
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	f000 fa7c 	bl	8005e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005914:	4620      	mov	r0, r4
 8005916:	4b04      	ldr	r3, [pc, #16]	; (8005928 <HAL_InitTick+0x44>)
 8005918:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800591a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800591c:	2001      	movs	r0, #1
 800591e:	e7fc      	b.n	800591a <HAL_InitTick+0x36>
 8005920:	20000050 	.word	0x20000050
 8005924:	2000004c 	.word	0x2000004c
 8005928:	20000054 	.word	0x20000054

0800592c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800592c:	4a07      	ldr	r2, [pc, #28]	; (800594c <HAL_Init+0x20>)
{
 800592e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005930:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005932:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005934:	f043 0310 	orr.w	r3, r3, #16
 8005938:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800593a:	f000 fa55 	bl	8005de8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800593e:	2000      	movs	r0, #0
 8005940:	f7ff ffd0 	bl	80058e4 <HAL_InitTick>
  HAL_MspInit();
 8005944:	f7fe ff34 	bl	80047b0 <HAL_MspInit>
}
 8005948:	2000      	movs	r0, #0
 800594a:	bd08      	pop	{r3, pc}
 800594c:	40022000 	.word	0x40022000

08005950 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005950:	4a03      	ldr	r2, [pc, #12]	; (8005960 <HAL_IncTick+0x10>)
 8005952:	4b04      	ldr	r3, [pc, #16]	; (8005964 <HAL_IncTick+0x14>)
 8005954:	6811      	ldr	r1, [r2, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	440b      	add	r3, r1
 800595a:	6013      	str	r3, [r2, #0]
}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	200019a8 	.word	0x200019a8
 8005964:	20000050 	.word	0x20000050

08005968 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005968:	4b01      	ldr	r3, [pc, #4]	; (8005970 <HAL_GetTick+0x8>)
 800596a:	6818      	ldr	r0, [r3, #0]
}
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	200019a8 	.word	0x200019a8

08005974 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005974:	b538      	push	{r3, r4, r5, lr}
 8005976:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005978:	f7ff fff6 	bl	8005968 <HAL_GetTick>
 800597c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800597e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005980:	bf1e      	ittt	ne
 8005982:	4b04      	ldrne	r3, [pc, #16]	; (8005994 <HAL_Delay+0x20>)
 8005984:	781b      	ldrbne	r3, [r3, #0]
 8005986:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005988:	f7ff ffee 	bl	8005968 <HAL_GetTick>
 800598c:	1b43      	subs	r3, r0, r5
 800598e:	42a3      	cmp	r3, r4
 8005990:	d3fa      	bcc.n	8005988 <HAL_Delay+0x14>
  {
  }
}
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	20000050 	.word	0x20000050

08005998 <HAL_ADC_ConvCpltCallback>:
 8005998:	4770      	bx	lr

0800599a <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800599a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800599c:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800599e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a0:	f012 0f50 	tst.w	r2, #80	; 0x50
 80059a4:	d11b      	bne.n	80059de <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ac:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	6892      	ldr	r2, [r2, #8]
 80059b2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80059b6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80059ba:	d10c      	bne.n	80059d6 <ADC_DMAConvCplt+0x3c>
 80059bc:	7b1a      	ldrb	r2, [r3, #12]
 80059be:	b952      	cbnz	r2, 80059d6 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ca:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059cc:	bf5e      	ittt	pl
 80059ce:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80059d0:	f042 0201 	orrpl.w	r2, r2, #1
 80059d4:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff ffde 	bl	8005998 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80059dc:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80059de:	6a1b      	ldr	r3, [r3, #32]
}
 80059e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80059e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e6:	4718      	bx	r3

080059e8 <HAL_ADC_ConvHalfCpltCallback>:
 80059e8:	4770      	bx	lr

080059ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80059ea:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80059ee:	f7ff fffb 	bl	80059e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059f2:	bd08      	pop	{r3, pc}

080059f4 <HAL_ADC_ErrorCallback>:
 80059f4:	4770      	bx	lr

080059f6 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80059f8:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80059fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80059fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a00:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005a02:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005a04:	f043 0304 	orr.w	r3, r3, #4
 8005a08:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a0a:	f7ff fff3 	bl	80059f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a0e:	bd08      	pop	{r3, pc}

08005a10 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8005a10:	2300      	movs	r3, #0
{ 
 8005a12:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005a14:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005a16:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 8005a1a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d06c      	beq.n	8005afa <HAL_ADC_ConfigChannel+0xea>
 8005a20:	2301      	movs	r3, #1
 8005a22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8005a26:	684d      	ldr	r5, [r1, #4]
 8005a28:	6802      	ldr	r2, [r0, #0]
 8005a2a:	2d06      	cmp	r5, #6
 8005a2c:	6808      	ldr	r0, [r1, #0]
 8005a2e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8005a32:	d822      	bhi.n	8005a7a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005a34:	261f      	movs	r6, #31
 8005a36:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8005a38:	3b05      	subs	r3, #5
 8005a3a:	409e      	lsls	r6, r3
 8005a3c:	ea25 0506 	bic.w	r5, r5, r6
 8005a40:	fa00 f303 	lsl.w	r3, r0, r3
 8005a44:	432b      	orrs	r3, r5
 8005a46:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005a48:	2809      	cmp	r0, #9
 8005a4a:	688b      	ldr	r3, [r1, #8]
 8005a4c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8005a50:	f04f 0107 	mov.w	r1, #7
 8005a54:	d929      	bls.n	8005aaa <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005a56:	68d6      	ldr	r6, [r2, #12]
 8005a58:	3d1e      	subs	r5, #30
 8005a5a:	40a9      	lsls	r1, r5
 8005a5c:	ea26 0101 	bic.w	r1, r6, r1
 8005a60:	40ab      	lsls	r3, r5
 8005a62:	430b      	orrs	r3, r1
 8005a64:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005a66:	f1a0 0310 	sub.w	r3, r0, #16
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d925      	bls.n	8005aba <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a6e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005a70:	2300      	movs	r3, #0
 8005a72:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8005a76:	b002      	add	sp, #8
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8005a7a:	2d0c      	cmp	r5, #12
 8005a7c:	f04f 051f 	mov.w	r5, #31
 8005a80:	d809      	bhi.n	8005a96 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005a82:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8005a84:	3b23      	subs	r3, #35	; 0x23
 8005a86:	409d      	lsls	r5, r3
 8005a88:	ea26 0505 	bic.w	r5, r6, r5
 8005a8c:	fa00 f303 	lsl.w	r3, r0, r3
 8005a90:	432b      	orrs	r3, r5
 8005a92:	6313      	str	r3, [r2, #48]	; 0x30
 8005a94:	e7d8      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005a96:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8005a98:	3b41      	subs	r3, #65	; 0x41
 8005a9a:	409d      	lsls	r5, r3
 8005a9c:	ea26 0505 	bic.w	r5, r6, r5
 8005aa0:	fa00 f303 	lsl.w	r3, r0, r3
 8005aa4:	432b      	orrs	r3, r5
 8005aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005aa8:	e7ce      	b.n	8005a48 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005aaa:	6910      	ldr	r0, [r2, #16]
 8005aac:	40a9      	lsls	r1, r5
 8005aae:	ea20 0101 	bic.w	r1, r0, r1
 8005ab2:	40ab      	lsls	r3, r5
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6113      	str	r3, [r2, #16]
 8005ab8:	e7d9      	b.n	8005a6e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8005aba:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_ADC_ConfigChannel+0xf0>)
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d116      	bne.n	8005aee <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005ac0:	6893      	ldr	r3, [r2, #8]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	d4d3      	bmi.n	8005a6e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005ac6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ac8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005aca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ace:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ad0:	d1cd      	bne.n	8005a6e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ad2:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <HAL_ADC_ConfigChannel+0xf4>)
 8005ad4:	4a0c      	ldr	r2, [pc, #48]	; (8005b08 <HAL_ADC_ConfigChannel+0xf8>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	fbb3 f2f2 	udiv	r2, r3, r2
 8005adc:	230a      	movs	r3, #10
 8005ade:	4353      	muls	r3, r2
            wait_loop_index--;
 8005ae0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8005ae2:	9b01      	ldr	r3, [sp, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0c2      	beq.n	8005a6e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	e7f8      	b.n	8005ae0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005aee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8005af0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005af2:	f043 0320 	orr.w	r3, r3, #32
 8005af6:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8005af8:	e7ba      	b.n	8005a70 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8005afa:	2002      	movs	r0, #2
 8005afc:	e7bb      	b.n	8005a76 <HAL_ADC_ConfigChannel+0x66>
 8005afe:	bf00      	nop
 8005b00:	40012400 	.word	0x40012400
 8005b04:	2000004c 	.word	0x2000004c
 8005b08:	000f4240 	.word	0x000f4240

08005b0c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8005b0c:	2300      	movs	r3, #0
{
 8005b0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005b10:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b12:	6803      	ldr	r3, [r0, #0]
{
 8005b14:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	07d2      	lsls	r2, r2, #31
 8005b1a:	d502      	bpl.n	8005b22 <ADC_Enable+0x16>
  return HAL_OK;
 8005b1c:	2000      	movs	r0, #0
}
 8005b1e:	b003      	add	sp, #12
 8005b20:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <ADC_Enable+0x70>)
 8005b2c:	4a14      	ldr	r2, [pc, #80]	; (8005b80 <ADC_Enable+0x74>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8005b34:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8005b36:	9b01      	ldr	r3, [sp, #4]
 8005b38:	b9e3      	cbnz	r3, 8005b74 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8005b3a:	f7ff ff15 	bl	8005968 <HAL_GetTick>
 8005b3e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	07db      	lsls	r3, r3, #31
 8005b46:	d4e9      	bmi.n	8005b1c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b48:	f7ff ff0e 	bl	8005968 <HAL_GetTick>
 8005b4c:	1b40      	subs	r0, r0, r5
 8005b4e:	2802      	cmp	r0, #2
 8005b50:	d9f6      	bls.n	8005b40 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f013 0301 	ands.w	r3, r3, #1
 8005b5a:	d1f1      	bne.n	8005b40 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8005b5e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b60:	f042 0210 	orr.w	r2, r2, #16
 8005b64:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8005b68:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b6c:	f042 0201 	orr.w	r2, r2, #1
 8005b70:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8005b72:	e7d4      	b.n	8005b1e <ADC_Enable+0x12>
      wait_loop_index--;
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	e7dc      	b.n	8005b34 <ADC_Enable+0x28>
 8005b7a:	bf00      	nop
 8005b7c:	2000004c 	.word	0x2000004c
 8005b80:	000f4240 	.word	0x000f4240

08005b84 <HAL_ADC_Start_DMA>:
{
 8005b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005b88:	4b40      	ldr	r3, [pc, #256]	; (8005c8c <HAL_ADC_Start_DMA+0x108>)
{
 8005b8a:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005b8c:	6802      	ldr	r2, [r0, #0]
{
 8005b8e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005b90:	429a      	cmp	r2, r3
{
 8005b92:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005b94:	d002      	beq.n	8005b9c <HAL_ADC_Start_DMA+0x18>
 8005b96:	493e      	ldr	r1, [pc, #248]	; (8005c90 <HAL_ADC_Start_DMA+0x10c>)
 8005b98:	428a      	cmp	r2, r1
 8005b9a:	d103      	bne.n	8005ba4 <HAL_ADC_Start_DMA+0x20>
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8005ba2:	d16e      	bne.n	8005c82 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8005ba4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d06c      	beq.n	8005c86 <HAL_ADC_Start_DMA+0x102>
 8005bac:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8005bae:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8005bb0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8005bb4:	f7ff ffaa 	bl	8005b0c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005bb8:	4606      	mov	r6, r0
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d15d      	bne.n	8005c7a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8005bbe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005bc0:	6821      	ldr	r1, [r4, #0]
 8005bc2:	4b33      	ldr	r3, [pc, #204]	; (8005c90 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8005bc4:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 8005bc8:	f025 0501 	bic.w	r5, r5, #1
 8005bcc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005bd0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8005bd2:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005bd4:	d104      	bne.n	8005be0 <HAL_ADC_Start_DMA+0x5c>
 8005bd6:	4a2d      	ldr	r2, [pc, #180]	; (8005c8c <HAL_ADC_Start_DMA+0x108>)
 8005bd8:	6853      	ldr	r3, [r2, #4]
 8005bda:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8005bde:	d13e      	bne.n	8005c5e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005be0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005be2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005be6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005be8:	684b      	ldr	r3, [r1, #4]
 8005bea:	055a      	lsls	r2, r3, #21
 8005bec:	d505      	bpl.n	8005bfa <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005bf0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bf8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bfc:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bfe:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005c02:	bf18      	it	ne
 8005c04:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c06:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005c08:	bf18      	it	ne
 8005c0a:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8005c0e:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8005c10:	2300      	movs	r3, #0
 8005c12:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c16:	4b1f      	ldr	r3, [pc, #124]	; (8005c94 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c18:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005c1a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005c1c:	4b1e      	ldr	r3, [pc, #120]	; (8005c98 <HAL_ADC_Start_DMA+0x114>)
 8005c1e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005c20:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <HAL_ADC_Start_DMA+0x118>)
 8005c22:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005c24:	f06f 0302 	mvn.w	r3, #2
 8005c28:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005c2c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8005c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c34:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c38:	4643      	mov	r3, r8
 8005c3a:	f000 f96b 	bl	8005f14 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	689a      	ldr	r2, [r3, #8]
 8005c42:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8005c46:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8005c4a:	689a      	ldr	r2, [r3, #8]
 8005c4c:	bf0c      	ite	eq
 8005c4e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005c52:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8005c56:	609a      	str	r2, [r3, #8]
}
 8005c58:	4630      	mov	r0, r6
 8005c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005c5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c64:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005c66:	6853      	ldr	r3, [r2, #4]
 8005c68:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005c6a:	bf41      	itttt	mi
 8005c6c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 8005c6e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8005c72:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8005c76:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8005c78:	e7bf      	b.n	8005bfa <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8005c80:	e7ea      	b.n	8005c58 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8005c82:	2601      	movs	r6, #1
 8005c84:	e7e8      	b.n	8005c58 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8005c86:	2602      	movs	r6, #2
 8005c88:	e7e6      	b.n	8005c58 <HAL_ADC_Start_DMA+0xd4>
 8005c8a:	bf00      	nop
 8005c8c:	40012400 	.word	0x40012400
 8005c90:	40012800 	.word	0x40012800
 8005c94:	0800599b 	.word	0x0800599b
 8005c98:	080059eb 	.word	0x080059eb
 8005c9c:	080059f7 	.word	0x080059f7

08005ca0 <ADC_ConversionStop_Disable>:
{
 8005ca0:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005ca2:	6803      	ldr	r3, [r0, #0]
{
 8005ca4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	07d1      	lsls	r1, r2, #31
 8005caa:	d401      	bmi.n	8005cb0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8005cac:	2000      	movs	r0, #0
}
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	f022 0201 	bic.w	r2, r2, #1
 8005cb6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005cb8:	f7ff fe56 	bl	8005968 <HAL_GetTick>
 8005cbc:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	07db      	lsls	r3, r3, #31
 8005cc4:	d5f2      	bpl.n	8005cac <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005cc6:	f7ff fe4f 	bl	8005968 <HAL_GetTick>
 8005cca:	1b40      	subs	r0, r0, r5
 8005ccc:	2802      	cmp	r0, #2
 8005cce:	d9f6      	bls.n	8005cbe <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005cd0:	6823      	ldr	r3, [r4, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	07da      	lsls	r2, r3, #31
 8005cd6:	d5f2      	bpl.n	8005cbe <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cda:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cdc:	f043 0310 	orr.w	r3, r3, #16
 8005ce0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ce2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8005cea:	e7e0      	b.n	8005cae <ADC_ConversionStop_Disable+0xe>

08005cec <HAL_ADC_Init>:
{
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8005cee:	4604      	mov	r4, r0
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	d06e      	beq.n	8005dd2 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005cf6:	b923      	cbnz	r3, 8005d02 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8005cf8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8005cfa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8005cfe:	f7fe fd79 	bl	80047f4 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005d02:	4620      	mov	r0, r4
 8005d04:	f7ff ffcc 	bl	8005ca0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005d08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d0a:	f013 0310 	ands.w	r3, r3, #16
 8005d0e:	d162      	bne.n	8005dd6 <HAL_ADC_Init+0xea>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d160      	bne.n	8005dd6 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8005d14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005d16:	69e5      	ldr	r5, [r4, #28]
 8005d18:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8005d1a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005d1e:	f022 0202 	bic.w	r2, r2, #2
 8005d22:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005d26:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005d28:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8005d2a:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005d2c:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005d2e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005d32:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005d36:	d037      	beq.n	8005da8 <HAL_ADC_Init+0xbc>
 8005d38:	2d01      	cmp	r5, #1
 8005d3a:	bf14      	ite	ne
 8005d3c:	2700      	movne	r7, #0
 8005d3e:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d42:	7d26      	ldrb	r6, [r4, #20]
 8005d44:	2e01      	cmp	r6, #1
 8005d46:	d106      	bne.n	8005d56 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005d48:	bb82      	cbnz	r2, 8005dac <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8005d4a:	69a2      	ldr	r2, [r4, #24]
 8005d4c:	3a01      	subs	r2, #1
 8005d4e:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8005d52:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8005d56:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005d58:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8005d5c:	6856      	ldr	r6, [r2, #4]
 8005d5e:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8005d62:	ea46 0607 	orr.w	r6, r6, r7
 8005d66:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8005d68:	6897      	ldr	r7, [r2, #8]
 8005d6a:	4e1d      	ldr	r6, [pc, #116]	; (8005de0 <HAL_ADC_Init+0xf4>)
 8005d6c:	ea06 0607 	and.w	r6, r6, r7
 8005d70:	ea46 0601 	orr.w	r6, r6, r1
 8005d74:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005d76:	d001      	beq.n	8005d7c <HAL_ADC_Init+0x90>
 8005d78:	2d01      	cmp	r5, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005d7c:	6923      	ldr	r3, [r4, #16]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8005d82:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8005d84:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8005d88:	432b      	orrs	r3, r5
 8005d8a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005d8c:	6892      	ldr	r2, [r2, #8]
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <HAL_ADC_Init+0xf8>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	4299      	cmp	r1, r3
 8005d94:	d113      	bne.n	8005dbe <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8005d96:	2300      	movs	r3, #0
 8005d98:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8005d9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005d9c:	f023 0303 	bic.w	r3, r3, #3
 8005da0:	f043 0301 	orr.w	r3, r3, #1
 8005da4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8005da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005da8:	462f      	mov	r7, r5
 8005daa:	e7ca      	b.n	8005d42 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005dac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005dae:	f042 0220 	orr.w	r2, r2, #32
 8005db2:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005db4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005dbc:	e7cb      	b.n	8005d56 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8005dbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dc0:	f023 0312 	bic.w	r3, r3, #18
 8005dc4:	f043 0310 	orr.w	r3, r3, #16
 8005dc8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005dcc:	f043 0301 	orr.w	r3, r3, #1
 8005dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8005dd2:	2001      	movs	r0, #1
 8005dd4:	e7e7      	b.n	8005da6 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005dd8:	f043 0310 	orr.w	r3, r3, #16
 8005ddc:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8005dde:	e7f8      	b.n	8005dd2 <HAL_ADC_Init+0xe6>
 8005de0:	ffe1f7fd 	.word	0xffe1f7fd
 8005de4:	ff1f0efe 	.word	0xff1f0efe

08005de8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005de8:	4907      	ldr	r1, [pc, #28]	; (8005e08 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005dea:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005dec:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005dee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005df2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005df6:	0412      	lsls	r2, r2, #16
 8005df8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005e04:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005e06:	4770      	bx	lr
 8005e08:	e000ed00 	.word	0xe000ed00

08005e0c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e0c:	4b16      	ldr	r3, [pc, #88]	; (8005e68 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e0e:	b530      	push	{r4, r5, lr}
 8005e10:	68dc      	ldr	r4, [r3, #12]
 8005e12:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e16:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e1a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	bf28      	it	cs
 8005e20:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e22:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e24:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e28:	bf98      	it	ls
 8005e2a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e2c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e30:	bf88      	it	hi
 8005e32:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e34:	ea21 0303 	bic.w	r3, r1, r3
 8005e38:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e3a:	fa05 f404 	lsl.w	r4, r5, r4
 8005e3e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8005e42:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e44:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e48:	bfac      	ite	ge
 8005e4a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e4e:	4a07      	ldrlt	r2, [pc, #28]	; (8005e6c <HAL_NVIC_SetPriority+0x60>)
 8005e50:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005e54:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e56:	bfab      	itete	ge
 8005e58:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e5c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e60:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e64:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005e66:	bd30      	pop	{r4, r5, pc}
 8005e68:	e000ed00 	.word	0xe000ed00
 8005e6c:	e000ed14 	.word	0xe000ed14

08005e70 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005e70:	2800      	cmp	r0, #0
 8005e72:	db08      	blt.n	8005e86 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e74:	2301      	movs	r3, #1
 8005e76:	0942      	lsrs	r2, r0, #5
 8005e78:	f000 001f 	and.w	r0, r0, #31
 8005e7c:	fa03 f000 	lsl.w	r0, r3, r0
 8005e80:	4b01      	ldr	r3, [pc, #4]	; (8005e88 <HAL_NVIC_EnableIRQ+0x18>)
 8005e82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005e86:	4770      	bx	lr
 8005e88:	e000e100 	.word	0xe000e100

08005e8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e8c:	3801      	subs	r0, #1
 8005e8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005e92:	d20a      	bcs.n	8005eaa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e94:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e96:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e98:	4a06      	ldr	r2, [pc, #24]	; (8005eb4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e9a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ea0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ea2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ea4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ea8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005eaa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	e000e010 	.word	0xe000e010
 8005eb4:	e000ed00 	.word	0xe000ed00

08005eb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005eb8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005eba:	b320      	cbz	r0, 8005f06 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005ebc:	2214      	movs	r2, #20
 8005ebe:	6801      	ldr	r1, [r0, #0]
 8005ec0:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <HAL_DMA_Init+0x54>)
 8005ec2:	440b      	add	r3, r1
 8005ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005ecc:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ece:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8005ed0:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ed2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8005ed6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ed8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005eda:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ede:	4323      	orrs	r3, r4
 8005ee0:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005ee2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ee6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ee8:	6944      	ldr	r4, [r0, #20]
 8005eea:	4323      	orrs	r3, r4
 8005eec:	6984      	ldr	r4, [r0, #24]
 8005eee:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ef0:	69c4      	ldr	r4, [r0, #28]
 8005ef2:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8005ef4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ef6:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ef8:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005efc:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8005efe:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f00:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8005f02:	4618      	mov	r0, r3
}
 8005f04:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f06:	2001      	movs	r0, #1
 8005f08:	e7fc      	b.n	8005f04 <HAL_DMA_Init+0x4c>
 8005f0a:	bf00      	nop
 8005f0c:	bffdfff8 	.word	0xbffdfff8
 8005f10:	40020000 	.word	0x40020000

08005f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f14:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005f16:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005f1a:	2c01      	cmp	r4, #1
 8005f1c:	d034      	beq.n	8005f88 <HAL_DMA_Start_IT+0x74>
 8005f1e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f20:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005f24:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005f28:	42a5      	cmp	r5, r4
 8005f2a:	f04f 0600 	mov.w	r6, #0
 8005f2e:	f04f 0402 	mov.w	r4, #2
 8005f32:	d127      	bne.n	8005f84 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f34:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005f38:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f3a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005f3c:	6826      	ldr	r6, [r4, #0]
 8005f3e:	f026 0601 	bic.w	r6, r6, #1
 8005f42:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005f44:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8005f48:	40bd      	lsls	r5, r7
 8005f4a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f4c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f4e:	6843      	ldr	r3, [r0, #4]
 8005f50:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8005f52:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f54:	bf0b      	itete	eq
 8005f56:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005f58:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005f5a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005f5c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8005f5e:	b14b      	cbz	r3, 8005f74 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8005f66:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f68:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	6023      	str	r3, [r4, #0]
}
 8005f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	f023 0304 	bic.w	r3, r3, #4
 8005f7a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005f7c:	6823      	ldr	r3, [r4, #0]
 8005f7e:	f043 030a 	orr.w	r3, r3, #10
 8005f82:	e7f0      	b.n	8005f66 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8005f84:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8005f88:	2002      	movs	r0, #2
 8005f8a:	e7f2      	b.n	8005f72 <HAL_DMA_Start_IT+0x5e>

08005f8c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f8c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d006      	beq.n	8005fa2 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f94:	2304      	movs	r3, #4
 8005f96:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8005f9e:	2001      	movs	r0, #1
 8005fa0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fa2:	6803      	ldr	r3, [r0, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	f022 020e 	bic.w	r2, r2, #14
 8005faa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	f022 0201 	bic.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 8005fba:	408b      	lsls	r3, r1
 8005fbc:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8005fbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fc2:	8403      	strh	r3, [r0, #32]
  return status; 
 8005fc4:	2000      	movs	r0, #0
}
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_DMA_Abort_IT>:
{  
 8005fc8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005fca:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d003      	beq.n	8005fda <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fd2:	2304      	movs	r3, #4
 8005fd4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005fd6:	2001      	movs	r0, #1
}
 8005fd8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fda:	6803      	ldr	r3, [r0, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	f022 020e 	bic.w	r2, r2, #14
 8005fe2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005fec:	4a17      	ldr	r2, [pc, #92]	; (800604c <HAL_DMA_Abort_IT+0x84>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d01c      	beq.n	800602c <HAL_DMA_Abort_IT+0x64>
 8005ff2:	3214      	adds	r2, #20
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d01b      	beq.n	8006030 <HAL_DMA_Abort_IT+0x68>
 8005ff8:	3214      	adds	r2, #20
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d01a      	beq.n	8006034 <HAL_DMA_Abort_IT+0x6c>
 8005ffe:	3214      	adds	r2, #20
 8006000:	4293      	cmp	r3, r2
 8006002:	d01a      	beq.n	800603a <HAL_DMA_Abort_IT+0x72>
 8006004:	3214      	adds	r2, #20
 8006006:	4293      	cmp	r3, r2
 8006008:	d01a      	beq.n	8006040 <HAL_DMA_Abort_IT+0x78>
 800600a:	3214      	adds	r2, #20
 800600c:	4293      	cmp	r3, r2
 800600e:	bf0c      	ite	eq
 8006010:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006014:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8006018:	4a0d      	ldr	r2, [pc, #52]	; (8006050 <HAL_DMA_Abort_IT+0x88>)
 800601a:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800601c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006020:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8006022:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006024:	b17b      	cbz	r3, 8006046 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8006026:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8006028:	2000      	movs	r0, #0
 800602a:	e7d5      	b.n	8005fd8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800602c:	2301      	movs	r3, #1
 800602e:	e7f3      	b.n	8006018 <HAL_DMA_Abort_IT+0x50>
 8006030:	2310      	movs	r3, #16
 8006032:	e7f1      	b.n	8006018 <HAL_DMA_Abort_IT+0x50>
 8006034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006038:	e7ee      	b.n	8006018 <HAL_DMA_Abort_IT+0x50>
 800603a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800603e:	e7eb      	b.n	8006018 <HAL_DMA_Abort_IT+0x50>
 8006040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006044:	e7e8      	b.n	8006018 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8006046:	4618      	mov	r0, r3
 8006048:	e7c6      	b.n	8005fd8 <HAL_DMA_Abort_IT+0x10>
 800604a:	bf00      	nop
 800604c:	40020008 	.word	0x40020008
 8006050:	40020000 	.word	0x40020000

08006054 <HAL_DMA_IRQHandler>:
{
 8006054:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006056:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006058:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800605a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800605c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800605e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006060:	4095      	lsls	r5, r2
 8006062:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006064:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006066:	d032      	beq.n	80060ce <HAL_DMA_IRQHandler+0x7a>
 8006068:	074d      	lsls	r5, r1, #29
 800606a:	d530      	bpl.n	80060ce <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006070:	bf5e      	ittt	pl
 8006072:	681a      	ldrpl	r2, [r3, #0]
 8006074:	f022 0204 	bicpl.w	r2, r2, #4
 8006078:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800607a:	4a3d      	ldr	r2, [pc, #244]	; (8006170 <HAL_DMA_IRQHandler+0x11c>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d019      	beq.n	80060b4 <HAL_DMA_IRQHandler+0x60>
 8006080:	3214      	adds	r2, #20
 8006082:	4293      	cmp	r3, r2
 8006084:	d018      	beq.n	80060b8 <HAL_DMA_IRQHandler+0x64>
 8006086:	3214      	adds	r2, #20
 8006088:	4293      	cmp	r3, r2
 800608a:	d017      	beq.n	80060bc <HAL_DMA_IRQHandler+0x68>
 800608c:	3214      	adds	r2, #20
 800608e:	4293      	cmp	r3, r2
 8006090:	d017      	beq.n	80060c2 <HAL_DMA_IRQHandler+0x6e>
 8006092:	3214      	adds	r2, #20
 8006094:	4293      	cmp	r3, r2
 8006096:	d017      	beq.n	80060c8 <HAL_DMA_IRQHandler+0x74>
 8006098:	3214      	adds	r2, #20
 800609a:	4293      	cmp	r3, r2
 800609c:	bf0c      	ite	eq
 800609e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80060a2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80060a6:	4a33      	ldr	r2, [pc, #204]	; (8006174 <HAL_DMA_IRQHandler+0x120>)
 80060a8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80060aa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d05c      	beq.n	800616a <HAL_DMA_IRQHandler+0x116>
}
 80060b0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80060b2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80060b4:	2304      	movs	r3, #4
 80060b6:	e7f6      	b.n	80060a6 <HAL_DMA_IRQHandler+0x52>
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	e7f4      	b.n	80060a6 <HAL_DMA_IRQHandler+0x52>
 80060bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060c0:	e7f1      	b.n	80060a6 <HAL_DMA_IRQHandler+0x52>
 80060c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060c6:	e7ee      	b.n	80060a6 <HAL_DMA_IRQHandler+0x52>
 80060c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80060cc:	e7eb      	b.n	80060a6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80060ce:	2502      	movs	r5, #2
 80060d0:	4095      	lsls	r5, r2
 80060d2:	4225      	tst	r5, r4
 80060d4:	d035      	beq.n	8006142 <HAL_DMA_IRQHandler+0xee>
 80060d6:	078d      	lsls	r5, r1, #30
 80060d8:	d533      	bpl.n	8006142 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	0694      	lsls	r4, r2, #26
 80060de:	d406      	bmi.n	80060ee <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	f022 020a 	bic.w	r2, r2, #10
 80060e6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80060e8:	2201      	movs	r2, #1
 80060ea:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80060ee:	4a20      	ldr	r2, [pc, #128]	; (8006170 <HAL_DMA_IRQHandler+0x11c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d019      	beq.n	8006128 <HAL_DMA_IRQHandler+0xd4>
 80060f4:	3214      	adds	r2, #20
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d018      	beq.n	800612c <HAL_DMA_IRQHandler+0xd8>
 80060fa:	3214      	adds	r2, #20
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d017      	beq.n	8006130 <HAL_DMA_IRQHandler+0xdc>
 8006100:	3214      	adds	r2, #20
 8006102:	4293      	cmp	r3, r2
 8006104:	d017      	beq.n	8006136 <HAL_DMA_IRQHandler+0xe2>
 8006106:	3214      	adds	r2, #20
 8006108:	4293      	cmp	r3, r2
 800610a:	d017      	beq.n	800613c <HAL_DMA_IRQHandler+0xe8>
 800610c:	3214      	adds	r2, #20
 800610e:	4293      	cmp	r3, r2
 8006110:	bf0c      	ite	eq
 8006112:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8006116:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800611a:	4a16      	ldr	r2, [pc, #88]	; (8006174 <HAL_DMA_IRQHandler+0x120>)
 800611c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800611e:	2300      	movs	r3, #0
 8006120:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8006124:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006126:	e7c1      	b.n	80060ac <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006128:	2302      	movs	r3, #2
 800612a:	e7f6      	b.n	800611a <HAL_DMA_IRQHandler+0xc6>
 800612c:	2320      	movs	r3, #32
 800612e:	e7f4      	b.n	800611a <HAL_DMA_IRQHandler+0xc6>
 8006130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006134:	e7f1      	b.n	800611a <HAL_DMA_IRQHandler+0xc6>
 8006136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800613a:	e7ee      	b.n	800611a <HAL_DMA_IRQHandler+0xc6>
 800613c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006140:	e7eb      	b.n	800611a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006142:	2508      	movs	r5, #8
 8006144:	4095      	lsls	r5, r2
 8006146:	4225      	tst	r5, r4
 8006148:	d00f      	beq.n	800616a <HAL_DMA_IRQHandler+0x116>
 800614a:	0709      	lsls	r1, r1, #28
 800614c:	d50d      	bpl.n	800616a <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800614e:	6819      	ldr	r1, [r3, #0]
 8006150:	f021 010e 	bic.w	r1, r1, #14
 8006154:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006156:	2301      	movs	r3, #1
 8006158:	fa03 f202 	lsl.w	r2, r3, r2
 800615c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800615e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8006160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006164:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8006166:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006168:	e7a0      	b.n	80060ac <HAL_DMA_IRQHandler+0x58>
}
 800616a:	bc70      	pop	{r4, r5, r6}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	40020008 	.word	0x40020008
 8006174:	40020000 	.word	0x40020000

08006178 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006178:	4a11      	ldr	r2, [pc, #68]	; (80061c0 <FLASH_SetErrorCode+0x48>)
 800617a:	68d3      	ldr	r3, [r2, #12]
 800617c:	f013 0310 	ands.w	r3, r3, #16
 8006180:	d005      	beq.n	800618e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006182:	4910      	ldr	r1, [pc, #64]	; (80061c4 <FLASH_SetErrorCode+0x4c>)
 8006184:	69cb      	ldr	r3, [r1, #28]
 8006186:	f043 0302 	orr.w	r3, r3, #2
 800618a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800618c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800618e:	68d2      	ldr	r2, [r2, #12]
 8006190:	0750      	lsls	r0, r2, #29
 8006192:	d506      	bpl.n	80061a2 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006194:	490b      	ldr	r1, [pc, #44]	; (80061c4 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8006196:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800619a:	69ca      	ldr	r2, [r1, #28]
 800619c:	f042 0201 	orr.w	r2, r2, #1
 80061a0:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80061a2:	4a07      	ldr	r2, [pc, #28]	; (80061c0 <FLASH_SetErrorCode+0x48>)
 80061a4:	69d1      	ldr	r1, [r2, #28]
 80061a6:	07c9      	lsls	r1, r1, #31
 80061a8:	d508      	bpl.n	80061bc <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80061aa:	4806      	ldr	r0, [pc, #24]	; (80061c4 <FLASH_SetErrorCode+0x4c>)
 80061ac:	69c1      	ldr	r1, [r0, #28]
 80061ae:	f041 0104 	orr.w	r1, r1, #4
 80061b2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80061b4:	69d1      	ldr	r1, [r2, #28]
 80061b6:	f021 0101 	bic.w	r1, r1, #1
 80061ba:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80061bc:	60d3      	str	r3, [r2, #12]
}  
 80061be:	4770      	bx	lr
 80061c0:	40022000 	.word	0x40022000
 80061c4:	200019b0 	.word	0x200019b0

080061c8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_FLASH_Unlock+0x1c>)
 80061ca:	6918      	ldr	r0, [r3, #16]
 80061cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80061d0:	d007      	beq.n	80061e2 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80061d2:	4a05      	ldr	r2, [pc, #20]	; (80061e8 <HAL_FLASH_Unlock+0x20>)
 80061d4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80061d6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80061da:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80061dc:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80061de:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80061e2:	4770      	bx	lr
 80061e4:	40022000 	.word	0x40022000
 80061e8:	45670123 	.word	0x45670123

080061ec <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80061ec:	4a03      	ldr	r2, [pc, #12]	; (80061fc <HAL_FLASH_Lock+0x10>)
}
 80061ee:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80061f0:	6913      	ldr	r3, [r2, #16]
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	6113      	str	r3, [r2, #16]
}
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40022000 	.word	0x40022000

08006200 <FLASH_WaitForLastOperation>:
{
 8006200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006202:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006204:	f7ff fbb0 	bl	8005968 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006208:	4d11      	ldr	r5, [pc, #68]	; (8006250 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800620a:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800620c:	462e      	mov	r6, r5
 800620e:	68eb      	ldr	r3, [r5, #12]
 8006210:	07d8      	lsls	r0, r3, #31
 8006212:	d412      	bmi.n	800623a <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006214:	68eb      	ldr	r3, [r5, #12]
 8006216:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006218:	bf44      	itt	mi
 800621a:	2320      	movmi	r3, #32
 800621c:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800621e:	68f3      	ldr	r3, [r6, #12]
 8006220:	06da      	lsls	r2, r3, #27
 8006222:	d406      	bmi.n	8006232 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006224:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006226:	07db      	lsls	r3, r3, #31
 8006228:	d403      	bmi.n	8006232 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800622a:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800622c:	f010 0004 	ands.w	r0, r0, #4
 8006230:	d007      	beq.n	8006242 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8006232:	f7ff ffa1 	bl	8006178 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006236:	2001      	movs	r0, #1
 8006238:	e003      	b.n	8006242 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800623a:	1c63      	adds	r3, r4, #1
 800623c:	d0e7      	beq.n	800620e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800623e:	b90c      	cbnz	r4, 8006244 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8006240:	2003      	movs	r0, #3
}
 8006242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006244:	f7ff fb90 	bl	8005968 <HAL_GetTick>
 8006248:	1bc0      	subs	r0, r0, r7
 800624a:	42a0      	cmp	r0, r4
 800624c:	d9df      	bls.n	800620e <FLASH_WaitForLastOperation+0xe>
 800624e:	e7f7      	b.n	8006240 <FLASH_WaitForLastOperation+0x40>
 8006250:	40022000 	.word	0x40022000

08006254 <HAL_FLASH_Program>:
{
 8006254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8006258:	4e25      	ldr	r6, [pc, #148]	; (80062f0 <HAL_FLASH_Program+0x9c>)
{
 800625a:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800625c:	7e33      	ldrb	r3, [r6, #24]
{
 800625e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8006260:	2b01      	cmp	r3, #1
{
 8006262:	4688      	mov	r8, r1
 8006264:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8006266:	d040      	beq.n	80062ea <HAL_FLASH_Program+0x96>
 8006268:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800626a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800626e:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006270:	f7ff ffc6 	bl	8006200 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8006274:	bba8      	cbnz	r0, 80062e2 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006276:	2d01      	cmp	r5, #1
 8006278:	d003      	beq.n	8006282 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 800627a:	2d02      	cmp	r5, #2
 800627c:	bf0c      	ite	eq
 800627e:	2502      	moveq	r5, #2
 8006280:	2504      	movne	r5, #4
 8006282:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006286:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006288:	f8df b068 	ldr.w	fp, [pc, #104]	; 80062f4 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800628c:	ea4f 140a 	mov.w	r4, sl, lsl #4
 8006290:	f1c4 0120 	rsb	r1, r4, #32
 8006294:	f1a4 0220 	sub.w	r2, r4, #32
 8006298:	fa07 f101 	lsl.w	r1, r7, r1
 800629c:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80062a0:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80062a2:	430c      	orrs	r4, r1
 80062a4:	fa27 f202 	lsr.w	r2, r7, r2
 80062a8:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80062aa:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80062ae:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80062b0:	f042 0201 	orr.w	r2, r2, #1
 80062b4:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062b8:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 80062bc:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80062c0:	f7ff ff9e 	bl	8006200 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80062c4:	f8db 2010 	ldr.w	r2, [fp, #16]
 80062c8:	f022 0201 	bic.w	r2, r2, #1
 80062cc:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 80062d0:	b938      	cbnz	r0, 80062e2 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 80062d2:	f10a 0a01 	add.w	sl, sl, #1
 80062d6:	fa5f f28a 	uxtb.w	r2, sl
 80062da:	4295      	cmp	r5, r2
 80062dc:	f04f 0300 	mov.w	r3, #0
 80062e0:	d8d4      	bhi.n	800628c <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 80062e2:	2300      	movs	r3, #0
 80062e4:	7633      	strb	r3, [r6, #24]
}
 80062e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80062ea:	2002      	movs	r0, #2
 80062ec:	e7fb      	b.n	80062e6 <HAL_FLASH_Program+0x92>
 80062ee:	bf00      	nop
 80062f0:	200019b0 	.word	0x200019b0
 80062f4:	40022000 	.word	0x40022000

080062f8 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80062f8:	2200      	movs	r2, #0
 80062fa:	4b06      	ldr	r3, [pc, #24]	; (8006314 <FLASH_MassErase.isra.0+0x1c>)
 80062fc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <FLASH_MassErase.isra.0+0x20>)
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	f042 0204 	orr.w	r2, r2, #4
 8006306:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800630e:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	200019b0 	.word	0x200019b0
 8006318:	40022000 	.word	0x40022000

0800631c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800631c:	2200      	movs	r2, #0
 800631e:	4b06      	ldr	r3, [pc, #24]	; (8006338 <FLASH_PageErase+0x1c>)
 8006320:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <FLASH_PageErase+0x20>)
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	f042 0202 	orr.w	r2, r2, #2
 800632a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800632c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006334:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006336:	4770      	bx	lr
 8006338:	200019b0 	.word	0x200019b0
 800633c:	40022000 	.word	0x40022000

08006340 <HAL_FLASHEx_Erase>:
{
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8006344:	4e22      	ldr	r6, [pc, #136]	; (80063d0 <HAL_FLASHEx_Erase+0x90>)
{
 8006346:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8006348:	7e33      	ldrb	r3, [r6, #24]
{
 800634a:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 800634c:	2b01      	cmp	r3, #1
 800634e:	d03d      	beq.n	80063cc <HAL_FLASHEx_Erase+0x8c>
 8006350:	2401      	movs	r4, #1
 8006352:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006354:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006356:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800635a:	2b02      	cmp	r3, #2
 800635c:	d113      	bne.n	8006386 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800635e:	f7ff ff4f 	bl	8006200 <FLASH_WaitForLastOperation>
 8006362:	b120      	cbz	r0, 800636e <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006364:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8006366:	2300      	movs	r3, #0
 8006368:	7633      	strb	r3, [r6, #24]
}
 800636a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 800636e:	f7ff ffc3 	bl	80062f8 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006372:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006376:	f7ff ff43 	bl	8006200 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800637a:	4a16      	ldr	r2, [pc, #88]	; (80063d4 <HAL_FLASHEx_Erase+0x94>)
 800637c:	6913      	ldr	r3, [r2, #16]
 800637e:	f023 0304 	bic.w	r3, r3, #4
 8006382:	6113      	str	r3, [r2, #16]
 8006384:	e7ef      	b.n	8006366 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006386:	f7ff ff3b 	bl	8006200 <FLASH_WaitForLastOperation>
 800638a:	2800      	cmp	r0, #0
 800638c:	d1ea      	bne.n	8006364 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800638e:	f04f 33ff 	mov.w	r3, #4294967295
 8006392:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006396:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8006398:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800639a:	4c0e      	ldr	r4, [pc, #56]	; (80063d4 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800639c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 80063a0:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 80063a4:	42bb      	cmp	r3, r7
 80063a6:	d9de      	bls.n	8006366 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80063a8:	4638      	mov	r0, r7
 80063aa:	f7ff ffb7 	bl	800631c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80063ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80063b2:	f7ff ff25 	bl	8006200 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	f023 0302 	bic.w	r3, r3, #2
 80063bc:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 80063be:	b110      	cbz	r0, 80063c6 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 80063c0:	f8c8 7000 	str.w	r7, [r8]
            break;
 80063c4:	e7cf      	b.n	8006366 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80063c6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80063ca:	e7e7      	b.n	800639c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 80063cc:	2002      	movs	r0, #2
 80063ce:	e7cc      	b.n	800636a <HAL_FLASHEx_Erase+0x2a>
 80063d0:	200019b0 	.word	0x200019b0
 80063d4:	40022000 	.word	0x40022000

080063d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80063dc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80063de:	4616      	mov	r6, r2
 80063e0:	4b64      	ldr	r3, [pc, #400]	; (8006574 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80063e2:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006584 <HAL_GPIO_Init+0x1ac>
 80063e6:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8006588 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063ea:	680d      	ldr	r5, [r1, #0]
 80063ec:	fa35 f406 	lsrs.w	r4, r5, r6
 80063f0:	d102      	bne.n	80063f8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 80063f2:	b003      	add	sp, #12
 80063f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80063f8:	f04f 0801 	mov.w	r8, #1
 80063fc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006400:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8006404:	ea38 0505 	bics.w	r5, r8, r5
 8006408:	d17c      	bne.n	8006504 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 800640a:	684d      	ldr	r5, [r1, #4]
 800640c:	2d03      	cmp	r5, #3
 800640e:	d807      	bhi.n	8006420 <HAL_GPIO_Init+0x48>
 8006410:	3d01      	subs	r5, #1
 8006412:	2d02      	cmp	r5, #2
 8006414:	f200 8088 	bhi.w	8006528 <HAL_GPIO_Init+0x150>
 8006418:	e8df f005 	tbb	[pc, r5]
 800641c:	9b96      	.short	0x9b96
 800641e:	a1          	.byte	0xa1
 800641f:	00          	.byte	0x00
 8006420:	2d12      	cmp	r5, #18
 8006422:	f000 8099 	beq.w	8006558 <HAL_GPIO_Init+0x180>
 8006426:	d86f      	bhi.n	8006508 <HAL_GPIO_Init+0x130>
 8006428:	2d11      	cmp	r5, #17
 800642a:	f000 808f 	beq.w	800654c <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800642e:	2cff      	cmp	r4, #255	; 0xff
 8006430:	bf98      	it	ls
 8006432:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006434:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006438:	bf88      	it	hi
 800643a:	f100 0a04 	addhi.w	sl, r0, #4
 800643e:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006442:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006446:	bf88      	it	hi
 8006448:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800644a:	fa09 fb05 	lsl.w	fp, r9, r5
 800644e:	ea28 080b 	bic.w	r8, r8, fp
 8006452:	fa02 f505 	lsl.w	r5, r2, r5
 8006456:	ea48 0505 	orr.w	r5, r8, r5
 800645a:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800645e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8006462:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8006466:	d04d      	beq.n	8006504 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006468:	4f43      	ldr	r7, [pc, #268]	; (8006578 <HAL_GPIO_Init+0x1a0>)
 800646a:	f026 0803 	bic.w	r8, r6, #3
 800646e:	69bd      	ldr	r5, [r7, #24]
 8006470:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8006474:	f045 0501 	orr.w	r5, r5, #1
 8006478:	61bd      	str	r5, [r7, #24]
 800647a:	69bd      	ldr	r5, [r7, #24]
 800647c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8006480:	f005 0501 	and.w	r5, r5, #1
 8006484:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006486:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800648a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800648c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8006490:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006494:	fa09 f90b 	lsl.w	r9, r9, fp
 8006498:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800649c:	4d37      	ldr	r5, [pc, #220]	; (800657c <HAL_GPIO_Init+0x1a4>)
 800649e:	42a8      	cmp	r0, r5
 80064a0:	d061      	beq.n	8006566 <HAL_GPIO_Init+0x18e>
 80064a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064a6:	42a8      	cmp	r0, r5
 80064a8:	d05f      	beq.n	800656a <HAL_GPIO_Init+0x192>
 80064aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064ae:	42a8      	cmp	r0, r5
 80064b0:	d05d      	beq.n	800656e <HAL_GPIO_Init+0x196>
 80064b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80064b6:	42a8      	cmp	r0, r5
 80064b8:	bf0c      	ite	eq
 80064ba:	2503      	moveq	r5, #3
 80064bc:	2504      	movne	r5, #4
 80064be:	fa05 f50b 	lsl.w	r5, r5, fp
 80064c2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 80064c6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 80064ca:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064cc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80064d0:	bf14      	ite	ne
 80064d2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80064d4:	43a5      	biceq	r5, r4
 80064d6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80064d8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064da:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80064de:	bf14      	ite	ne
 80064e0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80064e2:	43a5      	biceq	r5, r4
 80064e4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80064e6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064e8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80064ec:	bf14      	ite	ne
 80064ee:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80064f0:	43a5      	biceq	r5, r4
 80064f2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80064f4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064f6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80064fa:	bf14      	ite	ne
 80064fc:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80064fe:	ea25 0404 	biceq.w	r4, r5, r4
 8006502:	60dc      	str	r4, [r3, #12]
	position++;
 8006504:	3601      	adds	r6, #1
 8006506:	e770      	b.n	80063ea <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8006508:	4f1d      	ldr	r7, [pc, #116]	; (8006580 <HAL_GPIO_Init+0x1a8>)
 800650a:	42bd      	cmp	r5, r7
 800650c:	d00c      	beq.n	8006528 <HAL_GPIO_Init+0x150>
 800650e:	d817      	bhi.n	8006540 <HAL_GPIO_Init+0x168>
 8006510:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800658c <HAL_GPIO_Init+0x1b4>
 8006514:	454d      	cmp	r5, r9
 8006516:	d007      	beq.n	8006528 <HAL_GPIO_Init+0x150>
 8006518:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800651c:	454d      	cmp	r5, r9
 800651e:	d003      	beq.n	8006528 <HAL_GPIO_Init+0x150>
 8006520:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8006524:	454d      	cmp	r5, r9
 8006526:	d182      	bne.n	800642e <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006528:	688a      	ldr	r2, [r1, #8]
 800652a:	b1d2      	cbz	r2, 8006562 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800652c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800652e:	bf08      	it	eq
 8006530:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006534:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8006538:	bf18      	it	ne
 800653a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800653e:	e776      	b.n	800642e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8006540:	4565      	cmp	r5, ip
 8006542:	d0f1      	beq.n	8006528 <HAL_GPIO_Init+0x150>
 8006544:	4575      	cmp	r5, lr
 8006546:	e7ee      	b.n	8006526 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006548:	68ca      	ldr	r2, [r1, #12]
          break;
 800654a:	e770      	b.n	800642e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800654c:	68ca      	ldr	r2, [r1, #12]
 800654e:	3204      	adds	r2, #4
          break;
 8006550:	e76d      	b.n	800642e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006552:	68ca      	ldr	r2, [r1, #12]
 8006554:	3208      	adds	r2, #8
          break;
 8006556:	e76a      	b.n	800642e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006558:	68ca      	ldr	r2, [r1, #12]
 800655a:	320c      	adds	r2, #12
          break;
 800655c:	e767      	b.n	800642e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800655e:	2200      	movs	r2, #0
 8006560:	e765      	b.n	800642e <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006562:	2204      	movs	r2, #4
 8006564:	e763      	b.n	800642e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006566:	2500      	movs	r5, #0
 8006568:	e7a9      	b.n	80064be <HAL_GPIO_Init+0xe6>
 800656a:	2501      	movs	r5, #1
 800656c:	e7a7      	b.n	80064be <HAL_GPIO_Init+0xe6>
 800656e:	2502      	movs	r5, #2
 8006570:	e7a5      	b.n	80064be <HAL_GPIO_Init+0xe6>
 8006572:	bf00      	nop
 8006574:	40010400 	.word	0x40010400
 8006578:	40021000 	.word	0x40021000
 800657c:	40010800 	.word	0x40010800
 8006580:	10220000 	.word	0x10220000
 8006584:	10310000 	.word	0x10310000
 8006588:	10320000 	.word	0x10320000
 800658c:	10120000 	.word	0x10120000

08006590 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006590:	6883      	ldr	r3, [r0, #8]
 8006592:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006594:	bf14      	ite	ne
 8006596:	2001      	movne	r0, #1
 8006598:	2000      	moveq	r0, #0
 800659a:	4770      	bx	lr

0800659c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800659c:	b10a      	cbz	r2, 80065a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800659e:	6101      	str	r1, [r0, #16]
  }
}
 80065a0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80065a2:	0409      	lsls	r1, r1, #16
 80065a4:	e7fb      	b.n	800659e <HAL_GPIO_WritePin+0x2>
	...

080065a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065a8:	4a04      	ldr	r2, [pc, #16]	; (80065bc <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80065aa:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065ac:	6951      	ldr	r1, [r2, #20]
 80065ae:	4201      	tst	r1, r0
 80065b0:	d002      	beq.n	80065b8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80065b2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065b4:	f7fb f9d6 	bl	8001964 <HAL_GPIO_EXTI_Callback>
  }
}
 80065b8:	bd08      	pop	{r3, pc}
 80065ba:	bf00      	nop
 80065bc:	40010400 	.word	0x40010400

080065c0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065c0:	6801      	ldr	r1, [r0, #0]
 80065c2:	2200      	movs	r2, #0
 80065c4:	694b      	ldr	r3, [r1, #20]
 80065c6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80065ca:	d010      	beq.n	80065ee <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065cc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80065d0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80065d2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80065d4:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065da:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065de:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065e4:	f043 0304 	orr.w	r3, r3, #4
 80065e8:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80065ea:	2001      	movs	r0, #1
 80065ec:	4770      	bx	lr
  }
  return HAL_OK;
 80065ee:	4618      	mov	r0, r3
}
 80065f0:	4770      	bx	lr

080065f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80065f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	460f      	mov	r7, r1
 80065fa:	4616      	mov	r6, r2
 80065fc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065fe:	6825      	ldr	r5, [r4, #0]
 8006600:	6968      	ldr	r0, [r5, #20]
 8006602:	ea27 0000 	bic.w	r0, r7, r0
 8006606:	b280      	uxth	r0, r0
 8006608:	b1b8      	cbz	r0, 800663a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800660a:	696b      	ldr	r3, [r5, #20]
 800660c:	055a      	lsls	r2, r3, #21
 800660e:	d516      	bpl.n	800663e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006610:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8006612:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006618:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800661a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800661e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006620:	2300      	movs	r3, #0
 8006622:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006624:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006628:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800662c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800662e:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8006632:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006634:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006636:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800663a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800663e:	1c73      	adds	r3, r6, #1
 8006640:	d0de      	beq.n	8006600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006642:	f7ff f991 	bl	8005968 <HAL_GetTick>
 8006646:	eba0 0008 	sub.w	r0, r0, r8
 800664a:	42b0      	cmp	r0, r6
 800664c:	d801      	bhi.n	8006652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800664e:	2e00      	cmp	r6, #0
 8006650:	d1d5      	bne.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006652:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006654:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006656:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006658:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800665c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006660:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006662:	f042 0220 	orr.w	r2, r2, #32
 8006666:	e7e4      	b.n	8006632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08006668 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006668:	b570      	push	{r4, r5, r6, lr}
 800666a:	4604      	mov	r4, r0
 800666c:	460d      	mov	r5, r1
 800666e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006670:	6823      	ldr	r3, [r4, #0]
 8006672:	695b      	ldr	r3, [r3, #20]
 8006674:	075b      	lsls	r3, r3, #29
 8006676:	d501      	bpl.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8006678:	2000      	movs	r0, #0
}
 800667a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800667c:	4620      	mov	r0, r4
 800667e:	f7ff ff9f 	bl	80065c0 <I2C_IsAcknowledgeFailed>
 8006682:	b9a8      	cbnz	r0, 80066b0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8006684:	1c6a      	adds	r2, r5, #1
 8006686:	d0f3      	beq.n	8006670 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006688:	f7ff f96e 	bl	8005968 <HAL_GetTick>
 800668c:	1b80      	subs	r0, r0, r6
 800668e:	42a8      	cmp	r0, r5
 8006690:	d801      	bhi.n	8006696 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8006692:	2d00      	cmp	r5, #0
 8006694:	d1ec      	bne.n	8006670 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006696:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006698:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800669a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800669c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80066a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066a4:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80066a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066aa:	f042 0220 	orr.w	r2, r2, #32
 80066ae:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80066b0:	2001      	movs	r0, #1
 80066b2:	e7e2      	b.n	800667a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080066b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066bc:	6821      	ldr	r1, [r4, #0]
 80066be:	694b      	ldr	r3, [r1, #20]
 80066c0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80066c4:	d001      	beq.n	80066ca <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80066c6:	2000      	movs	r0, #0
 80066c8:	e010      	b.n	80066ec <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ca:	694a      	ldr	r2, [r1, #20]
 80066cc:	06d2      	lsls	r2, r2, #27
 80066ce:	d50e      	bpl.n	80066ee <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066d0:	f06f 0210 	mvn.w	r2, #16
 80066d4:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80066d6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066d8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80066e4:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80066e6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80066e8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ee:	f7ff f93b 	bl	8005968 <HAL_GetTick>
 80066f2:	1b80      	subs	r0, r0, r6
 80066f4:	42a8      	cmp	r0, r5
 80066f6:	d801      	bhi.n	80066fc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80066f8:	2d00      	cmp	r5, #0
 80066fa:	d1df      	bne.n	80066bc <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066fc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80066fe:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006700:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006702:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006706:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800670a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800670c:	f042 0220 	orr.w	r2, r2, #32
 8006710:	e7e8      	b.n	80066e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08006712 <I2C_WaitOnFlagUntilTimeout>:
{
 8006712:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	4691      	mov	r9, r2
 800671c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800671e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006722:	6833      	ldr	r3, [r6, #0]
 8006724:	f1ba 0f01 	cmp.w	sl, #1
 8006728:	bf0c      	ite	eq
 800672a:	695c      	ldreq	r4, [r3, #20]
 800672c:	699c      	ldrne	r4, [r3, #24]
 800672e:	ea27 0404 	bic.w	r4, r7, r4
 8006732:	b2a4      	uxth	r4, r4
 8006734:	fab4 f484 	clz	r4, r4
 8006738:	0964      	lsrs	r4, r4, #5
 800673a:	45a1      	cmp	r9, r4
 800673c:	d001      	beq.n	8006742 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800673e:	2000      	movs	r0, #0
 8006740:	e017      	b.n	8006772 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8006742:	1c6a      	adds	r2, r5, #1
 8006744:	d0ee      	beq.n	8006724 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006746:	f7ff f90f 	bl	8005968 <HAL_GetTick>
 800674a:	9b08      	ldr	r3, [sp, #32]
 800674c:	1ac0      	subs	r0, r0, r3
 800674e:	42a8      	cmp	r0, r5
 8006750:	d801      	bhi.n	8006756 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006752:	2d00      	cmp	r5, #0
 8006754:	d1e5      	bne.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006756:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006758:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800675a:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800675c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800675e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006762:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006766:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006768:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800676c:	f042 0220 	orr.w	r2, r2, #32
 8006770:	6432      	str	r2, [r6, #64]	; 0x40
}
 8006772:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08006776 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8006776:	b570      	push	{r4, r5, r6, lr}
 8006778:	4604      	mov	r4, r0
 800677a:	460d      	mov	r5, r1
 800677c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	695b      	ldr	r3, [r3, #20]
 8006782:	061b      	lsls	r3, r3, #24
 8006784:	d501      	bpl.n	800678a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8006786:	2000      	movs	r0, #0
}
 8006788:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800678a:	4620      	mov	r0, r4
 800678c:	f7ff ff18 	bl	80065c0 <I2C_IsAcknowledgeFailed>
 8006790:	b9a8      	cbnz	r0, 80067be <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8006792:	1c6a      	adds	r2, r5, #1
 8006794:	d0f3      	beq.n	800677e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006796:	f7ff f8e7 	bl	8005968 <HAL_GetTick>
 800679a:	1b80      	subs	r0, r0, r6
 800679c:	42a8      	cmp	r0, r5
 800679e:	d801      	bhi.n	80067a4 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80067a0:	2d00      	cmp	r5, #0
 80067a2:	d1ec      	bne.n	800677e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067a4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80067a6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067a8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80067b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067b8:	f042 0220 	orr.w	r2, r2, #32
 80067bc:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80067be:	2001      	movs	r0, #1
 80067c0:	e7e2      	b.n	8006788 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080067c4 <I2C_RequestMemoryWrite>:
{
 80067c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067c8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ca:	6802      	ldr	r2, [r0, #0]
{
 80067cc:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067ce:	6813      	ldr	r3, [r2, #0]
{
 80067d0:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d6:	6013      	str	r3, [r2, #0]
{
 80067d8:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80067dc:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067de:	463b      	mov	r3, r7
 80067e0:	2200      	movs	r2, #0
 80067e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067e6:	f8cd 8000 	str.w	r8, [sp]
{
 80067ea:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067ec:	f7ff ff91 	bl	8006712 <I2C_WaitOnFlagUntilTimeout>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	b138      	cbz	r0, 8006804 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	05db      	lsls	r3, r3, #23
 80067f8:	d502      	bpl.n	8006800 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80067fe:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006800:	2003      	movs	r0, #3
 8006802:	e00a      	b.n	800681a <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006804:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8006808:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800680a:	463a      	mov	r2, r7
 800680c:	4643      	mov	r3, r8
 800680e:	4620      	mov	r0, r4
 8006810:	4917      	ldr	r1, [pc, #92]	; (8006870 <I2C_RequestMemoryWrite+0xac>)
 8006812:	f7ff feee 	bl	80065f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006816:	b118      	cbz	r0, 8006820 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8006818:	2001      	movs	r0, #1
}
 800681a:	b005      	add	sp, #20
 800681c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006820:	6823      	ldr	r3, [r4, #0]
 8006822:	9003      	str	r0, [sp, #12]
 8006824:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006826:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006828:	9203      	str	r2, [sp, #12]
 800682a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682c:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800682e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006830:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006834:	f7ff ff9f 	bl	8006776 <I2C_WaitOnTXEFlagUntilTimeout>
 8006838:	b140      	cbz	r0, 800684c <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800683c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	bf01      	itttt	eq
 8006840:	6822      	ldreq	r2, [r4, #0]
 8006842:	6813      	ldreq	r3, [r2, #0]
 8006844:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006848:	6013      	streq	r3, [r2, #0]
 800684a:	e7e5      	b.n	8006818 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800684c:	f1b9 0f01 	cmp.w	r9, #1
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	d102      	bne.n	800685a <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006854:	b2ed      	uxtb	r5, r5
 8006856:	611d      	str	r5, [r3, #16]
 8006858:	e7df      	b.n	800681a <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800685a:	0a2a      	lsrs	r2, r5, #8
 800685c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800685e:	4639      	mov	r1, r7
 8006860:	4642      	mov	r2, r8
 8006862:	4620      	mov	r0, r4
 8006864:	f7ff ff87 	bl	8006776 <I2C_WaitOnTXEFlagUntilTimeout>
 8006868:	2800      	cmp	r0, #0
 800686a:	d1e6      	bne.n	800683a <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	e7f1      	b.n	8006854 <I2C_RequestMemoryWrite+0x90>
 8006870:	00010002 	.word	0x00010002

08006874 <I2C_RequestMemoryRead>:
{
 8006874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	469a      	mov	sl, r3
 800687a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800687e:	6803      	ldr	r3, [r0, #0]
{
 8006880:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006882:	681a      	ldr	r2, [r3, #0]
{
 8006884:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006886:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800688a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800688c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800688e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006892:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006896:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006898:	463b      	mov	r3, r7
 800689a:	2200      	movs	r2, #0
 800689c:	f8cd 8000 	str.w	r8, [sp]
{
 80068a0:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068a2:	f7ff ff36 	bl	8006712 <I2C_WaitOnFlagUntilTimeout>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	b148      	cbz	r0, 80068be <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068aa:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068ac:	05db      	lsls	r3, r3, #23
 80068ae:	d502      	bpl.n	80068b6 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068b4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80068b6:	2003      	movs	r0, #3
}
 80068b8:	b004      	add	sp, #16
 80068ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068be:	fa5f f986 	uxtb.w	r9, r6
 80068c2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80068c6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068c8:	463a      	mov	r2, r7
 80068ca:	4643      	mov	r3, r8
 80068cc:	4620      	mov	r0, r4
 80068ce:	4929      	ldr	r1, [pc, #164]	; (8006974 <I2C_RequestMemoryRead+0x100>)
 80068d0:	f7ff fe8f 	bl	80065f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068d4:	b108      	cbz	r0, 80068da <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80068d6:	2001      	movs	r0, #1
 80068d8:	e7ee      	b.n	80068b8 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	9003      	str	r0, [sp, #12]
 80068de:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e0:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e2:	9203      	str	r2, [sp, #12]
 80068e4:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068e6:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ea:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ec:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ee:	f7ff ff42 	bl	8006776 <I2C_WaitOnTXEFlagUntilTimeout>
 80068f2:	b140      	cbz	r0, 8006906 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068f6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068f8:	bf01      	itttt	eq
 80068fa:	6822      	ldreq	r2, [r4, #0]
 80068fc:	6813      	ldreq	r3, [r2, #0]
 80068fe:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006902:	6013      	streq	r3, [r2, #0]
 8006904:	e7e7      	b.n	80068d6 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006906:	f1ba 0f01 	cmp.w	sl, #1
 800690a:	6823      	ldr	r3, [r4, #0]
 800690c:	d11a      	bne.n	8006944 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800690e:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006910:	4642      	mov	r2, r8
 8006912:	4639      	mov	r1, r7
 8006914:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006916:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006918:	f7ff ff2d 	bl	8006776 <I2C_WaitOnTXEFlagUntilTimeout>
 800691c:	4602      	mov	r2, r0
 800691e:	2800      	cmp	r0, #0
 8006920:	d1e8      	bne.n	80068f4 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006922:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006924:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006926:	680b      	ldr	r3, [r1, #0]
 8006928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692c:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800692e:	463b      	mov	r3, r7
 8006930:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006934:	f8cd 8000 	str.w	r8, [sp]
 8006938:	f7ff feeb 	bl	8006712 <I2C_WaitOnFlagUntilTimeout>
 800693c:	6822      	ldr	r2, [r4, #0]
 800693e:	b160      	cbz	r0, 800695a <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006940:	6813      	ldr	r3, [r2, #0]
 8006942:	e7b3      	b.n	80068ac <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006944:	0a2a      	lsrs	r2, r5, #8
 8006946:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006948:	4639      	mov	r1, r7
 800694a:	4642      	mov	r2, r8
 800694c:	4620      	mov	r0, r4
 800694e:	f7ff ff12 	bl	8006776 <I2C_WaitOnTXEFlagUntilTimeout>
 8006952:	2800      	cmp	r0, #0
 8006954:	d1ce      	bne.n	80068f4 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	e7d9      	b.n	800690e <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800695a:	f049 0301 	orr.w	r3, r9, #1
 800695e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006960:	4620      	mov	r0, r4
 8006962:	4643      	mov	r3, r8
 8006964:	463a      	mov	r2, r7
 8006966:	4903      	ldr	r1, [pc, #12]	; (8006974 <I2C_RequestMemoryRead+0x100>)
 8006968:	f7ff fe43 	bl	80065f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 800696c:	3800      	subs	r0, #0
 800696e:	bf18      	it	ne
 8006970:	2001      	movne	r0, #1
 8006972:	e7a1      	b.n	80068b8 <I2C_RequestMemoryRead+0x44>
 8006974:	00010002 	.word	0x00010002

08006978 <HAL_I2C_Init>:
{
 8006978:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800697a:	4604      	mov	r4, r0
 800697c:	b908      	cbnz	r0, 8006982 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800697e:	2001      	movs	r0, #1
}
 8006980:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006982:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006986:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800698a:	b91b      	cbnz	r3, 8006994 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800698c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006990:	f7fd ff7a 	bl	8004888 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006994:	2324      	movs	r3, #36	; 0x24
 8006996:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	f022 0201 	bic.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069b2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80069b4:	f000 fcf6 	bl	80073a4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80069b8:	4a3f      	ldr	r2, [pc, #252]	; (8006ab8 <HAL_I2C_Init+0x140>)
 80069ba:	6863      	ldr	r3, [r4, #4]
 80069bc:	4293      	cmp	r3, r2
 80069be:	bf94      	ite	ls
 80069c0:	4a3e      	ldrls	r2, [pc, #248]	; (8006abc <HAL_I2C_Init+0x144>)
 80069c2:	4a3f      	ldrhi	r2, [pc, #252]	; (8006ac0 <HAL_I2C_Init+0x148>)
 80069c4:	4290      	cmp	r0, r2
 80069c6:	bf8c      	ite	hi
 80069c8:	2200      	movhi	r2, #0
 80069ca:	2201      	movls	r2, #1
 80069cc:	2a00      	cmp	r2, #0
 80069ce:	d1d6      	bne.n	800697e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80069d0:	4e3c      	ldr	r6, [pc, #240]	; (8006ac4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069d2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80069d4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80069d8:	6851      	ldr	r1, [r2, #4]
 80069da:	3801      	subs	r0, #1
 80069dc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80069e0:	4331      	orrs	r1, r6
 80069e2:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80069e4:	4934      	ldr	r1, [pc, #208]	; (8006ab8 <HAL_I2C_Init+0x140>)
 80069e6:	6a15      	ldr	r5, [r2, #32]
 80069e8:	428b      	cmp	r3, r1
 80069ea:	bf81      	itttt	hi
 80069ec:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80069f0:	4371      	mulhi	r1, r6
 80069f2:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80069f6:	fbb1 f1f6 	udivhi	r1, r1, r6
 80069fa:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80069fe:	bf94      	ite	ls
 8006a00:	1c71      	addls	r1, r6, #1
 8006a02:	3101      	addhi	r1, #1
 8006a04:	4329      	orrs	r1, r5
 8006a06:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a08:	69d1      	ldr	r1, [r2, #28]
 8006a0a:	4d2b      	ldr	r5, [pc, #172]	; (8006ab8 <HAL_I2C_Init+0x140>)
 8006a0c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006a16:	d832      	bhi.n	8006a7e <HAL_I2C_Init+0x106>
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8006a1e:	1c43      	adds	r3, r0, #1
 8006a20:	f640 70fc 	movw	r0, #4092	; 0xffc
 8006a24:	4203      	tst	r3, r0
 8006a26:	d042      	beq.n	8006aae <HAL_I2C_Init+0x136>
 8006a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a2c:	430b      	orrs	r3, r1
 8006a2e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a30:	6811      	ldr	r1, [r2, #0]
 8006a32:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006a36:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8006a3a:	4303      	orrs	r3, r0
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a40:	6891      	ldr	r1, [r2, #8]
 8006a42:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8006a46:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8006a4a:	4303      	orrs	r3, r0
 8006a4c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a54:	68d1      	ldr	r1, [r2, #12]
 8006a56:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8006a5a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006a5e:	4303      	orrs	r3, r0
 8006a60:	430b      	orrs	r3, r1
 8006a62:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006a64:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a66:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006a6e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a70:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a76:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8006a7c:	e780      	b.n	8006980 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006a7e:	68a5      	ldr	r5, [r4, #8]
 8006a80:	b955      	cbnz	r5, 8006a98 <HAL_I2C_Init+0x120>
 8006a82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a86:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a90:	b17b      	cbz	r3, 8006ab2 <HAL_I2C_Init+0x13a>
 8006a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a96:	e7c9      	b.n	8006a2c <HAL_I2C_Init+0xb4>
 8006a98:	2519      	movs	r5, #25
 8006a9a:	436b      	muls	r3, r5
 8006a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aa6:	b123      	cbz	r3, 8006ab2 <HAL_I2C_Init+0x13a>
 8006aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006aac:	e7be      	b.n	8006a2c <HAL_I2C_Init+0xb4>
 8006aae:	2304      	movs	r3, #4
 8006ab0:	e7bc      	b.n	8006a2c <HAL_I2C_Init+0xb4>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e7ba      	b.n	8006a2c <HAL_I2C_Init+0xb4>
 8006ab6:	bf00      	nop
 8006ab8:	000186a0 	.word	0x000186a0
 8006abc:	001e847f 	.word	0x001e847f
 8006ac0:	003d08ff 	.word	0x003d08ff
 8006ac4:	000f4240 	.word	0x000f4240

08006ac8 <HAL_I2C_Mem_Write>:
{
 8006ac8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006acc:	4604      	mov	r4, r0
 8006ace:	4699      	mov	r9, r3
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	4690      	mov	r8, r2
 8006ad4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8006ad6:	f7fe ff47 	bl	8005968 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ada:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006ade:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae0:	2b20      	cmp	r3, #32
 8006ae2:	d003      	beq.n	8006aec <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8006ae4:	2002      	movs	r0, #2
}
 8006ae6:	b003      	add	sp, #12
 8006ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006aec:	9000      	str	r0, [sp, #0]
 8006aee:	2319      	movs	r3, #25
 8006af0:	2201      	movs	r2, #1
 8006af2:	4620      	mov	r0, r4
 8006af4:	493a      	ldr	r1, [pc, #232]	; (8006be0 <HAL_I2C_Mem_Write+0x118>)
 8006af6:	f7ff fe0c 	bl	8006712 <I2C_WaitOnFlagUntilTimeout>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d1f2      	bne.n	8006ae4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8006afe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d0ee      	beq.n	8006ae4 <HAL_I2C_Mem_Write+0x1c>
 8006b06:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b08:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8006b0a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b0e:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b10:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b12:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8006b14:	bf58      	it	pl
 8006b16:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b18:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8006b1a:	bf5c      	itt	pl
 8006b1c:	f043 0301 	orrpl.w	r3, r3, #1
 8006b20:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b22:	6803      	ldr	r3, [r0, #0]
 8006b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b28:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006b2a:	2321      	movs	r3, #33	; 0x21
 8006b2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b30:	2340      	movs	r3, #64	; 0x40
 8006b32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b3c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8006b3e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b40:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b44:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8006b48:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006b4c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b4e:	4b25      	ldr	r3, [pc, #148]	; (8006be4 <HAL_I2C_Mem_Write+0x11c>)
 8006b50:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b52:	464b      	mov	r3, r9
 8006b54:	f7ff fe36 	bl	80067c4 <I2C_RequestMemoryWrite>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d02a      	beq.n	8006bb2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8006b5c:	2001      	movs	r0, #1
 8006b5e:	e7c2      	b.n	8006ae6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b60:	f7ff fe09 	bl	8006776 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b64:	b140      	cbz	r0, 8006b78 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b68:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b6a:	bf01      	itttt	eq
 8006b6c:	6822      	ldreq	r2, [r4, #0]
 8006b6e:	6813      	ldreq	r3, [r2, #0]
 8006b70:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006b74:	6013      	streq	r3, [r2, #0]
 8006b76:	e7f1      	b.n	8006b5c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b7a:	6827      	ldr	r7, [r4, #0]
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006b82:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8006b84:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006b86:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006b88:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006b8a:	3a01      	subs	r2, #1
 8006b8c:	b292      	uxth	r2, r2
 8006b8e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b90:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8006b92:	1e48      	subs	r0, r1, #1
 8006b94:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b96:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8006b98:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b9a:	d50a      	bpl.n	8006bb2 <HAL_I2C_Mem_Write+0xea>
 8006b9c:	b148      	cbz	r0, 8006bb2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b9e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8006ba0:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ba2:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8006ba4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006ba6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006ba8:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8006bae:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006bb0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006bb2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bb4:	462a      	mov	r2, r5
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1d0      	bne.n	8006b60 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bbe:	f7ff fd53 	bl	8006668 <I2C_WaitOnBTFFlagUntilTimeout>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d1cf      	bne.n	8006b66 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bc6:	6822      	ldr	r2, [r4, #0]
 8006bc8:	6813      	ldr	r3, [r2, #0]
 8006bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bce:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8006bd2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bda:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8006bde:	e782      	b.n	8006ae6 <HAL_I2C_Mem_Write+0x1e>
 8006be0:	00100002 	.word	0x00100002
 8006be4:	ffff0000 	.word	0xffff0000

08006be8 <HAL_I2C_Mem_Read>:
{
 8006be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bec:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8006bee:	2300      	movs	r3, #0
{
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 8006bf4:	9303      	str	r3, [sp, #12]
{
 8006bf6:	460d      	mov	r5, r1
 8006bf8:	4690      	mov	r8, r2
 8006bfa:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8006bfc:	f7fe feb4 	bl	8005968 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c00:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8006c04:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d004      	beq.n	8006c14 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 8006c0a:	2502      	movs	r5, #2
}
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	b009      	add	sp, #36	; 0x24
 8006c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c14:	9000      	str	r0, [sp, #0]
 8006c16:	2319      	movs	r3, #25
 8006c18:	2201      	movs	r2, #1
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	498d      	ldr	r1, [pc, #564]	; (8006e54 <HAL_I2C_Mem_Read+0x26c>)
 8006c1e:	f7ff fd78 	bl	8006712 <I2C_WaitOnFlagUntilTimeout>
 8006c22:	2800      	cmp	r0, #0
 8006c24:	d1f1      	bne.n	8006c0a <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8006c26:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d0ed      	beq.n	8006c0a <HAL_I2C_Mem_Read+0x22>
 8006c2e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c30:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8006c32:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c36:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c38:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c3a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8006c3c:	bf58      	it	pl
 8006c3e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c40:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8006c42:	bf5c      	itt	pl
 8006c44:	f043 0301 	orrpl.w	r3, r3, #1
 8006c48:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c4a:	6803      	ldr	r3, [r0, #0]
 8006c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c50:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006c52:	2322      	movs	r3, #34	; 0x22
 8006c54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006c62:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c64:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8006c66:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c68:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c6c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8006c70:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c72:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006c74:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c76:	4b78      	ldr	r3, [pc, #480]	; (8006e58 <HAL_I2C_Mem_Read+0x270>)
 8006c78:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	f7ff fdfa 	bl	8006874 <I2C_RequestMemoryRead>
 8006c80:	4605      	mov	r5, r0
 8006c82:	b108      	cbz	r0, 8006c88 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8006c84:	2501      	movs	r5, #1
 8006c86:	e7c1      	b.n	8006c0c <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8006c88:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	b9c2      	cbnz	r2, 8006cc0 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c8e:	9004      	str	r0, [sp, #16]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	9204      	str	r2, [sp, #16]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	9204      	str	r2, [sp, #16]
 8006c98:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca0:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ca2:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8006e5c <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ca6:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8006e60 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 8006caa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d137      	bne.n	8006d20 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cb0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8006cb2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8006cb6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8006cbe:	e7a5      	b.n	8006c0c <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8006cc0:	2a01      	cmp	r2, #1
 8006cc2:	d111      	bne.n	8006ce8 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cca:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006ccc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	9005      	str	r0, [sp, #20]
 8006cd2:	695a      	ldr	r2, [r3, #20]
 8006cd4:	9205      	str	r2, [sp, #20]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	9205      	str	r2, [sp, #20]
 8006cda:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ce2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006ce4:	b662      	cpsie	i
}
 8006ce6:	e7dc      	b.n	8006ca2 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8006ce8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cea:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8006cec:	d10e      	bne.n	8006d0c <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006cf4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	9006      	str	r0, [sp, #24]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	9206      	str	r2, [sp, #24]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	9206      	str	r2, [sp, #24]
 8006d02:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d0a:	e7ea      	b.n	8006ce2 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d10:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d12:	9007      	str	r0, [sp, #28]
 8006d14:	695a      	ldr	r2, [r3, #20]
 8006d16:	9207      	str	r2, [sp, #28]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	9307      	str	r3, [sp, #28]
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	e7c0      	b.n	8006ca2 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d878      	bhi.n	8006e16 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d115      	bne.n	8006d54 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d28:	4632      	mov	r2, r6
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f7ff fcc1 	bl	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d32:	2800      	cmp	r0, #0
 8006d34:	d1a6      	bne.n	8006c84 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d36:	6823      	ldr	r3, [r4, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d3c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006d3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d40:	3301      	adds	r3, #1
 8006d42:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006d44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d46:	3b01      	subs	r3, #1
 8006d48:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006d4a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006d52:	e7aa      	b.n	8006caa <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8006d54:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	463b      	mov	r3, r7
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	4620      	mov	r0, r4
 8006d60:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8006d62:	d118      	bne.n	8006d96 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d64:	f7ff fcd5 	bl	8006712 <I2C_WaitOnFlagUntilTimeout>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d18b      	bne.n	8006c84 <HAL_I2C_Mem_Read+0x9c>
 8006d6c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d76:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d78:	691a      	ldr	r2, [r3, #16]
 8006d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d7c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006d7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d80:	3301      	adds	r3, #1
 8006d82:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006d84:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006d86:	3b01      	subs	r3, #1
 8006d88:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006d8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006d92:	b662      	cpsie	i
 8006d94:	e7cf      	b.n	8006d36 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d96:	f7ff fcbc 	bl	8006712 <I2C_WaitOnFlagUntilTimeout>
 8006d9a:	2800      	cmp	r0, #0
 8006d9c:	f47f af72 	bne.w	8006c84 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006da0:	6822      	ldr	r2, [r4, #0]
 8006da2:	6813      	ldr	r3, [r2, #0]
 8006da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006da8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006daa:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	691a      	ldr	r2, [r3, #16]
 8006db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006db2:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006db4:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8006db8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006dba:	1c4b      	adds	r3, r1, #1
 8006dbc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006dbe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006dcc:	f8d9 3000 	ldr.w	r3, [r9]
 8006dd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8006dd4:	2323      	movs	r3, #35	; 0x23
 8006dd6:	4353      	muls	r3, r2
 8006dd8:	9303      	str	r3, [sp, #12]
            count--;
 8006dda:	9b03      	ldr	r3, [sp, #12]
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	b96b      	cbnz	r3, 8006e00 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8006de4:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8006de6:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006de8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006df0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006df2:	f042 0220 	orr.w	r2, r2, #32
 8006df6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8006df8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8006dfa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8006dfe:	e741      	b.n	8006c84 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	695a      	ldr	r2, [r3, #20]
 8006e04:	0750      	lsls	r0, r2, #29
 8006e06:	d5e8      	bpl.n	8006dda <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e0e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e10:	691b      	ldr	r3, [r3, #16]
 8006e12:	704b      	strb	r3, [r1, #1]
 8006e14:	e7b3      	b.n	8006d7e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e16:	4632      	mov	r2, r6
 8006e18:	4639      	mov	r1, r7
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff fc4a 	bl	80066b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f47f af2f 	bne.w	8006c84 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e26:	6823      	ldr	r3, [r4, #0]
 8006e28:	691a      	ldr	r2, [r3, #16]
 8006e2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e2c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006e2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e30:	1c53      	adds	r3, r2, #1
 8006e32:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006e34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006e36:	3b01      	subs	r3, #1
 8006e38:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006e3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006e42:	6823      	ldr	r3, [r4, #0]
 8006e44:	6959      	ldr	r1, [r3, #20]
 8006e46:	0749      	lsls	r1, r1, #29
 8006e48:	f57f af2f 	bpl.w	8006caa <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	7053      	strb	r3, [r2, #1]
 8006e50:	e775      	b.n	8006d3e <HAL_I2C_Mem_Read+0x156>
 8006e52:	bf00      	nop
 8006e54:	00100002 	.word	0x00100002
 8006e58:	ffff0000 	.word	0xffff0000
 8006e5c:	00010004 	.word	0x00010004
 8006e60:	2000004c 	.word	0x2000004c

08006e64 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006e64:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006e66:	4604      	mov	r4, r0
 8006e68:	b308      	cbz	r0, 8006eae <HAL_IWDG_Init+0x4a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8006e6a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006e6e:	6803      	ldr	r3, [r0, #0]
 8006e70:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006e72:	f245 5255 	movw	r2, #21845	; 0x5555
 8006e76:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006e78:	6842      	ldr	r2, [r0, #4]
 8006e7a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8006e7c:	6882      	ldr	r2, [r0, #8]
 8006e7e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006e80:	f7fe fd72 	bl	8005968 <HAL_GetTick>
 8006e84:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	68d0      	ldr	r0, [r2, #12]
 8006e8a:	f010 0003 	ands.w	r0, r0, #3
 8006e8e:	d103      	bne.n	8006e98 <HAL_IWDG_Init+0x34>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006e90:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8006e94:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8006e96:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006e98:	f7fe fd66 	bl	8005968 <HAL_GetTick>
 8006e9c:	1b40      	subs	r0, r0, r5
 8006e9e:	2827      	cmp	r0, #39	; 0x27
 8006ea0:	d9f1      	bls.n	8006e86 <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	079b      	lsls	r3, r3, #30
 8006ea8:	d0ed      	beq.n	8006e86 <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 8006eaa:	2003      	movs	r0, #3
 8006eac:	e7f3      	b.n	8006e96 <HAL_IWDG_Init+0x32>
    return HAL_ERROR;
 8006eae:	2001      	movs	r0, #1
 8006eb0:	e7f1      	b.n	8006e96 <HAL_IWDG_Init+0x32>

08006eb2 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006eb2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006eb6:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8006eb8:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006eba:	601a      	str	r2, [r3, #0]
}
 8006ebc:	4770      	bx	lr
	...

08006ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ec0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	b338      	cbz	r0, 8006f18 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ec8:	6803      	ldr	r3, [r0, #0]
 8006eca:	07db      	lsls	r3, r3, #31
 8006ecc:	d410      	bmi.n	8006ef0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ece:	682b      	ldr	r3, [r5, #0]
 8006ed0:	079f      	lsls	r7, r3, #30
 8006ed2:	d45e      	bmi.n	8006f92 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	0719      	lsls	r1, r3, #28
 8006ed8:	f100 8095 	bmi.w	8007006 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	075a      	lsls	r2, r3, #29
 8006ee0:	f100 80bf 	bmi.w	8007062 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ee4:	69e8      	ldr	r0, [r5, #28]
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	f040 812c 	bne.w	8007144 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8006eec:	2000      	movs	r0, #0
 8006eee:	e029      	b.n	8006f44 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ef0:	4c8f      	ldr	r4, [pc, #572]	; (8007130 <HAL_RCC_OscConfig+0x270>)
 8006ef2:	6863      	ldr	r3, [r4, #4]
 8006ef4:	f003 030c 	and.w	r3, r3, #12
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d007      	beq.n	8006f0c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006efc:	6863      	ldr	r3, [r4, #4]
 8006efe:	f003 030c 	and.w	r3, r3, #12
 8006f02:	2b08      	cmp	r3, #8
 8006f04:	d10a      	bne.n	8006f1c <HAL_RCC_OscConfig+0x5c>
 8006f06:	6863      	ldr	r3, [r4, #4]
 8006f08:	03de      	lsls	r6, r3, #15
 8006f0a:	d507      	bpl.n	8006f1c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	039c      	lsls	r4, r3, #14
 8006f10:	d5dd      	bpl.n	8006ece <HAL_RCC_OscConfig+0xe>
 8006f12:	686b      	ldr	r3, [r5, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1da      	bne.n	8006ece <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8006f18:	2001      	movs	r0, #1
 8006f1a:	e013      	b.n	8006f44 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1c:	686b      	ldr	r3, [r5, #4]
 8006f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f22:	d112      	bne.n	8006f4a <HAL_RCC_OscConfig+0x8a>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006f2c:	f7fe fd1c 	bl	8005968 <HAL_GetTick>
 8006f30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	0398      	lsls	r0, r3, #14
 8006f36:	d4ca      	bmi.n	8006ece <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f38:	f7fe fd16 	bl	8005968 <HAL_GetTick>
 8006f3c:	1b80      	subs	r0, r0, r6
 8006f3e:	2864      	cmp	r0, #100	; 0x64
 8006f40:	d9f7      	bls.n	8006f32 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006f42:	2003      	movs	r0, #3
}
 8006f44:	b002      	add	sp, #8
 8006f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f4a:	b99b      	cbnz	r3, 8006f74 <HAL_RCC_OscConfig+0xb4>
 8006f4c:	6823      	ldr	r3, [r4, #0]
 8006f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f52:	6023      	str	r3, [r4, #0]
 8006f54:	6823      	ldr	r3, [r4, #0]
 8006f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f5a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006f5c:	f7fe fd04 	bl	8005968 <HAL_GetTick>
 8006f60:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	0399      	lsls	r1, r3, #14
 8006f66:	d5b2      	bpl.n	8006ece <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f68:	f7fe fcfe 	bl	8005968 <HAL_GetTick>
 8006f6c:	1b80      	subs	r0, r0, r6
 8006f6e:	2864      	cmp	r0, #100	; 0x64
 8006f70:	d9f7      	bls.n	8006f62 <HAL_RCC_OscConfig+0xa2>
 8006f72:	e7e6      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f78:	6823      	ldr	r3, [r4, #0]
 8006f7a:	d103      	bne.n	8006f84 <HAL_RCC_OscConfig+0xc4>
 8006f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	e7cf      	b.n	8006f24 <HAL_RCC_OscConfig+0x64>
 8006f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f90:	e7cb      	b.n	8006f2a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f92:	4c67      	ldr	r4, [pc, #412]	; (8007130 <HAL_RCC_OscConfig+0x270>)
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	f013 0f0c 	tst.w	r3, #12
 8006f9a:	d007      	beq.n	8006fac <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006f9c:	6863      	ldr	r3, [r4, #4]
 8006f9e:	f003 030c 	and.w	r3, r3, #12
 8006fa2:	2b08      	cmp	r3, #8
 8006fa4:	d110      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x108>
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	03da      	lsls	r2, r3, #15
 8006faa:	d40d      	bmi.n	8006fc8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	079b      	lsls	r3, r3, #30
 8006fb0:	d502      	bpl.n	8006fb8 <HAL_RCC_OscConfig+0xf8>
 8006fb2:	692b      	ldr	r3, [r5, #16]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d1af      	bne.n	8006f18 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	696a      	ldr	r2, [r5, #20]
 8006fbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006fc0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	e785      	b.n	8006ed4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fc8:	692a      	ldr	r2, [r5, #16]
 8006fca:	4b5a      	ldr	r3, [pc, #360]	; (8007134 <HAL_RCC_OscConfig+0x274>)
 8006fcc:	b16a      	cbz	r2, 8006fea <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006fd2:	f7fe fcc9 	bl	8005968 <HAL_GetTick>
 8006fd6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	079f      	lsls	r7, r3, #30
 8006fdc:	d4ec      	bmi.n	8006fb8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fde:	f7fe fcc3 	bl	8005968 <HAL_GetTick>
 8006fe2:	1b80      	subs	r0, r0, r6
 8006fe4:	2802      	cmp	r0, #2
 8006fe6:	d9f7      	bls.n	8006fd8 <HAL_RCC_OscConfig+0x118>
 8006fe8:	e7ab      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8006fea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006fec:	f7fe fcbc 	bl	8005968 <HAL_GetTick>
 8006ff0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	0798      	lsls	r0, r3, #30
 8006ff6:	f57f af6d 	bpl.w	8006ed4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ffa:	f7fe fcb5 	bl	8005968 <HAL_GetTick>
 8006ffe:	1b80      	subs	r0, r0, r6
 8007000:	2802      	cmp	r0, #2
 8007002:	d9f6      	bls.n	8006ff2 <HAL_RCC_OscConfig+0x132>
 8007004:	e79d      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007006:	69aa      	ldr	r2, [r5, #24]
 8007008:	4e49      	ldr	r6, [pc, #292]	; (8007130 <HAL_RCC_OscConfig+0x270>)
 800700a:	4b4b      	ldr	r3, [pc, #300]	; (8007138 <HAL_RCC_OscConfig+0x278>)
 800700c:	b1da      	cbz	r2, 8007046 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007012:	f7fe fca9 	bl	8005968 <HAL_GetTick>
 8007016:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007018:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800701a:	079b      	lsls	r3, r3, #30
 800701c:	d50d      	bpl.n	800703a <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800701e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007022:	4b46      	ldr	r3, [pc, #280]	; (800713c <HAL_RCC_OscConfig+0x27c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	fbb3 f3f2 	udiv	r3, r3, r2
 800702a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800702c:	bf00      	nop
  }
  while (Delay --);
 800702e:	9b01      	ldr	r3, [sp, #4]
 8007030:	1e5a      	subs	r2, r3, #1
 8007032:	9201      	str	r2, [sp, #4]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1f9      	bne.n	800702c <HAL_RCC_OscConfig+0x16c>
 8007038:	e750      	b.n	8006edc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800703a:	f7fe fc95 	bl	8005968 <HAL_GetTick>
 800703e:	1b00      	subs	r0, r0, r4
 8007040:	2802      	cmp	r0, #2
 8007042:	d9e9      	bls.n	8007018 <HAL_RCC_OscConfig+0x158>
 8007044:	e77d      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8007046:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8007048:	f7fe fc8e 	bl	8005968 <HAL_GetTick>
 800704c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800704e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007050:	079f      	lsls	r7, r3, #30
 8007052:	f57f af43 	bpl.w	8006edc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007056:	f7fe fc87 	bl	8005968 <HAL_GetTick>
 800705a:	1b00      	subs	r0, r0, r4
 800705c:	2802      	cmp	r0, #2
 800705e:	d9f6      	bls.n	800704e <HAL_RCC_OscConfig+0x18e>
 8007060:	e76f      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007062:	4c33      	ldr	r4, [pc, #204]	; (8007130 <HAL_RCC_OscConfig+0x270>)
 8007064:	69e3      	ldr	r3, [r4, #28]
 8007066:	00d8      	lsls	r0, r3, #3
 8007068:	d424      	bmi.n	80070b4 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 800706a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800706c:	69e3      	ldr	r3, [r4, #28]
 800706e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007072:	61e3      	str	r3, [r4, #28]
 8007074:	69e3      	ldr	r3, [r4, #28]
 8007076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800707e:	4e30      	ldr	r6, [pc, #192]	; (8007140 <HAL_RCC_OscConfig+0x280>)
 8007080:	6833      	ldr	r3, [r6, #0]
 8007082:	05d9      	lsls	r1, r3, #23
 8007084:	d518      	bpl.n	80070b8 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007086:	68eb      	ldr	r3, [r5, #12]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d126      	bne.n	80070da <HAL_RCC_OscConfig+0x21a>
 800708c:	6a23      	ldr	r3, [r4, #32]
 800708e:	f043 0301 	orr.w	r3, r3, #1
 8007092:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8007094:	f7fe fc68 	bl	8005968 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007098:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800709c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709e:	6a23      	ldr	r3, [r4, #32]
 80070a0:	079b      	lsls	r3, r3, #30
 80070a2:	d53f      	bpl.n	8007124 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 80070a4:	2f00      	cmp	r7, #0
 80070a6:	f43f af1d 	beq.w	8006ee4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80070aa:	69e3      	ldr	r3, [r4, #28]
 80070ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070b0:	61e3      	str	r3, [r4, #28]
 80070b2:	e717      	b.n	8006ee4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80070b4:	2700      	movs	r7, #0
 80070b6:	e7e2      	b.n	800707e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070b8:	6833      	ldr	r3, [r6, #0]
 80070ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070be:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80070c0:	f7fe fc52 	bl	8005968 <HAL_GetTick>
 80070c4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070c6:	6833      	ldr	r3, [r6, #0]
 80070c8:	05da      	lsls	r2, r3, #23
 80070ca:	d4dc      	bmi.n	8007086 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070cc:	f7fe fc4c 	bl	8005968 <HAL_GetTick>
 80070d0:	eba0 0008 	sub.w	r0, r0, r8
 80070d4:	2864      	cmp	r0, #100	; 0x64
 80070d6:	d9f6      	bls.n	80070c6 <HAL_RCC_OscConfig+0x206>
 80070d8:	e733      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070da:	b9ab      	cbnz	r3, 8007108 <HAL_RCC_OscConfig+0x248>
 80070dc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070de:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	6223      	str	r3, [r4, #32]
 80070e8:	6a23      	ldr	r3, [r4, #32]
 80070ea:	f023 0304 	bic.w	r3, r3, #4
 80070ee:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80070f0:	f7fe fc3a 	bl	8005968 <HAL_GetTick>
 80070f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070f6:	6a23      	ldr	r3, [r4, #32]
 80070f8:	0798      	lsls	r0, r3, #30
 80070fa:	d5d3      	bpl.n	80070a4 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070fc:	f7fe fc34 	bl	8005968 <HAL_GetTick>
 8007100:	1b80      	subs	r0, r0, r6
 8007102:	4540      	cmp	r0, r8
 8007104:	d9f7      	bls.n	80070f6 <HAL_RCC_OscConfig+0x236>
 8007106:	e71c      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007108:	2b05      	cmp	r3, #5
 800710a:	6a23      	ldr	r3, [r4, #32]
 800710c:	d103      	bne.n	8007116 <HAL_RCC_OscConfig+0x256>
 800710e:	f043 0304 	orr.w	r3, r3, #4
 8007112:	6223      	str	r3, [r4, #32]
 8007114:	e7ba      	b.n	800708c <HAL_RCC_OscConfig+0x1cc>
 8007116:	f023 0301 	bic.w	r3, r3, #1
 800711a:	6223      	str	r3, [r4, #32]
 800711c:	6a23      	ldr	r3, [r4, #32]
 800711e:	f023 0304 	bic.w	r3, r3, #4
 8007122:	e7b6      	b.n	8007092 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007124:	f7fe fc20 	bl	8005968 <HAL_GetTick>
 8007128:	1b80      	subs	r0, r0, r6
 800712a:	4540      	cmp	r0, r8
 800712c:	d9b7      	bls.n	800709e <HAL_RCC_OscConfig+0x1de>
 800712e:	e708      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
 8007130:	40021000 	.word	0x40021000
 8007134:	42420000 	.word	0x42420000
 8007138:	42420480 	.word	0x42420480
 800713c:	2000004c 	.word	0x2000004c
 8007140:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007144:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <HAL_RCC_OscConfig+0x330>)
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	461c      	mov	r4, r3
 800714a:	f002 020c 	and.w	r2, r2, #12
 800714e:	2a08      	cmp	r2, #8
 8007150:	d03d      	beq.n	80071ce <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007152:	2300      	movs	r3, #0
 8007154:	4e27      	ldr	r6, [pc, #156]	; (80071f4 <HAL_RCC_OscConfig+0x334>)
 8007156:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007158:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800715a:	d12b      	bne.n	80071b4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800715c:	f7fe fc04 	bl	8005968 <HAL_GetTick>
 8007160:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	0199      	lsls	r1, r3, #6
 8007166:	d41f      	bmi.n	80071a8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007168:	6a2b      	ldr	r3, [r5, #32]
 800716a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800716e:	d105      	bne.n	800717c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007170:	6862      	ldr	r2, [r4, #4]
 8007172:	68a9      	ldr	r1, [r5, #8]
 8007174:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8007178:	430a      	orrs	r2, r1
 800717a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800717c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800717e:	6862      	ldr	r2, [r4, #4]
 8007180:	430b      	orrs	r3, r1
 8007182:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8007186:	4313      	orrs	r3, r2
 8007188:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800718a:	2301      	movs	r3, #1
 800718c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800718e:	f7fe fbeb 	bl	8005968 <HAL_GetTick>
 8007192:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007194:	6823      	ldr	r3, [r4, #0]
 8007196:	019a      	lsls	r2, r3, #6
 8007198:	f53f aea8 	bmi.w	8006eec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800719c:	f7fe fbe4 	bl	8005968 <HAL_GetTick>
 80071a0:	1b40      	subs	r0, r0, r5
 80071a2:	2802      	cmp	r0, #2
 80071a4:	d9f6      	bls.n	8007194 <HAL_RCC_OscConfig+0x2d4>
 80071a6:	e6cc      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a8:	f7fe fbde 	bl	8005968 <HAL_GetTick>
 80071ac:	1bc0      	subs	r0, r0, r7
 80071ae:	2802      	cmp	r0, #2
 80071b0:	d9d7      	bls.n	8007162 <HAL_RCC_OscConfig+0x2a2>
 80071b2:	e6c6      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80071b4:	f7fe fbd8 	bl	8005968 <HAL_GetTick>
 80071b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	019b      	lsls	r3, r3, #6
 80071be:	f57f ae95 	bpl.w	8006eec <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c2:	f7fe fbd1 	bl	8005968 <HAL_GetTick>
 80071c6:	1b40      	subs	r0, r0, r5
 80071c8:	2802      	cmp	r0, #2
 80071ca:	d9f6      	bls.n	80071ba <HAL_RCC_OscConfig+0x2fa>
 80071cc:	e6b9      	b.n	8006f42 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071ce:	2801      	cmp	r0, #1
 80071d0:	f43f aeb8 	beq.w	8006f44 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80071d4:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071d6:	6a2a      	ldr	r2, [r5, #32]
 80071d8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80071dc:	4291      	cmp	r1, r2
 80071de:	f47f ae9b 	bne.w	8006f18 <HAL_RCC_OscConfig+0x58>
 80071e2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80071e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071e8:	4293      	cmp	r3, r2
 80071ea:	f43f ae7f 	beq.w	8006eec <HAL_RCC_OscConfig+0x2c>
 80071ee:	e693      	b.n	8006f18 <HAL_RCC_OscConfig+0x58>
 80071f0:	40021000 	.word	0x40021000
 80071f4:	42420060 	.word	0x42420060

080071f8 <HAL_RCC_GetSysClockFreq>:
{
 80071f8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80071fa:	4b18      	ldr	r3, [pc, #96]	; (800725c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80071fc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80071fe:	ac02      	add	r4, sp, #8
 8007200:	f103 0510 	add.w	r5, r3, #16
 8007204:	4622      	mov	r2, r4
 8007206:	6818      	ldr	r0, [r3, #0]
 8007208:	6859      	ldr	r1, [r3, #4]
 800720a:	3308      	adds	r3, #8
 800720c:	c203      	stmia	r2!, {r0, r1}
 800720e:	42ab      	cmp	r3, r5
 8007210:	4614      	mov	r4, r2
 8007212:	d1f7      	bne.n	8007204 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007214:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8007218:	4911      	ldr	r1, [pc, #68]	; (8007260 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800721a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800721e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007220:	f003 020c 	and.w	r2, r3, #12
 8007224:	2a08      	cmp	r2, #8
 8007226:	d117      	bne.n	8007258 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007228:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800722c:	a806      	add	r0, sp, #24
 800722e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007230:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007232:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007236:	d50c      	bpl.n	8007252 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007238:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800723a:	480a      	ldr	r0, [pc, #40]	; (8007264 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800723c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007240:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007242:	aa06      	add	r2, sp, #24
 8007244:	4413      	add	r3, r2
 8007246:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800724a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800724e:	b007      	add	sp, #28
 8007250:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007252:	4805      	ldr	r0, [pc, #20]	; (8007268 <HAL_RCC_GetSysClockFreq+0x70>)
 8007254:	4350      	muls	r0, r2
 8007256:	e7fa      	b.n	800724e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8007258:	4802      	ldr	r0, [pc, #8]	; (8007264 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800725a:	e7f8      	b.n	800724e <HAL_RCC_GetSysClockFreq+0x56>
 800725c:	0800b49c 	.word	0x0800b49c
 8007260:	40021000 	.word	0x40021000
 8007264:	007a1200 	.word	0x007a1200
 8007268:	003d0900 	.word	0x003d0900

0800726c <HAL_RCC_ClockConfig>:
{
 800726c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8007272:	4604      	mov	r4, r0
 8007274:	b910      	cbnz	r0, 800727c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8007276:	2001      	movs	r0, #1
}
 8007278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800727c:	4a44      	ldr	r2, [pc, #272]	; (8007390 <HAL_RCC_ClockConfig+0x124>)
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	f003 0307 	and.w	r3, r3, #7
 8007284:	428b      	cmp	r3, r1
 8007286:	d328      	bcc.n	80072da <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007288:	6821      	ldr	r1, [r4, #0]
 800728a:	078e      	lsls	r6, r1, #30
 800728c:	d430      	bmi.n	80072f0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800728e:	07ca      	lsls	r2, r1, #31
 8007290:	d443      	bmi.n	800731a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007292:	4a3f      	ldr	r2, [pc, #252]	; (8007390 <HAL_RCC_ClockConfig+0x124>)
 8007294:	6813      	ldr	r3, [r2, #0]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	42ab      	cmp	r3, r5
 800729c:	d865      	bhi.n	800736a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	4d3c      	ldr	r5, [pc, #240]	; (8007394 <HAL_RCC_ClockConfig+0x128>)
 80072a2:	f012 0f04 	tst.w	r2, #4
 80072a6:	d16c      	bne.n	8007382 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072a8:	0713      	lsls	r3, r2, #28
 80072aa:	d506      	bpl.n	80072ba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80072ac:	686b      	ldr	r3, [r5, #4]
 80072ae:	6922      	ldr	r2, [r4, #16]
 80072b0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80072b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80072b8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80072ba:	f7ff ff9d 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80072be:	686b      	ldr	r3, [r5, #4]
 80072c0:	4a35      	ldr	r2, [pc, #212]	; (8007398 <HAL_RCC_ClockConfig+0x12c>)
 80072c2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80072c6:	5cd3      	ldrb	r3, [r2, r3]
 80072c8:	40d8      	lsrs	r0, r3
 80072ca:	4b34      	ldr	r3, [pc, #208]	; (800739c <HAL_RCC_ClockConfig+0x130>)
 80072cc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80072ce:	4b34      	ldr	r3, [pc, #208]	; (80073a0 <HAL_RCC_ClockConfig+0x134>)
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f7fe fb07 	bl	80058e4 <HAL_InitTick>
  return HAL_OK;
 80072d6:	2000      	movs	r0, #0
 80072d8:	e7ce      	b.n	8007278 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072da:	6813      	ldr	r3, [r2, #0]
 80072dc:	f023 0307 	bic.w	r3, r3, #7
 80072e0:	430b      	orrs	r3, r1
 80072e2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072e4:	6813      	ldr	r3, [r2, #0]
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	428b      	cmp	r3, r1
 80072ec:	d1c3      	bne.n	8007276 <HAL_RCC_ClockConfig+0xa>
 80072ee:	e7cb      	b.n	8007288 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072f0:	4b28      	ldr	r3, [pc, #160]	; (8007394 <HAL_RCC_ClockConfig+0x128>)
 80072f2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072f6:	bf1e      	ittt	ne
 80072f8:	685a      	ldrne	r2, [r3, #4]
 80072fa:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80072fe:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007300:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007302:	bf42      	ittt	mi
 8007304:	685a      	ldrmi	r2, [r3, #4]
 8007306:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800730a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800730c:	685a      	ldr	r2, [r3, #4]
 800730e:	68a0      	ldr	r0, [r4, #8]
 8007310:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007314:	4302      	orrs	r2, r0
 8007316:	605a      	str	r2, [r3, #4]
 8007318:	e7b9      	b.n	800728e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800731a:	6862      	ldr	r2, [r4, #4]
 800731c:	4e1d      	ldr	r6, [pc, #116]	; (8007394 <HAL_RCC_ClockConfig+0x128>)
 800731e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007320:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007322:	d11a      	bne.n	800735a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007324:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007328:	d0a5      	beq.n	8007276 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800732a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800732c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007330:	f023 0303 	bic.w	r3, r3, #3
 8007334:	4313      	orrs	r3, r2
 8007336:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007338:	f7fe fb16 	bl	8005968 <HAL_GetTick>
 800733c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800733e:	6873      	ldr	r3, [r6, #4]
 8007340:	6862      	ldr	r2, [r4, #4]
 8007342:	f003 030c 	and.w	r3, r3, #12
 8007346:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800734a:	d0a2      	beq.n	8007292 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800734c:	f7fe fb0c 	bl	8005968 <HAL_GetTick>
 8007350:	1bc0      	subs	r0, r0, r7
 8007352:	4540      	cmp	r0, r8
 8007354:	d9f3      	bls.n	800733e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8007356:	2003      	movs	r0, #3
 8007358:	e78e      	b.n	8007278 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800735a:	2a02      	cmp	r2, #2
 800735c:	d102      	bne.n	8007364 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800735e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007362:	e7e1      	b.n	8007328 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007364:	f013 0f02 	tst.w	r3, #2
 8007368:	e7de      	b.n	8007328 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800736a:	6813      	ldr	r3, [r2, #0]
 800736c:	f023 0307 	bic.w	r3, r3, #7
 8007370:	432b      	orrs	r3, r5
 8007372:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007374:	6813      	ldr	r3, [r2, #0]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	42ab      	cmp	r3, r5
 800737c:	f47f af7b 	bne.w	8007276 <HAL_RCC_ClockConfig+0xa>
 8007380:	e78d      	b.n	800729e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007382:	686b      	ldr	r3, [r5, #4]
 8007384:	68e1      	ldr	r1, [r4, #12]
 8007386:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800738a:	430b      	orrs	r3, r1
 800738c:	606b      	str	r3, [r5, #4]
 800738e:	e78b      	b.n	80072a8 <HAL_RCC_ClockConfig+0x3c>
 8007390:	40022000 	.word	0x40022000
 8007394:	40021000 	.word	0x40021000
 8007398:	0800b3f9 	.word	0x0800b3f9
 800739c:	2000004c 	.word	0x2000004c
 80073a0:	20000054 	.word	0x20000054

080073a4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80073a4:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80073a6:	4a05      	ldr	r2, [pc, #20]	; (80073bc <HAL_RCC_GetPCLK1Freq+0x18>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80073ae:	5cd3      	ldrb	r3, [r2, r3]
 80073b0:	4a03      	ldr	r2, [pc, #12]	; (80073c0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80073b2:	6810      	ldr	r0, [r2, #0]
}
 80073b4:	40d8      	lsrs	r0, r3
 80073b6:	4770      	bx	lr
 80073b8:	40021000 	.word	0x40021000
 80073bc:	0800b409 	.word	0x0800b409
 80073c0:	2000004c 	.word	0x2000004c

080073c4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80073c4:	4b04      	ldr	r3, [pc, #16]	; (80073d8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80073c6:	4a05      	ldr	r2, [pc, #20]	; (80073dc <HAL_RCC_GetPCLK2Freq+0x18>)
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80073ce:	5cd3      	ldrb	r3, [r2, r3]
 80073d0:	4a03      	ldr	r2, [pc, #12]	; (80073e0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80073d2:	6810      	ldr	r0, [r2, #0]
}
 80073d4:	40d8      	lsrs	r0, r3
 80073d6:	4770      	bx	lr
 80073d8:	40021000 	.word	0x40021000
 80073dc:	0800b409 	.word	0x0800b409
 80073e0:	2000004c 	.word	0x2000004c

080073e4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80073e4:	6803      	ldr	r3, [r0, #0]
{
 80073e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80073ea:	07d9      	lsls	r1, r3, #31
{
 80073ec:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80073ee:	d520      	bpl.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80073f0:	4c35      	ldr	r4, [pc, #212]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80073f2:	69e3      	ldr	r3, [r4, #28]
 80073f4:	00da      	lsls	r2, r3, #3
 80073f6:	d432      	bmi.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80073f8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80073fa:	69e3      	ldr	r3, [r4, #28]
 80073fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007400:	61e3      	str	r3, [r4, #28]
 8007402:	69e3      	ldr	r3, [r4, #28]
 8007404:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800740c:	4e2f      	ldr	r6, [pc, #188]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800740e:	6833      	ldr	r3, [r6, #0]
 8007410:	05db      	lsls	r3, r3, #23
 8007412:	d526      	bpl.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007414:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007416:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800741a:	d136      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800741c:	6a23      	ldr	r3, [r4, #32]
 800741e:	686a      	ldr	r2, [r5, #4]
 8007420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007424:	4313      	orrs	r3, r2
 8007426:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007428:	b11f      	cbz	r7, 8007432 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800742a:	69e3      	ldr	r3, [r4, #28]
 800742c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007430:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007432:	6828      	ldr	r0, [r5, #0]
 8007434:	0783      	lsls	r3, r0, #30
 8007436:	d506      	bpl.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007438:	4923      	ldr	r1, [pc, #140]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800743a:	68ab      	ldr	r3, [r5, #8]
 800743c:	684a      	ldr	r2, [r1, #4]
 800743e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007442:	431a      	orrs	r2, r3
 8007444:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007446:	f010 0010 	ands.w	r0, r0, #16
 800744a:	d01b      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800744c:	4a1e      	ldr	r2, [pc, #120]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800744e:	68e9      	ldr	r1, [r5, #12]
 8007450:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007452:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007454:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007458:	430b      	orrs	r3, r1
 800745a:	6053      	str	r3, [r2, #4]
 800745c:	e012      	b.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 800745e:	2700      	movs	r7, #0
 8007460:	e7d4      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007462:	6833      	ldr	r3, [r6, #0]
 8007464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007468:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800746a:	f7fe fa7d 	bl	8005968 <HAL_GetTick>
 800746e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	05d8      	lsls	r0, r3, #23
 8007474:	d4ce      	bmi.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007476:	f7fe fa77 	bl	8005968 <HAL_GetTick>
 800747a:	eba0 0008 	sub.w	r0, r0, r8
 800747e:	2864      	cmp	r0, #100	; 0x64
 8007480:	d9f6      	bls.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8007482:	2003      	movs	r0, #3
}
 8007484:	b002      	add	sp, #8
 8007486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800748a:	686a      	ldr	r2, [r5, #4]
 800748c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8007490:	429a      	cmp	r2, r3
 8007492:	d0c3      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007494:	2001      	movs	r0, #1
 8007496:	4a0e      	ldr	r2, [pc, #56]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007498:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800749a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800749c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800749e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074a2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80074a4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d5b8      	bpl.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80074aa:	f7fe fa5d 	bl	8005968 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ae:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80074b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074b4:	6a23      	ldr	r3, [r4, #32]
 80074b6:	079a      	lsls	r2, r3, #30
 80074b8:	d4b0      	bmi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ba:	f7fe fa55 	bl	8005968 <HAL_GetTick>
 80074be:	1b80      	subs	r0, r0, r6
 80074c0:	4540      	cmp	r0, r8
 80074c2:	d9f7      	bls.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80074c4:	e7dd      	b.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80074c6:	bf00      	nop
 80074c8:	40021000 	.word	0x40021000
 80074cc:	40007000 	.word	0x40007000
 80074d0:	42420440 	.word	0x42420440

080074d4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80074d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80074d8:	461c      	mov	r4, r3
 80074da:	4616      	mov	r6, r2
 80074dc:	460f      	mov	r7, r1
 80074de:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074e0:	f7fe fa42 	bl	8005968 <HAL_GetTick>
 80074e4:	4434      	add	r4, r6
 80074e6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80074e8:	f7fe fa3e 	bl	8005968 <HAL_GetTick>
 80074ec:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074ee:	4b23      	ldr	r3, [pc, #140]	; (800757c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80074f6:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074f8:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80074fa:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074fc:	6893      	ldr	r3, [r2, #8]
 80074fe:	ea37 0303 	bics.w	r3, r7, r3
 8007502:	d001      	beq.n	8007508 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8007504:	2000      	movs	r0, #0
 8007506:	e02e      	b.n	8007566 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8007508:	1c73      	adds	r3, r6, #1
 800750a:	d0f7      	beq.n	80074fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800750c:	f7fe fa2c 	bl	8005968 <HAL_GetTick>
 8007510:	eba0 0008 	sub.w	r0, r0, r8
 8007514:	42a0      	cmp	r0, r4
 8007516:	d329      	bcc.n	800756c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007520:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007522:	686a      	ldr	r2, [r5, #4]
 8007524:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8007528:	d10a      	bne.n	8007540 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 800752a:	68aa      	ldr	r2, [r5, #8]
 800752c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007530:	d002      	beq.n	8007538 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007532:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007536:	d103      	bne.n	8007540 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800753e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007540:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8007542:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8007546:	d107      	bne.n	8007558 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007556:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007558:	2301      	movs	r3, #1
 800755a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800755e:	2300      	movs	r3, #0
 8007560:	2003      	movs	r0, #3
 8007562:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8007566:	b002      	add	sp, #8
 8007568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 800756c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800756e:	2b00      	cmp	r3, #0
      count--;
 8007570:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007572:	bf08      	it	eq
 8007574:	2400      	moveq	r4, #0
      count--;
 8007576:	3b01      	subs	r3, #1
 8007578:	e7be      	b.n	80074f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 800757a:	bf00      	nop
 800757c:	2000004c 	.word	0x2000004c

08007580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	b510      	push	{r4, lr}
 8007582:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007584:	460a      	mov	r2, r1
 8007586:	2180      	movs	r1, #128	; 0x80
{
 8007588:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800758a:	f7ff ffa3 	bl	80074d4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800758e:	b120      	cbz	r0, 800759a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8007590:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007592:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007594:	f043 0320 	orr.w	r3, r3, #32
 8007598:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 800759a:	bd10      	pop	{r4, pc}

0800759c <HAL_SPI_Init>:
{
 800759c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800759e:	4604      	mov	r4, r0
 80075a0:	2800      	cmp	r0, #0
 80075a2:	d051      	beq.n	8007648 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80075a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d14a      	bne.n	8007640 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80075aa:	6842      	ldr	r2, [r0, #4]
 80075ac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80075b0:	d000      	beq.n	80075b4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80075b2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075b4:	2300      	movs	r3, #0
 80075b6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80075b8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80075bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80075c0:	b923      	cbnz	r3, 80075cc <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 80075c2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80075c4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80075c8:	f7fd f990 	bl	80048ec <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80075cc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80075ce:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80075d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80075d4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80075d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075dc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075de:	6863      	ldr	r3, [r4, #4]
 80075e0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 80075e4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80075e8:	4303      	orrs	r3, r0
 80075ea:	68e0      	ldr	r0, [r4, #12]
 80075ec:	69a1      	ldr	r1, [r4, #24]
 80075ee:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80075f2:	4303      	orrs	r3, r0
 80075f4:	6920      	ldr	r0, [r4, #16]
 80075f6:	f000 0002 	and.w	r0, r0, #2
 80075fa:	4303      	orrs	r3, r0
 80075fc:	6960      	ldr	r0, [r4, #20]
 80075fe:	f000 0001 	and.w	r0, r0, #1
 8007602:	4303      	orrs	r3, r0
 8007604:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8007608:	4303      	orrs	r3, r0
 800760a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800760c:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800760e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8007612:	4303      	orrs	r3, r0
 8007614:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007616:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800761a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800761e:	4303      	orrs	r3, r0
 8007620:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007622:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8007626:	4303      	orrs	r3, r0
 8007628:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800762a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800762c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800762e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007634:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8007636:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007638:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800763a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800763e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007640:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007646:	e7b5      	b.n	80075b4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8007648:	2001      	movs	r0, #1
 800764a:	e7f8      	b.n	800763e <HAL_SPI_Init+0xa2>

0800764c <HAL_SPI_Transmit>:
{
 800764c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007650:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8007652:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8007656:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007658:	2b01      	cmp	r3, #1
{
 800765a:	460d      	mov	r5, r1
 800765c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800765e:	f000 80a0 	beq.w	80077a2 <HAL_SPI_Transmit+0x156>
 8007662:	2301      	movs	r3, #1
 8007664:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007668:	f7fe f97e 	bl	8005968 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800766c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8007670:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8007672:	2b01      	cmp	r3, #1
 8007674:	b2d8      	uxtb	r0, r3
 8007676:	f040 8092 	bne.w	800779e <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 800767a:	2d00      	cmp	r5, #0
 800767c:	d061      	beq.n	8007742 <HAL_SPI_Transmit+0xf6>
 800767e:	f1b8 0f00 	cmp.w	r8, #0
 8007682:	d05e      	beq.n	8007742 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007684:	2303      	movs	r3, #3
 8007686:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800768a:	2300      	movs	r3, #0
 800768c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800768e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8007692:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007696:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007698:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800769a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800769c:	68a3      	ldr	r3, [r4, #8]
 800769e:	6826      	ldr	r6, [r4, #0]
 80076a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076a4:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076a6:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076aa:	d107      	bne.n	80076bc <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80076ac:	6833      	ldr	r3, [r6, #0]
 80076ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b2:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 80076b4:	6833      	ldr	r3, [r6, #0]
 80076b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076ba:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076bc:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076be:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80076c0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80076c2:	bf5e      	ittt	pl
 80076c4:	6833      	ldrpl	r3, [r6, #0]
 80076c6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80076ca:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80076cc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80076d0:	6863      	ldr	r3, [r4, #4]
 80076d2:	d13f      	bne.n	8007754 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076d4:	b113      	cbz	r3, 80076dc <HAL_SPI_Transmit+0x90>
 80076d6:	f1b8 0f01 	cmp.w	r8, #1
 80076da:	d107      	bne.n	80076ec <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076dc:	f835 3b02 	ldrh.w	r3, [r5], #2
 80076e0:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80076e2:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80076e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80076ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	b9a3      	cbnz	r3, 800771c <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076f2:	464a      	mov	r2, r9
 80076f4:	4639      	mov	r1, r7
 80076f6:	4620      	mov	r0, r4
 80076f8:	f7ff ff42 	bl	8007580 <SPI_EndRxTxTransaction>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d14b      	bne.n	8007798 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007700:	68a3      	ldr	r3, [r4, #8]
 8007702:	b933      	cbnz	r3, 8007712 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007704:	9301      	str	r3, [sp, #4]
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	9201      	str	r2, [sp, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007712:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8007714:	3800      	subs	r0, #0
 8007716:	bf18      	it	ne
 8007718:	2001      	movne	r0, #1
error:
 800771a:	e012      	b.n	8007742 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	6893      	ldr	r3, [r2, #8]
 8007720:	0798      	lsls	r0, r3, #30
 8007722:	d505      	bpl.n	8007730 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007724:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007726:	f833 1b02 	ldrh.w	r1, [r3], #2
 800772a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800772c:	6323      	str	r3, [r4, #48]	; 0x30
 800772e:	e7d9      	b.n	80076e4 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007730:	f7fe f91a 	bl	8005968 <HAL_GetTick>
 8007734:	eba0 0009 	sub.w	r0, r0, r9
 8007738:	42b8      	cmp	r0, r7
 800773a:	d3d7      	bcc.n	80076ec <HAL_SPI_Transmit+0xa0>
 800773c:	1c79      	adds	r1, r7, #1
 800773e:	d0d5      	beq.n	80076ec <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8007740:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8007742:	2301      	movs	r3, #1
 8007744:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007748:	2300      	movs	r3, #0
 800774a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800774e:	b003      	add	sp, #12
 8007750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007754:	b113      	cbz	r3, 800775c <HAL_SPI_Transmit+0x110>
 8007756:	f1b8 0f01 	cmp.w	r8, #1
 800775a:	d108      	bne.n	800776e <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800775c:	782b      	ldrb	r3, [r5, #0]
 800775e:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007760:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007762:	3301      	adds	r3, #1
 8007764:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007766:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007768:	3b01      	subs	r3, #1
 800776a:	b29b      	uxth	r3, r3
 800776c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800776e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0bd      	beq.n	80076f2 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007776:	6823      	ldr	r3, [r4, #0]
 8007778:	689a      	ldr	r2, [r3, #8]
 800777a:	0792      	lsls	r2, r2, #30
 800777c:	d503      	bpl.n	8007786 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800777e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007780:	7812      	ldrb	r2, [r2, #0]
 8007782:	731a      	strb	r2, [r3, #12]
 8007784:	e7ec      	b.n	8007760 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007786:	f7fe f8ef 	bl	8005968 <HAL_GetTick>
 800778a:	eba0 0009 	sub.w	r0, r0, r9
 800778e:	42b8      	cmp	r0, r7
 8007790:	d3ed      	bcc.n	800776e <HAL_SPI_Transmit+0x122>
 8007792:	1c7b      	adds	r3, r7, #1
 8007794:	d0eb      	beq.n	800776e <HAL_SPI_Transmit+0x122>
 8007796:	e7d3      	b.n	8007740 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007798:	2320      	movs	r3, #32
 800779a:	6563      	str	r3, [r4, #84]	; 0x54
 800779c:	e7b0      	b.n	8007700 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 800779e:	2002      	movs	r0, #2
 80077a0:	e7cf      	b.n	8007742 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 80077a2:	2002      	movs	r0, #2
 80077a4:	e7d3      	b.n	800774e <HAL_SPI_Transmit+0x102>

080077a6 <HAL_SPI_TransmitReceive>:
{
 80077a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077aa:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80077ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80077b0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80077b2:	2b01      	cmp	r3, #1
{
 80077b4:	460d      	mov	r5, r1
 80077b6:	4691      	mov	r9, r2
 80077b8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80077bc:	f000 80e0 	beq.w	8007980 <HAL_SPI_TransmitReceive+0x1da>
 80077c0:	2301      	movs	r3, #1
 80077c2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80077c6:	f7fe f8cf 	bl	8005968 <HAL_GetTick>
  tmp_state           = hspi->State;
 80077ca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80077ce:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077d0:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80077d2:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80077d4:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077d6:	d00a      	beq.n	80077ee <HAL_SPI_TransmitReceive+0x48>
 80077d8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80077dc:	f040 80ce 	bne.w	800797c <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80077e0:	68a3      	ldr	r3, [r4, #8]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 80ca 	bne.w	800797c <HAL_SPI_TransmitReceive+0x1d6>
 80077e8:	2904      	cmp	r1, #4
 80077ea:	f040 80c7 	bne.w	800797c <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	d03f      	beq.n	8007872 <HAL_SPI_TransmitReceive+0xcc>
 80077f2:	f1b9 0f00 	cmp.w	r9, #0
 80077f6:	d03c      	beq.n	8007872 <HAL_SPI_TransmitReceive+0xcc>
 80077f8:	2e00      	cmp	r6, #0
 80077fa:	d03a      	beq.n	8007872 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077fc:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007800:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007804:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007806:	bf1c      	itt	ne
 8007808:	2305      	movne	r3, #5
 800780a:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800780e:	2300      	movs	r3, #0
 8007810:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8007812:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007816:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8007818:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800781a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800781c:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800781e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007820:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8007822:	bf58      	it	pl
 8007824:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007826:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8007828:	bf58      	it	pl
 800782a:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 800782e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8007830:	bf58      	it	pl
 8007832:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007834:	68e1      	ldr	r1, [r4, #12]
 8007836:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800783a:	d151      	bne.n	80078e0 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800783c:	b10a      	cbz	r2, 8007842 <HAL_SPI_TransmitReceive+0x9c>
 800783e:	2e01      	cmp	r6, #1
 8007840:	d107      	bne.n	8007852 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007842:	f835 2b02 	ldrh.w	r2, [r5], #2
 8007846:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8007848:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800784a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800784c:	3b01      	subs	r3, #1
 800784e:	b29b      	uxth	r3, r3
 8007850:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007852:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007854:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007856:	b29b      	uxth	r3, r3
 8007858:	b96b      	cbnz	r3, 8007876 <HAL_SPI_TransmitReceive+0xd0>
 800785a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800785c:	b29b      	uxth	r3, r3
 800785e:	b953      	cbnz	r3, 8007876 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007860:	463a      	mov	r2, r7
 8007862:	4641      	mov	r1, r8
 8007864:	4620      	mov	r0, r4
 8007866:	f7ff fe8b 	bl	8007580 <SPI_EndRxTxTransaction>
 800786a:	2800      	cmp	r0, #0
 800786c:	d07b      	beq.n	8007966 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800786e:	2320      	movs	r3, #32
 8007870:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007872:	2001      	movs	r0, #1
 8007874:	e02b      	b.n	80078ce <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007876:	6821      	ldr	r1, [r4, #0]
 8007878:	688b      	ldr	r3, [r1, #8]
 800787a:	079a      	lsls	r2, r3, #30
 800787c:	d50d      	bpl.n	800789a <HAL_SPI_TransmitReceive+0xf4>
 800787e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007880:	b29b      	uxth	r3, r3
 8007882:	b153      	cbz	r3, 800789a <HAL_SPI_TransmitReceive+0xf4>
 8007884:	b14d      	cbz	r5, 800789a <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8007886:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007888:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800788a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800788e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007890:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007892:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007894:	3b01      	subs	r3, #1
 8007896:	b29b      	uxth	r3, r3
 8007898:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800789a:	688a      	ldr	r2, [r1, #8]
 800789c:	f012 0201 	ands.w	r2, r2, #1
 80078a0:	d00c      	beq.n	80078bc <HAL_SPI_TransmitReceive+0x116>
 80078a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	b14b      	cbz	r3, 80078bc <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 80078a8:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078aa:	68c9      	ldr	r1, [r1, #12]
 80078ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80078ae:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078b2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80078b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80078b6:	3b01      	subs	r3, #1
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078bc:	f7fe f854 	bl	8005968 <HAL_GetTick>
 80078c0:	1bc0      	subs	r0, r0, r7
 80078c2:	4540      	cmp	r0, r8
 80078c4:	d3c6      	bcc.n	8007854 <HAL_SPI_TransmitReceive+0xae>
 80078c6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80078ca:	d0c3      	beq.n	8007854 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 80078cc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078d4:	2300      	movs	r3, #0
 80078d6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80078da:	b003      	add	sp, #12
 80078dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078e0:	b10a      	cbz	r2, 80078e6 <HAL_SPI_TransmitReceive+0x140>
 80078e2:	2e01      	cmp	r6, #1
 80078e4:	d108      	bne.n	80078f8 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80078e6:	782a      	ldrb	r2, [r5, #0]
 80078e8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80078ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80078ec:	3301      	adds	r3, #1
 80078ee:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80078f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80078f2:	3b01      	subs	r3, #1
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80078f8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80078fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	b91b      	cbnz	r3, 8007908 <HAL_SPI_TransmitReceive+0x162>
 8007900:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0ab      	beq.n	8007860 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	6893      	ldr	r3, [r2, #8]
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	d50e      	bpl.n	800792e <HAL_SPI_TransmitReceive+0x188>
 8007910:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007912:	b29b      	uxth	r3, r3
 8007914:	b15b      	cbz	r3, 800792e <HAL_SPI_TransmitReceive+0x188>
 8007916:	b155      	cbz	r5, 800792e <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8007918:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800791a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8007920:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007922:	3301      	adds	r3, #1
 8007924:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007926:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007928:	3b01      	subs	r3, #1
 800792a:	b29b      	uxth	r3, r3
 800792c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	6891      	ldr	r1, [r2, #8]
 8007932:	f011 0101 	ands.w	r1, r1, #1
 8007936:	d00d      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x1ae>
 8007938:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800793a:	b29b      	uxth	r3, r3
 800793c:	b153      	cbz	r3, 8007954 <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 800793e:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007940:	68d2      	ldr	r2, [r2, #12]
 8007942:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007944:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007948:	3301      	adds	r3, #1
 800794a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800794c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800794e:	3b01      	subs	r3, #1
 8007950:	b29b      	uxth	r3, r3
 8007952:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007954:	f7fe f808 	bl	8005968 <HAL_GetTick>
 8007958:	1bc0      	subs	r0, r0, r7
 800795a:	4540      	cmp	r0, r8
 800795c:	d3cd      	bcc.n	80078fa <HAL_SPI_TransmitReceive+0x154>
 800795e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007962:	d0ca      	beq.n	80078fa <HAL_SPI_TransmitReceive+0x154>
 8007964:	e7b2      	b.n	80078cc <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1b0      	bne.n	80078ce <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800796c:	6823      	ldr	r3, [r4, #0]
 800796e:	9001      	str	r0, [sp, #4]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	9201      	str	r2, [sp, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	9301      	str	r3, [sp, #4]
 8007978:	9b01      	ldr	r3, [sp, #4]
 800797a:	e7a8      	b.n	80078ce <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 800797c:	2002      	movs	r0, #2
 800797e:	e7a6      	b.n	80078ce <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8007980:	2002      	movs	r0, #2
 8007982:	e7aa      	b.n	80078da <HAL_SPI_TransmitReceive+0x134>

08007984 <HAL_SPI_GetState>:
  return hspi->State;
 8007984:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8007988:	4770      	bx	lr
	...

0800798c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800798c:	6a03      	ldr	r3, [r0, #32]
{
 800798e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007990:	f023 0301 	bic.w	r3, r3, #1
 8007994:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007998:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800799a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800799c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800799e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80079a2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079a4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80079a6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80079aa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079ac:	4d0a      	ldr	r5, [pc, #40]	; (80079d8 <TIM_OC1_SetConfig+0x4c>)
 80079ae:	42a8      	cmp	r0, r5
 80079b0:	d10b      	bne.n	80079ca <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80079b4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80079b8:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079ba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079be:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80079c2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80079c4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80079c8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079cc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079ce:	684a      	ldr	r2, [r1, #4]
 80079d0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d2:	6203      	str	r3, [r0, #32]
}
 80079d4:	bd70      	pop	{r4, r5, r6, pc}
 80079d6:	bf00      	nop
 80079d8:	40012c00 	.word	0x40012c00

080079dc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079dc:	6a03      	ldr	r3, [r0, #32]
{
 80079de:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079ee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80079f2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079f4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80079f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079fe:	4d0b      	ldr	r5, [pc, #44]	; (8007a2c <TIM_OC3_SetConfig+0x50>)
 8007a00:	42a8      	cmp	r0, r5
 8007a02:	d10d      	bne.n	8007a20 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a04:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a0e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a12:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007a16:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a1c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a24:	684a      	ldr	r2, [r1, #4]
 8007a26:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a28:	6203      	str	r3, [r0, #32]
}
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
 8007a2c:	40012c00 	.word	0x40012c00

08007a30 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a30:	6a03      	ldr	r3, [r0, #32]
{
 8007a32:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a3e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007a4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a54:	4d06      	ldr	r5, [pc, #24]	; (8007a70 <TIM_OC4_SetConfig+0x40>)
 8007a56:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a58:	bf02      	ittt	eq
 8007a5a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a5c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a60:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a66:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a68:	684a      	ldr	r2, [r1, #4]
 8007a6a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a6c:	6203      	str	r3, [r0, #32]
}
 8007a6e:	bd30      	pop	{r4, r5, pc}
 8007a70:	40012c00 	.word	0x40012c00

08007a74 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007a74:	4770      	bx	lr

08007a76 <TIM_DMADelayPulseCplt>:
{
 8007a76:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a78:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007a7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007a7c:	4282      	cmp	r2, r0
 8007a7e:	d10b      	bne.n	8007a98 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a80:	2301      	movs	r3, #1
 8007a82:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8007a84:	6992      	ldr	r2, [r2, #24]
 8007a86:	b90a      	cbnz	r2, 8007a8c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a8c:	4620      	mov	r0, r4
 8007a8e:	f7ff fff1 	bl	8007a74 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a92:	2300      	movs	r3, #0
 8007a94:	7723      	strb	r3, [r4, #28]
}
 8007a96:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a9a:	4283      	cmp	r3, r0
 8007a9c:	d108      	bne.n	8007ab0 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f1      	bne.n	8007a8c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007aae:	e7ed      	b.n	8007a8c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ab2:	4283      	cmp	r3, r0
 8007ab4:	d108      	bne.n	8007ac8 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d1e5      	bne.n	8007a8c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007ac6:	e7e1      	b.n	8007a8c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007ac8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007aca:	4283      	cmp	r3, r0
 8007acc:	d1de      	bne.n	8007a8c <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ace:	2208      	movs	r2, #8
 8007ad0:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1d9      	bne.n	8007a8c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007ad8:	2301      	movs	r3, #1
 8007ada:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007ade:	e7d5      	b.n	8007a8c <TIM_DMADelayPulseCplt+0x16>

08007ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8007ae0:	4770      	bx	lr

08007ae2 <TIM_DMADelayPulseHalfCplt>:
{
 8007ae2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ae6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae8:	4283      	cmp	r3, r0
 8007aea:	d107      	bne.n	8007afc <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007aec:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aee:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8007af0:	4620      	mov	r0, r4
 8007af2:	f7ff fff5 	bl	8007ae0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007af6:	2300      	movs	r3, #0
 8007af8:	7723      	strb	r3, [r4, #28]
}
 8007afa:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007afc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007afe:	4283      	cmp	r3, r0
 8007b00:	d101      	bne.n	8007b06 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b02:	2302      	movs	r3, #2
 8007b04:	e7f3      	b.n	8007aee <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b06:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b08:	4283      	cmp	r3, r0
 8007b0a:	d101      	bne.n	8007b10 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	e7ee      	b.n	8007aee <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007b12:	4283      	cmp	r3, r0
 8007b14:	d1ec      	bne.n	8007af0 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b16:	2308      	movs	r3, #8
 8007b18:	e7e9      	b.n	8007aee <TIM_DMADelayPulseHalfCplt+0xc>

08007b1a <HAL_TIM_ErrorCallback>:
 8007b1a:	4770      	bx	lr

08007b1c <TIM_DMAError>:
{
 8007b1c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b1e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b22:	4283      	cmp	r3, r0
 8007b24:	d109      	bne.n	8007b3a <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b26:	2301      	movs	r3, #1
 8007b28:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007b2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8007b2e:	4620      	mov	r0, r4
 8007b30:	f7ff fff3 	bl	8007b1a <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b34:	2300      	movs	r3, #0
 8007b36:	7723      	strb	r3, [r4, #28]
}
 8007b38:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b3c:	4283      	cmp	r3, r0
 8007b3e:	d105      	bne.n	8007b4c <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b40:	2302      	movs	r3, #2
 8007b42:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007b44:	2301      	movs	r3, #1
 8007b46:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007b4a:	e7f0      	b.n	8007b2e <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007b4e:	4283      	cmp	r3, r0
 8007b50:	f04f 0301 	mov.w	r3, #1
 8007b54:	d104      	bne.n	8007b60 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b56:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b5c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007b5e:	e7e6      	b.n	8007b2e <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b60:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007b62:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b64:	bf03      	ittte	eq
 8007b66:	2208      	moveq	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007b68:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b6c:	7722      	strbeq	r2, [r4, #28]
    htim->State = HAL_TIM_STATE_READY;
 8007b6e:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8007b72:	e7dc      	b.n	8007b2e <TIM_DMAError+0x12>

08007b74 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b74:	4a1a      	ldr	r2, [pc, #104]	; (8007be0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8007b76:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b78:	4290      	cmp	r0, r2
 8007b7a:	d00a      	beq.n	8007b92 <TIM_Base_SetConfig+0x1e>
 8007b7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007b80:	d007      	beq.n	8007b92 <TIM_Base_SetConfig+0x1e>
 8007b82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007b86:	4290      	cmp	r0, r2
 8007b88:	d003      	beq.n	8007b92 <TIM_Base_SetConfig+0x1e>
 8007b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b8e:	4290      	cmp	r0, r2
 8007b90:	d115      	bne.n	8007bbe <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8007b92:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007b98:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b9a:	4a11      	ldr	r2, [pc, #68]	; (8007be0 <TIM_Base_SetConfig+0x6c>)
 8007b9c:	4290      	cmp	r0, r2
 8007b9e:	d00a      	beq.n	8007bb6 <TIM_Base_SetConfig+0x42>
 8007ba0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007ba4:	d007      	beq.n	8007bb6 <TIM_Base_SetConfig+0x42>
 8007ba6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007baa:	4290      	cmp	r0, r2
 8007bac:	d003      	beq.n	8007bb6 <TIM_Base_SetConfig+0x42>
 8007bae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007bb2:	4290      	cmp	r0, r2
 8007bb4:	d103      	bne.n	8007bbe <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bbe:	694a      	ldr	r2, [r1, #20]
 8007bc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bc4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8007bc6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bc8:	688b      	ldr	r3, [r1, #8]
 8007bca:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007bcc:	680b      	ldr	r3, [r1, #0]
 8007bce:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bd0:	4b03      	ldr	r3, [pc, #12]	; (8007be0 <TIM_Base_SetConfig+0x6c>)
 8007bd2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8007bd4:	bf04      	itt	eq
 8007bd6:	690b      	ldreq	r3, [r1, #16]
 8007bd8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	6143      	str	r3, [r0, #20]
}
 8007bde:	4770      	bx	lr
 8007be0:	40012c00 	.word	0x40012c00

08007be4 <HAL_TIM_PWM_Init>:
{
 8007be4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007be6:	4604      	mov	r4, r0
 8007be8:	b330      	cbz	r0, 8007c38 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007bea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007bee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007bf2:	b91b      	cbnz	r3, 8007bfc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007bf4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007bf8:	f7fc fed8 	bl	80049ac <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bfe:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007c00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c04:	1d21      	adds	r1, r4, #4
 8007c06:	f7ff ffb5 	bl	8007b74 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c0a:	2301      	movs	r3, #1
  return HAL_OK;
 8007c0c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c0e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007c16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007c1a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8007c1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8007c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007c32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007c36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007c38:	2001      	movs	r0, #1
 8007c3a:	e7fc      	b.n	8007c36 <HAL_TIM_PWM_Init+0x52>

08007c3c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c3c:	6a03      	ldr	r3, [r0, #32]
{
 8007c3e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c40:	f023 0310 	bic.w	r3, r3, #16
 8007c44:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007c46:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007c48:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007c4a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c4e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c52:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c56:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007c58:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c5c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c60:	4d0b      	ldr	r5, [pc, #44]	; (8007c90 <TIM_OC2_SetConfig+0x54>)
 8007c62:	42a8      	cmp	r0, r5
 8007c64:	d10d      	bne.n	8007c82 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c66:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c6c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c70:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c74:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007c78:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c7e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8007c82:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007c84:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007c86:	684a      	ldr	r2, [r1, #4]
 8007c88:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007c8a:	6203      	str	r3, [r0, #32]
}
 8007c8c:	bd70      	pop	{r4, r5, r6, pc}
 8007c8e:	bf00      	nop
 8007c90:	40012c00 	.word	0x40012c00

08007c94 <HAL_TIM_PWM_ConfigChannel>:
{
 8007c94:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007c96:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007c9a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d052      	beq.n	8007d46 <HAL_TIM_PWM_ConfigChannel+0xb2>
 8007ca0:	2301      	movs	r3, #1
  switch (Channel)
 8007ca2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8007ca4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007ca8:	d03c      	beq.n	8007d24 <HAL_TIM_PWM_ConfigChannel+0x90>
 8007caa:	d806      	bhi.n	8007cba <HAL_TIM_PWM_ConfigChannel+0x26>
 8007cac:	b1c2      	cbz	r2, 8007ce0 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8007cae:	2a04      	cmp	r2, #4
 8007cb0:	d027      	beq.n	8007d02 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8007cba:	2a0c      	cmp	r2, #12
 8007cbc:	d1f9      	bne.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cbe:	6800      	ldr	r0, [r0, #0]
 8007cc0:	f7ff feb6 	bl	8007a30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cc4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cc6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cc8:	69da      	ldr	r2, [r3, #28]
 8007cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cd0:	69da      	ldr	r2, [r3, #28]
 8007cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cd6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cd8:	69da      	ldr	r2, [r3, #28]
 8007cda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007cde:	e030      	b.n	8007d42 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ce0:	6800      	ldr	r0, [r0, #0]
 8007ce2:	f7ff fe53 	bl	800798c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ce6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ce8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cea:	699a      	ldr	r2, [r3, #24]
 8007cec:	f042 0208 	orr.w	r2, r2, #8
 8007cf0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cf2:	699a      	ldr	r2, [r3, #24]
 8007cf4:	f022 0204 	bic.w	r2, r2, #4
 8007cf8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007cfe:	619a      	str	r2, [r3, #24]
      break;
 8007d00:	e7d7      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d02:	6800      	ldr	r0, [r0, #0]
 8007d04:	f7ff ff9a 	bl	8007c3c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d08:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d0a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d0c:	699a      	ldr	r2, [r3, #24]
 8007d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d1c:	699a      	ldr	r2, [r3, #24]
 8007d1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007d22:	e7ec      	b.n	8007cfe <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d24:	6800      	ldr	r0, [r0, #0]
 8007d26:	f7ff fe59 	bl	80079dc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d2a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d2c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d2e:	69da      	ldr	r2, [r3, #28]
 8007d30:	f042 0208 	orr.w	r2, r2, #8
 8007d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d36:	69da      	ldr	r2, [r3, #28]
 8007d38:	f022 0204 	bic.w	r2, r2, #4
 8007d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d3e:	69da      	ldr	r2, [r3, #28]
 8007d40:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d42:	61da      	str	r2, [r3, #28]
      break;
 8007d44:	e7b5      	b.n	8007cb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8007d46:	2002      	movs	r0, #2
 8007d48:	e7b6      	b.n	8007cb8 <HAL_TIM_PWM_ConfigChannel+0x24>

08007d4a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d4a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d4c:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d4e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d50:	f001 011f 	and.w	r1, r1, #31
 8007d54:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007d56:	ea23 0304 	bic.w	r3, r3, r4
 8007d5a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d5c:	6a03      	ldr	r3, [r0, #32]
 8007d5e:	408a      	lsls	r2, r1
 8007d60:	431a      	orrs	r2, r3
 8007d62:	6202      	str	r2, [r0, #32]
}
 8007d64:	bd10      	pop	{r4, pc}
	...

08007d68 <HAL_TIM_OC_Start_DMA>:
{
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	460d      	mov	r5, r1
 8007d6c:	4604      	mov	r4, r0
 8007d6e:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d70:	b92d      	cbnz	r5, 8007d7e <HAL_TIM_OC_Start_DMA+0x16>
 8007d72:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8007d76:	2a02      	cmp	r2, #2
 8007d78:	b2d0      	uxtb	r0, r2
 8007d7a:	d11c      	bne.n	8007db6 <HAL_TIM_OC_Start_DMA+0x4e>
}
 8007d7c:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d7e:	2d04      	cmp	r5, #4
 8007d80:	d107      	bne.n	8007d92 <HAL_TIM_OC_Start_DMA+0x2a>
 8007d82:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8007d86:	2a02      	cmp	r2, #2
 8007d88:	b2d0      	uxtb	r0, r2
 8007d8a:	d0f7      	beq.n	8007d7c <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007d8c:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 8007d90:	e013      	b.n	8007dba <HAL_TIM_OC_Start_DMA+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007d92:	2d08      	cmp	r5, #8
 8007d94:	d107      	bne.n	8007da6 <HAL_TIM_OC_Start_DMA+0x3e>
 8007d96:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8007d9a:	2a02      	cmp	r2, #2
 8007d9c:	b2d0      	uxtb	r0, r2
 8007d9e:	d0ed      	beq.n	8007d7c <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007da0:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007da4:	e009      	b.n	8007dba <HAL_TIM_OC_Start_DMA+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007da6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007daa:	2a02      	cmp	r2, #2
 8007dac:	b2d0      	uxtb	r0, r2
 8007dae:	d0e5      	beq.n	8007d7c <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007db0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 8007db4:	e001      	b.n	8007dba <HAL_TIM_OC_Start_DMA+0x52>
 8007db6:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 8007dba:	1e42      	subs	r2, r0, #1
 8007dbc:	4250      	negs	r0, r2
 8007dbe:	4150      	adcs	r0, r2
 8007dc0:	b908      	cbnz	r0, 8007dc6 <HAL_TIM_OC_Start_DMA+0x5e>
    return HAL_ERROR;
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	e7da      	b.n	8007d7c <HAL_TIM_OC_Start_DMA+0x14>
    if ((pData == NULL) && (Length > 0U))
 8007dc6:	b909      	cbnz	r1, 8007dcc <HAL_TIM_OC_Start_DMA+0x64>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1fa      	bne.n	8007dc2 <HAL_TIM_OC_Start_DMA+0x5a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dcc:	2002      	movs	r0, #2
 8007dce:	6822      	ldr	r2, [r4, #0]
 8007dd0:	bb35      	cbnz	r5, 8007e20 <HAL_TIM_OC_Start_DMA+0xb8>
 8007dd2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007dd6:	4e39      	ldr	r6, [pc, #228]	; (8007ebc <HAL_TIM_OC_Start_DMA+0x154>)
 8007dd8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007dda:	3234      	adds	r2, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ddc:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007dde:	4e38      	ldr	r6, [pc, #224]	; (8007ec0 <HAL_TIM_OC_Start_DMA+0x158>)
 8007de0:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007de2:	4e38      	ldr	r6, [pc, #224]	; (8007ec4 <HAL_TIM_OC_Start_DMA+0x15c>)
 8007de4:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007de6:	f7fe f895 	bl	8005f14 <HAL_DMA_Start_IT>
 8007dea:	2800      	cmp	r0, #0
 8007dec:	d1e9      	bne.n	8007dc2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	68d3      	ldr	r3, [r2, #12]
 8007df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007df6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007df8:	2201      	movs	r2, #1
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	6820      	ldr	r0, [r4, #0]
 8007dfe:	f7ff ffa4 	bl	8007d4a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	4a30      	ldr	r2, [pc, #192]	; (8007ec8 <HAL_TIM_OC_Start_DMA+0x160>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d149      	bne.n	8007e9e <HAL_TIM_OC_Start_DMA+0x136>
    __HAL_TIM_MOE_ENABLE(htim);
 8007e0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007e10:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e18:	2a06      	cmp	r2, #6
 8007e1a:	d14a      	bne.n	8007eb2 <HAL_TIM_OC_Start_DMA+0x14a>
  return HAL_OK;
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7ad      	b.n	8007d7c <HAL_TIM_OC_Start_DMA+0x14>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e20:	2d04      	cmp	r5, #4
 8007e22:	d112      	bne.n	8007e4a <HAL_TIM_OC_Start_DMA+0xe2>
 8007e24:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e28:	4e24      	ldr	r6, [pc, #144]	; (8007ebc <HAL_TIM_OC_Start_DMA+0x154>)
 8007e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007e2c:	3238      	adds	r2, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e2e:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e30:	4e23      	ldr	r6, [pc, #140]	; (8007ec0 <HAL_TIM_OC_Start_DMA+0x158>)
 8007e32:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007e34:	4e23      	ldr	r6, [pc, #140]	; (8007ec4 <HAL_TIM_OC_Start_DMA+0x15c>)
 8007e36:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007e38:	f7fe f86c 	bl	8005f14 <HAL_DMA_Start_IT>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	d1c0      	bne.n	8007dc2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e40:	6822      	ldr	r2, [r4, #0]
 8007e42:	68d3      	ldr	r3, [r2, #12]
 8007e44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e48:	e7d5      	b.n	8007df6 <HAL_TIM_OC_Start_DMA+0x8e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e4a:	2d08      	cmp	r5, #8
 8007e4c:	d112      	bne.n	8007e74 <HAL_TIM_OC_Start_DMA+0x10c>
 8007e4e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e52:	4e1a      	ldr	r6, [pc, #104]	; (8007ebc <HAL_TIM_OC_Start_DMA+0x154>)
 8007e54:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007e56:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e58:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e5a:	4e19      	ldr	r6, [pc, #100]	; (8007ec0 <HAL_TIM_OC_Start_DMA+0x158>)
 8007e5c:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007e5e:	4e19      	ldr	r6, [pc, #100]	; (8007ec4 <HAL_TIM_OC_Start_DMA+0x15c>)
 8007e60:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007e62:	f7fe f857 	bl	8005f14 <HAL_DMA_Start_IT>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d1ab      	bne.n	8007dc2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	68d3      	ldr	r3, [r2, #12]
 8007e6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e72:	e7c0      	b.n	8007df6 <HAL_TIM_OC_Start_DMA+0x8e>
  switch (Channel)
 8007e74:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e76:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  switch (Channel)
 8007e7a:	d1bd      	bne.n	8007df8 <HAL_TIM_OC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007e7e:	4e0f      	ldr	r6, [pc, #60]	; (8007ebc <HAL_TIM_OC_Start_DMA+0x154>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007e80:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e82:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e84:	4e0e      	ldr	r6, [pc, #56]	; (8007ec0 <HAL_TIM_OC_Start_DMA+0x158>)
 8007e86:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007e88:	4e0e      	ldr	r6, [pc, #56]	; (8007ec4 <HAL_TIM_OC_Start_DMA+0x15c>)
 8007e8a:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007e8c:	f7fe f842 	bl	8005f14 <HAL_DMA_Start_IT>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d196      	bne.n	8007dc2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007e94:	6822      	ldr	r2, [r4, #0]
 8007e96:	68d3      	ldr	r3, [r2, #12]
 8007e98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e9c:	e7ab      	b.n	8007df6 <HAL_TIM_OC_Start_DMA+0x8e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ea2:	d0b6      	beq.n	8007e12 <HAL_TIM_OC_Start_DMA+0xaa>
 8007ea4:	4a09      	ldr	r2, [pc, #36]	; (8007ecc <HAL_TIM_OC_Start_DMA+0x164>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d0b3      	beq.n	8007e12 <HAL_TIM_OC_Start_DMA+0xaa>
 8007eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d0af      	beq.n	8007e12 <HAL_TIM_OC_Start_DMA+0xaa>
    __HAL_TIM_ENABLE(htim);
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	f042 0201 	orr.w	r2, r2, #1
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	e7af      	b.n	8007e1c <HAL_TIM_OC_Start_DMA+0xb4>
 8007ebc:	08007a77 	.word	0x08007a77
 8007ec0:	08007ae3 	.word	0x08007ae3
 8007ec4:	08007b1d 	.word	0x08007b1d
 8007ec8:	40012c00 	.word	0x40012c00
 8007ecc:	40000400 	.word	0x40000400

08007ed0 <HAL_TIM_PWM_Start_DMA>:
 8007ed0:	f7ff bf4a 	b.w	8007d68 <HAL_TIM_OC_Start_DMA>

08007ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ed4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ed6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007eda:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	f04f 0002 	mov.w	r0, #2
 8007ee2:	d022      	beq.n	8007f2a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ee4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007ee6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007eea:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007eec:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007eee:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8007ef4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ef6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ef8:	4c0c      	ldr	r4, [pc, #48]	; (8007f2c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8007efa:	42a3      	cmp	r3, r4
 8007efc:	d00a      	beq.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f02:	d007      	beq.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007f04:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d003      	beq.n	8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007f0c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007f10:	42a3      	cmp	r3, r4
 8007f12:	d104      	bne.n	8007f1e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f14:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f16:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f1a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f1c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f1e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007f20:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007f22:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007f26:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8007f2a:	bd30      	pop	{r4, r5, pc}
 8007f2c:	40012c00 	.word	0x40012c00

08007f30 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f30:	6803      	ldr	r3, [r0, #0]
 8007f32:	68da      	ldr	r2, [r3, #12]
 8007f34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f38:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f42:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007f44:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f46:	bf02      	ittt	eq
 8007f48:	68da      	ldreq	r2, [r3, #12]
 8007f4a:	f022 0210 	biceq.w	r2, r2, #16
 8007f4e:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f50:	2320      	movs	r3, #32
 8007f52:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f56:	2300      	movs	r3, #0
 8007f58:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007f5a:	4770      	bx	lr

08007f5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f5c:	b510      	push	{r4, lr}
 8007f5e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f60:	6803      	ldr	r3, [r0, #0]
 8007f62:	68c1      	ldr	r1, [r0, #12]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007f6e:	6882      	ldr	r2, [r0, #8]
 8007f70:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007f72:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007f74:	4302      	orrs	r2, r0
 8007f76:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007f78:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007f7c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007f80:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007f82:	430a      	orrs	r2, r1
 8007f84:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f86:	695a      	ldr	r2, [r3, #20]
 8007f88:	69a1      	ldr	r1, [r4, #24]
 8007f8a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007f92:	4a0e      	ldr	r2, [pc, #56]	; (8007fcc <UART_SetConfig+0x70>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d115      	bne.n	8007fc4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007f98:	f7ff fa14 	bl	80073c4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f9c:	2319      	movs	r3, #25
 8007f9e:	4343      	muls	r3, r0
 8007fa0:	6862      	ldr	r2, [r4, #4]
 8007fa2:	6820      	ldr	r0, [r4, #0]
 8007fa4:	0092      	lsls	r2, r2, #2
 8007fa6:	fbb3 f3f2 	udiv	r3, r3, r2
 8007faa:	2264      	movs	r2, #100	; 0x64
 8007fac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007fb0:	fb02 3311 	mls	r3, r2, r1, r3
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	3332      	adds	r3, #50	; 0x32
 8007fb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fbc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007fc0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8007fc2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8007fc4:	f7ff f9ee 	bl	80073a4 <HAL_RCC_GetPCLK1Freq>
 8007fc8:	e7e8      	b.n	8007f9c <UART_SetConfig+0x40>
 8007fca:	bf00      	nop
 8007fcc:	40013800 	.word	0x40013800

08007fd0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	460e      	mov	r6, r1
 8007fd6:	4617      	mov	r7, r2
 8007fd8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fda:	6822      	ldr	r2, [r4, #0]
 8007fdc:	6813      	ldr	r3, [r2, #0]
 8007fde:	ea36 0303 	bics.w	r3, r6, r3
 8007fe2:	d101      	bne.n	8007fe8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	e014      	b.n	8008012 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8007fe8:	1c6b      	adds	r3, r5, #1
 8007fea:	d0f7      	beq.n	8007fdc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fec:	b995      	cbnz	r5, 8008014 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fee:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8007ff0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ff8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffa:	695a      	ldr	r2, [r3, #20]
 8007ffc:	f022 0201 	bic.w	r2, r2, #1
 8008000:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8008002:	2320      	movs	r3, #32
 8008004:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008008:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800800c:	2300      	movs	r3, #0
 800800e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008014:	f7fd fca8 	bl	8005968 <HAL_GetTick>
 8008018:	1bc0      	subs	r0, r0, r7
 800801a:	4285      	cmp	r5, r0
 800801c:	d2dd      	bcs.n	8007fda <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800801e:	e7e6      	b.n	8007fee <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08008020 <HAL_UART_Init>:
{
 8008020:	b510      	push	{r4, lr}
  if (huart == NULL)
 8008022:	4604      	mov	r4, r0
 8008024:	b340      	cbz	r0, 8008078 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008026:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800802a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800802e:	b91b      	cbnz	r3, 8008038 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8008030:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8008034:	f7fc fd14 	bl	8004a60 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8008038:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800803a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800803c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8008040:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8008042:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8008044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008048:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800804a:	f7ff ff87 	bl	8007f5c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800804e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008050:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800805a:	695a      	ldr	r2, [r3, #20]
 800805c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008060:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8008062:	68da      	ldr	r2, [r3, #12]
 8008064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008068:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800806a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800806c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800806e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008072:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8008076:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008078:	2001      	movs	r0, #1
 800807a:	e7fc      	b.n	8008076 <HAL_UART_Init+0x56>

0800807c <HAL_UART_Transmit>:
{
 800807c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008080:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008082:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8008086:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8008088:	2b20      	cmp	r3, #32
{
 800808a:	460e      	mov	r6, r1
 800808c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800808e:	d148      	bne.n	8008122 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8008090:	2900      	cmp	r1, #0
 8008092:	d044      	beq.n	800811e <HAL_UART_Transmit+0xa2>
 8008094:	2a00      	cmp	r2, #0
 8008096:	d042      	beq.n	800811e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8008098:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800809c:	2b01      	cmp	r3, #1
 800809e:	d040      	beq.n	8008122 <HAL_UART_Transmit+0xa6>
 80080a0:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a2:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 80080a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080a8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080aa:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080ac:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80080b0:	f7fd fc5a 	bl	8005968 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80080b6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80080bc:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80080be:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80080c0:	d103      	bne.n	80080ca <HAL_UART_Transmit+0x4e>
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	b90b      	cbnz	r3, 80080ca <HAL_UART_Transmit+0x4e>
 80080c6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80080c8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80080ca:	2300      	movs	r3, #0
 80080cc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80080d0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	b953      	cbnz	r3, 80080ec <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80080d6:	464b      	mov	r3, r9
 80080d8:	4642      	mov	r2, r8
 80080da:	2140      	movs	r1, #64	; 0x40
 80080dc:	4620      	mov	r0, r4
 80080de:	f7ff ff77 	bl	8007fd0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80080e2:	b950      	cbnz	r0, 80080fa <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80080e4:	2320      	movs	r3, #32
 80080e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80080ea:	e007      	b.n	80080fc <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80080ec:	464b      	mov	r3, r9
 80080ee:	4642      	mov	r2, r8
 80080f0:	2180      	movs	r1, #128	; 0x80
 80080f2:	4620      	mov	r0, r4
 80080f4:	f7ff ff6c 	bl	8007fd0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80080f8:	b110      	cbz	r0, 8008100 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80080fa:	2003      	movs	r0, #3
}
 80080fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8008100:	6822      	ldr	r2, [r4, #0]
 8008102:	b94e      	cbnz	r6, 8008118 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008104:	f835 3b02 	ldrh.w	r3, [r5], #2
 8008108:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800810c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800810e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8008110:	3901      	subs	r1, #1
 8008112:	b289      	uxth	r1, r1
 8008114:	84e1      	strh	r1, [r4, #38]	; 0x26
 8008116:	e7db      	b.n	80080d0 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008118:	f816 3b01 	ldrb.w	r3, [r6], #1
 800811c:	e7f6      	b.n	800810c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800811e:	2001      	movs	r0, #1
 8008120:	e7ec      	b.n	80080fc <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8008122:	2002      	movs	r0, #2
 8008124:	e7ea      	b.n	80080fc <HAL_UART_Transmit+0x80>

08008126 <HAL_UART_TxCpltCallback>:
 8008126:	4770      	bx	lr

08008128 <HAL_UART_ErrorCallback>:
 8008128:	4770      	bx	lr

0800812a <UART_DMAAbortOnError>:
{
 800812a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800812c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800812e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8008130:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008132:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8008134:	f7ff fff8 	bl	8008128 <HAL_UART_ErrorCallback>
}
 8008138:	bd08      	pop	{r3, pc}

0800813a <HAL_UARTEx_RxEventCallback>:
}
 800813a:	4770      	bx	lr

0800813c <UART_Receive_IT>:
{
 800813c:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800813e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008142:	2b22      	cmp	r3, #34	; 0x22
 8008144:	d149      	bne.n	80081da <UART_Receive_IT+0x9e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008146:	6881      	ldr	r1, [r0, #8]
 8008148:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800814a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800814e:	6802      	ldr	r2, [r0, #0]
 8008150:	d133      	bne.n	80081ba <UART_Receive_IT+0x7e>
 8008152:	6901      	ldr	r1, [r0, #16]
 8008154:	2900      	cmp	r1, #0
 8008156:	d133      	bne.n	80081c0 <UART_Receive_IT+0x84>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008158:	6852      	ldr	r2, [r2, #4]
 800815a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800815e:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8008162:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8008164:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8008166:	3c01      	subs	r4, #1
 8008168:	b2a4      	uxth	r4, r4
 800816a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800816c:	bb1c      	cbnz	r4, 80081b6 <UART_Receive_IT+0x7a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800816e:	6803      	ldr	r3, [r0, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	f022 0220 	bic.w	r2, r2, #32
 8008176:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800817e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	f022 0201 	bic.w	r2, r2, #1
 8008186:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008188:	2220      	movs	r2, #32
 800818a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8008190:	2a01      	cmp	r2, #1
 8008192:	d11f      	bne.n	80081d4 <UART_Receive_IT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008194:	6304      	str	r4, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	f022 0210 	bic.w	r2, r2, #16
 800819c:	60da      	str	r2, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	06d2      	lsls	r2, r2, #27
 80081a2:	d505      	bpl.n	80081b0 <UART_Receive_IT+0x74>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081a4:	9401      	str	r4, [sp, #4]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	9201      	str	r2, [sp, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081b0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80081b2:	f7ff ffc2 	bl	800813a <HAL_UARTEx_RxEventCallback>
 80081b6:	2000      	movs	r0, #0
 80081b8:	e010      	b.n	80081dc <UART_Receive_IT+0xa0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081ba:	b939      	cbnz	r1, 80081cc <UART_Receive_IT+0x90>
 80081bc:	6901      	ldr	r1, [r0, #16]
 80081be:	b929      	cbnz	r1, 80081cc <UART_Receive_IT+0x90>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081c0:	6852      	ldr	r2, [r2, #4]
 80081c2:	b2d2      	uxtb	r2, r2
 80081c4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80081c6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80081c8:	3301      	adds	r3, #1
 80081ca:	e7ca      	b.n	8008162 <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081cc:	6852      	ldr	r2, [r2, #4]
 80081ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081d2:	e7f7      	b.n	80081c4 <UART_Receive_IT+0x88>
       HAL_UART_RxCpltCallback(huart);
 80081d4:	f7f9 fa2e 	bl	8001634 <HAL_UART_RxCpltCallback>
 80081d8:	e7ed      	b.n	80081b6 <UART_Receive_IT+0x7a>
    return HAL_BUSY;
 80081da:	2002      	movs	r0, #2
}
 80081dc:	b002      	add	sp, #8
 80081de:	bd10      	pop	{r4, pc}

080081e0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081e0:	6803      	ldr	r3, [r0, #0]
{
 80081e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80081e4:	681a      	ldr	r2, [r3, #0]
{
 80081e6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80081e8:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081ec:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081ee:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80081f0:	d108      	bne.n	8008204 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081f2:	0695      	lsls	r5, r2, #26
 80081f4:	d55f      	bpl.n	80082b6 <HAL_UART_IRQHandler+0xd6>
 80081f6:	068d      	lsls	r5, r1, #26
 80081f8:	d55d      	bpl.n	80082b6 <HAL_UART_IRQHandler+0xd6>
}
 80081fa:	b003      	add	sp, #12
 80081fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8008200:	f7ff bf9c 	b.w	800813c <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008204:	f005 0001 	and.w	r0, r5, #1
 8008208:	f401 7590 	and.w	r5, r1, #288	; 0x120
 800820c:	4305      	orrs	r5, r0
 800820e:	d052      	beq.n	80082b6 <HAL_UART_IRQHandler+0xd6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008210:	07d5      	lsls	r5, r2, #31
 8008212:	d505      	bpl.n	8008220 <HAL_UART_IRQHandler+0x40>
 8008214:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008216:	bf42      	ittt	mi
 8008218:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800821a:	f043 0301 	orrmi.w	r3, r3, #1
 800821e:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008220:	0755      	lsls	r5, r2, #29
 8008222:	d504      	bpl.n	800822e <HAL_UART_IRQHandler+0x4e>
 8008224:	b118      	cbz	r0, 800822e <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008228:	f043 0302 	orr.w	r3, r3, #2
 800822c:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800822e:	0793      	lsls	r3, r2, #30
 8008230:	d504      	bpl.n	800823c <HAL_UART_IRQHandler+0x5c>
 8008232:	b118      	cbz	r0, 800823c <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008234:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008236:	f043 0304 	orr.w	r3, r3, #4
 800823a:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800823c:	0715      	lsls	r5, r2, #28
 800823e:	d507      	bpl.n	8008250 <HAL_UART_IRQHandler+0x70>
 8008240:	f001 0320 	and.w	r3, r1, #32
 8008244:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008246:	bf1e      	ittt	ne
 8008248:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800824a:	f043 0308 	orrne.w	r3, r3, #8
 800824e:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008252:	b353      	cbz	r3, 80082aa <HAL_UART_IRQHandler+0xca>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008254:	0692      	lsls	r2, r2, #26
 8008256:	d504      	bpl.n	8008262 <HAL_UART_IRQHandler+0x82>
 8008258:	068b      	lsls	r3, r1, #26
 800825a:	d502      	bpl.n	8008262 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 800825c:	4620      	mov	r0, r4
 800825e:	f7ff ff6d 	bl	800813c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008262:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8008264:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008266:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008268:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800826a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800826e:	f005 0508 	and.w	r5, r5, #8
 8008272:	431d      	orrs	r5, r3
 8008274:	d01b      	beq.n	80082ae <HAL_UART_IRQHandler+0xce>
        UART_EndRxTransfer(huart);
 8008276:	f7ff fe5b 	bl	8007f30 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	695a      	ldr	r2, [r3, #20]
 800827e:	0655      	lsls	r5, r2, #25
 8008280:	d510      	bpl.n	80082a4 <HAL_UART_IRQHandler+0xc4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008282:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8008284:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800828a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800828c:	b150      	cbz	r0, 80082a4 <HAL_UART_IRQHandler+0xc4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800828e:	4b53      	ldr	r3, [pc, #332]	; (80083dc <HAL_UART_IRQHandler+0x1fc>)
 8008290:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008292:	f7fd fe99 	bl	8005fc8 <HAL_DMA_Abort_IT>
 8008296:	b140      	cbz	r0, 80082aa <HAL_UART_IRQHandler+0xca>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008298:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800829a:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800829c:	b003      	add	sp, #12
 800829e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80082a2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80082a4:	4620      	mov	r0, r4
 80082a6:	f7ff ff3f 	bl	8008128 <HAL_UART_ErrorCallback>
}
 80082aa:	b003      	add	sp, #12
 80082ac:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 80082ae:	f7ff ff3b 	bl	8008128 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b2:	6425      	str	r5, [r4, #64]	; 0x40
 80082b4:	e7f9      	b.n	80082aa <HAL_UART_IRQHandler+0xca>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80082b8:	2801      	cmp	r0, #1
 80082ba:	d155      	bne.n	8008368 <HAL_UART_IRQHandler+0x188>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80082bc:	06d0      	lsls	r0, r2, #27
 80082be:	d553      	bpl.n	8008368 <HAL_UART_IRQHandler+0x188>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80082c0:	06cd      	lsls	r5, r1, #27
 80082c2:	d551      	bpl.n	8008368 <HAL_UART_IRQHandler+0x188>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082c4:	2100      	movs	r1, #0
 80082c6:	9101      	str	r1, [sp, #4]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	9201      	str	r2, [sp, #4]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	9201      	str	r2, [sp, #4]
 80082d0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80082d8:	d02a      	beq.n	8008330 <HAL_UART_IRQHandler+0x150>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082da:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80082dc:	6802      	ldr	r2, [r0, #0]
 80082de:	6852      	ldr	r2, [r2, #4]
 80082e0:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80082e2:	2a00      	cmp	r2, #0
 80082e4:	d0e1      	beq.n	80082aa <HAL_UART_IRQHandler+0xca>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80082e6:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80082e8:	4295      	cmp	r5, r2
 80082ea:	d9de      	bls.n	80082aa <HAL_UART_IRQHandler+0xca>
        huart->RxXferCount = nb_remaining_rx_data;
 80082ec:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082ee:	6982      	ldr	r2, [r0, #24]
 80082f0:	2a20      	cmp	r2, #32
 80082f2:	d015      	beq.n	8008320 <HAL_UART_IRQHandler+0x140>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082f4:	68da      	ldr	r2, [r3, #12]
 80082f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	f022 0201 	bic.w	r2, r2, #1
 8008302:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008304:	695a      	ldr	r2, [r3, #20]
 8008306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830a:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800830c:	2220      	movs	r2, #32
 800830e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008312:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008314:	68da      	ldr	r2, [r3, #12]
 8008316:	f022 0210 	bic.w	r2, r2, #16
 800831a:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800831c:	f7fd fe36 	bl	8005f8c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008320:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008322:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008324:	1ac9      	subs	r1, r1, r3
 8008326:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008328:	4620      	mov	r0, r4
 800832a:	f7ff ff06 	bl	800813a <HAL_UARTEx_RxEventCallback>
 800832e:	e7bc      	b.n	80082aa <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008330:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8008332:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8008334:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8008336:	b289      	uxth	r1, r1
 8008338:	2900      	cmp	r1, #0
 800833a:	d0b6      	beq.n	80082aa <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800833c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800833e:	1a09      	subs	r1, r1, r0
 8008340:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8008342:	2900      	cmp	r1, #0
 8008344:	d0b1      	beq.n	80082aa <HAL_UART_IRQHandler+0xca>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008346:	68d8      	ldr	r0, [r3, #12]
 8008348:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800834c:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834e:	6958      	ldr	r0, [r3, #20]
 8008350:	f020 0001 	bic.w	r0, r0, #1
 8008354:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8008356:	2020      	movs	r0, #32
 8008358:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800835c:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	f022 0210 	bic.w	r2, r2, #16
 8008364:	60da      	str	r2, [r3, #12]
 8008366:	e7df      	b.n	8008328 <HAL_UART_IRQHandler+0x148>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008368:	0610      	lsls	r0, r2, #24
 800836a:	d526      	bpl.n	80083ba <HAL_UART_IRQHandler+0x1da>
 800836c:	060d      	lsls	r5, r1, #24
 800836e:	d524      	bpl.n	80083ba <HAL_UART_IRQHandler+0x1da>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008370:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008374:	2a21      	cmp	r2, #33	; 0x21
 8008376:	d198      	bne.n	80082aa <HAL_UART_IRQHandler+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008378:	68a1      	ldr	r1, [r4, #8]
 800837a:	6a22      	ldr	r2, [r4, #32]
 800837c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008380:	d116      	bne.n	80083b0 <HAL_UART_IRQHandler+0x1d0>
 8008382:	6921      	ldr	r1, [r4, #16]
 8008384:	b9a1      	cbnz	r1, 80083b0 <HAL_UART_IRQHandler+0x1d0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008386:	f832 1b02 	ldrh.w	r1, [r2], #2
 800838a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800838e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008390:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8008392:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008394:	3a01      	subs	r2, #1
 8008396:	b292      	uxth	r2, r2
 8008398:	84e2      	strh	r2, [r4, #38]	; 0x26
 800839a:	2a00      	cmp	r2, #0
 800839c:	d185      	bne.n	80082aa <HAL_UART_IRQHandler+0xca>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083a4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083ac:	60da      	str	r2, [r3, #12]
 80083ae:	e77c      	b.n	80082aa <HAL_UART_IRQHandler+0xca>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083b0:	1c51      	adds	r1, r2, #1
 80083b2:	6221      	str	r1, [r4, #32]
 80083b4:	7812      	ldrb	r2, [r2, #0]
 80083b6:	605a      	str	r2, [r3, #4]
 80083b8:	e7eb      	b.n	8008392 <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80083ba:	0650      	lsls	r0, r2, #25
 80083bc:	f57f af75 	bpl.w	80082aa <HAL_UART_IRQHandler+0xca>
 80083c0:	064a      	lsls	r2, r1, #25
 80083c2:	f57f af72 	bpl.w	80082aa <HAL_UART_IRQHandler+0xca>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083c6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80083c8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80083ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ce:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80083d0:	2320      	movs	r3, #32
 80083d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80083d6:	f7ff fea6 	bl	8008126 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80083da:	e766      	b.n	80082aa <HAL_UART_IRQHandler+0xca>
 80083dc:	0800812b 	.word	0x0800812b

080083e0 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 80083e0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 80083e2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 80083e4:	6281      	str	r1, [r0, #40]	; 0x28
{
 80083e6:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083e8:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ea:	2000      	movs	r0, #0
 80083ec:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 80083ee:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fe:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008400:	695a      	ldr	r2, [r3, #20]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	f042 0220 	orr.w	r2, r2, #32
 800840e:	60da      	str	r2, [r3, #12]
}
 8008410:	4770      	bx	lr

08008412 <HAL_UART_Receive_IT>:
{
 8008412:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8008414:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8008418:	2e20      	cmp	r6, #32
 800841a:	d110      	bne.n	800843e <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 800841c:	b161      	cbz	r1, 8008438 <HAL_UART_Receive_IT+0x26>
 800841e:	b15a      	cbz	r2, 8008438 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 8008420:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8008424:	2c01      	cmp	r4, #1
 8008426:	d00a      	beq.n	800843e <HAL_UART_Receive_IT+0x2c>
 8008428:	2401      	movs	r4, #1
 800842a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800842e:	2400      	movs	r4, #0
 8008430:	6304      	str	r4, [r0, #48]	; 0x30
}
 8008432:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 8008434:	f7ff bfd4 	b.w	80083e0 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8008438:	2001      	movs	r0, #1
}
 800843a:	bc70      	pop	{r4, r5, r6}
 800843c:	4770      	bx	lr
    return HAL_BUSY;
 800843e:	2002      	movs	r0, #2
 8008440:	e7fb      	b.n	800843a <HAL_UART_Receive_IT+0x28>
	...

08008444 <__errno>:
 8008444:	4b01      	ldr	r3, [pc, #4]	; (800844c <__errno+0x8>)
 8008446:	6818      	ldr	r0, [r3, #0]
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	20000058 	.word	0x20000058

08008450 <__libc_init_array>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	2600      	movs	r6, #0
 8008454:	4d0c      	ldr	r5, [pc, #48]	; (8008488 <__libc_init_array+0x38>)
 8008456:	4c0d      	ldr	r4, [pc, #52]	; (800848c <__libc_init_array+0x3c>)
 8008458:	1b64      	subs	r4, r4, r5
 800845a:	10a4      	asrs	r4, r4, #2
 800845c:	42a6      	cmp	r6, r4
 800845e:	d109      	bne.n	8008474 <__libc_init_array+0x24>
 8008460:	f002 f9d4 	bl	800a80c <_init>
 8008464:	2600      	movs	r6, #0
 8008466:	4d0a      	ldr	r5, [pc, #40]	; (8008490 <__libc_init_array+0x40>)
 8008468:	4c0a      	ldr	r4, [pc, #40]	; (8008494 <__libc_init_array+0x44>)
 800846a:	1b64      	subs	r4, r4, r5
 800846c:	10a4      	asrs	r4, r4, #2
 800846e:	42a6      	cmp	r6, r4
 8008470:	d105      	bne.n	800847e <__libc_init_array+0x2e>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	f855 3b04 	ldr.w	r3, [r5], #4
 8008478:	4798      	blx	r3
 800847a:	3601      	adds	r6, #1
 800847c:	e7ee      	b.n	800845c <__libc_init_array+0xc>
 800847e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008482:	4798      	blx	r3
 8008484:	3601      	adds	r6, #1
 8008486:	e7f2      	b.n	800846e <__libc_init_array+0x1e>
 8008488:	0800b720 	.word	0x0800b720
 800848c:	0800b720 	.word	0x0800b720
 8008490:	0800b720 	.word	0x0800b720
 8008494:	0800b724 	.word	0x0800b724

08008498 <memcpy>:
 8008498:	440a      	add	r2, r1
 800849a:	4291      	cmp	r1, r2
 800849c:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a0:	d100      	bne.n	80084a4 <memcpy+0xc>
 80084a2:	4770      	bx	lr
 80084a4:	b510      	push	{r4, lr}
 80084a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084aa:	4291      	cmp	r1, r2
 80084ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b0:	d1f9      	bne.n	80084a6 <memcpy+0xe>
 80084b2:	bd10      	pop	{r4, pc}

080084b4 <memset>:
 80084b4:	4603      	mov	r3, r0
 80084b6:	4402      	add	r2, r0
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d100      	bne.n	80084be <memset+0xa>
 80084bc:	4770      	bx	lr
 80084be:	f803 1b01 	strb.w	r1, [r3], #1
 80084c2:	e7f9      	b.n	80084b8 <memset+0x4>

080084c4 <iprintf>:
 80084c4:	b40f      	push	{r0, r1, r2, r3}
 80084c6:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <iprintf+0x2c>)
 80084c8:	b513      	push	{r0, r1, r4, lr}
 80084ca:	681c      	ldr	r4, [r3, #0]
 80084cc:	b124      	cbz	r4, 80084d8 <iprintf+0x14>
 80084ce:	69a3      	ldr	r3, [r4, #24]
 80084d0:	b913      	cbnz	r3, 80084d8 <iprintf+0x14>
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 fa86 	bl	80089e4 <__sinit>
 80084d8:	ab05      	add	r3, sp, #20
 80084da:	4620      	mov	r0, r4
 80084dc:	9a04      	ldr	r2, [sp, #16]
 80084de:	68a1      	ldr	r1, [r4, #8]
 80084e0:	9301      	str	r3, [sp, #4]
 80084e2:	f000 fdad 	bl	8009040 <_vfiprintf_r>
 80084e6:	b002      	add	sp, #8
 80084e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ec:	b004      	add	sp, #16
 80084ee:	4770      	bx	lr
 80084f0:	20000058 	.word	0x20000058

080084f4 <_puts_r>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	460e      	mov	r6, r1
 80084f8:	4605      	mov	r5, r0
 80084fa:	b118      	cbz	r0, 8008504 <_puts_r+0x10>
 80084fc:	6983      	ldr	r3, [r0, #24]
 80084fe:	b90b      	cbnz	r3, 8008504 <_puts_r+0x10>
 8008500:	f000 fa70 	bl	80089e4 <__sinit>
 8008504:	69ab      	ldr	r3, [r5, #24]
 8008506:	68ac      	ldr	r4, [r5, #8]
 8008508:	b913      	cbnz	r3, 8008510 <_puts_r+0x1c>
 800850a:	4628      	mov	r0, r5
 800850c:	f000 fa6a 	bl	80089e4 <__sinit>
 8008510:	4b2c      	ldr	r3, [pc, #176]	; (80085c4 <_puts_r+0xd0>)
 8008512:	429c      	cmp	r4, r3
 8008514:	d120      	bne.n	8008558 <_puts_r+0x64>
 8008516:	686c      	ldr	r4, [r5, #4]
 8008518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800851a:	07db      	lsls	r3, r3, #31
 800851c:	d405      	bmi.n	800852a <_puts_r+0x36>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	0598      	lsls	r0, r3, #22
 8008522:	d402      	bmi.n	800852a <_puts_r+0x36>
 8008524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008526:	f000 fafb 	bl	8008b20 <__retarget_lock_acquire_recursive>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	0719      	lsls	r1, r3, #28
 800852e:	d51d      	bpl.n	800856c <_puts_r+0x78>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	b1db      	cbz	r3, 800856c <_puts_r+0x78>
 8008534:	3e01      	subs	r6, #1
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800853c:	3b01      	subs	r3, #1
 800853e:	60a3      	str	r3, [r4, #8]
 8008540:	bb39      	cbnz	r1, 8008592 <_puts_r+0x9e>
 8008542:	2b00      	cmp	r3, #0
 8008544:	da38      	bge.n	80085b8 <_puts_r+0xc4>
 8008546:	4622      	mov	r2, r4
 8008548:	210a      	movs	r1, #10
 800854a:	4628      	mov	r0, r5
 800854c:	f000 f870 	bl	8008630 <__swbuf_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d011      	beq.n	8008578 <_puts_r+0x84>
 8008554:	250a      	movs	r5, #10
 8008556:	e011      	b.n	800857c <_puts_r+0x88>
 8008558:	4b1b      	ldr	r3, [pc, #108]	; (80085c8 <_puts_r+0xd4>)
 800855a:	429c      	cmp	r4, r3
 800855c:	d101      	bne.n	8008562 <_puts_r+0x6e>
 800855e:	68ac      	ldr	r4, [r5, #8]
 8008560:	e7da      	b.n	8008518 <_puts_r+0x24>
 8008562:	4b1a      	ldr	r3, [pc, #104]	; (80085cc <_puts_r+0xd8>)
 8008564:	429c      	cmp	r4, r3
 8008566:	bf08      	it	eq
 8008568:	68ec      	ldreq	r4, [r5, #12]
 800856a:	e7d5      	b.n	8008518 <_puts_r+0x24>
 800856c:	4621      	mov	r1, r4
 800856e:	4628      	mov	r0, r5
 8008570:	f000 f8b0 	bl	80086d4 <__swsetup_r>
 8008574:	2800      	cmp	r0, #0
 8008576:	d0dd      	beq.n	8008534 <_puts_r+0x40>
 8008578:	f04f 35ff 	mov.w	r5, #4294967295
 800857c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800857e:	07da      	lsls	r2, r3, #31
 8008580:	d405      	bmi.n	800858e <_puts_r+0x9a>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	059b      	lsls	r3, r3, #22
 8008586:	d402      	bmi.n	800858e <_puts_r+0x9a>
 8008588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858a:	f000 faca 	bl	8008b22 <__retarget_lock_release_recursive>
 800858e:	4628      	mov	r0, r5
 8008590:	bd70      	pop	{r4, r5, r6, pc}
 8008592:	2b00      	cmp	r3, #0
 8008594:	da04      	bge.n	80085a0 <_puts_r+0xac>
 8008596:	69a2      	ldr	r2, [r4, #24]
 8008598:	429a      	cmp	r2, r3
 800859a:	dc06      	bgt.n	80085aa <_puts_r+0xb6>
 800859c:	290a      	cmp	r1, #10
 800859e:	d004      	beq.n	80085aa <_puts_r+0xb6>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	6022      	str	r2, [r4, #0]
 80085a6:	7019      	strb	r1, [r3, #0]
 80085a8:	e7c5      	b.n	8008536 <_puts_r+0x42>
 80085aa:	4622      	mov	r2, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	f000 f83f 	bl	8008630 <__swbuf_r>
 80085b2:	3001      	adds	r0, #1
 80085b4:	d1bf      	bne.n	8008536 <_puts_r+0x42>
 80085b6:	e7df      	b.n	8008578 <_puts_r+0x84>
 80085b8:	250a      	movs	r5, #10
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	6022      	str	r2, [r4, #0]
 80085c0:	701d      	strb	r5, [r3, #0]
 80085c2:	e7db      	b.n	800857c <_puts_r+0x88>
 80085c4:	0800b4d4 	.word	0x0800b4d4
 80085c8:	0800b4f4 	.word	0x0800b4f4
 80085cc:	0800b4b4 	.word	0x0800b4b4

080085d0 <puts>:
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <puts+0xc>)
 80085d2:	4601      	mov	r1, r0
 80085d4:	6818      	ldr	r0, [r3, #0]
 80085d6:	f7ff bf8d 	b.w	80084f4 <_puts_r>
 80085da:	bf00      	nop
 80085dc:	20000058 	.word	0x20000058

080085e0 <siprintf>:
 80085e0:	b40e      	push	{r1, r2, r3}
 80085e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085e6:	b500      	push	{lr}
 80085e8:	b09c      	sub	sp, #112	; 0x70
 80085ea:	ab1d      	add	r3, sp, #116	; 0x74
 80085ec:	9002      	str	r0, [sp, #8]
 80085ee:	9006      	str	r0, [sp, #24]
 80085f0:	9107      	str	r1, [sp, #28]
 80085f2:	9104      	str	r1, [sp, #16]
 80085f4:	4808      	ldr	r0, [pc, #32]	; (8008618 <siprintf+0x38>)
 80085f6:	4909      	ldr	r1, [pc, #36]	; (800861c <siprintf+0x3c>)
 80085f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085fc:	9105      	str	r1, [sp, #20]
 80085fe:	6800      	ldr	r0, [r0, #0]
 8008600:	a902      	add	r1, sp, #8
 8008602:	9301      	str	r3, [sp, #4]
 8008604:	f000 fbf4 	bl	8008df0 <_svfiprintf_r>
 8008608:	2200      	movs	r2, #0
 800860a:	9b02      	ldr	r3, [sp, #8]
 800860c:	701a      	strb	r2, [r3, #0]
 800860e:	b01c      	add	sp, #112	; 0x70
 8008610:	f85d eb04 	ldr.w	lr, [sp], #4
 8008614:	b003      	add	sp, #12
 8008616:	4770      	bx	lr
 8008618:	20000058 	.word	0x20000058
 800861c:	ffff0208 	.word	0xffff0208

08008620 <strcpy>:
 8008620:	4603      	mov	r3, r0
 8008622:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008626:	f803 2b01 	strb.w	r2, [r3], #1
 800862a:	2a00      	cmp	r2, #0
 800862c:	d1f9      	bne.n	8008622 <strcpy+0x2>
 800862e:	4770      	bx	lr

08008630 <__swbuf_r>:
 8008630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008632:	460e      	mov	r6, r1
 8008634:	4614      	mov	r4, r2
 8008636:	4605      	mov	r5, r0
 8008638:	b118      	cbz	r0, 8008642 <__swbuf_r+0x12>
 800863a:	6983      	ldr	r3, [r0, #24]
 800863c:	b90b      	cbnz	r3, 8008642 <__swbuf_r+0x12>
 800863e:	f000 f9d1 	bl	80089e4 <__sinit>
 8008642:	4b21      	ldr	r3, [pc, #132]	; (80086c8 <__swbuf_r+0x98>)
 8008644:	429c      	cmp	r4, r3
 8008646:	d12b      	bne.n	80086a0 <__swbuf_r+0x70>
 8008648:	686c      	ldr	r4, [r5, #4]
 800864a:	69a3      	ldr	r3, [r4, #24]
 800864c:	60a3      	str	r3, [r4, #8]
 800864e:	89a3      	ldrh	r3, [r4, #12]
 8008650:	071a      	lsls	r2, r3, #28
 8008652:	d52f      	bpl.n	80086b4 <__swbuf_r+0x84>
 8008654:	6923      	ldr	r3, [r4, #16]
 8008656:	b36b      	cbz	r3, 80086b4 <__swbuf_r+0x84>
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	6820      	ldr	r0, [r4, #0]
 800865c:	b2f6      	uxtb	r6, r6
 800865e:	1ac0      	subs	r0, r0, r3
 8008660:	6963      	ldr	r3, [r4, #20]
 8008662:	4637      	mov	r7, r6
 8008664:	4283      	cmp	r3, r0
 8008666:	dc04      	bgt.n	8008672 <__swbuf_r+0x42>
 8008668:	4621      	mov	r1, r4
 800866a:	4628      	mov	r0, r5
 800866c:	f000 f926 	bl	80088bc <_fflush_r>
 8008670:	bb30      	cbnz	r0, 80086c0 <__swbuf_r+0x90>
 8008672:	68a3      	ldr	r3, [r4, #8]
 8008674:	3001      	adds	r0, #1
 8008676:	3b01      	subs	r3, #1
 8008678:	60a3      	str	r3, [r4, #8]
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	6022      	str	r2, [r4, #0]
 8008680:	701e      	strb	r6, [r3, #0]
 8008682:	6963      	ldr	r3, [r4, #20]
 8008684:	4283      	cmp	r3, r0
 8008686:	d004      	beq.n	8008692 <__swbuf_r+0x62>
 8008688:	89a3      	ldrh	r3, [r4, #12]
 800868a:	07db      	lsls	r3, r3, #31
 800868c:	d506      	bpl.n	800869c <__swbuf_r+0x6c>
 800868e:	2e0a      	cmp	r6, #10
 8008690:	d104      	bne.n	800869c <__swbuf_r+0x6c>
 8008692:	4621      	mov	r1, r4
 8008694:	4628      	mov	r0, r5
 8008696:	f000 f911 	bl	80088bc <_fflush_r>
 800869a:	b988      	cbnz	r0, 80086c0 <__swbuf_r+0x90>
 800869c:	4638      	mov	r0, r7
 800869e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086a0:	4b0a      	ldr	r3, [pc, #40]	; (80086cc <__swbuf_r+0x9c>)
 80086a2:	429c      	cmp	r4, r3
 80086a4:	d101      	bne.n	80086aa <__swbuf_r+0x7a>
 80086a6:	68ac      	ldr	r4, [r5, #8]
 80086a8:	e7cf      	b.n	800864a <__swbuf_r+0x1a>
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <__swbuf_r+0xa0>)
 80086ac:	429c      	cmp	r4, r3
 80086ae:	bf08      	it	eq
 80086b0:	68ec      	ldreq	r4, [r5, #12]
 80086b2:	e7ca      	b.n	800864a <__swbuf_r+0x1a>
 80086b4:	4621      	mov	r1, r4
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 f80c 	bl	80086d4 <__swsetup_r>
 80086bc:	2800      	cmp	r0, #0
 80086be:	d0cb      	beq.n	8008658 <__swbuf_r+0x28>
 80086c0:	f04f 37ff 	mov.w	r7, #4294967295
 80086c4:	e7ea      	b.n	800869c <__swbuf_r+0x6c>
 80086c6:	bf00      	nop
 80086c8:	0800b4d4 	.word	0x0800b4d4
 80086cc:	0800b4f4 	.word	0x0800b4f4
 80086d0:	0800b4b4 	.word	0x0800b4b4

080086d4 <__swsetup_r>:
 80086d4:	4b32      	ldr	r3, [pc, #200]	; (80087a0 <__swsetup_r+0xcc>)
 80086d6:	b570      	push	{r4, r5, r6, lr}
 80086d8:	681d      	ldr	r5, [r3, #0]
 80086da:	4606      	mov	r6, r0
 80086dc:	460c      	mov	r4, r1
 80086de:	b125      	cbz	r5, 80086ea <__swsetup_r+0x16>
 80086e0:	69ab      	ldr	r3, [r5, #24]
 80086e2:	b913      	cbnz	r3, 80086ea <__swsetup_r+0x16>
 80086e4:	4628      	mov	r0, r5
 80086e6:	f000 f97d 	bl	80089e4 <__sinit>
 80086ea:	4b2e      	ldr	r3, [pc, #184]	; (80087a4 <__swsetup_r+0xd0>)
 80086ec:	429c      	cmp	r4, r3
 80086ee:	d10f      	bne.n	8008710 <__swsetup_r+0x3c>
 80086f0:	686c      	ldr	r4, [r5, #4]
 80086f2:	89a3      	ldrh	r3, [r4, #12]
 80086f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f8:	0719      	lsls	r1, r3, #28
 80086fa:	d42c      	bmi.n	8008756 <__swsetup_r+0x82>
 80086fc:	06dd      	lsls	r5, r3, #27
 80086fe:	d411      	bmi.n	8008724 <__swsetup_r+0x50>
 8008700:	2309      	movs	r3, #9
 8008702:	6033      	str	r3, [r6, #0]
 8008704:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008708:	f04f 30ff 	mov.w	r0, #4294967295
 800870c:	81a3      	strh	r3, [r4, #12]
 800870e:	e03e      	b.n	800878e <__swsetup_r+0xba>
 8008710:	4b25      	ldr	r3, [pc, #148]	; (80087a8 <__swsetup_r+0xd4>)
 8008712:	429c      	cmp	r4, r3
 8008714:	d101      	bne.n	800871a <__swsetup_r+0x46>
 8008716:	68ac      	ldr	r4, [r5, #8]
 8008718:	e7eb      	b.n	80086f2 <__swsetup_r+0x1e>
 800871a:	4b24      	ldr	r3, [pc, #144]	; (80087ac <__swsetup_r+0xd8>)
 800871c:	429c      	cmp	r4, r3
 800871e:	bf08      	it	eq
 8008720:	68ec      	ldreq	r4, [r5, #12]
 8008722:	e7e6      	b.n	80086f2 <__swsetup_r+0x1e>
 8008724:	0758      	lsls	r0, r3, #29
 8008726:	d512      	bpl.n	800874e <__swsetup_r+0x7a>
 8008728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800872a:	b141      	cbz	r1, 800873e <__swsetup_r+0x6a>
 800872c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008730:	4299      	cmp	r1, r3
 8008732:	d002      	beq.n	800873a <__swsetup_r+0x66>
 8008734:	4630      	mov	r0, r6
 8008736:	f000 fa59 	bl	8008bec <_free_r>
 800873a:	2300      	movs	r3, #0
 800873c:	6363      	str	r3, [r4, #52]	; 0x34
 800873e:	89a3      	ldrh	r3, [r4, #12]
 8008740:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008744:	81a3      	strh	r3, [r4, #12]
 8008746:	2300      	movs	r3, #0
 8008748:	6063      	str	r3, [r4, #4]
 800874a:	6923      	ldr	r3, [r4, #16]
 800874c:	6023      	str	r3, [r4, #0]
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f043 0308 	orr.w	r3, r3, #8
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	b94b      	cbnz	r3, 800876e <__swsetup_r+0x9a>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008764:	d003      	beq.n	800876e <__swsetup_r+0x9a>
 8008766:	4621      	mov	r1, r4
 8008768:	4630      	mov	r0, r6
 800876a:	f000 f9ff 	bl	8008b6c <__smakebuf_r>
 800876e:	89a0      	ldrh	r0, [r4, #12]
 8008770:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008774:	f010 0301 	ands.w	r3, r0, #1
 8008778:	d00a      	beq.n	8008790 <__swsetup_r+0xbc>
 800877a:	2300      	movs	r3, #0
 800877c:	60a3      	str	r3, [r4, #8]
 800877e:	6963      	ldr	r3, [r4, #20]
 8008780:	425b      	negs	r3, r3
 8008782:	61a3      	str	r3, [r4, #24]
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	b943      	cbnz	r3, 800879a <__swsetup_r+0xc6>
 8008788:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800878c:	d1ba      	bne.n	8008704 <__swsetup_r+0x30>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	0781      	lsls	r1, r0, #30
 8008792:	bf58      	it	pl
 8008794:	6963      	ldrpl	r3, [r4, #20]
 8008796:	60a3      	str	r3, [r4, #8]
 8008798:	e7f4      	b.n	8008784 <__swsetup_r+0xb0>
 800879a:	2000      	movs	r0, #0
 800879c:	e7f7      	b.n	800878e <__swsetup_r+0xba>
 800879e:	bf00      	nop
 80087a0:	20000058 	.word	0x20000058
 80087a4:	0800b4d4 	.word	0x0800b4d4
 80087a8:	0800b4f4 	.word	0x0800b4f4
 80087ac:	0800b4b4 	.word	0x0800b4b4

080087b0 <__sflush_r>:
 80087b0:	898a      	ldrh	r2, [r1, #12]
 80087b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b6:	4605      	mov	r5, r0
 80087b8:	0710      	lsls	r0, r2, #28
 80087ba:	460c      	mov	r4, r1
 80087bc:	d458      	bmi.n	8008870 <__sflush_r+0xc0>
 80087be:	684b      	ldr	r3, [r1, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	dc05      	bgt.n	80087d0 <__sflush_r+0x20>
 80087c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dc02      	bgt.n	80087d0 <__sflush_r+0x20>
 80087ca:	2000      	movs	r0, #0
 80087cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087d2:	2e00      	cmp	r6, #0
 80087d4:	d0f9      	beq.n	80087ca <__sflush_r+0x1a>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087dc:	682f      	ldr	r7, [r5, #0]
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	d032      	beq.n	8008848 <__sflush_r+0x98>
 80087e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087e4:	89a3      	ldrh	r3, [r4, #12]
 80087e6:	075a      	lsls	r2, r3, #29
 80087e8:	d505      	bpl.n	80087f6 <__sflush_r+0x46>
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	1ac0      	subs	r0, r0, r3
 80087ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087f0:	b10b      	cbz	r3, 80087f6 <__sflush_r+0x46>
 80087f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f4:	1ac0      	subs	r0, r0, r3
 80087f6:	2300      	movs	r3, #0
 80087f8:	4602      	mov	r2, r0
 80087fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fc:	4628      	mov	r0, r5
 80087fe:	6a21      	ldr	r1, [r4, #32]
 8008800:	47b0      	blx	r6
 8008802:	1c43      	adds	r3, r0, #1
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	d106      	bne.n	8008816 <__sflush_r+0x66>
 8008808:	6829      	ldr	r1, [r5, #0]
 800880a:	291d      	cmp	r1, #29
 800880c:	d82c      	bhi.n	8008868 <__sflush_r+0xb8>
 800880e:	4a2a      	ldr	r2, [pc, #168]	; (80088b8 <__sflush_r+0x108>)
 8008810:	40ca      	lsrs	r2, r1
 8008812:	07d6      	lsls	r6, r2, #31
 8008814:	d528      	bpl.n	8008868 <__sflush_r+0xb8>
 8008816:	2200      	movs	r2, #0
 8008818:	6062      	str	r2, [r4, #4]
 800881a:	6922      	ldr	r2, [r4, #16]
 800881c:	04d9      	lsls	r1, r3, #19
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	d504      	bpl.n	800882c <__sflush_r+0x7c>
 8008822:	1c42      	adds	r2, r0, #1
 8008824:	d101      	bne.n	800882a <__sflush_r+0x7a>
 8008826:	682b      	ldr	r3, [r5, #0]
 8008828:	b903      	cbnz	r3, 800882c <__sflush_r+0x7c>
 800882a:	6560      	str	r0, [r4, #84]	; 0x54
 800882c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800882e:	602f      	str	r7, [r5, #0]
 8008830:	2900      	cmp	r1, #0
 8008832:	d0ca      	beq.n	80087ca <__sflush_r+0x1a>
 8008834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008838:	4299      	cmp	r1, r3
 800883a:	d002      	beq.n	8008842 <__sflush_r+0x92>
 800883c:	4628      	mov	r0, r5
 800883e:	f000 f9d5 	bl	8008bec <_free_r>
 8008842:	2000      	movs	r0, #0
 8008844:	6360      	str	r0, [r4, #52]	; 0x34
 8008846:	e7c1      	b.n	80087cc <__sflush_r+0x1c>
 8008848:	6a21      	ldr	r1, [r4, #32]
 800884a:	2301      	movs	r3, #1
 800884c:	4628      	mov	r0, r5
 800884e:	47b0      	blx	r6
 8008850:	1c41      	adds	r1, r0, #1
 8008852:	d1c7      	bne.n	80087e4 <__sflush_r+0x34>
 8008854:	682b      	ldr	r3, [r5, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d0c4      	beq.n	80087e4 <__sflush_r+0x34>
 800885a:	2b1d      	cmp	r3, #29
 800885c:	d001      	beq.n	8008862 <__sflush_r+0xb2>
 800885e:	2b16      	cmp	r3, #22
 8008860:	d101      	bne.n	8008866 <__sflush_r+0xb6>
 8008862:	602f      	str	r7, [r5, #0]
 8008864:	e7b1      	b.n	80087ca <__sflush_r+0x1a>
 8008866:	89a3      	ldrh	r3, [r4, #12]
 8008868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800886c:	81a3      	strh	r3, [r4, #12]
 800886e:	e7ad      	b.n	80087cc <__sflush_r+0x1c>
 8008870:	690f      	ldr	r7, [r1, #16]
 8008872:	2f00      	cmp	r7, #0
 8008874:	d0a9      	beq.n	80087ca <__sflush_r+0x1a>
 8008876:	0793      	lsls	r3, r2, #30
 8008878:	bf18      	it	ne
 800887a:	2300      	movne	r3, #0
 800887c:	680e      	ldr	r6, [r1, #0]
 800887e:	bf08      	it	eq
 8008880:	694b      	ldreq	r3, [r1, #20]
 8008882:	eba6 0807 	sub.w	r8, r6, r7
 8008886:	600f      	str	r7, [r1, #0]
 8008888:	608b      	str	r3, [r1, #8]
 800888a:	f1b8 0f00 	cmp.w	r8, #0
 800888e:	dd9c      	ble.n	80087ca <__sflush_r+0x1a>
 8008890:	4643      	mov	r3, r8
 8008892:	463a      	mov	r2, r7
 8008894:	4628      	mov	r0, r5
 8008896:	6a21      	ldr	r1, [r4, #32]
 8008898:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800889a:	47b0      	blx	r6
 800889c:	2800      	cmp	r0, #0
 800889e:	dc06      	bgt.n	80088ae <__sflush_r+0xfe>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088aa:	81a3      	strh	r3, [r4, #12]
 80088ac:	e78e      	b.n	80087cc <__sflush_r+0x1c>
 80088ae:	4407      	add	r7, r0
 80088b0:	eba8 0800 	sub.w	r8, r8, r0
 80088b4:	e7e9      	b.n	800888a <__sflush_r+0xda>
 80088b6:	bf00      	nop
 80088b8:	20400001 	.word	0x20400001

080088bc <_fflush_r>:
 80088bc:	b538      	push	{r3, r4, r5, lr}
 80088be:	690b      	ldr	r3, [r1, #16]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b913      	cbnz	r3, 80088cc <_fflush_r+0x10>
 80088c6:	2500      	movs	r5, #0
 80088c8:	4628      	mov	r0, r5
 80088ca:	bd38      	pop	{r3, r4, r5, pc}
 80088cc:	b118      	cbz	r0, 80088d6 <_fflush_r+0x1a>
 80088ce:	6983      	ldr	r3, [r0, #24]
 80088d0:	b90b      	cbnz	r3, 80088d6 <_fflush_r+0x1a>
 80088d2:	f000 f887 	bl	80089e4 <__sinit>
 80088d6:	4b14      	ldr	r3, [pc, #80]	; (8008928 <_fflush_r+0x6c>)
 80088d8:	429c      	cmp	r4, r3
 80088da:	d11b      	bne.n	8008914 <_fflush_r+0x58>
 80088dc:	686c      	ldr	r4, [r5, #4]
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0ef      	beq.n	80088c6 <_fflush_r+0xa>
 80088e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088e8:	07d0      	lsls	r0, r2, #31
 80088ea:	d404      	bmi.n	80088f6 <_fflush_r+0x3a>
 80088ec:	0599      	lsls	r1, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_fflush_r+0x3a>
 80088f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088f2:	f000 f915 	bl	8008b20 <__retarget_lock_acquire_recursive>
 80088f6:	4628      	mov	r0, r5
 80088f8:	4621      	mov	r1, r4
 80088fa:	f7ff ff59 	bl	80087b0 <__sflush_r>
 80088fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008900:	4605      	mov	r5, r0
 8008902:	07da      	lsls	r2, r3, #31
 8008904:	d4e0      	bmi.n	80088c8 <_fflush_r+0xc>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	059b      	lsls	r3, r3, #22
 800890a:	d4dd      	bmi.n	80088c8 <_fflush_r+0xc>
 800890c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800890e:	f000 f908 	bl	8008b22 <__retarget_lock_release_recursive>
 8008912:	e7d9      	b.n	80088c8 <_fflush_r+0xc>
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <_fflush_r+0x70>)
 8008916:	429c      	cmp	r4, r3
 8008918:	d101      	bne.n	800891e <_fflush_r+0x62>
 800891a:	68ac      	ldr	r4, [r5, #8]
 800891c:	e7df      	b.n	80088de <_fflush_r+0x22>
 800891e:	4b04      	ldr	r3, [pc, #16]	; (8008930 <_fflush_r+0x74>)
 8008920:	429c      	cmp	r4, r3
 8008922:	bf08      	it	eq
 8008924:	68ec      	ldreq	r4, [r5, #12]
 8008926:	e7da      	b.n	80088de <_fflush_r+0x22>
 8008928:	0800b4d4 	.word	0x0800b4d4
 800892c:	0800b4f4 	.word	0x0800b4f4
 8008930:	0800b4b4 	.word	0x0800b4b4

08008934 <std>:
 8008934:	2300      	movs	r3, #0
 8008936:	b510      	push	{r4, lr}
 8008938:	4604      	mov	r4, r0
 800893a:	e9c0 3300 	strd	r3, r3, [r0]
 800893e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008942:	6083      	str	r3, [r0, #8]
 8008944:	8181      	strh	r1, [r0, #12]
 8008946:	6643      	str	r3, [r0, #100]	; 0x64
 8008948:	81c2      	strh	r2, [r0, #14]
 800894a:	6183      	str	r3, [r0, #24]
 800894c:	4619      	mov	r1, r3
 800894e:	2208      	movs	r2, #8
 8008950:	305c      	adds	r0, #92	; 0x5c
 8008952:	f7ff fdaf 	bl	80084b4 <memset>
 8008956:	4b05      	ldr	r3, [pc, #20]	; (800896c <std+0x38>)
 8008958:	6224      	str	r4, [r4, #32]
 800895a:	6263      	str	r3, [r4, #36]	; 0x24
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <std+0x3c>)
 800895e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008960:	4b04      	ldr	r3, [pc, #16]	; (8008974 <std+0x40>)
 8008962:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008964:	4b04      	ldr	r3, [pc, #16]	; (8008978 <std+0x44>)
 8008966:	6323      	str	r3, [r4, #48]	; 0x30
 8008968:	bd10      	pop	{r4, pc}
 800896a:	bf00      	nop
 800896c:	080095ed 	.word	0x080095ed
 8008970:	0800960f 	.word	0x0800960f
 8008974:	08009647 	.word	0x08009647
 8008978:	0800966b 	.word	0x0800966b

0800897c <_cleanup_r>:
 800897c:	4901      	ldr	r1, [pc, #4]	; (8008984 <_cleanup_r+0x8>)
 800897e:	f000 b8af 	b.w	8008ae0 <_fwalk_reent>
 8008982:	bf00      	nop
 8008984:	080088bd 	.word	0x080088bd

08008988 <__sfmoreglue>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	2568      	movs	r5, #104	; 0x68
 800898c:	1e4a      	subs	r2, r1, #1
 800898e:	4355      	muls	r5, r2
 8008990:	460e      	mov	r6, r1
 8008992:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008996:	f000 f975 	bl	8008c84 <_malloc_r>
 800899a:	4604      	mov	r4, r0
 800899c:	b140      	cbz	r0, 80089b0 <__sfmoreglue+0x28>
 800899e:	2100      	movs	r1, #0
 80089a0:	e9c0 1600 	strd	r1, r6, [r0]
 80089a4:	300c      	adds	r0, #12
 80089a6:	60a0      	str	r0, [r4, #8]
 80089a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80089ac:	f7ff fd82 	bl	80084b4 <memset>
 80089b0:	4620      	mov	r0, r4
 80089b2:	bd70      	pop	{r4, r5, r6, pc}

080089b4 <__sfp_lock_acquire>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__sfp_lock_acquire+0x8>)
 80089b6:	f000 b8b3 	b.w	8008b20 <__retarget_lock_acquire_recursive>
 80089ba:	bf00      	nop
 80089bc:	200019d8 	.word	0x200019d8

080089c0 <__sfp_lock_release>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__sfp_lock_release+0x8>)
 80089c2:	f000 b8ae 	b.w	8008b22 <__retarget_lock_release_recursive>
 80089c6:	bf00      	nop
 80089c8:	200019d8 	.word	0x200019d8

080089cc <__sinit_lock_acquire>:
 80089cc:	4801      	ldr	r0, [pc, #4]	; (80089d4 <__sinit_lock_acquire+0x8>)
 80089ce:	f000 b8a7 	b.w	8008b20 <__retarget_lock_acquire_recursive>
 80089d2:	bf00      	nop
 80089d4:	200019d3 	.word	0x200019d3

080089d8 <__sinit_lock_release>:
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <__sinit_lock_release+0x8>)
 80089da:	f000 b8a2 	b.w	8008b22 <__retarget_lock_release_recursive>
 80089de:	bf00      	nop
 80089e0:	200019d3 	.word	0x200019d3

080089e4 <__sinit>:
 80089e4:	b510      	push	{r4, lr}
 80089e6:	4604      	mov	r4, r0
 80089e8:	f7ff fff0 	bl	80089cc <__sinit_lock_acquire>
 80089ec:	69a3      	ldr	r3, [r4, #24]
 80089ee:	b11b      	cbz	r3, 80089f8 <__sinit+0x14>
 80089f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f4:	f7ff bff0 	b.w	80089d8 <__sinit_lock_release>
 80089f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80089fc:	6523      	str	r3, [r4, #80]	; 0x50
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <__sinit+0x68>)
 8008a00:	4a13      	ldr	r2, [pc, #76]	; (8008a50 <__sinit+0x6c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	62a2      	str	r2, [r4, #40]	; 0x28
 8008a06:	42a3      	cmp	r3, r4
 8008a08:	bf08      	it	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	bf08      	it	eq
 8008a10:	61a3      	streq	r3, [r4, #24]
 8008a12:	f000 f81f 	bl	8008a54 <__sfp>
 8008a16:	6060      	str	r0, [r4, #4]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 f81b 	bl	8008a54 <__sfp>
 8008a1e:	60a0      	str	r0, [r4, #8]
 8008a20:	4620      	mov	r0, r4
 8008a22:	f000 f817 	bl	8008a54 <__sfp>
 8008a26:	2200      	movs	r2, #0
 8008a28:	2104      	movs	r1, #4
 8008a2a:	60e0      	str	r0, [r4, #12]
 8008a2c:	6860      	ldr	r0, [r4, #4]
 8008a2e:	f7ff ff81 	bl	8008934 <std>
 8008a32:	2201      	movs	r2, #1
 8008a34:	2109      	movs	r1, #9
 8008a36:	68a0      	ldr	r0, [r4, #8]
 8008a38:	f7ff ff7c 	bl	8008934 <std>
 8008a3c:	2202      	movs	r2, #2
 8008a3e:	2112      	movs	r1, #18
 8008a40:	68e0      	ldr	r0, [r4, #12]
 8008a42:	f7ff ff77 	bl	8008934 <std>
 8008a46:	2301      	movs	r3, #1
 8008a48:	61a3      	str	r3, [r4, #24]
 8008a4a:	e7d1      	b.n	80089f0 <__sinit+0xc>
 8008a4c:	0800b4b0 	.word	0x0800b4b0
 8008a50:	0800897d 	.word	0x0800897d

08008a54 <__sfp>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	4607      	mov	r7, r0
 8008a58:	f7ff ffac 	bl	80089b4 <__sfp_lock_acquire>
 8008a5c:	4b1e      	ldr	r3, [pc, #120]	; (8008ad8 <__sfp+0x84>)
 8008a5e:	681e      	ldr	r6, [r3, #0]
 8008a60:	69b3      	ldr	r3, [r6, #24]
 8008a62:	b913      	cbnz	r3, 8008a6a <__sfp+0x16>
 8008a64:	4630      	mov	r0, r6
 8008a66:	f7ff ffbd 	bl	80089e4 <__sinit>
 8008a6a:	3648      	adds	r6, #72	; 0x48
 8008a6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008a70:	3b01      	subs	r3, #1
 8008a72:	d503      	bpl.n	8008a7c <__sfp+0x28>
 8008a74:	6833      	ldr	r3, [r6, #0]
 8008a76:	b30b      	cbz	r3, 8008abc <__sfp+0x68>
 8008a78:	6836      	ldr	r6, [r6, #0]
 8008a7a:	e7f7      	b.n	8008a6c <__sfp+0x18>
 8008a7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a80:	b9d5      	cbnz	r5, 8008ab8 <__sfp+0x64>
 8008a82:	4b16      	ldr	r3, [pc, #88]	; (8008adc <__sfp+0x88>)
 8008a84:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a88:	60e3      	str	r3, [r4, #12]
 8008a8a:	6665      	str	r5, [r4, #100]	; 0x64
 8008a8c:	f000 f847 	bl	8008b1e <__retarget_lock_init_recursive>
 8008a90:	f7ff ff96 	bl	80089c0 <__sfp_lock_release>
 8008a94:	2208      	movs	r2, #8
 8008a96:	4629      	mov	r1, r5
 8008a98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008aa0:	6025      	str	r5, [r4, #0]
 8008aa2:	61a5      	str	r5, [r4, #24]
 8008aa4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008aa8:	f7ff fd04 	bl	80084b4 <memset>
 8008aac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ab0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab8:	3468      	adds	r4, #104	; 0x68
 8008aba:	e7d9      	b.n	8008a70 <__sfp+0x1c>
 8008abc:	2104      	movs	r1, #4
 8008abe:	4638      	mov	r0, r7
 8008ac0:	f7ff ff62 	bl	8008988 <__sfmoreglue>
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	6030      	str	r0, [r6, #0]
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d1d5      	bne.n	8008a78 <__sfp+0x24>
 8008acc:	f7ff ff78 	bl	80089c0 <__sfp_lock_release>
 8008ad0:	230c      	movs	r3, #12
 8008ad2:	603b      	str	r3, [r7, #0]
 8008ad4:	e7ee      	b.n	8008ab4 <__sfp+0x60>
 8008ad6:	bf00      	nop
 8008ad8:	0800b4b0 	.word	0x0800b4b0
 8008adc:	ffff0001 	.word	0xffff0001

08008ae0 <_fwalk_reent>:
 8008ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	4688      	mov	r8, r1
 8008ae8:	2700      	movs	r7, #0
 8008aea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008aee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008af2:	f1b9 0901 	subs.w	r9, r9, #1
 8008af6:	d505      	bpl.n	8008b04 <_fwalk_reent+0x24>
 8008af8:	6824      	ldr	r4, [r4, #0]
 8008afa:	2c00      	cmp	r4, #0
 8008afc:	d1f7      	bne.n	8008aee <_fwalk_reent+0xe>
 8008afe:	4638      	mov	r0, r7
 8008b00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b04:	89ab      	ldrh	r3, [r5, #12]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d907      	bls.n	8008b1a <_fwalk_reent+0x3a>
 8008b0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b0e:	3301      	adds	r3, #1
 8008b10:	d003      	beq.n	8008b1a <_fwalk_reent+0x3a>
 8008b12:	4629      	mov	r1, r5
 8008b14:	4630      	mov	r0, r6
 8008b16:	47c0      	blx	r8
 8008b18:	4307      	orrs	r7, r0
 8008b1a:	3568      	adds	r5, #104	; 0x68
 8008b1c:	e7e9      	b.n	8008af2 <_fwalk_reent+0x12>

08008b1e <__retarget_lock_init_recursive>:
 8008b1e:	4770      	bx	lr

08008b20 <__retarget_lock_acquire_recursive>:
 8008b20:	4770      	bx	lr

08008b22 <__retarget_lock_release_recursive>:
 8008b22:	4770      	bx	lr

08008b24 <__swhatbuf_r>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	460e      	mov	r6, r1
 8008b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b2c:	4614      	mov	r4, r2
 8008b2e:	2900      	cmp	r1, #0
 8008b30:	461d      	mov	r5, r3
 8008b32:	b096      	sub	sp, #88	; 0x58
 8008b34:	da07      	bge.n	8008b46 <__swhatbuf_r+0x22>
 8008b36:	2300      	movs	r3, #0
 8008b38:	602b      	str	r3, [r5, #0]
 8008b3a:	89b3      	ldrh	r3, [r6, #12]
 8008b3c:	061a      	lsls	r2, r3, #24
 8008b3e:	d410      	bmi.n	8008b62 <__swhatbuf_r+0x3e>
 8008b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b44:	e00e      	b.n	8008b64 <__swhatbuf_r+0x40>
 8008b46:	466a      	mov	r2, sp
 8008b48:	f000 fdb6 	bl	80096b8 <_fstat_r>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	dbf2      	blt.n	8008b36 <__swhatbuf_r+0x12>
 8008b50:	9a01      	ldr	r2, [sp, #4]
 8008b52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008b56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008b5a:	425a      	negs	r2, r3
 8008b5c:	415a      	adcs	r2, r3
 8008b5e:	602a      	str	r2, [r5, #0]
 8008b60:	e7ee      	b.n	8008b40 <__swhatbuf_r+0x1c>
 8008b62:	2340      	movs	r3, #64	; 0x40
 8008b64:	2000      	movs	r0, #0
 8008b66:	6023      	str	r3, [r4, #0]
 8008b68:	b016      	add	sp, #88	; 0x58
 8008b6a:	bd70      	pop	{r4, r5, r6, pc}

08008b6c <__smakebuf_r>:
 8008b6c:	898b      	ldrh	r3, [r1, #12]
 8008b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b70:	079d      	lsls	r5, r3, #30
 8008b72:	4606      	mov	r6, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	d507      	bpl.n	8008b88 <__smakebuf_r+0x1c>
 8008b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	6123      	str	r3, [r4, #16]
 8008b80:	2301      	movs	r3, #1
 8008b82:	6163      	str	r3, [r4, #20]
 8008b84:	b002      	add	sp, #8
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	466a      	mov	r2, sp
 8008b8a:	ab01      	add	r3, sp, #4
 8008b8c:	f7ff ffca 	bl	8008b24 <__swhatbuf_r>
 8008b90:	9900      	ldr	r1, [sp, #0]
 8008b92:	4605      	mov	r5, r0
 8008b94:	4630      	mov	r0, r6
 8008b96:	f000 f875 	bl	8008c84 <_malloc_r>
 8008b9a:	b948      	cbnz	r0, 8008bb0 <__smakebuf_r+0x44>
 8008b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba0:	059a      	lsls	r2, r3, #22
 8008ba2:	d4ef      	bmi.n	8008b84 <__smakebuf_r+0x18>
 8008ba4:	f023 0303 	bic.w	r3, r3, #3
 8008ba8:	f043 0302 	orr.w	r3, r3, #2
 8008bac:	81a3      	strh	r3, [r4, #12]
 8008bae:	e7e3      	b.n	8008b78 <__smakebuf_r+0xc>
 8008bb0:	4b0d      	ldr	r3, [pc, #52]	; (8008be8 <__smakebuf_r+0x7c>)
 8008bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	6020      	str	r0, [r4, #0]
 8008bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbc:	81a3      	strh	r3, [r4, #12]
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	6120      	str	r0, [r4, #16]
 8008bc2:	6163      	str	r3, [r4, #20]
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	b15b      	cbz	r3, 8008be0 <__smakebuf_r+0x74>
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bce:	f000 fd85 	bl	80096dc <_isatty_r>
 8008bd2:	b128      	cbz	r0, 8008be0 <__smakebuf_r+0x74>
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	f023 0303 	bic.w	r3, r3, #3
 8008bda:	f043 0301 	orr.w	r3, r3, #1
 8008bde:	81a3      	strh	r3, [r4, #12]
 8008be0:	89a0      	ldrh	r0, [r4, #12]
 8008be2:	4305      	orrs	r5, r0
 8008be4:	81a5      	strh	r5, [r4, #12]
 8008be6:	e7cd      	b.n	8008b84 <__smakebuf_r+0x18>
 8008be8:	0800897d 	.word	0x0800897d

08008bec <_free_r>:
 8008bec:	b538      	push	{r3, r4, r5, lr}
 8008bee:	4605      	mov	r5, r0
 8008bf0:	2900      	cmp	r1, #0
 8008bf2:	d043      	beq.n	8008c7c <_free_r+0x90>
 8008bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bf8:	1f0c      	subs	r4, r1, #4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	bfb8      	it	lt
 8008bfe:	18e4      	addlt	r4, r4, r3
 8008c00:	f000 fdb6 	bl	8009770 <__malloc_lock>
 8008c04:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <_free_r+0x94>)
 8008c06:	6813      	ldr	r3, [r2, #0]
 8008c08:	4610      	mov	r0, r2
 8008c0a:	b933      	cbnz	r3, 8008c1a <_free_r+0x2e>
 8008c0c:	6063      	str	r3, [r4, #4]
 8008c0e:	6014      	str	r4, [r2, #0]
 8008c10:	4628      	mov	r0, r5
 8008c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c16:	f000 bdb1 	b.w	800977c <__malloc_unlock>
 8008c1a:	42a3      	cmp	r3, r4
 8008c1c:	d90a      	bls.n	8008c34 <_free_r+0x48>
 8008c1e:	6821      	ldr	r1, [r4, #0]
 8008c20:	1862      	adds	r2, r4, r1
 8008c22:	4293      	cmp	r3, r2
 8008c24:	bf01      	itttt	eq
 8008c26:	681a      	ldreq	r2, [r3, #0]
 8008c28:	685b      	ldreq	r3, [r3, #4]
 8008c2a:	1852      	addeq	r2, r2, r1
 8008c2c:	6022      	streq	r2, [r4, #0]
 8008c2e:	6063      	str	r3, [r4, #4]
 8008c30:	6004      	str	r4, [r0, #0]
 8008c32:	e7ed      	b.n	8008c10 <_free_r+0x24>
 8008c34:	461a      	mov	r2, r3
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	b10b      	cbz	r3, 8008c3e <_free_r+0x52>
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	d9fa      	bls.n	8008c34 <_free_r+0x48>
 8008c3e:	6811      	ldr	r1, [r2, #0]
 8008c40:	1850      	adds	r0, r2, r1
 8008c42:	42a0      	cmp	r0, r4
 8008c44:	d10b      	bne.n	8008c5e <_free_r+0x72>
 8008c46:	6820      	ldr	r0, [r4, #0]
 8008c48:	4401      	add	r1, r0
 8008c4a:	1850      	adds	r0, r2, r1
 8008c4c:	4283      	cmp	r3, r0
 8008c4e:	6011      	str	r1, [r2, #0]
 8008c50:	d1de      	bne.n	8008c10 <_free_r+0x24>
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	4401      	add	r1, r0
 8008c58:	6011      	str	r1, [r2, #0]
 8008c5a:	6053      	str	r3, [r2, #4]
 8008c5c:	e7d8      	b.n	8008c10 <_free_r+0x24>
 8008c5e:	d902      	bls.n	8008c66 <_free_r+0x7a>
 8008c60:	230c      	movs	r3, #12
 8008c62:	602b      	str	r3, [r5, #0]
 8008c64:	e7d4      	b.n	8008c10 <_free_r+0x24>
 8008c66:	6820      	ldr	r0, [r4, #0]
 8008c68:	1821      	adds	r1, r4, r0
 8008c6a:	428b      	cmp	r3, r1
 8008c6c:	bf01      	itttt	eq
 8008c6e:	6819      	ldreq	r1, [r3, #0]
 8008c70:	685b      	ldreq	r3, [r3, #4]
 8008c72:	1809      	addeq	r1, r1, r0
 8008c74:	6021      	streq	r1, [r4, #0]
 8008c76:	6063      	str	r3, [r4, #4]
 8008c78:	6054      	str	r4, [r2, #4]
 8008c7a:	e7c9      	b.n	8008c10 <_free_r+0x24>
 8008c7c:	bd38      	pop	{r3, r4, r5, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000378 	.word	0x20000378

08008c84 <_malloc_r>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	1ccd      	adds	r5, r1, #3
 8008c88:	f025 0503 	bic.w	r5, r5, #3
 8008c8c:	3508      	adds	r5, #8
 8008c8e:	2d0c      	cmp	r5, #12
 8008c90:	bf38      	it	cc
 8008c92:	250c      	movcc	r5, #12
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	4606      	mov	r6, r0
 8008c98:	db01      	blt.n	8008c9e <_malloc_r+0x1a>
 8008c9a:	42a9      	cmp	r1, r5
 8008c9c:	d903      	bls.n	8008ca6 <_malloc_r+0x22>
 8008c9e:	230c      	movs	r3, #12
 8008ca0:	6033      	str	r3, [r6, #0]
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ca6:	f000 fd63 	bl	8009770 <__malloc_lock>
 8008caa:	4921      	ldr	r1, [pc, #132]	; (8008d30 <_malloc_r+0xac>)
 8008cac:	680a      	ldr	r2, [r1, #0]
 8008cae:	4614      	mov	r4, r2
 8008cb0:	b99c      	cbnz	r4, 8008cda <_malloc_r+0x56>
 8008cb2:	4f20      	ldr	r7, [pc, #128]	; (8008d34 <_malloc_r+0xb0>)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	b923      	cbnz	r3, 8008cc2 <_malloc_r+0x3e>
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f000 fc86 	bl	80095cc <_sbrk_r>
 8008cc0:	6038      	str	r0, [r7, #0]
 8008cc2:	4629      	mov	r1, r5
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f000 fc81 	bl	80095cc <_sbrk_r>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d123      	bne.n	8008d16 <_malloc_r+0x92>
 8008cce:	230c      	movs	r3, #12
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	6033      	str	r3, [r6, #0]
 8008cd4:	f000 fd52 	bl	800977c <__malloc_unlock>
 8008cd8:	e7e3      	b.n	8008ca2 <_malloc_r+0x1e>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	1b5b      	subs	r3, r3, r5
 8008cde:	d417      	bmi.n	8008d10 <_malloc_r+0x8c>
 8008ce0:	2b0b      	cmp	r3, #11
 8008ce2:	d903      	bls.n	8008cec <_malloc_r+0x68>
 8008ce4:	6023      	str	r3, [r4, #0]
 8008ce6:	441c      	add	r4, r3
 8008ce8:	6025      	str	r5, [r4, #0]
 8008cea:	e004      	b.n	8008cf6 <_malloc_r+0x72>
 8008cec:	6863      	ldr	r3, [r4, #4]
 8008cee:	42a2      	cmp	r2, r4
 8008cf0:	bf0c      	ite	eq
 8008cf2:	600b      	streq	r3, [r1, #0]
 8008cf4:	6053      	strne	r3, [r2, #4]
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	f000 fd40 	bl	800977c <__malloc_unlock>
 8008cfc:	f104 000b 	add.w	r0, r4, #11
 8008d00:	1d23      	adds	r3, r4, #4
 8008d02:	f020 0007 	bic.w	r0, r0, #7
 8008d06:	1ac2      	subs	r2, r0, r3
 8008d08:	d0cc      	beq.n	8008ca4 <_malloc_r+0x20>
 8008d0a:	1a1b      	subs	r3, r3, r0
 8008d0c:	50a3      	str	r3, [r4, r2]
 8008d0e:	e7c9      	b.n	8008ca4 <_malloc_r+0x20>
 8008d10:	4622      	mov	r2, r4
 8008d12:	6864      	ldr	r4, [r4, #4]
 8008d14:	e7cc      	b.n	8008cb0 <_malloc_r+0x2c>
 8008d16:	1cc4      	adds	r4, r0, #3
 8008d18:	f024 0403 	bic.w	r4, r4, #3
 8008d1c:	42a0      	cmp	r0, r4
 8008d1e:	d0e3      	beq.n	8008ce8 <_malloc_r+0x64>
 8008d20:	1a21      	subs	r1, r4, r0
 8008d22:	4630      	mov	r0, r6
 8008d24:	f000 fc52 	bl	80095cc <_sbrk_r>
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d1dd      	bne.n	8008ce8 <_malloc_r+0x64>
 8008d2c:	e7cf      	b.n	8008cce <_malloc_r+0x4a>
 8008d2e:	bf00      	nop
 8008d30:	20000378 	.word	0x20000378
 8008d34:	2000037c 	.word	0x2000037c

08008d38 <__ssputs_r>:
 8008d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d3c:	688e      	ldr	r6, [r1, #8]
 8008d3e:	4682      	mov	sl, r0
 8008d40:	429e      	cmp	r6, r3
 8008d42:	460c      	mov	r4, r1
 8008d44:	4690      	mov	r8, r2
 8008d46:	461f      	mov	r7, r3
 8008d48:	d838      	bhi.n	8008dbc <__ssputs_r+0x84>
 8008d4a:	898a      	ldrh	r2, [r1, #12]
 8008d4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008d50:	d032      	beq.n	8008db8 <__ssputs_r+0x80>
 8008d52:	6825      	ldr	r5, [r4, #0]
 8008d54:	6909      	ldr	r1, [r1, #16]
 8008d56:	3301      	adds	r3, #1
 8008d58:	eba5 0901 	sub.w	r9, r5, r1
 8008d5c:	6965      	ldr	r5, [r4, #20]
 8008d5e:	444b      	add	r3, r9
 8008d60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008d64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d68:	106d      	asrs	r5, r5, #1
 8008d6a:	429d      	cmp	r5, r3
 8008d6c:	bf38      	it	cc
 8008d6e:	461d      	movcc	r5, r3
 8008d70:	0553      	lsls	r3, r2, #21
 8008d72:	d531      	bpl.n	8008dd8 <__ssputs_r+0xa0>
 8008d74:	4629      	mov	r1, r5
 8008d76:	f7ff ff85 	bl	8008c84 <_malloc_r>
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	b950      	cbnz	r0, 8008d94 <__ssputs_r+0x5c>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	f04f 30ff 	mov.w	r0, #4294967295
 8008d84:	f8ca 3000 	str.w	r3, [sl]
 8008d88:	89a3      	ldrh	r3, [r4, #12]
 8008d8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d94:	464a      	mov	r2, r9
 8008d96:	6921      	ldr	r1, [r4, #16]
 8008d98:	f7ff fb7e 	bl	8008498 <memcpy>
 8008d9c:	89a3      	ldrh	r3, [r4, #12]
 8008d9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008da6:	81a3      	strh	r3, [r4, #12]
 8008da8:	6126      	str	r6, [r4, #16]
 8008daa:	444e      	add	r6, r9
 8008dac:	6026      	str	r6, [r4, #0]
 8008dae:	463e      	mov	r6, r7
 8008db0:	6165      	str	r5, [r4, #20]
 8008db2:	eba5 0509 	sub.w	r5, r5, r9
 8008db6:	60a5      	str	r5, [r4, #8]
 8008db8:	42be      	cmp	r6, r7
 8008dba:	d900      	bls.n	8008dbe <__ssputs_r+0x86>
 8008dbc:	463e      	mov	r6, r7
 8008dbe:	4632      	mov	r2, r6
 8008dc0:	4641      	mov	r1, r8
 8008dc2:	6820      	ldr	r0, [r4, #0]
 8008dc4:	f000 fcba 	bl	800973c <memmove>
 8008dc8:	68a3      	ldr	r3, [r4, #8]
 8008dca:	6822      	ldr	r2, [r4, #0]
 8008dcc:	1b9b      	subs	r3, r3, r6
 8008dce:	4432      	add	r2, r6
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	60a3      	str	r3, [r4, #8]
 8008dd4:	6022      	str	r2, [r4, #0]
 8008dd6:	e7db      	b.n	8008d90 <__ssputs_r+0x58>
 8008dd8:	462a      	mov	r2, r5
 8008dda:	f000 fcd5 	bl	8009788 <_realloc_r>
 8008dde:	4606      	mov	r6, r0
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d1e1      	bne.n	8008da8 <__ssputs_r+0x70>
 8008de4:	4650      	mov	r0, sl
 8008de6:	6921      	ldr	r1, [r4, #16]
 8008de8:	f7ff ff00 	bl	8008bec <_free_r>
 8008dec:	e7c7      	b.n	8008d7e <__ssputs_r+0x46>
	...

08008df0 <_svfiprintf_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	4698      	mov	r8, r3
 8008df6:	898b      	ldrh	r3, [r1, #12]
 8008df8:	4607      	mov	r7, r0
 8008dfa:	061b      	lsls	r3, r3, #24
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	4614      	mov	r4, r2
 8008e00:	b09d      	sub	sp, #116	; 0x74
 8008e02:	d50e      	bpl.n	8008e22 <_svfiprintf_r+0x32>
 8008e04:	690b      	ldr	r3, [r1, #16]
 8008e06:	b963      	cbnz	r3, 8008e22 <_svfiprintf_r+0x32>
 8008e08:	2140      	movs	r1, #64	; 0x40
 8008e0a:	f7ff ff3b 	bl	8008c84 <_malloc_r>
 8008e0e:	6028      	str	r0, [r5, #0]
 8008e10:	6128      	str	r0, [r5, #16]
 8008e12:	b920      	cbnz	r0, 8008e1e <_svfiprintf_r+0x2e>
 8008e14:	230c      	movs	r3, #12
 8008e16:	603b      	str	r3, [r7, #0]
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295
 8008e1c:	e0d1      	b.n	8008fc2 <_svfiprintf_r+0x1d2>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	616b      	str	r3, [r5, #20]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9309      	str	r3, [sp, #36]	; 0x24
 8008e26:	2320      	movs	r3, #32
 8008e28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e2c:	2330      	movs	r3, #48	; 0x30
 8008e2e:	f04f 0901 	mov.w	r9, #1
 8008e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008fdc <_svfiprintf_r+0x1ec>
 8008e3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e3e:	4623      	mov	r3, r4
 8008e40:	469a      	mov	sl, r3
 8008e42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e46:	b10a      	cbz	r2, 8008e4c <_svfiprintf_r+0x5c>
 8008e48:	2a25      	cmp	r2, #37	; 0x25
 8008e4a:	d1f9      	bne.n	8008e40 <_svfiprintf_r+0x50>
 8008e4c:	ebba 0b04 	subs.w	fp, sl, r4
 8008e50:	d00b      	beq.n	8008e6a <_svfiprintf_r+0x7a>
 8008e52:	465b      	mov	r3, fp
 8008e54:	4622      	mov	r2, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	4638      	mov	r0, r7
 8008e5a:	f7ff ff6d 	bl	8008d38 <__ssputs_r>
 8008e5e:	3001      	adds	r0, #1
 8008e60:	f000 80aa 	beq.w	8008fb8 <_svfiprintf_r+0x1c8>
 8008e64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e66:	445a      	add	r2, fp
 8008e68:	9209      	str	r2, [sp, #36]	; 0x24
 8008e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 80a2 	beq.w	8008fb8 <_svfiprintf_r+0x1c8>
 8008e74:	2300      	movs	r3, #0
 8008e76:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e7e:	f10a 0a01 	add.w	sl, sl, #1
 8008e82:	9304      	str	r3, [sp, #16]
 8008e84:	9307      	str	r3, [sp, #28]
 8008e86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e8a:	931a      	str	r3, [sp, #104]	; 0x68
 8008e8c:	4654      	mov	r4, sl
 8008e8e:	2205      	movs	r2, #5
 8008e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e94:	4851      	ldr	r0, [pc, #324]	; (8008fdc <_svfiprintf_r+0x1ec>)
 8008e96:	f000 fc43 	bl	8009720 <memchr>
 8008e9a:	9a04      	ldr	r2, [sp, #16]
 8008e9c:	b9d8      	cbnz	r0, 8008ed6 <_svfiprintf_r+0xe6>
 8008e9e:	06d0      	lsls	r0, r2, #27
 8008ea0:	bf44      	itt	mi
 8008ea2:	2320      	movmi	r3, #32
 8008ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ea8:	0711      	lsls	r1, r2, #28
 8008eaa:	bf44      	itt	mi
 8008eac:	232b      	movmi	r3, #43	; 0x2b
 8008eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb6:	2b2a      	cmp	r3, #42	; 0x2a
 8008eb8:	d015      	beq.n	8008ee6 <_svfiprintf_r+0xf6>
 8008eba:	4654      	mov	r4, sl
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f04f 0c0a 	mov.w	ip, #10
 8008ec2:	9a07      	ldr	r2, [sp, #28]
 8008ec4:	4621      	mov	r1, r4
 8008ec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008eca:	3b30      	subs	r3, #48	; 0x30
 8008ecc:	2b09      	cmp	r3, #9
 8008ece:	d94e      	bls.n	8008f6e <_svfiprintf_r+0x17e>
 8008ed0:	b1b0      	cbz	r0, 8008f00 <_svfiprintf_r+0x110>
 8008ed2:	9207      	str	r2, [sp, #28]
 8008ed4:	e014      	b.n	8008f00 <_svfiprintf_r+0x110>
 8008ed6:	eba0 0308 	sub.w	r3, r0, r8
 8008eda:	fa09 f303 	lsl.w	r3, r9, r3
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	46a2      	mov	sl, r4
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	e7d2      	b.n	8008e8c <_svfiprintf_r+0x9c>
 8008ee6:	9b03      	ldr	r3, [sp, #12]
 8008ee8:	1d19      	adds	r1, r3, #4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	9103      	str	r1, [sp, #12]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bfbb      	ittet	lt
 8008ef2:	425b      	neglt	r3, r3
 8008ef4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ef8:	9307      	strge	r3, [sp, #28]
 8008efa:	9307      	strlt	r3, [sp, #28]
 8008efc:	bfb8      	it	lt
 8008efe:	9204      	strlt	r2, [sp, #16]
 8008f00:	7823      	ldrb	r3, [r4, #0]
 8008f02:	2b2e      	cmp	r3, #46	; 0x2e
 8008f04:	d10c      	bne.n	8008f20 <_svfiprintf_r+0x130>
 8008f06:	7863      	ldrb	r3, [r4, #1]
 8008f08:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0a:	d135      	bne.n	8008f78 <_svfiprintf_r+0x188>
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	3402      	adds	r4, #2
 8008f10:	1d1a      	adds	r2, r3, #4
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	9203      	str	r2, [sp, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	bfb8      	it	lt
 8008f1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f1e:	9305      	str	r3, [sp, #20]
 8008f20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008fec <_svfiprintf_r+0x1fc>
 8008f24:	2203      	movs	r2, #3
 8008f26:	4650      	mov	r0, sl
 8008f28:	7821      	ldrb	r1, [r4, #0]
 8008f2a:	f000 fbf9 	bl	8009720 <memchr>
 8008f2e:	b140      	cbz	r0, 8008f42 <_svfiprintf_r+0x152>
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	eba0 000a 	sub.w	r0, r0, sl
 8008f36:	fa03 f000 	lsl.w	r0, r3, r0
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	3401      	adds	r4, #1
 8008f3e:	4303      	orrs	r3, r0
 8008f40:	9304      	str	r3, [sp, #16]
 8008f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f46:	2206      	movs	r2, #6
 8008f48:	4825      	ldr	r0, [pc, #148]	; (8008fe0 <_svfiprintf_r+0x1f0>)
 8008f4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f4e:	f000 fbe7 	bl	8009720 <memchr>
 8008f52:	2800      	cmp	r0, #0
 8008f54:	d038      	beq.n	8008fc8 <_svfiprintf_r+0x1d8>
 8008f56:	4b23      	ldr	r3, [pc, #140]	; (8008fe4 <_svfiprintf_r+0x1f4>)
 8008f58:	bb1b      	cbnz	r3, 8008fa2 <_svfiprintf_r+0x1b2>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	3307      	adds	r3, #7
 8008f5e:	f023 0307 	bic.w	r3, r3, #7
 8008f62:	3308      	adds	r3, #8
 8008f64:	9303      	str	r3, [sp, #12]
 8008f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f68:	4433      	add	r3, r6
 8008f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f6c:	e767      	b.n	8008e3e <_svfiprintf_r+0x4e>
 8008f6e:	460c      	mov	r4, r1
 8008f70:	2001      	movs	r0, #1
 8008f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f76:	e7a5      	b.n	8008ec4 <_svfiprintf_r+0xd4>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	f04f 0c0a 	mov.w	ip, #10
 8008f7e:	4619      	mov	r1, r3
 8008f80:	3401      	adds	r4, #1
 8008f82:	9305      	str	r3, [sp, #20]
 8008f84:	4620      	mov	r0, r4
 8008f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f8a:	3a30      	subs	r2, #48	; 0x30
 8008f8c:	2a09      	cmp	r2, #9
 8008f8e:	d903      	bls.n	8008f98 <_svfiprintf_r+0x1a8>
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0c5      	beq.n	8008f20 <_svfiprintf_r+0x130>
 8008f94:	9105      	str	r1, [sp, #20]
 8008f96:	e7c3      	b.n	8008f20 <_svfiprintf_r+0x130>
 8008f98:	4604      	mov	r4, r0
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fa0:	e7f0      	b.n	8008f84 <_svfiprintf_r+0x194>
 8008fa2:	ab03      	add	r3, sp, #12
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	462a      	mov	r2, r5
 8008fa8:	4638      	mov	r0, r7
 8008faa:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <_svfiprintf_r+0x1f8>)
 8008fac:	a904      	add	r1, sp, #16
 8008fae:	f3af 8000 	nop.w
 8008fb2:	1c42      	adds	r2, r0, #1
 8008fb4:	4606      	mov	r6, r0
 8008fb6:	d1d6      	bne.n	8008f66 <_svfiprintf_r+0x176>
 8008fb8:	89ab      	ldrh	r3, [r5, #12]
 8008fba:	065b      	lsls	r3, r3, #25
 8008fbc:	f53f af2c 	bmi.w	8008e18 <_svfiprintf_r+0x28>
 8008fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fc2:	b01d      	add	sp, #116	; 0x74
 8008fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc8:	ab03      	add	r3, sp, #12
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	462a      	mov	r2, r5
 8008fce:	4638      	mov	r0, r7
 8008fd0:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <_svfiprintf_r+0x1f8>)
 8008fd2:	a904      	add	r1, sp, #16
 8008fd4:	f000 f9d4 	bl	8009380 <_printf_i>
 8008fd8:	e7eb      	b.n	8008fb2 <_svfiprintf_r+0x1c2>
 8008fda:	bf00      	nop
 8008fdc:	0800b514 	.word	0x0800b514
 8008fe0:	0800b51e 	.word	0x0800b51e
 8008fe4:	00000000 	.word	0x00000000
 8008fe8:	08008d39 	.word	0x08008d39
 8008fec:	0800b51a 	.word	0x0800b51a

08008ff0 <__sfputc_r>:
 8008ff0:	6893      	ldr	r3, [r2, #8]
 8008ff2:	b410      	push	{r4}
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	6093      	str	r3, [r2, #8]
 8008ffa:	da07      	bge.n	800900c <__sfputc_r+0x1c>
 8008ffc:	6994      	ldr	r4, [r2, #24]
 8008ffe:	42a3      	cmp	r3, r4
 8009000:	db01      	blt.n	8009006 <__sfputc_r+0x16>
 8009002:	290a      	cmp	r1, #10
 8009004:	d102      	bne.n	800900c <__sfputc_r+0x1c>
 8009006:	bc10      	pop	{r4}
 8009008:	f7ff bb12 	b.w	8008630 <__swbuf_r>
 800900c:	6813      	ldr	r3, [r2, #0]
 800900e:	1c58      	adds	r0, r3, #1
 8009010:	6010      	str	r0, [r2, #0]
 8009012:	7019      	strb	r1, [r3, #0]
 8009014:	4608      	mov	r0, r1
 8009016:	bc10      	pop	{r4}
 8009018:	4770      	bx	lr

0800901a <__sfputs_r>:
 800901a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901c:	4606      	mov	r6, r0
 800901e:	460f      	mov	r7, r1
 8009020:	4614      	mov	r4, r2
 8009022:	18d5      	adds	r5, r2, r3
 8009024:	42ac      	cmp	r4, r5
 8009026:	d101      	bne.n	800902c <__sfputs_r+0x12>
 8009028:	2000      	movs	r0, #0
 800902a:	e007      	b.n	800903c <__sfputs_r+0x22>
 800902c:	463a      	mov	r2, r7
 800902e:	4630      	mov	r0, r6
 8009030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009034:	f7ff ffdc 	bl	8008ff0 <__sfputc_r>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d1f3      	bne.n	8009024 <__sfputs_r+0xa>
 800903c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009040 <_vfiprintf_r>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	460d      	mov	r5, r1
 8009046:	4614      	mov	r4, r2
 8009048:	4698      	mov	r8, r3
 800904a:	4606      	mov	r6, r0
 800904c:	b09d      	sub	sp, #116	; 0x74
 800904e:	b118      	cbz	r0, 8009058 <_vfiprintf_r+0x18>
 8009050:	6983      	ldr	r3, [r0, #24]
 8009052:	b90b      	cbnz	r3, 8009058 <_vfiprintf_r+0x18>
 8009054:	f7ff fcc6 	bl	80089e4 <__sinit>
 8009058:	4b89      	ldr	r3, [pc, #548]	; (8009280 <_vfiprintf_r+0x240>)
 800905a:	429d      	cmp	r5, r3
 800905c:	d11b      	bne.n	8009096 <_vfiprintf_r+0x56>
 800905e:	6875      	ldr	r5, [r6, #4]
 8009060:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009062:	07d9      	lsls	r1, r3, #31
 8009064:	d405      	bmi.n	8009072 <_vfiprintf_r+0x32>
 8009066:	89ab      	ldrh	r3, [r5, #12]
 8009068:	059a      	lsls	r2, r3, #22
 800906a:	d402      	bmi.n	8009072 <_vfiprintf_r+0x32>
 800906c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800906e:	f7ff fd57 	bl	8008b20 <__retarget_lock_acquire_recursive>
 8009072:	89ab      	ldrh	r3, [r5, #12]
 8009074:	071b      	lsls	r3, r3, #28
 8009076:	d501      	bpl.n	800907c <_vfiprintf_r+0x3c>
 8009078:	692b      	ldr	r3, [r5, #16]
 800907a:	b9eb      	cbnz	r3, 80090b8 <_vfiprintf_r+0x78>
 800907c:	4629      	mov	r1, r5
 800907e:	4630      	mov	r0, r6
 8009080:	f7ff fb28 	bl	80086d4 <__swsetup_r>
 8009084:	b1c0      	cbz	r0, 80090b8 <_vfiprintf_r+0x78>
 8009086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009088:	07dc      	lsls	r4, r3, #31
 800908a:	d50e      	bpl.n	80090aa <_vfiprintf_r+0x6a>
 800908c:	f04f 30ff 	mov.w	r0, #4294967295
 8009090:	b01d      	add	sp, #116	; 0x74
 8009092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009096:	4b7b      	ldr	r3, [pc, #492]	; (8009284 <_vfiprintf_r+0x244>)
 8009098:	429d      	cmp	r5, r3
 800909a:	d101      	bne.n	80090a0 <_vfiprintf_r+0x60>
 800909c:	68b5      	ldr	r5, [r6, #8]
 800909e:	e7df      	b.n	8009060 <_vfiprintf_r+0x20>
 80090a0:	4b79      	ldr	r3, [pc, #484]	; (8009288 <_vfiprintf_r+0x248>)
 80090a2:	429d      	cmp	r5, r3
 80090a4:	bf08      	it	eq
 80090a6:	68f5      	ldreq	r5, [r6, #12]
 80090a8:	e7da      	b.n	8009060 <_vfiprintf_r+0x20>
 80090aa:	89ab      	ldrh	r3, [r5, #12]
 80090ac:	0598      	lsls	r0, r3, #22
 80090ae:	d4ed      	bmi.n	800908c <_vfiprintf_r+0x4c>
 80090b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090b2:	f7ff fd36 	bl	8008b22 <__retarget_lock_release_recursive>
 80090b6:	e7e9      	b.n	800908c <_vfiprintf_r+0x4c>
 80090b8:	2300      	movs	r3, #0
 80090ba:	9309      	str	r3, [sp, #36]	; 0x24
 80090bc:	2320      	movs	r3, #32
 80090be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090c2:	2330      	movs	r3, #48	; 0x30
 80090c4:	f04f 0901 	mov.w	r9, #1
 80090c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80090cc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800928c <_vfiprintf_r+0x24c>
 80090d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090d4:	4623      	mov	r3, r4
 80090d6:	469a      	mov	sl, r3
 80090d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090dc:	b10a      	cbz	r2, 80090e2 <_vfiprintf_r+0xa2>
 80090de:	2a25      	cmp	r2, #37	; 0x25
 80090e0:	d1f9      	bne.n	80090d6 <_vfiprintf_r+0x96>
 80090e2:	ebba 0b04 	subs.w	fp, sl, r4
 80090e6:	d00b      	beq.n	8009100 <_vfiprintf_r+0xc0>
 80090e8:	465b      	mov	r3, fp
 80090ea:	4622      	mov	r2, r4
 80090ec:	4629      	mov	r1, r5
 80090ee:	4630      	mov	r0, r6
 80090f0:	f7ff ff93 	bl	800901a <__sfputs_r>
 80090f4:	3001      	adds	r0, #1
 80090f6:	f000 80aa 	beq.w	800924e <_vfiprintf_r+0x20e>
 80090fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090fc:	445a      	add	r2, fp
 80090fe:	9209      	str	r2, [sp, #36]	; 0x24
 8009100:	f89a 3000 	ldrb.w	r3, [sl]
 8009104:	2b00      	cmp	r3, #0
 8009106:	f000 80a2 	beq.w	800924e <_vfiprintf_r+0x20e>
 800910a:	2300      	movs	r3, #0
 800910c:	f04f 32ff 	mov.w	r2, #4294967295
 8009110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009114:	f10a 0a01 	add.w	sl, sl, #1
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	9307      	str	r3, [sp, #28]
 800911c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009120:	931a      	str	r3, [sp, #104]	; 0x68
 8009122:	4654      	mov	r4, sl
 8009124:	2205      	movs	r2, #5
 8009126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800912a:	4858      	ldr	r0, [pc, #352]	; (800928c <_vfiprintf_r+0x24c>)
 800912c:	f000 faf8 	bl	8009720 <memchr>
 8009130:	9a04      	ldr	r2, [sp, #16]
 8009132:	b9d8      	cbnz	r0, 800916c <_vfiprintf_r+0x12c>
 8009134:	06d1      	lsls	r1, r2, #27
 8009136:	bf44      	itt	mi
 8009138:	2320      	movmi	r3, #32
 800913a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800913e:	0713      	lsls	r3, r2, #28
 8009140:	bf44      	itt	mi
 8009142:	232b      	movmi	r3, #43	; 0x2b
 8009144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009148:	f89a 3000 	ldrb.w	r3, [sl]
 800914c:	2b2a      	cmp	r3, #42	; 0x2a
 800914e:	d015      	beq.n	800917c <_vfiprintf_r+0x13c>
 8009150:	4654      	mov	r4, sl
 8009152:	2000      	movs	r0, #0
 8009154:	f04f 0c0a 	mov.w	ip, #10
 8009158:	9a07      	ldr	r2, [sp, #28]
 800915a:	4621      	mov	r1, r4
 800915c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009160:	3b30      	subs	r3, #48	; 0x30
 8009162:	2b09      	cmp	r3, #9
 8009164:	d94e      	bls.n	8009204 <_vfiprintf_r+0x1c4>
 8009166:	b1b0      	cbz	r0, 8009196 <_vfiprintf_r+0x156>
 8009168:	9207      	str	r2, [sp, #28]
 800916a:	e014      	b.n	8009196 <_vfiprintf_r+0x156>
 800916c:	eba0 0308 	sub.w	r3, r0, r8
 8009170:	fa09 f303 	lsl.w	r3, r9, r3
 8009174:	4313      	orrs	r3, r2
 8009176:	46a2      	mov	sl, r4
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	e7d2      	b.n	8009122 <_vfiprintf_r+0xe2>
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	1d19      	adds	r1, r3, #4
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	9103      	str	r1, [sp, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	bfbb      	ittet	lt
 8009188:	425b      	neglt	r3, r3
 800918a:	f042 0202 	orrlt.w	r2, r2, #2
 800918e:	9307      	strge	r3, [sp, #28]
 8009190:	9307      	strlt	r3, [sp, #28]
 8009192:	bfb8      	it	lt
 8009194:	9204      	strlt	r2, [sp, #16]
 8009196:	7823      	ldrb	r3, [r4, #0]
 8009198:	2b2e      	cmp	r3, #46	; 0x2e
 800919a:	d10c      	bne.n	80091b6 <_vfiprintf_r+0x176>
 800919c:	7863      	ldrb	r3, [r4, #1]
 800919e:	2b2a      	cmp	r3, #42	; 0x2a
 80091a0:	d135      	bne.n	800920e <_vfiprintf_r+0x1ce>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	3402      	adds	r4, #2
 80091a6:	1d1a      	adds	r2, r3, #4
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	9203      	str	r2, [sp, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	bfb8      	it	lt
 80091b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80091b4:	9305      	str	r3, [sp, #20]
 80091b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800929c <_vfiprintf_r+0x25c>
 80091ba:	2203      	movs	r2, #3
 80091bc:	4650      	mov	r0, sl
 80091be:	7821      	ldrb	r1, [r4, #0]
 80091c0:	f000 faae 	bl	8009720 <memchr>
 80091c4:	b140      	cbz	r0, 80091d8 <_vfiprintf_r+0x198>
 80091c6:	2340      	movs	r3, #64	; 0x40
 80091c8:	eba0 000a 	sub.w	r0, r0, sl
 80091cc:	fa03 f000 	lsl.w	r0, r3, r0
 80091d0:	9b04      	ldr	r3, [sp, #16]
 80091d2:	3401      	adds	r4, #1
 80091d4:	4303      	orrs	r3, r0
 80091d6:	9304      	str	r3, [sp, #16]
 80091d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091dc:	2206      	movs	r2, #6
 80091de:	482c      	ldr	r0, [pc, #176]	; (8009290 <_vfiprintf_r+0x250>)
 80091e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091e4:	f000 fa9c 	bl	8009720 <memchr>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d03f      	beq.n	800926c <_vfiprintf_r+0x22c>
 80091ec:	4b29      	ldr	r3, [pc, #164]	; (8009294 <_vfiprintf_r+0x254>)
 80091ee:	bb1b      	cbnz	r3, 8009238 <_vfiprintf_r+0x1f8>
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	3307      	adds	r3, #7
 80091f4:	f023 0307 	bic.w	r3, r3, #7
 80091f8:	3308      	adds	r3, #8
 80091fa:	9303      	str	r3, [sp, #12]
 80091fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fe:	443b      	add	r3, r7
 8009200:	9309      	str	r3, [sp, #36]	; 0x24
 8009202:	e767      	b.n	80090d4 <_vfiprintf_r+0x94>
 8009204:	460c      	mov	r4, r1
 8009206:	2001      	movs	r0, #1
 8009208:	fb0c 3202 	mla	r2, ip, r2, r3
 800920c:	e7a5      	b.n	800915a <_vfiprintf_r+0x11a>
 800920e:	2300      	movs	r3, #0
 8009210:	f04f 0c0a 	mov.w	ip, #10
 8009214:	4619      	mov	r1, r3
 8009216:	3401      	adds	r4, #1
 8009218:	9305      	str	r3, [sp, #20]
 800921a:	4620      	mov	r0, r4
 800921c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009220:	3a30      	subs	r2, #48	; 0x30
 8009222:	2a09      	cmp	r2, #9
 8009224:	d903      	bls.n	800922e <_vfiprintf_r+0x1ee>
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0c5      	beq.n	80091b6 <_vfiprintf_r+0x176>
 800922a:	9105      	str	r1, [sp, #20]
 800922c:	e7c3      	b.n	80091b6 <_vfiprintf_r+0x176>
 800922e:	4604      	mov	r4, r0
 8009230:	2301      	movs	r3, #1
 8009232:	fb0c 2101 	mla	r1, ip, r1, r2
 8009236:	e7f0      	b.n	800921a <_vfiprintf_r+0x1da>
 8009238:	ab03      	add	r3, sp, #12
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	462a      	mov	r2, r5
 800923e:	4630      	mov	r0, r6
 8009240:	4b15      	ldr	r3, [pc, #84]	; (8009298 <_vfiprintf_r+0x258>)
 8009242:	a904      	add	r1, sp, #16
 8009244:	f3af 8000 	nop.w
 8009248:	4607      	mov	r7, r0
 800924a:	1c78      	adds	r0, r7, #1
 800924c:	d1d6      	bne.n	80091fc <_vfiprintf_r+0x1bc>
 800924e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009250:	07d9      	lsls	r1, r3, #31
 8009252:	d405      	bmi.n	8009260 <_vfiprintf_r+0x220>
 8009254:	89ab      	ldrh	r3, [r5, #12]
 8009256:	059a      	lsls	r2, r3, #22
 8009258:	d402      	bmi.n	8009260 <_vfiprintf_r+0x220>
 800925a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800925c:	f7ff fc61 	bl	8008b22 <__retarget_lock_release_recursive>
 8009260:	89ab      	ldrh	r3, [r5, #12]
 8009262:	065b      	lsls	r3, r3, #25
 8009264:	f53f af12 	bmi.w	800908c <_vfiprintf_r+0x4c>
 8009268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800926a:	e711      	b.n	8009090 <_vfiprintf_r+0x50>
 800926c:	ab03      	add	r3, sp, #12
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	462a      	mov	r2, r5
 8009272:	4630      	mov	r0, r6
 8009274:	4b08      	ldr	r3, [pc, #32]	; (8009298 <_vfiprintf_r+0x258>)
 8009276:	a904      	add	r1, sp, #16
 8009278:	f000 f882 	bl	8009380 <_printf_i>
 800927c:	e7e4      	b.n	8009248 <_vfiprintf_r+0x208>
 800927e:	bf00      	nop
 8009280:	0800b4d4 	.word	0x0800b4d4
 8009284:	0800b4f4 	.word	0x0800b4f4
 8009288:	0800b4b4 	.word	0x0800b4b4
 800928c:	0800b514 	.word	0x0800b514
 8009290:	0800b51e 	.word	0x0800b51e
 8009294:	00000000 	.word	0x00000000
 8009298:	0800901b 	.word	0x0800901b
 800929c:	0800b51a 	.word	0x0800b51a

080092a0 <_printf_common>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	4616      	mov	r6, r2
 80092a6:	4699      	mov	r9, r3
 80092a8:	688a      	ldr	r2, [r1, #8]
 80092aa:	690b      	ldr	r3, [r1, #16]
 80092ac:	4607      	mov	r7, r0
 80092ae:	4293      	cmp	r3, r2
 80092b0:	bfb8      	it	lt
 80092b2:	4613      	movlt	r3, r2
 80092b4:	6033      	str	r3, [r6, #0]
 80092b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80092ba:	460c      	mov	r4, r1
 80092bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80092c0:	b10a      	cbz	r2, 80092c6 <_printf_common+0x26>
 80092c2:	3301      	adds	r3, #1
 80092c4:	6033      	str	r3, [r6, #0]
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	0699      	lsls	r1, r3, #26
 80092ca:	bf42      	ittt	mi
 80092cc:	6833      	ldrmi	r3, [r6, #0]
 80092ce:	3302      	addmi	r3, #2
 80092d0:	6033      	strmi	r3, [r6, #0]
 80092d2:	6825      	ldr	r5, [r4, #0]
 80092d4:	f015 0506 	ands.w	r5, r5, #6
 80092d8:	d106      	bne.n	80092e8 <_printf_common+0x48>
 80092da:	f104 0a19 	add.w	sl, r4, #25
 80092de:	68e3      	ldr	r3, [r4, #12]
 80092e0:	6832      	ldr	r2, [r6, #0]
 80092e2:	1a9b      	subs	r3, r3, r2
 80092e4:	42ab      	cmp	r3, r5
 80092e6:	dc28      	bgt.n	800933a <_printf_common+0x9a>
 80092e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092ec:	1e13      	subs	r3, r2, #0
 80092ee:	6822      	ldr	r2, [r4, #0]
 80092f0:	bf18      	it	ne
 80092f2:	2301      	movne	r3, #1
 80092f4:	0692      	lsls	r2, r2, #26
 80092f6:	d42d      	bmi.n	8009354 <_printf_common+0xb4>
 80092f8:	4649      	mov	r1, r9
 80092fa:	4638      	mov	r0, r7
 80092fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009300:	47c0      	blx	r8
 8009302:	3001      	adds	r0, #1
 8009304:	d020      	beq.n	8009348 <_printf_common+0xa8>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	68e5      	ldr	r5, [r4, #12]
 800930a:	f003 0306 	and.w	r3, r3, #6
 800930e:	2b04      	cmp	r3, #4
 8009310:	bf18      	it	ne
 8009312:	2500      	movne	r5, #0
 8009314:	6832      	ldr	r2, [r6, #0]
 8009316:	f04f 0600 	mov.w	r6, #0
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	bf08      	it	eq
 800931e:	1aad      	subeq	r5, r5, r2
 8009320:	6922      	ldr	r2, [r4, #16]
 8009322:	bf08      	it	eq
 8009324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009328:	4293      	cmp	r3, r2
 800932a:	bfc4      	itt	gt
 800932c:	1a9b      	subgt	r3, r3, r2
 800932e:	18ed      	addgt	r5, r5, r3
 8009330:	341a      	adds	r4, #26
 8009332:	42b5      	cmp	r5, r6
 8009334:	d11a      	bne.n	800936c <_printf_common+0xcc>
 8009336:	2000      	movs	r0, #0
 8009338:	e008      	b.n	800934c <_printf_common+0xac>
 800933a:	2301      	movs	r3, #1
 800933c:	4652      	mov	r2, sl
 800933e:	4649      	mov	r1, r9
 8009340:	4638      	mov	r0, r7
 8009342:	47c0      	blx	r8
 8009344:	3001      	adds	r0, #1
 8009346:	d103      	bne.n	8009350 <_printf_common+0xb0>
 8009348:	f04f 30ff 	mov.w	r0, #4294967295
 800934c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009350:	3501      	adds	r5, #1
 8009352:	e7c4      	b.n	80092de <_printf_common+0x3e>
 8009354:	2030      	movs	r0, #48	; 0x30
 8009356:	18e1      	adds	r1, r4, r3
 8009358:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800935c:	1c5a      	adds	r2, r3, #1
 800935e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009362:	4422      	add	r2, r4
 8009364:	3302      	adds	r3, #2
 8009366:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800936a:	e7c5      	b.n	80092f8 <_printf_common+0x58>
 800936c:	2301      	movs	r3, #1
 800936e:	4622      	mov	r2, r4
 8009370:	4649      	mov	r1, r9
 8009372:	4638      	mov	r0, r7
 8009374:	47c0      	blx	r8
 8009376:	3001      	adds	r0, #1
 8009378:	d0e6      	beq.n	8009348 <_printf_common+0xa8>
 800937a:	3601      	adds	r6, #1
 800937c:	e7d9      	b.n	8009332 <_printf_common+0x92>
	...

08009380 <_printf_i>:
 8009380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009384:	460c      	mov	r4, r1
 8009386:	7e27      	ldrb	r7, [r4, #24]
 8009388:	4691      	mov	r9, r2
 800938a:	2f78      	cmp	r7, #120	; 0x78
 800938c:	4680      	mov	r8, r0
 800938e:	469a      	mov	sl, r3
 8009390:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009396:	d807      	bhi.n	80093a8 <_printf_i+0x28>
 8009398:	2f62      	cmp	r7, #98	; 0x62
 800939a:	d80a      	bhi.n	80093b2 <_printf_i+0x32>
 800939c:	2f00      	cmp	r7, #0
 800939e:	f000 80d9 	beq.w	8009554 <_printf_i+0x1d4>
 80093a2:	2f58      	cmp	r7, #88	; 0x58
 80093a4:	f000 80a4 	beq.w	80094f0 <_printf_i+0x170>
 80093a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80093ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80093b0:	e03a      	b.n	8009428 <_printf_i+0xa8>
 80093b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80093b6:	2b15      	cmp	r3, #21
 80093b8:	d8f6      	bhi.n	80093a8 <_printf_i+0x28>
 80093ba:	a001      	add	r0, pc, #4	; (adr r0, 80093c0 <_printf_i+0x40>)
 80093bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80093c0:	08009419 	.word	0x08009419
 80093c4:	0800942d 	.word	0x0800942d
 80093c8:	080093a9 	.word	0x080093a9
 80093cc:	080093a9 	.word	0x080093a9
 80093d0:	080093a9 	.word	0x080093a9
 80093d4:	080093a9 	.word	0x080093a9
 80093d8:	0800942d 	.word	0x0800942d
 80093dc:	080093a9 	.word	0x080093a9
 80093e0:	080093a9 	.word	0x080093a9
 80093e4:	080093a9 	.word	0x080093a9
 80093e8:	080093a9 	.word	0x080093a9
 80093ec:	0800953b 	.word	0x0800953b
 80093f0:	0800945d 	.word	0x0800945d
 80093f4:	0800951d 	.word	0x0800951d
 80093f8:	080093a9 	.word	0x080093a9
 80093fc:	080093a9 	.word	0x080093a9
 8009400:	0800955d 	.word	0x0800955d
 8009404:	080093a9 	.word	0x080093a9
 8009408:	0800945d 	.word	0x0800945d
 800940c:	080093a9 	.word	0x080093a9
 8009410:	080093a9 	.word	0x080093a9
 8009414:	08009525 	.word	0x08009525
 8009418:	680b      	ldr	r3, [r1, #0]
 800941a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800941e:	1d1a      	adds	r2, r3, #4
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	600a      	str	r2, [r1, #0]
 8009424:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009428:	2301      	movs	r3, #1
 800942a:	e0a4      	b.n	8009576 <_printf_i+0x1f6>
 800942c:	6825      	ldr	r5, [r4, #0]
 800942e:	6808      	ldr	r0, [r1, #0]
 8009430:	062e      	lsls	r6, r5, #24
 8009432:	f100 0304 	add.w	r3, r0, #4
 8009436:	d50a      	bpl.n	800944e <_printf_i+0xce>
 8009438:	6805      	ldr	r5, [r0, #0]
 800943a:	600b      	str	r3, [r1, #0]
 800943c:	2d00      	cmp	r5, #0
 800943e:	da03      	bge.n	8009448 <_printf_i+0xc8>
 8009440:	232d      	movs	r3, #45	; 0x2d
 8009442:	426d      	negs	r5, r5
 8009444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009448:	230a      	movs	r3, #10
 800944a:	485e      	ldr	r0, [pc, #376]	; (80095c4 <_printf_i+0x244>)
 800944c:	e019      	b.n	8009482 <_printf_i+0x102>
 800944e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009452:	6805      	ldr	r5, [r0, #0]
 8009454:	600b      	str	r3, [r1, #0]
 8009456:	bf18      	it	ne
 8009458:	b22d      	sxthne	r5, r5
 800945a:	e7ef      	b.n	800943c <_printf_i+0xbc>
 800945c:	680b      	ldr	r3, [r1, #0]
 800945e:	6825      	ldr	r5, [r4, #0]
 8009460:	1d18      	adds	r0, r3, #4
 8009462:	6008      	str	r0, [r1, #0]
 8009464:	0628      	lsls	r0, r5, #24
 8009466:	d501      	bpl.n	800946c <_printf_i+0xec>
 8009468:	681d      	ldr	r5, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0xf2>
 800946c:	0669      	lsls	r1, r5, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0xe8>
 8009470:	881d      	ldrh	r5, [r3, #0]
 8009472:	2f6f      	cmp	r7, #111	; 0x6f
 8009474:	bf0c      	ite	eq
 8009476:	2308      	moveq	r3, #8
 8009478:	230a      	movne	r3, #10
 800947a:	4852      	ldr	r0, [pc, #328]	; (80095c4 <_printf_i+0x244>)
 800947c:	2100      	movs	r1, #0
 800947e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009482:	6866      	ldr	r6, [r4, #4]
 8009484:	2e00      	cmp	r6, #0
 8009486:	bfa8      	it	ge
 8009488:	6821      	ldrge	r1, [r4, #0]
 800948a:	60a6      	str	r6, [r4, #8]
 800948c:	bfa4      	itt	ge
 800948e:	f021 0104 	bicge.w	r1, r1, #4
 8009492:	6021      	strge	r1, [r4, #0]
 8009494:	b90d      	cbnz	r5, 800949a <_printf_i+0x11a>
 8009496:	2e00      	cmp	r6, #0
 8009498:	d04d      	beq.n	8009536 <_printf_i+0x1b6>
 800949a:	4616      	mov	r6, r2
 800949c:	fbb5 f1f3 	udiv	r1, r5, r3
 80094a0:	fb03 5711 	mls	r7, r3, r1, r5
 80094a4:	5dc7      	ldrb	r7, [r0, r7]
 80094a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094aa:	462f      	mov	r7, r5
 80094ac:	42bb      	cmp	r3, r7
 80094ae:	460d      	mov	r5, r1
 80094b0:	d9f4      	bls.n	800949c <_printf_i+0x11c>
 80094b2:	2b08      	cmp	r3, #8
 80094b4:	d10b      	bne.n	80094ce <_printf_i+0x14e>
 80094b6:	6823      	ldr	r3, [r4, #0]
 80094b8:	07df      	lsls	r7, r3, #31
 80094ba:	d508      	bpl.n	80094ce <_printf_i+0x14e>
 80094bc:	6923      	ldr	r3, [r4, #16]
 80094be:	6861      	ldr	r1, [r4, #4]
 80094c0:	4299      	cmp	r1, r3
 80094c2:	bfde      	ittt	le
 80094c4:	2330      	movle	r3, #48	; 0x30
 80094c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094ce:	1b92      	subs	r2, r2, r6
 80094d0:	6122      	str	r2, [r4, #16]
 80094d2:	464b      	mov	r3, r9
 80094d4:	4621      	mov	r1, r4
 80094d6:	4640      	mov	r0, r8
 80094d8:	f8cd a000 	str.w	sl, [sp]
 80094dc:	aa03      	add	r2, sp, #12
 80094de:	f7ff fedf 	bl	80092a0 <_printf_common>
 80094e2:	3001      	adds	r0, #1
 80094e4:	d14c      	bne.n	8009580 <_printf_i+0x200>
 80094e6:	f04f 30ff 	mov.w	r0, #4294967295
 80094ea:	b004      	add	sp, #16
 80094ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f0:	4834      	ldr	r0, [pc, #208]	; (80095c4 <_printf_i+0x244>)
 80094f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094f6:	680e      	ldr	r6, [r1, #0]
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80094fe:	061f      	lsls	r7, r3, #24
 8009500:	600e      	str	r6, [r1, #0]
 8009502:	d514      	bpl.n	800952e <_printf_i+0x1ae>
 8009504:	07d9      	lsls	r1, r3, #31
 8009506:	bf44      	itt	mi
 8009508:	f043 0320 	orrmi.w	r3, r3, #32
 800950c:	6023      	strmi	r3, [r4, #0]
 800950e:	b91d      	cbnz	r5, 8009518 <_printf_i+0x198>
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	f023 0320 	bic.w	r3, r3, #32
 8009516:	6023      	str	r3, [r4, #0]
 8009518:	2310      	movs	r3, #16
 800951a:	e7af      	b.n	800947c <_printf_i+0xfc>
 800951c:	6823      	ldr	r3, [r4, #0]
 800951e:	f043 0320 	orr.w	r3, r3, #32
 8009522:	6023      	str	r3, [r4, #0]
 8009524:	2378      	movs	r3, #120	; 0x78
 8009526:	4828      	ldr	r0, [pc, #160]	; (80095c8 <_printf_i+0x248>)
 8009528:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800952c:	e7e3      	b.n	80094f6 <_printf_i+0x176>
 800952e:	065e      	lsls	r6, r3, #25
 8009530:	bf48      	it	mi
 8009532:	b2ad      	uxthmi	r5, r5
 8009534:	e7e6      	b.n	8009504 <_printf_i+0x184>
 8009536:	4616      	mov	r6, r2
 8009538:	e7bb      	b.n	80094b2 <_printf_i+0x132>
 800953a:	680b      	ldr	r3, [r1, #0]
 800953c:	6826      	ldr	r6, [r4, #0]
 800953e:	1d1d      	adds	r5, r3, #4
 8009540:	6960      	ldr	r0, [r4, #20]
 8009542:	600d      	str	r5, [r1, #0]
 8009544:	0635      	lsls	r5, r6, #24
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	d501      	bpl.n	800954e <_printf_i+0x1ce>
 800954a:	6018      	str	r0, [r3, #0]
 800954c:	e002      	b.n	8009554 <_printf_i+0x1d4>
 800954e:	0671      	lsls	r1, r6, #25
 8009550:	d5fb      	bpl.n	800954a <_printf_i+0x1ca>
 8009552:	8018      	strh	r0, [r3, #0]
 8009554:	2300      	movs	r3, #0
 8009556:	4616      	mov	r6, r2
 8009558:	6123      	str	r3, [r4, #16]
 800955a:	e7ba      	b.n	80094d2 <_printf_i+0x152>
 800955c:	680b      	ldr	r3, [r1, #0]
 800955e:	1d1a      	adds	r2, r3, #4
 8009560:	600a      	str	r2, [r1, #0]
 8009562:	681e      	ldr	r6, [r3, #0]
 8009564:	2100      	movs	r1, #0
 8009566:	4630      	mov	r0, r6
 8009568:	6862      	ldr	r2, [r4, #4]
 800956a:	f000 f8d9 	bl	8009720 <memchr>
 800956e:	b108      	cbz	r0, 8009574 <_printf_i+0x1f4>
 8009570:	1b80      	subs	r0, r0, r6
 8009572:	6060      	str	r0, [r4, #4]
 8009574:	6863      	ldr	r3, [r4, #4]
 8009576:	6123      	str	r3, [r4, #16]
 8009578:	2300      	movs	r3, #0
 800957a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957e:	e7a8      	b.n	80094d2 <_printf_i+0x152>
 8009580:	4632      	mov	r2, r6
 8009582:	4649      	mov	r1, r9
 8009584:	4640      	mov	r0, r8
 8009586:	6923      	ldr	r3, [r4, #16]
 8009588:	47d0      	blx	sl
 800958a:	3001      	adds	r0, #1
 800958c:	d0ab      	beq.n	80094e6 <_printf_i+0x166>
 800958e:	6823      	ldr	r3, [r4, #0]
 8009590:	079b      	lsls	r3, r3, #30
 8009592:	d413      	bmi.n	80095bc <_printf_i+0x23c>
 8009594:	68e0      	ldr	r0, [r4, #12]
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	4298      	cmp	r0, r3
 800959a:	bfb8      	it	lt
 800959c:	4618      	movlt	r0, r3
 800959e:	e7a4      	b.n	80094ea <_printf_i+0x16a>
 80095a0:	2301      	movs	r3, #1
 80095a2:	4632      	mov	r2, r6
 80095a4:	4649      	mov	r1, r9
 80095a6:	4640      	mov	r0, r8
 80095a8:	47d0      	blx	sl
 80095aa:	3001      	adds	r0, #1
 80095ac:	d09b      	beq.n	80094e6 <_printf_i+0x166>
 80095ae:	3501      	adds	r5, #1
 80095b0:	68e3      	ldr	r3, [r4, #12]
 80095b2:	9903      	ldr	r1, [sp, #12]
 80095b4:	1a5b      	subs	r3, r3, r1
 80095b6:	42ab      	cmp	r3, r5
 80095b8:	dcf2      	bgt.n	80095a0 <_printf_i+0x220>
 80095ba:	e7eb      	b.n	8009594 <_printf_i+0x214>
 80095bc:	2500      	movs	r5, #0
 80095be:	f104 0619 	add.w	r6, r4, #25
 80095c2:	e7f5      	b.n	80095b0 <_printf_i+0x230>
 80095c4:	0800b525 	.word	0x0800b525
 80095c8:	0800b536 	.word	0x0800b536

080095cc <_sbrk_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	2300      	movs	r3, #0
 80095d0:	4d05      	ldr	r5, [pc, #20]	; (80095e8 <_sbrk_r+0x1c>)
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7fb fdcc 	bl	8005174 <_sbrk>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_sbrk_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_sbrk_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	200019dc 	.word	0x200019dc

080095ec <__sread>:
 80095ec:	b510      	push	{r4, lr}
 80095ee:	460c      	mov	r4, r1
 80095f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095f4:	f000 f8ee 	bl	80097d4 <_read_r>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	bfab      	itete	ge
 80095fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80095fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009600:	181b      	addge	r3, r3, r0
 8009602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009606:	bfac      	ite	ge
 8009608:	6563      	strge	r3, [r4, #84]	; 0x54
 800960a:	81a3      	strhlt	r3, [r4, #12]
 800960c:	bd10      	pop	{r4, pc}

0800960e <__swrite>:
 800960e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009612:	461f      	mov	r7, r3
 8009614:	898b      	ldrh	r3, [r1, #12]
 8009616:	4605      	mov	r5, r0
 8009618:	05db      	lsls	r3, r3, #23
 800961a:	460c      	mov	r4, r1
 800961c:	4616      	mov	r6, r2
 800961e:	d505      	bpl.n	800962c <__swrite+0x1e>
 8009620:	2302      	movs	r3, #2
 8009622:	2200      	movs	r2, #0
 8009624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009628:	f000 f868 	bl	80096fc <_lseek_r>
 800962c:	89a3      	ldrh	r3, [r4, #12]
 800962e:	4632      	mov	r2, r6
 8009630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	4628      	mov	r0, r5
 8009638:	463b      	mov	r3, r7
 800963a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800963e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009642:	f000 b817 	b.w	8009674 <_write_r>

08009646 <__sseek>:
 8009646:	b510      	push	{r4, lr}
 8009648:	460c      	mov	r4, r1
 800964a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800964e:	f000 f855 	bl	80096fc <_lseek_r>
 8009652:	1c43      	adds	r3, r0, #1
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	bf15      	itete	ne
 8009658:	6560      	strne	r0, [r4, #84]	; 0x54
 800965a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800965e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009662:	81a3      	strheq	r3, [r4, #12]
 8009664:	bf18      	it	ne
 8009666:	81a3      	strhne	r3, [r4, #12]
 8009668:	bd10      	pop	{r4, pc}

0800966a <__sclose>:
 800966a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966e:	f000 b813 	b.w	8009698 <_close_r>
	...

08009674 <_write_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	4611      	mov	r1, r2
 800967c:	2200      	movs	r2, #0
 800967e:	4d05      	ldr	r5, [pc, #20]	; (8009694 <_write_r+0x20>)
 8009680:	602a      	str	r2, [r5, #0]
 8009682:	461a      	mov	r2, r3
 8009684:	f7f7 ff72 	bl	800156c <_write>
 8009688:	1c43      	adds	r3, r0, #1
 800968a:	d102      	bne.n	8009692 <_write_r+0x1e>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	b103      	cbz	r3, 8009692 <_write_r+0x1e>
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	bd38      	pop	{r3, r4, r5, pc}
 8009694:	200019dc 	.word	0x200019dc

08009698 <_close_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	2300      	movs	r3, #0
 800969c:	4d05      	ldr	r5, [pc, #20]	; (80096b4 <_close_r+0x1c>)
 800969e:	4604      	mov	r4, r0
 80096a0:	4608      	mov	r0, r1
 80096a2:	602b      	str	r3, [r5, #0]
 80096a4:	f7fb fd59 	bl	800515a <_close>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_close_r+0x1a>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_close_r+0x1a>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	200019dc 	.word	0x200019dc

080096b8 <_fstat_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	2300      	movs	r3, #0
 80096bc:	4d06      	ldr	r5, [pc, #24]	; (80096d8 <_fstat_r+0x20>)
 80096be:	4604      	mov	r4, r0
 80096c0:	4608      	mov	r0, r1
 80096c2:	4611      	mov	r1, r2
 80096c4:	602b      	str	r3, [r5, #0]
 80096c6:	f7fb fd4b 	bl	8005160 <_fstat>
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	d102      	bne.n	80096d4 <_fstat_r+0x1c>
 80096ce:	682b      	ldr	r3, [r5, #0]
 80096d0:	b103      	cbz	r3, 80096d4 <_fstat_r+0x1c>
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	bd38      	pop	{r3, r4, r5, pc}
 80096d6:	bf00      	nop
 80096d8:	200019dc 	.word	0x200019dc

080096dc <_isatty_r>:
 80096dc:	b538      	push	{r3, r4, r5, lr}
 80096de:	2300      	movs	r3, #0
 80096e0:	4d05      	ldr	r5, [pc, #20]	; (80096f8 <_isatty_r+0x1c>)
 80096e2:	4604      	mov	r4, r0
 80096e4:	4608      	mov	r0, r1
 80096e6:	602b      	str	r3, [r5, #0]
 80096e8:	f7fb fd3f 	bl	800516a <_isatty>
 80096ec:	1c43      	adds	r3, r0, #1
 80096ee:	d102      	bne.n	80096f6 <_isatty_r+0x1a>
 80096f0:	682b      	ldr	r3, [r5, #0]
 80096f2:	b103      	cbz	r3, 80096f6 <_isatty_r+0x1a>
 80096f4:	6023      	str	r3, [r4, #0]
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	200019dc 	.word	0x200019dc

080096fc <_lseek_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4604      	mov	r4, r0
 8009700:	4608      	mov	r0, r1
 8009702:	4611      	mov	r1, r2
 8009704:	2200      	movs	r2, #0
 8009706:	4d05      	ldr	r5, [pc, #20]	; (800971c <_lseek_r+0x20>)
 8009708:	602a      	str	r2, [r5, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	f7fb fd2f 	bl	800516e <_lseek>
 8009710:	1c43      	adds	r3, r0, #1
 8009712:	d102      	bne.n	800971a <_lseek_r+0x1e>
 8009714:	682b      	ldr	r3, [r5, #0]
 8009716:	b103      	cbz	r3, 800971a <_lseek_r+0x1e>
 8009718:	6023      	str	r3, [r4, #0]
 800971a:	bd38      	pop	{r3, r4, r5, pc}
 800971c:	200019dc 	.word	0x200019dc

08009720 <memchr>:
 8009720:	4603      	mov	r3, r0
 8009722:	b510      	push	{r4, lr}
 8009724:	b2c9      	uxtb	r1, r1
 8009726:	4402      	add	r2, r0
 8009728:	4293      	cmp	r3, r2
 800972a:	4618      	mov	r0, r3
 800972c:	d101      	bne.n	8009732 <memchr+0x12>
 800972e:	2000      	movs	r0, #0
 8009730:	e003      	b.n	800973a <memchr+0x1a>
 8009732:	7804      	ldrb	r4, [r0, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	428c      	cmp	r4, r1
 8009738:	d1f6      	bne.n	8009728 <memchr+0x8>
 800973a:	bd10      	pop	{r4, pc}

0800973c <memmove>:
 800973c:	4288      	cmp	r0, r1
 800973e:	b510      	push	{r4, lr}
 8009740:	eb01 0402 	add.w	r4, r1, r2
 8009744:	d902      	bls.n	800974c <memmove+0x10>
 8009746:	4284      	cmp	r4, r0
 8009748:	4623      	mov	r3, r4
 800974a:	d807      	bhi.n	800975c <memmove+0x20>
 800974c:	1e43      	subs	r3, r0, #1
 800974e:	42a1      	cmp	r1, r4
 8009750:	d008      	beq.n	8009764 <memmove+0x28>
 8009752:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009756:	f803 2f01 	strb.w	r2, [r3, #1]!
 800975a:	e7f8      	b.n	800974e <memmove+0x12>
 800975c:	4601      	mov	r1, r0
 800975e:	4402      	add	r2, r0
 8009760:	428a      	cmp	r2, r1
 8009762:	d100      	bne.n	8009766 <memmove+0x2a>
 8009764:	bd10      	pop	{r4, pc}
 8009766:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800976a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800976e:	e7f7      	b.n	8009760 <memmove+0x24>

08009770 <__malloc_lock>:
 8009770:	4801      	ldr	r0, [pc, #4]	; (8009778 <__malloc_lock+0x8>)
 8009772:	f7ff b9d5 	b.w	8008b20 <__retarget_lock_acquire_recursive>
 8009776:	bf00      	nop
 8009778:	200019d4 	.word	0x200019d4

0800977c <__malloc_unlock>:
 800977c:	4801      	ldr	r0, [pc, #4]	; (8009784 <__malloc_unlock+0x8>)
 800977e:	f7ff b9d0 	b.w	8008b22 <__retarget_lock_release_recursive>
 8009782:	bf00      	nop
 8009784:	200019d4 	.word	0x200019d4

08009788 <_realloc_r>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	4607      	mov	r7, r0
 800978c:	4614      	mov	r4, r2
 800978e:	460e      	mov	r6, r1
 8009790:	b921      	cbnz	r1, 800979c <_realloc_r+0x14>
 8009792:	4611      	mov	r1, r2
 8009794:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009798:	f7ff ba74 	b.w	8008c84 <_malloc_r>
 800979c:	b922      	cbnz	r2, 80097a8 <_realloc_r+0x20>
 800979e:	f7ff fa25 	bl	8008bec <_free_r>
 80097a2:	4625      	mov	r5, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a8:	f000 f826 	bl	80097f8 <_malloc_usable_size_r>
 80097ac:	42a0      	cmp	r0, r4
 80097ae:	d20f      	bcs.n	80097d0 <_realloc_r+0x48>
 80097b0:	4621      	mov	r1, r4
 80097b2:	4638      	mov	r0, r7
 80097b4:	f7ff fa66 	bl	8008c84 <_malloc_r>
 80097b8:	4605      	mov	r5, r0
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0f2      	beq.n	80097a4 <_realloc_r+0x1c>
 80097be:	4631      	mov	r1, r6
 80097c0:	4622      	mov	r2, r4
 80097c2:	f7fe fe69 	bl	8008498 <memcpy>
 80097c6:	4631      	mov	r1, r6
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7ff fa0f 	bl	8008bec <_free_r>
 80097ce:	e7e9      	b.n	80097a4 <_realloc_r+0x1c>
 80097d0:	4635      	mov	r5, r6
 80097d2:	e7e7      	b.n	80097a4 <_realloc_r+0x1c>

080097d4 <_read_r>:
 80097d4:	b538      	push	{r3, r4, r5, lr}
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	4611      	mov	r1, r2
 80097dc:	2200      	movs	r2, #0
 80097de:	4d05      	ldr	r5, [pc, #20]	; (80097f4 <_read_r+0x20>)
 80097e0:	602a      	str	r2, [r5, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f7fb fcac 	bl	8005140 <_read>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_read_r+0x1e>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_read_r+0x1e>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	200019dc 	.word	0x200019dc

080097f8 <_malloc_usable_size_r>:
 80097f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fc:	1f18      	subs	r0, r3, #4
 80097fe:	2b00      	cmp	r3, #0
 8009800:	bfbc      	itt	lt
 8009802:	580b      	ldrlt	r3, [r1, r0]
 8009804:	18c0      	addlt	r0, r0, r3
 8009806:	4770      	bx	lr

08009808 <sin>:
 8009808:	b530      	push	{r4, r5, lr}
 800980a:	4a20      	ldr	r2, [pc, #128]	; (800988c <sin+0x84>)
 800980c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009810:	4293      	cmp	r3, r2
 8009812:	b087      	sub	sp, #28
 8009814:	dc06      	bgt.n	8009824 <sin+0x1c>
 8009816:	2300      	movs	r3, #0
 8009818:	2200      	movs	r2, #0
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	2300      	movs	r3, #0
 800981e:	f000 fe33 	bl	800a488 <__kernel_sin>
 8009822:	e006      	b.n	8009832 <sin+0x2a>
 8009824:	4a1a      	ldr	r2, [pc, #104]	; (8009890 <sin+0x88>)
 8009826:	4293      	cmp	r3, r2
 8009828:	dd05      	ble.n	8009836 <sin+0x2e>
 800982a:	4602      	mov	r2, r0
 800982c:	460b      	mov	r3, r1
 800982e:	f7f6 fdc5 	bl	80003bc <__aeabi_dsub>
 8009832:	b007      	add	sp, #28
 8009834:	bd30      	pop	{r4, r5, pc}
 8009836:	aa02      	add	r2, sp, #8
 8009838:	f000 f82e 	bl	8009898 <__ieee754_rem_pio2>
 800983c:	f000 0003 	and.w	r0, r0, #3
 8009840:	2801      	cmp	r0, #1
 8009842:	d009      	beq.n	8009858 <sin+0x50>
 8009844:	2802      	cmp	r0, #2
 8009846:	d00e      	beq.n	8009866 <sin+0x5e>
 8009848:	b9c0      	cbnz	r0, 800987c <sin+0x74>
 800984a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800984e:	2301      	movs	r3, #1
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009856:	e7e2      	b.n	800981e <sin+0x16>
 8009858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800985c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009860:	f000 fa0a 	bl	8009c78 <__kernel_cos>
 8009864:	e7e5      	b.n	8009832 <sin+0x2a>
 8009866:	2301      	movs	r3, #1
 8009868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009872:	f000 fe09 	bl	800a488 <__kernel_sin>
 8009876:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800987a:	e7da      	b.n	8009832 <sin+0x2a>
 800987c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009880:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009884:	f000 f9f8 	bl	8009c78 <__kernel_cos>
 8009888:	e7f5      	b.n	8009876 <sin+0x6e>
 800988a:	bf00      	nop
 800988c:	3fe921fb 	.word	0x3fe921fb
 8009890:	7fefffff 	.word	0x7fefffff
 8009894:	00000000 	.word	0x00000000

08009898 <__ieee754_rem_pio2>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	4614      	mov	r4, r2
 800989e:	4ac4      	ldr	r2, [pc, #784]	; (8009bb0 <__ieee754_rem_pio2+0x318>)
 80098a0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80098a4:	b08d      	sub	sp, #52	; 0x34
 80098a6:	4592      	cmp	sl, r2
 80098a8:	9104      	str	r1, [sp, #16]
 80098aa:	dc07      	bgt.n	80098bc <__ieee754_rem_pio2+0x24>
 80098ac:	2200      	movs	r2, #0
 80098ae:	2300      	movs	r3, #0
 80098b0:	e9c4 0100 	strd	r0, r1, [r4]
 80098b4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80098b8:	2500      	movs	r5, #0
 80098ba:	e024      	b.n	8009906 <__ieee754_rem_pio2+0x6e>
 80098bc:	4abd      	ldr	r2, [pc, #756]	; (8009bb4 <__ieee754_rem_pio2+0x31c>)
 80098be:	4592      	cmp	sl, r2
 80098c0:	dc72      	bgt.n	80099a8 <__ieee754_rem_pio2+0x110>
 80098c2:	9b04      	ldr	r3, [sp, #16]
 80098c4:	4dbc      	ldr	r5, [pc, #752]	; (8009bb8 <__ieee754_rem_pio2+0x320>)
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	a3ab      	add	r3, pc, #684	; (adr r3, 8009b78 <__ieee754_rem_pio2+0x2e0>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	dd36      	ble.n	800993e <__ieee754_rem_pio2+0xa6>
 80098d0:	f7f6 fd74 	bl	80003bc <__aeabi_dsub>
 80098d4:	45aa      	cmp	sl, r5
 80098d6:	4606      	mov	r6, r0
 80098d8:	460f      	mov	r7, r1
 80098da:	d018      	beq.n	800990e <__ieee754_rem_pio2+0x76>
 80098dc:	a3a8      	add	r3, pc, #672	; (adr r3, 8009b80 <__ieee754_rem_pio2+0x2e8>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fd6b 	bl	80003bc <__aeabi_dsub>
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	4630      	mov	r0, r6
 80098ec:	e9c4 2300 	strd	r2, r3, [r4]
 80098f0:	4639      	mov	r1, r7
 80098f2:	f7f6 fd63 	bl	80003bc <__aeabi_dsub>
 80098f6:	a3a2      	add	r3, pc, #648	; (adr r3, 8009b80 <__ieee754_rem_pio2+0x2e8>)
 80098f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fc:	f7f6 fd5e 	bl	80003bc <__aeabi_dsub>
 8009900:	2501      	movs	r5, #1
 8009902:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009906:	4628      	mov	r0, r5
 8009908:	b00d      	add	sp, #52	; 0x34
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	a39e      	add	r3, pc, #632	; (adr r3, 8009b88 <__ieee754_rem_pio2+0x2f0>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f7f6 fd52 	bl	80003bc <__aeabi_dsub>
 8009918:	a39d      	add	r3, pc, #628	; (adr r3, 8009b90 <__ieee754_rem_pio2+0x2f8>)
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	4606      	mov	r6, r0
 8009920:	460f      	mov	r7, r1
 8009922:	f7f6 fd4b 	bl	80003bc <__aeabi_dsub>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4630      	mov	r0, r6
 800992c:	e9c4 2300 	strd	r2, r3, [r4]
 8009930:	4639      	mov	r1, r7
 8009932:	f7f6 fd43 	bl	80003bc <__aeabi_dsub>
 8009936:	a396      	add	r3, pc, #600	; (adr r3, 8009b90 <__ieee754_rem_pio2+0x2f8>)
 8009938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800993c:	e7de      	b.n	80098fc <__ieee754_rem_pio2+0x64>
 800993e:	f7f6 fd3f 	bl	80003c0 <__adddf3>
 8009942:	45aa      	cmp	sl, r5
 8009944:	4606      	mov	r6, r0
 8009946:	460f      	mov	r7, r1
 8009948:	d016      	beq.n	8009978 <__ieee754_rem_pio2+0xe0>
 800994a:	a38d      	add	r3, pc, #564	; (adr r3, 8009b80 <__ieee754_rem_pio2+0x2e8>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	f7f6 fd36 	bl	80003c0 <__adddf3>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4630      	mov	r0, r6
 800995a:	e9c4 2300 	strd	r2, r3, [r4]
 800995e:	4639      	mov	r1, r7
 8009960:	f7f6 fd2c 	bl	80003bc <__aeabi_dsub>
 8009964:	a386      	add	r3, pc, #536	; (adr r3, 8009b80 <__ieee754_rem_pio2+0x2e8>)
 8009966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996a:	f7f6 fd29 	bl	80003c0 <__adddf3>
 800996e:	f04f 35ff 	mov.w	r5, #4294967295
 8009972:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009976:	e7c6      	b.n	8009906 <__ieee754_rem_pio2+0x6e>
 8009978:	a383      	add	r3, pc, #524	; (adr r3, 8009b88 <__ieee754_rem_pio2+0x2f0>)
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	f7f6 fd1f 	bl	80003c0 <__adddf3>
 8009982:	a383      	add	r3, pc, #524	; (adr r3, 8009b90 <__ieee754_rem_pio2+0x2f8>)
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	4606      	mov	r6, r0
 800998a:	460f      	mov	r7, r1
 800998c:	f7f6 fd18 	bl	80003c0 <__adddf3>
 8009990:	4602      	mov	r2, r0
 8009992:	460b      	mov	r3, r1
 8009994:	4630      	mov	r0, r6
 8009996:	e9c4 2300 	strd	r2, r3, [r4]
 800999a:	4639      	mov	r1, r7
 800999c:	f7f6 fd0e 	bl	80003bc <__aeabi_dsub>
 80099a0:	a37b      	add	r3, pc, #492	; (adr r3, 8009b90 <__ieee754_rem_pio2+0x2f8>)
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	e7e0      	b.n	800996a <__ieee754_rem_pio2+0xd2>
 80099a8:	4a84      	ldr	r2, [pc, #528]	; (8009bbc <__ieee754_rem_pio2+0x324>)
 80099aa:	4592      	cmp	sl, r2
 80099ac:	f300 80d5 	bgt.w	8009b5a <__ieee754_rem_pio2+0x2c2>
 80099b0:	f000 fe20 	bl	800a5f4 <fabs>
 80099b4:	a378      	add	r3, pc, #480	; (adr r3, 8009b98 <__ieee754_rem_pio2+0x300>)
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	4606      	mov	r6, r0
 80099bc:	460f      	mov	r7, r1
 80099be:	f7f6 fbcf 	bl	8000160 <__aeabi_dmul>
 80099c2:	2200      	movs	r2, #0
 80099c4:	4b7e      	ldr	r3, [pc, #504]	; (8009bc0 <__ieee754_rem_pio2+0x328>)
 80099c6:	f7f6 fcfb 	bl	80003c0 <__adddf3>
 80099ca:	f7f6 ff37 	bl	800083c <__aeabi_d2iz>
 80099ce:	4605      	mov	r5, r0
 80099d0:	f7f6 fe42 	bl	8000658 <__aeabi_i2d>
 80099d4:	4602      	mov	r2, r0
 80099d6:	460b      	mov	r3, r1
 80099d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099dc:	a366      	add	r3, pc, #408	; (adr r3, 8009b78 <__ieee754_rem_pio2+0x2e0>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	f7f6 fbbd 	bl	8000160 <__aeabi_dmul>
 80099e6:	4602      	mov	r2, r0
 80099e8:	460b      	mov	r3, r1
 80099ea:	4630      	mov	r0, r6
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f6 fce5 	bl	80003bc <__aeabi_dsub>
 80099f2:	a363      	add	r3, pc, #396	; (adr r3, 8009b80 <__ieee754_rem_pio2+0x2e8>)
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	4680      	mov	r8, r0
 80099fa:	4689      	mov	r9, r1
 80099fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a00:	f7f6 fbae 	bl	8000160 <__aeabi_dmul>
 8009a04:	2d1f      	cmp	r5, #31
 8009a06:	4606      	mov	r6, r0
 8009a08:	460f      	mov	r7, r1
 8009a0a:	dc0e      	bgt.n	8009a2a <__ieee754_rem_pio2+0x192>
 8009a0c:	4b6d      	ldr	r3, [pc, #436]	; (8009bc4 <__ieee754_rem_pio2+0x32c>)
 8009a0e:	1e6a      	subs	r2, r5, #1
 8009a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a14:	4553      	cmp	r3, sl
 8009a16:	d008      	beq.n	8009a2a <__ieee754_rem_pio2+0x192>
 8009a18:	4632      	mov	r2, r6
 8009a1a:	463b      	mov	r3, r7
 8009a1c:	4640      	mov	r0, r8
 8009a1e:	4649      	mov	r1, r9
 8009a20:	f7f6 fccc 	bl	80003bc <__aeabi_dsub>
 8009a24:	e9c4 0100 	strd	r0, r1, [r4]
 8009a28:	e013      	b.n	8009a52 <__ieee754_rem_pio2+0x1ba>
 8009a2a:	463b      	mov	r3, r7
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4649      	mov	r1, r9
 8009a32:	f7f6 fcc3 	bl	80003bc <__aeabi_dsub>
 8009a36:	ea4f 532a 	mov.w	r3, sl, asr #20
 8009a3a:	9305      	str	r3, [sp, #20]
 8009a3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009a40:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8009a44:	f1ba 0f10 	cmp.w	sl, #16
 8009a48:	dc1f      	bgt.n	8009a8a <__ieee754_rem_pio2+0x1f2>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	e9c4 2300 	strd	r2, r3, [r4]
 8009a52:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8009a56:	4640      	mov	r0, r8
 8009a58:	4653      	mov	r3, sl
 8009a5a:	4649      	mov	r1, r9
 8009a5c:	f7f6 fcae 	bl	80003bc <__aeabi_dsub>
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	f7f6 fcaa 	bl	80003bc <__aeabi_dsub>
 8009a68:	460b      	mov	r3, r1
 8009a6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a6e:	9904      	ldr	r1, [sp, #16]
 8009a70:	4602      	mov	r2, r0
 8009a72:	2900      	cmp	r1, #0
 8009a74:	f6bf af47 	bge.w	8009906 <__ieee754_rem_pio2+0x6e>
 8009a78:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8009a7c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8009a80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009a84:	60e3      	str	r3, [r4, #12]
 8009a86:	426d      	negs	r5, r5
 8009a88:	e73d      	b.n	8009906 <__ieee754_rem_pio2+0x6e>
 8009a8a:	a33f      	add	r3, pc, #252	; (adr r3, 8009b88 <__ieee754_rem_pio2+0x2f0>)
 8009a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a94:	f7f6 fb64 	bl	8000160 <__aeabi_dmul>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	460f      	mov	r7, r1
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4649      	mov	r1, r9
 8009aa4:	f7f6 fc8a 	bl	80003bc <__aeabi_dsub>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4682      	mov	sl, r0
 8009aae:	468b      	mov	fp, r1
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	f7f6 fc82 	bl	80003bc <__aeabi_dsub>
 8009ab8:	4632      	mov	r2, r6
 8009aba:	463b      	mov	r3, r7
 8009abc:	f7f6 fc7e 	bl	80003bc <__aeabi_dsub>
 8009ac0:	a333      	add	r3, pc, #204	; (adr r3, 8009b90 <__ieee754_rem_pio2+0x2f8>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ace:	f7f6 fb47 	bl	8000160 <__aeabi_dmul>
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	f7f6 fc71 	bl	80003bc <__aeabi_dsub>
 8009ada:	4602      	mov	r2, r0
 8009adc:	460b      	mov	r3, r1
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460f      	mov	r7, r1
 8009ae2:	4650      	mov	r0, sl
 8009ae4:	4659      	mov	r1, fp
 8009ae6:	f7f6 fc69 	bl	80003bc <__aeabi_dsub>
 8009aea:	9a05      	ldr	r2, [sp, #20]
 8009aec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009af0:	1ad3      	subs	r3, r2, r3
 8009af2:	2b31      	cmp	r3, #49	; 0x31
 8009af4:	dc06      	bgt.n	8009b04 <__ieee754_rem_pio2+0x26c>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	46d0      	mov	r8, sl
 8009afc:	46d9      	mov	r9, fp
 8009afe:	e9c4 2300 	strd	r2, r3, [r4]
 8009b02:	e7a6      	b.n	8009a52 <__ieee754_rem_pio2+0x1ba>
 8009b04:	a326      	add	r3, pc, #152	; (adr r3, 8009ba0 <__ieee754_rem_pio2+0x308>)
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b0e:	f7f6 fb27 	bl	8000160 <__aeabi_dmul>
 8009b12:	4606      	mov	r6, r0
 8009b14:	460f      	mov	r7, r1
 8009b16:	4602      	mov	r2, r0
 8009b18:	460b      	mov	r3, r1
 8009b1a:	4650      	mov	r0, sl
 8009b1c:	4659      	mov	r1, fp
 8009b1e:	f7f6 fc4d 	bl	80003bc <__aeabi_dsub>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4680      	mov	r8, r0
 8009b28:	4689      	mov	r9, r1
 8009b2a:	4650      	mov	r0, sl
 8009b2c:	4659      	mov	r1, fp
 8009b2e:	f7f6 fc45 	bl	80003bc <__aeabi_dsub>
 8009b32:	4632      	mov	r2, r6
 8009b34:	463b      	mov	r3, r7
 8009b36:	f7f6 fc41 	bl	80003bc <__aeabi_dsub>
 8009b3a:	a31b      	add	r3, pc, #108	; (adr r3, 8009ba8 <__ieee754_rem_pio2+0x310>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	4606      	mov	r6, r0
 8009b42:	460f      	mov	r7, r1
 8009b44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b48:	f7f6 fb0a 	bl	8000160 <__aeabi_dmul>
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	f7f6 fc34 	bl	80003bc <__aeabi_dsub>
 8009b54:	4606      	mov	r6, r0
 8009b56:	460f      	mov	r7, r1
 8009b58:	e75e      	b.n	8009a18 <__ieee754_rem_pio2+0x180>
 8009b5a:	4a1b      	ldr	r2, [pc, #108]	; (8009bc8 <__ieee754_rem_pio2+0x330>)
 8009b5c:	4592      	cmp	sl, r2
 8009b5e:	dd35      	ble.n	8009bcc <__ieee754_rem_pio2+0x334>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	f7f6 fc2a 	bl	80003bc <__aeabi_dsub>
 8009b68:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009b6c:	e9c4 0100 	strd	r0, r1, [r4]
 8009b70:	e6a2      	b.n	80098b8 <__ieee754_rem_pio2+0x20>
 8009b72:	bf00      	nop
 8009b74:	f3af 8000 	nop.w
 8009b78:	54400000 	.word	0x54400000
 8009b7c:	3ff921fb 	.word	0x3ff921fb
 8009b80:	1a626331 	.word	0x1a626331
 8009b84:	3dd0b461 	.word	0x3dd0b461
 8009b88:	1a600000 	.word	0x1a600000
 8009b8c:	3dd0b461 	.word	0x3dd0b461
 8009b90:	2e037073 	.word	0x2e037073
 8009b94:	3ba3198a 	.word	0x3ba3198a
 8009b98:	6dc9c883 	.word	0x6dc9c883
 8009b9c:	3fe45f30 	.word	0x3fe45f30
 8009ba0:	2e000000 	.word	0x2e000000
 8009ba4:	3ba3198a 	.word	0x3ba3198a
 8009ba8:	252049c1 	.word	0x252049c1
 8009bac:	397b839a 	.word	0x397b839a
 8009bb0:	3fe921fb 	.word	0x3fe921fb
 8009bb4:	4002d97b 	.word	0x4002d97b
 8009bb8:	3ff921fb 	.word	0x3ff921fb
 8009bbc:	413921fb 	.word	0x413921fb
 8009bc0:	3fe00000 	.word	0x3fe00000
 8009bc4:	0800b548 	.word	0x0800b548
 8009bc8:	7fefffff 	.word	0x7fefffff
 8009bcc:	ea4f 552a 	mov.w	r5, sl, asr #20
 8009bd0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009bd4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8009bd8:	460f      	mov	r7, r1
 8009bda:	4606      	mov	r6, r0
 8009bdc:	f7f6 fe2e 	bl	800083c <__aeabi_d2iz>
 8009be0:	f7f6 fd3a 	bl	8000658 <__aeabi_i2d>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	4630      	mov	r0, r6
 8009bea:	4639      	mov	r1, r7
 8009bec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bf0:	f7f6 fbe4 	bl	80003bc <__aeabi_dsub>
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <__ieee754_rem_pio2+0x3d8>)
 8009bf8:	f7f6 fab2 	bl	8000160 <__aeabi_dmul>
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	4606      	mov	r6, r0
 8009c00:	f7f6 fe1c 	bl	800083c <__aeabi_d2iz>
 8009c04:	f7f6 fd28 	bl	8000658 <__aeabi_i2d>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	4639      	mov	r1, r7
 8009c10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c14:	f7f6 fbd2 	bl	80003bc <__aeabi_dsub>
 8009c18:	2200      	movs	r2, #0
 8009c1a:	4b15      	ldr	r3, [pc, #84]	; (8009c70 <__ieee754_rem_pio2+0x3d8>)
 8009c1c:	f7f6 faa0 	bl	8000160 <__aeabi_dmul>
 8009c20:	f04f 0803 	mov.w	r8, #3
 8009c24:	2600      	movs	r6, #0
 8009c26:	2700      	movs	r7, #0
 8009c28:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c2c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8009c30:	4632      	mov	r2, r6
 8009c32:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8009c36:	463b      	mov	r3, r7
 8009c38:	46c2      	mov	sl, r8
 8009c3a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c3e:	f7f6 fdcb 	bl	80007d8 <__aeabi_dcmpeq>
 8009c42:	2800      	cmp	r0, #0
 8009c44:	d1f4      	bne.n	8009c30 <__ieee754_rem_pio2+0x398>
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <__ieee754_rem_pio2+0x3dc>)
 8009c48:	462a      	mov	r2, r5
 8009c4a:	9301      	str	r3, [sp, #4]
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	4621      	mov	r1, r4
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	a806      	add	r0, sp, #24
 8009c54:	4653      	mov	r3, sl
 8009c56:	f000 f8cd 	bl	8009df4 <__kernel_rem_pio2>
 8009c5a:	9b04      	ldr	r3, [sp, #16]
 8009c5c:	4605      	mov	r5, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f6bf ae51 	bge.w	8009906 <__ieee754_rem_pio2+0x6e>
 8009c64:	6863      	ldr	r3, [r4, #4]
 8009c66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009c6a:	6063      	str	r3, [r4, #4]
 8009c6c:	68e3      	ldr	r3, [r4, #12]
 8009c6e:	e707      	b.n	8009a80 <__ieee754_rem_pio2+0x1e8>
 8009c70:	41700000 	.word	0x41700000
 8009c74:	0800b5c8 	.word	0x0800b5c8

08009c78 <__kernel_cos>:
 8009c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c7c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009c80:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009c84:	4680      	mov	r8, r0
 8009c86:	460f      	mov	r7, r1
 8009c88:	e9cd 2300 	strd	r2, r3, [sp]
 8009c8c:	da04      	bge.n	8009c98 <__kernel_cos+0x20>
 8009c8e:	f7f6 fdd5 	bl	800083c <__aeabi_d2iz>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	f000 8086 	beq.w	8009da4 <__kernel_cos+0x12c>
 8009c98:	4642      	mov	r2, r8
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	4639      	mov	r1, r7
 8009ca0:	f7f6 fa5e 	bl	8000160 <__aeabi_dmul>
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	4b4e      	ldr	r3, [pc, #312]	; (8009de0 <__kernel_cos+0x168>)
 8009ca8:	4604      	mov	r4, r0
 8009caa:	460d      	mov	r5, r1
 8009cac:	f7f6 fa58 	bl	8000160 <__aeabi_dmul>
 8009cb0:	a33f      	add	r3, pc, #252	; (adr r3, 8009db0 <__kernel_cos+0x138>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	4682      	mov	sl, r0
 8009cb8:	468b      	mov	fp, r1
 8009cba:	4620      	mov	r0, r4
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	f7f6 fa4f 	bl	8000160 <__aeabi_dmul>
 8009cc2:	a33d      	add	r3, pc, #244	; (adr r3, 8009db8 <__kernel_cos+0x140>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 fb7a 	bl	80003c0 <__adddf3>
 8009ccc:	4622      	mov	r2, r4
 8009cce:	462b      	mov	r3, r5
 8009cd0:	f7f6 fa46 	bl	8000160 <__aeabi_dmul>
 8009cd4:	a33a      	add	r3, pc, #232	; (adr r3, 8009dc0 <__kernel_cos+0x148>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	f7f6 fb6f 	bl	80003bc <__aeabi_dsub>
 8009cde:	4622      	mov	r2, r4
 8009ce0:	462b      	mov	r3, r5
 8009ce2:	f7f6 fa3d 	bl	8000160 <__aeabi_dmul>
 8009ce6:	a338      	add	r3, pc, #224	; (adr r3, 8009dc8 <__kernel_cos+0x150>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fb68 	bl	80003c0 <__adddf3>
 8009cf0:	4622      	mov	r2, r4
 8009cf2:	462b      	mov	r3, r5
 8009cf4:	f7f6 fa34 	bl	8000160 <__aeabi_dmul>
 8009cf8:	a335      	add	r3, pc, #212	; (adr r3, 8009dd0 <__kernel_cos+0x158>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fb5d 	bl	80003bc <__aeabi_dsub>
 8009d02:	4622      	mov	r2, r4
 8009d04:	462b      	mov	r3, r5
 8009d06:	f7f6 fa2b 	bl	8000160 <__aeabi_dmul>
 8009d0a:	a333      	add	r3, pc, #204	; (adr r3, 8009dd8 <__kernel_cos+0x160>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	f7f6 fb56 	bl	80003c0 <__adddf3>
 8009d14:	4622      	mov	r2, r4
 8009d16:	462b      	mov	r3, r5
 8009d18:	f7f6 fa22 	bl	8000160 <__aeabi_dmul>
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	462b      	mov	r3, r5
 8009d20:	f7f6 fa1e 	bl	8000160 <__aeabi_dmul>
 8009d24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d28:	4604      	mov	r4, r0
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	4640      	mov	r0, r8
 8009d2e:	4639      	mov	r1, r7
 8009d30:	f7f6 fa16 	bl	8000160 <__aeabi_dmul>
 8009d34:	460b      	mov	r3, r1
 8009d36:	4602      	mov	r2, r0
 8009d38:	4629      	mov	r1, r5
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	f7f6 fb3e 	bl	80003bc <__aeabi_dsub>
 8009d40:	4b28      	ldr	r3, [pc, #160]	; (8009de4 <__kernel_cos+0x16c>)
 8009d42:	4680      	mov	r8, r0
 8009d44:	429e      	cmp	r6, r3
 8009d46:	4689      	mov	r9, r1
 8009d48:	dc0e      	bgt.n	8009d68 <__kernel_cos+0xf0>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4650      	mov	r0, sl
 8009d50:	4659      	mov	r1, fp
 8009d52:	f7f6 fb33 	bl	80003bc <__aeabi_dsub>
 8009d56:	4602      	mov	r2, r0
 8009d58:	2000      	movs	r0, #0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	4922      	ldr	r1, [pc, #136]	; (8009de8 <__kernel_cos+0x170>)
 8009d5e:	f7f6 fb2d 	bl	80003bc <__aeabi_dsub>
 8009d62:	b003      	add	sp, #12
 8009d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d68:	2400      	movs	r4, #0
 8009d6a:	4b20      	ldr	r3, [pc, #128]	; (8009dec <__kernel_cos+0x174>)
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	429e      	cmp	r6, r3
 8009d70:	bfcc      	ite	gt
 8009d72:	4d1f      	ldrgt	r5, [pc, #124]	; (8009df0 <__kernel_cos+0x178>)
 8009d74:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009d78:	462b      	mov	r3, r5
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	491a      	ldr	r1, [pc, #104]	; (8009de8 <__kernel_cos+0x170>)
 8009d7e:	f7f6 fb1d 	bl	80003bc <__aeabi_dsub>
 8009d82:	4622      	mov	r2, r4
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	462b      	mov	r3, r5
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	f7f6 fb15 	bl	80003bc <__aeabi_dsub>
 8009d92:	4642      	mov	r2, r8
 8009d94:	464b      	mov	r3, r9
 8009d96:	f7f6 fb11 	bl	80003bc <__aeabi_dsub>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4630      	mov	r0, r6
 8009da0:	4639      	mov	r1, r7
 8009da2:	e7dc      	b.n	8009d5e <__kernel_cos+0xe6>
 8009da4:	2000      	movs	r0, #0
 8009da6:	4910      	ldr	r1, [pc, #64]	; (8009de8 <__kernel_cos+0x170>)
 8009da8:	e7db      	b.n	8009d62 <__kernel_cos+0xea>
 8009daa:	bf00      	nop
 8009dac:	f3af 8000 	nop.w
 8009db0:	be8838d4 	.word	0xbe8838d4
 8009db4:	bda8fae9 	.word	0xbda8fae9
 8009db8:	bdb4b1c4 	.word	0xbdb4b1c4
 8009dbc:	3e21ee9e 	.word	0x3e21ee9e
 8009dc0:	809c52ad 	.word	0x809c52ad
 8009dc4:	3e927e4f 	.word	0x3e927e4f
 8009dc8:	19cb1590 	.word	0x19cb1590
 8009dcc:	3efa01a0 	.word	0x3efa01a0
 8009dd0:	16c15177 	.word	0x16c15177
 8009dd4:	3f56c16c 	.word	0x3f56c16c
 8009dd8:	5555554c 	.word	0x5555554c
 8009ddc:	3fa55555 	.word	0x3fa55555
 8009de0:	3fe00000 	.word	0x3fe00000
 8009de4:	3fd33332 	.word	0x3fd33332
 8009de8:	3ff00000 	.word	0x3ff00000
 8009dec:	3fe90000 	.word	0x3fe90000
 8009df0:	3fd20000 	.word	0x3fd20000

08009df4 <__kernel_rem_pio2>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8009dfc:	9308      	str	r3, [sp, #32]
 8009dfe:	9101      	str	r1, [sp, #4]
 8009e00:	4bc0      	ldr	r3, [pc, #768]	; (800a104 <__kernel_rem_pio2+0x310>)
 8009e02:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009e04:	f112 0f14 	cmn.w	r2, #20
 8009e08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e0c:	bfa8      	it	ge
 8009e0e:	1ed4      	subge	r4, r2, #3
 8009e10:	9304      	str	r3, [sp, #16]
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	bfb8      	it	lt
 8009e16:	2400      	movlt	r4, #0
 8009e18:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e1c:	9306      	str	r3, [sp, #24]
 8009e1e:	bfa4      	itt	ge
 8009e20:	2318      	movge	r3, #24
 8009e22:	fb94 f4f3 	sdivge	r4, r4, r3
 8009e26:	f06f 0317 	mvn.w	r3, #23
 8009e2a:	fb04 3303 	mla	r3, r4, r3, r3
 8009e2e:	eb03 0a02 	add.w	sl, r3, r2
 8009e32:	9a06      	ldr	r2, [sp, #24]
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	1aa7      	subs	r7, r4, r2
 8009e38:	eb03 0802 	add.w	r8, r3, r2
 8009e3c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009e3e:	2500      	movs	r5, #0
 8009e40:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009e44:	2200      	movs	r2, #0
 8009e46:	2300      	movs	r3, #0
 8009e48:	9009      	str	r0, [sp, #36]	; 0x24
 8009e4a:	ae20      	add	r6, sp, #128	; 0x80
 8009e4c:	4545      	cmp	r5, r8
 8009e4e:	dd19      	ble.n	8009e84 <__kernel_rem_pio2+0x90>
 8009e50:	9b08      	ldr	r3, [sp, #32]
 8009e52:	aa20      	add	r2, sp, #128	; 0x80
 8009e54:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8009e58:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009e5c:	f1c3 0301 	rsb	r3, r3, #1
 8009e60:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8009e64:	9307      	str	r3, [sp, #28]
 8009e66:	9b07      	ldr	r3, [sp, #28]
 8009e68:	9a04      	ldr	r2, [sp, #16]
 8009e6a:	4443      	add	r3, r8
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	db35      	blt.n	8009edc <__kernel_rem_pio2+0xe8>
 8009e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e72:	2200      	movs	r2, #0
 8009e74:	f1a3 0908 	sub.w	r9, r3, #8
 8009e78:	2300      	movs	r3, #0
 8009e7a:	462f      	mov	r7, r5
 8009e7c:	2600      	movs	r6, #0
 8009e7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e82:	e01f      	b.n	8009ec4 <__kernel_rem_pio2+0xd0>
 8009e84:	42ef      	cmn	r7, r5
 8009e86:	d40b      	bmi.n	8009ea0 <__kernel_rem_pio2+0xac>
 8009e88:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009e8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e90:	f7f6 fbe2 	bl	8000658 <__aeabi_i2d>
 8009e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e98:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009e9c:	3501      	adds	r5, #1
 8009e9e:	e7d5      	b.n	8009e4c <__kernel_rem_pio2+0x58>
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	e7f8      	b.n	8009e98 <__kernel_rem_pio2+0xa4>
 8009ea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009eaa:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8009eae:	f7f6 f957 	bl	8000160 <__aeabi_dmul>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eba:	f7f6 fa81 	bl	80003c0 <__adddf3>
 8009ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	9b06      	ldr	r3, [sp, #24]
 8009ec6:	3f08      	subs	r7, #8
 8009ec8:	429e      	cmp	r6, r3
 8009eca:	ddec      	ble.n	8009ea6 <__kernel_rem_pio2+0xb2>
 8009ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ed0:	3508      	adds	r5, #8
 8009ed2:	e8eb 2302 	strd	r2, r3, [fp], #8
 8009ed6:	f108 0801 	add.w	r8, r8, #1
 8009eda:	e7c4      	b.n	8009e66 <__kernel_rem_pio2+0x72>
 8009edc:	9b04      	ldr	r3, [sp, #16]
 8009ede:	aa0c      	add	r2, sp, #48	; 0x30
 8009ee0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009ee4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ee6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009ee8:	9f04      	ldr	r7, [sp, #16]
 8009eea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009eee:	930a      	str	r3, [sp, #40]	; 0x28
 8009ef0:	463e      	mov	r6, r7
 8009ef2:	ab98      	add	r3, sp, #608	; 0x260
 8009ef4:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8009ef8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009efc:	f8cd b008 	str.w	fp, [sp, #8]
 8009f00:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	dc71      	bgt.n	8009fec <__kernel_rem_pio2+0x1f8>
 8009f08:	4652      	mov	r2, sl
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	4629      	mov	r1, r5
 8009f0e:	f000 fbf7 	bl	800a700 <scalbn>
 8009f12:	2200      	movs	r2, #0
 8009f14:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009f18:	4604      	mov	r4, r0
 8009f1a:	460d      	mov	r5, r1
 8009f1c:	f7f6 f920 	bl	8000160 <__aeabi_dmul>
 8009f20:	f000 fb6e 	bl	800a600 <floor>
 8009f24:	2200      	movs	r2, #0
 8009f26:	4b78      	ldr	r3, [pc, #480]	; (800a108 <__kernel_rem_pio2+0x314>)
 8009f28:	f7f6 f91a 	bl	8000160 <__aeabi_dmul>
 8009f2c:	4602      	mov	r2, r0
 8009f2e:	460b      	mov	r3, r1
 8009f30:	4620      	mov	r0, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	f7f6 fa42 	bl	80003bc <__aeabi_dsub>
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	f7f6 fc7e 	bl	800083c <__aeabi_d2iz>
 8009f40:	9007      	str	r0, [sp, #28]
 8009f42:	f7f6 fb89 	bl	8000658 <__aeabi_i2d>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	f7f6 fa35 	bl	80003bc <__aeabi_dsub>
 8009f52:	f1ba 0f00 	cmp.w	sl, #0
 8009f56:	4680      	mov	r8, r0
 8009f58:	4689      	mov	r9, r1
 8009f5a:	dd70      	ble.n	800a03e <__kernel_rem_pio2+0x24a>
 8009f5c:	1e7a      	subs	r2, r7, #1
 8009f5e:	ab0c      	add	r3, sp, #48	; 0x30
 8009f60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009f64:	9c07      	ldr	r4, [sp, #28]
 8009f66:	f1ca 0118 	rsb	r1, sl, #24
 8009f6a:	fa40 f301 	asr.w	r3, r0, r1
 8009f6e:	441c      	add	r4, r3
 8009f70:	408b      	lsls	r3, r1
 8009f72:	1ac0      	subs	r0, r0, r3
 8009f74:	ab0c      	add	r3, sp, #48	; 0x30
 8009f76:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009f7a:	f1ca 0317 	rsb	r3, sl, #23
 8009f7e:	9407      	str	r4, [sp, #28]
 8009f80:	fa40 f303 	asr.w	r3, r0, r3
 8009f84:	9302      	str	r3, [sp, #8]
 8009f86:	9b02      	ldr	r3, [sp, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	dd66      	ble.n	800a05a <__kernel_rem_pio2+0x266>
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009f92:	4614      	mov	r4, r2
 8009f94:	9b07      	ldr	r3, [sp, #28]
 8009f96:	3301      	adds	r3, #1
 8009f98:	9307      	str	r3, [sp, #28]
 8009f9a:	4297      	cmp	r7, r2
 8009f9c:	f300 809f 	bgt.w	800a0de <__kernel_rem_pio2+0x2ea>
 8009fa0:	f1ba 0f00 	cmp.w	sl, #0
 8009fa4:	dd07      	ble.n	8009fb6 <__kernel_rem_pio2+0x1c2>
 8009fa6:	f1ba 0f01 	cmp.w	sl, #1
 8009faa:	f000 80b9 	beq.w	800a120 <__kernel_rem_pio2+0x32c>
 8009fae:	f1ba 0f02 	cmp.w	sl, #2
 8009fb2:	f000 80bf 	beq.w	800a134 <__kernel_rem_pio2+0x340>
 8009fb6:	9b02      	ldr	r3, [sp, #8]
 8009fb8:	2b02      	cmp	r3, #2
 8009fba:	d14e      	bne.n	800a05a <__kernel_rem_pio2+0x266>
 8009fbc:	4642      	mov	r2, r8
 8009fbe:	464b      	mov	r3, r9
 8009fc0:	2000      	movs	r0, #0
 8009fc2:	4952      	ldr	r1, [pc, #328]	; (800a10c <__kernel_rem_pio2+0x318>)
 8009fc4:	f7f6 f9fa 	bl	80003bc <__aeabi_dsub>
 8009fc8:	4680      	mov	r8, r0
 8009fca:	4689      	mov	r9, r1
 8009fcc:	2c00      	cmp	r4, #0
 8009fce:	d044      	beq.n	800a05a <__kernel_rem_pio2+0x266>
 8009fd0:	4652      	mov	r2, sl
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	494d      	ldr	r1, [pc, #308]	; (800a10c <__kernel_rem_pio2+0x318>)
 8009fd6:	f000 fb93 	bl	800a700 <scalbn>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	460b      	mov	r3, r1
 8009fde:	4640      	mov	r0, r8
 8009fe0:	4649      	mov	r1, r9
 8009fe2:	f7f6 f9eb 	bl	80003bc <__aeabi_dsub>
 8009fe6:	4680      	mov	r8, r0
 8009fe8:	4689      	mov	r9, r1
 8009fea:	e036      	b.n	800a05a <__kernel_rem_pio2+0x266>
 8009fec:	2200      	movs	r2, #0
 8009fee:	4b48      	ldr	r3, [pc, #288]	; (800a110 <__kernel_rem_pio2+0x31c>)
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 f8b4 	bl	8000160 <__aeabi_dmul>
 8009ff8:	f7f6 fc20 	bl	800083c <__aeabi_d2iz>
 8009ffc:	f7f6 fb2c 	bl	8000658 <__aeabi_i2d>
 800a000:	2200      	movs	r2, #0
 800a002:	4b44      	ldr	r3, [pc, #272]	; (800a114 <__kernel_rem_pio2+0x320>)
 800a004:	4680      	mov	r8, r0
 800a006:	4689      	mov	r9, r1
 800a008:	f7f6 f8aa 	bl	8000160 <__aeabi_dmul>
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	4620      	mov	r0, r4
 800a012:	4629      	mov	r1, r5
 800a014:	f7f6 f9d2 	bl	80003bc <__aeabi_dsub>
 800a018:	f7f6 fc10 	bl	800083c <__aeabi_d2iz>
 800a01c:	9b02      	ldr	r3, [sp, #8]
 800a01e:	3e01      	subs	r6, #1
 800a020:	f843 0b04 	str.w	r0, [r3], #4
 800a024:	9302      	str	r3, [sp, #8]
 800a026:	ab70      	add	r3, sp, #448	; 0x1c0
 800a028:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a02c:	4640      	mov	r0, r8
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	4649      	mov	r1, r9
 800a034:	f7f6 f9c4 	bl	80003c0 <__adddf3>
 800a038:	4604      	mov	r4, r0
 800a03a:	460d      	mov	r5, r1
 800a03c:	e762      	b.n	8009f04 <__kernel_rem_pio2+0x110>
 800a03e:	d105      	bne.n	800a04c <__kernel_rem_pio2+0x258>
 800a040:	1e7b      	subs	r3, r7, #1
 800a042:	aa0c      	add	r2, sp, #48	; 0x30
 800a044:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a048:	15c3      	asrs	r3, r0, #23
 800a04a:	e79b      	b.n	8009f84 <__kernel_rem_pio2+0x190>
 800a04c:	2200      	movs	r2, #0
 800a04e:	4b32      	ldr	r3, [pc, #200]	; (800a118 <__kernel_rem_pio2+0x324>)
 800a050:	f7f6 fbe0 	bl	8000814 <__aeabi_dcmpge>
 800a054:	2800      	cmp	r0, #0
 800a056:	d13f      	bne.n	800a0d8 <__kernel_rem_pio2+0x2e4>
 800a058:	9002      	str	r0, [sp, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	2300      	movs	r3, #0
 800a05e:	4640      	mov	r0, r8
 800a060:	4649      	mov	r1, r9
 800a062:	f7f6 fbb9 	bl	80007d8 <__aeabi_dcmpeq>
 800a066:	2800      	cmp	r0, #0
 800a068:	f000 80b5 	beq.w	800a1d6 <__kernel_rem_pio2+0x3e2>
 800a06c:	1e7c      	subs	r4, r7, #1
 800a06e:	4623      	mov	r3, r4
 800a070:	2200      	movs	r2, #0
 800a072:	9904      	ldr	r1, [sp, #16]
 800a074:	428b      	cmp	r3, r1
 800a076:	da64      	bge.n	800a142 <__kernel_rem_pio2+0x34e>
 800a078:	2a00      	cmp	r2, #0
 800a07a:	d078      	beq.n	800a16e <__kernel_rem_pio2+0x37a>
 800a07c:	ab0c      	add	r3, sp, #48	; 0x30
 800a07e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800a082:	f1aa 0a18 	sub.w	sl, sl, #24
 800a086:	2b00      	cmp	r3, #0
 800a088:	f000 80a3 	beq.w	800a1d2 <__kernel_rem_pio2+0x3de>
 800a08c:	4652      	mov	r2, sl
 800a08e:	2000      	movs	r0, #0
 800a090:	491e      	ldr	r1, [pc, #120]	; (800a10c <__kernel_rem_pio2+0x318>)
 800a092:	f000 fb35 	bl	800a700 <scalbn>
 800a096:	46a2      	mov	sl, r4
 800a098:	4606      	mov	r6, r0
 800a09a:	460f      	mov	r7, r1
 800a09c:	f04f 0800 	mov.w	r8, #0
 800a0a0:	00e3      	lsls	r3, r4, #3
 800a0a2:	9306      	str	r3, [sp, #24]
 800a0a4:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800a110 <__kernel_rem_pio2+0x31c>
 800a0a8:	ab70      	add	r3, sp, #448	; 0x1c0
 800a0aa:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800a0ae:	f1ba 0f00 	cmp.w	sl, #0
 800a0b2:	f280 80c6 	bge.w	800a242 <__kernel_rem_pio2+0x44e>
 800a0b6:	4627      	mov	r7, r4
 800a0b8:	f04f 0800 	mov.w	r8, #0
 800a0bc:	2f00      	cmp	r7, #0
 800a0be:	f2c0 80f3 	blt.w	800a2a8 <__kernel_rem_pio2+0x4b4>
 800a0c2:	4b16      	ldr	r3, [pc, #88]	; (800a11c <__kernel_rem_pio2+0x328>)
 800a0c4:	f04f 0a00 	mov.w	sl, #0
 800a0c8:	461d      	mov	r5, r3
 800a0ca:	ab70      	add	r3, sp, #448	; 0x1c0
 800a0cc:	f04f 0b00 	mov.w	fp, #0
 800a0d0:	2600      	movs	r6, #0
 800a0d2:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800a0d6:	e0d9      	b.n	800a28c <__kernel_rem_pio2+0x498>
 800a0d8:	2302      	movs	r3, #2
 800a0da:	9302      	str	r3, [sp, #8]
 800a0dc:	e756      	b.n	8009f8c <__kernel_rem_pio2+0x198>
 800a0de:	f8db 3000 	ldr.w	r3, [fp]
 800a0e2:	b954      	cbnz	r4, 800a0fa <__kernel_rem_pio2+0x306>
 800a0e4:	b123      	cbz	r3, 800a0f0 <__kernel_rem_pio2+0x2fc>
 800a0e6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800a0ea:	f8cb 3000 	str.w	r3, [fp]
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	461c      	mov	r4, r3
 800a0f2:	3201      	adds	r2, #1
 800a0f4:	f10b 0b04 	add.w	fp, fp, #4
 800a0f8:	e74f      	b.n	8009f9a <__kernel_rem_pio2+0x1a6>
 800a0fa:	1acb      	subs	r3, r1, r3
 800a0fc:	f8cb 3000 	str.w	r3, [fp]
 800a100:	4623      	mov	r3, r4
 800a102:	e7f5      	b.n	800a0f0 <__kernel_rem_pio2+0x2fc>
 800a104:	0800b710 	.word	0x0800b710
 800a108:	40200000 	.word	0x40200000
 800a10c:	3ff00000 	.word	0x3ff00000
 800a110:	3e700000 	.word	0x3e700000
 800a114:	41700000 	.word	0x41700000
 800a118:	3fe00000 	.word	0x3fe00000
 800a11c:	0800b6d0 	.word	0x0800b6d0
 800a120:	1e7a      	subs	r2, r7, #1
 800a122:	ab0c      	add	r3, sp, #48	; 0x30
 800a124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a128:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a12c:	a90c      	add	r1, sp, #48	; 0x30
 800a12e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a132:	e740      	b.n	8009fb6 <__kernel_rem_pio2+0x1c2>
 800a134:	1e7a      	subs	r2, r7, #1
 800a136:	ab0c      	add	r3, sp, #48	; 0x30
 800a138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a140:	e7f4      	b.n	800a12c <__kernel_rem_pio2+0x338>
 800a142:	a90c      	add	r1, sp, #48	; 0x30
 800a144:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a148:	3b01      	subs	r3, #1
 800a14a:	430a      	orrs	r2, r1
 800a14c:	e791      	b.n	800a072 <__kernel_rem_pio2+0x27e>
 800a14e:	3401      	adds	r4, #1
 800a150:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a154:	2a00      	cmp	r2, #0
 800a156:	d0fa      	beq.n	800a14e <__kernel_rem_pio2+0x35a>
 800a158:	9b08      	ldr	r3, [sp, #32]
 800a15a:	1c7e      	adds	r6, r7, #1
 800a15c:	18fd      	adds	r5, r7, r3
 800a15e:	ab20      	add	r3, sp, #128	; 0x80
 800a160:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a164:	443c      	add	r4, r7
 800a166:	42b4      	cmp	r4, r6
 800a168:	da04      	bge.n	800a174 <__kernel_rem_pio2+0x380>
 800a16a:	4627      	mov	r7, r4
 800a16c:	e6c0      	b.n	8009ef0 <__kernel_rem_pio2+0xfc>
 800a16e:	2401      	movs	r4, #1
 800a170:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a172:	e7ed      	b.n	800a150 <__kernel_rem_pio2+0x35c>
 800a174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a176:	462f      	mov	r7, r5
 800a178:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a17c:	f7f6 fa6c 	bl	8000658 <__aeabi_i2d>
 800a180:	f04f 0b00 	mov.w	fp, #0
 800a184:	f04f 0800 	mov.w	r8, #0
 800a188:	f04f 0900 	mov.w	r9, #0
 800a18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18e:	e8e7 0102 	strd	r0, r1, [r7], #8
 800a192:	3b08      	subs	r3, #8
 800a194:	9302      	str	r3, [sp, #8]
 800a196:	9b06      	ldr	r3, [sp, #24]
 800a198:	459b      	cmp	fp, r3
 800a19a:	dd07      	ble.n	800a1ac <__kernel_rem_pio2+0x3b8>
 800a19c:	ab70      	add	r3, sp, #448	; 0x1c0
 800a19e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a1a2:	463d      	mov	r5, r7
 800a1a4:	e9c3 8900 	strd	r8, r9, [r3]
 800a1a8:	3601      	adds	r6, #1
 800a1aa:	e7dc      	b.n	800a166 <__kernel_rem_pio2+0x372>
 800a1ac:	9902      	ldr	r1, [sp, #8]
 800a1ae:	f10b 0b01 	add.w	fp, fp, #1
 800a1b2:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800a1b6:	9102      	str	r1, [sp, #8]
 800a1b8:	e875 0102 	ldrd	r0, r1, [r5], #-8
 800a1bc:	f7f5 ffd0 	bl	8000160 <__aeabi_dmul>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 f8fa 	bl	80003c0 <__adddf3>
 800a1cc:	4680      	mov	r8, r0
 800a1ce:	4689      	mov	r9, r1
 800a1d0:	e7e1      	b.n	800a196 <__kernel_rem_pio2+0x3a2>
 800a1d2:	3c01      	subs	r4, #1
 800a1d4:	e752      	b.n	800a07c <__kernel_rem_pio2+0x288>
 800a1d6:	f1ca 0200 	rsb	r2, sl, #0
 800a1da:	4640      	mov	r0, r8
 800a1dc:	4649      	mov	r1, r9
 800a1de:	f000 fa8f 	bl	800a700 <scalbn>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	4ba5      	ldr	r3, [pc, #660]	; (800a47c <__kernel_rem_pio2+0x688>)
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	460d      	mov	r5, r1
 800a1ea:	f7f6 fb13 	bl	8000814 <__aeabi_dcmpge>
 800a1ee:	b1f8      	cbz	r0, 800a230 <__kernel_rem_pio2+0x43c>
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	4ba3      	ldr	r3, [pc, #652]	; (800a480 <__kernel_rem_pio2+0x68c>)
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f7f5 ffb2 	bl	8000160 <__aeabi_dmul>
 800a1fc:	f7f6 fb1e 	bl	800083c <__aeabi_d2iz>
 800a200:	4606      	mov	r6, r0
 800a202:	f7f6 fa29 	bl	8000658 <__aeabi_i2d>
 800a206:	2200      	movs	r2, #0
 800a208:	4b9c      	ldr	r3, [pc, #624]	; (800a47c <__kernel_rem_pio2+0x688>)
 800a20a:	f7f5 ffa9 	bl	8000160 <__aeabi_dmul>
 800a20e:	460b      	mov	r3, r1
 800a210:	4602      	mov	r2, r0
 800a212:	4629      	mov	r1, r5
 800a214:	4620      	mov	r0, r4
 800a216:	f7f6 f8d1 	bl	80003bc <__aeabi_dsub>
 800a21a:	f7f6 fb0f 	bl	800083c <__aeabi_d2iz>
 800a21e:	1c7c      	adds	r4, r7, #1
 800a220:	ab0c      	add	r3, sp, #48	; 0x30
 800a222:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a226:	f10a 0a18 	add.w	sl, sl, #24
 800a22a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800a22e:	e72d      	b.n	800a08c <__kernel_rem_pio2+0x298>
 800a230:	4620      	mov	r0, r4
 800a232:	4629      	mov	r1, r5
 800a234:	f7f6 fb02 	bl	800083c <__aeabi_d2iz>
 800a238:	ab0c      	add	r3, sp, #48	; 0x30
 800a23a:	463c      	mov	r4, r7
 800a23c:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800a240:	e724      	b.n	800a08c <__kernel_rem_pio2+0x298>
 800a242:	ab0c      	add	r3, sp, #48	; 0x30
 800a244:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800a248:	f7f6 fa06 	bl	8000658 <__aeabi_i2d>
 800a24c:	4632      	mov	r2, r6
 800a24e:	463b      	mov	r3, r7
 800a250:	f7f5 ff86 	bl	8000160 <__aeabi_dmul>
 800a254:	4642      	mov	r2, r8
 800a256:	e86b 0102 	strd	r0, r1, [fp], #-8
 800a25a:	464b      	mov	r3, r9
 800a25c:	4630      	mov	r0, r6
 800a25e:	4639      	mov	r1, r7
 800a260:	f7f5 ff7e 	bl	8000160 <__aeabi_dmul>
 800a264:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a268:	4606      	mov	r6, r0
 800a26a:	460f      	mov	r7, r1
 800a26c:	e71f      	b.n	800a0ae <__kernel_rem_pio2+0x2ba>
 800a26e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800a272:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a276:	f7f5 ff73 	bl	8000160 <__aeabi_dmul>
 800a27a:	4602      	mov	r2, r0
 800a27c:	460b      	mov	r3, r1
 800a27e:	4650      	mov	r0, sl
 800a280:	4659      	mov	r1, fp
 800a282:	f7f6 f89d 	bl	80003c0 <__adddf3>
 800a286:	4682      	mov	sl, r0
 800a288:	468b      	mov	fp, r1
 800a28a:	3601      	adds	r6, #1
 800a28c:	9b04      	ldr	r3, [sp, #16]
 800a28e:	429e      	cmp	r6, r3
 800a290:	dc01      	bgt.n	800a296 <__kernel_rem_pio2+0x4a2>
 800a292:	45b0      	cmp	r8, r6
 800a294:	daeb      	bge.n	800a26e <__kernel_rem_pio2+0x47a>
 800a296:	ab48      	add	r3, sp, #288	; 0x120
 800a298:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a29c:	e9c3 ab00 	strd	sl, fp, [r3]
 800a2a0:	3f01      	subs	r7, #1
 800a2a2:	f108 0801 	add.w	r8, r8, #1
 800a2a6:	e709      	b.n	800a0bc <__kernel_rem_pio2+0x2c8>
 800a2a8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	dc09      	bgt.n	800a2c2 <__kernel_rem_pio2+0x4ce>
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dc34      	bgt.n	800a31c <__kernel_rem_pio2+0x528>
 800a2b2:	d05e      	beq.n	800a372 <__kernel_rem_pio2+0x57e>
 800a2b4:	9b07      	ldr	r3, [sp, #28]
 800a2b6:	f003 0007 	and.w	r0, r3, #7
 800a2ba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800a2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c2:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800a2c4:	2b03      	cmp	r3, #3
 800a2c6:	d1f5      	bne.n	800a2b4 <__kernel_rem_pio2+0x4c0>
 800a2c8:	9a06      	ldr	r2, [sp, #24]
 800a2ca:	ab48      	add	r3, sp, #288	; 0x120
 800a2cc:	441a      	add	r2, r3
 800a2ce:	4615      	mov	r5, r2
 800a2d0:	4692      	mov	sl, r2
 800a2d2:	46a3      	mov	fp, r4
 800a2d4:	f1bb 0f00 	cmp.w	fp, #0
 800a2d8:	dc7a      	bgt.n	800a3d0 <__kernel_rem_pio2+0x5dc>
 800a2da:	46aa      	mov	sl, r5
 800a2dc:	46a3      	mov	fp, r4
 800a2de:	f1bb 0f01 	cmp.w	fp, #1
 800a2e2:	f300 8094 	bgt.w	800a40e <__kernel_rem_pio2+0x61a>
 800a2e6:	2700      	movs	r7, #0
 800a2e8:	463e      	mov	r6, r7
 800a2ea:	2c01      	cmp	r4, #1
 800a2ec:	f300 80ae 	bgt.w	800a44c <__kernel_rem_pio2+0x658>
 800a2f0:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800a2f4:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800a2f8:	9b02      	ldr	r3, [sp, #8]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f040 80b0 	bne.w	800a460 <__kernel_rem_pio2+0x66c>
 800a300:	4603      	mov	r3, r0
 800a302:	462a      	mov	r2, r5
 800a304:	9801      	ldr	r0, [sp, #4]
 800a306:	e9c0 2300 	strd	r2, r3, [r0]
 800a30a:	4622      	mov	r2, r4
 800a30c:	460b      	mov	r3, r1
 800a30e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a312:	463a      	mov	r2, r7
 800a314:	4633      	mov	r3, r6
 800a316:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a31a:	e7cb      	b.n	800a2b4 <__kernel_rem_pio2+0x4c0>
 800a31c:	2000      	movs	r0, #0
 800a31e:	9a06      	ldr	r2, [sp, #24]
 800a320:	ab48      	add	r3, sp, #288	; 0x120
 800a322:	441a      	add	r2, r3
 800a324:	4615      	mov	r5, r2
 800a326:	46a0      	mov	r8, r4
 800a328:	4601      	mov	r1, r0
 800a32a:	f1b8 0f00 	cmp.w	r8, #0
 800a32e:	da3c      	bge.n	800a3aa <__kernel_rem_pio2+0x5b6>
 800a330:	9b02      	ldr	r3, [sp, #8]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d040      	beq.n	800a3b8 <__kernel_rem_pio2+0x5c4>
 800a336:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800a33a:	4602      	mov	r2, r0
 800a33c:	462b      	mov	r3, r5
 800a33e:	9d01      	ldr	r5, [sp, #4]
 800a340:	2601      	movs	r6, #1
 800a342:	e9c5 2300 	strd	r2, r3, [r5]
 800a346:	460b      	mov	r3, r1
 800a348:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800a34c:	f7f6 f836 	bl	80003bc <__aeabi_dsub>
 800a350:	4684      	mov	ip, r0
 800a352:	460f      	mov	r7, r1
 800a354:	ad48      	add	r5, sp, #288	; 0x120
 800a356:	42b4      	cmp	r4, r6
 800a358:	f105 0508 	add.w	r5, r5, #8
 800a35c:	da2e      	bge.n	800a3bc <__kernel_rem_pio2+0x5c8>
 800a35e:	9b02      	ldr	r3, [sp, #8]
 800a360:	b10b      	cbz	r3, 800a366 <__kernel_rem_pio2+0x572>
 800a362:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a366:	4662      	mov	r2, ip
 800a368:	463b      	mov	r3, r7
 800a36a:	9901      	ldr	r1, [sp, #4]
 800a36c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a370:	e7a0      	b.n	800a2b4 <__kernel_rem_pio2+0x4c0>
 800a372:	9a06      	ldr	r2, [sp, #24]
 800a374:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800a376:	ab48      	add	r3, sp, #288	; 0x120
 800a378:	441a      	add	r2, r3
 800a37a:	4615      	mov	r5, r2
 800a37c:	4637      	mov	r7, r6
 800a37e:	2c00      	cmp	r4, #0
 800a380:	da09      	bge.n	800a396 <__kernel_rem_pio2+0x5a2>
 800a382:	9b02      	ldr	r3, [sp, #8]
 800a384:	b10b      	cbz	r3, 800a38a <__kernel_rem_pio2+0x596>
 800a386:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800a38a:	4632      	mov	r2, r6
 800a38c:	463b      	mov	r3, r7
 800a38e:	9901      	ldr	r1, [sp, #4]
 800a390:	e9c1 2300 	strd	r2, r3, [r1]
 800a394:	e78e      	b.n	800a2b4 <__kernel_rem_pio2+0x4c0>
 800a396:	4630      	mov	r0, r6
 800a398:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a39c:	4639      	mov	r1, r7
 800a39e:	f7f6 f80f 	bl	80003c0 <__adddf3>
 800a3a2:	3c01      	subs	r4, #1
 800a3a4:	4606      	mov	r6, r0
 800a3a6:	460f      	mov	r7, r1
 800a3a8:	e7e9      	b.n	800a37e <__kernel_rem_pio2+0x58a>
 800a3aa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a3ae:	f7f6 f807 	bl	80003c0 <__adddf3>
 800a3b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3b6:	e7b8      	b.n	800a32a <__kernel_rem_pio2+0x536>
 800a3b8:	460d      	mov	r5, r1
 800a3ba:	e7be      	b.n	800a33a <__kernel_rem_pio2+0x546>
 800a3bc:	4660      	mov	r0, ip
 800a3be:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	f7f5 fffc 	bl	80003c0 <__adddf3>
 800a3c8:	3601      	adds	r6, #1
 800a3ca:	4684      	mov	ip, r0
 800a3cc:	460f      	mov	r7, r1
 800a3ce:	e7c2      	b.n	800a356 <__kernel_rem_pio2+0x562>
 800a3d0:	e9da 6700 	ldrd	r6, r7, [sl]
 800a3d4:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800a3d8:	4632      	mov	r2, r6
 800a3da:	463b      	mov	r3, r7
 800a3dc:	4640      	mov	r0, r8
 800a3de:	4649      	mov	r1, r9
 800a3e0:	f7f5 ffee 	bl	80003c0 <__adddf3>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f7f5 ffe4 	bl	80003bc <__aeabi_dsub>
 800a3f4:	4632      	mov	r2, r6
 800a3f6:	463b      	mov	r3, r7
 800a3f8:	f7f5 ffe2 	bl	80003c0 <__adddf3>
 800a3fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a400:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a404:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a408:	e9ca 2300 	strd	r2, r3, [sl]
 800a40c:	e762      	b.n	800a2d4 <__kernel_rem_pio2+0x4e0>
 800a40e:	e9da 8900 	ldrd	r8, r9, [sl]
 800a412:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800a416:	4642      	mov	r2, r8
 800a418:	464b      	mov	r3, r9
 800a41a:	4630      	mov	r0, r6
 800a41c:	4639      	mov	r1, r7
 800a41e:	f7f5 ffcf 	bl	80003c0 <__adddf3>
 800a422:	4602      	mov	r2, r0
 800a424:	460b      	mov	r3, r1
 800a426:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a42a:	4630      	mov	r0, r6
 800a42c:	4639      	mov	r1, r7
 800a42e:	f7f5 ffc5 	bl	80003bc <__aeabi_dsub>
 800a432:	4642      	mov	r2, r8
 800a434:	464b      	mov	r3, r9
 800a436:	f7f5 ffc3 	bl	80003c0 <__adddf3>
 800a43a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a43e:	e86a 0102 	strd	r0, r1, [sl], #-8
 800a442:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a446:	e9ca 2300 	strd	r2, r3, [sl]
 800a44a:	e748      	b.n	800a2de <__kernel_rem_pio2+0x4ea>
 800a44c:	4638      	mov	r0, r7
 800a44e:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800a452:	4631      	mov	r1, r6
 800a454:	f7f5 ffb4 	bl	80003c0 <__adddf3>
 800a458:	3c01      	subs	r4, #1
 800a45a:	4607      	mov	r7, r0
 800a45c:	460e      	mov	r6, r1
 800a45e:	e744      	b.n	800a2ea <__kernel_rem_pio2+0x4f6>
 800a460:	9b01      	ldr	r3, [sp, #4]
 800a462:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a466:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800a46a:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800a46e:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800a472:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800a476:	601d      	str	r5, [r3, #0]
 800a478:	615e      	str	r6, [r3, #20]
 800a47a:	e71b      	b.n	800a2b4 <__kernel_rem_pio2+0x4c0>
 800a47c:	41700000 	.word	0x41700000
 800a480:	3e700000 	.word	0x3e700000
 800a484:	00000000 	.word	0x00000000

0800a488 <__kernel_sin>:
 800a488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a48c:	b086      	sub	sp, #24
 800a48e:	e9cd 2300 	strd	r2, r3, [sp]
 800a492:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a496:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a49a:	4682      	mov	sl, r0
 800a49c:	460c      	mov	r4, r1
 800a49e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800a4a0:	da03      	bge.n	800a4aa <__kernel_sin+0x22>
 800a4a2:	f7f6 f9cb 	bl	800083c <__aeabi_d2iz>
 800a4a6:	2800      	cmp	r0, #0
 800a4a8:	d050      	beq.n	800a54c <__kernel_sin+0xc4>
 800a4aa:	4652      	mov	r2, sl
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	f7f5 fe55 	bl	8000160 <__aeabi_dmul>
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	460f      	mov	r7, r1
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	460b      	mov	r3, r1
 800a4be:	4650      	mov	r0, sl
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	f7f5 fe4d 	bl	8000160 <__aeabi_dmul>
 800a4c6:	a33e      	add	r3, pc, #248	; (adr r3, 800a5c0 <__kernel_sin+0x138>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	4680      	mov	r8, r0
 800a4ce:	4689      	mov	r9, r1
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	4639      	mov	r1, r7
 800a4d4:	f7f5 fe44 	bl	8000160 <__aeabi_dmul>
 800a4d8:	a33b      	add	r3, pc, #236	; (adr r3, 800a5c8 <__kernel_sin+0x140>)
 800a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4de:	f7f5 ff6d 	bl	80003bc <__aeabi_dsub>
 800a4e2:	4632      	mov	r2, r6
 800a4e4:	463b      	mov	r3, r7
 800a4e6:	f7f5 fe3b 	bl	8000160 <__aeabi_dmul>
 800a4ea:	a339      	add	r3, pc, #228	; (adr r3, 800a5d0 <__kernel_sin+0x148>)
 800a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f0:	f7f5 ff66 	bl	80003c0 <__adddf3>
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	f7f5 fe32 	bl	8000160 <__aeabi_dmul>
 800a4fc:	a336      	add	r3, pc, #216	; (adr r3, 800a5d8 <__kernel_sin+0x150>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f5 ff5b 	bl	80003bc <__aeabi_dsub>
 800a506:	4632      	mov	r2, r6
 800a508:	463b      	mov	r3, r7
 800a50a:	f7f5 fe29 	bl	8000160 <__aeabi_dmul>
 800a50e:	a334      	add	r3, pc, #208	; (adr r3, 800a5e0 <__kernel_sin+0x158>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f5 ff54 	bl	80003c0 <__adddf3>
 800a518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a51c:	b9dd      	cbnz	r5, 800a556 <__kernel_sin+0xce>
 800a51e:	4602      	mov	r2, r0
 800a520:	460b      	mov	r3, r1
 800a522:	4630      	mov	r0, r6
 800a524:	4639      	mov	r1, r7
 800a526:	f7f5 fe1b 	bl	8000160 <__aeabi_dmul>
 800a52a:	a32f      	add	r3, pc, #188	; (adr r3, 800a5e8 <__kernel_sin+0x160>)
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	f7f5 ff44 	bl	80003bc <__aeabi_dsub>
 800a534:	4642      	mov	r2, r8
 800a536:	464b      	mov	r3, r9
 800a538:	f7f5 fe12 	bl	8000160 <__aeabi_dmul>
 800a53c:	4602      	mov	r2, r0
 800a53e:	460b      	mov	r3, r1
 800a540:	4650      	mov	r0, sl
 800a542:	4621      	mov	r1, r4
 800a544:	f7f5 ff3c 	bl	80003c0 <__adddf3>
 800a548:	4682      	mov	sl, r0
 800a54a:	460c      	mov	r4, r1
 800a54c:	4650      	mov	r0, sl
 800a54e:	4621      	mov	r1, r4
 800a550:	b006      	add	sp, #24
 800a552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a556:	2200      	movs	r2, #0
 800a558:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a55c:	4b24      	ldr	r3, [pc, #144]	; (800a5f0 <__kernel_sin+0x168>)
 800a55e:	f7f5 fdff 	bl	8000160 <__aeabi_dmul>
 800a562:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a566:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a56a:	4640      	mov	r0, r8
 800a56c:	4649      	mov	r1, r9
 800a56e:	f7f5 fdf7 	bl	8000160 <__aeabi_dmul>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a57a:	f7f5 ff1f 	bl	80003bc <__aeabi_dsub>
 800a57e:	4632      	mov	r2, r6
 800a580:	463b      	mov	r3, r7
 800a582:	f7f5 fded 	bl	8000160 <__aeabi_dmul>
 800a586:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a58a:	f7f5 ff17 	bl	80003bc <__aeabi_dsub>
 800a58e:	a316      	add	r3, pc, #88	; (adr r3, 800a5e8 <__kernel_sin+0x160>)
 800a590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a594:	4606      	mov	r6, r0
 800a596:	460f      	mov	r7, r1
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f5 fde0 	bl	8000160 <__aeabi_dmul>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4630      	mov	r0, r6
 800a5a6:	4639      	mov	r1, r7
 800a5a8:	f7f5 ff0a 	bl	80003c0 <__adddf3>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	4621      	mov	r1, r4
 800a5b4:	f7f5 ff02 	bl	80003bc <__aeabi_dsub>
 800a5b8:	e7c6      	b.n	800a548 <__kernel_sin+0xc0>
 800a5ba:	bf00      	nop
 800a5bc:	f3af 8000 	nop.w
 800a5c0:	5acfd57c 	.word	0x5acfd57c
 800a5c4:	3de5d93a 	.word	0x3de5d93a
 800a5c8:	8a2b9ceb 	.word	0x8a2b9ceb
 800a5cc:	3e5ae5e6 	.word	0x3e5ae5e6
 800a5d0:	57b1fe7d 	.word	0x57b1fe7d
 800a5d4:	3ec71de3 	.word	0x3ec71de3
 800a5d8:	19c161d5 	.word	0x19c161d5
 800a5dc:	3f2a01a0 	.word	0x3f2a01a0
 800a5e0:	1110f8a6 	.word	0x1110f8a6
 800a5e4:	3f811111 	.word	0x3f811111
 800a5e8:	55555549 	.word	0x55555549
 800a5ec:	3fc55555 	.word	0x3fc55555
 800a5f0:	3fe00000 	.word	0x3fe00000

0800a5f4 <fabs>:
 800a5f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a5f8:	4770      	bx	lr
 800a5fa:	0000      	movs	r0, r0
 800a5fc:	0000      	movs	r0, r0
	...

0800a600 <floor>:
 800a600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a604:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800a608:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800a60c:	2e13      	cmp	r6, #19
 800a60e:	4602      	mov	r2, r0
 800a610:	460b      	mov	r3, r1
 800a612:	4607      	mov	r7, r0
 800a614:	460c      	mov	r4, r1
 800a616:	4605      	mov	r5, r0
 800a618:	dc34      	bgt.n	800a684 <floor+0x84>
 800a61a:	2e00      	cmp	r6, #0
 800a61c:	da15      	bge.n	800a64a <floor+0x4a>
 800a61e:	a334      	add	r3, pc, #208	; (adr r3, 800a6f0 <floor+0xf0>)
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	f7f5 fecc 	bl	80003c0 <__adddf3>
 800a628:	2200      	movs	r2, #0
 800a62a:	2300      	movs	r3, #0
 800a62c:	f7f6 f8fc 	bl	8000828 <__aeabi_dcmpgt>
 800a630:	b140      	cbz	r0, 800a644 <floor+0x44>
 800a632:	2c00      	cmp	r4, #0
 800a634:	da59      	bge.n	800a6ea <floor+0xea>
 800a636:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a63a:	ea57 0503 	orrs.w	r5, r7, r3
 800a63e:	d001      	beq.n	800a644 <floor+0x44>
 800a640:	2500      	movs	r5, #0
 800a642:	4c2d      	ldr	r4, [pc, #180]	; (800a6f8 <floor+0xf8>)
 800a644:	4623      	mov	r3, r4
 800a646:	462f      	mov	r7, r5
 800a648:	e025      	b.n	800a696 <floor+0x96>
 800a64a:	4a2c      	ldr	r2, [pc, #176]	; (800a6fc <floor+0xfc>)
 800a64c:	fa42 f806 	asr.w	r8, r2, r6
 800a650:	ea01 0208 	and.w	r2, r1, r8
 800a654:	4302      	orrs	r2, r0
 800a656:	d01e      	beq.n	800a696 <floor+0x96>
 800a658:	a325      	add	r3, pc, #148	; (adr r3, 800a6f0 <floor+0xf0>)
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	f7f5 feaf 	bl	80003c0 <__adddf3>
 800a662:	2200      	movs	r2, #0
 800a664:	2300      	movs	r3, #0
 800a666:	f7f6 f8df 	bl	8000828 <__aeabi_dcmpgt>
 800a66a:	2800      	cmp	r0, #0
 800a66c:	d0ea      	beq.n	800a644 <floor+0x44>
 800a66e:	2c00      	cmp	r4, #0
 800a670:	bfbe      	ittt	lt
 800a672:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a676:	fa43 f606 	asrlt.w	r6, r3, r6
 800a67a:	19a4      	addlt	r4, r4, r6
 800a67c:	2500      	movs	r5, #0
 800a67e:	ea24 0408 	bic.w	r4, r4, r8
 800a682:	e7df      	b.n	800a644 <floor+0x44>
 800a684:	2e33      	cmp	r6, #51	; 0x33
 800a686:	dd0a      	ble.n	800a69e <floor+0x9e>
 800a688:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a68c:	d103      	bne.n	800a696 <floor+0x96>
 800a68e:	f7f5 fe97 	bl	80003c0 <__adddf3>
 800a692:	4607      	mov	r7, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4638      	mov	r0, r7
 800a698:	4619      	mov	r1, r3
 800a69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69e:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a2:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800a6a6:	fa22 f808 	lsr.w	r8, r2, r8
 800a6aa:	ea18 0f00 	tst.w	r8, r0
 800a6ae:	d0f2      	beq.n	800a696 <floor+0x96>
 800a6b0:	a30f      	add	r3, pc, #60	; (adr r3, 800a6f0 <floor+0xf0>)
 800a6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b6:	f7f5 fe83 	bl	80003c0 <__adddf3>
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	2300      	movs	r3, #0
 800a6be:	f7f6 f8b3 	bl	8000828 <__aeabi_dcmpgt>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d0be      	beq.n	800a644 <floor+0x44>
 800a6c6:	2c00      	cmp	r4, #0
 800a6c8:	da02      	bge.n	800a6d0 <floor+0xd0>
 800a6ca:	2e14      	cmp	r6, #20
 800a6cc:	d103      	bne.n	800a6d6 <floor+0xd6>
 800a6ce:	3401      	adds	r4, #1
 800a6d0:	ea25 0508 	bic.w	r5, r5, r8
 800a6d4:	e7b6      	b.n	800a644 <floor+0x44>
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a6dc:	fa03 f606 	lsl.w	r6, r3, r6
 800a6e0:	4435      	add	r5, r6
 800a6e2:	42bd      	cmp	r5, r7
 800a6e4:	bf38      	it	cc
 800a6e6:	18e4      	addcc	r4, r4, r3
 800a6e8:	e7f2      	b.n	800a6d0 <floor+0xd0>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	462c      	mov	r4, r5
 800a6ee:	e7a9      	b.n	800a644 <floor+0x44>
 800a6f0:	8800759c 	.word	0x8800759c
 800a6f4:	7e37e43c 	.word	0x7e37e43c
 800a6f8:	bff00000 	.word	0xbff00000
 800a6fc:	000fffff 	.word	0x000fffff

0800a700 <scalbn>:
 800a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a702:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800a706:	4604      	mov	r4, r0
 800a708:	460d      	mov	r5, r1
 800a70a:	4617      	mov	r7, r2
 800a70c:	460b      	mov	r3, r1
 800a70e:	b996      	cbnz	r6, 800a736 <scalbn+0x36>
 800a710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a714:	4303      	orrs	r3, r0
 800a716:	d039      	beq.n	800a78c <scalbn+0x8c>
 800a718:	4b35      	ldr	r3, [pc, #212]	; (800a7f0 <scalbn+0xf0>)
 800a71a:	2200      	movs	r2, #0
 800a71c:	f7f5 fd20 	bl	8000160 <__aeabi_dmul>
 800a720:	4b34      	ldr	r3, [pc, #208]	; (800a7f4 <scalbn+0xf4>)
 800a722:	4604      	mov	r4, r0
 800a724:	429f      	cmp	r7, r3
 800a726:	460d      	mov	r5, r1
 800a728:	da0f      	bge.n	800a74a <scalbn+0x4a>
 800a72a:	a32d      	add	r3, pc, #180	; (adr r3, 800a7e0 <scalbn+0xe0>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f5 fd16 	bl	8000160 <__aeabi_dmul>
 800a734:	e006      	b.n	800a744 <scalbn+0x44>
 800a736:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a73a:	4296      	cmp	r6, r2
 800a73c:	d10a      	bne.n	800a754 <scalbn+0x54>
 800a73e:	4602      	mov	r2, r0
 800a740:	f7f5 fe3e 	bl	80003c0 <__adddf3>
 800a744:	4604      	mov	r4, r0
 800a746:	460d      	mov	r5, r1
 800a748:	e020      	b.n	800a78c <scalbn+0x8c>
 800a74a:	460b      	mov	r3, r1
 800a74c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a750:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800a754:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800a758:	19b9      	adds	r1, r7, r6
 800a75a:	4291      	cmp	r1, r2
 800a75c:	dd0e      	ble.n	800a77c <scalbn+0x7c>
 800a75e:	a322      	add	r3, pc, #136	; (adr r3, 800a7e8 <scalbn+0xe8>)
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800a768:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800a76c:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800a770:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800a774:	4820      	ldr	r0, [pc, #128]	; (800a7f8 <scalbn+0xf8>)
 800a776:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800a77a:	e7d9      	b.n	800a730 <scalbn+0x30>
 800a77c:	2900      	cmp	r1, #0
 800a77e:	dd08      	ble.n	800a792 <scalbn+0x92>
 800a780:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a784:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a788:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a78c:	4620      	mov	r0, r4
 800a78e:	4629      	mov	r1, r5
 800a790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a792:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800a796:	da16      	bge.n	800a7c6 <scalbn+0xc6>
 800a798:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a79c:	429f      	cmp	r7, r3
 800a79e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800a7a2:	dd08      	ble.n	800a7b6 <scalbn+0xb6>
 800a7a4:	4c15      	ldr	r4, [pc, #84]	; (800a7fc <scalbn+0xfc>)
 800a7a6:	4814      	ldr	r0, [pc, #80]	; (800a7f8 <scalbn+0xf8>)
 800a7a8:	f363 74df 	bfi	r4, r3, #31, #1
 800a7ac:	a30e      	add	r3, pc, #56	; (adr r3, 800a7e8 <scalbn+0xe8>)
 800a7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	e7bc      	b.n	800a730 <scalbn+0x30>
 800a7b6:	4c12      	ldr	r4, [pc, #72]	; (800a800 <scalbn+0x100>)
 800a7b8:	4812      	ldr	r0, [pc, #72]	; (800a804 <scalbn+0x104>)
 800a7ba:	f363 74df 	bfi	r4, r3, #31, #1
 800a7be:	a308      	add	r3, pc, #32	; (adr r3, 800a7e0 <scalbn+0xe0>)
 800a7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c4:	e7f5      	b.n	800a7b2 <scalbn+0xb2>
 800a7c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a7ca:	3136      	adds	r1, #54	; 0x36
 800a7cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a7d0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <scalbn+0x108>)
 800a7dc:	e7a8      	b.n	800a730 <scalbn+0x30>
 800a7de:	bf00      	nop
 800a7e0:	c2f8f359 	.word	0xc2f8f359
 800a7e4:	01a56e1f 	.word	0x01a56e1f
 800a7e8:	8800759c 	.word	0x8800759c
 800a7ec:	7e37e43c 	.word	0x7e37e43c
 800a7f0:	43500000 	.word	0x43500000
 800a7f4:	ffff3cb0 	.word	0xffff3cb0
 800a7f8:	8800759c 	.word	0x8800759c
 800a7fc:	7e37e43c 	.word	0x7e37e43c
 800a800:	01a56e1f 	.word	0x01a56e1f
 800a804:	c2f8f359 	.word	0xc2f8f359
 800a808:	3c900000 	.word	0x3c900000

0800a80c <_init>:
 800a80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80e:	bf00      	nop
 800a810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a812:	bc08      	pop	{r3}
 800a814:	469e      	mov	lr, r3
 800a816:	4770      	bx	lr

0800a818 <_fini>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr
