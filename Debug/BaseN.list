
BaseN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d0  080066d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080066d0  080066d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066d0  080066d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018b0  20000074  0800674c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001924  0800674c  00021924  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c23d  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cea  00000000  00000000  0004c2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001b37a  00000000  00000000  00050fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001208  00000000  00000000  0006c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003e60  00000000  00000000  0006d548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043a8  00000000  00000000  000713a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a320  00000000  00000000  00075750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097093  00000000  00000000  0009fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00136b03  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004908  00000000  00000000  00136b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005b68 	.word	0x08005b68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005b68 	.word	0x08005b68

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <UC1609_Init>:
									uint16_t csGpioPin,
									GPIO_TypeDef* cdGpioPort,
									uint16_t cdGpioPin,
									GPIO_TypeDef* rstGpioPort,
									uint16_t rstGpioPin)
{
 8000648:	468c      	mov	ip, r1
 800064a:	4611      	mov	r1, r2
 800064c:	4602      	mov	r2, r0
 800064e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	hspi = spiHandler;
 8000652:	4e5a      	ldr	r6, [pc, #360]	; (80007bc <UC1609_Init+0x174>)
{
 8000654:	b082      	sub	sp, #8
	csPort=csGpioPort;
	csPin=csGpioPin;
	cdPort=cdGpioPort;
 8000656:	4f5a      	ldr	r7, [pc, #360]	; (80007c0 <UC1609_Init+0x178>)
	csPort=csGpioPort;
 8000658:	4c5a      	ldr	r4, [pc, #360]	; (80007c4 <UC1609_Init+0x17c>)
	csPin=csGpioPin;
 800065a:	4d5b      	ldr	r5, [pc, #364]	; (80007c8 <UC1609_Init+0x180>)
{
 800065c:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
	cdPin=cdGpioPin;
 8000660:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80007cc <UC1609_Init+0x184>
{
 8000664:	980b      	ldr	r0, [sp, #44]	; 0x2c
	rstPort=rstGpioPort;
 8000666:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80007d0 <UC1609_Init+0x188>
	rstPin=rstGpioPin;
 800066a:	f8df a168 	ldr.w	sl, [pc, #360]	; 80007d4 <UC1609_Init+0x18c>
	hspi = spiHandler;
 800066e:	6032      	str	r2, [r6, #0]
{
 8000670:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	cdPort=cdGpioPort;
 8000674:	603b      	str	r3, [r7, #0]
	csPort=csGpioPort;
 8000676:	f8c4 c000 	str.w	ip, [r4]
	csPin=csGpioPin;
 800067a:	8029      	strh	r1, [r5, #0]
	cdPin=cdGpioPin;
 800067c:	f8a8 e000 	strh.w	lr, [r8]
	rstPort=rstGpioPort;
 8000680:	f8c9 0000 	str.w	r0, [r9]
	rstPin=rstGpioPin;
 8000684:	f8aa 2000 	strh.w	r2, [sl]
if (rstPin==0 || rstPort==0)
 8000688:	b1a2      	cbz	r2, 80006b4 <UC1609_Init+0x6c>
 800068a:	b198      	cbz	r0, 80006b4 <UC1609_Init+0x6c>
	HAL_GPIO_WritePin (rstPort, rstPin, 0);
 800068c:	4611      	mov	r1, r2
 800068e:	2200      	movs	r2, #0
 8000690:	f002 fb3e 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000694:	2001      	movs	r0, #1
 8000696:	f001 fddd 	bl	8002254 <HAL_Delay>
	HAL_GPIO_WritePin (rstPort, rstPin, 1);
 800069a:	f8d9 0000 	ldr.w	r0, [r9]
 800069e:	2201      	movs	r2, #1
 80006a0:	f8ba 1000 	ldrh.w	r1, [sl]
 80006a4:	f002 fb34 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_Delay (5);
 80006a8:	2005      	movs	r0, #5
 80006aa:	f001 fdd3 	bl	8002254 <HAL_Delay>
 80006ae:	f10d 0907 	add.w	r9, sp, #7
}
 80006b2:	e01c      	b.n	80006ee <UC1609_Init+0xa6>
sendCommand(0b11100010);
 80006b4:	23e2      	movs	r3, #226	; 0xe2
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80006b6:	4660      	mov	r0, ip
 80006b8:	2200      	movs	r2, #0
 80006ba:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80006be:	f10d 0907 	add.w	r9, sp, #7
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80006c2:	f002 fb25 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	f8b8 1000 	ldrh.w	r1, [r8]
 80006cc:	6838      	ldr	r0, [r7, #0]
 80006ce:	f002 fb1f 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80006d2:	4649      	mov	r1, r9
 80006d4:	230a      	movs	r3, #10
 80006d6:	2201      	movs	r2, #1
 80006d8:	6830      	ldr	r0, [r6, #0]
 80006da:	f003 fd55 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 80006de:	6820      	ldr	r0, [r4, #0]
 80006e0:	2201      	movs	r2, #1
 80006e2:	8829      	ldrh	r1, [r5, #0]
 80006e4:	f002 fb14 	bl	8002d10 <HAL_GPIO_WritePin>
HAL_Delay (20);
 80006e8:	2014      	movs	r0, #20
 80006ea:	f001 fdb3 	bl	8002254 <HAL_Delay>
	}
else
	{
	UC1609_HardwareReset();
	}
	sendCommand (UC1609_CMD_MAPPING | MIRROR_X);
 80006ee:	23c4      	movs	r3, #196	; 0xc4
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80006f0:	8829      	ldrh	r1, [r5, #0]
 80006f2:	6820      	ldr	r0, [r4, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	f88d 3007 	strb.w	r3, [sp, #7]
 80006fa:	f002 fb09 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 80006fe:	f8b8 1000 	ldrh.w	r1, [r8]
 8000702:	6838      	ldr	r0, [r7, #0]
 8000704:	2200      	movs	r2, #0
 8000706:	f002 fb03 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 800070a:	230a      	movs	r3, #10
 800070c:	4649      	mov	r1, r9
 800070e:	2201      	movs	r2, #1
 8000710:	6830      	ldr	r0, [r6, #0]
 8000712:	f003 fd39 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000716:	8829      	ldrh	r1, [r5, #0]
 8000718:	6820      	ldr	r0, [r4, #0]
 800071a:	2201      	movs	r2, #1
 800071c:	f002 faf8 	bl	8002d10 <HAL_GPIO_WritePin>
	sendCommand (UC1609_CMD_SET_BIAS_RATIO|DEFAULT_BIAS_RATIO);
 8000720:	23eb      	movs	r3, #235	; 0xeb
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000722:	8829      	ldrh	r1, [r5, #0]
 8000724:	6820      	ldr	r0, [r4, #0]
 8000726:	2200      	movs	r2, #0
 8000728:	f88d 3007 	strb.w	r3, [sp, #7]
 800072c:	f002 faf0 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000730:	f8b8 1000 	ldrh.w	r1, [r8]
 8000734:	6838      	ldr	r0, [r7, #0]
 8000736:	2200      	movs	r2, #0
 8000738:	f002 faea 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 800073c:	230a      	movs	r3, #10
 800073e:	4649      	mov	r1, r9
 8000740:	2201      	movs	r2, #1
 8000742:	6830      	ldr	r0, [r6, #0]
 8000744:	f003 fd20 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000748:	8829      	ldrh	r1, [r5, #0]
 800074a:	6820      	ldr	r0, [r4, #0]
 800074c:	2201      	movs	r2, #1
 800074e:	f002 fadf 	bl	8002d10 <HAL_GPIO_WritePin>
	sendCommand (UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 8000752:	2381      	movs	r3, #129	; 0x81
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000754:	8829      	ldrh	r1, [r5, #0]
 8000756:	6820      	ldr	r0, [r4, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	f88d 3007 	strb.w	r3, [sp, #7]
 800075e:	f002 fad7 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000762:	f8b8 1000 	ldrh.w	r1, [r8]
 8000766:	6838      	ldr	r0, [r7, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	f002 fad1 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 800076e:	230a      	movs	r3, #10
 8000770:	4649      	mov	r1, r9
 8000772:	2201      	movs	r2, #1
 8000774:	6830      	ldr	r0, [r6, #0]
 8000776:	f003 fd07 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 800077a:	8829      	ldrh	r1, [r5, #0]
 800077c:	6820      	ldr	r0, [r4, #0]
 800077e:	2201      	movs	r2, #1
 8000780:	f002 fac6 	bl	8002d10 <HAL_GPIO_WritePin>
	sendCommand (IMHO_BEST_LOOKING_BIAS_RATIO);
 8000784:	2383      	movs	r3, #131	; 0x83
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000786:	8829      	ldrh	r1, [r5, #0]
 8000788:	6820      	ldr	r0, [r4, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	f88d 3007 	strb.w	r3, [sp, #7]
 8000790:	f002 fabe 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000794:	f8b8 1000 	ldrh.w	r1, [r8]
 8000798:	6838      	ldr	r0, [r7, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	f002 fab8 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80007a0:	4649      	mov	r1, r9
 80007a2:	230a      	movs	r3, #10
 80007a4:	2201      	movs	r2, #1
 80007a6:	6830      	ldr	r0, [r6, #0]
 80007a8:	f003 fcee 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 80007ac:	2201      	movs	r2, #1
 80007ae:	8829      	ldrh	r1, [r5, #0]
 80007b0:	6820      	ldr	r0, [r4, #0]
 80007b2:	f002 faad 	bl	8002d10 <HAL_GPIO_WritePin>
}
 80007b6:	b002      	add	sp, #8
 80007b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007bc:	200008c4 	.word	0x200008c4
 80007c0:	200002b0 	.word	0x200002b0
 80007c4:	200008c0 	.word	0x200008c0
 80007c8:	200002ac 	.word	0x200002ac
 80007cc:	200008b8 	.word	0x200008b8
 80007d0:	200008bc 	.word	0x200008bc
 80007d4:	200002b4 	.word	0x200002b4

080007d8 <UC1609_SetPos>:
	sendCommand (0b10110000 | y);
}

void UC1609_SetPos (uint8_t x, uint8_t y)
{
	cursor = x * 6 + UC1609_WIDTH * y;
 80007d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80007dc:	4b03      	ldr	r3, [pc, #12]	; (80007ec <UC1609_SetPos+0x14>)
 80007de:	0189      	lsls	r1, r1, #6
 80007e0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80007e4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80007e8:	8019      	strh	r1, [r3, #0]
}
 80007ea:	4770      	bx	lr
 80007ec:	2000029c 	.word	0x2000029c

080007f0 <UC1609_UpdateScreen>:


void UC1609_UpdateScreen ()
{
 80007f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007f4:	2600      	movs	r6, #0
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80007f6:	4d47      	ldr	r5, [pc, #284]	; (8000914 <UC1609_UpdateScreen+0x124>)
 80007f8:	4c47      	ldr	r4, [pc, #284]	; (8000918 <UC1609_UpdateScreen+0x128>)
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 80007fa:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8000924 <UC1609_UpdateScreen+0x134>
 80007fe:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8000928 <UC1609_UpdateScreen+0x138>
{
 8000802:	b083      	sub	sp, #12
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000804:	4f45      	ldr	r7, [pc, #276]	; (800091c <UC1609_UpdateScreen+0x12c>)
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000806:	4632      	mov	r2, r6
 8000808:	8829      	ldrh	r1, [r5, #0]
 800080a:	6820      	ldr	r0, [r4, #0]
 800080c:	f88d 6007 	strb.w	r6, [sp, #7]
 8000810:	f002 fa7e 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000814:	4632      	mov	r2, r6
 8000816:	f8b9 1000 	ldrh.w	r1, [r9]
 800081a:	f8d8 0000 	ldr.w	r0, [r8]
 800081e:	f002 fa77 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000822:	230a      	movs	r3, #10
 8000824:	f10d 0107 	add.w	r1, sp, #7
 8000828:	2201      	movs	r2, #1
 800082a:	6838      	ldr	r0, [r7, #0]
 800082c:	f003 fcac 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000830:	8829      	ldrh	r1, [r5, #0]
 8000832:	6820      	ldr	r0, [r4, #0]
 8000834:	2201      	movs	r2, #1
 8000836:	f002 fa6b 	bl	8002d10 <HAL_GPIO_WritePin>
	sendCommand (0b00010000 | ((x >> 4) & 0xF));
 800083a:	2310      	movs	r3, #16
	HAL_GPIO_WritePin (csPort, csPin, 0);
 800083c:	4632      	mov	r2, r6
 800083e:	8829      	ldrh	r1, [r5, #0]
 8000840:	6820      	ldr	r0, [r4, #0]
 8000842:	f88d 3007 	strb.w	r3, [sp, #7]
 8000846:	f002 fa63 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 800084a:	4632      	mov	r2, r6
 800084c:	f8b9 1000 	ldrh.w	r1, [r9]
 8000850:	f8d8 0000 	ldr.w	r0, [r8]
 8000854:	f002 fa5c 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000858:	230a      	movs	r3, #10
 800085a:	f10d 0107 	add.w	r1, sp, #7
 800085e:	2201      	movs	r2, #1
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	f003 fc91 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000866:	8829      	ldrh	r1, [r5, #0]
 8000868:	6820      	ldr	r0, [r4, #0]
 800086a:	2201      	movs	r2, #1
 800086c:	f002 fa50 	bl	8002d10 <HAL_GPIO_WritePin>
	sendCommand (0b10110000 | y);
 8000870:	23b0      	movs	r3, #176	; 0xb0
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000872:	4632      	mov	r2, r6
 8000874:	8829      	ldrh	r1, [r5, #0]
 8000876:	6820      	ldr	r0, [r4, #0]
 8000878:	f88d 3007 	strb.w	r3, [sp, #7]
 800087c:	f002 fa48 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000880:	4632      	mov	r2, r6
 8000882:	f8b9 1000 	ldrh.w	r1, [r9]
 8000886:	f8d8 0000 	ldr.w	r0, [r8]
 800088a:	f002 fa41 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 800088e:	230a      	movs	r3, #10
 8000890:	f10d 0107 	add.w	r1, sp, #7
 8000894:	2201      	movs	r2, #1
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f003 fc76 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 800089c:	8829      	ldrh	r1, [r5, #0]
 800089e:	6820      	ldr	r0, [r4, #0]
 80008a0:	2201      	movs	r2, #1
 80008a2:	f002 fa35 	bl	8002d10 <HAL_GPIO_WritePin>

	UC1609_SetXY (0, 0);
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80008a6:	4632      	mov	r2, r6
 80008a8:	8829      	ldrh	r1, [r5, #0]
 80008aa:	6820      	ldr	r0, [r4, #0]
 80008ac:	f002 fa30 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 1);
 80008b0:	f8b9 1000 	ldrh.w	r1, [r9]
 80008b4:	f8d8 0000 	ldr.w	r0, [r8]
 80008b8:	2201      	movs	r2, #1
 80008ba:	f002 fa29 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, buffer, BUFFER_SIZE, 1000);
 80008be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	4915      	ldr	r1, [pc, #84]	; (8000920 <UC1609_UpdateScreen+0x130>)
 80008ca:	f003 fc5d 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 80008ce:	8829      	ldrh	r1, [r5, #0]
 80008d0:	6820      	ldr	r0, [r4, #0]
 80008d2:	2201      	movs	r2, #1
 80008d4:	f002 fa1c 	bl	8002d10 <HAL_GPIO_WritePin>
	sendCommand (UC1609_CMD_ENABLE);
 80008d8:	23af      	movs	r3, #175	; 0xaf
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80008da:	4632      	mov	r2, r6
 80008dc:	8829      	ldrh	r1, [r5, #0]
 80008de:	6820      	ldr	r0, [r4, #0]
 80008e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80008e4:	f002 fa14 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 80008e8:	4632      	mov	r2, r6
 80008ea:	f8b9 1000 	ldrh.w	r1, [r9]
 80008ee:	f8d8 0000 	ldr.w	r0, [r8]
 80008f2:	f002 fa0d 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80008f6:	230a      	movs	r3, #10
 80008f8:	f10d 0107 	add.w	r1, sp, #7
 80008fc:	2201      	movs	r2, #1
 80008fe:	6838      	ldr	r0, [r7, #0]
 8000900:	f003 fc42 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	8829      	ldrh	r1, [r5, #0]
 8000908:	6820      	ldr	r0, [r4, #0]
 800090a:	f002 fa01 	bl	8002d10 <HAL_GPIO_WritePin>
}
 800090e:	b003      	add	sp, #12
 8000910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000914:	200002ac 	.word	0x200002ac
 8000918:	200008c0 	.word	0x200008c0
 800091c:	200008c4 	.word	0x200008c4
 8000920:	200002b8 	.word	0x200002b8
 8000924:	200008b8 	.word	0x200008b8
 8000928:	200002b0 	.word	0x200002b0

0800092c <UC1609_Clean>:

void UC1609_Clean ()
{
	for (uint16_t i = 0; i < BUFFER_SIZE; ++i)
 800092c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000930:	2100      	movs	r1, #0
 8000932:	4801      	ldr	r0, [pc, #4]	; (8000938 <UC1609_Clean+0xc>)
 8000934:	f004 bcfe 	b.w	8005334 <memset>
 8000938:	200002b8 	.word	0x200002b8

0800093c <UC1609_PutString>:
	cursor += 5;
}

void UC1609_PutString (char *c)
{
	while (*c)
 800093c:	7803      	ldrb	r3, [r0, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d040      	beq.n	80009c4 <UC1609_PutString+0x88>
{
 8000942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000944:	4c20      	ldr	r4, [pc, #128]	; (80009c8 <UC1609_PutString+0x8c>)
 8000946:	4921      	ldr	r1, [pc, #132]	; (80009cc <UC1609_PutString+0x90>)
 8000948:	8823      	ldrh	r3, [r4, #0]
 800094a:	4d21      	ldr	r5, [pc, #132]	; (80009d0 <UC1609_PutString+0x94>)
		{
			cursor %= BUFFER_SIZE;
 800094c:	4e21      	ldr	r6, [pc, #132]	; (80009d4 <UC1609_PutString+0x98>)
 800094e:	e011      	b.n	8000974 <UC1609_PutString+0x38>
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000950:	3a20      	subs	r2, #32
 8000952:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000956:	18ab      	adds	r3, r5, r2
 8000958:	f893 e004 	ldrb.w	lr, [r3, #4]
 800095c:	58aa      	ldr	r2, [r5, r2]
	cursor += 5;
 800095e:	1d7b      	adds	r3, r7, #5
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000960:	51ca      	str	r2, [r1, r7]
				{
					UC1609_PutRuC (c);
					c += 2;
				}
			else
				UC1609_Put (*c++);
 8000962:	3001      	adds	r0, #1
	cursor += 5;
 8000964:	b29b      	uxth	r3, r3
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000966:	f88c e004 	strb.w	lr, [ip, #4]
			cursor++;
 800096a:	3301      	adds	r3, #1
 800096c:	b29b      	uxth	r3, r3
 800096e:	8023      	strh	r3, [r4, #0]
	while (*c)
 8000970:	7802      	ldrb	r2, [r0, #0]
 8000972:	b332      	cbz	r2, 80009c2 <UC1609_PutString+0x86>
			cursor %= BUFFER_SIZE;
 8000974:	fba6 7203 	umull	r7, r2, r6, r3
 8000978:	0a92      	lsrs	r2, r2, #10
 800097a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800097e:	eba3 2342 	sub.w	r3, r3, r2, lsl #9
 8000982:	b29f      	uxth	r7, r3
 8000984:	8027      	strh	r7, [r4, #0]
			if (*c == 0xD0 || *c == 0xD1)
 8000986:	7802      	ldrb	r2, [r0, #0]
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000988:	eb01 0c07 	add.w	ip, r1, r7
			if (*c == 0xD0 || *c == 0xD1)
 800098c:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b01      	cmp	r3, #1
 8000994:	d8dc      	bhi.n	8000950 <UC1609_PutString+0x14>
		pos = *(c + 1) - 144 + 101;
 8000996:	7843      	ldrb	r3, [r0, #1]
	if (*c == 0xD0)
 8000998:	2ad0      	cmp	r2, #208	; 0xd0
		pos = *(c + 1) - 144 + 101;
 800099a:	bf0c      	ite	eq
 800099c:	3b2b      	subeq	r3, #43	; 0x2b
		pos = *(c + 1) - 128 + 149;
 800099e:	3315      	addne	r3, #21
 80009a0:	b2db      	uxtb	r3, r3
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 80009a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80009a6:	18ea      	adds	r2, r5, r3
 80009a8:	f892 c004 	ldrb.w	ip, [r2, #4]
 80009ac:	f855 e003 	ldr.w	lr, [r5, r3]
 80009b0:	19ca      	adds	r2, r1, r7
	cursor += 5;
 80009b2:	1d7b      	adds	r3, r7, #5
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 80009b4:	f841 e007 	str.w	lr, [r1, r7]
					c += 2;
 80009b8:	3002      	adds	r0, #2
	cursor += 5;
 80009ba:	b29b      	uxth	r3, r3
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 80009bc:	f882 c004 	strb.w	ip, [r2, #4]
					c += 2;
 80009c0:	e7d3      	b.n	800096a <UC1609_PutString+0x2e>
		}
}
 80009c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000029c 	.word	0x2000029c
 80009cc:	200002b8 	.word	0x200002b8
 80009d0:	08006338 	.word	0x08006338
 80009d4:	aaaaaaab 	.word	0xaaaaaaab

080009d8 <UC1609_Scroll>:
{
sendCommand(UC1609_CMD_INVERSION|invert);
}

void UC1609_Scroll (uint8_t lines)
{
 80009d8:	b530      	push	{r4, r5, lr}
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80009da:	4d12      	ldr	r5, [pc, #72]	; (8000a24 <UC1609_Scroll+0x4c>)
 80009dc:	4c12      	ldr	r4, [pc, #72]	; (8000a28 <UC1609_Scroll+0x50>)
lines%=64;
 80009de:	f000 033f 	and.w	r3, r0, #63	; 0x3f
{
 80009e2:	b083      	sub	sp, #12
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80009e4:	8829      	ldrh	r1, [r5, #0]
 80009e6:	6820      	ldr	r0, [r4, #0]
sendCommand(UC1609_CMD_SCROLL|lines);
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f88d 3007 	strb.w	r3, [sp, #7]
 80009f2:	f002 f98d 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <UC1609_Scroll+0x54>)
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <UC1609_Scroll+0x58>)
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	8811      	ldrh	r1, [r2, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f002 f986 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000a04:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <UC1609_Scroll+0x5c>)
 8000a06:	230a      	movs	r3, #10
 8000a08:	f10d 0107 	add.w	r1, sp, #7
 8000a0c:	6810      	ldr	r0, [r2, #0]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f003 fbba 	bl	8004188 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000a14:	2201      	movs	r2, #1
 8000a16:	8829      	ldrh	r1, [r5, #0]
 8000a18:	6820      	ldr	r0, [r4, #0]
 8000a1a:	f002 f979 	bl	8002d10 <HAL_GPIO_WritePin>

}
 8000a1e:	b003      	add	sp, #12
 8000a20:	bd30      	pop	{r4, r5, pc}
 8000a22:	bf00      	nop
 8000a24:	200002ac 	.word	0x200002ac
 8000a28:	200008c0 	.word	0x200008c0
 8000a2c:	200002b0 	.word	0x200002b0
 8000a30:	200008b8 	.word	0x200008b8
 8000a34:	200008c4 	.word	0x200008c4

08000a38 <delayMicro>:
	    {
	      tick++;
	    }
	    tick = 0;
	  }
}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop

08000a3c <readFromEeprom>:
void readFromEeprom(uint8_t* to, uint8_t from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
	uint8_t bytesLeft=size;
	uint8_t part;
	uint8_t shift=0;
	while(bytesLeft)
 8000a3c:	b332      	cbz	r2, 8000a8c <readFromEeprom+0x50>
{
 8000a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a42:	4607      	mov	r7, r0
 8000a44:	4698      	mov	r8, r3
 8000a46:	4614      	mov	r4, r2
	uint8_t shift=0;
 8000a48:	2500      	movs	r5, #0
	{
		part=(bytesLeft>16)?16:bytesLeft;
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000a4a:	f04f 0932 	mov.w	r9, #50	; 0x32
{
 8000a4e:	b084      	sub	sp, #16
 8000a50:	b28e      	uxth	r6, r1
		part=(bytesLeft>16)?16:bytesLeft;
 8000a52:	2c10      	cmp	r4, #16
 8000a54:	46a2      	mov	sl, r4
 8000a56:	bf28      	it	cs
 8000a58:	f04f 0a10 	movcs.w	sl, #16
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000a5c:	197b      	adds	r3, r7, r5
 8000a5e:	1972      	adds	r2, r6, r5
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	21a0      	movs	r1, #160	; 0xa0
 8000a64:	2301      	movs	r3, #1
 8000a66:	4640      	mov	r0, r8
 8000a68:	e9cd a901 	strd	sl, r9, [sp, #4]
		bytesLeft-=part;
 8000a6c:	eba4 040a 	sub.w	r4, r4, sl
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000a70:	f002 fd5c 	bl	800352c <HAL_I2C_Mem_Read>
		bytesLeft-=part;
 8000a74:	b2e4      	uxtb	r4, r4
		shift+=part;
 8000a76:	eb0a 0205 	add.w	r2, sl, r5
		HAL_Delay(5);
 8000a7a:	2005      	movs	r0, #5
		shift+=part;
 8000a7c:	b2d5      	uxtb	r5, r2
		HAL_Delay(5);
 8000a7e:	f001 fbe9 	bl	8002254 <HAL_Delay>
	while(bytesLeft)
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d1e5      	bne.n	8000a52 <readFromEeprom+0x16>
	}
}
 8000a86:	b004      	add	sp, #16
 8000a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <loadNodeData>:
	actualiseNodeData ();
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
}

void loadNodeData ()
{
 8000a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	readFromEeprom ((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 8000a94:	4c39      	ldr	r4, [pc, #228]	; (8000b7c <loadNodeData+0xec>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	4620      	mov	r0, r4
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4b38      	ldr	r3, [pc, #224]	; (8000b80 <loadNodeData+0xf0>)
 8000a9e:	f7ff ffcd 	bl	8000a3c <readFromEeprom>
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8000aa2:	f894 c000 	ldrb.w	ip, [r4]
 8000aa6:	4b37      	ldr	r3, [pc, #220]	; (8000b84 <loadNodeData+0xf4>)
 8000aa8:	f894 e002 	ldrb.w	lr, [r4, #2]
 8000aac:	7867      	ldrb	r7, [r4, #1]
 8000aae:	78e6      	ldrb	r6, [r4, #3]
 8000ab0:	7925      	ldrb	r5, [r4, #4]
 8000ab2:	f3cc 08c0 	ubfx	r8, ip, #3, #1
 8000ab6:	7960      	ldrb	r0, [r4, #5]
 8000ab8:	79a1      	ldrb	r1, [r4, #6]
 8000aba:	79e2      	ldrb	r2, [r4, #7]
 8000abc:	f883 800e 	strb.w	r8, [r3, #14]
 8000ac0:	f3c7 04c0 	ubfx	r4, r7, #3, #1
 8000ac4:	f3ce 08c0 	ubfx	r8, lr, #3, #1
 8000ac8:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
 8000acc:	f883 804e 	strb.w	r8, [r3, #78]	; 0x4e
 8000ad0:	f3c6 04c0 	ubfx	r4, r6, #3, #1
 8000ad4:	f3c5 08c0 	ubfx	r8, r5, #3, #1
 8000ad8:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 8000adc:	f883 808e 	strb.w	r8, [r3, #142]	; 0x8e
 8000ae0:	f3c0 04c0 	ubfx	r4, r0, #3, #1
 8000ae4:	f3c1 08c0 	ubfx	r8, r1, #3, #1
 8000ae8:	f883 40ae 	strb.w	r4, [r3, #174]	; 0xae
 8000aec:	f883 80ce 	strb.w	r8, [r3, #206]	; 0xce
 8000af0:	f3c2 04c0 	ubfx	r4, r2, #3, #1
			nodes[i].disarmed = nodeData[i].disarmed;
 8000af4:	f3cc 0880 	ubfx	r8, ip, #2, #1
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8000af8:	f883 40ee 	strb.w	r4, [r3, #238]	; 0xee
			nodes[i].masked = nodeData[i].masked;
 8000afc:	f3cc 0c01 	ubfx	ip, ip, #0, #2
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b00:	f3c7 0480 	ubfx	r4, r7, #2, #1
 8000b04:	f883 800d 	strb.w	r8, [r3, #13]
			nodes[i].masked = nodeData[i].masked;
 8000b08:	f3c7 0701 	ubfx	r7, r7, #0, #2
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b0c:	f3ce 0880 	ubfx	r8, lr, #2, #1
 8000b10:	f3c5 0980 	ubfx	r9, r5, #2, #1
			nodes[i].masked = nodeData[i].masked;
 8000b14:	f3ce 0e01 	ubfx	lr, lr, #0, #2
 8000b18:	f883 c00c 	strb.w	ip, [r3, #12]
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b1c:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
 8000b20:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 8000b24:	f3c2 0480 	ubfx	r4, r2, #2, #1
			nodes[i].masked = nodeData[i].masked;
 8000b28:	f3c6 0601 	ubfx	r6, r6, #0, #2
 8000b2c:	f3c5 0501 	ubfx	r5, r5, #0, #2
 8000b30:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b34:	f883 804d 	strb.w	r8, [r3, #77]	; 0x4d
 8000b38:	f3c0 0780 	ubfx	r7, r0, #2, #1
 8000b3c:	f3c1 0880 	ubfx	r8, r1, #2, #1
			nodes[i].masked = nodeData[i].masked;
 8000b40:	f3c0 0001 	ubfx	r0, r0, #0, #2
 8000b44:	f3c1 0101 	ubfx	r1, r1, #0, #2
 8000b48:	f3c2 0201 	ubfx	r2, r2, #0, #2
 8000b4c:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b50:	f883 c06d 	strb.w	ip, [r3, #109]	; 0x6d
			nodes[i].masked = nodeData[i].masked;
 8000b54:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b58:	f883 908d 	strb.w	r9, [r3, #141]	; 0x8d
			nodes[i].masked = nodeData[i].masked;
 8000b5c:	f883 508c 	strb.w	r5, [r3, #140]	; 0x8c
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b60:	f883 70ad 	strb.w	r7, [r3, #173]	; 0xad
			nodes[i].masked = nodeData[i].masked;
 8000b64:	f883 00ac 	strb.w	r0, [r3, #172]	; 0xac
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b68:	f883 80cd 	strb.w	r8, [r3, #205]	; 0xcd
			nodes[i].masked = nodeData[i].masked;
 8000b6c:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
			nodes[i].disarmed = nodeData[i].disarmed;
 8000b70:	f883 40ed 	strb.w	r4, [r3, #237]	; 0xed
			nodes[i].masked = nodeData[i].masked;
 8000b74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	actualiseNodes ();
}
 8000b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b7c:	20000d18 	.word	0x20000d18
 8000b80:	20000a10 	.word	0x20000a10
 8000b84:	20000c18 	.word	0x20000c18

08000b88 <HAL_UART_RxCpltCallback>:
 * @brief Callback for UART interrupt
 * @param  *huart - uart handler
 * @retval None
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000b88:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4905      	ldr	r1, [pc, #20]	; (8000ba4 <HAL_UART_RxCpltCallback+0x1c>)
 8000b8e:	4806      	ldr	r0, [pc, #24]	; (8000ba8 <HAL_UART_RxCpltCallback+0x20>)
 8000b90:	f004 f9bc 	bl	8004f0c <HAL_UART_Receive_IT>
	lastUartConnect = HAL_GetTick ();
 8000b94:	f001 fb58 	bl	8002248 <HAL_GetTick>
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <HAL_UART_RxCpltCallback+0x24>)
 8000b9a:	6018      	str	r0, [r3, #0]
	readByte ();
}
 8000b9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	readByte ();
 8000ba0:	f001 ba4c 	b.w	800203c <readByte>
 8000ba4:	20000ac8 	.word	0x20000ac8
 8000ba8:	20000b60 	.word	0x20000b60
 8000bac:	20001520 	.word	0x20001520

08000bb0 <clearStrings>:
 * @brief Fills all strings with '\0' char
 * @param None
 * @retval None
 */
void clearStrings ()
{
 8000bb0:	b538      	push	{r3, r4, r5, lr}
	memset (string[0], 0, sizeof(string[0]));
 8000bb2:	2540      	movs	r5, #64	; 0x40
 8000bb4:	4c18      	ldr	r4, [pc, #96]	; (8000c18 <clearStrings+0x68>)
 8000bb6:	462a      	mov	r2, r5
 8000bb8:	4620      	mov	r0, r4
 8000bba:	2100      	movs	r1, #0
 8000bbc:	f004 fbba 	bl	8005334 <memset>
	memset (string[1], 0, sizeof(string[1]));
 8000bc0:	462a      	mov	r2, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	1960      	adds	r0, r4, r5
 8000bc6:	f004 fbb5 	bl	8005334 <memset>
	memset (string[2], 0, sizeof(string[2]));
 8000bca:	462a      	mov	r2, r5
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8000bd2:	f004 fbaf 	bl	8005334 <memset>
	memset (string[3], 0, sizeof(string[3]));
 8000bd6:	462a      	mov	r2, r5
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8000bde:	f004 fba9 	bl	8005334 <memset>
	memset (string[4], 0, sizeof(string[4]));
 8000be2:	462a      	mov	r2, r5
 8000be4:	2100      	movs	r1, #0
 8000be6:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8000bea:	f004 fba3 	bl	8005334 <memset>
	memset (string[5], 0, sizeof(string[5]));
 8000bee:	462a      	mov	r2, r5
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8000bf6:	f004 fb9d 	bl	8005334 <memset>
	memset (string[6], 0, sizeof(string[6]));
 8000bfa:	462a      	mov	r2, r5
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8000c02:	f004 fb97 	bl	8005334 <memset>
	memset (string[7], 0, sizeof(string[7]));
 8000c06:	462a      	mov	r2, r5
 8000c08:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 8000c0c:	2100      	movs	r1, #0
}
 8000c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset (string[7], 0, sizeof(string[7]));
 8000c12:	f004 bb8f 	b.w	8005334 <memset>
 8000c16:	bf00      	nop
 8000c18:	2000009c 	.word	0x2000009c

08000c1c <updateLcd>:
 * @brief Writes string[0]..string[3] to all screens
 * @param None
 * @retval None
 */
void updateLcd ()
{
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	4d13      	ldr	r5, [pc, #76]	; (8000c6c <updateLcd+0x50>)
	ssd1306_Clean ();
 8000c20:	f000 fefe 	bl	8001a20 <ssd1306_Clean>
 8000c24:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 8000c26:	2400      	movs	r4, #0
		{
			ssd1306_GotoXY (0, i);
 8000c28:	4621      	mov	r1, r4
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 feba 	bl	80019a4 <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8000c30:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 8000c32:	4630      	mov	r0, r6
 8000c34:	f000 febe 	bl	80019b4 <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8000c38:	2c08      	cmp	r4, #8
 8000c3a:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8000c3e:	d1f3      	bne.n	8000c28 <updateLcd+0xc>
		}

	ssd1306_Update ();
 8000c40:	f000 fef6 	bl	8001a30 <ssd1306_Update>

	UC1609_Clean ();

	for (int i = 0; i < 8; i++)
 8000c44:	2400      	movs	r4, #0
	UC1609_Clean ();
 8000c46:	f7ff fe71 	bl	800092c <UC1609_Clean>
		{
			UC1609_SetPos (0, i);
 8000c4a:	b2e1      	uxtb	r1, r4
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f7ff fdc3 	bl	80007d8 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8000c52:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8000c54:	4628      	mov	r0, r5
 8000c56:	f7ff fe71 	bl	800093c <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8000c5a:	2c08      	cmp	r4, #8
 8000c5c:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8000c60:	d1f3      	bne.n	8000c4a <updateLcd+0x2e>
		}
	UC1609_UpdateScreen ();

}
 8000c62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	UC1609_UpdateScreen ();
 8000c66:	f7ff bdc3 	b.w	80007f0 <UC1609_UpdateScreen>
 8000c6a:	bf00      	nop
 8000c6c:	2000009c 	.word	0x2000009c

08000c70 <settingsInitiate>:
 * @brief Initiates settings from settings structure to radio structure
 * @param None
 * @retval None
 */
void settingsInitiate ()
{
 8000c70:	b538      	push	{r3, r4, r5, lr}
	myRadio.sf = settings.sf;
 8000c72:	4d0c      	ldr	r5, [pc, #48]	; (8000ca4 <settingsInitiate+0x34>)
 8000c74:	4c0c      	ldr	r4, [pc, #48]	; (8000ca8 <settingsInitiate+0x38>)
	myRadio.bw = settings.bw;
 8000c76:	7bea      	ldrb	r2, [r5, #15]
	myRadio.cr = settings.cr;
 8000c78:	7c2b      	ldrb	r3, [r5, #16]
	myRadio.sf = settings.sf;
 8000c7a:	7ba9      	ldrb	r1, [r5, #14]
	myRadio.bw = settings.bw;
 8000c7c:	71a2      	strb	r2, [r4, #6]
	myRadio.cr = settings.cr;
 8000c7e:	71e3      	strb	r3, [r4, #7]
	myRadio.sf = settings.sf;
 8000c80:	7161      	strb	r1, [r4, #5]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8000c82:	6828      	ldr	r0, [r5, #0]
 8000c84:	f7ff fb18 	bl	80002b8 <__aeabi_ui2f>
 8000c88:	4908      	ldr	r1, [pc, #32]	; (8000cac <settingsInitiate+0x3c>)
 8000c8a:	f7ff fc21 	bl	80004d0 <__aeabi_fdiv>
 8000c8e:	f7ff fcbb 	bl	8000608 <__aeabi_f2uiz>
	myRadio.preamble = settings.preamble;
 8000c92:	89a9      	ldrh	r1, [r5, #12]
	myRadio.power = settings.power;
 8000c94:	7caa      	ldrb	r2, [r5, #18]
	myRadio.syncWord = settings.syncWord;
 8000c96:	7c6b      	ldrb	r3, [r5, #17]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8000c98:	6020      	str	r0, [r4, #0]
	myRadio.preamble = settings.preamble;
 8000c9a:	81a1      	strh	r1, [r4, #12]
	myRadio.power = settings.power;
 8000c9c:	7122      	strb	r2, [r4, #4]
	myRadio.syncWord = settings.syncWord;
 8000c9e:	73a3      	strb	r3, [r4, #14]
	myRadio.preamble = settings.preamble;
}
 8000ca0:	bd38      	pop	{r3, r4, r5, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200009a0 	.word	0x200009a0
 8000ca8:	200008c8 	.word	0x200008c8
 8000cac:	427423d7 	.word	0x427423d7

08000cb0 <tryLoadSettings>:
 * @param None
 * @retval 1 - success 0 - fail
 */
uint8_t tryLoadSettings ()
{
	if (flashSettings->realFrequency >= MIN_FREQUENCY && flashSettings->realFrequency <= MAX_FREQUENCY)
 8000cb0:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <tryLoadSettings+0x94>)
{
 8000cb2:	b538      	push	{r3, r4, r5, lr}
	if (flashSettings->realFrequency >= MIN_FREQUENCY && flashSettings->realFrequency <= MAX_FREQUENCY)
 8000cb4:	6811      	ldr	r1, [r2, #0]
 8000cb6:	4b24      	ldr	r3, [pc, #144]	; (8000d48 <tryLoadSettings+0x98>)
 8000cb8:	680a      	ldr	r2, [r1, #0]
 8000cba:	4824      	ldr	r0, [pc, #144]	; (8000d4c <tryLoadSettings+0x9c>)
 8000cbc:	4413      	add	r3, r2
 8000cbe:	4283      	cmp	r3, r0
 8000cc0:	d83e      	bhi.n	8000d40 <tryLoadSettings+0x90>
		if (flashSettings->sf > 6 && flashSettings->sf < 13)
 8000cc2:	7b8b      	ldrb	r3, [r1, #14]
 8000cc4:	3b07      	subs	r3, #7
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d83a      	bhi.n	8000d40 <tryLoadSettings+0x90>
			if (flashSettings->bw < 10)
 8000cca:	7bcb      	ldrb	r3, [r1, #15]
 8000ccc:	2b09      	cmp	r3, #9
 8000cce:	d837      	bhi.n	8000d40 <tryLoadSettings+0x90>
				if (flashSettings->cr > 0 && flashSettings->cr < 5)
 8000cd0:	7c0b      	ldrb	r3, [r1, #16]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d833      	bhi.n	8000d40 <tryLoadSettings+0x90>
					if (flashSettings->preamble > 1 && flashSettings->preamble < 65535)
 8000cd8:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 8000cdc:	898b      	ldrh	r3, [r1, #12]
 8000cde:	3b02      	subs	r3, #2
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4283      	cmp	r3, r0
 8000ce4:	d82c      	bhi.n	8000d40 <tryLoadSettings+0x90>
						if (flashSettings->realFrequency > MIN_FREQUENCY && flashSettings->realFrequency < MAX_FREQUENCY)
 8000ce6:	481a      	ldr	r0, [pc, #104]	; (8000d50 <tryLoadSettings+0xa0>)
 8000ce8:	4c1a      	ldr	r4, [pc, #104]	; (8000d54 <tryLoadSettings+0xa4>)
 8000cea:	4410      	add	r0, r2
 8000cec:	42a0      	cmp	r0, r4
 8000cee:	d227      	bcs.n	8000d40 <tryLoadSettings+0x90>
							if (flashSettings->syncWord != 0x34 && flashSettings->syncWord != 0x55 && flashSettings->syncWord != 0xAA)
 8000cf0:	7c4a      	ldrb	r2, [r1, #17]
 8000cf2:	2a34      	cmp	r2, #52	; 0x34
 8000cf4:	d024      	beq.n	8000d40 <tryLoadSettings+0x90>
 8000cf6:	2a55      	cmp	r2, #85	; 0x55
 8000cf8:	d022      	beq.n	8000d40 <tryLoadSettings+0x90>
 8000cfa:	2aaa      	cmp	r2, #170	; 0xaa
 8000cfc:	d020      	beq.n	8000d40 <tryLoadSettings+0x90>
								if (flashSettings->power < 21 || flashSettings->power > 9)
									if (flashSettings->warningDelay > MIN_WARNING_DELAY && flashSettings->warningDelay < MAX_WARNING_DELAY)
 8000cfe:	6848      	ldr	r0, [r1, #4]
 8000d00:	4c15      	ldr	r4, [pc, #84]	; (8000d58 <tryLoadSettings+0xa8>)
 8000d02:	f5a0 426a 	sub.w	r2, r0, #59904	; 0xea00
 8000d06:	3a61      	subs	r2, #97	; 0x61
 8000d08:	42a2      	cmp	r2, r4
 8000d0a:	d819      	bhi.n	8000d40 <tryLoadSettings+0x90>
										if (flashSettings->superWarningDelay > MIN_WARNING_DELAY && flashSettings->superWarningDelay < MAX_WARNING_DELAY)
 8000d0c:	688c      	ldr	r4, [r1, #8]
 8000d0e:	4d12      	ldr	r5, [pc, #72]	; (8000d58 <tryLoadSettings+0xa8>)
 8000d10:	f5a4 426a 	sub.w	r2, r4, #59904	; 0xea00
 8000d14:	3a61      	subs	r2, #97	; 0x61
 8000d16:	42aa      	cmp	r2, r5
 8000d18:	d812      	bhi.n	8000d40 <tryLoadSettings+0x90>
											if (flashSettings->superWarningDelay > flashSettings->warningDelay)
 8000d1a:	42a0      	cmp	r0, r4
 8000d1c:	d210      	bcs.n	8000d40 <tryLoadSettings+0x90>
												if (flashSettings->preamble >= MIN_PREAMBLE && flashSettings->preamble <= MAX_PREAMBLE)
 8000d1e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d80c      	bhi.n	8000d40 <tryLoadSettings+0x90>
													if (flashSettings->baseID > 0 && flashSettings->baseID < MAX_BASEID)
 8000d26:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8000d28:	4a0c      	ldr	r2, [pc, #48]	; (8000d5c <tryLoadSettings+0xac>)
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d807      	bhi.n	8000d40 <tryLoadSettings+0x90>
														{
															settings = *flashSettings;
 8000d30:	2268      	movs	r2, #104	; 0x68
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <tryLoadSettings+0xb0>)
 8000d34:	f004 fad6 	bl	80052e4 <memcpy>
															settingsInitiate ();
 8000d38:	f7ff ff9a 	bl	8000c70 <settingsInitiate>
															return 1;
 8000d3c:	2001      	movs	r0, #1
														}
	return 0;
}
 8000d3e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
 8000d40:	2000      	movs	r0, #0
}
 8000d42:	bd38      	pop	{r3, r4, r5, pc}
 8000d44:	20000000 	.word	0x20000000
 8000d48:	f7c64980 	.word	0xf7c64980
 8000d4c:	3351d140 	.word	0x3351d140
 8000d50:	f7c6497f 	.word	0xf7c6497f
 8000d54:	3351d13f 	.word	0x3351d13f
 8000d58:	0292439e 	.word	0x0292439e
 8000d5c:	0098967d 	.word	0x0098967d
 8000d60:	200009a0 	.word	0x200009a0

08000d64 <encoderPinChanged>:
	static uint8_t right;
	static uint8_t left;
	static uint16_t lastStatus;
	static uint8_t r = 0;
	static uint8_t l = 0;
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 8000d64:	4b35      	ldr	r3, [pc, #212]	; (8000e3c <encoderPinChanged+0xd8>)
{
 8000d66:	b470      	push	{r4, r5, r6}
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00

	switch (status)
 8000d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d72:	d03d      	beq.n	8000df0 <encoderPinChanged+0x8c>
 8000d74:	d80c      	bhi.n	8000d90 <encoderPinChanged+0x2c>
 8000d76:	4a32      	ldr	r2, [pc, #200]	; (8000e40 <encoderPinChanged+0xdc>)
 8000d78:	b353      	cbz	r3, 8000dd0 <encoderPinChanged+0x6c>
 8000d7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d7e:	d104      	bne.n	8000d8a <encoderPinChanged+0x26>
			r = 0;
			l = 0;
			break;

		case (0x400):
			if (lastStatus == 0xC00)
 8000d80:	8811      	ldrh	r1, [r2, #0]
 8000d82:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8000d86:	d04d      	beq.n	8000e24 <encoderPinChanged+0xc0>
					right++;
					r = 1;
					l = 0;
				}

			if (lastStatus == 0 && l)
 8000d88:	b349      	cbz	r1, 8000dde <encoderPinChanged+0x7a>
					l = 1;
					r = 0;
				}
	}
	lastStatus = status;
}
 8000d8a:	bc70      	pop	{r4, r5, r6}
	lastStatus = status;
 8000d8c:	8013      	strh	r3, [r2, #0]
}
 8000d8e:	4770      	bx	lr
	switch (status)
 8000d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000d94:	d118      	bne.n	8000dc8 <encoderPinChanged+0x64>
			if (right > 2)
 8000d96:	482b      	ldr	r0, [pc, #172]	; (8000e44 <encoderPinChanged+0xe0>)
 8000d98:	7802      	ldrb	r2, [r0, #0]
 8000d9a:	2a02      	cmp	r2, #2
 8000d9c:	d904      	bls.n	8000da8 <encoderPinChanged+0x44>
				flag.encDec = 1;
 8000d9e:	492a      	ldr	r1, [pc, #168]	; (8000e48 <encoderPinChanged+0xe4>)
 8000da0:	780a      	ldrb	r2, [r1, #0]
 8000da2:	f042 0202 	orr.w	r2, r2, #2
 8000da6:	700a      	strb	r2, [r1, #0]
			if (left > 2)
 8000da8:	4928      	ldr	r1, [pc, #160]	; (8000e4c <encoderPinChanged+0xe8>)
 8000daa:	780a      	ldrb	r2, [r1, #0]
 8000dac:	2a02      	cmp	r2, #2
 8000dae:	d904      	bls.n	8000dba <encoderPinChanged+0x56>
				flag.encInc = 1;
 8000db0:	4c25      	ldr	r4, [pc, #148]	; (8000e48 <encoderPinChanged+0xe4>)
 8000db2:	7822      	ldrb	r2, [r4, #0]
 8000db4:	f042 0201 	orr.w	r2, r2, #1
 8000db8:	7022      	strb	r2, [r4, #0]
			right = 0;
 8000dba:	2200      	movs	r2, #0
			r = 0;
 8000dbc:	4d24      	ldr	r5, [pc, #144]	; (8000e50 <encoderPinChanged+0xec>)
			l = 0;
 8000dbe:	4c25      	ldr	r4, [pc, #148]	; (8000e54 <encoderPinChanged+0xf0>)
			right = 0;
 8000dc0:	7002      	strb	r2, [r0, #0]
			left = 0;
 8000dc2:	700a      	strb	r2, [r1, #0]
			r = 0;
 8000dc4:	702a      	strb	r2, [r5, #0]
			l = 0;
 8000dc6:	7022      	strb	r2, [r4, #0]
			break;
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <encoderPinChanged+0xdc>)
}
 8000dca:	bc70      	pop	{r4, r5, r6}
	lastStatus = status;
 8000dcc:	8013      	strh	r3, [r2, #0]
}
 8000dce:	4770      	bx	lr
			if (lastStatus == 0x400 && r)
 8000dd0:	8811      	ldrh	r1, [r2, #0]
 8000dd2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8000dd6:	d00e      	beq.n	8000df6 <encoderPinChanged+0x92>
			if (lastStatus == 0x800 && l)
 8000dd8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8000ddc:	d1d5      	bne.n	8000d8a <encoderPinChanged+0x26>
			if (lastStatus == 0 && l)
 8000dde:	491d      	ldr	r1, [pc, #116]	; (8000e54 <encoderPinChanged+0xf0>)
 8000de0:	7809      	ldrb	r1, [r1, #0]
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d0d1      	beq.n	8000d8a <encoderPinChanged+0x26>
				left++;
 8000de6:	4819      	ldr	r0, [pc, #100]	; (8000e4c <encoderPinChanged+0xe8>)
 8000de8:	7801      	ldrb	r1, [r0, #0]
 8000dea:	3101      	adds	r1, #1
 8000dec:	7001      	strb	r1, [r0, #0]
 8000dee:	e7cc      	b.n	8000d8a <encoderPinChanged+0x26>
			if ((lastStatus == 0x000) && r)
 8000df0:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <encoderPinChanged+0xdc>)
 8000df2:	8811      	ldrh	r1, [r2, #0]
 8000df4:	b941      	cbnz	r1, 8000e08 <encoderPinChanged+0xa4>
			if (lastStatus == 0x400 && r)
 8000df6:	4916      	ldr	r1, [pc, #88]	; (8000e50 <encoderPinChanged+0xec>)
 8000df8:	7809      	ldrb	r1, [r1, #0]
 8000dfa:	2900      	cmp	r1, #0
 8000dfc:	d0c5      	beq.n	8000d8a <encoderPinChanged+0x26>
				right++;
 8000dfe:	4811      	ldr	r0, [pc, #68]	; (8000e44 <encoderPinChanged+0xe0>)
 8000e00:	7801      	ldrb	r1, [r0, #0]
 8000e02:	3101      	adds	r1, #1
 8000e04:	7001      	strb	r1, [r0, #0]
 8000e06:	e7c0      	b.n	8000d8a <encoderPinChanged+0x26>
			if (lastStatus == 0xC00)
 8000e08:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8000e0c:	d1bd      	bne.n	8000d8a <encoderPinChanged+0x26>
					l = 1;
 8000e0e:	2601      	movs	r6, #1
					r = 0;
 8000e10:	2400      	movs	r4, #0
					left++;
 8000e12:	480e      	ldr	r0, [pc, #56]	; (8000e4c <encoderPinChanged+0xe8>)
					l = 1;
 8000e14:	4d0f      	ldr	r5, [pc, #60]	; (8000e54 <encoderPinChanged+0xf0>)
					left++;
 8000e16:	7801      	ldrb	r1, [r0, #0]
 8000e18:	4431      	add	r1, r6
 8000e1a:	7001      	strb	r1, [r0, #0]
					r = 0;
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <encoderPinChanged+0xec>)
					l = 1;
 8000e1e:	702e      	strb	r6, [r5, #0]
					r = 0;
 8000e20:	700c      	strb	r4, [r1, #0]
 8000e22:	e7b2      	b.n	8000d8a <encoderPinChanged+0x26>
					r = 1;
 8000e24:	2601      	movs	r6, #1
					l = 0;
 8000e26:	2400      	movs	r4, #0
					right++;
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <encoderPinChanged+0xe0>)
					r = 1;
 8000e2a:	4d09      	ldr	r5, [pc, #36]	; (8000e50 <encoderPinChanged+0xec>)
					right++;
 8000e2c:	7801      	ldrb	r1, [r0, #0]
 8000e2e:	4431      	add	r1, r6
 8000e30:	7001      	strb	r1, [r0, #0]
					l = 0;
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <encoderPinChanged+0xf0>)
					r = 1;
 8000e34:	702e      	strb	r6, [r5, #0]
					l = 0;
 8000e36:	700c      	strb	r4, [r1, #0]
			if (lastStatus == 0 && l)
 8000e38:	e7a7      	b.n	8000d8a <encoderPinChanged+0x26>
 8000e3a:	bf00      	nop
 8000e3c:	40010c08 	.word	0x40010c08
 8000e40:	20000094 	.word	0x20000094
 8000e44:	20000098 	.word	0x20000098
 8000e48:	20000a7c 	.word	0x20000a7c
 8000e4c:	20000096 	.word	0x20000096
 8000e50:	20000097 	.word	0x20000097
 8000e54:	20000092 	.word	0x20000092

08000e58 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin)
 8000e58:	2804      	cmp	r0, #4
{
 8000e5a:	b510      	push	{r4, lr}
 8000e5c:	4604      	mov	r4, r0
	switch (GPIO_Pin)
 8000e5e:	d01b      	beq.n	8000e98 <HAL_GPIO_EXTI_Callback+0x40>
 8000e60:	d810      	bhi.n	8000e84 <HAL_GPIO_EXTI_Callback+0x2c>
 8000e62:	2802      	cmp	r0, #2
 8000e64:	d10d      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x2a>
			delayMicro (20000);
 8000e66:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e6a:	f7ff fde5 	bl	8000a38 <delayMicro>
			if (HAL_GPIO_ReadPin (B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000e6e:	4621      	mov	r1, r4
 8000e70:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000e72:	f001 ff47 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000e76:	b920      	cbnz	r0, 8000e82 <HAL_GPIO_EXTI_Callback+0x2a>
				flag.encOk = 1;
 8000e78:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x64>)
 8000e7a:	7813      	ldrb	r3, [r2, #0]
 8000e7c:	f043 0304 	orr.w	r3, r3, #4
 8000e80:	7013      	strb	r3, [r2, #0]
}
 8000e82:	bd10      	pop	{r4, pc}
	switch (GPIO_Pin)
 8000e84:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8000e88:	d002      	beq.n	8000e90 <HAL_GPIO_EXTI_Callback+0x38>
 8000e8a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8000e8e:	d1f8      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x2a>
}
 8000e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			encoderPinChanged ();
 8000e94:	f7ff bf66 	b.w	8000d64 <encoderPinChanged>
			delayMicro (20000);
 8000e98:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000e9c:	f7ff fdcc 	bl	8000a38 <delayMicro>
			if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 8000ea0:	4621      	mov	r1, r4
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ea4:	f001 ff2e 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d1ea      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x2a>
				flag.back = 1;
 8000eac:	4a03      	ldr	r2, [pc, #12]	; (8000ebc <HAL_GPIO_EXTI_Callback+0x64>)
 8000eae:	7813      	ldrb	r3, [r2, #0]
 8000eb0:	f043 0308 	orr.w	r3, r3, #8
 8000eb4:	7013      	strb	r3, [r2, #0]
}
 8000eb6:	bd10      	pop	{r4, pc}
 8000eb8:	40010c00 	.word	0x40010c00
 8000ebc:	20000a7c 	.word	0x20000a7c

08000ec0 <ShowLogo>:
 * @brief Handles turn on logo
 * @param None
 * @retval None
 */
void ShowLogo ()
{
 8000ec0:	b570      	push	{r4, r5, r6, lr}
	int i = 0;
	for (i = 0; i < MAX_NODES + 1; i++)
 8000ec2:	2400      	movs	r4, #0
		{
			wsSetColor (i, WHITE);
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	b2e0      	uxtb	r0, r4
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f001 f8e8 	bl	80020a0 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 8000ed0:	3401      	adds	r4, #1
			wsPrepareArray ();
 8000ed2:	f001 f8f1 	bl	80020b8 <wsPrepareArray>
			HAL_Delay (20);
 8000ed6:	2014      	movs	r0, #20
 8000ed8:	f001 f9bc 	bl	8002254 <HAL_Delay>
	for (i = 0; i < MAX_NODES + 1; i++)
 8000edc:	2c09      	cmp	r4, #9
 8000ede:	d1f1      	bne.n	8000ec4 <ShowLogo+0x4>
		}
	clearStrings ();
 8000ee0:	f7ff fe66 	bl	8000bb0 <clearStrings>
	sprintf (string[0], "SX127* is OK ");
 8000ee4:	4c38      	ldr	r4, [pc, #224]	; (8000fc8 <ShowLogo+0x108>)
 8000ee6:	4b39      	ldr	r3, [pc, #228]	; (8000fcc <ShowLogo+0x10c>)
	sprintf (string[1], "Module Firmware:");
 8000ee8:	4e39      	ldr	r6, [pc, #228]	; (8000fd0 <ShowLogo+0x110>)
	sprintf (string[0], "SX127* is OK ");
 8000eea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eec:	c407      	stmia	r4!, {r0, r1, r2}
 8000eee:	4625      	mov	r5, r4
 8000ef0:	f825 3b34 	strh.w	r3, [r5], #52
	sprintf (string[1], "Module Firmware:");
 8000ef4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef8:	6833      	ldr	r3, [r6, #0]
	sprintf (string[2], "0x%X", myRadio.revision);
 8000efa:	4a36      	ldr	r2, [pc, #216]	; (8000fd4 <ShowLogo+0x114>)
 8000efc:	f104 0074 	add.w	r0, r4, #116	; 0x74
	sprintf (string[1], "Module Firmware:");
 8000f00:	702b      	strb	r3, [r5, #0]
	sprintf (string[2], "0x%X", myRadio.revision);
 8000f02:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 8000f06:	4934      	ldr	r1, [pc, #208]	; (8000fd8 <ShowLogo+0x118>)
 8000f08:	3c0c      	subs	r4, #12
	ssd1306_Clean ();
 8000f0a:	4626      	mov	r6, r4
	sprintf (string[2], "0x%X", myRadio.revision);
 8000f0c:	f004 fa1a 	bl	8005344 <siprintf>
	for (int i = 0; i < 8; i++)
 8000f10:	2500      	movs	r5, #0
	ssd1306_Clean ();
 8000f12:	f000 fd85 	bl	8001a20 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 8000f16:	4629      	mov	r1, r5
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f000 fd43 	bl	80019a4 <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8000f1e:	3501      	adds	r5, #1
			ssd1306_PutString (string[i]);
 8000f20:	4630      	mov	r0, r6
 8000f22:	f000 fd47 	bl	80019b4 <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8000f26:	2d08      	cmp	r5, #8
 8000f28:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8000f2c:	d1f3      	bne.n	8000f16 <ShowLogo+0x56>
	ssd1306_Update ();
 8000f2e:	f000 fd7f 	bl	8001a30 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8000f32:	2500      	movs	r5, #0
	UC1609_Clean ();
 8000f34:	f7ff fcfa 	bl	800092c <UC1609_Clean>
 8000f38:	4e23      	ldr	r6, [pc, #140]	; (8000fc8 <ShowLogo+0x108>)
			UC1609_SetPos (0, i);
 8000f3a:	b2e9      	uxtb	r1, r5
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f7ff fc4b 	bl	80007d8 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8000f42:	3501      	adds	r5, #1
			UC1609_PutString (string[i]);
 8000f44:	4630      	mov	r0, r6
 8000f46:	f7ff fcf9 	bl	800093c <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8000f4a:	2d08      	cmp	r5, #8
 8000f4c:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8000f50:	d1f3      	bne.n	8000f3a <ShowLogo+0x7a>
	UC1609_UpdateScreen ();
 8000f52:	f7ff fc4d 	bl	80007f0 <UC1609_UpdateScreen>
	updateLcd ();
	HAL_Delay (100);
 8000f56:	2064      	movs	r0, #100	; 0x64
 8000f58:	f001 f97c 	bl	8002254 <HAL_Delay>
	clearStrings ();
	sprintf (string[0], "Firmware:");
 8000f5c:	4e1a      	ldr	r6, [pc, #104]	; (8000fc8 <ShowLogo+0x108>)
	clearStrings ();
 8000f5e:	f7ff fe27 	bl	8000bb0 <clearStrings>
	sprintf (string[0], "Firmware:");
 8000f62:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <ShowLogo+0x11c>)
	for (int i = 0; i < 8; i++)
 8000f64:	2500      	movs	r5, #0
	sprintf (string[0], "Firmware:");
 8000f66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000f6a:	c603      	stmia	r6!, {r0, r1}
 8000f6c:	4630      	mov	r0, r6
	sprintf (string[1], "%lu", version);
 8000f6e:	491c      	ldr	r1, [pc, #112]	; (8000fe0 <ShowLogo+0x120>)
	sprintf (string[0], "Firmware:");
 8000f70:	f820 2b38 	strh.w	r2, [r0], #56
	sprintf (string[1], "%lu", version);
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <ShowLogo+0x124>)
 8000f76:	f004 f9e5 	bl	8005344 <siprintf>
	ssd1306_Clean ();
 8000f7a:	f000 fd51 	bl	8001a20 <ssd1306_Clean>
 8000f7e:	3e08      	subs	r6, #8
			ssd1306_GotoXY (0, i);
 8000f80:	4629      	mov	r1, r5
 8000f82:	2000      	movs	r0, #0
 8000f84:	f000 fd0e 	bl	80019a4 <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8000f88:	3501      	adds	r5, #1
			ssd1306_PutString (string[i]);
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f000 fd12 	bl	80019b4 <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8000f90:	2d08      	cmp	r5, #8
 8000f92:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8000f96:	d1f3      	bne.n	8000f80 <ShowLogo+0xc0>
	ssd1306_Update ();
 8000f98:	f000 fd4a 	bl	8001a30 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8000f9c:	2500      	movs	r5, #0
	UC1609_Clean ();
 8000f9e:	f7ff fcc5 	bl	800092c <UC1609_Clean>
			UC1609_SetPos (0, i);
 8000fa2:	b2e9      	uxtb	r1, r5
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff fc17 	bl	80007d8 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8000faa:	3501      	adds	r5, #1
			UC1609_PutString (string[i]);
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff fcc5 	bl	800093c <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8000fb2:	2d08      	cmp	r5, #8
 8000fb4:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8000fb8:	d1f3      	bne.n	8000fa2 <ShowLogo+0xe2>
	UC1609_UpdateScreen ();
 8000fba:	f7ff fc19 	bl	80007f0 <UC1609_UpdateScreen>
	updateLcd ();
	HAL_Delay (100);
}
 8000fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay (100);
 8000fc2:	2064      	movs	r0, #100	; 0x64
 8000fc4:	f001 b946 	b.w	8002254 <HAL_Delay>
 8000fc8:	2000009c 	.word	0x2000009c
 8000fcc:	08005ba0 	.word	0x08005ba0
 8000fd0:	08005bb0 	.word	0x08005bb0
 8000fd4:	200008c8 	.word	0x200008c8
 8000fd8:	08005bc4 	.word	0x08005bc4
 8000fdc:	08005bcc 	.word	0x08005bcc
 8000fe0:	0800614c 	.word	0x0800614c
 8000fe4:	08082021 	.word	0x08082021

08000fe8 <RadioInit>:
			flag.lcdRefreshRequest = 1;
		}
}

void RadioInit ()
{
 8000fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SX127X_defaultConfig (&myRadio);
 8000fec:	4e25      	ldr	r6, [pc, #148]	; (8001084 <RadioInit+0x9c>)
{
 8000fee:	b082      	sub	sp, #8
	SX127X_defaultConfig (&myRadio);
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	f000 ff93 	bl	8001f1c <SX127X_defaultConfig>
	settings.cr = SX127X_CR_4_8;
 8000ff6:	f44f 7882 	mov.w	r8, #260	; 0x104
	defaultSettings ();

	nss.pin = NSS_Pin;
	nss.port = NSS_GPIO_Port;
	reset.pin = RESET_Pin;
 8000ffa:	f04f 0e08 	mov.w	lr, #8
	nss.pin = NSS_Pin;
 8000ffe:	2310      	movs	r3, #16
	settings.power = SX127X_POWER_20DBM;
 8001000:	f04f 0c14 	mov.w	ip, #20
	settings.baseID = 1;
 8001004:	2701      	movs	r7, #1
	settings.realFrequency = DEF_FREQUENCY;
 8001006:	4a20      	ldr	r2, [pc, #128]	; (8001088 <RadioInit+0xa0>)
	sprintf (settings.SSID, "EXEcutor");
 8001008:	4d20      	ldr	r5, [pc, #128]	; (800108c <RadioInit+0xa4>)
	sprintf (settings.WiFiPass, "executor");
 800100a:	4c21      	ldr	r4, [pc, #132]	; (8001090 <RadioInit+0xa8>)
	sprintf (settings.SSID, "EXEcutor");
 800100c:	cd03      	ldmia	r5!, {r0, r1}
 800100e:	f8c2 1017 	str.w	r1, [r2, #23]
 8001012:	7829      	ldrb	r1, [r5, #0]
 8001014:	f8c2 0013 	str.w	r0, [r2, #19]
 8001018:	76d1      	strb	r1, [r2, #27]
	sprintf (settings.ServerPass, "12345");
 800101a:	4d1e      	ldr	r5, [pc, #120]	; (8001094 <RadioInit+0xac>)
	sprintf (settings.WiFiPass, "executor");
 800101c:	cc03      	ldmia	r4!, {r0, r1}
 800101e:	f8c2 0023 	str.w	r0, [r2, #35]	; 0x23
 8001022:	7820      	ldrb	r0, [r4, #0]
	sprintf (settings.ServerPass, "12345");
 8001024:	88ac      	ldrh	r4, [r5, #4]
	sprintf (settings.WiFiPass, "executor");
 8001026:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
	sprintf (settings.ServerPass, "12345");
 800102a:	6828      	ldr	r0, [r5, #0]
	sprintf (settings.WiFiPass, "executor");
 800102c:	f8c2 1027 	str.w	r1, [r2, #39]	; 0x27
	sprintf (settings.ServerPass, "12345");
 8001030:	f8c2 0033 	str.w	r0, [r2, #51]	; 0x33
 8001034:	f8a2 4037 	strh.w	r4, [r2, #55]	; 0x37
	nss.port = NSS_GPIO_Port;
 8001038:	4817      	ldr	r0, [pc, #92]	; (8001098 <RadioInit+0xb0>)
	reset.pin = RESET_Pin;
 800103a:	4918      	ldr	r1, [pc, #96]	; (800109c <RadioInit+0xb4>)
	settings.realFrequency = DEF_FREQUENCY;
 800103c:	4c18      	ldr	r4, [pc, #96]	; (80010a0 <RadioInit+0xb8>)
	settings.cr = SX127X_CR_4_8;
 800103e:	f8a2 8010 	strh.w	r8, [r2, #16]
	reset.pin = RESET_Pin;
 8001042:	f8c1 e000 	str.w	lr, [r1]
	reset.port = RESET_GPIO_Port;
 8001046:	6048      	str	r0, [r1, #4]
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8001048:	9000      	str	r0, [sp, #0]
	settings.realFrequency = DEF_FREQUENCY;
 800104a:	6014      	str	r4, [r2, #0]
	settings.warningDelay = WARNING_DELAY;
 800104c:	4c15      	ldr	r4, [pc, #84]	; (80010a4 <RadioInit+0xbc>)
	settings.preamble = 5;
 800104e:	4d16      	ldr	r5, [pc, #88]	; (80010a8 <RadioInit+0xc0>)
	settings.warningDelay = WARNING_DELAY;
 8001050:	6054      	str	r4, [r2, #4]
	settings.superWarningDelay = SUPER_WARNING_DELAY;
 8001052:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 8001056:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
 800105a:	6094      	str	r4, [r2, #8]
	nss.pin = NSS_Pin;
 800105c:	4c13      	ldr	r4, [pc, #76]	; (80010ac <RadioInit+0xc4>)
	settings.preamble = 5;
 800105e:	60d5      	str	r5, [r2, #12]
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8001060:	4d13      	ldr	r5, [pc, #76]	; (80010b0 <RadioInit+0xc8>)
	nss.pin = NSS_Pin;
 8001062:	e9c4 3000 	strd	r3, r0, [r4]
	settings.power = SX127X_POWER_20DBM;
 8001066:	f882 c012 	strb.w	ip, [r2, #18]
	settings.baseID = 1;
 800106a:	6657      	str	r7, [r2, #100]	; 0x64
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 800106c:	4630      	mov	r0, r6
 800106e:	c906      	ldmia	r1, {r1, r2}
 8001070:	9501      	str	r5, [sp, #4]
 8001072:	f000 ff67 	bl	8001f44 <SX127X_PortConfig>
	SX127X_init (&myRadio);
 8001076:	4630      	mov	r0, r6
}
 8001078:	b002      	add	sp, #8
 800107a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SX127X_init (&myRadio);
 800107e:	f000 bf7b 	b.w	8001f78 <SX127X_init>
 8001082:	bf00      	nop
 8001084:	200008c8 	.word	0x200008c8
 8001088:	200009a0 	.word	0x200009a0
 800108c:	08005b80 	.word	0x08005b80
 8001090:	08005b8c 	.word	0x08005b8c
 8001094:	08005b98 	.word	0x08005b98
 8001098:	40010800 	.word	0x40010800
 800109c:	20000a08 	.word	0x20000a08
 80010a0:	33c8d600 	.word	0x33c8d600
 80010a4:	0009eb10 	.word	0x0009eb10
 80010a8:	070c0005 	.word	0x070c0005
 80010ac:	20000bc4 	.word	0x20000bc4
 80010b0:	20000d4c 	.word	0x20000d4c

080010b4 <SystemClock_Config>:
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010b4:	2001      	movs	r0, #1
 80010b6:	2102      	movs	r1, #2
{
 80010b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010bc:	2609      	movs	r6, #9
 80010be:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c2:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010c4:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 80010c8:	f44f 15e0 	mov.w	r5, #1835008	; 0x1c0000
{
 80010cc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d2:	a80a      	add	r0, sp, #40	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80010d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010dc:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80010e0:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010e4:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ea:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010ec:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ee:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f2:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010f4:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f002 fc1f 	bl	8003938 <HAL_RCC_OscConfig>
 80010fa:	b100      	cbz	r0, 80010fe <SystemClock_Config+0x4a>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */

	while (1)
 80010fc:	e7fe      	b.n	80010fc <SystemClock_Config+0x48>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010fe:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001100:	260f      	movs	r6, #15
 8001102:	2702      	movs	r7, #2
 8001104:	2400      	movs	r4, #0
 8001106:	f44f 6580 	mov.w	r5, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110a:	2102      	movs	r1, #2
 800110c:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001112:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001116:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f002 fe0e 	bl	8003d38 <HAL_RCC_ClockConfig>
 800111c:	b100      	cbz	r0, 8001120 <SystemClock_Config+0x6c>
	while (1)
 800111e:	e7fe      	b.n	800111e <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001120:	2202      	movs	r2, #2
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001126:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001128:	9200      	str	r2, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800112a:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112c:	f002 fef2 	bl	8003f14 <HAL_RCCEx_PeriphCLKConfig>
 8001130:	b908      	cbnz	r0, 8001136 <SystemClock_Config+0x82>
}
 8001132:	b015      	add	sp, #84	; 0x54
 8001134:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (1)
 8001136:	e7fe      	b.n	8001136 <SystemClock_Config+0x82>

08001138 <main>:
{
 8001138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	2400      	movs	r4, #0
{
 800113e:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8001140:	f001 f864 	bl	800220c <HAL_Init>
  SystemClock_Config();
 8001144:	f7ff ffb6 	bl	80010b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800114c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001150:	4d86      	ldr	r5, [pc, #536]	; (800136c <main+0x234>)
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001152:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001156:	f44f 718c 	mov.w	r1, #280	; 0x118
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115a:	f043 0320 	orr.w	r3, r3, #32
 800115e:	61ab      	str	r3, [r5, #24]
 8001160:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8001162:	4883      	ldr	r0, [pc, #524]	; (8001370 <main+0x238>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001164:	f003 0320 	and.w	r3, r3, #32
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 800116e:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	61ab      	str	r3, [r5, #24]
 8001178:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 800117a:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	9306      	str	r3, [sp, #24]
 8001184:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001188:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	f043 0308 	orr.w	r3, r3, #8
 800118e:	61ab      	str	r3, [r5, #24]
 8001190:	69ab      	ldr	r3, [r5, #24]
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	9307      	str	r3, [sp, #28]
 8001198:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800119a:	f001 fdb9 	bl	8002d10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CD_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 800119e:	4622      	mov	r2, r4
 80011a0:	f245 0120 	movw	r1, #20512	; 0x5020
 80011a4:	4873      	ldr	r0, [pc, #460]	; (8001374 <main+0x23c>)
 80011a6:	f001 fdb3 	bl	8002d10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 80011aa:	f44f 728c 	mov.w	r2, #280	; 0x118
 80011ae:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b0:	486f      	ldr	r0, [pc, #444]	; (8001370 <main+0x238>)
 80011b2:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 80011b4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80011b8:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f001 fc96 	bl	8002aec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 80011c0:	f640 4206 	movw	r2, #3078	; 0xc06
 80011c4:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <main+0x240>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	486b      	ldr	r0, [pc, #428]	; (8001374 <main+0x23c>)
 80011c8:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 80011ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ce:	960c      	str	r6, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f001 fc8c 	bl	8002aec <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin|CD_Pin|BUZZER_Pin;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f245 0220 	movw	r2, #20512	; 0x5020
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011da:	4866      	ldr	r0, [pc, #408]	; (8001374 <main+0x23c>)
 80011dc:	a90a      	add	r1, sp, #40	; 0x28
  GPIO_InitStruct.Pin = CS_Pin|CD_Pin|BUZZER_Pin;
 80011de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80011e2:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f001 fc81 	bl	8002aec <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011ea:	4622      	mov	r2, r4
 80011ec:	4621      	mov	r1, r4
 80011ee:	2007      	movs	r0, #7
 80011f0:	f001 faaa 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011f4:	2007      	movs	r0, #7
 80011f6:	f001 fadf 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80011fa:	4622      	mov	r2, r4
 80011fc:	4621      	mov	r1, r4
 80011fe:	2008      	movs	r0, #8
 8001200:	f001 faa2 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001204:	2008      	movs	r0, #8
 8001206:	f001 fad7 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800120a:	4622      	mov	r2, r4
 800120c:	4621      	mov	r1, r4
 800120e:	2028      	movs	r0, #40	; 0x28
 8001210:	f001 fa9a 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001214:	2028      	movs	r0, #40	; 0x28
 8001216:	f001 facf 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800121c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121e:	4333      	orrs	r3, r6
 8001220:	616b      	str	r3, [r5, #20]
 8001222:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001224:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001226:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001228:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122a:	9304      	str	r3, [sp, #16]
 800122c:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800122e:	f001 fa8b 	bl	8002748 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001232:	2011      	movs	r0, #17
 8001234:	f001 fac0 	bl	80027b8 <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 800123c:	484f      	ldr	r0, [pc, #316]	; (800137c <main+0x244>)
 800123e:	4950      	ldr	r1, [pc, #320]	; (8001380 <main+0x248>)
  hi2c1.Init.ClockSpeed = 400000;
 8001240:	4a50      	ldr	r2, [pc, #320]	; (8001384 <main+0x24c>)
  hi2c1.Init.OwnAddress1 = 0;
 8001242:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hi2c1.Init.ClockSpeed = 400000;
 800124e:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001252:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001254:	f001 ff88 	bl	8003168 <HAL_I2C_Init>
 8001258:	b9c8      	cbnz	r0, 800128e <main+0x156>
  hspi1.Instance = SPI1;
 800125a:	4603      	mov	r3, r0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800125c:	f44f 7882 	mov.w	r8, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001260:	f44f 7700 	mov.w	r7, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001264:	2508      	movs	r5, #8
  hspi1.Init.CRCPolynomial = 10;
 8001266:	240a      	movs	r4, #10
  hspi1.Instance = SPI1;
 8001268:	4847      	ldr	r0, [pc, #284]	; (8001388 <main+0x250>)
 800126a:	4a48      	ldr	r2, [pc, #288]	; (800138c <main+0x254>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800126c:	e9c0 8301 	strd	r8, r3, [r0, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001270:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001274:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001278:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800127c:	e9c0 7506 	strd	r7, r5, [r0, #24]
  hspi1.Instance = SPI1;
 8001280:	6002      	str	r2, [r0, #0]
  hspi1.Init.CRCPolynomial = 10;
 8001282:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001284:	f002 ff26 	bl	80040d4 <HAL_SPI_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	b108      	cbz	r0, 8001290 <main+0x158>
	while (1)
 800128c:	e7fe      	b.n	800128c <main+0x154>
 800128e:	e7fe      	b.n	800128e <main+0x156>
  hspi2.Instance = SPI2;
 8001290:	483f      	ldr	r0, [pc, #252]	; (8001390 <main+0x258>)
 8001292:	4a40      	ldr	r2, [pc, #256]	; (8001394 <main+0x25c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001294:	e9c0 8301 	strd	r8, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001298:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800129c:	e9c0 3705 	strd	r3, r7, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	e9c0 5307 	strd	r5, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.CRCPolynomial = 10;
 80012a8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi2.Instance = SPI2;
 80012aa:	6002      	str	r2, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012ac:	f002 ff12 	bl	80040d4 <HAL_SPI_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b100      	cbz	r0, 80012b6 <main+0x17e>
	while (1)
 80012b4:	e7fe      	b.n	80012b4 <main+0x17c>
  htim2.Instance = TIM2;
 80012b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 89;
 80012ba:	2259      	movs	r2, #89	; 0x59
  htim2.Instance = TIM2;
 80012bc:	4c36      	ldr	r4, [pc, #216]	; (8001398 <main+0x260>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012be:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 80012c2:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80012c6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ca:	9008      	str	r0, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012cc:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012ce:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim2.Instance = TIM2;
 80012d4:	6021      	str	r1, [r4, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	61a3      	str	r3, [r4, #24]
  htim2.Init.Period = 89;
 80012da:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012de:	f003 fa51 	bl	8004784 <HAL_TIM_PWM_Init>
 80012e2:	b100      	cbz	r0, 80012e6 <main+0x1ae>
	while (1)
 80012e4:	e7fe      	b.n	80012e4 <main+0x1ac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e6:	2200      	movs	r2, #0
 80012e8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ea:	4620      	mov	r0, r4
 80012ec:	a908      	add	r1, sp, #32
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f2:	f003 fd6f 	bl	8004dd4 <HAL_TIMEx_MasterConfigSynchronization>
 80012f6:	b100      	cbz	r0, 80012fa <main+0x1c2>
	while (1)
 80012f8:	e7fe      	b.n	80012f8 <main+0x1c0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012fa:	f04f 0860 	mov.w	r8, #96	; 0x60
 80012fe:	f04f 0900 	mov.w	r9, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001302:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001304:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001306:	2204      	movs	r2, #4
 8001308:	4620      	mov	r0, r4
 800130a:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001310:	f003 fba0 	bl	8004a54 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4605      	mov	r5, r0
 8001316:	b100      	cbz	r0, 800131a <main+0x1e2>
	while (1)
 8001318:	e7fe      	b.n	8001318 <main+0x1e0>
  HAL_TIM_MspPostInit(&htim2);
 800131a:	4620      	mov	r0, r4
 800131c:	f000 fd1e 	bl	8001d5c <HAL_TIM_MspPostInit>
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001320:	230c      	movs	r3, #12
  huart1.Init.BaudRate = 9600;
 8001322:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart1.Instance = USART1;
 8001326:	481d      	ldr	r0, [pc, #116]	; (800139c <main+0x264>)
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <main+0x268>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800132a:	6143      	str	r3, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800132c:	e9c0 1501 	strd	r1, r5, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001330:	e9c0 5503 	strd	r5, r5, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	e9c0 5506 	strd	r5, r5, [r0, #24]
  huart1.Instance = USART1;
 8001338:	6002      	str	r2, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800133a:	f003 fd7d 	bl	8004e38 <HAL_UART_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	b990      	cbnz	r0, 8001368 <main+0x230>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001342:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 8001346:	4c17      	ldr	r4, [pc, #92]	; (80013a4 <main+0x26c>)
 8001348:	4a17      	ldr	r2, [pc, #92]	; (80013a8 <main+0x270>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800134a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800134e:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001350:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001352:	61e1      	str	r1, [r4, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001354:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001356:	7326      	strb	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001358:	7523      	strb	r3, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800135a:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 800135c:	6126      	str	r6, [r4, #16]
  hadc1.Instance = ADC1;
 800135e:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001360:	f000 ff8a 	bl	8002278 <HAL_ADC_Init>
 8001364:	b310      	cbz	r0, 80013ac <main+0x274>
	while (1)
 8001366:	e7fe      	b.n	8001366 <main+0x22e>
 8001368:	e7fe      	b.n	8001368 <main+0x230>
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	40010800 	.word	0x40010800
 8001374:	40010c00 	.word	0x40010c00
 8001378:	10310000 	.word	0x10310000
 800137c:	20000a10 	.word	0x20000a10
 8001380:	40005400 	.word	0x40005400
 8001384:	00061a80 	.word	0x00061a80
 8001388:	20000d4c 	.word	0x20000d4c
 800138c:	40013000 	.word	0x40013000
 8001390:	20000944 	.word	0x20000944
 8001394:	40003800 	.word	0x40003800
 8001398:	20000da4 	.word	0x20000da4
 800139c:	20000b60 	.word	0x20000b60
 80013a0:	40013800 	.word	0x40013800
 80013a4:	20000acc 	.word	0x20000acc
 80013a8:	40012400 	.word	0x40012400
  sConfig.Channel = ADC_CHANNEL_2;
 80013ac:	2602      	movs	r6, #2
 80013ae:	2701      	movs	r7, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013b0:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b2:	4620      	mov	r0, r4
 80013b4:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Channel = ADC_CHANNEL_2;
 80013b6:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80013ba:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013bc:	f001 f854 	bl	8002468 <HAL_ADC_ConfigChannel>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	f040 812e 	bne.w	8001622 <main+0x4ea>
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80013c6:	2106      	movs	r1, #6
  hiwdg.Init.Reload = 4095;
 80013c8:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Instance = IWDG;
 80013cc:	4896      	ldr	r0, [pc, #600]	; (8001628 <main+0x4f0>)
 80013ce:	4a97      	ldr	r2, [pc, #604]	; (800162c <main+0x4f4>)
  hiwdg.Init.Reload = 4095;
 80013d0:	6083      	str	r3, [r0, #8]
  hiwdg.Instance = IWDG;
 80013d2:	e9c0 2100 	strd	r2, r1, [r0]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80013d6:	f002 fa81 	bl	80038dc <HAL_IWDG_Init>
 80013da:	2800      	cmp	r0, #0
 80013dc:	f040 8122 	bne.w	8001624 <main+0x4ec>
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80013e0:	4a93      	ldr	r2, [pc, #588]	; (8001630 <main+0x4f8>)
	HAL_Delay (300);
 80013e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80013e6:	6853      	ldr	r3, [r2, #4]
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 80013e8:	2400      	movs	r4, #0
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80013ea:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013ee:	6053      	str	r3, [r2, #4]
	HAL_Delay (300);
 80013f0:	f000 ff30 	bl	8002254 <HAL_Delay>
	ssd1306_Init ();
 80013f4:	f000 f960 	bl	80016b8 <ssd1306_Init>
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 80013f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013fc:	4b8d      	ldr	r3, [pc, #564]	; (8001634 <main+0x4fc>)
 80013fe:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001402:	4619      	mov	r1, r3
 8001404:	488c      	ldr	r0, [pc, #560]	; (8001638 <main+0x500>)
 8001406:	9200      	str	r2, [sp, #0]
 8001408:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800140c:	f7ff f91c 	bl	8000648 <UC1609_Init>
	wsRefreshLeds (&htim2, TIM_CHANNEL_2);
 8001410:	2104      	movs	r1, #4
 8001412:	488a      	ldr	r0, [pc, #552]	; (800163c <main+0x504>)
 8001414:	f000 fea8 	bl	8002168 <wsRefreshLeds>
	uartInit (&huart1);
 8001418:	4889      	ldr	r0, [pc, #548]	; (8001640 <main+0x508>)
 800141a:	f000 fe05 	bl	8002028 <uartInit>
	HAL_ADC_Start_DMA (&hadc1, (uint32_t*) &adc, 1);
 800141e:	2201      	movs	r2, #1
 8001420:	4988      	ldr	r1, [pc, #544]	; (8001644 <main+0x50c>)
 8001422:	4889      	ldr	r0, [pc, #548]	; (8001648 <main+0x510>)
 8001424:	f001 f8f0 	bl	8002608 <HAL_ADC_Start_DMA>
	RadioInit ();
 8001428:	f7ff fdde 	bl	8000fe8 <RadioInit>
	legalFreq.intervalCount = 3;
 800142c:	2203      	movs	r2, #3
	legalFreq.interval[1].maxAirUse = 10; //1%
 800142e:	f04f 0c0a 	mov.w	ip, #10
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 8001432:	2501      	movs	r5, #1
	legalFreq.interval[0].maxPower = 14; //25mW
 8001434:	200e      	movs	r0, #14
	legalFreq.interval[2].maxPower = 20;
 8001436:	2614      	movs	r6, #20
	legalFreq.interval[2].maxAirUse = 100; //10%
 8001438:	2764      	movs	r7, #100	; 0x64
	legalFreq.intervalCount = 3;
 800143a:	4b84      	ldr	r3, [pc, #528]	; (800164c <main+0x514>)
	memset (nodes, 0, sizeof(nodes));
 800143c:	4621      	mov	r1, r4
	legalFreq.intervalCount = 3;
 800143e:	701a      	strb	r2, [r3, #0]
	legalFreq.interval[0].minFreq = 864000000;
 8001440:	4a83      	ldr	r2, [pc, #524]	; (8001650 <main+0x518>)
	legalFreq.interval[1].minFreq = 866000000;
 8001442:	4c84      	ldr	r4, [pc, #528]	; (8001654 <main+0x51c>)
	legalFreq.interval[0].minFreq = 864000000;
 8001444:	605a      	str	r2, [r3, #4]
	legalFreq.interval[0].maxFreq = 865000000;
 8001446:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
 800144a:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800144e:	609a      	str	r2, [r3, #8]
	legalFreq.interval[1].maxFreq = 868000000;
 8001450:	f502 1237 	add.w	r2, r2, #2998272	; 0x2dc000
 8001454:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 8001458:	e9c3 4204 	strd	r4, r2, [r3, #16]
	legalFreq.interval[2].minFreq = 868700000;
 800145c:	4c7e      	ldr	r4, [pc, #504]	; (8001658 <main+0x520>)
	legalFreq.interval[2].maxFreq = 869200000;
 800145e:	f502 1292 	add.w	r2, r2, #1196032	; 0x124000
 8001462:	f502 6278 	add.w	r2, r2, #3968	; 0xf80
	legalFreq.interval[1].maxAirUse = 10; //1%
 8001466:	f8a3 c01a 	strh.w	ip, [r3, #26]
	legalFreq.interval[2].maxFreq = 869200000;
 800146a:	e9c3 4207 	strd	r4, r2, [r3, #28]
	legalFreq.interval[2].maxAirUse = 100; //10%
 800146e:	84df      	strh	r7, [r3, #38]	; 0x26
	legalFreq.interval[0].maxPower = 14; //25mW
 8001470:	7318      	strb	r0, [r3, #12]
	legalFreq.interval[1].maxPower = 14;
 8001472:	7618      	strb	r0, [r3, #24]
	memset (nodes, 0, sizeof(nodes));
 8001474:	f44f 7280 	mov.w	r2, #256	; 0x100
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 8001478:	81dd      	strh	r5, [r3, #14]
	legalFreq.interval[2].maxPower = 20;
 800147a:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
	memset (nodes, 0, sizeof(nodes));
 800147e:	4877      	ldr	r0, [pc, #476]	; (800165c <main+0x524>)
 8001480:	f003 ff58 	bl	8005334 <memset>
	loadNodeData ();
 8001484:	f7ff fb04 	bl	8000a90 <loadNodeData>
	nodeSettings.realFrequency = DEF_FREQUENCY;
 8001488:	223c      	movs	r2, #60	; 0x3c
	nodeSettings.preamble = 5;
 800148a:	2705      	movs	r7, #5
	nodeSettings.power = SX127X_POWER_20DBM;
 800148c:	4b74      	ldr	r3, [pc, #464]	; (8001660 <main+0x528>)
	nodeSettings.realFrequency = DEF_FREQUENCY;
 800148e:	4975      	ldr	r1, [pc, #468]	; (8001664 <main+0x52c>)
	nodeSettings.cr = SX127X_CR_4_8;
 8001490:	4c75      	ldr	r4, [pc, #468]	; (8001668 <main+0x530>)
	nodeSettings.voltageTreshold = 2.5f;
 8001492:	4876      	ldr	r0, [pc, #472]	; (800166c <main+0x534>)
	nodeSettings.realFrequency = DEF_FREQUENCY;
 8001494:	e9c3 1200 	strd	r1, r2, [r3]
	nodeSettings.cr = SX127X_CR_4_8;
 8001498:	f8c3 400b 	str.w	r4, [r3, #11]
	nodeSettings.power = SX127X_POWER_20DBM;
 800149c:	73de      	strb	r6, [r3, #15]
	nodeSettings.useLed = true;
 800149e:	741d      	strb	r5, [r3, #16]
	nodeSettings.preamble = 5;
 80014a0:	811f      	strh	r7, [r3, #8]
	nodeSettings.voltageTreshold = 2.5f;
 80014a2:	6158      	str	r0, [r3, #20]
	ShowLogo ();
 80014a4:	f7ff fd0c 	bl	8000ec0 <ShowLogo>
	clearStrings ();
 80014a8:	f7ff fb82 	bl	8000bb0 <clearStrings>
	if (tryLoadSettings () == 1)
 80014ac:	f7ff fc00 	bl	8000cb0 <tryLoadSettings>
 80014b0:	42a8      	cmp	r0, r5
 80014b2:	f000 80a5 	beq.w	8001600 <main+0x4c8>
			sprintf (string[0], "Failed to load");
 80014b6:	4b6e      	ldr	r3, [pc, #440]	; (8001670 <main+0x538>)
 80014b8:	4c6e      	ldr	r4, [pc, #440]	; (8001674 <main+0x53c>)
 80014ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014bc:	c407      	stmia	r4!, {r0, r1, r2}
 80014be:	f824 3b02 	strh.w	r3, [r4], #2
 80014c2:	4625      	mov	r5, r4
 80014c4:	0c1b      	lsrs	r3, r3, #16
 80014c6:	f805 3b32 	strb.w	r3, [r5], #50
			sprintf (string[1], "settings from flash");
 80014ca:	462e      	mov	r6, r5
 80014cc:	4f6a      	ldr	r7, [pc, #424]	; (8001678 <main+0x540>)
			sprintf (string[2], "Using defaults");
 80014ce:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 80016a0 <main+0x568>
 80014d2:	3472      	adds	r4, #114	; 0x72
			sprintf (string[1], "settings from flash");
 80014d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80014d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
			sprintf (string[2], "Using defaults");
 80014d8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80014dc:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[1], "settings from flash");
 80014de:	683a      	ldr	r2, [r7, #0]
			sprintf (string[2], "Using defaults");
 80014e0:	f824 3b02 	strh.w	r3, [r4], #2
 80014e4:	0c1b      	lsrs	r3, r3, #16
			sprintf (string[1], "settings from flash");
 80014e6:	6032      	str	r2, [r6, #0]
			sprintf (string[2], "Using defaults");
 80014e8:	7023      	strb	r3, [r4, #0]
	myRadio.alwaysRX = true;   //Always listen for AIR
 80014ea:	2601      	movs	r6, #1
	updateLcd ();
 80014ec:	f7ff fb96 	bl	8000c1c <updateLcd>
	HAL_Delay (500);
 80014f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f4:	f000 feae 	bl	8002254 <HAL_Delay>
	flag.lcdRefreshRequest = 1;
 80014f8:	4a60      	ldr	r2, [pc, #384]	; (800167c <main+0x544>)
	myRadio.alwaysRX = true;   //Always listen for AIR
 80014fa:	4c61      	ldr	r4, [pc, #388]	; (8001680 <main+0x548>)
	flag.lcdRefreshRequest = 1;
 80014fc:	7813      	ldrb	r3, [r2, #0]
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80014fe:	2104      	movs	r1, #4
	flag.lcdRefreshRequest = 1;
 8001500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 8001504:	484b      	ldr	r0, [pc, #300]	; (8001634 <main+0x4fc>)
	flag.lcdRefreshRequest = 1;
 8001506:	7013      	strb	r3, [r2, #0]
	myRadio.alwaysRX = true;   //Always listen for AIR
 8001508:	73e6      	strb	r6, [r4, #15]
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 800150a:	f001 fbfb 	bl	8002d04 <HAL_GPIO_ReadPin>
 800150e:	b910      	cbnz	r0, 8001516 <main+0x3de>
		screenMode = smModeSelect;
 8001510:	221d      	movs	r2, #29
 8001512:	4b5c      	ldr	r3, [pc, #368]	; (8001684 <main+0x54c>)
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	4f5c      	ldr	r7, [pc, #368]	; (8001688 <main+0x550>)
 8001518:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80016a4 <main+0x56c>
 800151c:	f8df a188 	ldr.w	sl, [pc, #392]	; 80016a8 <main+0x570>
			HAL_IWDG_Refresh (&hiwdg);
 8001520:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001628 <main+0x4f0>
			sprintf (string[5], "%d",cnt++);
 8001524:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80016ac <main+0x574>
			sprintf (string[0], "String 1 text");
 8001528:	4c52      	ldr	r4, [pc, #328]	; (8001674 <main+0x53c>)
			HAL_IWDG_Refresh (&hiwdg);
 800152a:	4658      	mov	r0, fp
 800152c:	f002 f9fe 	bl	800392c <HAL_IWDG_Refresh>
			sprintf (string[0], "String 1 text");
 8001530:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001534:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[1], "Hello WOrld");
 8001536:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
			sprintf (string[0], "String 1 text");
 800153a:	46a6      	mov	lr, r4
 800153c:	f82e 3b74 	strh.w	r3, [lr], #116
			sprintf (string[2], "Yo nigga what");
 8001540:	4b52      	ldr	r3, [pc, #328]	; (800168c <main+0x554>)
			sprintf (string[1], "Hello WOrld");
 8001542:	e885 0007 	stmia.w	r5, {r0, r1, r2}
			sprintf (string[2], "Yo nigga what");
 8001546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001548:	e8ae 0007 	stmia.w	lr!, {r0, r1, r2}
			sprintf (string[3], "De mysteris dom satanas");
 800154c:	f8df c160 	ldr.w	ip, [pc, #352]	; 80016b0 <main+0x578>
 8001550:	f104 06b4 	add.w	r6, r4, #180	; 0xb4
			sprintf (string[2], "Yo nigga what");
 8001554:	f8ae 3000 	strh.w	r3, [lr]
			sprintf (string[3], "De mysteris dom satanas");
 8001558:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800155c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800155e:	e89c 0003 	ldmia.w	ip, {r0, r1}
			sprintf (string[4], "String 5 text");
 8001562:	4b4b      	ldr	r3, [pc, #300]	; (8001690 <main+0x558>)
 8001564:	f104 0cf4 	add.w	ip, r4, #244	; 0xf4
			sprintf (string[3], "De mysteris dom satanas");
 8001568:	e886 0003 	stmia.w	r6, {r0, r1}
			sprintf (string[4], "String 5 text");
 800156c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156e:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
			UC1609_SetPos (0, 0);
 8001572:	2100      	movs	r1, #0
			sprintf (string[4], "String 5 text");
 8001574:	f8ac 3000 	strh.w	r3, [ip]
			UC1609_SetPos (0, 0);
 8001578:	4608      	mov	r0, r1
 800157a:	f7ff f92d 	bl	80007d8 <UC1609_SetPos>
			UC1609_PutString (string[0]);
 800157e:	f1a4 000c 	sub.w	r0, r4, #12
 8001582:	f7ff f9db 	bl	800093c <UC1609_PutString>
			UC1609_SetPos (0, 1);
 8001586:	2101      	movs	r1, #1
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff f925 	bl	80007d8 <UC1609_SetPos>
			UC1609_PutString (string[1]);
 800158e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8001592:	f7ff f9d3 	bl	800093c <UC1609_PutString>
			UC1609_SetPos (0, 2);
 8001596:	2102      	movs	r1, #2
 8001598:	2000      	movs	r0, #0
 800159a:	f7ff f91d 	bl	80007d8 <UC1609_SetPos>
			UC1609_PutString (string[2]);
 800159e:	f104 0074 	add.w	r0, r4, #116	; 0x74
 80015a2:	f7ff f9cb 	bl	800093c <UC1609_PutString>
			UC1609_SetPos (0, 3);
 80015a6:	2103      	movs	r1, #3
 80015a8:	2000      	movs	r0, #0
 80015aa:	f7ff f915 	bl	80007d8 <UC1609_SetPos>
			UC1609_PutString (string[3]);
 80015ae:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 80015b2:	f7ff f9c3 	bl	800093c <UC1609_PutString>
			UC1609_SetPos (0, 4);
 80015b6:	2104      	movs	r1, #4
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff f90d 	bl	80007d8 <UC1609_SetPos>
			UC1609_PutString (string[4]);
 80015be:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
 80015c2:	f7ff f9bb 	bl	800093c <UC1609_PutString>
			for (int i = 0; i < 64; ++i) {
 80015c6:	2400      	movs	r4, #0
			UC1609_UpdateScreen();
 80015c8:	f7ff f912 	bl	80007f0 <UC1609_UpdateScreen>
					UC1609_Scroll(i);
 80015cc:	b2e0      	uxtb	r0, r4
 80015ce:	f7ff fa03 	bl	80009d8 <UC1609_Scroll>
			for (int i = 0; i < 64; ++i) {
 80015d2:	3401      	adds	r4, #1
					HAL_Delay(30);
 80015d4:	201e      	movs	r0, #30
 80015d6:	f000 fe3d 	bl	8002254 <HAL_Delay>
			for (int i = 0; i < 64; ++i) {
 80015da:	2c40      	cmp	r4, #64	; 0x40
 80015dc:	d1f6      	bne.n	80015cc <main+0x494>
			sprintf (string[5], "%d",cnt++);
 80015de:	f8ba 2000 	ldrh.w	r2, [sl]
 80015e2:	4648      	mov	r0, r9
 80015e4:	1c53      	adds	r3, r2, #1
 80015e6:	492b      	ldr	r1, [pc, #172]	; (8001694 <main+0x55c>)
 80015e8:	f8aa 3000 	strh.w	r3, [sl]
 80015ec:	f003 feaa 	bl	8005344 <siprintf>
			UC1609_SetPos(0, 7);
 80015f0:	2107      	movs	r1, #7
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff f8f0 	bl	80007d8 <UC1609_SetPos>
			UC1609_PutString (string[5]);
 80015f8:	4648      	mov	r0, r9
 80015fa:	f7ff f99f 	bl	800093c <UC1609_PutString>
		{
 80015fe:	e793      	b.n	8001528 <main+0x3f0>
			sprintf (string[0], "Settings loaded");
 8001600:	4e1c      	ldr	r6, [pc, #112]	; (8001674 <main+0x53c>)
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <main+0x560>)
			sprintf (string[1], "from flash");
 8001604:	f106 0540 	add.w	r5, r6, #64	; 0x40
 8001608:	462c      	mov	r4, r5
			sprintf (string[0], "Settings loaded");
 800160a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800160c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			sprintf (string[1], "from flash");
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <main+0x564>)
 8001612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001616:	c403      	stmia	r4!, {r0, r1}
 8001618:	0c13      	lsrs	r3, r2, #16
 800161a:	f824 2b02 	strh.w	r2, [r4], #2
 800161e:	7023      	strb	r3, [r4, #0]
 8001620:	e763      	b.n	80014ea <main+0x3b2>
	while (1)
 8001622:	e7fe      	b.n	8001622 <main+0x4ea>
 8001624:	e7fe      	b.n	8001624 <main+0x4ec>
 8001626:	bf00      	nop
 8001628:	20000a64 	.word	0x20000a64
 800162c:	40003000 	.word	0x40003000
 8001630:	e0042000 	.word	0xe0042000
 8001634:	40010c00 	.word	0x40010c00
 8001638:	20000944 	.word	0x20000944
 800163c:	20000da4 	.word	0x20000da4
 8001640:	20000b60 	.word	0x20000b60
 8001644:	20000bc0 	.word	0x20000bc0
 8001648:	20000acc 	.word	0x20000acc
 800164c:	20000afc 	.word	0x20000afc
 8001650:	337f9800 	.word	0x337f9800
 8001654:	339e1c80 	.word	0x339e1c80
 8001658:	33c74f60 	.word	0x33c74f60
 800165c:	20000c18 	.word	0x20000c18
 8001660:	20000ba4 	.word	0x20000ba4
 8001664:	33c8d600 	.word	0x33c8d600
 8001668:	01070c04 	.word	0x01070c04
 800166c:	40200000 	.word	0x40200000
 8001670:	080062b0 	.word	0x080062b0
 8001674:	2000009c 	.word	0x2000009c
 8001678:	080062c0 	.word	0x080062c0
 800167c:	20000a7c 	.word	0x20000a7c
 8001680:	200008c8 	.word	0x200008c8
 8001684:	20000099 	.word	0x20000099
 8001688:	080062e4 	.word	0x080062e4
 800168c:	08006300 	.word	0x08006300
 8001690:	08006328 	.word	0x08006328
 8001694:	08005ee8 	.word	0x08005ee8
 8001698:	08006294 	.word	0x08006294
 800169c:	080062a4 	.word	0x080062a4
 80016a0:	080062d4 	.word	0x080062d4
 80016a4:	080062f4 	.word	0x080062f4
 80016a8:	20000090 	.word	0x20000090
 80016ac:	200001dc 	.word	0x200001dc
 80016b0:	08006310 	.word	0x08006310

080016b4 <Error_Handler>:
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler>
 80016b6:	bf00      	nop

080016b8 <ssd1306_Init>:

//
//	Initialize the oled screen
//
void ssd1306_Init(void)
{	
 80016b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	// Wait for the screen to boot
	HAL_Delay(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
{	
 80016be:	b086      	sub	sp, #24
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80016c0:	2401      	movs	r4, #1
 80016c2:	260a      	movs	r6, #10
	HAL_Delay(100);
 80016c4:	f000 fdc6 	bl	8002254 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 80016c8:	f04f 0cae 	mov.w	ip, #174	; 0xae
 80016cc:	f04f 0920 	mov.w	r9, #32
 80016d0:	f04f 0a10 	mov.w	sl, #16
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80016d4:	4db2      	ldr	r5, [pc, #712]	; (80019a0 <ssd1306_Init+0x2e8>)
 80016d6:	f10d 0717 	add.w	r7, sp, #23
 80016da:	4623      	mov	r3, r4
 80016dc:	4628      	mov	r0, r5
 80016de:	2200      	movs	r2, #0
 80016e0:	2178      	movs	r1, #120	; 0x78
 80016e2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016e6:	9700      	str	r7, [sp, #0]
 80016e8:	f88d c017 	strb.w	ip, [sp, #23]
 80016ec:	f001 fe00 	bl	80032f0 <HAL_I2C_Mem_Write>
 80016f0:	4623      	mov	r3, r4
 80016f2:	4628      	mov	r0, r5
 80016f4:	2200      	movs	r2, #0
 80016f6:	2178      	movs	r1, #120	; 0x78
 80016f8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80016fc:	9700      	str	r7, [sp, #0]
 80016fe:	f88d 9017 	strb.w	r9, [sp, #23]
 8001702:	f001 fdf5 	bl	80032f0 <HAL_I2C_Mem_Write>
 8001706:	4623      	mov	r3, r4
 8001708:	4628      	mov	r0, r5
 800170a:	2200      	movs	r2, #0
 800170c:	2178      	movs	r1, #120	; 0x78
 800170e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001712:	9700      	str	r7, [sp, #0]
 8001714:	f88d a017 	strb.w	sl, [sp, #23]
 8001718:	f001 fdea 	bl	80032f0 <HAL_I2C_Mem_Write>
 800171c:	2200      	movs	r2, #0
 800171e:	f04f 0cb0 	mov.w	ip, #176	; 0xb0
 8001722:	4690      	mov	r8, r2
 8001724:	4623      	mov	r3, r4
 8001726:	4628      	mov	r0, r5
 8001728:	2178      	movs	r1, #120	; 0x78
 800172a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800172e:	9700      	str	r7, [sp, #0]
 8001730:	f88d c017 	strb.w	ip, [sp, #23]
 8001734:	f001 fddc 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001738:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800173c:	4623      	mov	r3, r4
 800173e:	4642      	mov	r2, r8
 8001740:	4628      	mov	r0, r5
 8001742:	2178      	movs	r1, #120	; 0x78
 8001744:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001748:	9700      	str	r7, [sp, #0]
 800174a:	f88d c017 	strb.w	ip, [sp, #23]
 800174e:	f001 fdcf 	bl	80032f0 <HAL_I2C_Mem_Write>
 8001752:	4623      	mov	r3, r4
 8001754:	4642      	mov	r2, r8
 8001756:	4628      	mov	r0, r5
 8001758:	2178      	movs	r1, #120	; 0x78
 800175a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800175e:	9700      	str	r7, [sp, #0]
 8001760:	f88d 8017 	strb.w	r8, [sp, #23]
 8001764:	f001 fdc4 	bl	80032f0 <HAL_I2C_Mem_Write>
 8001768:	4623      	mov	r3, r4
 800176a:	4642      	mov	r2, r8
 800176c:	4628      	mov	r0, r5
 800176e:	2178      	movs	r1, #120	; 0x78
 8001770:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001774:	9700      	str	r7, [sp, #0]
 8001776:	f88d a017 	strb.w	sl, [sp, #23]
 800177a:	f001 fdb9 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x00); //---set low column address
	ssd1306_WriteCommand(0x10); //---set high column address
	ssd1306_WriteCommand(0x40); //--set start line address
 800177e:	f04f 0c40 	mov.w	ip, #64	; 0x40
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001782:	4623      	mov	r3, r4
 8001784:	4642      	mov	r2, r8
 8001786:	4628      	mov	r0, r5
 8001788:	2178      	movs	r1, #120	; 0x78
 800178a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800178e:	9700      	str	r7, [sp, #0]
 8001790:	f88d c017 	strb.w	ip, [sp, #23]
 8001794:	f001 fdac 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001798:	f04f 0c81 	mov.w	ip, #129	; 0x81
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800179c:	4623      	mov	r3, r4
 800179e:	4642      	mov	r2, r8
 80017a0:	4628      	mov	r0, r5
 80017a2:	2178      	movs	r1, #120	; 0x78
 80017a4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017a8:	9700      	str	r7, [sp, #0]
 80017aa:	f88d c017 	strb.w	ip, [sp, #23]
 80017ae:	f001 fd9f 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xFF);
 80017b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80017b6:	4623      	mov	r3, r4
 80017b8:	4642      	mov	r2, r8
 80017ba:	4628      	mov	r0, r5
 80017bc:	2178      	movs	r1, #120	; 0x78
 80017be:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017c2:	9700      	str	r7, [sp, #0]
 80017c4:	f88d c017 	strb.w	ip, [sp, #23]
 80017c8:	f001 fd92 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 80017cc:	f04f 0ca1 	mov.w	ip, #161	; 0xa1
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80017d0:	4623      	mov	r3, r4
 80017d2:	4642      	mov	r2, r8
 80017d4:	4628      	mov	r0, r5
 80017d6:	2178      	movs	r1, #120	; 0x78
 80017d8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017dc:	9700      	str	r7, [sp, #0]
 80017de:	f88d c017 	strb.w	ip, [sp, #23]
 80017e2:	f001 fd85 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA6); //--set normal display
 80017e6:	f04f 0ca6 	mov.w	ip, #166	; 0xa6
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80017ea:	4623      	mov	r3, r4
 80017ec:	4642      	mov	r2, r8
 80017ee:	4628      	mov	r0, r5
 80017f0:	2178      	movs	r1, #120	; 0x78
 80017f2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80017f6:	9700      	str	r7, [sp, #0]
 80017f8:	f88d c017 	strb.w	ip, [sp, #23]
 80017fc:	f001 fd78 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001800:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001804:	4623      	mov	r3, r4
 8001806:	4642      	mov	r2, r8
 8001808:	4628      	mov	r0, r5
 800180a:	2178      	movs	r1, #120	; 0x78
 800180c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001810:	9700      	str	r7, [sp, #0]
 8001812:	f88d c017 	strb.w	ip, [sp, #23]
 8001816:	f001 fd6b 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x3F); //
 800181a:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800181e:	4623      	mov	r3, r4
 8001820:	4642      	mov	r2, r8
 8001822:	4628      	mov	r0, r5
 8001824:	2178      	movs	r1, #120	; 0x78
 8001826:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800182a:	9700      	str	r7, [sp, #0]
 800182c:	f88d c017 	strb.w	ip, [sp, #23]
 8001830:	f001 fd5e 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001834:	f04f 0ca4 	mov.w	ip, #164	; 0xa4
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001838:	4623      	mov	r3, r4
 800183a:	4642      	mov	r2, r8
 800183c:	4628      	mov	r0, r5
 800183e:	2178      	movs	r1, #120	; 0x78
 8001840:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001844:	9700      	str	r7, [sp, #0]
 8001846:	f88d c017 	strb.w	ip, [sp, #23]
 800184a:	f001 fd51 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xD3); //-set display offset
 800184e:	f04f 0cd3 	mov.w	ip, #211	; 0xd3
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001852:	4623      	mov	r3, r4
 8001854:	4642      	mov	r2, r8
 8001856:	4628      	mov	r0, r5
 8001858:	2178      	movs	r1, #120	; 0x78
 800185a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800185e:	9700      	str	r7, [sp, #0]
 8001860:	f88d c017 	strb.w	ip, [sp, #23]
 8001864:	f001 fd44 	bl	80032f0 <HAL_I2C_Mem_Write>
 8001868:	4623      	mov	r3, r4
 800186a:	4642      	mov	r2, r8
 800186c:	4628      	mov	r0, r5
 800186e:	2178      	movs	r1, #120	; 0x78
 8001870:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001874:	9700      	str	r7, [sp, #0]
 8001876:	f88d 8017 	strb.w	r8, [sp, #23]
 800187a:	f001 fd39 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x00); //-not offset
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800187e:	f04f 0cd5 	mov.w	ip, #213	; 0xd5
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001882:	4623      	mov	r3, r4
 8001884:	4642      	mov	r2, r8
 8001886:	4628      	mov	r0, r5
 8001888:	2178      	movs	r1, #120	; 0x78
 800188a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800188e:	9700      	str	r7, [sp, #0]
 8001890:	f88d c017 	strb.w	ip, [sp, #23]
 8001894:	f001 fd2c 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001898:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800189c:	4623      	mov	r3, r4
 800189e:	4642      	mov	r2, r8
 80018a0:	4628      	mov	r0, r5
 80018a2:	2178      	movs	r1, #120	; 0x78
 80018a4:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80018a8:	9700      	str	r7, [sp, #0]
 80018aa:	f88d c017 	strb.w	ip, [sp, #23]
 80018ae:	f001 fd1f 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80018b2:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80018b6:	4623      	mov	r3, r4
 80018b8:	4642      	mov	r2, r8
 80018ba:	4628      	mov	r0, r5
 80018bc:	2178      	movs	r1, #120	; 0x78
 80018be:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80018c2:	9700      	str	r7, [sp, #0]
 80018c4:	f88d c017 	strb.w	ip, [sp, #23]
 80018c8:	f001 fd12 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x22); //
 80018cc:	f04f 0c22 	mov.w	ip, #34	; 0x22
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80018d0:	4623      	mov	r3, r4
 80018d2:	4642      	mov	r2, r8
 80018d4:	4628      	mov	r0, r5
 80018d6:	2178      	movs	r1, #120	; 0x78
 80018d8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80018dc:	9700      	str	r7, [sp, #0]
 80018de:	f88d c017 	strb.w	ip, [sp, #23]
 80018e2:	f001 fd05 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80018e6:	f04f 0cda 	mov.w	ip, #218	; 0xda
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80018ea:	4623      	mov	r3, r4
 80018ec:	4642      	mov	r2, r8
 80018ee:	4628      	mov	r0, r5
 80018f0:	2178      	movs	r1, #120	; 0x78
 80018f2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80018f6:	9700      	str	r7, [sp, #0]
 80018f8:	f88d c017 	strb.w	ip, [sp, #23]
 80018fc:	f001 fcf8 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x12);
 8001900:	f04f 0c12 	mov.w	ip, #18
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001904:	4623      	mov	r3, r4
 8001906:	4642      	mov	r2, r8
 8001908:	4628      	mov	r0, r5
 800190a:	2178      	movs	r1, #120	; 0x78
 800190c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001910:	9700      	str	r7, [sp, #0]
 8001912:	f88d c017 	strb.w	ip, [sp, #23]
 8001916:	f001 fceb 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 800191a:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800191e:	4623      	mov	r3, r4
 8001920:	4642      	mov	r2, r8
 8001922:	4628      	mov	r0, r5
 8001924:	2178      	movs	r1, #120	; 0x78
 8001926:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800192a:	9700      	str	r7, [sp, #0]
 800192c:	f88d c017 	strb.w	ip, [sp, #23]
 8001930:	f001 fcde 	bl	80032f0 <HAL_I2C_Mem_Write>
 8001934:	4623      	mov	r3, r4
 8001936:	4642      	mov	r2, r8
 8001938:	4628      	mov	r0, r5
 800193a:	2178      	movs	r1, #120	; 0x78
 800193c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001940:	9700      	str	r7, [sp, #0]
 8001942:	f88d 9017 	strb.w	r9, [sp, #23]
 8001946:	f001 fcd3 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800194a:	f04f 0c8d 	mov.w	ip, #141	; 0x8d
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800194e:	4623      	mov	r3, r4
 8001950:	4642      	mov	r2, r8
 8001952:	4628      	mov	r0, r5
 8001954:	2178      	movs	r1, #120	; 0x78
 8001956:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800195a:	9700      	str	r7, [sp, #0]
 800195c:	f88d c017 	strb.w	ip, [sp, #23]
 8001960:	f001 fcc6 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x14); //
 8001964:	f04f 0c14 	mov.w	ip, #20
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001968:	4623      	mov	r3, r4
 800196a:	4642      	mov	r2, r8
 800196c:	4628      	mov	r0, r5
 800196e:	2178      	movs	r1, #120	; 0x78
 8001970:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001974:	9700      	str	r7, [sp, #0]
 8001976:	f88d c017 	strb.w	ip, [sp, #23]
 800197a:	f001 fcb9 	bl	80032f0 <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 800197e:	f04f 0caf 	mov.w	ip, #175	; 0xaf
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001982:	4642      	mov	r2, r8
 8001984:	4623      	mov	r3, r4
 8001986:	4628      	mov	r0, r5
 8001988:	2178      	movs	r1, #120	; 0x78
 800198a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800198e:	9700      	str	r7, [sp, #0]
 8001990:	f88d c017 	strb.w	ip, [sp, #23]
 8001994:	f001 fcac 	bl	80032f0 <HAL_I2C_Mem_Write>
}
 8001998:	b006      	add	sp, #24
 800199a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800199e:	bf00      	nop
 80019a0:	20000a10 	.word	0x20000a10

080019a4 <ssd1306_GotoXY>:

void ssd1306_GotoXY(int x, int y)
{
cursor=SSD1306_WIDTH*y+x;
 80019a4:	4b02      	ldr	r3, [pc, #8]	; (80019b0 <ssd1306_GotoXY+0xc>)
 80019a6:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 80019aa:	8018      	strh	r0, [r3, #0]
}
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000029c 	.word	0x2000029c

080019b4 <ssd1306_PutString>:
	cursor+=5;
}

void ssd1306_PutString(char *c)
{
	while (*c) {
 80019b4:	7803      	ldrb	r3, [r0, #0]
 80019b6:	b363      	cbz	r3, 8001a12 <ssd1306_PutString+0x5e>
{
 80019b8:	b4f0      	push	{r4, r5, r6, r7}
 80019ba:	4e16      	ldr	r6, [pc, #88]	; (8001a14 <ssd1306_PutString+0x60>)
 80019bc:	4d16      	ldr	r5, [pc, #88]	; (8001a18 <ssd1306_PutString+0x64>)
 80019be:	8832      	ldrh	r2, [r6, #0]
 80019c0:	4c16      	ldr	r4, [pc, #88]	; (8001a1c <ssd1306_PutString+0x68>)
 80019c2:	e00e      	b.n	80019e2 <ssd1306_PutString+0x2e>
	memcpy(buffer+cursor,&myFont[c-0x20][0],5);
 80019c4:	3b20      	subs	r3, #32
 80019c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80019ca:	18e1      	adds	r1, r4, r3
 80019cc:	58e7      	ldr	r7, [r4, r3]
 80019ce:	7909      	ldrb	r1, [r1, #4]
 80019d0:	18ab      	adds	r3, r5, r2
 80019d2:	50af      	str	r7, [r5, r2]
		{
			ssd1306_PutRuC(c);
			c+=2;
		}
		else
			ssd1306_Put(*c++);
 80019d4:	3001      	adds	r0, #1
	memcpy(buffer+cursor,&myFont[c-0x20][0],5);
 80019d6:	7119      	strb	r1, [r3, #4]
		cursor++;
 80019d8:	3206      	adds	r2, #6
 80019da:	b292      	uxth	r2, r2
 80019dc:	8032      	strh	r2, [r6, #0]
	while (*c) {
 80019de:	7803      	ldrb	r3, [r0, #0]
 80019e0:	b1ab      	cbz	r3, 8001a0e <ssd1306_PutString+0x5a>
		if (*c==0xD0 || *c==0xD1)
 80019e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80019e6:	b2c9      	uxtb	r1, r1
 80019e8:	2901      	cmp	r1, #1
 80019ea:	d8eb      	bhi.n	80019c4 <ssd1306_PutString+0x10>
	if (*c==0xD0) pos=*(c+1)-144+101;
 80019ec:	2bd0      	cmp	r3, #208	; 0xd0
 80019ee:	7843      	ldrb	r3, [r0, #1]
			c+=2;
 80019f0:	f100 0002 	add.w	r0, r0, #2
	if (*c==0xD0) pos=*(c+1)-144+101;
 80019f4:	bf0c      	ite	eq
 80019f6:	3b2b      	subeq	r3, #43	; 0x2b
	else if (*c==0xD1) pos=*(c+1)-128+149;
 80019f8:	3315      	addne	r3, #21
 80019fa:	b2db      	uxtb	r3, r3
	memcpy(buffer+cursor,&myFont[pos][0],5);
 80019fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001a00:	18e1      	adds	r1, r4, r3
 8001a02:	58e7      	ldr	r7, [r4, r3]
 8001a04:	7909      	ldrb	r1, [r1, #4]
 8001a06:	18ab      	adds	r3, r5, r2
 8001a08:	50af      	str	r7, [r5, r2]
 8001a0a:	7119      	strb	r1, [r3, #4]
			c+=2;
 8001a0c:	e7e4      	b.n	80019d8 <ssd1306_PutString+0x24>
	}
}
 8001a0e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a10:	4770      	bx	lr
 8001a12:	4770      	bx	lr
 8001a14:	2000029c 	.word	0x2000029c
 8001a18:	200002b8 	.word	0x200002b8
 8001a1c:	08006338 	.word	0x08006338

08001a20 <ssd1306_Clean>:

void ssd1306_Clean(void)
{
	uint16_t i;
	for (i=0;i<SSD1306_HEIGHT*SSD1306_WIDTH/8;i++)
 8001a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a24:	2100      	movs	r1, #0
 8001a26:	4801      	ldr	r0, [pc, #4]	; (8001a2c <ssd1306_Clean+0xc>)
 8001a28:	f003 bc84 	b.w	8005334 <memset>
 8001a2c:	200002b8 	.word	0x200002b8

08001a30 <ssd1306_Update>:
	buffer[i]=0;
}

void ssd1306_Update(void)
{
 8001a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a34:	25b0      	movs	r5, #176	; 0xb0
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001a36:	f04f 0a00 	mov.w	sl, #0
{
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8001ac8 <ssd1306_Update+0x98>
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001a40:	4f20      	ldr	r7, [pc, #128]	; (8001ac4 <ssd1306_Update+0x94>)
 8001a42:	f10d 0817 	add.w	r8, sp, #23
 8001a46:	2401      	movs	r4, #1
 8001a48:	260a      	movs	r6, #10
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2178      	movs	r1, #120	; 0x78
 8001a50:	4638      	mov	r0, r7
 8001a52:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a56:	f8cd 8000 	str.w	r8, [sp]
 8001a5a:	f88d 5017 	strb.w	r5, [sp, #23]
 8001a5e:	f001 fc47 	bl	80032f0 <HAL_I2C_Mem_Write>
 8001a62:	4623      	mov	r3, r4
 8001a64:	2200      	movs	r2, #0
 8001a66:	2178      	movs	r1, #120	; 0x78
 8001a68:	4638      	mov	r0, r7
 8001a6a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a6e:	f8cd 8000 	str.w	r8, [sp]
 8001a72:	f88d a017 	strb.w	sl, [sp, #23]
 8001a76:	f001 fc3b 	bl	80032f0 <HAL_I2C_Mem_Write>

		for(j=0;j<8;j++)
		{
			ssd1306_WriteCommand(0xB0+j);
		    ssd1306_WriteCommand(0x00);
			ssd1306_WriteCommand(0x10);
 8001a7a:	f04f 0c10 	mov.w	ip, #16
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001a7e:	4623      	mov	r3, r4
 8001a80:	2200      	movs	r2, #0
 8001a82:	2178      	movs	r1, #120	; 0x78
 8001a84:	4638      	mov	r0, r7
 8001a86:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a8a:	f8cd 8000 	str.w	r8, [sp]
 8001a8e:	f88d c017 	strb.w	ip, [sp, #23]
 8001a92:	f001 fc2d 	bl	80032f0 <HAL_I2C_Mem_Write>
			HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,buffer+j*128,128,1000);
 8001a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a9a:	2280      	movs	r2, #128	; 0x80
 8001a9c:	4425      	add	r5, r4
 8001a9e:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8001aa2:	f8cd 9000 	str.w	r9, [sp]
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	2240      	movs	r2, #64	; 0x40
 8001aaa:	2178      	movs	r1, #120	; 0x78
 8001aac:	4638      	mov	r0, r7
 8001aae:	b2ed      	uxtb	r5, r5
 8001ab0:	f001 fc1e 	bl	80032f0 <HAL_I2C_Mem_Write>
		for(j=0;j<8;j++)
 8001ab4:	2db8      	cmp	r5, #184	; 0xb8
 8001ab6:	f109 0980 	add.w	r9, r9, #128	; 0x80
 8001aba:	d1c4      	bne.n	8001a46 <ssd1306_Update+0x16>

		}
}
 8001abc:	b006      	add	sp, #24
 8001abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000a10 	.word	0x20000a10
 8001ac8:	200002b8 	.word	0x200002b8

08001acc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_MspInit+0x3c>)
{
 8001ace:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ad4:	f042 0201 	orr.w	r2, r2, #1
 8001ad8:	619a      	str	r2, [r3, #24]
 8001ada:	699a      	ldr	r2, [r3, #24]
 8001adc:	f002 0201 	and.w	r2, r2, #1
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aea:	61da      	str	r2, [r3, #28]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001af6:	684b      	ldr	r3, [r1, #4]
 8001af8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001afc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b00:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	b002      	add	sp, #8
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000

08001b10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001b14:	6802      	ldr	r2, [r0, #0]
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_ADC_MspInit+0x88>)
{
 8001b18:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8001b1a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001b20:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hadc->Instance==ADC1)
 8001b24:	d001      	beq.n	8001b2a <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b26:	b007      	add	sp, #28
 8001b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b2a:	2604      	movs	r6, #4
 8001b2c:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b2e:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001b32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3a:	619a      	str	r2, [r3, #24]
 8001b3c:	699a      	ldr	r2, [r3, #24]
 8001b3e:	4605      	mov	r5, r0
 8001b40:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001b44:	9200      	str	r2, [sp, #0]
 8001b46:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	4814      	ldr	r0, [pc, #80]	; (8001b9c <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	f042 0204 	orr.w	r2, r2, #4
 8001b50:	619a      	str	r2, [r3, #24]
 8001b52:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b54:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b60:	f000 ffc4 	bl	8002aec <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b64:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b6c:	2320      	movs	r3, #32
    hdma_adc1.Instance = DMA1_Channel1;
 8001b6e:	4e0c      	ldr	r6, [pc, #48]	; (8001ba0 <HAL_ADC_MspInit+0x90>)
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b72:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b74:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b76:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001b7a:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8001b7e:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b80:	61f4      	str	r4, [r6, #28]
    hdma_adc1.Instance = DMA1_Channel1;
 8001b82:	6031      	str	r1, [r6, #0]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b84:	f000 fe3e 	bl	8002804 <HAL_DMA_Init>
 8001b88:	b918      	cbnz	r0, 8001b92 <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b8a:	622e      	str	r6, [r5, #32]
 8001b8c:	6275      	str	r5, [r6, #36]	; 0x24
}
 8001b8e:	b007      	add	sp, #28
 8001b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001b92:	f7ff fd8f 	bl	80016b4 <Error_Handler>
 8001b96:	e7f8      	b.n	8001b8a <HAL_ADC_MspInit+0x7a>
 8001b98:	40012400 	.word	0x40012400
 8001b9c:	40010800 	.word	0x40010800
 8001ba0:	20000bcc 	.word	0x20000bcc
 8001ba4:	40020008 	.word	0x40020008

08001ba8 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	2300      	movs	r3, #0
{
 8001baa:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 8001bac:	6801      	ldr	r1, [r0, #0]
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <HAL_I2C_MspInit+0x58>)
{
 8001bb0:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8001bb2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001bb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8001bbc:	d001      	beq.n	8001bc2 <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bbe:	b006      	add	sp, #24
 8001bc0:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc2:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bc4:	26c0      	movs	r6, #192	; 0xc0
 8001bc6:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	4c0e      	ldr	r4, [pc, #56]	; (8001c04 <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bca:	480f      	ldr	r0, [pc, #60]	; (8001c08 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bce:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	61a3      	str	r3, [r4, #24]
 8001bd6:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bd8:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bdc:	f003 0308 	and.w	r3, r3, #8
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be4:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be6:	f000 ff81 	bl	8002aec <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bea:	69e3      	ldr	r3, [r4, #28]
 8001bec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bf0:	61e3      	str	r3, [r4, #28]
 8001bf2:	69e3      	ldr	r3, [r4, #28]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	9b01      	ldr	r3, [sp, #4]
}
 8001bfc:	b006      	add	sp, #24
 8001bfe:	bdd0      	pop	{r4, r6, r7, pc}
 8001c00:	40005400 	.word	0x40005400
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010c00 	.word	0x40010c00

08001c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0e:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8001c10:	6803      	ldr	r3, [r0, #0]
 8001c12:	4a2e      	ldr	r2, [pc, #184]	; (8001ccc <HAL_SPI_MspInit+0xc0>)
{
 8001c14:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 8001c16:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001c1c:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 8001c20:	d004      	beq.n	8001c2c <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8001c22:	4a2b      	ldr	r2, [pc, #172]	; (8001cd0 <HAL_SPI_MspInit+0xc4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d029      	beq.n	8001c7c <HAL_SPI_MspInit+0x70>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c28:	b009      	add	sp, #36	; 0x24
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c2c:	20a0      	movs	r0, #160	; 0xa0
 8001c2e:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c30:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_SPI_MspInit+0xc8>)
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c3a:	619a      	str	r2, [r3, #24]
 8001c3c:	699a      	ldr	r2, [r3, #24]
 8001c3e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001c42:	9200      	str	r2, [sp, #0]
 8001c44:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	f042 0204 	orr.w	r2, r2, #4
 8001c4c:	619a      	str	r2, [r3, #24]
 8001c4e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001c50:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	a904      	add	r1, sp, #16
 8001c5c:	481e      	ldr	r0, [pc, #120]	; (8001cd8 <HAL_SPI_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c60:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f000 ff43 	bl	8002aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	481b      	ldr	r0, [pc, #108]	; (8001cd8 <HAL_SPI_MspInit+0xcc>)
 8001c6c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c6e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c74:	f000 ff3a 	bl	8002aec <HAL_GPIO_Init>
}
 8001c78:	b009      	add	sp, #36	; 0x24
 8001c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7c:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001c7e:	f44f 4620 	mov.w	r6, #40960	; 0xa000
 8001c82:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_SPI_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c88:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	4814      	ldr	r0, [pc, #80]	; (8001cdc <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c90:	61da      	str	r2, [r3, #28]
 8001c92:	69da      	ldr	r2, [r3, #28]
 8001c94:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c98:	9202      	str	r2, [sp, #8]
 8001c9a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	699a      	ldr	r2, [r3, #24]
 8001c9e:	f042 0208 	orr.w	r2, r2, #8
 8001ca2:	619a      	str	r2, [r3, #24]
 8001ca4:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001ca6:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	9303      	str	r3, [sp, #12]
 8001cb0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cb2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f000 ff1a 	bl	8002aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001cb8:	4622      	mov	r2, r4
 8001cba:	4621      	mov	r1, r4
 8001cbc:	2024      	movs	r0, #36	; 0x24
 8001cbe:	f000 fd43 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001cc2:	2024      	movs	r0, #36	; 0x24
 8001cc4:	f000 fd78 	bl	80027b8 <HAL_NVIC_EnableIRQ>
}
 8001cc8:	b009      	add	sp, #36	; 0x24
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	40013000 	.word	0x40013000
 8001cd0:	40003800 	.word	0x40003800
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	40010800 	.word	0x40010800
 8001cdc:	40010c00 	.word	0x40010c00

08001ce0 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8001ce0:	6803      	ldr	r3, [r0, #0]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d000      	beq.n	8001cea <HAL_TIM_PWM_MspInit+0xa>
 8001ce8:	4770      	bx	lr
{
 8001cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8001cf2:	4604      	mov	r4, r0
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cf4:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cf8:	f04f 0810 	mov.w	r8, #16
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cfc:	f04f 0e00 	mov.w	lr, #0
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d00:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001d04:	2620      	movs	r6, #32
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d0e:	69da      	ldr	r2, [r3, #28]
{
 8001d10:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	61da      	str	r2, [r3, #28]
 8001d18:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001d1a:	4d0e      	ldr	r5, [pc, #56]	; (8001d54 <HAL_TIM_PWM_MspInit+0x74>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_TIM_PWM_MspInit+0x78>)
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d26:	e9c5 c003 	strd	ip, r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001d2a:	4628      	mov	r0, r5
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001d2c:	e9c5 7605 	strd	r7, r6, [r5, #20]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d30:	f8c5 8004 	str.w	r8, [r5, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d34:	f8c5 e008 	str.w	lr, [r5, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8001d38:	602b      	str	r3, [r5, #0]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001d3a:	61e9      	str	r1, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001d3c:	f000 fd62 	bl	8002804 <HAL_DMA_Init>
 8001d40:	b928      	cbnz	r0, 8001d4e <HAL_TIM_PWM_MspInit+0x6e>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001d42:	62a5      	str	r5, [r4, #40]	; 0x28
 8001d44:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001d46:	6325      	str	r5, [r4, #48]	; 0x30
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d48:	b002      	add	sp, #8
 8001d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8001d4e:	f7ff fcb1 	bl	80016b4 <Error_Handler>
 8001d52:	e7f6      	b.n	8001d42 <HAL_TIM_PWM_MspInit+0x62>
 8001d54:	20000a80 	.word	0x20000a80
 8001d58:	40020080 	.word	0x40020080

08001d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	2300      	movs	r3, #0
{
 8001d5e:	b5d0      	push	{r4, r6, r7, lr}
  if(htim->Instance==TIM2)
 8001d60:	6802      	ldr	r2, [r0, #0]
{
 8001d62:	b086      	sub	sp, #24
  if(htim->Instance==TIM2)
 8001d64:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001d6c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM2)
 8001d70:	d001      	beq.n	8001d76 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d72:	b006      	add	sp, #24
 8001d74:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d76:	2602      	movs	r6, #2
 8001d78:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d80:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d84:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	4808      	ldr	r0, [pc, #32]	; (8001da8 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d88:	f042 0204 	orr.w	r2, r2, #4
 8001d8c:	619a      	str	r2, [r3, #24]
 8001d8e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d92:	f003 0304 	and.w	r3, r3, #4
 8001d96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d98:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f000 fea4 	bl	8002aec <HAL_GPIO_Init>
}
 8001da4:	b006      	add	sp, #24
 8001da6:	bdd0      	pop	{r4, r6, r7, pc}
 8001da8:	40010800 	.word	0x40010800

08001dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dac:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dae:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8001db0:	6802      	ldr	r2, [r0, #0]
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_UART_MspInit+0x88>)
{
 8001db4:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 8001db6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001dbc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8001dc0:	d001      	beq.n	8001dc6 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dc2:	b007      	add	sp, #28
 8001dc4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dc6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dca:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dcc:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd8:	619a      	str	r2, [r3, #24]
 8001dda:	699a      	ldr	r2, [r3, #24]
 8001ddc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	f042 0204 	orr.w	r2, r2, #4
 8001dea:	619a      	str	r2, [r3, #24]
 8001dec:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfa:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	a902      	add	r1, sp, #8
 8001dfe:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e04:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f000 fe71 	bl	8002aec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	a902      	add	r1, sp, #8
 8001e12:	4809      	ldr	r0, [pc, #36]	; (8001e38 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f000 fe67 	bl	8002aec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e1e:	4622      	mov	r2, r4
 8001e20:	4621      	mov	r1, r4
 8001e22:	2025      	movs	r0, #37	; 0x25
 8001e24:	f000 fc90 	bl	8002748 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e28:	2025      	movs	r0, #37	; 0x25
 8001e2a:	f000 fcc5 	bl	80027b8 <HAL_NVIC_EnableIRQ>
}
 8001e2e:	b007      	add	sp, #28
 8001e30:	bd30      	pop	{r4, r5, pc}
 8001e32:	bf00      	nop
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40010800 	.word	0x40010800

08001e3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <NMI_Handler>
 8001e3e:	bf00      	nop

08001e40 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <HardFault_Handler>
 8001e42:	bf00      	nop

08001e44 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler>
 8001e46:	bf00      	nop

08001e48 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <BusFault_Handler>
 8001e4a:	bf00      	nop

08001e4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <UsageFault_Handler>
 8001e4e:	bf00      	nop

08001e50 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop

08001e54 <DebugMon_Handler>:
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop

08001e58 <PendSV_Handler>:
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop

08001e5c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5c:	f000 b9e8 	b.w	8002230 <HAL_IncTick>

08001e60 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e60:	2002      	movs	r0, #2
 8001e62:	f000 bf59 	b.w	8002d18 <HAL_GPIO_EXTI_IRQHandler>
 8001e66:	bf00      	nop

08001e68 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e68:	2004      	movs	r0, #4
 8001e6a:	f000 bf55 	b.w	8002d18 <HAL_GPIO_EXTI_IRQHandler>
 8001e6e:	bf00      	nop

08001e70 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8001e70:	4801      	ldr	r0, [pc, #4]	; (8001e78 <DMA1_Channel7_IRQHandler+0x8>)
 8001e72:	f000 bda7 	b.w	80029c4 <HAL_DMA_IRQHandler>
 8001e76:	bf00      	nop
 8001e78:	20000a80 	.word	0x20000a80

08001e7c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e7c:	4801      	ldr	r0, [pc, #4]	; (8001e84 <SPI2_IRQHandler+0x8>)
 8001e7e:	f002 bbe9 	b.w	8004654 <HAL_SPI_IRQHandler>
 8001e82:	bf00      	nop
 8001e84:	20000944 	.word	0x20000944

08001e88 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <USART1_IRQHandler+0x8>)
 8001e8a:	f003 b8d3 	b.w	8005034 <HAL_UART_IRQHandler>
 8001e8e:	bf00      	nop
 8001e90:	20000b60 	.word	0x20000b60

08001e94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e9a:	f000 ff3d 	bl	8002d18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001ea2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001ea6:	f000 bf37 	b.w	8002d18 <HAL_GPIO_EXTI_IRQHandler>
 8001eaa:	bf00      	nop

08001eac <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 8001eac:	460a      	mov	r2, r1
            	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 8001eae:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
 8001eb2:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8001eb4:	f000 bf2c 	b.w	8002d10 <HAL_GPIO_WritePin>

08001eb8 <SX127X_SPICommand>:

	SX127X_delayMicro(6000);
}

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 8001eb8:	460b      	mov	r3, r1
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	4604      	mov	r4, r0
 8001ebe:	b082      	sub	sp, #8
	SX127X_SetNSS(module, 0);
 8001ec0:	2100      	movs	r1, #0
{
 8001ec2:	f88d 3007 	strb.w	r3, [sp, #7]
	SX127X_SetNSS(module, 0);
 8001ec6:	f7ff fff1 	bl	8001eac <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	2201      	movs	r2, #1
 8001ed0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001ed2:	f10d 0107 	add.w	r1, sp, #7
 8001ed6:	f002 f957 	bl	8004188 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 8001eda:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001edc:	f002 fc4e 	bl	800477c <HAL_SPI_GetState>
 8001ee0:	2801      	cmp	r0, #1
 8001ee2:	d1fa      	bne.n	8001eda <SX127X_SPICommand+0x22>
		;
}
 8001ee4:	b002      	add	sp, #8
 8001ee6:	bd10      	pop	{r4, pc}

08001ee8 <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
	uint8_t txByte = 0x00;
 8001ee8:	2100      	movs	r1, #0
{
 8001eea:	b510      	push	{r4, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	4604      	mov	r4, r0
	uint8_t txByte = 0x00;
 8001ef0:	f88d 100e 	strb.w	r1, [sp, #14]
	uint8_t rxByte = 0x00;
 8001ef4:	f88d 100f 	strb.w	r1, [sp, #15]

	SX127X_SetNSS(module, 0);
 8001ef8:	f7ff ffd8 	bl	8001eac <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 8001efc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f00:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001f02:	f10d 020f 	add.w	r2, sp, #15
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f10d 010e 	add.w	r1, sp, #14
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f002 fa3d 	bl	800438c <HAL_SPI_TransmitReceive>
	return rxByte;
}
 8001f12:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8001f16:	b004      	add	sp, #16
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop

08001f1c <SX127X_defaultConfig>:
	module->bw = SX127X_LORA_BW_125KHZ;
	module->cr = SX127X_CR_4_8;
	module->crcEnable = 1;
	module->frequency = SX127X_FREQ_DEFAULT;
	module->implicitHeader = 1;
	module->len = 3;
 8001f1c:	f240 1103 	movw	r1, #259	; 0x103
	module->implicitHeader = 1;
 8001f20:	2201      	movs	r2, #1
{
 8001f22:	b430      	push	{r4, r5}
	module->power = SX127X_POWER_20DBM;
	module->preamble = 5;
 8001f24:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SX127X_defaultConfig+0x1c>)
	module->frequency = SX127X_FREQ_DEFAULT;
 8001f26:	4d05      	ldr	r5, [pc, #20]	; (8001f3c <SX127X_defaultConfig+0x20>)
	module->power = SX127X_POWER_20DBM;
 8001f28:	4c05      	ldr	r4, [pc, #20]	; (8001f40 <SX127X_defaultConfig+0x24>)
	module->len = 3;
 8001f2a:	8101      	strh	r1, [r0, #8]
	module->power = SX127X_POWER_20DBM;
 8001f2c:	e9c0 5400 	strd	r5, r4, [r0]
	module->sf = SX127X_LORA_SF_12;
	module->syncWord = 0x1;
	module->alwaysRX = 1;
}
 8001f30:	bc30      	pop	{r4, r5}
	module->implicitHeader = 1;
 8001f32:	7282      	strb	r2, [r0, #10]
	module->preamble = 5;
 8001f34:	60c3      	str	r3, [r0, #12]
}
 8001f36:	4770      	bx	lr
 8001f38:	01010005 	.word	0x01010005
 8001f3c:	00d94024 	.word	0x00d94024
 8001f40:	04070c14 	.word	0x04070c14

08001f44 <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi)
{
 8001f44:	b082      	sub	sp, #8
 8001f46:	b430      	push	{r4, r5}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	4668      	mov	r0, sp
 8001f4e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001f52:	9305      	str	r3, [sp, #20]
 8001f54:	9d07      	ldr	r5, [sp, #28]
	module->reset = reset;
 8001f56:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8001f5a:	c803      	ldmia	r0, {r0, r1}
 8001f5c:	e883 0005 	stmia.w	r3, {r0, r2}
	module->nss = nss;
 8001f60:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8001f64:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8001f68:	e883 0003 	stmia.w	r3, {r0, r1}
	module->spi = hspi;
 8001f6c:	6765      	str	r5, [r4, #116]	; 0x74
}
 8001f6e:	b002      	add	sp, #8
 8001f70:	bc30      	pop	{r4, r5}
 8001f72:	b002      	add	sp, #8
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop

08001f78 <SX127X_init>:
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module)
{
 8001f78:	b538      	push	{r3, r4, r5, lr}
 8001f7a:	4604      	mov	r4, r0

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 8001f7c:	f8b0 1064 	ldrh.w	r1, [r0, #100]	; 0x64
 8001f80:	2200      	movs	r2, #0
 8001f82:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8001f84:	f000 fec4 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001f88:	200f      	movs	r0, #15
 8001f8a:	f000 f963 	bl	8002254 <HAL_Delay>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8001f94:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001f96:	f000 febb 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001f9a:	200f      	movs	r0, #15
 8001f9c:	f000 f95a 	bl	8002254 <HAL_Delay>
	SX127X_SPICommand(module, addr);
 8001fa0:	2142      	movs	r1, #66	; 0x42
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7ff ff88 	bl	8001eb8 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8001fa8:	4620      	mov	r0, r4
 8001faa:	f7ff ff9d 	bl	8001ee8 <SX127X_SPIReadByte>
 8001fae:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f7ff ff7a 	bl	8001eac <SX127X_SetNSS>
	SX127X_SPICommand(module, addr);
 8001fb8:	2142      	movs	r1, #66	; 0x42
 8001fba:	4620      	mov	r0, r4
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8001fbc:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
	SX127X_SPICommand(module, addr);
 8001fc0:	f7ff ff7a 	bl	8001eb8 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f7ff ff8f 	bl	8001ee8 <SX127X_SPIReadByte>
 8001fca:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7ff ff6c 	bl	8001eac <SX127X_SetNSS>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8001fd4:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
}
 8001fd8:	bd38      	pop	{r3, r4, r5, pc}
 8001fda:	bf00      	nop

08001fdc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	490d      	ldr	r1, [pc, #52]	; (8002014 <_sbrk+0x38>)
{
 8001fde:	4603      	mov	r3, r0
 8001fe0:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe2:	4a0d      	ldr	r2, [pc, #52]	; (8002018 <_sbrk+0x3c>)
 8001fe4:	4c0d      	ldr	r4, [pc, #52]	; (800201c <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001fe6:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001fea:	b120      	cbz	r0, 8001ff6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fec:	4403      	add	r3, r0
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d807      	bhi.n	8002002 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ff2:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8001ff4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ff6:	4c0a      	ldr	r4, [pc, #40]	; (8002020 <_sbrk+0x44>)
 8001ff8:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4403      	add	r3, r0
 8001ffc:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8001ffe:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002000:	d9f7      	bls.n	8001ff2 <_sbrk+0x16>
    errno = ENOMEM;
 8002002:	f003 f945 	bl	8005290 <__errno>
 8002006:	220c      	movs	r2, #12
 8002008:	4603      	mov	r3, r0
    return (void *)-1;
 800200a:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	bd10      	pop	{r4, pc}
 8002012:	bf00      	nop
 8002014:	200002a0 	.word	0x200002a0
 8002018:	20005000 	.word	0x20005000
 800201c:	00000400 	.word	0x00000400
 8002020:	20001928 	.word	0x20001928

08002024 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop

08002028 <uartInit>:
uint8_t len;
uint8_t nodeNum;

void uartInit ()
{
	HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	4902      	ldr	r1, [pc, #8]	; (8002034 <uartInit+0xc>)
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <uartInit+0x10>)
 800202e:	f002 bf6d 	b.w	8004f0c <HAL_UART_Receive_IT>
 8002032:	bf00      	nop
 8002034:	20000ac8 	.word	0x20000ac8
 8002038:	20000b60 	.word	0x20000b60

0800203c <readByte>:
}

void readByte (void)
{
	switch (uartIn)
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <readByte+0x50>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b3c      	cmp	r3, #60	; 0x3c
 8002042:	d01f      	beq.n	8002084 <readByte+0x48>
 8002044:	2b3e      	cmp	r3, #62	; 0x3e
{
 8002046:	b430      	push	{r4, r5}
	switch (uartIn)
 8002048:	d10e      	bne.n	8002068 <readByte+0x2c>
			uartPos = 0;
			break;

		case '>':
			len = uartPos;
			uartRx[uartPos]=0;
 800204a:	2100      	movs	r1, #0
			flag.uartGotMessage = 1;
 800204c:	4c10      	ldr	r4, [pc, #64]	; (8002090 <readByte+0x54>)
			len = uartPos;
 800204e:	4811      	ldr	r0, [pc, #68]	; (8002094 <readByte+0x58>)
			flag.uartGotMessage = 1;
 8002050:	7863      	ldrb	r3, [r4, #1]
			len = uartPos;
 8002052:	7802      	ldrb	r2, [r0, #0]
			flag.uartGotMessage = 1;
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	7063      	strb	r3, [r4, #1]
			uartRx[uartPos]=0;
 800205a:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <readByte+0x5c>)
			len = uartPos;
 800205c:	4d0f      	ldr	r5, [pc, #60]	; (800209c <readByte+0x60>)
			uartPos = 0;
 800205e:	7001      	strb	r1, [r0, #0]
			uartRx[uartPos]=0;
 8002060:	5499      	strb	r1, [r3, r2]
			len = uartPos;
 8002062:	702a      	strb	r2, [r5, #0]
		default:
			uartRx[uartPos++] = uartIn;
			break;
	}
	if (uartPos>126) uartPos=126;
}
 8002064:	bc30      	pop	{r4, r5}
 8002066:	4770      	bx	lr
			uartRx[uartPos++] = uartIn;
 8002068:	490a      	ldr	r1, [pc, #40]	; (8002094 <readByte+0x58>)
 800206a:	4c0b      	ldr	r4, [pc, #44]	; (8002098 <readByte+0x5c>)
 800206c:	7808      	ldrb	r0, [r1, #0]
 800206e:	1c42      	adds	r2, r0, #1
 8002070:	b2d2      	uxtb	r2, r2
	if (uartPos>126) uartPos=126;
 8002072:	2a7e      	cmp	r2, #126	; 0x7e
			uartRx[uartPos++] = uartIn;
 8002074:	5423      	strb	r3, [r4, r0]
	if (uartPos>126) uartPos=126;
 8002076:	bf88      	it	hi
 8002078:	237e      	movhi	r3, #126	; 0x7e
			uartRx[uartPos++] = uartIn;
 800207a:	700a      	strb	r2, [r1, #0]
	if (uartPos>126) uartPos=126;
 800207c:	bf88      	it	hi
 800207e:	700b      	strbhi	r3, [r1, #0]
}
 8002080:	bc30      	pop	{r4, r5}
 8002082:	4770      	bx	lr
			uartPos = 0;
 8002084:	2200      	movs	r2, #0
 8002086:	4b03      	ldr	r3, [pc, #12]	; (8002094 <readByte+0x58>)
 8002088:	701a      	strb	r2, [r3, #0]
			break;
 800208a:	4770      	bx	lr
 800208c:	20000ac8 	.word	0x20000ac8
 8002090:	20000a7c 	.word	0x20000a7c
 8002094:	2000152c 	.word	0x2000152c
 8002098:	20001530 	.word	0x20001530
 800209c:	200015b0 	.word	0x200015b0

080020a0 <wsSetColor>:

uint16_t wsBuffer[ARRAY_LEN];
color_t cBuffer[LED_COUNT];

void wsSetColor(uint8_t num, uint8_t red, uint8_t green, uint8_t blue)
{
 80020a0:	b430      	push	{r4, r5}
cBuffer[num].red=red;
 80020a2:	4d04      	ldr	r5, [pc, #16]	; (80020b4 <wsSetColor+0x14>)
 80020a4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80020a8:	182c      	adds	r4, r5, r0
 80020aa:	7061      	strb	r1, [r4, #1]
cBuffer[num].green=green;
cBuffer[num].blue=blue;
 80020ac:	70a3      	strb	r3, [r4, #2]
cBuffer[num].green=green;
 80020ae:	542a      	strb	r2, [r5, r0]
}
 80020b0:	bc30      	pop	{r4, r5}
 80020b2:	4770      	bx	lr
 80020b4:	200018f4 	.word	0x200018f4

080020b8 <wsPrepareArray>:
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
}

uint32_t * getBitBanded(uint32_t * adr,uint8_t bit)
{
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 80020b8:	4b29      	ldr	r3, [pc, #164]	; (8002160 <wsPrepareArray+0xa8>)
{
 80020ba:	b4f0      	push	{r4, r5, r6, r7}
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4e29      	ldr	r6, [pc, #164]	; (8002164 <wsPrepareArray+0xac>)
 80020c0:	015b      	lsls	r3, r3, #5
 80020c2:	4632      	mov	r2, r6
 80020c4:	2500      	movs	r5, #0
      wsBuffer[i*8+j]=65;
 80020c6:	2041      	movs	r0, #65	; 0x41
	  wsBuffer[i*8+j]=26;
 80020c8:	211a      	movs	r1, #26
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 80020ca:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
	for(i=0;i<LED_COUNT*3;i++)
 80020ce:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
 80020d2:	e026      	b.n	8002122 <wsPrepareArray+0x6a>
		if (*adr++)
 80020d4:	685c      	ldr	r4, [r3, #4]
	  wsBuffer[i*8+j]=26;
 80020d6:	81d1      	strh	r1, [r2, #14]
		if (*adr++)
 80020d8:	2c00      	cmp	r4, #0
 80020da:	d129      	bne.n	8002130 <wsPrepareArray+0x78>
 80020dc:	689c      	ldr	r4, [r3, #8]
	  wsBuffer[i*8+j]=26;
 80020de:	8191      	strh	r1, [r2, #12]
		if (*adr++)
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d129      	bne.n	8002138 <wsPrepareArray+0x80>
 80020e4:	68dc      	ldr	r4, [r3, #12]
	  wsBuffer[i*8+j]=26;
 80020e6:	8151      	strh	r1, [r2, #10]
		if (*adr++)
 80020e8:	2c00      	cmp	r4, #0
 80020ea:	d129      	bne.n	8002140 <wsPrepareArray+0x88>
 80020ec:	691c      	ldr	r4, [r3, #16]
	  wsBuffer[i*8+j]=26;
 80020ee:	8111      	strh	r1, [r2, #8]
		if (*adr++)
 80020f0:	2c00      	cmp	r4, #0
 80020f2:	d129      	bne.n	8002148 <wsPrepareArray+0x90>
 80020f4:	695c      	ldr	r4, [r3, #20]
	  wsBuffer[i*8+j]=26;
 80020f6:	80d1      	strh	r1, [r2, #6]
		if (*adr++)
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d129      	bne.n	8002150 <wsPrepareArray+0x98>
 80020fc:	699c      	ldr	r4, [r3, #24]
	  wsBuffer[i*8+j]=26;
 80020fe:	8091      	strh	r1, [r2, #4]
		if (*adr++)
 8002100:	2c00      	cmp	r4, #0
 8002102:	d129      	bne.n	8002158 <wsPrepareArray+0xa0>
	  wsBuffer[i*8+j]=26;
 8002104:	8051      	strh	r1, [r2, #2]
		if (*adr++)
 8002106:	69dc      	ldr	r4, [r3, #28]
 8002108:	3210      	adds	r2, #16
	  wsBuffer[i*8+j]=26;
 800210a:	2c00      	cmp	r4, #0
 800210c:	bf14      	ite	ne
 800210e:	4604      	movne	r4, r0
 8002110:	460c      	moveq	r4, r1
	for(i=0;i<LED_COUNT*3;i++)
 8002112:	42ba      	cmp	r2, r7
	  wsBuffer[i*8+j]=26;
 8002114:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
 8002118:	f103 0320 	add.w	r3, r3, #32
	for(i=0;i<LED_COUNT*3;i++)
 800211c:	f105 0508 	add.w	r5, r5, #8
 8002120:	d01c      	beq.n	800215c <wsPrepareArray+0xa4>
		if (*adr++)
 8002122:	681c      	ldr	r4, [r3, #0]
 8002124:	2c00      	cmp	r4, #0
 8002126:	d0d5      	beq.n	80020d4 <wsPrepareArray+0x1c>
 8002128:	685c      	ldr	r4, [r3, #4]
      wsBuffer[i*8+j]=65;
 800212a:	81d0      	strh	r0, [r2, #14]
		if (*adr++)
 800212c:	2c00      	cmp	r4, #0
 800212e:	d0d5      	beq.n	80020dc <wsPrepareArray+0x24>
 8002130:	689c      	ldr	r4, [r3, #8]
      wsBuffer[i*8+j]=65;
 8002132:	8190      	strh	r0, [r2, #12]
		if (*adr++)
 8002134:	2c00      	cmp	r4, #0
 8002136:	d0d5      	beq.n	80020e4 <wsPrepareArray+0x2c>
 8002138:	68dc      	ldr	r4, [r3, #12]
      wsBuffer[i*8+j]=65;
 800213a:	8150      	strh	r0, [r2, #10]
		if (*adr++)
 800213c:	2c00      	cmp	r4, #0
 800213e:	d0d5      	beq.n	80020ec <wsPrepareArray+0x34>
 8002140:	691c      	ldr	r4, [r3, #16]
      wsBuffer[i*8+j]=65;
 8002142:	8110      	strh	r0, [r2, #8]
		if (*adr++)
 8002144:	2c00      	cmp	r4, #0
 8002146:	d0d5      	beq.n	80020f4 <wsPrepareArray+0x3c>
 8002148:	695c      	ldr	r4, [r3, #20]
      wsBuffer[i*8+j]=65;
 800214a:	80d0      	strh	r0, [r2, #6]
		if (*adr++)
 800214c:	2c00      	cmp	r4, #0
 800214e:	d0d5      	beq.n	80020fc <wsPrepareArray+0x44>
 8002150:	699c      	ldr	r4, [r3, #24]
      wsBuffer[i*8+j]=65;
 8002152:	8090      	strh	r0, [r2, #4]
		if (*adr++)
 8002154:	2c00      	cmp	r4, #0
 8002156:	d0d5      	beq.n	8002104 <wsPrepareArray+0x4c>
      wsBuffer[i*8+j]=65;
 8002158:	8050      	strh	r0, [r2, #2]
 800215a:	e7d4      	b.n	8002106 <wsPrepareArray+0x4e>
}
 800215c:	bcf0      	pop	{r4, r5, r6, r7}
 800215e:	4770      	bx	lr
 8002160:	200018f4 	.word	0x200018f4
 8002164:	200015b4 	.word	0x200015b4

08002168 <wsRefreshLeds>:
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
 8002168:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800216c:	4a01      	ldr	r2, [pc, #4]	; (8002174 <wsRefreshLeds+0xc>)
 800216e:	f002 bb6d 	b.w	800484c <HAL_TIM_PWM_Start_DMA>
 8002172:	bf00      	nop
 8002174:	200015b4 	.word	0x200015b4

08002178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002178:	480c      	ldr	r0, [pc, #48]	; (80021ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800217a:	490d      	ldr	r1, [pc, #52]	; (80021b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800217c:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800217e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002180:	e002      	b.n	8002188 <LoopCopyDataInit>

08002182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002186:	3304      	adds	r3, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800218a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800218c:	d3f9      	bcc.n	8002182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002190:	4c0a      	ldr	r4, [pc, #40]	; (80021bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002194:	e001      	b.n	800219a <LoopFillZerobss>

08002196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002198:	3204      	adds	r2, #4

0800219a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800219a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800219c:	d3fb      	bcc.n	8002196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800219e:	f7ff ff41 	bl	8002024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a2:	f003 f87b 	bl	800529c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021a6:	f7fe ffc7 	bl	8001138 <main>
  bx lr
 80021aa:	4770      	bx	lr
  ldr r0, =_sdata
 80021ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80021b4:	080066d8 	.word	0x080066d8
  ldr r2, =_sbss
 80021b8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80021bc:	20001924 	.word	0x20001924

080021c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	4a0d      	ldr	r2, [pc, #52]	; (8002200 <HAL_InitTick+0x3c>)
{
 80021cc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021ce:	7811      	ldrb	r1, [r2, #0]
 80021d0:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <HAL_InitTick+0x40>)
 80021d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	fbb2 f0f3 	udiv	r0, r2, r3
 80021dc:	f000 fafa 	bl	80027d4 <HAL_SYSTICK_Config>
 80021e0:	b908      	cbnz	r0, 80021e6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	2d0f      	cmp	r5, #15
 80021e4:	d901      	bls.n	80021ea <HAL_InitTick+0x26>
    return HAL_ERROR;
 80021e6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80021e8:	bd38      	pop	{r3, r4, r5, pc}
 80021ea:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	4602      	mov	r2, r0
 80021ee:	4629      	mov	r1, r5
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 faa8 	bl	8002748 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_InitTick+0x44>)
 80021fa:	4620      	mov	r0, r4
 80021fc:	601d      	str	r5, [r3, #0]
}
 80021fe:	bd38      	pop	{r3, r4, r5, pc}
 8002200:	20000008 	.word	0x20000008
 8002204:	20000004 	.word	0x20000004
 8002208:	2000000c 	.word	0x2000000c

0800220c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	4a07      	ldr	r2, [pc, #28]	; (800222c <HAL_Init+0x20>)
{
 800220e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002210:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002212:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	f000 fa83 	bl	8002724 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	2000      	movs	r0, #0
 8002220:	f7ff ffd0 	bl	80021c4 <HAL_InitTick>
  HAL_MspInit();
 8002224:	f7ff fc52 	bl	8001acc <HAL_MspInit>
}
 8002228:	2000      	movs	r0, #0
 800222a:	bd08      	pop	{r3, pc}
 800222c:	40022000 	.word	0x40022000

08002230 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002230:	4a03      	ldr	r2, [pc, #12]	; (8002240 <HAL_IncTick+0x10>)
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <HAL_IncTick+0x14>)
 8002234:	6811      	ldr	r1, [r2, #0]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	440b      	add	r3, r1
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20001910 	.word	0x20001910
 8002244:	20000008 	.word	0x20000008

08002248 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002248:	4b01      	ldr	r3, [pc, #4]	; (8002250 <HAL_GetTick+0x8>)
 800224a:	6818      	ldr	r0, [r3, #0]
}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20001910 	.word	0x20001910

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b538      	push	{r3, r4, r5, lr}
 8002256:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002258:	f7ff fff6 	bl	8002248 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800225e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002260:	d002      	beq.n	8002268 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HAL_Delay+0x20>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002268:	f7ff ffee 	bl	8002248 <HAL_GetTick>
 800226c:	1b40      	subs	r0, r0, r5
 800226e:	42a0      	cmp	r0, r4
 8002270:	d3fa      	bcc.n	8002268 <HAL_Delay+0x14>
  {
  }
}
 8002272:	bd38      	pop	{r3, r4, r5, pc}
 8002274:	20000008 	.word	0x20000008

08002278 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002278:	2800      	cmp	r0, #0
 800227a:	f000 8082 	beq.w	8002382 <HAL_ADC_Init+0x10a>
{
 800227e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002280:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002282:	4604      	mov	r4, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d065      	beq.n	8002354 <HAL_ADC_Init+0xdc>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002288:	6823      	ldr	r3, [r4, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	07d5      	lsls	r5, r2, #31
 800228e:	d43e      	bmi.n	800230e <HAL_ADC_Init+0x96>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002290:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002292:	06d2      	lsls	r2, r2, #27
 8002294:	d458      	bmi.n	8002348 <HAL_ADC_Init+0xd0>
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002298:	69e0      	ldr	r0, [r4, #28]
 800229a:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800229c:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022a0:	4301      	orrs	r1, r0
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022a2:	68a0      	ldr	r0, [r4, #8]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022a4:	7b26      	ldrb	r6, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80022a6:	f022 0202 	bic.w	r2, r2, #2
 80022aa:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022ae:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 80022b2:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022b4:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022b8:	7d21      	ldrb	r1, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022ba:	d051      	beq.n	8002360 <HAL_ADC_Init+0xe8>
 80022bc:	2801      	cmp	r0, #1
 80022be:	bf0c      	ite	eq
 80022c0:	f44f 7780 	moveq.w	r7, #256	; 0x100
 80022c4:	2700      	movne	r7, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c6:	2901      	cmp	r1, #1
 80022c8:	d067      	beq.n	800239a <HAL_ADC_Init+0x122>
      MODIFY_REG(hadc->Instance->CR1,
 80022ca:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80022cc:	4943      	ldr	r1, [pc, #268]	; (80023dc <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 80022ce:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80022d2:	433d      	orrs	r5, r7
 80022d4:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80022d6:	689d      	ldr	r5, [r3, #8]
 80022d8:	4029      	ands	r1, r5
 80022da:	4311      	orrs	r1, r2
 80022dc:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022de:	2801      	cmp	r0, #1
 80022e0:	d04b      	beq.n	800237a <HAL_ADC_Init+0x102>
  uint32_t tmp_sqr1 = 0U;
 80022e2:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 80022e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e6:	4d3e      	ldr	r5, [pc, #248]	; (80023e0 <HAL_ADC_Init+0x168>)
    MODIFY_REG(hadc->Instance->SQR1,
 80022e8:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80022ec:	4301      	orrs	r1, r0
 80022ee:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	401d      	ands	r5, r3
 80022f4:	42aa      	cmp	r2, r5
 80022f6:	d046      	beq.n	8002386 <HAL_ADC_Init+0x10e>
      tmp_hal_status = HAL_ERROR;
 80022f8:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80022fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80022fc:	f023 0312 	bic.w	r3, r3, #18
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002306:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002308:	4303      	orrs	r3, r0
 800230a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800230c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	f022 0201 	bic.w	r2, r2, #1
 8002314:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002316:	f7ff ff97 	bl	8002248 <HAL_GetTick>
 800231a:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	07d0      	lsls	r0, r2, #31
 8002322:	d5b5      	bpl.n	8002290 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002324:	f7ff ff90 	bl	8002248 <HAL_GetTick>
 8002328:	1b43      	subs	r3, r0, r5
 800232a:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800232c:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800232e:	d9f6      	bls.n	800231e <HAL_ADC_Init+0xa6>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002330:	689a      	ldr	r2, [r3, #8]
 8002332:	07d1      	lsls	r1, r2, #31
 8002334:	d5f3      	bpl.n	800231e <HAL_ADC_Init+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002338:	f043 0310 	orr.w	r3, r3, #16
 800233c:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002348:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800234a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	f043 0310 	orr.w	r3, r3, #16
 8002350:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8002354:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002356:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800235a:	f7ff fbd9 	bl	8001b10 <HAL_ADC_MspInit>
 800235e:	e793      	b.n	8002288 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002360:	2901      	cmp	r1, #1
 8002362:	d019      	beq.n	8002398 <HAL_ADC_Init+0x120>
      MODIFY_REG(hadc->Instance->CR1,
 8002364:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002366:	491d      	ldr	r1, [pc, #116]	; (80023dc <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 8002368:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 800236c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002370:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002372:	6898      	ldr	r0, [r3, #8]
 8002374:	4001      	ands	r1, r0
 8002376:	4311      	orrs	r1, r2
 8002378:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800237a:	6921      	ldr	r1, [r4, #16]
 800237c:	3901      	subs	r1, #1
 800237e:	0508      	lsls	r0, r1, #20
 8002380:	e7b0      	b.n	80022e4 <HAL_ADC_Init+0x6c>
    return HAL_ERROR;
 8002382:	2001      	movs	r0, #1
}
 8002384:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8002386:	2000      	movs	r0, #0
 8002388:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800238a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800238c:	f023 0303 	bic.w	r3, r3, #3
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002398:	4607      	mov	r7, r0
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800239a:	b1be      	cbz	r6, 80023cc <HAL_ADC_Init+0x154>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800239e:	f041 0120 	orr.w	r1, r1, #32
 80023a2:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023a6:	f041 0101 	orr.w	r1, r1, #1
 80023aa:	62e1      	str	r1, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 80023ac:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80023ae:	490b      	ldr	r1, [pc, #44]	; (80023dc <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 80023b0:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80023b4:	433d      	orrs	r5, r7
 80023b6:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80023b8:	689d      	ldr	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023ba:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 80023be:	ea01 0105 	and.w	r1, r1, r5
 80023c2:	ea41 0102 	orr.w	r1, r1, r2
 80023c6:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023c8:	d189      	bne.n	80022de <HAL_ADC_Init+0x66>
 80023ca:	e7d6      	b.n	800237a <HAL_ADC_Init+0x102>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80023cc:	69a1      	ldr	r1, [r4, #24]
 80023ce:	1e4d      	subs	r5, r1, #1
 80023d0:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 80023d4:	f445 6700 	orr.w	r7, r5, #2048	; 0x800
 80023d8:	e7e8      	b.n	80023ac <HAL_ADC_Init+0x134>
 80023da:	bf00      	nop
 80023dc:	ffe1f7fd 	.word	0xffe1f7fd
 80023e0:	ff1f0efe 	.word	0xff1f0efe

080023e4 <HAL_ADC_ConvCpltCallback>:
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop

080023e8 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80023e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80023ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ec:	f012 0f50 	tst.w	r2, #80	; 0x50
 80023f0:	d10f      	bne.n	8002412 <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023f4:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 80023fa:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80023fc:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023fe:	688a      	ldr	r2, [r1, #8]
 8002400:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8002404:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8002408:	d006      	beq.n	8002418 <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ffea 	bl	80023e4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002410:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002418:	7b1a      	ldrb	r2, [r3, #12]
 800241a:	2a00      	cmp	r2, #0
 800241c:	d1f5      	bne.n	800240a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800241e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002424:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002428:	04d2      	lsls	r2, r2, #19
 800242a:	d4ee      	bmi.n	800240a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800242c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242e:	f042 0201 	orr.w	r2, r2, #1
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
 8002434:	e7e9      	b.n	800240a <ADC_DMAConvCplt+0x22>
 8002436:	bf00      	nop

08002438 <HAL_ADC_ConvHalfCpltCallback>:
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop

0800243c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800243c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800243e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002440:	f7ff fffa 	bl	8002438 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002444:	bd08      	pop	{r3, pc}
 8002446:	bf00      	nop

08002448 <HAL_ADC_ErrorCallback>:
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop

0800244c <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800244c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800244e:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002450:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002456:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002458:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002460:	f7ff fff2 	bl	8002448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002464:	bd08      	pop	{r3, pc}
 8002466:	bf00      	nop

08002468 <HAL_ADC_ConfigChannel>:
{ 
 8002468:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0U;
 800246a:	2000      	movs	r0, #0
{ 
 800246c:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 800246e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
{ 
 8002472:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8002474:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8002476:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8002478:	d05b      	beq.n	8002532 <HAL_ADC_ConfigChannel+0xca>
 800247a:	2301      	movs	r3, #1
 800247c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8002480:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002482:	261f      	movs	r6, #31
  if (sConfig->Rank < 7U)
 8002484:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002486:	6814      	ldr	r4, [r2, #0]
  if (sConfig->Rank < 7U)
 8002488:	d92d      	bls.n	80024e6 <HAL_ADC_ConfigChannel+0x7e>
  else if (sConfig->Rank < 13U)
 800248a:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800248c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8002490:	d844      	bhi.n	800251c <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002492:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002494:	6808      	ldr	r0, [r1, #0]
 8002496:	3b23      	subs	r3, #35	; 0x23
 8002498:	409e      	lsls	r6, r3
 800249a:	ea25 0506 	bic.w	r5, r5, r6
 800249e:	fa00 f303 	lsl.w	r3, r0, r3
 80024a2:	432b      	orrs	r3, r5
 80024a4:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024a6:	2809      	cmp	r0, #9
 80024a8:	d92b      	bls.n	8002502 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024aa:	2607      	movs	r6, #7
 80024ac:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80024b0:	688d      	ldr	r5, [r1, #8]
 80024b2:	3b1e      	subs	r3, #30
 80024b4:	68e1      	ldr	r1, [r4, #12]
 80024b6:	409e      	lsls	r6, r3
 80024b8:	409d      	lsls	r5, r3
 80024ba:	ea21 0306 	bic.w	r3, r1, r6
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024be:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024c2:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024c4:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024c6:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024c8:	d826      	bhi.n	8002518 <HAL_ADC_ConfigChannel+0xb0>
    if (hadc->Instance == ADC1)
 80024ca:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_ADC_ConfigChannel+0x10c>)
 80024cc:	429c      	cmp	r4, r3
 80024ce:	d034      	beq.n	800253a <HAL_ADC_ConfigChannel+0xd2>
      tmp_hal_status = HAL_ERROR;
 80024d0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80024da:	2300      	movs	r3, #0
 80024dc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80024e0:	b003      	add	sp, #12
 80024e2:	bc70      	pop	{r4, r5, r6}
 80024e4:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80024ea:	6808      	ldr	r0, [r1, #0]
 80024ec:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80024ee:	3b05      	subs	r3, #5
 80024f0:	409e      	lsls	r6, r3
 80024f2:	ea25 0506 	bic.w	r5, r5, r6
 80024f6:	fa00 f303 	lsl.w	r3, r0, r3
 80024fa:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024fc:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024fe:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002500:	d8d3      	bhi.n	80024aa <HAL_ADC_ConfigChannel+0x42>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002502:	2507      	movs	r5, #7
 8002504:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002508:	6889      	ldr	r1, [r1, #8]
 800250a:	6923      	ldr	r3, [r4, #16]
 800250c:	4085      	lsls	r5, r0
 800250e:	4081      	lsls	r1, r0
 8002510:	ea23 0005 	bic.w	r0, r3, r5
 8002514:	4308      	orrs	r0, r1
 8002516:	6120      	str	r0, [r4, #16]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002518:	2000      	movs	r0, #0
 800251a:	e7de      	b.n	80024da <HAL_ADC_ConfigChannel+0x72>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800251c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 800251e:	6808      	ldr	r0, [r1, #0]
 8002520:	3b41      	subs	r3, #65	; 0x41
 8002522:	409e      	lsls	r6, r3
 8002524:	ea25 0506 	bic.w	r5, r5, r6
 8002528:	fa00 f303 	lsl.w	r3, r0, r3
 800252c:	432b      	orrs	r3, r5
 800252e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002530:	e7b9      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8002532:	2002      	movs	r0, #2
}
 8002534:	b003      	add	sp, #12
 8002536:	bc70      	pop	{r4, r5, r6}
 8002538:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800253a:	68a3      	ldr	r3, [r4, #8]
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	d4eb      	bmi.n	8002518 <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002540:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002542:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002544:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002548:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800254a:	d1e5      	bne.n	8002518 <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_ADC_ConfigChannel+0x110>)
 800254e:	490b      	ldr	r1, [pc, #44]	; (800257c <HAL_ADC_ConfigChannel+0x114>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	fba1 1303 	umull	r1, r3, r1, r3
 8002556:	0c9b      	lsrs	r3, r3, #18
 8002558:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002560:	9b01      	ldr	r3, [sp, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0d8      	beq.n	8002518 <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 8002566:	9b01      	ldr	r3, [sp, #4]
 8002568:	3b01      	subs	r3, #1
 800256a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800256c:	9b01      	ldr	r3, [sp, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f9      	bne.n	8002566 <HAL_ADC_ConfigChannel+0xfe>
 8002572:	e7d1      	b.n	8002518 <HAL_ADC_ConfigChannel+0xb0>
 8002574:	40012400 	.word	0x40012400
 8002578:	20000004 	.word	0x20000004
 800257c:	431bde83 	.word	0x431bde83

08002580 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002580:	2300      	movs	r3, #0
{
 8002582:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002584:	6802      	ldr	r2, [r0, #0]
{
 8002586:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002588:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800258a:	6893      	ldr	r3, [r2, #8]
 800258c:	07d9      	lsls	r1, r3, #31
 800258e:	d427      	bmi.n	80025e0 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <ADC_Enable+0x80>)
 8002592:	4604      	mov	r4, r0
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	481b      	ldr	r0, [pc, #108]	; (8002604 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8002598:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800259a:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 800259e:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025a2:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80025a4:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025a6:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025a8:	9b01      	ldr	r3, [sp, #4]
 80025aa:	b12b      	cbz	r3, 80025b8 <ADC_Enable+0x38>
      wait_loop_index--;
 80025ac:	9b01      	ldr	r3, [sp, #4]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80025b2:	9b01      	ldr	r3, [sp, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f9      	bne.n	80025ac <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80025b8:	f7ff fe46 	bl	8002248 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025bc:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80025be:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	07da      	lsls	r2, r3, #31
 80025c4:	d40c      	bmi.n	80025e0 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025c6:	f7ff fe3f 	bl	8002248 <HAL_GetTick>
 80025ca:	1b43      	subs	r3, r0, r5
 80025cc:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025ce:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025d0:	d903      	bls.n	80025da <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	f012 0201 	ands.w	r2, r2, #1
 80025d8:	d005      	beq.n	80025e6 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	07db      	lsls	r3, r3, #31
 80025de:	d5f2      	bpl.n	80025c6 <ADC_Enable+0x46>
  return HAL_OK;
 80025e0:	2000      	movs	r0, #0
}
 80025e2:	b003      	add	sp, #12
 80025e4:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 80025e6:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80025ea:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ee:	f043 0310 	orr.w	r3, r3, #16
 80025f2:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025f6:	4303      	orrs	r3, r0
 80025f8:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80025fa:	b003      	add	sp, #12
 80025fc:	bd30      	pop	{r4, r5, pc}
 80025fe:	bf00      	nop
 8002600:	20000004 	.word	0x20000004
 8002604:	431bde83 	.word	0x431bde83

08002608 <HAL_ADC_Start_DMA>:
{
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800260c:	4d40      	ldr	r5, [pc, #256]	; (8002710 <HAL_ADC_Start_DMA+0x108>)
 800260e:	6800      	ldr	r0, [r0, #0]
{
 8002610:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002612:	42a8      	cmp	r0, r5
{
 8002614:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002616:	d05c      	beq.n	80026d2 <HAL_ADC_Start_DMA+0xca>
 8002618:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_ADC_Start_DMA+0x10c>)
 800261a:	4298      	cmp	r0, r3
 800261c:	d059      	beq.n	80026d2 <HAL_ADC_Start_DMA+0xca>
    __HAL_LOCK(hadc);
 800261e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002622:	2b01      	cmp	r3, #1
 8002624:	d062      	beq.n	80026ec <HAL_ADC_Start_DMA+0xe4>
 8002626:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002628:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800262a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 800262e:	f7ff ffa7 	bl	8002580 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002632:	4605      	mov	r5, r0
 8002634:	2800      	cmp	r0, #0
 8002636:	d154      	bne.n	80026e2 <HAL_ADC_Start_DMA+0xda>
      ADC_STATE_CLR_SET(hadc->State,
 8002638:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800263a:	6821      	ldr	r1, [r4, #0]
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 800263e:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8002642:	f020 0001 	bic.w	r0, r0, #1
 8002646:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800264a:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 800264c:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800264e:	d050      	beq.n	80026f2 <HAL_ADC_Start_DMA+0xea>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002652:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002656:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002658:	684b      	ldr	r3, [r1, #4]
 800265a:	055a      	lsls	r2, r3, #21
 800265c:	d505      	bpl.n	800266a <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800265e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002660:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002668:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800266c:	f06f 0202 	mvn.w	r2, #2
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002670:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002674:	bf18      	it	ne
 8002676:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002678:	6a20      	ldr	r0, [r4, #32]
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800267a:	bf18      	it	ne
 800267c:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002680:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8002682:	2300      	movs	r3, #0
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002684:	f8df c094 	ldr.w	ip, [pc, #148]	; 800271c <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 8002688:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800268e:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002690:	e9c0 c30a 	strd	ip, r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002694:	f8df c088 	ldr.w	ip, [pc, #136]	; 8002720 <HAL_ADC_Start_DMA+0x118>
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002698:	4633      	mov	r3, r6
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800269a:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800269e:	f841 2c4c 	str.w	r2, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026a2:	f851 6c44 	ldr.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026a6:	463a      	mov	r2, r7
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026a8:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80026ac:	f841 6c44 	str.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026b0:	f000 f8da 	bl	8002868 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80026b4:	6823      	ldr	r3, [r4, #0]
}
 80026b6:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80026b8:	689a      	ldr	r2, [r3, #8]
 80026ba:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80026be:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	bf0c      	ite	eq
 80026c6:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026ca:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80026ce:	609a      	str	r2, [r3, #8]
}
 80026d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_ADC_Start_DMA+0x108>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80026da:	d0a0      	beq.n	800261e <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 80026dc:	2501      	movs	r5, #1
}
 80026de:	4628      	mov	r0, r5
 80026e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 80026e2:	2300      	movs	r3, #0
 80026e4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80026e8:	4628      	mov	r0, r5
 80026ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80026ec:	2502      	movs	r5, #2
}
 80026ee:	4628      	mov	r0, r5
 80026f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80026f2:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80026fc:	d0a8      	beq.n	8002650 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002700:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002704:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	055b      	lsls	r3, r3, #21
 800270a:	d5ae      	bpl.n	800266a <HAL_ADC_Start_DMA+0x62>
 800270c:	e7a7      	b.n	800265e <HAL_ADC_Start_DMA+0x56>
 800270e:	bf00      	nop
 8002710:	40012400 	.word	0x40012400
 8002714:	40012800 	.word	0x40012800
 8002718:	0800243d 	.word	0x0800243d
 800271c:	080023e9 	.word	0x080023e9
 8002720:	0800244d 	.word	0x0800244d

08002724 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002724:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800272a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800272c:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800272e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002732:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002736:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800273e:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274a:	b430      	push	{r4, r5}
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002752:	f1c3 0507 	rsb	r5, r3, #7
 8002756:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002758:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800275c:	bf28      	it	cs
 800275e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002760:	2c06      	cmp	r4, #6
 8002762:	d919      	bls.n	8002798 <HAL_NVIC_SetPriority+0x50>
 8002764:	f04f 34ff 	mov.w	r4, #4294967295
 8002768:	3b03      	subs	r3, #3
 800276a:	409c      	lsls	r4, r3
 800276c:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002770:	f04f 34ff 	mov.w	r4, #4294967295
 8002774:	40ac      	lsls	r4, r5
 8002776:	ea21 0104 	bic.w	r1, r1, r4
 800277a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800277c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800277e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002782:	db0c      	blt.n	800279e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	0109      	lsls	r1, r1, #4
 8002786:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800278a:	b2c9      	uxtb	r1, r1
 800278c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002790:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002794:	bc30      	pop	{r4, r5}
 8002796:	4770      	bx	lr
 8002798:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	4613      	mov	r3, r2
 800279c:	e7e8      	b.n	8002770 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_NVIC_SetPriority+0x6c>)
 80027a0:	f000 000f 	and.w	r0, r0, #15
 80027a4:	0109      	lsls	r1, r1, #4
 80027a6:	b2c9      	uxtb	r1, r1
 80027a8:	4403      	add	r3, r0
 80027aa:	7619      	strb	r1, [r3, #24]
 80027ac:	bc30      	pop	{r4, r5}
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00
 80027b4:	e000ecfc 	.word	0xe000ecfc

080027b8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027b8:	2800      	cmp	r0, #0
 80027ba:	db07      	blt.n	80027cc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027bc:	2301      	movs	r3, #1
 80027be:	f000 011f 	and.w	r1, r0, #31
 80027c2:	4a03      	ldr	r2, [pc, #12]	; (80027d0 <HAL_NVIC_EnableIRQ+0x18>)
 80027c4:	408b      	lsls	r3, r1
 80027c6:	0940      	lsrs	r0, r0, #5
 80027c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d4:	3801      	subs	r0, #1
 80027d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80027da:	d20d      	bcs.n	80027f8 <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027dc:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e2:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	4c06      	ldr	r4, [pc, #24]	; (8002800 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ee:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 80027f0:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f4:	6019      	str	r1, [r3, #0]
 80027f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80027f8:	2001      	movs	r0, #1
 80027fa:	4770      	bx	lr
 80027fc:	e000e010 	.word	0xe000e010
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002804:	b340      	cbz	r0, 8002858 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002806:	4603      	mov	r3, r0
{
 8002808:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800280a:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800280e:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002812:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8002814:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002816:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002818:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281a:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800281c:	490f      	ldr	r1, [pc, #60]	; (800285c <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281e:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002820:	4f0f      	ldr	r7, [pc, #60]	; (8002860 <HAL_DMA_Init+0x5c>)
 8002822:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002824:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002826:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002828:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800282c:	4332      	orrs	r2, r6
 800282e:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8002830:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002832:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8002834:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002836:	0909      	lsrs	r1, r1, #4
 8002838:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800283a:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 800283e:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002840:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002844:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002846:	4907      	ldr	r1, [pc, #28]	; (8002864 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 8002848:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 800284a:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800284c:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 800284e:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8002850:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002852:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002854:	bcf0      	pop	{r4, r5, r6, r7}
 8002856:	4770      	bx	lr
    return HAL_ERROR;
 8002858:	2001      	movs	r0, #1
}
 800285a:	4770      	bx	lr
 800285c:	bffdfff8 	.word	0xbffdfff8
 8002860:	cccccccd 	.word	0xcccccccd
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002868:	b4f0      	push	{r4, r5, r6, r7}
 800286a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800286c:	f890 0020 	ldrb.w	r0, [r0, #32]
 8002870:	2801      	cmp	r0, #1
 8002872:	d038      	beq.n	80028e6 <HAL_DMA_Start_IT+0x7e>
 8002874:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002876:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 800287a:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800287e:	42a8      	cmp	r0, r5
 8002880:	d005      	beq.n	800288e <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002882:	2300      	movs	r3, #0
 8002884:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002888:	2002      	movs	r0, #2
  }    
  return status;
}
 800288a:	bcf0      	pop	{r4, r5, r6, r7}
 800288c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800288e:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002890:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 8002892:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002894:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002898:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800289a:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800289c:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800289e:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 80028a0:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028a4:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80028a6:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028a8:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028aa:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80028ac:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 80028ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028b0:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028b2:	bf0b      	itete	eq
 80028b4:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80028b6:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 80028b8:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80028ba:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80028bc:	b153      	cbz	r3, 80028d4 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028be:	682b      	ldr	r3, [r5, #0]
 80028c0:	f043 030e 	orr.w	r3, r3, #14
 80028c4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80028c6:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	602b      	str	r3, [r5, #0]
}
 80028d0:	bcf0      	pop	{r4, r5, r6, r7}
 80028d2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	f023 0304 	bic.w	r3, r3, #4
 80028da:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028dc:	682b      	ldr	r3, [r5, #0]
 80028de:	f043 030a 	orr.w	r3, r3, #10
 80028e2:	602b      	str	r3, [r5, #0]
 80028e4:	e7ef      	b.n	80028c6 <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80028e6:	2002      	movs	r0, #2
}
 80028e8:	bcf0      	pop	{r4, r5, r6, r7}
 80028ea:	4770      	bx	lr

080028ec <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ec:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80028f0:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028f2:	2a02      	cmp	r2, #2
 80028f4:	d006      	beq.n	8002904 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f6:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80028f8:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028fa:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80028fc:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8002900:	2001      	movs	r0, #1
}
 8002902:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002904:	2101      	movs	r1, #1
{
 8002906:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 8002908:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800290c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800290e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002910:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002912:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002914:	f024 040e 	bic.w	r4, r4, #14
 8002918:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800291a:	6814      	ldr	r4, [r2, #0]
  return status; 
 800291c:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800291e:	f024 0401 	bic.w	r4, r4, #1
 8002922:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002926:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8002928:	841d      	strh	r5, [r3, #32]
}
 800292a:	bc70      	pop	{r4, r5, r6}
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop

08002930 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002930:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002934:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002936:	2a02      	cmp	r2, #2
 8002938:	d003      	beq.n	8002942 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293a:	2204      	movs	r2, #4
    status = HAL_ERROR;
 800293c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002940:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002942:	6802      	ldr	r2, [r0, #0]
{  
 8002944:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002946:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002948:	481b      	ldr	r0, [pc, #108]	; (80029b8 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294a:	f021 010e 	bic.w	r1, r1, #14
 800294e:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002950:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002952:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002954:	f021 0101 	bic.w	r1, r1, #1
 8002958:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800295a:	d021      	beq.n	80029a0 <HAL_DMA_Abort_IT+0x70>
 800295c:	4917      	ldr	r1, [pc, #92]	; (80029bc <HAL_DMA_Abort_IT+0x8c>)
 800295e:	428a      	cmp	r2, r1
 8002960:	d01a      	beq.n	8002998 <HAL_DMA_Abort_IT+0x68>
 8002962:	3114      	adds	r1, #20
 8002964:	428a      	cmp	r2, r1
 8002966:	d01d      	beq.n	80029a4 <HAL_DMA_Abort_IT+0x74>
 8002968:	3114      	adds	r1, #20
 800296a:	428a      	cmp	r2, r1
 800296c:	d01d      	beq.n	80029aa <HAL_DMA_Abort_IT+0x7a>
 800296e:	3114      	adds	r1, #20
 8002970:	428a      	cmp	r2, r1
 8002972:	d01d      	beq.n	80029b0 <HAL_DMA_Abort_IT+0x80>
 8002974:	3114      	adds	r1, #20
 8002976:	428a      	cmp	r2, r1
 8002978:	bf0c      	ite	eq
 800297a:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800297e:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8002982:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002986:	4c0e      	ldr	r4, [pc, #56]	; (80029c0 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002988:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800298a:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800298c:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800298e:	b129      	cbz	r1, 800299c <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 8002990:	4618      	mov	r0, r3
 8002992:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2000      	movs	r0, #0
}
 8002996:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002998:	2210      	movs	r2, #16
 800299a:	e7f2      	b.n	8002982 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	4608      	mov	r0, r1
}
 800299e:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80029a0:	2201      	movs	r2, #1
 80029a2:	e7ee      	b.n	8002982 <HAL_DMA_Abort_IT+0x52>
 80029a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029a8:	e7eb      	b.n	8002982 <HAL_DMA_Abort_IT+0x52>
 80029aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ae:	e7e8      	b.n	8002982 <HAL_DMA_Abort_IT+0x52>
 80029b0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029b4:	e7e5      	b.n	8002982 <HAL_DMA_Abort_IT+0x52>
 80029b6:	bf00      	nop
 80029b8:	40020008 	.word	0x40020008
 80029bc:	4002001c 	.word	0x4002001c
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029c4:	2204      	movs	r2, #4
{
 80029c6:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029c8:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029cc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029ce:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029d0:	408a      	lsls	r2, r1
 80029d2:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80029d4:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029d6:	d01f      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x54>
 80029d8:	076a      	lsls	r2, r5, #29
 80029da:	d51d      	bpl.n	8002a18 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	0691      	lsls	r1, r2, #26
 80029e0:	d403      	bmi.n	80029ea <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	f022 0204 	bic.w	r2, r2, #4
 80029e8:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029ea:	4a3e      	ldr	r2, [pc, #248]	; (8002ae4 <HAL_DMA_IRQHandler+0x120>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d05a      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0xe2>
 80029f0:	3214      	adds	r2, #20
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d05f      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0xf2>
 80029f6:	3214      	adds	r2, #20
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d066      	beq.n	8002aca <HAL_DMA_IRQHandler+0x106>
 80029fc:	3214      	adds	r2, #20
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d069      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x112>
 8002a02:	3214      	adds	r2, #20
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d05b      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0xfc>
 8002a08:	3214      	adds	r2, #20
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	bf0c      	ite	eq
 8002a0e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8002a12:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002a16:	e047      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a18:	2202      	movs	r2, #2
 8002a1a:	408a      	lsls	r2, r1
 8002a1c:	4222      	tst	r2, r4
 8002a1e:	d022      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xa2>
 8002a20:	07aa      	lsls	r2, r5, #30
 8002a22:	d520      	bpl.n	8002a66 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	0691      	lsls	r1, r2, #26
 8002a28:	d406      	bmi.n	8002a38 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8002a2a:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f022 020a 	bic.w	r2, r2, #10
 8002a32:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a34:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a38:	4a2a      	ldr	r2, [pc, #168]	; (8002ae4 <HAL_DMA_IRQHandler+0x120>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d029      	beq.n	8002a92 <HAL_DMA_IRQHandler+0xce>
 8002a3e:	3214      	adds	r2, #20
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d040      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x102>
 8002a44:	3214      	adds	r2, #20
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d042      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x10c>
 8002a4a:	3214      	adds	r2, #20
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d034      	beq.n	8002aba <HAL_DMA_IRQHandler+0xf6>
 8002a50:	3214      	adds	r2, #20
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d042      	beq.n	8002adc <HAL_DMA_IRQHandler+0x118>
 8002a56:	3214      	adds	r2, #20
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bf0c      	ite	eq
 8002a5c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002a60:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002a64:	e016      	b.n	8002a94 <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a66:	2208      	movs	r2, #8
 8002a68:	408a      	lsls	r2, r1
 8002a6a:	4222      	tst	r2, r4
 8002a6c:	d019      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0xde>
 8002a6e:	072a      	lsls	r2, r5, #28
 8002a70:	d517      	bpl.n	8002aa2 <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a72:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8002a74:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a78:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a7a:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7e:	f022 020e 	bic.w	r2, r2, #14
 8002a82:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8002a84:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a86:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a88:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002a8a:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002a8c:	b14b      	cbz	r3, 8002aa2 <HAL_DMA_IRQHandler+0xde>
}
 8002a8e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002a90:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a92:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002a94:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a96:	4c14      	ldr	r4, [pc, #80]	; (8002ae8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002a98:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a9a:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002a9c:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002aa0:	b93a      	cbnz	r2, 8002ab2 <HAL_DMA_IRQHandler+0xee>
}
 8002aa2:	bc70      	pop	{r4, r5, r6}
 8002aa4:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002aa6:	2304      	movs	r3, #4
 8002aa8:	490f      	ldr	r1, [pc, #60]	; (8002ae8 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002aaa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002aac:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002aae:	2a00      	cmp	r2, #0
 8002ab0:	d0f7      	beq.n	8002aa2 <HAL_DMA_IRQHandler+0xde>
}
 8002ab2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8002ab4:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ab6:	2340      	movs	r3, #64	; 0x40
 8002ab8:	e7f6      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002aba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002abe:	e7e9      	b.n	8002a94 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ac0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ac4:	e7f0      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	e7e4      	b.n	8002a94 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ace:	e7eb      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ad0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ad4:	e7de      	b.n	8002a94 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ad6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ada:	e7e5      	b.n	8002aa8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ae0:	e7d8      	b.n	8002a94 <HAL_DMA_IRQHandler+0xd0>
 8002ae2:	bf00      	nop
 8002ae4:	40020008 	.word	0x40020008
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af0:	680c      	ldr	r4, [r1, #0]
{
 8002af2:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af4:	2c00      	cmp	r4, #0
 8002af6:	f000 809e 	beq.w	8002c36 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8002afa:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002afc:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8002cf4 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8002b00:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b02:	4f77      	ldr	r7, [pc, #476]	; (8002ce0 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8002b04:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8002cf8 <HAL_GPIO_Init+0x20c>
 8002b08:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8002cfc <HAL_GPIO_Init+0x210>
 8002b0c:	9000      	str	r0, [sp, #0]
 8002b0e:	e004      	b.n	8002b1a <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8002b10:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b12:	fa34 f203 	lsrs.w	r2, r4, r3
 8002b16:	f000 808e 	beq.w	8002c36 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8002b1e:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b22:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8002b26:	d1f3      	bne.n	8002b10 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8002b28:	684c      	ldr	r4, [r1, #4]
 8002b2a:	2c12      	cmp	r4, #18
 8002b2c:	f200 8086 	bhi.w	8002c3c <HAL_GPIO_Init+0x150>
 8002b30:	2c12      	cmp	r4, #18
 8002b32:	d80c      	bhi.n	8002b4e <HAL_GPIO_Init+0x62>
 8002b34:	e8df f004 	tbb	[pc, r4]
 8002b38:	0abcbf8a 	.word	0x0abcbf8a
 8002b3c:	0b0b0b0b 	.word	0x0b0b0b0b
 8002b40:	0b0b0b0b 	.word	0x0b0b0b0b
 8002b44:	0b0b0b0b 	.word	0x0b0b0b0b
 8002b48:	b90b      	.short	0xb90b
 8002b4a:	b6          	.byte	0xb6
 8002b4b:	00          	.byte	0x00
 8002b4c:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b4e:	2dff      	cmp	r5, #255	; 0xff
 8002b50:	f200 8083 	bhi.w	8002c5a <HAL_GPIO_Init+0x16e>
 8002b54:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b58:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b5c:	240f      	movs	r4, #15
 8002b5e:	f8d9 2000 	ldr.w	r2, [r9]
 8002b62:	fa04 fb0a 	lsl.w	fp, r4, sl
 8002b66:	ea22 020b 	bic.w	r2, r2, fp
 8002b6a:	fa06 fa0a 	lsl.w	sl, r6, sl
 8002b6e:	ea42 020a 	orr.w	r2, r2, sl
 8002b72:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b76:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8002b7a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8002b7e:	f000 808f 	beq.w	8002ca0 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b82:	f8dc a018 	ldr.w	sl, [ip, #24]
 8002b86:	f023 0203 	bic.w	r2, r3, #3
 8002b8a:	f04a 0a01 	orr.w	sl, sl, #1
 8002b8e:	f8cc a018 	str.w	sl, [ip, #24]
 8002b92:	f8dc a018 	ldr.w	sl, [ip, #24]
 8002b96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002b9a:	f00a 0a01 	and.w	sl, sl, #1
 8002b9e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002ba2:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ba6:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002baa:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bae:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8002bb2:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bb6:	fa04 f40a 	lsl.w	r4, r4, sl
 8002bba:	ea2b 0004 	bic.w	r0, fp, r4
 8002bbe:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bc0:	9c00      	ldr	r4, [sp, #0]
 8002bc2:	4848      	ldr	r0, [pc, #288]	; (8002ce4 <HAL_GPIO_Init+0x1f8>)
 8002bc4:	4284      	cmp	r4, r0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_GPIO_Init+0x104>
 8002bc8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002bcc:	4284      	cmp	r4, r0
 8002bce:	d07d      	beq.n	8002ccc <HAL_GPIO_Init+0x1e0>
 8002bd0:	4845      	ldr	r0, [pc, #276]	; (8002ce8 <HAL_GPIO_Init+0x1fc>)
 8002bd2:	4284      	cmp	r4, r0
 8002bd4:	d071      	beq.n	8002cba <HAL_GPIO_Init+0x1ce>
 8002bd6:	4845      	ldr	r0, [pc, #276]	; (8002cec <HAL_GPIO_Init+0x200>)
 8002bd8:	4284      	cmp	r4, r0
 8002bda:	bf0c      	ite	eq
 8002bdc:	f04f 0b03 	moveq.w	fp, #3
 8002be0:	f04f 0b04 	movne.w	fp, #4
 8002be4:	9801      	ldr	r0, [sp, #4]
 8002be6:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002bea:	ea40 000a 	orr.w	r0, r0, sl
 8002bee:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bf0:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bf2:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8002bf6:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	bf14      	ite	ne
 8002bfc:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bfe:	43aa      	biceq	r2, r5
 8002c00:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002c02:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c04:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002c08:	bf14      	ite	ne
 8002c0a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c0c:	43aa      	biceq	r2, r5
 8002c0e:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c10:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c12:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c16:	bf14      	ite	ne
 8002c18:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c1a:	43aa      	biceq	r2, r5
 8002c1c:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c1e:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c22:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c24:	d039      	beq.n	8002c9a <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c26:	4315      	orrs	r5, r2
 8002c28:	60fd      	str	r5, [r7, #12]
 8002c2a:	680c      	ldr	r4, [r1, #0]
	position++;
 8002c2c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c2e:	fa34 f203 	lsrs.w	r2, r4, r3
 8002c32:	f47f af72 	bne.w	8002b1a <HAL_GPIO_Init+0x2e>
  }
}
 8002c36:	b005      	add	sp, #20
 8002c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002c3c:	4544      	cmp	r4, r8
 8002c3e:	d005      	beq.n	8002c4c <HAL_GPIO_Init+0x160>
 8002c40:	d913      	bls.n	8002c6a <HAL_GPIO_Init+0x17e>
 8002c42:	4574      	cmp	r4, lr
 8002c44:	d002      	beq.n	8002c4c <HAL_GPIO_Init+0x160>
 8002c46:	482a      	ldr	r0, [pc, #168]	; (8002cf0 <HAL_GPIO_Init+0x204>)
 8002c48:	4284      	cmp	r4, r0
 8002c4a:	d180      	bne.n	8002b4e <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c4c:	688c      	ldr	r4, [r1, #8]
 8002c4e:	b9e4      	cbnz	r4, 8002c8a <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c50:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c52:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c56:	f67f af7d 	bls.w	8002b54 <HAL_GPIO_Init+0x68>
 8002c5a:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c5c:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8002c60:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c64:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c68:	e778      	b.n	8002b5c <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8002c6a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8002d00 <HAL_GPIO_Init+0x214>
 8002c6e:	454c      	cmp	r4, r9
 8002c70:	d0ec      	beq.n	8002c4c <HAL_GPIO_Init+0x160>
 8002c72:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8002c76:	454c      	cmp	r4, r9
 8002c78:	d0e8      	beq.n	8002c4c <HAL_GPIO_Init+0x160>
 8002c7a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8002c7e:	454c      	cmp	r4, r9
 8002c80:	f47f af65 	bne.w	8002b4e <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c84:	688c      	ldr	r4, [r1, #8]
 8002c86:	2c00      	cmp	r4, #0
 8002c88:	d0e2      	beq.n	8002c50 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8002c8a:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c8c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c8e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8002c92:	bf0c      	ite	eq
 8002c94:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8002c96:	6142      	strne	r2, [r0, #20]
 8002c98:	e759      	b.n	8002b4e <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c9a:	ea22 0505 	bic.w	r5, r2, r5
 8002c9e:	60fd      	str	r5, [r7, #12]
 8002ca0:	680c      	ldr	r4, [r1, #0]
 8002ca2:	e735      	b.n	8002b10 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ca4:	68ce      	ldr	r6, [r1, #12]
 8002ca6:	360c      	adds	r6, #12
          break;
 8002ca8:	e751      	b.n	8002b4e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002caa:	68ce      	ldr	r6, [r1, #12]
 8002cac:	3604      	adds	r6, #4
          break;
 8002cae:	e74e      	b.n	8002b4e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002cb0:	68ce      	ldr	r6, [r1, #12]
 8002cb2:	3608      	adds	r6, #8
          break;
 8002cb4:	e74b      	b.n	8002b4e <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002cb6:	68ce      	ldr	r6, [r1, #12]
          break;
 8002cb8:	e749      	b.n	8002b4e <HAL_GPIO_Init+0x62>
 8002cba:	f04f 0b02 	mov.w	fp, #2
 8002cbe:	9801      	ldr	r0, [sp, #4]
 8002cc0:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002cc4:	ea40 000a 	orr.w	r0, r0, sl
 8002cc8:	9001      	str	r0, [sp, #4]
 8002cca:	e791      	b.n	8002bf0 <HAL_GPIO_Init+0x104>
 8002ccc:	f04f 0b01 	mov.w	fp, #1
 8002cd0:	9801      	ldr	r0, [sp, #4]
 8002cd2:	fa0b fa0a 	lsl.w	sl, fp, sl
 8002cd6:	ea40 000a 	orr.w	r0, r0, sl
 8002cda:	9001      	str	r0, [sp, #4]
 8002cdc:	e788      	b.n	8002bf0 <HAL_GPIO_Init+0x104>
 8002cde:	bf00      	nop
 8002ce0:	40010400 	.word	0x40010400
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	40011000 	.word	0x40011000
 8002cec:	40011400 	.word	0x40011400
 8002cf0:	10320000 	.word	0x10320000
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	10220000 	.word	0x10220000
 8002cfc:	10310000 	.word	0x10310000
 8002d00:	10120000 	.word	0x10120000

08002d04 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d04:	6883      	ldr	r3, [r0, #8]
 8002d06:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002d08:	bf14      	ite	ne
 8002d0a:	2001      	movne	r0, #1
 8002d0c:	2000      	moveq	r0, #0
 8002d0e:	4770      	bx	lr

08002d10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d10:	b902      	cbnz	r2, 8002d14 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d12:	0409      	lsls	r1, r1, #16
 8002d14:	6101      	str	r1, [r0, #16]
  }
}
 8002d16:	4770      	bx	lr

08002d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002d1a:	6951      	ldr	r1, [r2, #20]
 8002d1c:	4201      	tst	r1, r0
 8002d1e:	d100      	bne.n	8002d22 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8002d20:	4770      	bx	lr
{
 8002d22:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d24:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d26:	f7fe f897 	bl	8000e58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d2a:	bd08      	pop	{r3, pc}
 8002d2c:	40010400 	.word	0x40010400

08002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	4605      	mov	r5, r0
 8002d34:	460e      	mov	r6, r1
 8002d36:	4617      	mov	r7, r2
 8002d38:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d3a:	682c      	ldr	r4, [r5, #0]
 8002d3c:	d003      	beq.n	8002d46 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8002d3e:	e009      	b.n	8002d54 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d40:	6963      	ldr	r3, [r4, #20]
 8002d42:	055b      	lsls	r3, r3, #21
 8002d44:	d424      	bmi.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d46:	6963      	ldr	r3, [r4, #20]
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	f013 0302 	ands.w	r3, r3, #2
 8002d4e:	d1f7      	bne.n	8002d40 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002d50:	4618      	mov	r0, r3
}
 8002d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d54:	6963      	ldr	r3, [r4, #20]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	f013 0302 	ands.w	r3, r3, #2
 8002d5c:	d0f8      	beq.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d5e:	6963      	ldr	r3, [r4, #20]
 8002d60:	0559      	lsls	r1, r3, #21
 8002d62:	d415      	bmi.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d64:	f7ff fa70 	bl	8002248 <HAL_GetTick>
 8002d68:	1bc0      	subs	r0, r0, r7
 8002d6a:	4286      	cmp	r6, r0
 8002d6c:	d301      	bcc.n	8002d72 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 8002d6e:	2e00      	cmp	r6, #0
 8002d70:	d1e2      	bne.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d72:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d74:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d78:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d7c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002d82:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d86:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d8c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d90:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d92:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d96:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d9e:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da0:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da4:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dac:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8002dae:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db2:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8002db6:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db8:	642b      	str	r3, [r5, #64]	; 0x40
}
 8002dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002dbc <I2C_RequestMemoryWrite>:
{
 8002dbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dc0:	4616      	mov	r6, r2
 8002dc2:	461f      	mov	r7, r3
 8002dc4:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc6:	6800      	ldr	r0, [r0, #0]
{
 8002dc8:	460d      	mov	r5, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dca:	6801      	ldr	r1, [r0, #0]
{
 8002dcc:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dce:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002dd2:	6001      	str	r1, [r0, #0]
{
 8002dd4:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
 8002dd8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002ddc:	d111      	bne.n	8002e02 <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dde:	6943      	ldr	r3, [r0, #20]
 8002de0:	07d9      	lsls	r1, r3, #31
 8002de2:	d5fc      	bpl.n	8002dde <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002de8:	6105      	str	r5, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dea:	4642      	mov	r2, r8
 8002dec:	4649      	mov	r1, r9
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff ff9e 	bl	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8002df4:	4605      	mov	r5, r0
 8002df6:	b190      	cbz	r0, 8002e1e <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8002df8:	2501      	movs	r5, #1
}
 8002dfa:	4628      	mov	r0, r5
 8002dfc:	b003      	add	sp, #12
 8002dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e02:	6943      	ldr	r3, [r0, #20]
 8002e04:	07da      	lsls	r2, r3, #31
 8002e06:	d4ed      	bmi.n	8002de4 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e08:	f7ff fa1e 	bl	8002248 <HAL_GetTick>
 8002e0c:	eba0 0008 	sub.w	r0, r0, r8
 8002e10:	4581      	cmp	r9, r0
 8002e12:	d32e      	bcc.n	8002e72 <I2C_RequestMemoryWrite+0xb6>
 8002e14:	f1b9 0f00 	cmp.w	r9, #0
 8002e18:	d02b      	beq.n	8002e72 <I2C_RequestMemoryWrite+0xb6>
 8002e1a:	6820      	ldr	r0, [r4, #0]
 8002e1c:	e7dc      	b.n	8002dd8 <I2C_RequestMemoryWrite+0x1c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e1e:	6820      	ldr	r0, [r4, #0]
 8002e20:	9501      	str	r5, [sp, #4]
 8002e22:	6943      	ldr	r3, [r0, #20]
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	6983      	ldr	r3, [r0, #24]
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e2c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002e30:	d16b      	bne.n	8002f0a <I2C_RequestMemoryWrite+0x14e>
 8002e32:	6943      	ldr	r3, [r0, #20]
 8002e34:	0619      	lsls	r1, r3, #24
 8002e36:	d435      	bmi.n	8002ea4 <I2C_RequestMemoryWrite+0xe8>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e38:	6943      	ldr	r3, [r0, #20]
 8002e3a:	055a      	lsls	r2, r3, #21
 8002e3c:	d5f9      	bpl.n	8002e32 <I2C_RequestMemoryWrite+0x76>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3e:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e40:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e42:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002e46:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e48:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e52:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e58:	f043 0304 	orr.w	r3, r3, #4
 8002e5c:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d1c9      	bne.n	8002df8 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8002e66:	2501      	movs	r5, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	e7c3      	b.n	8002dfa <I2C_RequestMemoryWrite+0x3e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e72:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e74:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e76:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e7c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e82:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e84:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8002e88:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e8c:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e8e:	680b      	ldr	r3, [r1, #0]
 8002e90:	05d8      	lsls	r0, r3, #23
 8002e92:	d50f      	bpl.n	8002eb4 <I2C_RequestMemoryWrite+0xf8>
    return HAL_TIMEOUT;
 8002e94:	2503      	movs	r5, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e96:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 8002e9a:	4628      	mov	r0, r5
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e9c:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002e9e:	b003      	add	sp, #12
 8002ea0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ea4:	2f01      	cmp	r7, #1
 8002ea6:	d10a      	bne.n	8002ebe <I2C_RequestMemoryWrite+0x102>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea8:	b2f6      	uxtb	r6, r6
 8002eaa:	6106      	str	r6, [r0, #16]
}
 8002eac:	4628      	mov	r0, r5
 8002eae:	b003      	add	sp, #12
 8002eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_TIMEOUT;
 8002eb4:	2503      	movs	r5, #3
}
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	b003      	add	sp, #12
 8002eba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ebe:	0a33      	lsrs	r3, r6, #8
 8002ec0:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ec2:	f1b9 3fff 	cmp.w	r9, #4294967295
 8002ec6:	d131      	bne.n	8002f2c <I2C_RequestMemoryWrite+0x170>
 8002ec8:	6943      	ldr	r3, [r0, #20]
 8002eca:	0619      	lsls	r1, r3, #24
 8002ecc:	d4ec      	bmi.n	8002ea8 <I2C_RequestMemoryWrite+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ece:	6943      	ldr	r3, [r0, #20]
 8002ed0:	055a      	lsls	r2, r3, #21
 8002ed2:	d5f9      	bpl.n	8002ec8 <I2C_RequestMemoryWrite+0x10c>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ed6:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed8:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002edc:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ede:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ee0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8002eea:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	f47f af7e 	bne.w	8002df8 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efc:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8002efe:	2501      	movs	r5, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e777      	b.n	8002dfa <I2C_RequestMemoryWrite+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f0a:	6943      	ldr	r3, [r0, #20]
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	d4c9      	bmi.n	8002ea4 <I2C_RequestMemoryWrite+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f10:	6943      	ldr	r3, [r0, #20]
 8002f12:	055b      	lsls	r3, r3, #21
 8002f14:	d493      	bmi.n	8002e3e <I2C_RequestMemoryWrite+0x82>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7ff f997 	bl	8002248 <HAL_GetTick>
 8002f1a:	eba0 0008 	sub.w	r0, r0, r8
 8002f1e:	4581      	cmp	r9, r0
 8002f20:	d315      	bcc.n	8002f4e <I2C_RequestMemoryWrite+0x192>
 8002f22:	f1b9 0f00 	cmp.w	r9, #0
 8002f26:	d012      	beq.n	8002f4e <I2C_RequestMemoryWrite+0x192>
 8002f28:	6820      	ldr	r0, [r4, #0]
 8002f2a:	e77f      	b.n	8002e2c <I2C_RequestMemoryWrite+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f2c:	6943      	ldr	r3, [r0, #20]
 8002f2e:	061b      	lsls	r3, r3, #24
 8002f30:	d4ba      	bmi.n	8002ea8 <I2C_RequestMemoryWrite+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f32:	6943      	ldr	r3, [r0, #20]
 8002f34:	055f      	lsls	r7, r3, #21
 8002f36:	d4cd      	bmi.n	8002ed4 <I2C_RequestMemoryWrite+0x118>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7ff f986 	bl	8002248 <HAL_GetTick>
 8002f3c:	eba0 0308 	sub.w	r3, r0, r8
 8002f40:	4599      	cmp	r9, r3
 8002f42:	d312      	bcc.n	8002f6a <I2C_RequestMemoryWrite+0x1ae>
 8002f44:	f1b9 0f00 	cmp.w	r9, #0
 8002f48:	d00f      	beq.n	8002f6a <I2C_RequestMemoryWrite+0x1ae>
 8002f4a:	6820      	ldr	r0, [r4, #0]
 8002f4c:	e7b9      	b.n	8002ec2 <I2C_RequestMemoryWrite+0x106>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f4e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f50:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f52:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f54:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f58:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f5e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f62:	f043 0320 	orr.w	r3, r3, #32
 8002f66:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002f68:	e779      	b.n	8002e5e <I2C_RequestMemoryWrite+0xa2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f6a:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f6c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f6e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f74:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002f7a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f7e:	f043 0320 	orr.w	r3, r3, #32
 8002f82:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8002f84:	e7b6      	b.n	8002ef4 <I2C_RequestMemoryWrite+0x138>
 8002f86:	bf00      	nop

08002f88 <I2C_RequestMemoryRead>:
{
 8002f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f8c:	4698      	mov	r8, r3
 8002f8e:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f90:	6800      	ldr	r0, [r0, #0]
{
 8002f92:	468a      	mov	sl, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f94:	6801      	ldr	r1, [r0, #0]
{
 8002f96:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f98:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8002f9c:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9e:	6802      	ldr	r2, [r0, #0]
{
 8002fa0:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fa2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa6:	6002      	str	r2, [r0, #0]
{
 8002fa8:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 8002fac:	1c75      	adds	r5, r6, #1
 8002fae:	d111      	bne.n	8002fd4 <I2C_RequestMemoryRead+0x4c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb0:	6943      	ldr	r3, [r0, #20]
 8002fb2:	07d9      	lsls	r1, r3, #31
 8002fb4:	d5fc      	bpl.n	8002fb0 <I2C_RequestMemoryRead+0x28>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fb6:	f00a 03fe 	and.w	r3, sl, #254	; 0xfe
 8002fba:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fbc:	464a      	mov	r2, r9
 8002fbe:	4631      	mov	r1, r6
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f7ff feb5 	bl	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fc6:	fa5f fa8a 	uxtb.w	sl, sl
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fca:	b180      	cbz	r0, 8002fee <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8002fcc:	2001      	movs	r0, #1
}
 8002fce:	b002      	add	sp, #8
 8002fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd4:	6943      	ldr	r3, [r0, #20]
 8002fd6:	07da      	lsls	r2, r3, #31
 8002fd8:	d4ed      	bmi.n	8002fb6 <I2C_RequestMemoryRead+0x2e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7ff f935 	bl	8002248 <HAL_GetTick>
 8002fde:	eba0 0009 	sub.w	r0, r0, r9
 8002fe2:	4286      	cmp	r6, r0
 8002fe4:	d32c      	bcc.n	8003040 <I2C_RequestMemoryRead+0xb8>
 8002fe6:	2e00      	cmp	r6, #0
 8002fe8:	d02a      	beq.n	8003040 <I2C_RequestMemoryRead+0xb8>
 8002fea:	6820      	ldr	r0, [r4, #0]
 8002fec:	e7de      	b.n	8002fac <I2C_RequestMemoryRead+0x24>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fee:	6825      	ldr	r5, [r4, #0]
 8002ff0:	9001      	str	r0, [sp, #4]
 8002ff2:	696b      	ldr	r3, [r5, #20]
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	69ab      	ldr	r3, [r5, #24]
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ffc:	1c70      	adds	r0, r6, #1
 8002ffe:	d176      	bne.n	80030ee <I2C_RequestMemoryRead+0x166>
 8003000:	696b      	ldr	r3, [r5, #20]
 8003002:	0619      	lsls	r1, r3, #24
 8003004:	d434      	bmi.n	8003070 <I2C_RequestMemoryRead+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003006:	696b      	ldr	r3, [r5, #20]
 8003008:	055a      	lsls	r2, r3, #21
 800300a:	d5f9      	bpl.n	8003000 <I2C_RequestMemoryRead+0x78>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800300c:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003010:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003014:	6169      	str	r1, [r5, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003016:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800301c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003020:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003022:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800302e:	2b04      	cmp	r3, #4
 8003030:	d1cc      	bne.n	8002fcc <I2C_RequestMemoryRead+0x44>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003032:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 8003034:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003036:	6813      	ldr	r3, [r2, #0]
 8003038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e7c6      	b.n	8002fce <I2C_RequestMemoryRead+0x46>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003040:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003042:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003044:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003046:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800304a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800304e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003050:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003052:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003056:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800305a:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800305c:	680b      	ldr	r3, [r1, #0]
 800305e:	05de      	lsls	r6, r3, #23
 8003060:	d514      	bpl.n	800308c <I2C_RequestMemoryRead+0x104>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003062:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 8003066:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003068:	6423      	str	r3, [r4, #64]	; 0x40
}
 800306a:	b002      	add	sp, #8
 800306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003070:	f1b8 0f01 	cmp.w	r8, #1
 8003074:	d10e      	bne.n	8003094 <I2C_RequestMemoryRead+0x10c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003076:	b2ff      	uxtb	r7, r7
 8003078:	612f      	str	r7, [r5, #16]
 800307a:	1c72      	adds	r2, r6, #1
 800307c:	d146      	bne.n	800310c <I2C_RequestMemoryRead+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307e:	696b      	ldr	r3, [r5, #20]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	d412      	bmi.n	80030aa <I2C_RequestMemoryRead+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003084:	696b      	ldr	r3, [r5, #20]
 8003086:	055f      	lsls	r7, r3, #21
 8003088:	d5f9      	bpl.n	800307e <I2C_RequestMemoryRead+0xf6>
 800308a:	e7bf      	b.n	800300c <I2C_RequestMemoryRead+0x84>
    return HAL_TIMEOUT;
 800308c:	2003      	movs	r0, #3
}
 800308e:	b002      	add	sp, #8
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003094:	0a3b      	lsrs	r3, r7, #8
 8003096:	612b      	str	r3, [r5, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003098:	1c71      	adds	r1, r6, #1
 800309a:	d147      	bne.n	800312c <I2C_RequestMemoryRead+0x1a4>
 800309c:	696b      	ldr	r3, [r5, #20]
 800309e:	061a      	lsls	r2, r3, #24
 80030a0:	d4e9      	bmi.n	8003076 <I2C_RequestMemoryRead+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a2:	696b      	ldr	r3, [r5, #20]
 80030a4:	055b      	lsls	r3, r3, #21
 80030a6:	d5f9      	bpl.n	800309c <I2C_RequestMemoryRead+0x114>
 80030a8:	e7b0      	b.n	800300c <I2C_RequestMemoryRead+0x84>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80030b2:	1c71      	adds	r1, r6, #1
 80030b4:	d10e      	bne.n	80030d4 <I2C_RequestMemoryRead+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b6:	696b      	ldr	r3, [r5, #20]
 80030b8:	07da      	lsls	r2, r3, #31
 80030ba:	d5fc      	bpl.n	80030b6 <I2C_RequestMemoryRead+0x12e>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030bc:	f04a 0101 	orr.w	r1, sl, #1
 80030c0:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030c2:	464a      	mov	r2, r9
 80030c4:	4631      	mov	r1, r6
 80030c6:	4620      	mov	r0, r4
 80030c8:	f7ff fe32 	bl	8002d30 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
    return HAL_TIMEOUT;
 80030cc:	3800      	subs	r0, #0
 80030ce:	bf18      	it	ne
 80030d0:	2001      	movne	r0, #1
 80030d2:	e77c      	b.n	8002fce <I2C_RequestMemoryRead+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d4:	696b      	ldr	r3, [r5, #20]
 80030d6:	07db      	lsls	r3, r3, #31
 80030d8:	d4f0      	bmi.n	80030bc <I2C_RequestMemoryRead+0x134>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030da:	f7ff f8b5 	bl	8002248 <HAL_GetTick>
 80030de:	eba0 0009 	sub.w	r0, r0, r9
 80030e2:	4286      	cmp	r6, r0
 80030e4:	d3ac      	bcc.n	8003040 <I2C_RequestMemoryRead+0xb8>
 80030e6:	2e00      	cmp	r6, #0
 80030e8:	d0aa      	beq.n	8003040 <I2C_RequestMemoryRead+0xb8>
 80030ea:	6825      	ldr	r5, [r4, #0]
 80030ec:	e7e1      	b.n	80030b2 <I2C_RequestMemoryRead+0x12a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030ee:	696b      	ldr	r3, [r5, #20]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	d4bd      	bmi.n	8003070 <I2C_RequestMemoryRead+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030f4:	696b      	ldr	r3, [r5, #20]
 80030f6:	055b      	lsls	r3, r3, #21
 80030f8:	d488      	bmi.n	800300c <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7ff f8a5 	bl	8002248 <HAL_GetTick>
 80030fe:	eba0 0009 	sub.w	r0, r0, r9
 8003102:	4286      	cmp	r6, r0
 8003104:	d322      	bcc.n	800314c <I2C_RequestMemoryRead+0x1c4>
 8003106:	b30e      	cbz	r6, 800314c <I2C_RequestMemoryRead+0x1c4>
 8003108:	6825      	ldr	r5, [r4, #0]
 800310a:	e777      	b.n	8002ffc <I2C_RequestMemoryRead+0x74>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310c:	696b      	ldr	r3, [r5, #20]
 800310e:	0618      	lsls	r0, r3, #24
 8003110:	d4cb      	bmi.n	80030aa <I2C_RequestMemoryRead+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003112:	696b      	ldr	r3, [r5, #20]
 8003114:	0559      	lsls	r1, r3, #21
 8003116:	f53f af79 	bmi.w	800300c <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7ff f895 	bl	8002248 <HAL_GetTick>
 800311e:	eba0 0309 	sub.w	r3, r0, r9
 8003122:	429e      	cmp	r6, r3
 8003124:	d312      	bcc.n	800314c <I2C_RequestMemoryRead+0x1c4>
 8003126:	b18e      	cbz	r6, 800314c <I2C_RequestMemoryRead+0x1c4>
 8003128:	6825      	ldr	r5, [r4, #0]
 800312a:	e7a6      	b.n	800307a <I2C_RequestMemoryRead+0xf2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800312c:	696b      	ldr	r3, [r5, #20]
 800312e:	0618      	lsls	r0, r3, #24
 8003130:	d4a1      	bmi.n	8003076 <I2C_RequestMemoryRead+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003132:	696b      	ldr	r3, [r5, #20]
 8003134:	0558      	lsls	r0, r3, #21
 8003136:	f53f af69 	bmi.w	800300c <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7ff f885 	bl	8002248 <HAL_GetTick>
 800313e:	eba0 0309 	sub.w	r3, r0, r9
 8003142:	429e      	cmp	r6, r3
 8003144:	d302      	bcc.n	800314c <I2C_RequestMemoryRead+0x1c4>
 8003146:	b10e      	cbz	r6, 800314c <I2C_RequestMemoryRead+0x1c4>
 8003148:	6825      	ldr	r5, [r4, #0]
 800314a:	e7a5      	b.n	8003098 <I2C_RequestMemoryRead+0x110>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800314c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800314e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003150:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003152:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003156:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800315a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800315c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	f043 0320 	orr.w	r3, r3, #32
 8003164:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8003166:	e761      	b.n	800302c <I2C_RequestMemoryRead+0xa4>

08003168 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003168:	2800      	cmp	r0, #0
 800316a:	f000 80b5 	beq.w	80032d8 <HAL_I2C_Init+0x170>
{
 800316e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003170:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003174:	4604      	mov	r4, r0
 8003176:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 8094 	beq.w	80032a8 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003180:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8003182:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003184:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800319e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a0:	f000 fe98 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031a4:	6865      	ldr	r5, [r4, #4]
 80031a6:	4b4d      	ldr	r3, [pc, #308]	; (80032dc <HAL_I2C_Init+0x174>)
 80031a8:	429d      	cmp	r5, r3
 80031aa:	d84c      	bhi.n	8003246 <HAL_I2C_Init+0xde>
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <HAL_I2C_Init+0x178>)
 80031ae:	4298      	cmp	r0, r3
 80031b0:	d978      	bls.n	80032a4 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031b2:	1e42      	subs	r2, r0, #1
 80031b4:	006d      	lsls	r5, r5, #1
 80031b6:	fbb2 f2f5 	udiv	r2, r2, r5
 80031ba:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 80031be:	4949      	ldr	r1, [pc, #292]	; (80032e4 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c0:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80031c2:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c6:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c8:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ca:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80031ce:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 80031d2:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031d4:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 80031d6:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031d8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80031dc:	3001      	adds	r0, #1
 80031de:	4308      	orrs	r0, r1
 80031e0:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031e2:	69d9      	ldr	r1, [r3, #28]
 80031e4:	4232      	tst	r2, r6
 80031e6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80031ea:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80031ee:	d160      	bne.n	80032b2 <HAL_I2C_Init+0x14a>
 80031f0:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f2:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80031f4:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031f6:	430a      	orrs	r2, r1
 80031f8:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 8003200:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003204:	4302      	orrs	r2, r0
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800320a:	6899      	ldr	r1, [r3, #8]
 800320c:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 8003210:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003214:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003218:	4302      	orrs	r2, r0
 800321a:	430a      	orrs	r2, r1
 800321c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800321e:	68d9      	ldr	r1, [r3, #12]
 8003220:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 8003224:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003228:	4302      	orrs	r2, r0
 800322a:	430a      	orrs	r2, r1
 800322c:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 800322e:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003230:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800323a:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800323e:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003240:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8003244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003246:	4b28      	ldr	r3, [pc, #160]	; (80032e8 <HAL_I2C_Init+0x180>)
 8003248:	4298      	cmp	r0, r3
 800324a:	d92b      	bls.n	80032a4 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8003250:	4e24      	ldr	r6, [pc, #144]	; (80032e4 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003252:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003254:	fba6 2600 	umull	r2, r6, r6, r0
 8003258:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800325a:	fb01 f102 	mul.w	r1, r1, r2
 800325e:	4f23      	ldr	r7, [pc, #140]	; (80032ec <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003260:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003262:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003266:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800326a:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 800326e:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003270:	6a1a      	ldr	r2, [r3, #32]
 8003272:	0989      	lsrs	r1, r1, #6
 8003274:	3101      	adds	r1, #1
 8003276:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800327a:	4311      	orrs	r1, r2
 800327c:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800327e:	69d9      	ldr	r1, [r3, #28]
 8003280:	68a6      	ldr	r6, [r4, #8]
 8003282:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003286:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800328a:	b9ae      	cbnz	r6, 80032b8 <HAL_I2C_Init+0x150>
 800328c:	3801      	subs	r0, #1
 800328e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8003292:	fbb0 f2f2 	udiv	r2, r0, r2
 8003296:	3201      	adds	r2, #1
 8003298:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800329c:	b1d2      	cbz	r2, 80032d4 <HAL_I2C_Init+0x16c>
 800329e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a2:	e7a6      	b.n	80031f2 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
}
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80032a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80032ac:	f7fe fc7c 	bl	8001ba8 <HAL_I2C_MspInit>
 80032b0:	e766      	b.n	8003180 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80032b6:	e79c      	b.n	80031f2 <HAL_I2C_Init+0x8a>
 80032b8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 80032bc:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80032c0:	1e42      	subs	r2, r0, #1
 80032c2:	fbb2 f2f5 	udiv	r2, r2, r5
 80032c6:	3201      	adds	r2, #1
 80032c8:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80032cc:	b112      	cbz	r2, 80032d4 <HAL_I2C_Init+0x16c>
 80032ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80032d2:	e78e      	b.n	80031f2 <HAL_I2C_Init+0x8a>
 80032d4:	2201      	movs	r2, #1
 80032d6:	e78c      	b.n	80031f2 <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 80032d8:	2001      	movs	r0, #1
}
 80032da:	4770      	bx	lr
 80032dc:	000186a0 	.word	0x000186a0
 80032e0:	001e847f 	.word	0x001e847f
 80032e4:	431bde83 	.word	0x431bde83
 80032e8:	003d08ff 	.word	0x003d08ff
 80032ec:	10624dd3 	.word	0x10624dd3

080032f0 <HAL_I2C_Mem_Write>:
{
 80032f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f4:	4604      	mov	r4, r0
 80032f6:	b083      	sub	sp, #12
 80032f8:	4699      	mov	r9, r3
 80032fa:	460f      	mov	r7, r1
 80032fc:	4690      	mov	r8, r2
 80032fe:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8003302:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8003304:	f7fe ffa0 	bl	8002248 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800330c:	2b20      	cmp	r3, #32
 800330e:	d004      	beq.n	800331a <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8003310:	2702      	movs	r7, #2
}
 8003312:	4638      	mov	r0, r7
 8003314:	b003      	add	sp, #12
 8003316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800331a:	4605      	mov	r5, r0
 800331c:	e005      	b.n	800332a <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7fe ff93 	bl	8002248 <HAL_GetTick>
 8003322:	1b40      	subs	r0, r0, r5
 8003324:	2819      	cmp	r0, #25
 8003326:	f200 80c3 	bhi.w	80034b0 <HAL_I2C_Mem_Write+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6990      	ldr	r0, [r2, #24]
 800332e:	43c0      	mvns	r0, r0
 8003330:	f010 0b02 	ands.w	fp, r0, #2
 8003334:	d0f3      	beq.n	800331e <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8003336:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800333a:	2b01      	cmp	r3, #1
 800333c:	d0e8      	beq.n	8003310 <HAL_I2C_Mem_Write+0x20>
 800333e:	2301      	movs	r3, #1
 8003340:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003344:	6813      	ldr	r3, [r2, #0]
 8003346:	07d8      	lsls	r0, r3, #31
 8003348:	f140 8092 	bpl.w	8003470 <HAL_I2C_Mem_Write+0x180>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800334c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003350:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003356:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003358:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800335e:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003360:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003364:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003368:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800336a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336e:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003372:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 8003374:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003376:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 800337a:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800337c:	4642      	mov	r2, r8
 800337e:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003382:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003384:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003388:	4620      	mov	r0, r4
 800338a:	f7ff fd17 	bl	8002dbc <I2C_RequestMemoryWrite>
 800338e:	4607      	mov	r7, r0
 8003390:	bb00      	cbnz	r0, 80033d4 <HAL_I2C_Mem_Write+0xe4>
    while (hi2c->XferSize > 0U)
 8003392:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80b9 	beq.w	800350c <HAL_I2C_Mem_Write+0x21c>
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	1c72      	adds	r2, r6, #1
 800339e:	d16c      	bne.n	800347a <HAL_I2C_Mem_Write+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	0610      	lsls	r0, r2, #24
 80033a4:	d41b      	bmi.n	80033de <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	0551      	lsls	r1, r2, #21
 80033aa:	d5f9      	bpl.n	80033a0 <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80033ac:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ae:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80033b2:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b4:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033bc:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80033c2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	f000 8089 	beq.w	80034e6 <HAL_I2C_Mem_Write+0x1f6>
      return HAL_ERROR;
 80033d4:	2701      	movs	r7, #1
}
 80033d6:	4638      	mov	r0, r7
 80033d8:	b003      	add	sp, #12
 80033da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033de:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80033e2:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e6:	46f4      	mov	ip, lr
 80033e8:	f81c 2b01 	ldrb.w	r2, [ip], #1
      hi2c->XferSize--;
 80033ec:	f108 31ff 	add.w	r1, r8, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033f0:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80033f2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80033f4:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 80033f6:	3a01      	subs	r2, #1
 80033f8:	b292      	uxth	r2, r2
 80033fa:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033fc:	6958      	ldr	r0, [r3, #20]
      hi2c->pBuffPtr++;
 80033fe:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003402:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8003404:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003406:	d530      	bpl.n	800346a <HAL_I2C_Mem_Write+0x17a>
 8003408:	bb09      	cbnz	r1, 800344e <HAL_I2C_Mem_Write+0x15e>
 800340a:	1c72      	adds	r2, r6, #1
 800340c:	d172      	bne.n	80034f4 <HAL_I2C_Mem_Write+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	0750      	lsls	r0, r2, #29
 8003412:	d45b      	bmi.n	80034cc <HAL_I2C_Mem_Write+0x1dc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	0551      	lsls	r1, r2, #21
 8003418:	d5f9      	bpl.n	800340e <HAL_I2C_Mem_Write+0x11e>
    hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341c:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003424:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003426:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800342e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8003430:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003434:	f043 0304 	orr.w	r3, r3, #4
 8003438:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800343a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800343c:	2b04      	cmp	r3, #4
 800343e:	d1c9      	bne.n	80033d4 <HAL_I2C_Mem_Write+0xe4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003440:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 8003442:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	6813      	ldr	r3, [r2, #0]
 8003446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	e761      	b.n	8003312 <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800344e:	f89e 2001 	ldrb.w	r2, [lr, #1]
        hi2c->XferSize--;
 8003452:	f1a8 0102 	sub.w	r1, r8, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003456:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8003458:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800345a:	b289      	uxth	r1, r1
        hi2c->XferCount--;
 800345c:	3801      	subs	r0, #1
        hi2c->pBuffPtr++;
 800345e:	f10e 0202 	add.w	r2, lr, #2
        hi2c->XferCount--;
 8003462:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 8003464:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003466:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003468:	8560      	strh	r0, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800346a:	2900      	cmp	r1, #0
 800346c:	d196      	bne.n	800339c <HAL_I2C_Mem_Write+0xac>
 800346e:	e7cc      	b.n	800340a <HAL_I2C_Mem_Write+0x11a>
      __HAL_I2C_ENABLE(hi2c);
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	f043 0301 	orr.w	r3, r3, #1
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e768      	b.n	800334c <HAL_I2C_Mem_Write+0x5c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	0612      	lsls	r2, r2, #24
 800347e:	d4ae      	bmi.n	80033de <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003480:	695a      	ldr	r2, [r3, #20]
 8003482:	0551      	lsls	r1, r2, #21
 8003484:	d492      	bmi.n	80033ac <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003486:	f7fe fedf 	bl	8002248 <HAL_GetTick>
 800348a:	1b40      	subs	r0, r0, r5
 800348c:	4286      	cmp	r6, r0
 800348e:	d301      	bcc.n	8003494 <HAL_I2C_Mem_Write+0x1a4>
 8003490:	2e00      	cmp	r6, #0
 8003492:	d182      	bne.n	800339a <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003494:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003496:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003498:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800349a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800349e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034a4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a8:	f043 0320 	orr.w	r3, r3, #32
 80034ac:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80034ae:	e78d      	b.n	80033cc <HAL_I2C_Mem_Write+0xdc>
        hi2c->State             = HAL_I2C_STATE_READY;
 80034b0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034b2:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034ba:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034c0:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	f043 0320 	orr.w	r3, r3, #32
 80034c8:	6423      	str	r3, [r4, #64]	; 0x40
 80034ca:	e721      	b.n	8003310 <HAL_I2C_Mem_Write+0x20>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034cc:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80034ce:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034d6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80034d8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80034dc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80034e4:	e715      	b.n	8003312 <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e6:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 80034e8:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e70e      	b.n	8003312 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	0752      	lsls	r2, r2, #29
 80034f8:	d4e8      	bmi.n	80034cc <HAL_I2C_Mem_Write+0x1dc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	0551      	lsls	r1, r2, #21
 80034fe:	d48c      	bmi.n	800341a <HAL_I2C_Mem_Write+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003500:	f7fe fea2 	bl	8002248 <HAL_GetTick>
 8003504:	1b43      	subs	r3, r0, r5
 8003506:	429e      	cmp	r6, r3
 8003508:	d302      	bcc.n	8003510 <HAL_I2C_Mem_Write+0x220>
 800350a:	b10e      	cbz	r6, 8003510 <HAL_I2C_Mem_Write+0x220>
 800350c:	6823      	ldr	r3, [r4, #0]
 800350e:	e77c      	b.n	800340a <HAL_I2C_Mem_Write+0x11a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003510:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003512:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003514:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003516:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800351a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800351e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003520:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800352a:	e786      	b.n	800343a <HAL_I2C_Mem_Write+0x14a>

0800352c <HAL_I2C_Mem_Read>:
{
 800352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003530:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8003532:	2500      	movs	r5, #0
{
 8003534:	b089      	sub	sp, #36	; 0x24
 8003536:	469a      	mov	sl, r3
 8003538:	4688      	mov	r8, r1
 800353a:	4691      	mov	r9, r2
 800353c:	f8bd b04c 	ldrh.w	fp, [sp, #76]	; 0x4c
 8003540:	9f14      	ldr	r7, [sp, #80]	; 0x50
  __IO uint32_t count = 0U;
 8003542:	9503      	str	r5, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 8003544:	f7fe fe80 	bl	8002248 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003548:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800354c:	2b20      	cmp	r3, #32
 800354e:	d004      	beq.n	800355a <HAL_I2C_Mem_Read+0x2e>
      return HAL_BUSY;
 8003550:	2502      	movs	r5, #2
}
 8003552:	4628      	mov	r0, r5
 8003554:	b009      	add	sp, #36	; 0x24
 8003556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355a:	4606      	mov	r6, r0
 800355c:	e005      	b.n	800356a <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355e:	f7fe fe73 	bl	8002248 <HAL_GetTick>
 8003562:	1b80      	subs	r0, r0, r6
 8003564:	2819      	cmp	r0, #25
 8003566:	f200 80ca 	bhi.w	80036fe <HAL_I2C_Mem_Read+0x1d2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800356a:	6822      	ldr	r2, [r4, #0]
 800356c:	6995      	ldr	r5, [r2, #24]
 800356e:	43ed      	mvns	r5, r5
 8003570:	f015 0502 	ands.w	r5, r5, #2
 8003574:	d0f3      	beq.n	800355e <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 8003576:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d0e8      	beq.n	8003550 <HAL_I2C_Mem_Read+0x24>
 800357e:	2301      	movs	r3, #1
 8003580:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003584:	6813      	ldr	r3, [r2, #0]
 8003586:	07d9      	lsls	r1, r3, #31
 8003588:	d538      	bpl.n	80035fc <HAL_I2C_Mem_Read+0xd0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800358a:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800358e:	2540      	movs	r5, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003590:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003592:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003594:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003596:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800359a:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800359c:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035a0:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a4:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80035a6:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035aa:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80035ac:	9812      	ldr	r0, [sp, #72]	; 0x48
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ae:	f8df c320 	ldr.w	ip, [pc, #800]	; 80038d0 <HAL_I2C_Mem_Read+0x3a4>
    hi2c->pBuffPtr    = pData;
 80035b2:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035b4:	464a      	mov	r2, r9
 80035b6:	e9cd 7600 	strd	r7, r6, [sp]
 80035ba:	4641      	mov	r1, r8
    hi2c->XferSize    = hi2c->XferCount;
 80035bc:	8525      	strh	r5, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035be:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c0:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035c4:	f7ff fce0 	bl	8002f88 <I2C_RequestMemoryRead>
 80035c8:	4605      	mov	r5, r0
 80035ca:	2800      	cmp	r0, #0
 80035cc:	f040 80a4 	bne.w	8003718 <HAL_I2C_Mem_Read+0x1ec>
    if (hi2c->XferSize == 0U)
 80035d0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80035d2:	b9c2      	cbnz	r2, 8003606 <HAL_I2C_Mem_Read+0xda>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	9004      	str	r0, [sp, #16]
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	9204      	str	r2, [sp, #16]
 80035dc:	699a      	ldr	r2, [r3, #24]
 80035de:	9204      	str	r2, [sp, #16]
 80035e0:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ea:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80035ec:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80035ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80035fa:	e7aa      	b.n	8003552 <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 80035fc:	6813      	ldr	r3, [r2, #0]
 80035fe:	f043 0301 	orr.w	r3, r3, #1
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e7c1      	b.n	800358a <HAL_I2C_Mem_Read+0x5e>
    else if (hi2c->XferSize == 1U)
 8003606:	2a01      	cmp	r2, #1
 8003608:	f000 814f 	beq.w	80038aa <HAL_I2C_Mem_Read+0x37e>
    else if (hi2c->XferSize == 2U)
 800360c:	2a02      	cmp	r2, #2
 800360e:	f000 80d3 	beq.w	80037b8 <HAL_I2C_Mem_Read+0x28c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	6819      	ldr	r1, [r3, #0]
 8003616:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800361a:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800361c:	9007      	str	r0, [sp, #28]
 800361e:	6959      	ldr	r1, [r3, #20]
 8003620:	9107      	str	r1, [sp, #28]
 8003622:	6999      	ldr	r1, [r3, #24]
 8003624:	9107      	str	r1, [sp, #28]
 8003626:	9907      	ldr	r1, [sp, #28]
      if (hi2c->XferSize <= 3U)
 8003628:	2a03      	cmp	r2, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800362a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80038d4 <HAL_I2C_Mem_Read+0x3a8>
 800362e:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 80038d8 <HAL_I2C_Mem_Read+0x3ac>
      if (hi2c->XferSize <= 3U)
 8003632:	d832      	bhi.n	800369a <HAL_I2C_Mem_Read+0x16e>
        if (hi2c->XferSize == 1U)
 8003634:	2a01      	cmp	r2, #1
 8003636:	f000 80fe 	beq.w	8003836 <HAL_I2C_Mem_Read+0x30a>
        else if (hi2c->XferSize == 2U)
 800363a:	2a02      	cmp	r2, #2
 800363c:	d17c      	bne.n	8003738 <HAL_I2C_Mem_Read+0x20c>
 800363e:	1c79      	adds	r1, r7, #1
 8003640:	f040 80d2 	bne.w	80037e8 <HAL_I2C_Mem_Read+0x2bc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	0752      	lsls	r2, r2, #29
 8003648:	d5fc      	bpl.n	8003644 <HAL_I2C_Mem_Read+0x118>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800364a:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800364c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800364e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003656:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800365c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800365e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003660:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003662:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8003664:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003666:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003668:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800366a:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800366c:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800366e:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003670:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003676:	6912      	ldr	r2, [r2, #16]
 8003678:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800367a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800367c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 800367e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8003680:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8003682:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8003684:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8003686:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8003688:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 800368a:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 800368c:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800368e:	8522      	strh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 8003690:	2a00      	cmp	r2, #0
 8003692:	d0aa      	beq.n	80035ea <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8003694:	2a03      	cmp	r2, #3
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	d9cc      	bls.n	8003634 <HAL_I2C_Mem_Read+0x108>
 800369a:	b95f      	cbnz	r7, 80036b4 <HAL_I2C_Mem_Read+0x188>
 800369c:	e0b0      	b.n	8003800 <HAL_I2C_Mem_Read+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	06d0      	lsls	r0, r2, #27
 80036a2:	f100 80da 	bmi.w	800385a <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a6:	f7fe fdcf 	bl	8002248 <HAL_GetTick>
 80036aa:	1b80      	subs	r0, r0, r6
 80036ac:	4287      	cmp	r7, r0
 80036ae:	f0c0 80b0 	bcc.w	8003812 <HAL_I2C_Mem_Read+0x2e6>
 80036b2:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	0652      	lsls	r2, r2, #25
 80036b8:	d5f1      	bpl.n	800369e <HAL_I2C_Mem_Read+0x172>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036be:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80036c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036c2:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80036c8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80036ca:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036cc:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 80036ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80036d0:	3a01      	subs	r2, #1
 80036d2:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80036d4:	f103 0c01 	add.w	ip, r3, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036d8:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 80036da:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80036dc:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036e0:	d5d6      	bpl.n	8003690 <HAL_I2C_Mem_Read+0x164>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e2:	690a      	ldr	r2, [r1, #16]
 80036e4:	705a      	strb	r2, [r3, #1]
          hi2c->XferSize--;
 80036e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80036ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80036ec:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80036ee:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80036f0:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80036f2:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80036f4:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80036f6:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80036f8:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80036fa:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80036fc:	e7c8      	b.n	8003690 <HAL_I2C_Mem_Read+0x164>
        hi2c->State             = HAL_I2C_STATE_READY;
 80036fe:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003700:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003702:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003706:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800370a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800370c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003710:	f043 0320 	orr.w	r3, r3, #32
 8003714:	6423      	str	r3, [r4, #64]	; 0x40
 8003716:	e71b      	b.n	8003550 <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 8003718:	2501      	movs	r5, #1
}
 800371a:	4628      	mov	r0, r5
 800371c:	b009      	add	sp, #36	; 0x24
 800371e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	0752      	lsls	r2, r2, #29
 8003726:	d40c      	bmi.n	8003742 <HAL_I2C_Mem_Read+0x216>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003728:	f7fe fd8e 	bl	8002248 <HAL_GetTick>
 800372c:	1b80      	subs	r0, r0, r6
 800372e:	4287      	cmp	r7, r0
 8003730:	d36f      	bcc.n	8003812 <HAL_I2C_Mem_Read+0x2e6>
 8003732:	2f00      	cmp	r7, #0
 8003734:	d06d      	beq.n	8003812 <HAL_I2C_Mem_Read+0x2e6>
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	1c78      	adds	r0, r7, #1
 800373a:	d1f2      	bne.n	8003722 <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800373c:	695a      	ldr	r2, [r3, #20]
 800373e:	0751      	lsls	r1, r2, #29
 8003740:	d5fc      	bpl.n	800373c <HAL_I2C_Mem_Read+0x210>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800374a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374c:	6822      	ldr	r2, [r4, #0]
 800374e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003750:	6912      	ldr	r2, [r2, #16]
 8003752:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003754:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->XferCount--;
 8003758:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800375a:	08db      	lsrs	r3, r3, #3
 800375c:	fba8 1303 	umull	r1, r3, r8, r3
          hi2c->XferSize--;
 8003760:	8d20      	ldrh	r0, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003762:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003764:	0a1b      	lsrs	r3, r3, #8
          hi2c->XferCount--;
 8003766:	3a01      	subs	r2, #1
 8003768:	b292      	uxth	r2, r2
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800376a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 800376e:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8003770:	3801      	subs	r0, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003772:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->pBuffPtr++;
 8003776:	1c4a      	adds	r2, r1, #1
 8003778:	6262      	str	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800377a:	8520      	strh	r0, [r4, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800377c:	9303      	str	r3, [sp, #12]
 800377e:	e003      	b.n	8003788 <HAL_I2C_Mem_Read+0x25c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	0750      	lsls	r0, r2, #29
 8003786:	d47b      	bmi.n	8003880 <HAL_I2C_Mem_Read+0x354>
            count--;
 8003788:	9b03      	ldr	r3, [sp, #12]
 800378a:	3b01      	subs	r3, #1
 800378c:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 800378e:	9b03      	ldr	r3, [sp, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1f5      	bne.n	8003780 <HAL_I2C_Mem_Read+0x254>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003794:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003796:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80037a2:	f042 0220 	orr.w	r2, r2, #32
 80037a6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80037a8:	b662      	cpsie	i
              return HAL_ERROR;
 80037aa:	2501      	movs	r5, #1
}
 80037ac:	4628      	mov	r0, r5
              __HAL_UNLOCK(hi2c);
 80037ae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80037b2:	b009      	add	sp, #36	; 0x24
 80037b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b8:	6822      	ldr	r2, [r4, #0]
 80037ba:	6813      	ldr	r3, [r2, #0]
 80037bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037c0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037c2:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	9006      	str	r0, [sp, #24]
 80037c8:	695a      	ldr	r2, [r3, #20]
 80037ca:	9206      	str	r2, [sp, #24]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	9206      	str	r2, [sp, #24]
 80037d0:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037da:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80037dc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80037de:	2a00      	cmp	r2, #0
 80037e0:	f43f af03 	beq.w	80035ea <HAL_I2C_Mem_Read+0xbe>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	e71f      	b.n	8003628 <HAL_I2C_Mem_Read+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	075b      	lsls	r3, r3, #29
 80037ec:	f53f af2d 	bmi.w	800364a <HAL_I2C_Mem_Read+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f0:	f7fe fd2a 	bl	8002248 <HAL_GetTick>
 80037f4:	1b80      	subs	r0, r0, r6
 80037f6:	4287      	cmp	r7, r0
 80037f8:	d30b      	bcc.n	8003812 <HAL_I2C_Mem_Read+0x2e6>
 80037fa:	b157      	cbz	r7, 8003812 <HAL_I2C_Mem_Read+0x2e6>
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	e71e      	b.n	800363e <HAL_I2C_Mem_Read+0x112>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003800:	695a      	ldr	r2, [r3, #20]
 8003802:	0652      	lsls	r2, r2, #25
 8003804:	f53f af59 	bmi.w	80036ba <HAL_I2C_Mem_Read+0x18e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	06d1      	lsls	r1, r2, #27
 800380c:	d425      	bmi.n	800385a <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380e:	f7fe fd1b 	bl	8002248 <HAL_GetTick>
          return HAL_ERROR;
 8003812:	2501      	movs	r5, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003814:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003816:	2320      	movs	r3, #32
}
 8003818:	4628      	mov	r0, r5
        hi2c->PreviousState     = I2C_STATE_NONE;
 800381a:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800381c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003820:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003824:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003826:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800382a:	f043 0320 	orr.w	r3, r3, #32
 800382e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003830:	b009      	add	sp, #36	; 0x24
 8003832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003836:	b94f      	cbnz	r7, 800384c <HAL_I2C_Mem_Read+0x320>
 8003838:	e033      	b.n	80038a2 <HAL_I2C_Mem_Read+0x376>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	06d2      	lsls	r2, r2, #27
 800383e:	d40c      	bmi.n	800385a <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003840:	f7fe fd02 	bl	8002248 <HAL_GetTick>
 8003844:	1b80      	subs	r0, r0, r6
 8003846:	4287      	cmp	r7, r0
 8003848:	d3e3      	bcc.n	8003812 <HAL_I2C_Mem_Read+0x2e6>
 800384a:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800384c:	695a      	ldr	r2, [r3, #20]
 800384e:	0651      	lsls	r1, r2, #25
 8003850:	d5f3      	bpl.n	800383a <HAL_I2C_Mem_Read+0x30e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003852:	691a      	ldr	r2, [r3, #16]
 8003854:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003856:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003858:	e745      	b.n	80036e6 <HAL_I2C_Mem_Read+0x1ba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385a:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 800385e:	2501      	movs	r5, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003860:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8003862:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003864:	6158      	str	r0, [r3, #20]
}
 8003866:	4628      	mov	r0, r5
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003868:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003872:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003874:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003878:	6423      	str	r3, [r4, #64]	; 0x40
}
 800387a:	b009      	add	sp, #36	; 0x24
 800387c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003886:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	704b      	strb	r3, [r1, #1]
          hi2c->XferCount--;
 800388c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800388e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003890:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003892:	3b01      	subs	r3, #1
 8003894:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003896:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003898:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800389a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 800389c:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800389e:	8522      	strh	r2, [r4, #40]	; 0x28
 80038a0:	e6e6      	b.n	8003670 <HAL_I2C_Mem_Read+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	0650      	lsls	r0, r2, #25
 80038a6:	d5af      	bpl.n	8003808 <HAL_I2C_Mem_Read+0x2dc>
 80038a8:	e7d3      	b.n	8003852 <HAL_I2C_Mem_Read+0x326>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	6813      	ldr	r3, [r2, #0]
 80038ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038b4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	9005      	str	r0, [sp, #20]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	9205      	str	r2, [sp, #20]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	9205      	str	r2, [sp, #20]
 80038c2:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038cc:	b662      	cpsie	i
}
 80038ce:	e785      	b.n	80037dc <HAL_I2C_Mem_Read+0x2b0>
 80038d0:	ffff0000 	.word	0xffff0000
 80038d4:	20000004 	.word	0x20000004
 80038d8:	14f8b589 	.word	0x14f8b589

080038dc <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80038dc:	b318      	cbz	r0, 8003926 <HAL_IWDG_Init+0x4a>
{
 80038de:	b538      	push	{r3, r4, r5, lr}
 80038e0:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80038e2:	f64c 45cc 	movw	r5, #52428	; 0xcccc
  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80038e6:	e9d4 3100 	ldrd	r3, r1, [r4]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80038ea:	f245 5055 	movw	r0, #21845	; 0x5555
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80038ee:	68a2      	ldr	r2, [r4, #8]
  __HAL_IWDG_START(hiwdg);
 80038f0:	601d      	str	r5, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80038f2:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80038f4:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80038f6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80038f8:	f7fe fca6 	bl	8002248 <HAL_GetTick>
 80038fc:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	0791      	lsls	r1, r2, #30
 8003904:	d00a      	beq.n	800391c <HAL_IWDG_Init+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003906:	f7fe fc9f 	bl	8002248 <HAL_GetTick>
 800390a:	1b40      	subs	r0, r0, r5
 800390c:	2827      	cmp	r0, #39	; 0x27
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800390e:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003910:	d9f6      	bls.n	8003900 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	0792      	lsls	r2, r2, #30
 8003916:	d0f3      	beq.n	8003900 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 8003918:	2003      	movs	r0, #3
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);

  /* Return function status */
  return HAL_OK;
}
 800391a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800391c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 8003920:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003926:	2001      	movs	r0, #1
}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop

0800392c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800392c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003930:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8003932:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003934:	601a      	str	r2, [r3, #0]
}
 8003936:	4770      	bx	lr

08003938 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003938:	2800      	cmp	r0, #0
 800393a:	f000 81c3 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x38c>
{
 800393e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003942:	6803      	ldr	r3, [r0, #0]
 8003944:	4604      	mov	r4, r0
 8003946:	07dd      	lsls	r5, r3, #31
{
 8003948:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394a:	d535      	bpl.n	80039b8 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800394c:	49a6      	ldr	r1, [pc, #664]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 800394e:	684a      	ldr	r2, [r1, #4]
 8003950:	f002 020c 	and.w	r2, r2, #12
 8003954:	2a04      	cmp	r2, #4
 8003956:	f000 80ef 	beq.w	8003b38 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800395a:	684a      	ldr	r2, [r1, #4]
 800395c:	f002 020c 	and.w	r2, r2, #12
 8003960:	2a08      	cmp	r2, #8
 8003962:	f000 80e5 	beq.w	8003b30 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003966:	6863      	ldr	r3, [r4, #4]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d010      	beq.n	8003990 <HAL_RCC_OscConfig+0x58>
 800396e:	2b00      	cmp	r3, #0
 8003970:	f000 810d 	beq.w	8003b8e <HAL_RCC_OscConfig+0x256>
 8003974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003978:	f000 818f 	beq.w	8003c9a <HAL_RCC_OscConfig+0x362>
 800397c:	4b9a      	ldr	r3, [pc, #616]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800398c:	601a      	str	r2, [r3, #0]
 800398e:	e004      	b.n	800399a <HAL_RCC_OscConfig+0x62>
 8003990:	4a95      	ldr	r2, [pc, #596]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003998:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800399a:	f7fe fc55 	bl	8002248 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800399e:	4e92      	ldr	r6, [pc, #584]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80039a0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	e005      	b.n	80039b0 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039a4:	f7fe fc50 	bl	8002248 <HAL_GetTick>
 80039a8:	1b40      	subs	r0, r0, r5
 80039aa:	2864      	cmp	r0, #100	; 0x64
 80039ac:	f200 80eb 	bhi.w	8003b86 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b0:	6833      	ldr	r3, [r6, #0]
 80039b2:	039a      	lsls	r2, r3, #14
 80039b4:	d5f6      	bpl.n	80039a4 <HAL_RCC_OscConfig+0x6c>
 80039b6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b8:	079f      	lsls	r7, r3, #30
 80039ba:	d528      	bpl.n	8003a0e <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039bc:	4a8a      	ldr	r2, [pc, #552]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 80039be:	6851      	ldr	r1, [r2, #4]
 80039c0:	f011 0f0c 	tst.w	r1, #12
 80039c4:	f000 808e 	beq.w	8003ae4 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039c8:	6851      	ldr	r1, [r2, #4]
 80039ca:	f001 010c 	and.w	r1, r1, #12
 80039ce:	2908      	cmp	r1, #8
 80039d0:	f000 8084 	beq.w	8003adc <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8125 	beq.w	8003c26 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039dc:	2201      	movs	r2, #1
 80039de:	4b83      	ldr	r3, [pc, #524]	; (8003bec <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	4e81      	ldr	r6, [pc, #516]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 80039e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80039e4:	f7fe fc30 	bl	8002248 <HAL_GetTick>
 80039e8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ea:	e005      	b.n	80039f8 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ec:	f7fe fc2c 	bl	8002248 <HAL_GetTick>
 80039f0:	1b40      	subs	r0, r0, r5
 80039f2:	2802      	cmp	r0, #2
 80039f4:	f200 80c7 	bhi.w	8003b86 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f8:	6833      	ldr	r3, [r6, #0]
 80039fa:	0798      	lsls	r0, r3, #30
 80039fc:	d5f6      	bpl.n	80039ec <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	6833      	ldr	r3, [r6, #0]
 8003a00:	6962      	ldr	r2, [r4, #20]
 8003a02:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003a06:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003a0a:	6033      	str	r3, [r6, #0]
 8003a0c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	071a      	lsls	r2, r3, #28
 8003a10:	d41f      	bmi.n	8003a52 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a12:	075d      	lsls	r5, r3, #29
 8003a14:	d541      	bpl.n	8003a9a <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a16:	4b74      	ldr	r3, [pc, #464]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 8003a18:	69da      	ldr	r2, [r3, #28]
 8003a1a:	00d0      	lsls	r0, r2, #3
 8003a1c:	d57d      	bpl.n	8003b1a <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8003a1e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a20:	4b73      	ldr	r3, [pc, #460]	; (8003bf0 <HAL_RCC_OscConfig+0x2b8>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	05d1      	lsls	r1, r2, #23
 8003a26:	f140 809d 	bpl.w	8003b64 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a2a:	68e3      	ldr	r3, [r4, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f000 810b 	beq.w	8003c48 <HAL_RCC_OscConfig+0x310>
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 80c5 	beq.w	8003bc2 <HAL_RCC_OscConfig+0x28a>
 8003a38:	2b05      	cmp	r3, #5
 8003a3a:	4b6b      	ldr	r3, [pc, #428]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	f000 8139 	beq.w	8003cb4 <HAL_RCC_OscConfig+0x37c>
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	621a      	str	r2, [r3, #32]
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	f022 0204 	bic.w	r2, r2, #4
 8003a4e:	621a      	str	r2, [r3, #32]
 8003a50:	e0ff      	b.n	8003c52 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a52:	69a3      	ldr	r3, [r4, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d050      	beq.n	8003afa <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8003a58:	2201      	movs	r2, #1
 8003a5a:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a5c:	4e62      	ldr	r6, [pc, #392]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8003a5e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003a60:	f7fe fbf2 	bl	8002248 <HAL_GetTick>
 8003a64:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a66:	e005      	b.n	8003a74 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe fbee 	bl	8002248 <HAL_GetTick>
 8003a6c:	1b40      	subs	r0, r0, r5
 8003a6e:	2802      	cmp	r0, #2
 8003a70:	f200 8089 	bhi.w	8003b86 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a74:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003a76:	079b      	lsls	r3, r3, #30
 8003a78:	d5f6      	bpl.n	8003a68 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	; (8003bf8 <HAL_RCC_OscConfig+0x2c0>)
 8003a7c:	4a5f      	ldr	r2, [pc, #380]	; (8003bfc <HAL_RCC_OscConfig+0x2c4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	fba2 2303 	umull	r2, r3, r2, r3
 8003a84:	0a5b      	lsrs	r3, r3, #9
 8003a86:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003a88:	bf00      	nop
  }
  while (Delay --);
 8003a8a:	9b01      	ldr	r3, [sp, #4]
 8003a8c:	1e5a      	subs	r2, r3, #1
 8003a8e:	9201      	str	r2, [sp, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f9      	bne.n	8003a88 <HAL_RCC_OscConfig+0x150>
 8003a94:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a96:	075d      	lsls	r5, r3, #29
 8003a98:	d4bd      	bmi.n	8003a16 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a9a:	69e0      	ldr	r0, [r4, #28]
 8003a9c:	b1d0      	cbz	r0, 8003ad4 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9e:	4d52      	ldr	r5, [pc, #328]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 8003aa0:	686a      	ldr	r2, [r5, #4]
 8003aa2:	f002 020c 	and.w	r2, r2, #12
 8003aa6:	2a08      	cmp	r2, #8
 8003aa8:	f000 80e6 	beq.w	8003c78 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003aae:	f04f 0100 	mov.w	r1, #0
 8003ab2:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab4:	f000 8108 	beq.w	8003cc8 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8003ab8:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8003aba:	f7fe fbc5 	bl	8002248 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abe:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003ac0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac2:	e004      	b.n	8003ace <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fe fbc0 	bl	8002248 <HAL_GetTick>
 8003ac8:	1b40      	subs	r0, r0, r5
 8003aca:	2802      	cmp	r0, #2
 8003acc:	d85b      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	019b      	lsls	r3, r3, #6
 8003ad2:	d4f7      	bmi.n	8003ac4 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8003ad4:	2000      	movs	r0, #0
}
 8003ad6:	b002      	add	sp, #8
 8003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003adc:	6852      	ldr	r2, [r2, #4]
 8003ade:	03d6      	lsls	r6, r2, #15
 8003ae0:	f53f af78 	bmi.w	80039d4 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae4:	4a40      	ldr	r2, [pc, #256]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	0795      	lsls	r5, r2, #30
 8003aea:	d52f      	bpl.n	8003b4c <HAL_RCC_OscConfig+0x214>
 8003aec:	6922      	ldr	r2, [r4, #16]
 8003aee:	2a01      	cmp	r2, #1
 8003af0:	d02c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8003af2:	2001      	movs	r0, #1
}
 8003af4:	b002      	add	sp, #8
 8003af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003afa:	4a3e      	ldr	r2, [pc, #248]	; (8003bf4 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afc:	4e3a      	ldr	r6, [pc, #232]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8003afe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b00:	f7fe fba2 	bl	8002248 <HAL_GetTick>
 8003b04:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b06:	e004      	b.n	8003b12 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b08:	f7fe fb9e 	bl	8002248 <HAL_GetTick>
 8003b0c:	1b40      	subs	r0, r0, r5
 8003b0e:	2802      	cmp	r0, #2
 8003b10:	d839      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b12:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003b14:	079f      	lsls	r7, r3, #30
 8003b16:	d4f7      	bmi.n	8003b08 <HAL_RCC_OscConfig+0x1d0>
 8003b18:	e7bc      	b.n	8003a94 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1a:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003b1c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b22:	61da      	str	r2, [r3, #28]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	9300      	str	r3, [sp, #0]
 8003b2c:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8003b2e:	e777      	b.n	8003a20 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b30:	684a      	ldr	r2, [r1, #4]
 8003b32:	03d0      	lsls	r0, r2, #15
 8003b34:	f57f af17 	bpl.w	8003966 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b38:	4a2b      	ldr	r2, [pc, #172]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	0391      	lsls	r1, r2, #14
 8003b3e:	f57f af3b 	bpl.w	80039b8 <HAL_RCC_OscConfig+0x80>
 8003b42:	6862      	ldr	r2, [r4, #4]
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	f47f af37 	bne.w	80039b8 <HAL_RCC_OscConfig+0x80>
 8003b4a:	e7d2      	b.n	8003af2 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4926      	ldr	r1, [pc, #152]	; (8003be8 <HAL_RCC_OscConfig+0x2b0>)
 8003b4e:	6960      	ldr	r0, [r4, #20]
 8003b50:	680a      	ldr	r2, [r1, #0]
 8003b52:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003b56:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003b5a:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5c:	071a      	lsls	r2, r3, #28
 8003b5e:	f57f af58 	bpl.w	8003a12 <HAL_RCC_OscConfig+0xda>
 8003b62:	e776      	b.n	8003a52 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b64:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b66:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003b6e:	f7fe fb6b 	bl	8002248 <HAL_GetTick>
 8003b72:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	05da      	lsls	r2, r3, #23
 8003b78:	f53f af57 	bmi.w	8003a2a <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7c:	f7fe fb64 	bl	8002248 <HAL_GetTick>
 8003b80:	1b80      	subs	r0, r0, r6
 8003b82:	2864      	cmp	r0, #100	; 0x64
 8003b84:	d9f6      	bls.n	8003b74 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 8003b86:	2003      	movs	r0, #3
}
 8003b88:	b002      	add	sp, #8
 8003b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003b92:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003b96:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b98:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ba6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fb4e 	bl	8002248 <HAL_GetTick>
 8003bac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bae:	e004      	b.n	8003bba <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fb4a 	bl	8002248 <HAL_GetTick>
 8003bb4:	1b40      	subs	r0, r0, r5
 8003bb6:	2864      	cmp	r0, #100	; 0x64
 8003bb8:	d8e5      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bba:	6833      	ldr	r3, [r6, #0]
 8003bbc:	039b      	lsls	r3, r3, #14
 8003bbe:	d4f7      	bmi.n	8003bb0 <HAL_RCC_OscConfig+0x278>
 8003bc0:	e6f9      	b.n	80039b6 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bc6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003bca:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bcc:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	621a      	str	r2, [r3, #32]
 8003bd4:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bda:	f022 0204 	bic.w	r2, r2, #4
 8003bde:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8003be0:	f7fe fb32 	bl	8002248 <HAL_GetTick>
 8003be4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be6:	e012      	b.n	8003c0e <HAL_RCC_OscConfig+0x2d6>
 8003be8:	40021000 	.word	0x40021000
 8003bec:	42420000 	.word	0x42420000
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42420480 	.word	0x42420480
 8003bf8:	20000004 	.word	0x20000004
 8003bfc:	10624dd3 	.word	0x10624dd3
 8003c00:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c04:	f7fe fb20 	bl	8002248 <HAL_GetTick>
 8003c08:	1b80      	subs	r0, r0, r6
 8003c0a:	4540      	cmp	r0, r8
 8003c0c:	d8bb      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	0798      	lsls	r0, r3, #30
 8003c12:	d4f7      	bmi.n	8003c04 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8003c14:	2d00      	cmp	r5, #0
 8003c16:	f43f af40 	beq.w	8003a9a <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4a44      	ldr	r2, [pc, #272]	; (8003d2c <HAL_RCC_OscConfig+0x3f4>)
 8003c1c:	69d3      	ldr	r3, [r2, #28]
 8003c1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c22:	61d3      	str	r3, [r2, #28]
 8003c24:	e739      	b.n	8003a9a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003c26:	4a42      	ldr	r2, [pc, #264]	; (8003d30 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c28:	4e40      	ldr	r6, [pc, #256]	; (8003d2c <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8003c2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003c2c:	f7fe fb0c 	bl	8002248 <HAL_GetTick>
 8003c30:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c32:	e004      	b.n	8003c3e <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c34:	f7fe fb08 	bl	8002248 <HAL_GetTick>
 8003c38:	1b40      	subs	r0, r0, r5
 8003c3a:	2802      	cmp	r0, #2
 8003c3c:	d8a3      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	6833      	ldr	r3, [r6, #0]
 8003c40:	0799      	lsls	r1, r3, #30
 8003c42:	d4f7      	bmi.n	8003c34 <HAL_RCC_OscConfig+0x2fc>
 8003c44:	6823      	ldr	r3, [r4, #0]
 8003c46:	e6e2      	b.n	8003a0e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c48:	4a38      	ldr	r2, [pc, #224]	; (8003d2c <HAL_RCC_OscConfig+0x3f4>)
 8003c4a:	6a13      	ldr	r3, [r2, #32]
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8003c52:	f7fe faf9 	bl	8002248 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c56:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003c5a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	4f33      	ldr	r7, [pc, #204]	; (8003d2c <HAL_RCC_OscConfig+0x3f4>)
 8003c5e:	e004      	b.n	8003c6a <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c60:	f7fe faf2 	bl	8002248 <HAL_GetTick>
 8003c64:	1b80      	subs	r0, r0, r6
 8003c66:	4540      	cmp	r0, r8
 8003c68:	d88d      	bhi.n	8003b86 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	079b      	lsls	r3, r3, #30
 8003c6e:	d5f7      	bpl.n	8003c60 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8003c70:	2d00      	cmp	r5, #0
 8003c72:	f43f af12 	beq.w	8003a9a <HAL_RCC_OscConfig+0x162>
 8003c76:	e7d0      	b.n	8003c1a <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c78:	2801      	cmp	r0, #1
 8003c7a:	f43f af2c 	beq.w	8003ad6 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8003c7e:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c80:	6a22      	ldr	r2, [r4, #32]
 8003c82:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003c86:	4291      	cmp	r1, r2
 8003c88:	f47f af33 	bne.w	8003af2 <HAL_RCC_OscConfig+0x1ba>
 8003c8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c8e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003c92:	1a18      	subs	r0, r3, r0
 8003c94:	bf18      	it	ne
 8003c96:	2001      	movne	r0, #1
 8003c98:	e71d      	b.n	8003ad6 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c9e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	e672      	b.n	800399a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	f042 0204 	orr.w	r2, r2, #4
 8003cb8:	621a      	str	r2, [r3, #32]
 8003cba:	6a1a      	ldr	r2, [r3, #32]
 8003cbc:	f042 0201 	orr.w	r2, r2, #1
 8003cc0:	621a      	str	r2, [r3, #32]
 8003cc2:	e7c6      	b.n	8003c52 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8003cc4:	2001      	movs	r0, #1
}
 8003cc6:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8003cc8:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8003cca:	f7fe fabd 	bl	8002248 <HAL_GetTick>
 8003cce:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cd0:	e005      	b.n	8003cde <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fe fab9 	bl	8002248 <HAL_GetTick>
 8003cd6:	1b80      	subs	r0, r0, r6
 8003cd8:	2802      	cmp	r0, #2
 8003cda:	f63f af54 	bhi.w	8003b86 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cde:	682b      	ldr	r3, [r5, #0]
 8003ce0:	0199      	lsls	r1, r3, #6
 8003ce2:	d4f6      	bmi.n	8003cd2 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ce4:	6a23      	ldr	r3, [r4, #32]
 8003ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cec:	686a      	ldr	r2, [r5, #4]
 8003cee:	68a1      	ldr	r1, [r4, #8]
 8003cf0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003cf8:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfa:	4d0c      	ldr	r5, [pc, #48]	; (8003d2c <HAL_RCC_OscConfig+0x3f4>)
 8003cfc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003cfe:	686a      	ldr	r2, [r5, #4]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003d06:	490b      	ldr	r1, [pc, #44]	; (8003d34 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003d0c:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8003d0e:	f7fe fa9b 	bl	8002248 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d12:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003d14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d16:	e005      	b.n	8003d24 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d18:	f7fe fa96 	bl	8002248 <HAL_GetTick>
 8003d1c:	1b40      	subs	r0, r0, r5
 8003d1e:	2802      	cmp	r0, #2
 8003d20:	f63f af31 	bhi.w	8003b86 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	6823      	ldr	r3, [r4, #0]
 8003d26:	019a      	lsls	r2, r3, #6
 8003d28:	d5f6      	bpl.n	8003d18 <HAL_RCC_OscConfig+0x3e0>
 8003d2a:	e6d3      	b.n	8003ad4 <HAL_RCC_OscConfig+0x19c>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	42420000 	.word	0x42420000
 8003d34:	42420060 	.word	0x42420060

08003d38 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	f000 80af 	beq.w	8003e9c <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d3e:	4a5d      	ldr	r2, [pc, #372]	; (8003eb4 <HAL_RCC_ClockConfig+0x17c>)
{
 8003d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d44:	6813      	ldr	r3, [r2, #0]
 8003d46:	4604      	mov	r4, r0
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	428b      	cmp	r3, r1
 8003d4e:	460d      	mov	r5, r1
{
 8003d50:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d52:	d20d      	bcs.n	8003d70 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d54:	6813      	ldr	r3, [r2, #0]
 8003d56:	f023 0307 	bic.w	r3, r3, #7
 8003d5a:	430b      	orrs	r3, r1
 8003d5c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	428b      	cmp	r3, r1
 8003d66:	d003      	beq.n	8003d70 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8003d68:	2001      	movs	r0, #1
}
 8003d6a:	b006      	add	sp, #24
 8003d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d70:	6823      	ldr	r3, [r4, #0]
 8003d72:	0798      	lsls	r0, r3, #30
 8003d74:	d514      	bpl.n	8003da0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d76:	0759      	lsls	r1, r3, #29
 8003d78:	d504      	bpl.n	8003d84 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d7a:	494f      	ldr	r1, [pc, #316]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
 8003d7c:	684a      	ldr	r2, [r1, #4]
 8003d7e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003d82:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d84:	071a      	lsls	r2, r3, #28
 8003d86:	d504      	bpl.n	8003d92 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d88:	494b      	ldr	r1, [pc, #300]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
 8003d8a:	684a      	ldr	r2, [r1, #4]
 8003d8c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003d90:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d92:	4949      	ldr	r1, [pc, #292]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
 8003d94:	68a0      	ldr	r0, [r4, #8]
 8003d96:	684a      	ldr	r2, [r1, #4]
 8003d98:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d9c:	4302      	orrs	r2, r0
 8003d9e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da0:	07db      	lsls	r3, r3, #31
 8003da2:	d520      	bpl.n	8003de6 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da4:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da8:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dac:	d078      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dae:	2a02      	cmp	r2, #2
 8003db0:	d071      	beq.n	8003e96 <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db2:	0798      	lsls	r0, r3, #30
 8003db4:	d5d8      	bpl.n	8003d68 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db6:	4e40      	ldr	r6, [pc, #256]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dbc:	6873      	ldr	r3, [r6, #4]
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003dc6:	f7fe fa3f 	bl	8002248 <HAL_GetTick>
 8003dca:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dcc:	e004      	b.n	8003dd8 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dce:	f7fe fa3b 	bl	8002248 <HAL_GetTick>
 8003dd2:	1bc0      	subs	r0, r0, r7
 8003dd4:	4540      	cmp	r0, r8
 8003dd6:	d866      	bhi.n	8003ea6 <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd8:	6873      	ldr	r3, [r6, #4]
 8003dda:	6862      	ldr	r2, [r4, #4]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003de4:	d1f3      	bne.n	8003dce <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de6:	4a33      	ldr	r2, [pc, #204]	; (8003eb4 <HAL_RCC_ClockConfig+0x17c>)
 8003de8:	6813      	ldr	r3, [r2, #0]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	42ab      	cmp	r3, r5
 8003df0:	d909      	bls.n	8003e06 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	f023 0307 	bic.w	r3, r3, #7
 8003df8:	432b      	orrs	r3, r5
 8003dfa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfc:	6813      	ldr	r3, [r2, #0]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	42ab      	cmp	r3, r5
 8003e04:	d1b0      	bne.n	8003d68 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	0759      	lsls	r1, r3, #29
 8003e0a:	d506      	bpl.n	8003e1a <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	492a      	ldr	r1, [pc, #168]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
 8003e0e:	68e0      	ldr	r0, [r4, #12]
 8003e10:	684a      	ldr	r2, [r1, #4]
 8003e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e16:	4302      	orrs	r2, r0
 8003e18:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1a:	071a      	lsls	r2, r3, #28
 8003e1c:	d507      	bpl.n	8003e2e <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e1e:	4a26      	ldr	r2, [pc, #152]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
 8003e20:	6921      	ldr	r1, [r4, #16]
 8003e22:	6853      	ldr	r3, [r2, #4]
 8003e24:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003e28:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e2c:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e2e:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e32:	4b22      	ldr	r3, [pc, #136]	; (8003ebc <HAL_RCC_ClockConfig+0x184>)
 8003e34:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e36:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e3c:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8003e40:	491d      	ldr	r1, [pc, #116]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
 8003e42:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003e44:	f002 030c 	and.w	r3, r2, #12
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d011      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8003e4c:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_RCC_ClockConfig+0x180>)
 8003e50:	481c      	ldr	r0, [pc, #112]	; (8003ec4 <HAL_RCC_ClockConfig+0x18c>)
 8003e52:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003e54:	491c      	ldr	r1, [pc, #112]	; (8003ec8 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e56:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003e5a:	5c80      	ldrb	r0, [r0, r2]
 8003e5c:	4a1b      	ldr	r2, [pc, #108]	; (8003ecc <HAL_RCC_ClockConfig+0x194>)
 8003e5e:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003e60:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e62:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003e64:	f7fe f9ae 	bl	80021c4 <HAL_InitTick>
  return HAL_OK;
 8003e68:	2000      	movs	r0, #0
}
 8003e6a:	b006      	add	sp, #24
 8003e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e70:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003e74:	4423      	add	r3, r4
 8003e76:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e7a:	03d3      	lsls	r3, r2, #15
 8003e7c:	d515      	bpl.n	8003eaa <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e7e:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e82:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e86:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e8a:	4422      	add	r2, r4
 8003e8c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e90:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e94:	e7db      	b.n	8003e4e <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e96:	019e      	lsls	r6, r3, #6
 8003e98:	d48d      	bmi.n	8003db6 <HAL_RCC_ClockConfig+0x7e>
 8003e9a:	e765      	b.n	8003d68 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8003e9c:	2001      	movs	r0, #1
}
 8003e9e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ea0:	039f      	lsls	r7, r3, #14
 8003ea2:	d488      	bmi.n	8003db6 <HAL_RCC_ClockConfig+0x7e>
 8003ea4:	e760      	b.n	8003d68 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8003ea6:	2003      	movs	r0, #3
 8003ea8:	e75f      	b.n	8003d6a <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eaa:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCC_ClockConfig+0x198>)
 8003eac:	fb03 f300 	mul.w	r3, r3, r0
 8003eb0:	e7cd      	b.n	8003e4e <HAL_RCC_ClockConfig+0x116>
 8003eb2:	bf00      	nop
 8003eb4:	40022000 	.word	0x40022000
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	0800668c 	.word	0x0800668c
 8003ec0:	007a1200 	.word	0x007a1200
 8003ec4:	08006674 	.word	0x08006674
 8003ec8:	2000000c 	.word	0x2000000c
 8003ecc:	20000004 	.word	0x20000004
 8003ed0:	003d0900 	.word	0x003d0900

08003ed4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003ed6:	4905      	ldr	r1, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ed8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003edc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003ee0:	5ccb      	ldrb	r3, [r1, r3]
 8003ee2:	6810      	ldr	r0, [r2, #0]
}
 8003ee4:	40d8      	lsrs	r0, r3
 8003ee6:	4770      	bx	lr
 8003ee8:	40021000 	.word	0x40021000
 8003eec:	08006684 	.word	0x08006684
 8003ef0:	20000004 	.word	0x20000004

08003ef4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003ef6:	4905      	ldr	r1, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8003efa:	4a05      	ldr	r2, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003efc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003f00:	5ccb      	ldrb	r3, [r1, r3]
 8003f02:	6810      	ldr	r0, [r2, #0]
}
 8003f04:	40d8      	lsrs	r0, r3
 8003f06:	4770      	bx	lr
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	08006684 	.word	0x08006684
 8003f10:	20000004 	.word	0x20000004

08003f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f18:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f1a:	6800      	ldr	r0, [r0, #0]
{
 8003f1c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003f1e:	07c3      	lsls	r3, r0, #31
 8003f20:	d52a      	bpl.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x64>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f22:	4b39      	ldr	r3, [pc, #228]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003f24:	69da      	ldr	r2, [r3, #28]
 8003f26:	00d7      	lsls	r7, r2, #3
 8003f28:	d53d      	bpl.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	4b38      	ldr	r3, [pc, #224]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 8003f2c:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	05d6      	lsls	r6, r2, #23
 8003f32:	d546      	bpl.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f34:	4e34      	ldr	r6, [pc, #208]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003f36:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f38:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003f3c:	d00f      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003f3e:	6861      	ldr	r1, [r4, #4]
 8003f40:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d00b      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f48:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f4a:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f4c:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4e:	4a30      	ldr	r2, [pc, #192]	; (8004010 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f50:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f54:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f56:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f58:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f5a:	07d9      	lsls	r1, r3, #31
 8003f5c:	d445      	bmi.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xd6>
 8003f5e:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f60:	4a29      	ldr	r2, [pc, #164]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003f62:	6a13      	ldr	r3, [r2, #32]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f6c:	b11d      	cbz	r5, 8003f76 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6e:	69d3      	ldr	r3, [r2, #28]
 8003f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f74:	61d3      	str	r3, [r2, #28]
 8003f76:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f78:	0783      	lsls	r3, r0, #30
 8003f7a:	d506      	bpl.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f7c:	4922      	ldr	r1, [pc, #136]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003f7e:	68a3      	ldr	r3, [r4, #8]
 8003f80:	684a      	ldr	r2, [r1, #4]
 8003f82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003f86:	431a      	orrs	r2, r3
 8003f88:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f8a:	f010 0010 	ands.w	r0, r0, #16
 8003f8e:	d007      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f90:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f92:	4a1d      	ldr	r2, [pc, #116]	; (8004008 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8003f94:	68e1      	ldr	r1, [r4, #12]
 8003f96:	6853      	ldr	r3, [r2, #4]
 8003f98:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6053      	str	r3, [r2, #4]
}
 8003fa0:	b002      	add	sp, #8
 8003fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fa6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8003fa8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fae:	61da      	str	r2, [r3, #28]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	05d6      	lsls	r6, r2, #23
 8003fc0:	d4b8      	bmi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc2:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fc4:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003fcc:	f7fe f93c 	bl	8002248 <HAL_GetTick>
 8003fd0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	05d8      	lsls	r0, r3, #23
 8003fd6:	d4ad      	bmi.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd8:	f7fe f936 	bl	8002248 <HAL_GetTick>
 8003fdc:	1b83      	subs	r3, r0, r6
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d9f7      	bls.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 8003fe2:	2003      	movs	r0, #3
}
 8003fe4:	b002      	add	sp, #8
 8003fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003fea:	f7fe f92d 	bl	8002248 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fee:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003ff2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	e004      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff6:	f7fe f927 	bl	8002248 <HAL_GetTick>
 8003ffa:	1bc0      	subs	r0, r0, r7
 8003ffc:	4540      	cmp	r0, r8
 8003ffe:	d8f0      	bhi.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004000:	6a33      	ldr	r3, [r6, #32]
 8004002:	079a      	lsls	r2, r3, #30
 8004004:	d5f7      	bpl.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004006:	e7aa      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004008:	40021000 	.word	0x40021000
 800400c:	40007000 	.word	0x40007000
 8004010:	42420440 	.word	0x42420440

08004014 <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8004014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004018:	461d      	mov	r5, r3
 800401a:	4616      	mov	r6, r2
 800401c:	b082      	sub	sp, #8
 800401e:	460c      	mov	r4, r1
 8004020:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004022:	f7fe f911 	bl	8002248 <HAL_GetTick>
 8004026:	4435      	add	r5, r6
 8004028:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800402a:	f7fe f90d 	bl	8002248 <HAL_GetTick>
 800402e:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004030:	4b27      	ldr	r3, [pc, #156]	; (80040d0 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xbc>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8004038:	fb05 f303 	mul.w	r3, r5, r3
 800403c:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800403e:	1c73      	adds	r3, r6, #1
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	d107      	bne.n	8004054 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x40>
 8004044:	688b      	ldr	r3, [r1, #8]
 8004046:	ea34 0303 	bics.w	r3, r4, r3
 800404a:	d0fb      	beq.n	8004044 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 800404c:	2000      	movs	r0, #0
}
 800404e:	b002      	add	sp, #8
 8004050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004054:	688b      	ldr	r3, [r1, #8]
 8004056:	ea34 0303 	bics.w	r3, r4, r3
 800405a:	d1f7      	bne.n	800404c <SPI_WaitFlagStateUntilTimeout.constprop.1+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800405c:	f7fe f8f4 	bl	8002248 <HAL_GetTick>
 8004060:	eba0 0008 	sub.w	r0, r0, r8
 8004064:	42a8      	cmp	r0, r5
 8004066:	d208      	bcs.n	800407a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x66>
      if(count == 0U)
 8004068:	9a01      	ldr	r2, [sp, #4]
      count--;
 800406a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800406c:	2a00      	cmp	r2, #0
      count--;
 800406e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004072:	bf08      	it	eq
 8004074:	2500      	moveq	r5, #0
      count--;
 8004076:	9301      	str	r3, [sp, #4]
 8004078:	e7e1      	b.n	800403e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800407a:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004080:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004084:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004088:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408a:	d014      	beq.n	80040b6 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800408c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800408e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004092:	d007      	beq.n	80040a4 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8004094:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8004096:	2300      	movs	r3, #0
 8004098:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800409a:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800409e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 80040a2:	e7d4      	b.n	800404e <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
          SPI_RESET_CRC(hspi);
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e7ee      	b.n	8004094 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80040bc:	d002      	beq.n	80040c4 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80040c2:	d1e3      	bne.n	800408c <SPI_WaitFlagStateUntilTimeout.constprop.1+0x78>
          __HAL_SPI_DISABLE(hspi);
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	e7de      	b.n	800408c <SPI_WaitFlagStateUntilTimeout.constprop.1+0x78>
 80040ce:	bf00      	nop
 80040d0:	20000004 	.word	0x20000004

080040d4 <HAL_SPI_Init>:
  if (hspi == NULL)
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d055      	beq.n	8004184 <HAL_SPI_Init+0xb0>
{
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80040dc:	4604      	mov	r4, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d041      	beq.n	8004166 <HAL_SPI_Init+0x92>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e2:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ea:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040ee:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80040f0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 80040f4:	2900      	cmp	r1, #0
 80040f6:	d03c      	beq.n	8004172 <HAL_SPI_Init+0x9e>
 80040f8:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040fa:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 80040fe:	2702      	movs	r7, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8004100:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004102:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004104:	68e1      	ldr	r1, [r4, #12]
 8004106:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800410a:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800410e:	4303      	orrs	r3, r0
 8004110:	6920      	ldr	r0, [r4, #16]
 8004112:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8004116:	4038      	ands	r0, r7
 8004118:	430b      	orrs	r3, r1
 800411a:	6961      	ldr	r1, [r4, #20]
 800411c:	4303      	orrs	r3, r0
 800411e:	69a0      	ldr	r0, [r4, #24]
 8004120:	4031      	ands	r1, r6
 8004122:	430b      	orrs	r3, r1
 8004124:	f400 7100 	and.w	r1, r0, #512	; 0x200
 8004128:	430b      	orrs	r3, r1
 800412a:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 800412c:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004130:	6a27      	ldr	r7, [r4, #32]
 8004132:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8004136:	430b      	orrs	r3, r1
 8004138:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 800413c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800413e:	433b      	orrs	r3, r7
 8004140:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 8004142:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004144:	0c00      	lsrs	r0, r0, #16
 8004146:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 800414a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800414e:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004150:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004152:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004154:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 8004156:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800415c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800415e:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004160:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 8004164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004166:	6842      	ldr	r2, [r0, #4]
 8004168:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800416c:	d0bc      	beq.n	80040e8 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800416e:	61c3      	str	r3, [r0, #28]
 8004170:	e7ba      	b.n	80040e8 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 8004172:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8004176:	4620      	mov	r0, r4
 8004178:	f7fd fd48 	bl	8001c0c <HAL_SPI_MspInit>
 800417c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800417e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004182:	e7ba      	b.n	80040fa <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8004184:	2001      	movs	r0, #1
}
 8004186:	4770      	bx	lr

08004188 <HAL_SPI_Transmit>:
{
 8004188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800418c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800418e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8004192:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004194:	2801      	cmp	r0, #1
 8004196:	d071      	beq.n	800427c <HAL_SPI_Transmit+0xf4>
 8004198:	461d      	mov	r5, r3
 800419a:	2301      	movs	r3, #1
 800419c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80041a0:	4688      	mov	r8, r1
 80041a2:	4617      	mov	r7, r2
 80041a4:	f7fe f850 	bl	8002248 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80041a8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80041ac:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	b2d8      	uxtb	r0, r3
 80041b2:	d009      	beq.n	80041c8 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 80041b4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80041b6:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80041b8:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80041ba:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041be:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80041c2:	b002      	add	sp, #8
 80041c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 80041c8:	f1b8 0f00 	cmp.w	r8, #0
 80041cc:	d0f3      	beq.n	80041b6 <HAL_SPI_Transmit+0x2e>
 80041ce:	2f00      	cmp	r7, #0
 80041d0:	d0f1      	beq.n	80041b6 <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041d2:	2203      	movs	r2, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d4:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041d6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041da:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 80041dc:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041e2:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 80041e4:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041e8:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80041ea:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041ec:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041ee:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
 80041f2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80041f4:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 80041f6:	4603      	mov	r3, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f8:	d071      	beq.n	80042de <HAL_SPI_Transmit+0x156>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041fa:	6802      	ldr	r2, [r0, #0]
 80041fc:	0652      	lsls	r2, r2, #25
 80041fe:	d403      	bmi.n	8004208 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8004200:	6802      	ldr	r2, [r0, #0]
 8004202:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004206:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004208:	68e2      	ldr	r2, [r4, #12]
 800420a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800420e:	d039      	beq.n	8004284 <HAL_SPI_Transmit+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004210:	6863      	ldr	r3, [r4, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8085 	beq.w	8004322 <HAL_SPI_Transmit+0x19a>
 8004218:	2f01      	cmp	r7, #1
 800421a:	f000 8082 	beq.w	8004322 <HAL_SPI_Transmit+0x19a>
    while (hspi->TxXferCount > 0U)
 800421e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004220:	b29b      	uxth	r3, r3
 8004222:	b1a3      	cbz	r3, 800424e <HAL_SPI_Transmit+0xc6>
 8004224:	1c68      	adds	r0, r5, #1
 8004226:	d171      	bne.n	800430c <HAL_SPI_Transmit+0x184>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	0791      	lsls	r1, r2, #30
 800422e:	f140 8083 	bpl.w	8004338 <HAL_SPI_Transmit+0x1b0>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004232:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004238:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800423a:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800423c:	3a01      	subs	r2, #1
 800423e:	b292      	uxth	r2, r2
 8004240:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004242:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004244:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 8004246:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004248:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800424a:	2a00      	cmp	r2, #0
 800424c:	d1ec      	bne.n	8004228 <HAL_SPI_Transmit+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800424e:	4633      	mov	r3, r6
 8004250:	462a      	mov	r2, r5
 8004252:	2180      	movs	r1, #128	; 0x80
 8004254:	4620      	mov	r0, r4
 8004256:	f7ff fedd 	bl	8004014 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 800425a:	2800      	cmp	r0, #0
 800425c:	f040 808f 	bne.w	800437e <HAL_SPI_Transmit+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004260:	68a3      	ldr	r3, [r4, #8]
 8004262:	b933      	cbnz	r3, 8004272 <HAL_SPI_Transmit+0xea>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	68d3      	ldr	r3, [r2, #12]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	6893      	ldr	r3, [r2, #8]
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004272:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004274:	3800      	subs	r0, #0
 8004276:	bf18      	it	ne
 8004278:	2001      	movne	r0, #1
error:
 800427a:	e79c      	b.n	80041b6 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 800427c:	2002      	movs	r0, #2
}
 800427e:	b002      	add	sp, #8
 8004280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004284:	6862      	ldr	r2, [r4, #4]
 8004286:	2a00      	cmp	r2, #0
 8004288:	d176      	bne.n	8004378 <HAL_SPI_Transmit+0x1f0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800428a:	4641      	mov	r1, r8
 800428c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004290:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 8004292:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004294:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004296:	3a01      	subs	r2, #1
 8004298:	b292      	uxth	r2, r2
 800429a:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800429c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800429e:	b292      	uxth	r2, r2
 80042a0:	2a00      	cmp	r2, #0
 80042a2:	d0d4      	beq.n	800424e <HAL_SPI_Transmit+0xc6>
 80042a4:	1c6a      	adds	r2, r5, #1
 80042a6:	d15e      	bne.n	8004366 <HAL_SPI_Transmit+0x1de>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042a8:	6883      	ldr	r3, [r0, #8]
 80042aa:	079f      	lsls	r7, r3, #30
 80042ac:	d50f      	bpl.n	80042ce <HAL_SPI_Transmit+0x146>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042b0:	f832 3b02 	ldrh.w	r3, [r2], #2
 80042b4:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 80042b6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b8:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29b      	uxth	r3, r3
 80042be:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80042c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0c2      	beq.n	800424e <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042c8:	6883      	ldr	r3, [r0, #8]
 80042ca:	079f      	lsls	r7, r3, #30
 80042cc:	d4ef      	bmi.n	80042ae <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ce:	f7fd ffbb 	bl	8002248 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80042d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0b9      	beq.n	800424e <HAL_SPI_Transmit+0xc6>
 80042da:	6820      	ldr	r0, [r4, #0]
 80042dc:	e7e4      	b.n	80042a8 <HAL_SPI_Transmit+0x120>
    __HAL_SPI_DISABLE(hspi);
 80042de:	6802      	ldr	r2, [r0, #0]
 80042e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e4:	6002      	str	r2, [r0, #0]
    SPI_1LINE_TX(hspi);
 80042e6:	6802      	ldr	r2, [r0, #0]
 80042e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ec:	6002      	str	r2, [r0, #0]
 80042ee:	e784      	b.n	80041fa <HAL_SPI_Transmit+0x72>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80042f2:	7812      	ldrb	r2, [r2, #0]
 80042f4:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80042f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042f8:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042fe:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004300:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004302:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8004304:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0a0      	beq.n	800424e <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	0792      	lsls	r2, r2, #30
 8004312:	d4ed      	bmi.n	80042f0 <HAL_SPI_Transmit+0x168>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004314:	f7fd ff98 	bl	8002248 <HAL_GetTick>
 8004318:	1b80      	subs	r0, r0, r6
 800431a:	42a8      	cmp	r0, r5
 800431c:	d3f2      	bcc.n	8004304 <HAL_SPI_Transmit+0x17c>
          errorcode = HAL_TIMEOUT;
 800431e:	2003      	movs	r0, #3
 8004320:	e749      	b.n	80041b6 <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004322:	f898 3000 	ldrb.w	r3, [r8]
 8004326:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004328:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800432a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800432c:	3b01      	subs	r3, #1
 800432e:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004330:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 8004332:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004334:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004336:	e772      	b.n	800421e <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004338:	f7fd ff86 	bl	8002248 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800433c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f af71 	bne.w	8004228 <HAL_SPI_Transmit+0xa0>
 8004346:	e782      	b.n	800424e <HAL_SPI_Transmit+0xc6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004348:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800434a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800434e:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8004350:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004352:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004354:	3b01      	subs	r3, #1
 8004356:	b29b      	uxth	r3, r3
 8004358:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800435a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	f43f af75 	beq.w	800424e <HAL_SPI_Transmit+0xc6>
 8004364:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	0791      	lsls	r1, r2, #30
 800436a:	d4ed      	bmi.n	8004348 <HAL_SPI_Transmit+0x1c0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800436c:	f7fd ff6c 	bl	8002248 <HAL_GetTick>
 8004370:	1b80      	subs	r0, r0, r6
 8004372:	42a8      	cmp	r0, r5
 8004374:	d3f1      	bcc.n	800435a <HAL_SPI_Transmit+0x1d2>
 8004376:	e7d2      	b.n	800431e <HAL_SPI_Transmit+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004378:	2f01      	cmp	r7, #1
 800437a:	d18f      	bne.n	800429c <HAL_SPI_Transmit+0x114>
 800437c:	e785      	b.n	800428a <HAL_SPI_Transmit+0x102>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800437e:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004380:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004382:	4313      	orrs	r3, r2
 8004384:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004386:	6562      	str	r2, [r4, #84]	; 0x54
 8004388:	e76a      	b.n	8004260 <HAL_SPI_Transmit+0xd8>
 800438a:	bf00      	nop

0800438c <HAL_SPI_TransmitReceive>:
{
 800438c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004390:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004392:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8004396:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8004398:	2801      	cmp	r0, #1
 800439a:	f000 8096 	beq.w	80044ca <HAL_SPI_TransmitReceive+0x13e>
 800439e:	461f      	mov	r7, r3
 80043a0:	2301      	movs	r3, #1
 80043a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80043a6:	4691      	mov	r9, r2
 80043a8:	4688      	mov	r8, r1
 80043aa:	f7fd ff4d 	bl	8002248 <HAL_GetTick>
  tmp_state           = hspi->State;
 80043ae:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80043b2:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043b4:	2e01      	cmp	r6, #1
  tmp_mode            = hspi->Init.Mode;
 80043b6:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 80043b8:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043ba:	d011      	beq.n	80043e0 <HAL_SPI_TransmitReceive+0x54>
 80043bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043c0:	d009      	beq.n	80043d6 <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 80043c2:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80043c4:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 80043c6:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 80043c8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043cc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80043d0:	b003      	add	sp, #12
 80043d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80043d6:	68a1      	ldr	r1, [r4, #8]
 80043d8:	2900      	cmp	r1, #0
 80043da:	d1f2      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x36>
 80043dc:	2a04      	cmp	r2, #4
 80043de:	d1f0      	bne.n	80043c2 <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80043e0:	f1b8 0f00 	cmp.w	r8, #0
 80043e4:	d075      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x146>
 80043e6:	f1b9 0f00 	cmp.w	r9, #0
 80043ea:	d072      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x146>
 80043ec:	2f00      	cmp	r7, #0
 80043ee:	d070      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043f0:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043f4:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043f6:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043f8:	bf1c      	itt	ne
 80043fa:	2205      	movne	r2, #5
 80043fc:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004400:	2200      	movs	r2, #0
 8004402:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8004404:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8004406:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004408:	6801      	ldr	r1, [r0, #0]
  hspi->TxISR       = NULL;
 800440a:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800440e:	064a      	lsls	r2, r1, #25
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004410:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004414:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004416:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800441a:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800441c:	d403      	bmi.n	8004426 <HAL_SPI_TransmitReceive+0x9a>
    __HAL_SPI_ENABLE(hspi);
 800441e:	6802      	ldr	r2, [r0, #0]
 8004420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004424:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004426:	68e2      	ldr	r2, [r4, #12]
 8004428:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800442c:	f000 8089 	beq.w	8004542 <HAL_SPI_TransmitReceive+0x1b6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004430:	2b00      	cmp	r3, #0
 8004432:	d07b      	beq.n	800452c <HAL_SPI_TransmitReceive+0x1a0>
 8004434:	2f01      	cmp	r7, #1
 8004436:	d079      	beq.n	800452c <HAL_SPI_TransmitReceive+0x1a0>
 8004438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        txallowed = 1U;
 800443a:	2601      	movs	r6, #1
 800443c:	3301      	adds	r3, #1
 800443e:	d028      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x106>
 8004440:	e049      	b.n	80044d6 <HAL_SPI_TransmitReceive+0x14a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004442:	6822      	ldr	r2, [r4, #0]
 8004444:	6893      	ldr	r3, [r2, #8]
 8004446:	0799      	lsls	r1, r3, #30
 8004448:	d50f      	bpl.n	800446a <HAL_SPI_TransmitReceive+0xde>
 800444a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800444c:	b29b      	uxth	r3, r3
 800444e:	b163      	cbz	r3, 800446a <HAL_SPI_TransmitReceive+0xde>
 8004450:	b15e      	cbz	r6, 800446a <HAL_SPI_TransmitReceive+0xde>
        txallowed = 0U;
 8004452:	2600      	movs	r6, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004454:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800445a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800445c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800445e:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8004460:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8004462:	b29b      	uxth	r3, r3
 8004464:	6822      	ldr	r2, [r4, #0]
 8004466:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004468:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800446a:	6893      	ldr	r3, [r2, #8]
 800446c:	f013 0301 	ands.w	r3, r3, #1
 8004470:	d00d      	beq.n	800448e <HAL_SPI_TransmitReceive+0x102>
 8004472:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004474:	b289      	uxth	r1, r1
 8004476:	b151      	cbz	r1, 800448e <HAL_SPI_TransmitReceive+0x102>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004478:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 800447a:	461e      	mov	r6, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800447c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800447e:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8004480:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8004482:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004484:	3b01      	subs	r3, #1
 8004486:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8004488:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800448a:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800448c:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800448e:	f7fd fedb 	bl	8002248 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004492:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1d3      	bne.n	8004442 <HAL_SPI_TransmitReceive+0xb6>
 800449a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1cf      	bne.n	8004442 <HAL_SPI_TransmitReceive+0xb6>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044a2:	462b      	mov	r3, r5
 80044a4:	2180      	movs	r1, #128	; 0x80
 80044a6:	4620      	mov	r0, r4
 80044a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044aa:	f7ff fdb3 	bl	8004014 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 80044ae:	2800      	cmp	r0, #0
 80044b0:	f040 80c6 	bne.w	8004640 <HAL_SPI_TransmitReceive+0x2b4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80044b4:	68a3      	ldr	r3, [r4, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d184      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x38>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80044ba:	6823      	ldr	r3, [r4, #0]
 80044bc:	9001      	str	r0, [sp, #4]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	9201      	str	r2, [sp, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	9301      	str	r3, [sp, #4]
 80044c6:	9b01      	ldr	r3, [sp, #4]
 80044c8:	e77c      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 80044ca:	2002      	movs	r0, #2
}
 80044cc:	b003      	add	sp, #12
 80044ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
 80044d4:	e776      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044d8:	b29b      	uxth	r3, r3
 80044da:	b91b      	cbnz	r3, 80044e4 <HAL_SPI_TransmitReceive+0x158>
 80044dc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0de      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x116>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044e4:	6822      	ldr	r2, [r4, #0]
 80044e6:	6893      	ldr	r3, [r2, #8]
 80044e8:	079b      	lsls	r3, r3, #30
 80044ea:	d50f      	bpl.n	800450c <HAL_SPI_TransmitReceive+0x180>
 80044ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	b163      	cbz	r3, 800450c <HAL_SPI_TransmitReceive+0x180>
 80044f2:	b15e      	cbz	r6, 800450c <HAL_SPI_TransmitReceive+0x180>
        txallowed = 0U;
 80044f4:	2600      	movs	r6, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80044fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80044fe:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004500:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8004502:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8004504:	b29b      	uxth	r3, r3
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800450a:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800450c:	6893      	ldr	r3, [r2, #8]
 800450e:	f013 0301 	ands.w	r3, r3, #1
 8004512:	d003      	beq.n	800451c <HAL_SPI_TransmitReceive+0x190>
 8004514:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004516:	b289      	uxth	r1, r1
 8004518:	2900      	cmp	r1, #0
 800451a:	d150      	bne.n	80045be <HAL_SPI_TransmitReceive+0x232>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800451c:	f7fd fe94 	bl	8002248 <HAL_GetTick>
 8004520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004522:	1b40      	subs	r0, r0, r5
 8004524:	4298      	cmp	r0, r3
 8004526:	d3d6      	bcc.n	80044d6 <HAL_SPI_TransmitReceive+0x14a>
        errorcode = HAL_TIMEOUT;
 8004528:	2003      	movs	r0, #3
 800452a:	e74b      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x38>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800452c:	f898 3000 	ldrb.w	r3, [r8]
 8004530:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004532:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004534:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004536:	3b01      	subs	r3, #1
 8004538:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800453a:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 800453c:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800453e:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004540:	e77a      	b.n	8004438 <HAL_SPI_TransmitReceive+0xac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004542:	2b00      	cmp	r3, #0
 8004544:	d147      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x24a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004546:	4641      	mov	r1, r8
 8004548:	f831 3b02 	ldrh.w	r3, [r1], #2
 800454c:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800454e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004550:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004552:	3b01      	subs	r3, #1
 8004554:	b29b      	uxth	r3, r3
 8004556:	86e3      	strh	r3, [r4, #54]	; 0x36
 8004558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 800455a:	2601      	movs	r6, #1
 800455c:	3301      	adds	r3, #1
 800455e:	d025      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x220>
 8004560:	e03c      	b.n	80045dc <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004562:	6822      	ldr	r2, [r4, #0]
 8004564:	6893      	ldr	r3, [r2, #8]
 8004566:	079f      	lsls	r7, r3, #30
 8004568:	d50d      	bpl.n	8004586 <HAL_SPI_TransmitReceive+0x1fa>
 800456a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800456c:	b29b      	uxth	r3, r3
 800456e:	b153      	cbz	r3, 8004586 <HAL_SPI_TransmitReceive+0x1fa>
 8004570:	b14e      	cbz	r6, 8004586 <HAL_SPI_TransmitReceive+0x1fa>
        txallowed = 0U;
 8004572:	2600      	movs	r6, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004574:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004576:	f831 3b02 	ldrh.w	r3, [r1], #2
 800457a:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 800457c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800457e:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004580:	3b01      	subs	r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004586:	6893      	ldr	r3, [r2, #8]
 8004588:	f013 0301 	ands.w	r3, r3, #1
 800458c:	d00c      	beq.n	80045a8 <HAL_SPI_TransmitReceive+0x21c>
 800458e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004590:	b289      	uxth	r1, r1
 8004592:	b149      	cbz	r1, 80045a8 <HAL_SPI_TransmitReceive+0x21c>
        txallowed = 1U;
 8004594:	461e      	mov	r6, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004596:	68d3      	ldr	r3, [r2, #12]
 8004598:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800459a:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800459e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045a0:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045a8:	f7fd fe4e 	bl	8002248 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1d6      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x1d6>
 80045b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1d2      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x1d6>
 80045bc:	e771      	b.n	80044a2 <HAL_SPI_TransmitReceive+0x116>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045be:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 80045c0:	461e      	mov	r6, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80045c4:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80045c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80045c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 80045ce:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 80045d0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80045d2:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 80045d4:	e7a2      	b.n	800451c <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d6:	2f01      	cmp	r7, #1
 80045d8:	d1be      	bne.n	8004558 <HAL_SPI_TransmitReceive+0x1cc>
 80045da:	e7b4      	b.n	8004546 <HAL_SPI_TransmitReceive+0x1ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	b923      	cbnz	r3, 80045ec <HAL_SPI_TransmitReceive+0x260>
 80045e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f43f af5b 	beq.w	80044a2 <HAL_SPI_TransmitReceive+0x116>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	6893      	ldr	r3, [r2, #8]
 80045f0:	0798      	lsls	r0, r3, #30
 80045f2:	d50d      	bpl.n	8004610 <HAL_SPI_TransmitReceive+0x284>
 80045f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	b153      	cbz	r3, 8004610 <HAL_SPI_TransmitReceive+0x284>
 80045fa:	b14e      	cbz	r6, 8004610 <HAL_SPI_TransmitReceive+0x284>
        txallowed = 0U;
 80045fc:	2600      	movs	r6, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004600:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004604:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8004606:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004608:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800460a:	3b01      	subs	r3, #1
 800460c:	b29b      	uxth	r3, r3
 800460e:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004610:	6893      	ldr	r3, [r2, #8]
 8004612:	f013 0301 	ands.w	r3, r3, #1
 8004616:	d00c      	beq.n	8004632 <HAL_SPI_TransmitReceive+0x2a6>
 8004618:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800461a:	b289      	uxth	r1, r1
 800461c:	b149      	cbz	r1, 8004632 <HAL_SPI_TransmitReceive+0x2a6>
        txallowed = 1U;
 800461e:	461e      	mov	r6, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004620:	68d3      	ldr	r3, [r2, #12]
 8004622:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004624:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8004628:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800462a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800462c:	3b01      	subs	r3, #1
 800462e:	b29b      	uxth	r3, r3
 8004630:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004632:	f7fd fe09 	bl	8002248 <HAL_GetTick>
 8004636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004638:	1b40      	subs	r0, r0, r5
 800463a:	4298      	cmp	r0, r3
 800463c:	d3ce      	bcc.n	80045dc <HAL_SPI_TransmitReceive+0x250>
 800463e:	e773      	b.n	8004528 <HAL_SPI_TransmitReceive+0x19c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004640:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004642:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004644:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004646:	4313      	orrs	r3, r2
 8004648:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800464a:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 800464c:	e6ba      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x38>
 800464e:	bf00      	nop

08004650 <HAL_SPI_ErrorCallback>:
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop

08004654 <HAL_SPI_IRQHandler>:
{
 8004654:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8004656:	6802      	ldr	r2, [r0, #0]
{
 8004658:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800465a:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800465c:	6893      	ldr	r3, [r2, #8]
{
 800465e:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004660:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004664:	f3c3 1580 	ubfx	r5, r3, #6, #1
 8004668:	d105      	bne.n	8004676 <HAL_SPI_IRQHandler+0x22>
 800466a:	f013 0f01 	tst.w	r3, #1
 800466e:	d002      	beq.n	8004676 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004670:	f011 0f40 	tst.w	r1, #64	; 0x40
 8004674:	d159      	bne.n	800472a <HAL_SPI_IRQHandler+0xd6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004676:	0798      	lsls	r0, r3, #30
 8004678:	d501      	bpl.n	800467e <HAL_SPI_IRQHandler+0x2a>
 800467a:	0608      	lsls	r0, r1, #24
 800467c:	d44f      	bmi.n	800471e <HAL_SPI_IRQHandler+0xca>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800467e:	f3c3 1040 	ubfx	r0, r3, #5, #1
 8004682:	069b      	lsls	r3, r3, #26
 8004684:	d510      	bpl.n	80046a8 <HAL_SPI_IRQHandler+0x54>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004686:	0688      	lsls	r0, r1, #26
 8004688:	d50c      	bpl.n	80046a4 <HAL_SPI_IRQHandler+0x50>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800468a:	2d00      	cmp	r5, #0
 800468c:	d05a      	beq.n	8004744 <HAL_SPI_IRQHandler+0xf0>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800468e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004692:	2b03      	cmp	r3, #3
 8004694:	d14b      	bne.n	800472e <HAL_SPI_IRQHandler+0xda>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004696:	2300      	movs	r3, #0
 8004698:	9302      	str	r3, [sp, #8]
 800469a:	68d3      	ldr	r3, [r2, #12]
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	6893      	ldr	r3, [r2, #8]
 80046a0:	9302      	str	r3, [sp, #8]
 80046a2:	9b02      	ldr	r3, [sp, #8]
}
 80046a4:	b005      	add	sp, #20
 80046a6:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80046a8:	2d00      	cmp	r5, #0
 80046aa:	d0fb      	beq.n	80046a4 <HAL_SPI_IRQHandler+0x50>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046ac:	068b      	lsls	r3, r1, #26
 80046ae:	d5f9      	bpl.n	80046a4 <HAL_SPI_IRQHandler+0x50>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046b0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d0ee      	beq.n	8004696 <HAL_SPI_IRQHandler+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046ba:	f043 0304 	orr.w	r3, r3, #4
 80046be:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046c0:	9001      	str	r0, [sp, #4]
 80046c2:	68d3      	ldr	r3, [r2, #12]
 80046c4:	9301      	str	r3, [sp, #4]
 80046c6:	6893      	ldr	r3, [r2, #8]
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	9b01      	ldr	r3, [sp, #4]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0e8      	beq.n	80046a4 <HAL_SPI_IRQHandler+0x50>
      hspi->State = HAL_SPI_STATE_READY;
 80046d2:	2001      	movs	r0, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046d4:	6853      	ldr	r3, [r2, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80046d6:	0789      	lsls	r1, r1, #30
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80046d8:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80046dc:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80046de:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80046e2:	d03d      	beq.n	8004760 <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80046e4:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80046e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 80046ee:	b140      	cbz	r0, 8004702 <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80046f0:	4b1d      	ldr	r3, [pc, #116]	; (8004768 <HAL_SPI_IRQHandler+0x114>)
 80046f2:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80046f4:	f7fe f91c 	bl	8002930 <HAL_DMA_Abort_IT>
 80046f8:	b118      	cbz	r0, 8004702 <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80046fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004700:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004702:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004704:	2800      	cmp	r0, #0
 8004706:	d0cd      	beq.n	80046a4 <HAL_SPI_IRQHandler+0x50>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004708:	4b17      	ldr	r3, [pc, #92]	; (8004768 <HAL_SPI_IRQHandler+0x114>)
 800470a:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800470c:	f7fe f910 	bl	8002930 <HAL_DMA_Abort_IT>
 8004710:	2800      	cmp	r0, #0
 8004712:	d0c7      	beq.n	80046a4 <HAL_SPI_IRQHandler+0x50>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004714:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471a:	6563      	str	r3, [r4, #84]	; 0x54
 800471c:	e7c2      	b.n	80046a4 <HAL_SPI_IRQHandler+0x50>
    hspi->TxISR(hspi);
 800471e:	4620      	mov	r0, r4
 8004720:	6c63      	ldr	r3, [r4, #68]	; 0x44
}
 8004722:	b005      	add	sp, #20
 8004724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 8004728:	4718      	bx	r3
    hspi->RxISR(hspi);
 800472a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800472c:	e7f9      	b.n	8004722 <HAL_SPI_IRQHandler+0xce>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800472e:	2000      	movs	r0, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004730:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004732:	f043 0304 	orr.w	r3, r3, #4
 8004736:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004738:	9001      	str	r0, [sp, #4]
 800473a:	68d3      	ldr	r3, [r2, #12]
 800473c:	9301      	str	r3, [sp, #4]
 800473e:	6893      	ldr	r3, [r2, #8]
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	9b01      	ldr	r3, [sp, #4]
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004744:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004746:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800474e:	9003      	str	r0, [sp, #12]
 8004750:	6893      	ldr	r3, [r2, #8]
 8004752:	9303      	str	r3, [sp, #12]
 8004754:	6813      	ldr	r3, [r2, #0]
 8004756:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	9b03      	ldr	r3, [sp, #12]
 800475e:	e7b5      	b.n	80046cc <HAL_SPI_IRQHandler+0x78>
        HAL_SPI_ErrorCallback(hspi);
 8004760:	4620      	mov	r0, r4
 8004762:	f7ff ff75 	bl	8004650 <HAL_SPI_ErrorCallback>
 8004766:	e79d      	b.n	80046a4 <HAL_SPI_IRQHandler+0x50>
 8004768:	0800476d 	.word	0x0800476d

0800476c <SPI_DMAAbortOnError>:
{
 800476c:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 800476e:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004770:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 8004772:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004774:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 8004776:	f7ff ff6b 	bl	8004650 <HAL_SPI_ErrorCallback>
}
 800477a:	bd08      	pop	{r3, pc}

0800477c <HAL_SPI_GetState>:
  return hspi->State;
 800477c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop

08004784 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	2800      	cmp	r0, #0
 8004786:	d05d      	beq.n	8004844 <HAL_TIM_PWM_Init+0xc0>
{
 8004788:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800478e:	4604      	mov	r4, r0
 8004790:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004794:	2b00      	cmp	r3, #0
 8004796:	d03c      	beq.n	8004812 <HAL_TIM_PWM_Init+0x8e>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	2302      	movs	r3, #2

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800479a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479c:	492a      	ldr	r1, [pc, #168]	; (8004848 <HAL_TIM_PWM_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800479e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a2:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80047a4:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a6:	d039      	beq.n	800481c <HAL_TIM_PWM_Init+0x98>
 80047a8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80047ac:	d028      	beq.n	8004800 <HAL_TIM_PWM_Init+0x7c>
 80047ae:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80047b2:	428a      	cmp	r2, r1
 80047b4:	d024      	beq.n	8004800 <HAL_TIM_PWM_Init+0x7c>
 80047b6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80047ba:	428a      	cmp	r2, r1
 80047bc:	d020      	beq.n	8004800 <HAL_TIM_PWM_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047be:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c0:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c2:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047c8:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80047ca:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047cc:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80047ce:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047d0:	2301      	movs	r3, #1
 80047d2:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80047dc:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80047e0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80047e4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80047f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80047fc:	2000      	movs	r0, #0
}
 80047fe:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8004800:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004806:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004808:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800480a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480e:	430b      	orrs	r3, r1
 8004810:	e7d5      	b.n	80047be <HAL_TIM_PWM_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8004812:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004816:	f7fd fa63 	bl	8001ce0 <HAL_TIM_PWM_MspInit>
 800481a:	e7bd      	b.n	8004798 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800481c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004822:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004824:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800482a:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800482c:	69a1      	ldr	r1, [r4, #24]
 800482e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004832:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004834:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800483e:	6963      	ldr	r3, [r4, #20]
 8004840:	6313      	str	r3, [r2, #48]	; 0x30
 8004842:	e7c5      	b.n	80047d0 <HAL_TIM_PWM_Init+0x4c>
    return HAL_ERROR;
 8004844:	2001      	movs	r0, #1
}
 8004846:	4770      	bx	lr
 8004848:	40012c00 	.word	0x40012c00

0800484c <HAL_TIM_PWM_Start_DMA>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	4605      	mov	r5, r0
 8004850:	460c      	mov	r4, r1
 8004852:	2900      	cmp	r1, #0
 8004854:	d14c      	bne.n	80048f0 <HAL_TIM_PWM_Start_DMA+0xa4>
 8004856:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 800485a:	2902      	cmp	r1, #2
 800485c:	b2c8      	uxtb	r0, r1
 800485e:	d046      	beq.n	80048ee <HAL_TIM_PWM_Start_DMA+0xa2>
 8004860:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
 8004864:	f1a0 0001 	sub.w	r0, r0, #1
 8004868:	fab0 f080 	clz	r0, r0
 800486c:	0940      	lsrs	r0, r0, #5
 800486e:	2800      	cmp	r0, #0
 8004870:	d050      	beq.n	8004914 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004872:	2a00      	cmp	r2, #0
 8004874:	f000 8083 	beq.w	800497e <HAL_TIM_PWM_Start_DMA+0x132>
 8004878:	2c00      	cmp	r4, #0
 800487a:	d14d      	bne.n	8004918 <HAL_TIM_PWM_Start_DMA+0xcc>
 800487c:	2102      	movs	r1, #2
 800487e:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
 8004882:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004884:	4e6e      	ldr	r6, [pc, #440]	; (8004a40 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8004886:	4611      	mov	r1, r2
 8004888:	4f6e      	ldr	r7, [pc, #440]	; (8004a44 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 800488a:	682a      	ldr	r2, [r5, #0]
 800488c:	6286      	str	r6, [r0, #40]	; 0x28
 800488e:	4e6e      	ldr	r6, [pc, #440]	; (8004a48 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8004890:	62c7      	str	r7, [r0, #44]	; 0x2c
 8004892:	6306      	str	r6, [r0, #48]	; 0x30
 8004894:	3234      	adds	r2, #52	; 0x34
 8004896:	f7fd ffe7 	bl	8002868 <HAL_DMA_Start_IT>
 800489a:	2800      	cmp	r0, #0
 800489c:	d13a      	bne.n	8004914 <HAL_TIM_PWM_Start_DMA+0xc8>
 800489e:	682b      	ldr	r3, [r5, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a6:	60da      	str	r2, [r3, #12]
 80048a8:	e000      	b.n	80048ac <HAL_TIM_PWM_Start_DMA+0x60>
 80048aa:	682b      	ldr	r3, [r5, #0]
 80048ac:	2101      	movs	r1, #1
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	f004 041f 	and.w	r4, r4, #31
 80048b4:	fa01 f404 	lsl.w	r4, r1, r4
 80048b8:	ea22 0204 	bic.w	r2, r2, r4
 80048bc:	621a      	str	r2, [r3, #32]
 80048be:	6a19      	ldr	r1, [r3, #32]
 80048c0:	4a62      	ldr	r2, [pc, #392]	; (8004a4c <HAL_TIM_PWM_Start_DMA+0x200>)
 80048c2:	430c      	orrs	r4, r1
 80048c4:	4293      	cmp	r3, r2
 80048c6:	621c      	str	r4, [r3, #32]
 80048c8:	f000 8088 	beq.w	80049dc <HAL_TIM_PWM_Start_DMA+0x190>
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	f000 8088 	beq.w	80049e4 <HAL_TIM_PWM_Start_DMA+0x198>
 80048d4:	4a5e      	ldr	r2, [pc, #376]	; (8004a50 <HAL_TIM_PWM_Start_DMA+0x204>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f000 8084 	beq.w	80049e4 <HAL_TIM_PWM_Start_DMA+0x198>
 80048dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d07f      	beq.n	80049e4 <HAL_TIM_PWM_Start_DMA+0x198>
 80048e4:	2000      	movs	r0, #0
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048f0:	2904      	cmp	r1, #4
 80048f2:	d037      	beq.n	8004964 <HAL_TIM_PWM_Start_DMA+0x118>
 80048f4:	2908      	cmp	r1, #8
 80048f6:	d07d      	beq.n	80049f4 <HAL_TIM_PWM_Start_DMA+0x1a8>
 80048f8:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80048fc:	2902      	cmp	r1, #2
 80048fe:	b2c8      	uxtb	r0, r1
 8004900:	d0f5      	beq.n	80048ee <HAL_TIM_PWM_Start_DMA+0xa2>
 8004902:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
 8004906:	f1a0 0001 	sub.w	r0, r0, #1
 800490a:	fab0 f080 	clz	r0, r0
 800490e:	0940      	lsrs	r0, r0, #5
 8004910:	2800      	cmp	r0, #0
 8004912:	d1ae      	bne.n	8004872 <HAL_TIM_PWM_Start_DMA+0x26>
 8004914:	2001      	movs	r0, #1
 8004916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004918:	2c04      	cmp	r4, #4
 800491a:	d034      	beq.n	8004986 <HAL_TIM_PWM_Start_DMA+0x13a>
 800491c:	2c08      	cmp	r4, #8
 800491e:	d077      	beq.n	8004a10 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8004920:	2102      	movs	r1, #2
 8004922:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
 8004926:	2c0c      	cmp	r4, #12
 8004928:	d8bf      	bhi.n	80048aa <HAL_TIM_PWM_Start_DMA+0x5e>
 800492a:	a101      	add	r1, pc, #4	; (adr r1, 8004930 <HAL_TIM_PWM_Start_DMA+0xe4>)
 800492c:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
 8004930:	08004883 	.word	0x08004883
 8004934:	080048ab 	.word	0x080048ab
 8004938:	080048ab 	.word	0x080048ab
 800493c:	080048ab 	.word	0x080048ab
 8004940:	0800498d 	.word	0x0800498d
 8004944:	080048ab 	.word	0x080048ab
 8004948:	080048ab 	.word	0x080048ab
 800494c:	080048ab 	.word	0x080048ab
 8004950:	080048ab 	.word	0x080048ab
 8004954:	080048ab 	.word	0x080048ab
 8004958:	080048ab 	.word	0x080048ab
 800495c:	080048ab 	.word	0x080048ab
 8004960:	080049b5 	.word	0x080049b5
 8004964:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
 8004968:	2902      	cmp	r1, #2
 800496a:	b2c8      	uxtb	r0, r1
 800496c:	d0bf      	beq.n	80048ee <HAL_TIM_PWM_Start_DMA+0xa2>
 800496e:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
 8004972:	f1a0 0001 	sub.w	r0, r0, #1
 8004976:	fab0 f080 	clz	r0, r0
 800497a:	0940      	lsrs	r0, r0, #5
 800497c:	e777      	b.n	800486e <HAL_TIM_PWM_Start_DMA+0x22>
 800497e:	2b00      	cmp	r3, #0
 8004980:	f43f af7a 	beq.w	8004878 <HAL_TIM_PWM_Start_DMA+0x2c>
 8004984:	e7c6      	b.n	8004914 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004986:	2102      	movs	r1, #2
 8004988:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
 800498c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800498e:	4e2c      	ldr	r6, [pc, #176]	; (8004a40 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8004990:	4611      	mov	r1, r2
 8004992:	4f2c      	ldr	r7, [pc, #176]	; (8004a44 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 8004994:	682a      	ldr	r2, [r5, #0]
 8004996:	6286      	str	r6, [r0, #40]	; 0x28
 8004998:	4e2b      	ldr	r6, [pc, #172]	; (8004a48 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 800499a:	62c7      	str	r7, [r0, #44]	; 0x2c
 800499c:	6306      	str	r6, [r0, #48]	; 0x30
 800499e:	3238      	adds	r2, #56	; 0x38
 80049a0:	f7fd ff62 	bl	8002868 <HAL_DMA_Start_IT>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d1b5      	bne.n	8004914 <HAL_TIM_PWM_Start_DMA+0xc8>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b0:	60da      	str	r2, [r3, #12]
 80049b2:	e77b      	b.n	80048ac <HAL_TIM_PWM_Start_DMA+0x60>
 80049b4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80049b6:	4e22      	ldr	r6, [pc, #136]	; (8004a40 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 80049b8:	4611      	mov	r1, r2
 80049ba:	4f22      	ldr	r7, [pc, #136]	; (8004a44 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 80049bc:	682a      	ldr	r2, [r5, #0]
 80049be:	6286      	str	r6, [r0, #40]	; 0x28
 80049c0:	4e21      	ldr	r6, [pc, #132]	; (8004a48 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 80049c2:	62c7      	str	r7, [r0, #44]	; 0x2c
 80049c4:	6306      	str	r6, [r0, #48]	; 0x30
 80049c6:	3240      	adds	r2, #64	; 0x40
 80049c8:	f7fd ff4e 	bl	8002868 <HAL_DMA_Start_IT>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d1a1      	bne.n	8004914 <HAL_TIM_PWM_Start_DMA+0xc8>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049d8:	60da      	str	r2, [r3, #12]
 80049da:	e767      	b.n	80048ac <HAL_TIM_PWM_Start_DMA+0x60>
 80049dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049e2:	645a      	str	r2, [r3, #68]	; 0x44
 80049e4:	689a      	ldr	r2, [r3, #8]
 80049e6:	f002 0207 	and.w	r2, r2, #7
 80049ea:	2a06      	cmp	r2, #6
 80049ec:	f47f af7a 	bne.w	80048e4 <HAL_TIM_PWM_Start_DMA+0x98>
 80049f0:	2000      	movs	r0, #0
 80049f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049f4:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
 80049f8:	2902      	cmp	r1, #2
 80049fa:	b2c8      	uxtb	r0, r1
 80049fc:	f43f af77 	beq.w	80048ee <HAL_TIM_PWM_Start_DMA+0xa2>
 8004a00:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8004a04:	f1a0 0001 	sub.w	r0, r0, #1
 8004a08:	fab0 f080 	clz	r0, r0
 8004a0c:	0940      	lsrs	r0, r0, #5
 8004a0e:	e72e      	b.n	800486e <HAL_TIM_PWM_Start_DMA+0x22>
 8004a10:	2702      	movs	r7, #2
 8004a12:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004a14:	4e0a      	ldr	r6, [pc, #40]	; (8004a40 <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8004a16:	4611      	mov	r1, r2
 8004a18:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 8004a1a:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
 8004a1e:	6286      	str	r6, [r0, #40]	; 0x28
 8004a20:	62c2      	str	r2, [r0, #44]	; 0x2c
 8004a22:	4e09      	ldr	r6, [pc, #36]	; (8004a48 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8004a24:	682a      	ldr	r2, [r5, #0]
 8004a26:	6306      	str	r6, [r0, #48]	; 0x30
 8004a28:	323c      	adds	r2, #60	; 0x3c
 8004a2a:	f7fd ff1d 	bl	8002868 <HAL_DMA_Start_IT>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	f47f af70 	bne.w	8004914 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	e735      	b.n	80048ac <HAL_TIM_PWM_Start_DMA+0x60>
 8004a40:	08004c65 	.word	0x08004c65
 8004a44:	08004ced 	.word	0x08004ced
 8004a48:	08004d51 	.word	0x08004d51
 8004a4c:	40012c00 	.word	0x40012c00
 8004a50:	40000400 	.word	0x40000400

08004a54 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004a54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	f000 80cb 	beq.w	8004bf4 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8004a5e:	2301      	movs	r3, #1
{
 8004a60:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004a62:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004a66:	2a0c      	cmp	r2, #12
 8004a68:	d831      	bhi.n	8004ace <HAL_TIM_PWM_ConfigChannel+0x7a>
 8004a6a:	e8df f002 	tbb	[pc, r2]
 8004a6e:	3007      	.short	0x3007
 8004a70:	30663030 	.word	0x30663030
 8004a74:	30953030 	.word	0x30953030
 8004a78:	3030      	.short	0x3030
 8004a7a:	36          	.byte	0x36
 8004a7b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a7c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a7e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a80:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004a82:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a84:	f025 0501 	bic.w	r5, r5, #1
 8004a88:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004a8a:	6a1a      	ldr	r2, [r3, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a8c:	4d73      	ldr	r5, [pc, #460]	; (8004c5c <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8004a8e:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004a92:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004a94:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a98:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a9c:	42ab      	cmp	r3, r5
  tmpccer |= OC_Config->OCPolarity;
 8004a9e:	ea42 0207 	orr.w	r2, r2, r7
  tmpccmrx |= OC_Config->OCMode;
 8004aa2:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aa6:	f000 80a7 	beq.w	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x1a4>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004aaa:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004aac:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ab0:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004ab2:	635d      	str	r5, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ab6:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ab8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aba:	f044 0408 	orr.w	r4, r4, #8
 8004abe:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ac0:	6999      	ldr	r1, [r3, #24]
 8004ac2:	f021 0104 	bic.w	r1, r1, #4
 8004ac6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	432a      	orrs	r2, r5
 8004acc:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004ad4:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004ad6:	4618      	mov	r0, r3
}
 8004ad8:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ada:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004adc:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ade:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ae0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ae2:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8004ae6:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004ae8:	6a1a      	ldr	r2, [r3, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aea:	4d5c      	ldr	r5, [pc, #368]	; (8004c5c <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8004aec:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004af0:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8004af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004afa:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004afc:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b00:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b04:	f000 8095 	beq.w	8004c32 <HAL_TIM_PWM_ConfigChannel+0x1de>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b08:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b0a:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004b0e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004b10:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b12:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b14:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b16:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b18:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004b1c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b1e:	69d9      	ldr	r1, [r3, #28]
 8004b20:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004b24:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004b2c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004b34:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004b36:	4618      	mov	r0, r3
}
 8004b38:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b3a:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b3c:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b3e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b42:	f025 0510 	bic.w	r5, r5, #16
 8004b46:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004b48:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4a:	4d44      	ldr	r5, [pc, #272]	; (8004c5c <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8004b4c:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b50:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004b52:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b56:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b5a:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b5c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b60:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b64:	d056      	beq.n	8004c14 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CCR2 = OC_Config->Pulse;
 8004b66:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b68:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b6c:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004b6e:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004b70:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b72:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b74:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b76:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8004b7a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b7c:	6999      	ldr	r1, [r3, #24]
 8004b7e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004b82:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b84:	699a      	ldr	r2, [r3, #24]
 8004b86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004b8a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004b92:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004b94:	4618      	mov	r0, r3
}
 8004b96:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b98:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b9a:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b9c:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8004b9e:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ba0:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8004ba4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ba8:	4d2c      	ldr	r5, [pc, #176]	; (8004c5c <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8004baa:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004bae:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004bb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bb8:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bba:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004bbe:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bc2:	d03c      	beq.n	8004c3e <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc4:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004bc6:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004bca:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004bcc:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004bce:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd0:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bd2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bd4:	f044 0408 	orr.w	r4, r4, #8
 8004bd8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bda:	69d9      	ldr	r1, [r3, #28]
 8004bdc:	f021 0104 	bic.w	r1, r1, #4
 8004be0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be2:	69da      	ldr	r2, [r3, #28]
 8004be4:	432a      	orrs	r2, r5
 8004be6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004be8:	2300      	movs	r3, #0
 8004bea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8004bee:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8004bf0:	4618      	mov	r0, r3
}
 8004bf2:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004bf4:	2002      	movs	r0, #2
}
 8004bf6:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004bf8:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bfa:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bfe:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8004c02:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c04:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004c08:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c0a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c0e:	ea45 0c0c 	orr.w	ip, r5, ip
 8004c12:	e74a      	b.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c14:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c1a:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c1e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c22:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 8004c26:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c2c:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8004c30:	e799      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x112>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c32:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c34:	f42c 4c80 	bic.w	ip, ip, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c38:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 8004c3c:	e764      	b.n	8004b08 <HAL_TIM_PWM_ConfigChannel+0xb4>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c3e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c44:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c48:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c4c:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 8004c50:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c56:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8004c5a:	e7b3      	b.n	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004c5c:	40012c00 	.word	0x40012c00

08004c60 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop

08004c64 <TIM_DMADelayPulseCplt>:
{
 8004c64:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c66:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c6a:	4283      	cmp	r3, r0
 8004c6c:	d01c      	beq.n	8004ca8 <TIM_DMADelayPulseCplt+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004c70:	4283      	cmp	r3, r0
 8004c72:	d00b      	beq.n	8004c8c <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004c76:	4283      	cmp	r3, r0
 8004c78:	d023      	beq.n	8004cc2 <TIM_DMADelayPulseCplt+0x5e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c7c:	4283      	cmp	r3, r0
 8004c7e:	d029      	beq.n	8004cd4 <TIM_DMADelayPulseCplt+0x70>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff ffed 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	2300      	movs	r3, #0
 8004c88:	7723      	strb	r3, [r4, #28]
}
 8004c8a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c8c:	2202      	movs	r2, #2
 8004c8e:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f4      	bne.n	8004c80 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c96:	2301      	movs	r3, #1
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c98:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9e:	f7ff ffdf 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	7723      	strb	r3, [r4, #28]
}
 8004ca6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e6      	bne.n	8004c80 <TIM_DMADelayPulseCplt+0x1c>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb2:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004cb4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	f7ff ffd2 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	7723      	strb	r3, [r4, #28]
}
 8004cc0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1d9      	bne.n	8004c80 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004cd2:	e7d5      	b.n	8004c80 <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1d0      	bne.n	8004c80 <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004ce4:	e7cc      	b.n	8004c80 <TIM_DMADelayPulseCplt+0x1c>
 8004ce6:	bf00      	nop

08004ce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <TIM_DMADelayPulseHalfCplt>:
{
 8004cec:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cee:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004cf0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004cf2:	4282      	cmp	r2, r0
 8004cf4:	d01a      	beq.n	8004d2c <TIM_DMADelayPulseHalfCplt+0x40>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cf6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4282      	cmp	r2, r0
 8004cfc:	d00e      	beq.n	8004d1c <TIM_DMADelayPulseHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004cfe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d00:	4282      	cmp	r2, r0
 8004d02:	d01b      	beq.n	8004d3c <TIM_DMADelayPulseHalfCplt+0x50>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d04:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004d06:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d08:	bf08      	it	eq
 8004d0a:	2308      	moveq	r3, #8
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d0c:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0e:	bf08      	it	eq
 8004d10:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d12:	f7ff ffe9 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d16:	2300      	movs	r3, #0
 8004d18:	7723      	strb	r3, [r4, #28]
}
 8004d1a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d1c:	2302      	movs	r3, #2
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d1e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d20:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d22:	f7ff ffe1 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d26:	2300      	movs	r3, #0
 8004d28:	7723      	strb	r3, [r4, #28]
}
 8004d2a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d2c:	2301      	movs	r3, #1
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d2e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d30:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d32:	f7ff ffd9 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d36:	2300      	movs	r3, #0
 8004d38:	7723      	strb	r3, [r4, #28]
}
 8004d3a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d3c:	2304      	movs	r3, #4
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d3e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d40:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d42:	f7ff ffd1 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	2300      	movs	r3, #0
 8004d48:	7723      	strb	r3, [r4, #28]
}
 8004d4a:	bd10      	pop	{r4, pc}

08004d4c <HAL_TIM_ErrorCallback>:
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop

08004d50 <TIM_DMAError>:
{
 8004d50:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d52:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d56:	4283      	cmp	r3, r0
 8004d58:	d01c      	beq.n	8004d94 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d5c:	4283      	cmp	r3, r0
 8004d5e:	d00e      	beq.n	8004d7e <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d62:	4283      	cmp	r3, r0
 8004d64:	d020      	beq.n	8004da8 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d68:	4283      	cmp	r3, r0
 8004d6a:	d028      	beq.n	8004dbe <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8004d6c:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 8004d6e:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 8004d70:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8004d74:	f7ff ffea 	bl	8004d4c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	7723      	strb	r3, [r4, #28]
}
 8004d7c:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d7e:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d80:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ErrorCallback(htim);
 8004d86:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d88:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8004d8a:	f7ff ffdf 	bl	8004d4c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	7723      	strb	r3, [r4, #28]
}
 8004d92:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d94:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 8004d96:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d98:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 8004d9e:	f7ff ffd5 	bl	8004d4c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	2300      	movs	r3, #0
 8004da4:	7723      	strb	r3, [r4, #28]
}
 8004da6:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004daa:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004dac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_TIM_ErrorCallback(htim);
 8004db0:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004db2:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8004db4:	f7ff ffca 	bl	8004d4c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db8:	2300      	movs	r3, #0
 8004dba:	7723      	strb	r3, [r4, #28]
}
 8004dbc:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004dbe:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc0:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004dc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_TIM_ErrorCallback(htim);
 8004dc6:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dc8:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 8004dca:	f7ff ffbf 	bl	8004d4c <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	7723      	strb	r3, [r4, #28]
}
 8004dd2:	bd10      	pop	{r4, pc}

08004dd4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d026      	beq.n	8004e2a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dde:	6803      	ldr	r3, [r0, #0]
{
 8004de0:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004de2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004de6:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de8:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dea:	4d11      	ldr	r5, [pc, #68]	; (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004df0:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df2:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 8004df4:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 8004df6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df8:	d009      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfe:	d006      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004e00:	4a0c      	ldr	r2, [pc, #48]	; (8004e34 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 8004e06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d104      	bne.n	8004e18 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e10:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e14:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e16:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004e18:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e1a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8004e1c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 8004e24:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8004e26:	4618      	mov	r0, r3
}
 8004e28:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004e2a:	2002      	movs	r0, #2
}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40012c00 	.word	0x40012c00
 8004e34:	40000400 	.word	0x40000400

08004e38 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d061      	beq.n	8004f00 <HAL_UART_Init+0xc8>
{
 8004e3c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e42:	4604      	mov	r4, r0
 8004e44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d051      	beq.n	8004ef0 <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e4c:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e4e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004e50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8004e54:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e56:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 8004e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e5e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e60:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e62:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004e66:	4301      	orrs	r1, r0
 8004e68:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004e6a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e6c:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004e70:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e74:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8004e76:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e7a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 8004e84:	491f      	ldr	r1, [pc, #124]	; (8004f04 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e86:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e8a:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 8004e8c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e8e:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004e90:	d033      	beq.n	8004efa <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e92:	f7ff f81f 	bl	8003ed4 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e96:	6863      	ldr	r3, [r4, #4]
 8004e98:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea6:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 8004eaa:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eac:	4816      	ldr	r0, [pc, #88]	; (8004f08 <HAL_UART_Init+0xd0>)
 8004eae:	fba0 c103 	umull	ip, r1, r0, r3
 8004eb2:	0949      	lsrs	r1, r1, #5
 8004eb4:	fb02 3311 	mls	r3, r2, r1, r3
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	3332      	adds	r3, #50	; 0x32
 8004ebc:	fba0 2303 	umull	r2, r3, r0, r3
 8004ec0:	0109      	lsls	r1, r1, #4
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 8004ec8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eca:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 8004ecc:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ece:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004ed2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed4:	6953      	ldr	r3, [r2, #20]
 8004ed6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004eda:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004edc:	68d3      	ldr	r3, [r2, #12]
 8004ede:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ee2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee4:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ee6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004eea:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8004ef0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004ef4:	f7fc ff5a 	bl	8001dac <HAL_UART_MspInit>
 8004ef8:	e7a8      	b.n	8004e4c <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8004efa:	f7fe fffb 	bl	8003ef4 <HAL_RCC_GetPCLK2Freq>
 8004efe:	e7ca      	b.n	8004e96 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 8004f00:	2001      	movs	r0, #1
}
 8004f02:	4770      	bx	lr
 8004f04:	40013800 	.word	0x40013800
 8004f08:	51eb851f 	.word	0x51eb851f

08004f0c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f0c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d123      	bne.n	8004f5c <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 8004f14:	b301      	cbz	r1, 8004f58 <HAL_UART_Receive_IT+0x4c>
 8004f16:	b1fa      	cbz	r2, 8004f58 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 8004f18:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d01d      	beq.n	8004f5c <HAL_UART_Receive_IT+0x50>
{
 8004f20:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f22:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f24:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f26:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f28:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8004f2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8004f2e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f30:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f32:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f36:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 8004f38:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f3a:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 8004f3e:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f40:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f42:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004f44:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004f4c:	68e3      	ldr	r3, [r4, #12]
 8004f4e:	f043 0320 	orr.w	r3, r3, #32
 8004f52:	60e3      	str	r3, [r4, #12]
}
 8004f54:	bc30      	pop	{r4, r5}
 8004f56:	4770      	bx	lr
      return HAL_ERROR;
 8004f58:	2001      	movs	r0, #1
 8004f5a:	4770      	bx	lr
    return HAL_BUSY;
 8004f5c:	2002      	movs	r0, #2
}
 8004f5e:	4770      	bx	lr

08004f60 <HAL_UART_TxCpltCallback>:
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop

08004f64 <HAL_UART_ErrorCallback>:
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop

08004f68 <UART_DMAAbortOnError>:
{
 8004f68:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004f6a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f6c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004f6e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f70:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004f72:	f7ff fff7 	bl	8004f64 <HAL_UART_ErrorCallback>
}
 8004f76:	bd08      	pop	{r3, pc}

08004f78 <HAL_UARTEx_RxEventCallback>:
}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f7c:	6883      	ldr	r3, [r0, #8]
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d03b      	beq.n	8004ffc <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f84:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02f      	beq.n	8004fea <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f8a:	6803      	ldr	r3, [r0, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f92:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004f94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004f96:	3301      	adds	r3, #1
 8004f98:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004f9a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004fa2:	bb4b      	cbnz	r3, 8004ff8 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004fa4:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fa8:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004faa:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fac:	68d1      	ldr	r1, [r2, #12]
 8004fae:	f021 0120 	bic.w	r1, r1, #32
 8004fb2:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fb4:	68d1      	ldr	r1, [r2, #12]
 8004fb6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004fba:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fbc:	6951      	ldr	r1, [r2, #20]
 8004fbe:	f021 0101 	bic.w	r1, r1, #1
 8004fc2:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004fca:	2901      	cmp	r1, #1
 8004fcc:	d121      	bne.n	8005012 <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fce:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	68d1      	ldr	r1, [r2, #12]
 8004fd2:	f021 0110 	bic.w	r1, r1, #16
 8004fd6:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fd8:	6811      	ldr	r1, [r2, #0]
 8004fda:	06c9      	lsls	r1, r1, #27
 8004fdc:	d423      	bmi.n	8005026 <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fde:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004fe0:	f7ff ffca 	bl	8004f78 <HAL_UARTEx_RxEventCallback>
}
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	b002      	add	sp, #8
 8004fe8:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fea:	6903      	ldr	r3, [r0, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1cc      	bne.n	8004f8a <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ff0:	6803      	ldr	r3, [r0, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	7013      	strb	r3, [r2, #0]
 8004ff6:	e7cd      	b.n	8004f94 <UART_Receive_IT.part.0+0x18>
}
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffc:	6903      	ldr	r3, [r0, #16]
 8004ffe:	b96b      	cbnz	r3, 800501c <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005000:	6802      	ldr	r2, [r0, #0]
 8005002:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005004:	6852      	ldr	r2, [r2, #4]
 8005006:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500a:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800500e:	6283      	str	r3, [r0, #40]	; 0x28
 8005010:	e7c3      	b.n	8004f9a <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8005012:	f7fb fdb9 	bl	8000b88 <HAL_UART_RxCpltCallback>
}
 8005016:	2000      	movs	r0, #0
 8005018:	b002      	add	sp, #8
 800501a:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800501c:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800501e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	7013      	strb	r3, [r2, #0]
 8005024:	e7b6      	b.n	8004f94 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	6813      	ldr	r3, [r2, #0]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	6853      	ldr	r3, [r2, #4]
 800502e:	9301      	str	r3, [sp, #4]
 8005030:	9b01      	ldr	r3, [sp, #4]
 8005032:	e7d4      	b.n	8004fde <UART_Receive_IT.part.0+0x62>

08005034 <HAL_UART_IRQHandler>:
{
 8005034:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005036:	6803      	ldr	r3, [r0, #0]
{
 8005038:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800503a:	681a      	ldr	r2, [r3, #0]
{
 800503c:	b082      	sub	sp, #8
  if (errorflags == RESET)
 800503e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005040:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005042:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8005044:	d14e      	bne.n	80050e4 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005046:	0696      	lsls	r6, r2, #26
 8005048:	d502      	bpl.n	8005050 <HAL_UART_IRQHandler+0x1c>
 800504a:	068d      	lsls	r5, r1, #26
 800504c:	f100 8090 	bmi.w	8005170 <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005050:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005052:	2801      	cmp	r0, #1
 8005054:	d00b      	beq.n	800506e <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005056:	0616      	lsls	r6, r2, #24
 8005058:	d502      	bpl.n	8005060 <HAL_UART_IRQHandler+0x2c>
 800505a:	060d      	lsls	r5, r1, #24
 800505c:	f100 8092 	bmi.w	8005184 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005060:	0650      	lsls	r0, r2, #25
 8005062:	d502      	bpl.n	800506a <HAL_UART_IRQHandler+0x36>
 8005064:	064a      	lsls	r2, r1, #25
 8005066:	f100 80ab 	bmi.w	80051c0 <HAL_UART_IRQHandler+0x18c>
}
 800506a:	b002      	add	sp, #8
 800506c:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800506e:	06d5      	lsls	r5, r2, #27
 8005070:	d5f1      	bpl.n	8005056 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005072:	06c8      	lsls	r0, r1, #27
 8005074:	d5ef      	bpl.n	8005056 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005076:	2100      	movs	r1, #0
 8005078:	9101      	str	r1, [sp, #4]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	9201      	str	r2, [sp, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	9201      	str	r2, [sp, #4]
 8005082:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800508a:	f000 80d2 	beq.w	8005232 <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800508e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005090:	6802      	ldr	r2, [r0, #0]
 8005092:	6852      	ldr	r2, [r2, #4]
 8005094:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8005096:	2a00      	cmp	r2, #0
 8005098:	d0e7      	beq.n	800506a <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800509a:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800509c:	4295      	cmp	r5, r2
 800509e:	d9e4      	bls.n	800506a <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a0:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 80050a2:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050a4:	2e20      	cmp	r6, #32
 80050a6:	d016      	beq.n	80050d6 <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 80050a8:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b2:	695a      	ldr	r2, [r3, #20]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80050c2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c6:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	f022 0210 	bic.w	r2, r2, #16
 80050ce:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050d0:	f7fd fc0c 	bl	80028ec <HAL_DMA_Abort>
 80050d4:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050d6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80050d8:	4620      	mov	r0, r4
 80050da:	1a69      	subs	r1, r5, r1
 80050dc:	b289      	uxth	r1, r1
 80050de:	f7ff ff4b 	bl	8004f78 <HAL_UARTEx_RxEventCallback>
 80050e2:	e7c2      	b.n	800506a <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050e4:	f005 0501 	and.w	r5, r5, #1
 80050e8:	f401 7090 	and.w	r0, r1, #288	; 0x120
 80050ec:	4328      	orrs	r0, r5
 80050ee:	d0af      	beq.n	8005050 <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80050f0:	07d0      	lsls	r0, r2, #31
 80050f2:	d505      	bpl.n	8005100 <HAL_UART_IRQHandler+0xcc>
 80050f4:	05ce      	lsls	r6, r1, #23
 80050f6:	d503      	bpl.n	8005100 <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80050fa:	f040 0001 	orr.w	r0, r0, #1
 80050fe:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005100:	0750      	lsls	r0, r2, #29
 8005102:	d52c      	bpl.n	800515e <HAL_UART_IRQHandler+0x12a>
 8005104:	b12d      	cbz	r5, 8005112 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005106:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005108:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800510a:	f040 0002 	orr.w	r0, r0, #2
 800510e:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005110:	d429      	bmi.n	8005166 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005112:	0716      	lsls	r6, r2, #28
 8005114:	d507      	bpl.n	8005126 <HAL_UART_IRQHandler+0xf2>
 8005116:	f001 0020 	and.w	r0, r1, #32
 800511a:	4328      	orrs	r0, r5
 800511c:	d003      	beq.n	8005126 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800511e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005120:	f040 0008 	orr.w	r0, r0, #8
 8005124:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005126:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005128:	2800      	cmp	r0, #0
 800512a:	d09e      	beq.n	800506a <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512c:	0690      	lsls	r0, r2, #26
 800512e:	d509      	bpl.n	8005144 <HAL_UART_IRQHandler+0x110>
 8005130:	068a      	lsls	r2, r1, #26
 8005132:	d507      	bpl.n	8005144 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005134:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8005138:	2a22      	cmp	r2, #34	; 0x22
 800513a:	d103      	bne.n	8005144 <HAL_UART_IRQHandler+0x110>
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff ff1d 	bl	8004f7c <UART_Receive_IT.part.0>
 8005142:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005144:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005146:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005148:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800514c:	f005 0508 	and.w	r5, r5, #8
 8005150:	4315      	orrs	r5, r2
 8005152:	d140      	bne.n	80051d6 <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 8005154:	4620      	mov	r0, r4
 8005156:	f7ff ff05 	bl	8004f64 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515a:	6425      	str	r5, [r4, #64]	; 0x40
 800515c:	e785      	b.n	800506a <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800515e:	0790      	lsls	r0, r2, #30
 8005160:	d5d7      	bpl.n	8005112 <HAL_UART_IRQHandler+0xde>
 8005162:	2d00      	cmp	r5, #0
 8005164:	d0d5      	beq.n	8005112 <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005166:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005168:	f040 0004 	orr.w	r0, r0, #4
 800516c:	6420      	str	r0, [r4, #64]	; 0x40
 800516e:	e7d0      	b.n	8005112 <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005170:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8005174:	2b22      	cmp	r3, #34	; 0x22
 8005176:	f47f af78 	bne.w	800506a <HAL_UART_IRQHandler+0x36>
}
 800517a:	b002      	add	sp, #8
 800517c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005180:	f7ff befc 	b.w	8004f7c <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005184:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8005188:	2a21      	cmp	r2, #33	; 0x21
 800518a:	f47f af6e 	bne.w	800506a <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518e:	68a2      	ldr	r2, [r4, #8]
 8005190:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8005194:	d06e      	beq.n	8005274 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005196:	6a22      	ldr	r2, [r4, #32]
 8005198:	1c51      	adds	r1, r2, #1
 800519a:	6221      	str	r1, [r4, #32]
 800519c:	7812      	ldrb	r2, [r2, #0]
 800519e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80051a0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80051a2:	3a01      	subs	r2, #1
 80051a4:	b292      	uxth	r2, r2
 80051a6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	f47f af5e 	bne.w	800506a <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051b4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051bc:	60da      	str	r2, [r3, #12]
 80051be:	e754      	b.n	800506a <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 80051c0:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051c2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80051c4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ca:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80051cc:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80051d0:	f7ff fec6 	bl	8004f60 <HAL_UART_TxCpltCallback>
    return;
 80051d4:	e749      	b.n	800506a <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051dc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	f022 0201 	bic.w	r2, r2, #1
 80051e4:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80051e8:	2a01      	cmp	r2, #1
 80051ea:	d103      	bne.n	80051f4 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	f022 0210 	bic.w	r2, r2, #16
 80051f2:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80051f6:	2120      	movs	r1, #32
 80051f8:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fc:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fe:	695a      	ldr	r2, [r3, #20]
 8005200:	0656      	lsls	r6, r2, #25
 8005202:	d512      	bpl.n	800522a <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005204:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005206:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005208:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800520c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800520e:	b160      	cbz	r0, 800522a <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005210:	4b1e      	ldr	r3, [pc, #120]	; (800528c <HAL_UART_IRQHandler+0x258>)
 8005212:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005214:	f7fd fb8c 	bl	8002930 <HAL_DMA_Abort_IT>
 8005218:	2800      	cmp	r0, #0
 800521a:	f43f af26 	beq.w	800506a <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005220:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8005222:	b002      	add	sp, #8
 8005224:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005228:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800522a:	4620      	mov	r0, r4
 800522c:	f7ff fe9a 	bl	8004f64 <HAL_UART_ErrorCallback>
 8005230:	e71b      	b.n	800506a <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005232:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8005234:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005236:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005238:	b289      	uxth	r1, r1
 800523a:	2900      	cmp	r1, #0
 800523c:	f43f af15 	beq.w	800506a <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005240:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8005242:	1a08      	subs	r0, r1, r0
 8005244:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8005246:	2900      	cmp	r1, #0
 8005248:	f43f af0f 	beq.w	800506a <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 800524c:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800524e:	68d8      	ldr	r0, [r3, #12]
 8005250:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8005254:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005256:	6958      	ldr	r0, [r3, #20]
 8005258:	f020 0001 	bic.w	r0, r0, #1
 800525c:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800525e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005262:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005264:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005266:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005268:	f022 0210 	bic.w	r2, r2, #16
 800526c:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800526e:	f7ff fe83 	bl	8004f78 <HAL_UARTEx_RxEventCallback>
 8005272:	e6fa      	b.n	800506a <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	6922      	ldr	r2, [r4, #16]
 8005276:	2a00      	cmp	r2, #0
 8005278:	d18d      	bne.n	8005196 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800527a:	6a22      	ldr	r2, [r4, #32]
 800527c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8005280:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005284:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005286:	6222      	str	r2, [r4, #32]
 8005288:	e78a      	b.n	80051a0 <HAL_UART_IRQHandler+0x16c>
 800528a:	bf00      	nop
 800528c:	08004f69 	.word	0x08004f69

08005290 <__errno>:
 8005290:	4b01      	ldr	r3, [pc, #4]	; (8005298 <__errno+0x8>)
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000010 	.word	0x20000010

0800529c <__libc_init_array>:
 800529c:	b570      	push	{r4, r5, r6, lr}
 800529e:	2600      	movs	r6, #0
 80052a0:	4d0c      	ldr	r5, [pc, #48]	; (80052d4 <__libc_init_array+0x38>)
 80052a2:	4c0d      	ldr	r4, [pc, #52]	; (80052d8 <__libc_init_array+0x3c>)
 80052a4:	1b64      	subs	r4, r4, r5
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	42a6      	cmp	r6, r4
 80052aa:	d109      	bne.n	80052c0 <__libc_init_array+0x24>
 80052ac:	f000 fc5c 	bl	8005b68 <_init>
 80052b0:	2600      	movs	r6, #0
 80052b2:	4d0a      	ldr	r5, [pc, #40]	; (80052dc <__libc_init_array+0x40>)
 80052b4:	4c0a      	ldr	r4, [pc, #40]	; (80052e0 <__libc_init_array+0x44>)
 80052b6:	1b64      	subs	r4, r4, r5
 80052b8:	10a4      	asrs	r4, r4, #2
 80052ba:	42a6      	cmp	r6, r4
 80052bc:	d105      	bne.n	80052ca <__libc_init_array+0x2e>
 80052be:	bd70      	pop	{r4, r5, r6, pc}
 80052c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c4:	4798      	blx	r3
 80052c6:	3601      	adds	r6, #1
 80052c8:	e7ee      	b.n	80052a8 <__libc_init_array+0xc>
 80052ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ce:	4798      	blx	r3
 80052d0:	3601      	adds	r6, #1
 80052d2:	e7f2      	b.n	80052ba <__libc_init_array+0x1e>
 80052d4:	080066d0 	.word	0x080066d0
 80052d8:	080066d0 	.word	0x080066d0
 80052dc:	080066d0 	.word	0x080066d0
 80052e0:	080066d4 	.word	0x080066d4

080052e4 <memcpy>:
 80052e4:	440a      	add	r2, r1
 80052e6:	4291      	cmp	r1, r2
 80052e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052ec:	d100      	bne.n	80052f0 <memcpy+0xc>
 80052ee:	4770      	bx	lr
 80052f0:	b510      	push	{r4, lr}
 80052f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f6:	4291      	cmp	r1, r2
 80052f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052fc:	d1f9      	bne.n	80052f2 <memcpy+0xe>
 80052fe:	bd10      	pop	{r4, pc}

08005300 <memmove>:
 8005300:	4288      	cmp	r0, r1
 8005302:	b510      	push	{r4, lr}
 8005304:	eb01 0402 	add.w	r4, r1, r2
 8005308:	d902      	bls.n	8005310 <memmove+0x10>
 800530a:	4284      	cmp	r4, r0
 800530c:	4623      	mov	r3, r4
 800530e:	d807      	bhi.n	8005320 <memmove+0x20>
 8005310:	1e43      	subs	r3, r0, #1
 8005312:	42a1      	cmp	r1, r4
 8005314:	d008      	beq.n	8005328 <memmove+0x28>
 8005316:	f811 2b01 	ldrb.w	r2, [r1], #1
 800531a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800531e:	e7f8      	b.n	8005312 <memmove+0x12>
 8005320:	4601      	mov	r1, r0
 8005322:	4402      	add	r2, r0
 8005324:	428a      	cmp	r2, r1
 8005326:	d100      	bne.n	800532a <memmove+0x2a>
 8005328:	bd10      	pop	{r4, pc}
 800532a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800532e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005332:	e7f7      	b.n	8005324 <memmove+0x24>

08005334 <memset>:
 8005334:	4603      	mov	r3, r0
 8005336:	4402      	add	r2, r0
 8005338:	4293      	cmp	r3, r2
 800533a:	d100      	bne.n	800533e <memset+0xa>
 800533c:	4770      	bx	lr
 800533e:	f803 1b01 	strb.w	r1, [r3], #1
 8005342:	e7f9      	b.n	8005338 <memset+0x4>

08005344 <siprintf>:
 8005344:	b40e      	push	{r1, r2, r3}
 8005346:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800534a:	b500      	push	{lr}
 800534c:	b09c      	sub	sp, #112	; 0x70
 800534e:	ab1d      	add	r3, sp, #116	; 0x74
 8005350:	9002      	str	r0, [sp, #8]
 8005352:	9006      	str	r0, [sp, #24]
 8005354:	9107      	str	r1, [sp, #28]
 8005356:	9104      	str	r1, [sp, #16]
 8005358:	4808      	ldr	r0, [pc, #32]	; (800537c <siprintf+0x38>)
 800535a:	4909      	ldr	r1, [pc, #36]	; (8005380 <siprintf+0x3c>)
 800535c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005360:	9105      	str	r1, [sp, #20]
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	a902      	add	r1, sp, #8
 8005366:	9301      	str	r3, [sp, #4]
 8005368:	f000 f868 	bl	800543c <_svfiprintf_r>
 800536c:	2200      	movs	r2, #0
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	b01c      	add	sp, #112	; 0x70
 8005374:	f85d eb04 	ldr.w	lr, [sp], #4
 8005378:	b003      	add	sp, #12
 800537a:	4770      	bx	lr
 800537c:	20000010 	.word	0x20000010
 8005380:	ffff0208 	.word	0xffff0208

08005384 <__ssputs_r>:
 8005384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	688e      	ldr	r6, [r1, #8]
 800538a:	4682      	mov	sl, r0
 800538c:	429e      	cmp	r6, r3
 800538e:	460c      	mov	r4, r1
 8005390:	4690      	mov	r8, r2
 8005392:	461f      	mov	r7, r3
 8005394:	d838      	bhi.n	8005408 <__ssputs_r+0x84>
 8005396:	898a      	ldrh	r2, [r1, #12]
 8005398:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800539c:	d032      	beq.n	8005404 <__ssputs_r+0x80>
 800539e:	6825      	ldr	r5, [r4, #0]
 80053a0:	6909      	ldr	r1, [r1, #16]
 80053a2:	3301      	adds	r3, #1
 80053a4:	eba5 0901 	sub.w	r9, r5, r1
 80053a8:	6965      	ldr	r5, [r4, #20]
 80053aa:	444b      	add	r3, r9
 80053ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053b4:	106d      	asrs	r5, r5, #1
 80053b6:	429d      	cmp	r5, r3
 80053b8:	bf38      	it	cc
 80053ba:	461d      	movcc	r5, r3
 80053bc:	0553      	lsls	r3, r2, #21
 80053be:	d531      	bpl.n	8005424 <__ssputs_r+0xa0>
 80053c0:	4629      	mov	r1, r5
 80053c2:	f000 fb2b 	bl	8005a1c <_malloc_r>
 80053c6:	4606      	mov	r6, r0
 80053c8:	b950      	cbnz	r0, 80053e0 <__ssputs_r+0x5c>
 80053ca:	230c      	movs	r3, #12
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	f8ca 3000 	str.w	r3, [sl]
 80053d4:	89a3      	ldrh	r3, [r4, #12]
 80053d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053da:	81a3      	strh	r3, [r4, #12]
 80053dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e0:	464a      	mov	r2, r9
 80053e2:	6921      	ldr	r1, [r4, #16]
 80053e4:	f7ff ff7e 	bl	80052e4 <memcpy>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f2:	81a3      	strh	r3, [r4, #12]
 80053f4:	6126      	str	r6, [r4, #16]
 80053f6:	444e      	add	r6, r9
 80053f8:	6026      	str	r6, [r4, #0]
 80053fa:	463e      	mov	r6, r7
 80053fc:	6165      	str	r5, [r4, #20]
 80053fe:	eba5 0509 	sub.w	r5, r5, r9
 8005402:	60a5      	str	r5, [r4, #8]
 8005404:	42be      	cmp	r6, r7
 8005406:	d900      	bls.n	800540a <__ssputs_r+0x86>
 8005408:	463e      	mov	r6, r7
 800540a:	4632      	mov	r2, r6
 800540c:	4641      	mov	r1, r8
 800540e:	6820      	ldr	r0, [r4, #0]
 8005410:	f7ff ff76 	bl	8005300 <memmove>
 8005414:	68a3      	ldr	r3, [r4, #8]
 8005416:	6822      	ldr	r2, [r4, #0]
 8005418:	1b9b      	subs	r3, r3, r6
 800541a:	4432      	add	r2, r6
 800541c:	2000      	movs	r0, #0
 800541e:	60a3      	str	r3, [r4, #8]
 8005420:	6022      	str	r2, [r4, #0]
 8005422:	e7db      	b.n	80053dc <__ssputs_r+0x58>
 8005424:	462a      	mov	r2, r5
 8005426:	f000 fb53 	bl	8005ad0 <_realloc_r>
 800542a:	4606      	mov	r6, r0
 800542c:	2800      	cmp	r0, #0
 800542e:	d1e1      	bne.n	80053f4 <__ssputs_r+0x70>
 8005430:	4650      	mov	r0, sl
 8005432:	6921      	ldr	r1, [r4, #16]
 8005434:	f000 faa6 	bl	8005984 <_free_r>
 8005438:	e7c7      	b.n	80053ca <__ssputs_r+0x46>
	...

0800543c <_svfiprintf_r>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	4698      	mov	r8, r3
 8005442:	898b      	ldrh	r3, [r1, #12]
 8005444:	4607      	mov	r7, r0
 8005446:	061b      	lsls	r3, r3, #24
 8005448:	460d      	mov	r5, r1
 800544a:	4614      	mov	r4, r2
 800544c:	b09d      	sub	sp, #116	; 0x74
 800544e:	d50e      	bpl.n	800546e <_svfiprintf_r+0x32>
 8005450:	690b      	ldr	r3, [r1, #16]
 8005452:	b963      	cbnz	r3, 800546e <_svfiprintf_r+0x32>
 8005454:	2140      	movs	r1, #64	; 0x40
 8005456:	f000 fae1 	bl	8005a1c <_malloc_r>
 800545a:	6028      	str	r0, [r5, #0]
 800545c:	6128      	str	r0, [r5, #16]
 800545e:	b920      	cbnz	r0, 800546a <_svfiprintf_r+0x2e>
 8005460:	230c      	movs	r3, #12
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	f04f 30ff 	mov.w	r0, #4294967295
 8005468:	e0d1      	b.n	800560e <_svfiprintf_r+0x1d2>
 800546a:	2340      	movs	r3, #64	; 0x40
 800546c:	616b      	str	r3, [r5, #20]
 800546e:	2300      	movs	r3, #0
 8005470:	9309      	str	r3, [sp, #36]	; 0x24
 8005472:	2320      	movs	r3, #32
 8005474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005478:	2330      	movs	r3, #48	; 0x30
 800547a:	f04f 0901 	mov.w	r9, #1
 800547e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005482:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005628 <_svfiprintf_r+0x1ec>
 8005486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800548a:	4623      	mov	r3, r4
 800548c:	469a      	mov	sl, r3
 800548e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005492:	b10a      	cbz	r2, 8005498 <_svfiprintf_r+0x5c>
 8005494:	2a25      	cmp	r2, #37	; 0x25
 8005496:	d1f9      	bne.n	800548c <_svfiprintf_r+0x50>
 8005498:	ebba 0b04 	subs.w	fp, sl, r4
 800549c:	d00b      	beq.n	80054b6 <_svfiprintf_r+0x7a>
 800549e:	465b      	mov	r3, fp
 80054a0:	4622      	mov	r2, r4
 80054a2:	4629      	mov	r1, r5
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff ff6d 	bl	8005384 <__ssputs_r>
 80054aa:	3001      	adds	r0, #1
 80054ac:	f000 80aa 	beq.w	8005604 <_svfiprintf_r+0x1c8>
 80054b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054b2:	445a      	add	r2, fp
 80054b4:	9209      	str	r2, [sp, #36]	; 0x24
 80054b6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 80a2 	beq.w	8005604 <_svfiprintf_r+0x1c8>
 80054c0:	2300      	movs	r3, #0
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054ca:	f10a 0a01 	add.w	sl, sl, #1
 80054ce:	9304      	str	r3, [sp, #16]
 80054d0:	9307      	str	r3, [sp, #28]
 80054d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054d6:	931a      	str	r3, [sp, #104]	; 0x68
 80054d8:	4654      	mov	r4, sl
 80054da:	2205      	movs	r2, #5
 80054dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054e0:	4851      	ldr	r0, [pc, #324]	; (8005628 <_svfiprintf_r+0x1ec>)
 80054e2:	f000 fa41 	bl	8005968 <memchr>
 80054e6:	9a04      	ldr	r2, [sp, #16]
 80054e8:	b9d8      	cbnz	r0, 8005522 <_svfiprintf_r+0xe6>
 80054ea:	06d0      	lsls	r0, r2, #27
 80054ec:	bf44      	itt	mi
 80054ee:	2320      	movmi	r3, #32
 80054f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054f4:	0711      	lsls	r1, r2, #28
 80054f6:	bf44      	itt	mi
 80054f8:	232b      	movmi	r3, #43	; 0x2b
 80054fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005502:	2b2a      	cmp	r3, #42	; 0x2a
 8005504:	d015      	beq.n	8005532 <_svfiprintf_r+0xf6>
 8005506:	4654      	mov	r4, sl
 8005508:	2000      	movs	r0, #0
 800550a:	f04f 0c0a 	mov.w	ip, #10
 800550e:	9a07      	ldr	r2, [sp, #28]
 8005510:	4621      	mov	r1, r4
 8005512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005516:	3b30      	subs	r3, #48	; 0x30
 8005518:	2b09      	cmp	r3, #9
 800551a:	d94e      	bls.n	80055ba <_svfiprintf_r+0x17e>
 800551c:	b1b0      	cbz	r0, 800554c <_svfiprintf_r+0x110>
 800551e:	9207      	str	r2, [sp, #28]
 8005520:	e014      	b.n	800554c <_svfiprintf_r+0x110>
 8005522:	eba0 0308 	sub.w	r3, r0, r8
 8005526:	fa09 f303 	lsl.w	r3, r9, r3
 800552a:	4313      	orrs	r3, r2
 800552c:	46a2      	mov	sl, r4
 800552e:	9304      	str	r3, [sp, #16]
 8005530:	e7d2      	b.n	80054d8 <_svfiprintf_r+0x9c>
 8005532:	9b03      	ldr	r3, [sp, #12]
 8005534:	1d19      	adds	r1, r3, #4
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	9103      	str	r1, [sp, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	bfbb      	ittet	lt
 800553e:	425b      	neglt	r3, r3
 8005540:	f042 0202 	orrlt.w	r2, r2, #2
 8005544:	9307      	strge	r3, [sp, #28]
 8005546:	9307      	strlt	r3, [sp, #28]
 8005548:	bfb8      	it	lt
 800554a:	9204      	strlt	r2, [sp, #16]
 800554c:	7823      	ldrb	r3, [r4, #0]
 800554e:	2b2e      	cmp	r3, #46	; 0x2e
 8005550:	d10c      	bne.n	800556c <_svfiprintf_r+0x130>
 8005552:	7863      	ldrb	r3, [r4, #1]
 8005554:	2b2a      	cmp	r3, #42	; 0x2a
 8005556:	d135      	bne.n	80055c4 <_svfiprintf_r+0x188>
 8005558:	9b03      	ldr	r3, [sp, #12]
 800555a:	3402      	adds	r4, #2
 800555c:	1d1a      	adds	r2, r3, #4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	9203      	str	r2, [sp, #12]
 8005562:	2b00      	cmp	r3, #0
 8005564:	bfb8      	it	lt
 8005566:	f04f 33ff 	movlt.w	r3, #4294967295
 800556a:	9305      	str	r3, [sp, #20]
 800556c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005638 <_svfiprintf_r+0x1fc>
 8005570:	2203      	movs	r2, #3
 8005572:	4650      	mov	r0, sl
 8005574:	7821      	ldrb	r1, [r4, #0]
 8005576:	f000 f9f7 	bl	8005968 <memchr>
 800557a:	b140      	cbz	r0, 800558e <_svfiprintf_r+0x152>
 800557c:	2340      	movs	r3, #64	; 0x40
 800557e:	eba0 000a 	sub.w	r0, r0, sl
 8005582:	fa03 f000 	lsl.w	r0, r3, r0
 8005586:	9b04      	ldr	r3, [sp, #16]
 8005588:	3401      	adds	r4, #1
 800558a:	4303      	orrs	r3, r0
 800558c:	9304      	str	r3, [sp, #16]
 800558e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005592:	2206      	movs	r2, #6
 8005594:	4825      	ldr	r0, [pc, #148]	; (800562c <_svfiprintf_r+0x1f0>)
 8005596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800559a:	f000 f9e5 	bl	8005968 <memchr>
 800559e:	2800      	cmp	r0, #0
 80055a0:	d038      	beq.n	8005614 <_svfiprintf_r+0x1d8>
 80055a2:	4b23      	ldr	r3, [pc, #140]	; (8005630 <_svfiprintf_r+0x1f4>)
 80055a4:	bb1b      	cbnz	r3, 80055ee <_svfiprintf_r+0x1b2>
 80055a6:	9b03      	ldr	r3, [sp, #12]
 80055a8:	3307      	adds	r3, #7
 80055aa:	f023 0307 	bic.w	r3, r3, #7
 80055ae:	3308      	adds	r3, #8
 80055b0:	9303      	str	r3, [sp, #12]
 80055b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b4:	4433      	add	r3, r6
 80055b6:	9309      	str	r3, [sp, #36]	; 0x24
 80055b8:	e767      	b.n	800548a <_svfiprintf_r+0x4e>
 80055ba:	460c      	mov	r4, r1
 80055bc:	2001      	movs	r0, #1
 80055be:	fb0c 3202 	mla	r2, ip, r2, r3
 80055c2:	e7a5      	b.n	8005510 <_svfiprintf_r+0xd4>
 80055c4:	2300      	movs	r3, #0
 80055c6:	f04f 0c0a 	mov.w	ip, #10
 80055ca:	4619      	mov	r1, r3
 80055cc:	3401      	adds	r4, #1
 80055ce:	9305      	str	r3, [sp, #20]
 80055d0:	4620      	mov	r0, r4
 80055d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055d6:	3a30      	subs	r2, #48	; 0x30
 80055d8:	2a09      	cmp	r2, #9
 80055da:	d903      	bls.n	80055e4 <_svfiprintf_r+0x1a8>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0c5      	beq.n	800556c <_svfiprintf_r+0x130>
 80055e0:	9105      	str	r1, [sp, #20]
 80055e2:	e7c3      	b.n	800556c <_svfiprintf_r+0x130>
 80055e4:	4604      	mov	r4, r0
 80055e6:	2301      	movs	r3, #1
 80055e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80055ec:	e7f0      	b.n	80055d0 <_svfiprintf_r+0x194>
 80055ee:	ab03      	add	r3, sp, #12
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	462a      	mov	r2, r5
 80055f4:	4638      	mov	r0, r7
 80055f6:	4b0f      	ldr	r3, [pc, #60]	; (8005634 <_svfiprintf_r+0x1f8>)
 80055f8:	a904      	add	r1, sp, #16
 80055fa:	f3af 8000 	nop.w
 80055fe:	1c42      	adds	r2, r0, #1
 8005600:	4606      	mov	r6, r0
 8005602:	d1d6      	bne.n	80055b2 <_svfiprintf_r+0x176>
 8005604:	89ab      	ldrh	r3, [r5, #12]
 8005606:	065b      	lsls	r3, r3, #25
 8005608:	f53f af2c 	bmi.w	8005464 <_svfiprintf_r+0x28>
 800560c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800560e:	b01d      	add	sp, #116	; 0x74
 8005610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005614:	ab03      	add	r3, sp, #12
 8005616:	9300      	str	r3, [sp, #0]
 8005618:	462a      	mov	r2, r5
 800561a:	4638      	mov	r0, r7
 800561c:	4b05      	ldr	r3, [pc, #20]	; (8005634 <_svfiprintf_r+0x1f8>)
 800561e:	a904      	add	r1, sp, #16
 8005620:	f000 f87c 	bl	800571c <_printf_i>
 8005624:	e7eb      	b.n	80055fe <_svfiprintf_r+0x1c2>
 8005626:	bf00      	nop
 8005628:	0800669d 	.word	0x0800669d
 800562c:	080066a7 	.word	0x080066a7
 8005630:	00000000 	.word	0x00000000
 8005634:	08005385 	.word	0x08005385
 8005638:	080066a3 	.word	0x080066a3

0800563c <_printf_common>:
 800563c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005640:	4616      	mov	r6, r2
 8005642:	4699      	mov	r9, r3
 8005644:	688a      	ldr	r2, [r1, #8]
 8005646:	690b      	ldr	r3, [r1, #16]
 8005648:	4607      	mov	r7, r0
 800564a:	4293      	cmp	r3, r2
 800564c:	bfb8      	it	lt
 800564e:	4613      	movlt	r3, r2
 8005650:	6033      	str	r3, [r6, #0]
 8005652:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005656:	460c      	mov	r4, r1
 8005658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800565c:	b10a      	cbz	r2, 8005662 <_printf_common+0x26>
 800565e:	3301      	adds	r3, #1
 8005660:	6033      	str	r3, [r6, #0]
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	0699      	lsls	r1, r3, #26
 8005666:	bf42      	ittt	mi
 8005668:	6833      	ldrmi	r3, [r6, #0]
 800566a:	3302      	addmi	r3, #2
 800566c:	6033      	strmi	r3, [r6, #0]
 800566e:	6825      	ldr	r5, [r4, #0]
 8005670:	f015 0506 	ands.w	r5, r5, #6
 8005674:	d106      	bne.n	8005684 <_printf_common+0x48>
 8005676:	f104 0a19 	add.w	sl, r4, #25
 800567a:	68e3      	ldr	r3, [r4, #12]
 800567c:	6832      	ldr	r2, [r6, #0]
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	42ab      	cmp	r3, r5
 8005682:	dc28      	bgt.n	80056d6 <_printf_common+0x9a>
 8005684:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005688:	1e13      	subs	r3, r2, #0
 800568a:	6822      	ldr	r2, [r4, #0]
 800568c:	bf18      	it	ne
 800568e:	2301      	movne	r3, #1
 8005690:	0692      	lsls	r2, r2, #26
 8005692:	d42d      	bmi.n	80056f0 <_printf_common+0xb4>
 8005694:	4649      	mov	r1, r9
 8005696:	4638      	mov	r0, r7
 8005698:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800569c:	47c0      	blx	r8
 800569e:	3001      	adds	r0, #1
 80056a0:	d020      	beq.n	80056e4 <_printf_common+0xa8>
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	68e5      	ldr	r5, [r4, #12]
 80056a6:	f003 0306 	and.w	r3, r3, #6
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	bf18      	it	ne
 80056ae:	2500      	movne	r5, #0
 80056b0:	6832      	ldr	r2, [r6, #0]
 80056b2:	f04f 0600 	mov.w	r6, #0
 80056b6:	68a3      	ldr	r3, [r4, #8]
 80056b8:	bf08      	it	eq
 80056ba:	1aad      	subeq	r5, r5, r2
 80056bc:	6922      	ldr	r2, [r4, #16]
 80056be:	bf08      	it	eq
 80056c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c4:	4293      	cmp	r3, r2
 80056c6:	bfc4      	itt	gt
 80056c8:	1a9b      	subgt	r3, r3, r2
 80056ca:	18ed      	addgt	r5, r5, r3
 80056cc:	341a      	adds	r4, #26
 80056ce:	42b5      	cmp	r5, r6
 80056d0:	d11a      	bne.n	8005708 <_printf_common+0xcc>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e008      	b.n	80056e8 <_printf_common+0xac>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4652      	mov	r2, sl
 80056da:	4649      	mov	r1, r9
 80056dc:	4638      	mov	r0, r7
 80056de:	47c0      	blx	r8
 80056e0:	3001      	adds	r0, #1
 80056e2:	d103      	bne.n	80056ec <_printf_common+0xb0>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	3501      	adds	r5, #1
 80056ee:	e7c4      	b.n	800567a <_printf_common+0x3e>
 80056f0:	2030      	movs	r0, #48	; 0x30
 80056f2:	18e1      	adds	r1, r4, r3
 80056f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056fe:	4422      	add	r2, r4
 8005700:	3302      	adds	r3, #2
 8005702:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005706:	e7c5      	b.n	8005694 <_printf_common+0x58>
 8005708:	2301      	movs	r3, #1
 800570a:	4622      	mov	r2, r4
 800570c:	4649      	mov	r1, r9
 800570e:	4638      	mov	r0, r7
 8005710:	47c0      	blx	r8
 8005712:	3001      	adds	r0, #1
 8005714:	d0e6      	beq.n	80056e4 <_printf_common+0xa8>
 8005716:	3601      	adds	r6, #1
 8005718:	e7d9      	b.n	80056ce <_printf_common+0x92>
	...

0800571c <_printf_i>:
 800571c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	460c      	mov	r4, r1
 8005722:	7e27      	ldrb	r7, [r4, #24]
 8005724:	4691      	mov	r9, r2
 8005726:	2f78      	cmp	r7, #120	; 0x78
 8005728:	4680      	mov	r8, r0
 800572a:	469a      	mov	sl, r3
 800572c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800572e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005732:	d807      	bhi.n	8005744 <_printf_i+0x28>
 8005734:	2f62      	cmp	r7, #98	; 0x62
 8005736:	d80a      	bhi.n	800574e <_printf_i+0x32>
 8005738:	2f00      	cmp	r7, #0
 800573a:	f000 80d9 	beq.w	80058f0 <_printf_i+0x1d4>
 800573e:	2f58      	cmp	r7, #88	; 0x58
 8005740:	f000 80a4 	beq.w	800588c <_printf_i+0x170>
 8005744:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800574c:	e03a      	b.n	80057c4 <_printf_i+0xa8>
 800574e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005752:	2b15      	cmp	r3, #21
 8005754:	d8f6      	bhi.n	8005744 <_printf_i+0x28>
 8005756:	a001      	add	r0, pc, #4	; (adr r0, 800575c <_printf_i+0x40>)
 8005758:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057c9 	.word	0x080057c9
 8005764:	08005745 	.word	0x08005745
 8005768:	08005745 	.word	0x08005745
 800576c:	08005745 	.word	0x08005745
 8005770:	08005745 	.word	0x08005745
 8005774:	080057c9 	.word	0x080057c9
 8005778:	08005745 	.word	0x08005745
 800577c:	08005745 	.word	0x08005745
 8005780:	08005745 	.word	0x08005745
 8005784:	08005745 	.word	0x08005745
 8005788:	080058d7 	.word	0x080058d7
 800578c:	080057f9 	.word	0x080057f9
 8005790:	080058b9 	.word	0x080058b9
 8005794:	08005745 	.word	0x08005745
 8005798:	08005745 	.word	0x08005745
 800579c:	080058f9 	.word	0x080058f9
 80057a0:	08005745 	.word	0x08005745
 80057a4:	080057f9 	.word	0x080057f9
 80057a8:	08005745 	.word	0x08005745
 80057ac:	08005745 	.word	0x08005745
 80057b0:	080058c1 	.word	0x080058c1
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057ba:	1d1a      	adds	r2, r3, #4
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	600a      	str	r2, [r1, #0]
 80057c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057c4:	2301      	movs	r3, #1
 80057c6:	e0a4      	b.n	8005912 <_printf_i+0x1f6>
 80057c8:	6825      	ldr	r5, [r4, #0]
 80057ca:	6808      	ldr	r0, [r1, #0]
 80057cc:	062e      	lsls	r6, r5, #24
 80057ce:	f100 0304 	add.w	r3, r0, #4
 80057d2:	d50a      	bpl.n	80057ea <_printf_i+0xce>
 80057d4:	6805      	ldr	r5, [r0, #0]
 80057d6:	600b      	str	r3, [r1, #0]
 80057d8:	2d00      	cmp	r5, #0
 80057da:	da03      	bge.n	80057e4 <_printf_i+0xc8>
 80057dc:	232d      	movs	r3, #45	; 0x2d
 80057de:	426d      	negs	r5, r5
 80057e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057e4:	230a      	movs	r3, #10
 80057e6:	485e      	ldr	r0, [pc, #376]	; (8005960 <_printf_i+0x244>)
 80057e8:	e019      	b.n	800581e <_printf_i+0x102>
 80057ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057ee:	6805      	ldr	r5, [r0, #0]
 80057f0:	600b      	str	r3, [r1, #0]
 80057f2:	bf18      	it	ne
 80057f4:	b22d      	sxthne	r5, r5
 80057f6:	e7ef      	b.n	80057d8 <_printf_i+0xbc>
 80057f8:	680b      	ldr	r3, [r1, #0]
 80057fa:	6825      	ldr	r5, [r4, #0]
 80057fc:	1d18      	adds	r0, r3, #4
 80057fe:	6008      	str	r0, [r1, #0]
 8005800:	0628      	lsls	r0, r5, #24
 8005802:	d501      	bpl.n	8005808 <_printf_i+0xec>
 8005804:	681d      	ldr	r5, [r3, #0]
 8005806:	e002      	b.n	800580e <_printf_i+0xf2>
 8005808:	0669      	lsls	r1, r5, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0xe8>
 800580c:	881d      	ldrh	r5, [r3, #0]
 800580e:	2f6f      	cmp	r7, #111	; 0x6f
 8005810:	bf0c      	ite	eq
 8005812:	2308      	moveq	r3, #8
 8005814:	230a      	movne	r3, #10
 8005816:	4852      	ldr	r0, [pc, #328]	; (8005960 <_printf_i+0x244>)
 8005818:	2100      	movs	r1, #0
 800581a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800581e:	6866      	ldr	r6, [r4, #4]
 8005820:	2e00      	cmp	r6, #0
 8005822:	bfa8      	it	ge
 8005824:	6821      	ldrge	r1, [r4, #0]
 8005826:	60a6      	str	r6, [r4, #8]
 8005828:	bfa4      	itt	ge
 800582a:	f021 0104 	bicge.w	r1, r1, #4
 800582e:	6021      	strge	r1, [r4, #0]
 8005830:	b90d      	cbnz	r5, 8005836 <_printf_i+0x11a>
 8005832:	2e00      	cmp	r6, #0
 8005834:	d04d      	beq.n	80058d2 <_printf_i+0x1b6>
 8005836:	4616      	mov	r6, r2
 8005838:	fbb5 f1f3 	udiv	r1, r5, r3
 800583c:	fb03 5711 	mls	r7, r3, r1, r5
 8005840:	5dc7      	ldrb	r7, [r0, r7]
 8005842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005846:	462f      	mov	r7, r5
 8005848:	42bb      	cmp	r3, r7
 800584a:	460d      	mov	r5, r1
 800584c:	d9f4      	bls.n	8005838 <_printf_i+0x11c>
 800584e:	2b08      	cmp	r3, #8
 8005850:	d10b      	bne.n	800586a <_printf_i+0x14e>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	07df      	lsls	r7, r3, #31
 8005856:	d508      	bpl.n	800586a <_printf_i+0x14e>
 8005858:	6923      	ldr	r3, [r4, #16]
 800585a:	6861      	ldr	r1, [r4, #4]
 800585c:	4299      	cmp	r1, r3
 800585e:	bfde      	ittt	le
 8005860:	2330      	movle	r3, #48	; 0x30
 8005862:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005866:	f106 36ff 	addle.w	r6, r6, #4294967295
 800586a:	1b92      	subs	r2, r2, r6
 800586c:	6122      	str	r2, [r4, #16]
 800586e:	464b      	mov	r3, r9
 8005870:	4621      	mov	r1, r4
 8005872:	4640      	mov	r0, r8
 8005874:	f8cd a000 	str.w	sl, [sp]
 8005878:	aa03      	add	r2, sp, #12
 800587a:	f7ff fedf 	bl	800563c <_printf_common>
 800587e:	3001      	adds	r0, #1
 8005880:	d14c      	bne.n	800591c <_printf_i+0x200>
 8005882:	f04f 30ff 	mov.w	r0, #4294967295
 8005886:	b004      	add	sp, #16
 8005888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588c:	4834      	ldr	r0, [pc, #208]	; (8005960 <_printf_i+0x244>)
 800588e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005892:	680e      	ldr	r6, [r1, #0]
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	f856 5b04 	ldr.w	r5, [r6], #4
 800589a:	061f      	lsls	r7, r3, #24
 800589c:	600e      	str	r6, [r1, #0]
 800589e:	d514      	bpl.n	80058ca <_printf_i+0x1ae>
 80058a0:	07d9      	lsls	r1, r3, #31
 80058a2:	bf44      	itt	mi
 80058a4:	f043 0320 	orrmi.w	r3, r3, #32
 80058a8:	6023      	strmi	r3, [r4, #0]
 80058aa:	b91d      	cbnz	r5, 80058b4 <_printf_i+0x198>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	f023 0320 	bic.w	r3, r3, #32
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	2310      	movs	r3, #16
 80058b6:	e7af      	b.n	8005818 <_printf_i+0xfc>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f043 0320 	orr.w	r3, r3, #32
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	2378      	movs	r3, #120	; 0x78
 80058c2:	4828      	ldr	r0, [pc, #160]	; (8005964 <_printf_i+0x248>)
 80058c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058c8:	e7e3      	b.n	8005892 <_printf_i+0x176>
 80058ca:	065e      	lsls	r6, r3, #25
 80058cc:	bf48      	it	mi
 80058ce:	b2ad      	uxthmi	r5, r5
 80058d0:	e7e6      	b.n	80058a0 <_printf_i+0x184>
 80058d2:	4616      	mov	r6, r2
 80058d4:	e7bb      	b.n	800584e <_printf_i+0x132>
 80058d6:	680b      	ldr	r3, [r1, #0]
 80058d8:	6826      	ldr	r6, [r4, #0]
 80058da:	1d1d      	adds	r5, r3, #4
 80058dc:	6960      	ldr	r0, [r4, #20]
 80058de:	600d      	str	r5, [r1, #0]
 80058e0:	0635      	lsls	r5, r6, #24
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	d501      	bpl.n	80058ea <_printf_i+0x1ce>
 80058e6:	6018      	str	r0, [r3, #0]
 80058e8:	e002      	b.n	80058f0 <_printf_i+0x1d4>
 80058ea:	0671      	lsls	r1, r6, #25
 80058ec:	d5fb      	bpl.n	80058e6 <_printf_i+0x1ca>
 80058ee:	8018      	strh	r0, [r3, #0]
 80058f0:	2300      	movs	r3, #0
 80058f2:	4616      	mov	r6, r2
 80058f4:	6123      	str	r3, [r4, #16]
 80058f6:	e7ba      	b.n	800586e <_printf_i+0x152>
 80058f8:	680b      	ldr	r3, [r1, #0]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	600a      	str	r2, [r1, #0]
 80058fe:	681e      	ldr	r6, [r3, #0]
 8005900:	2100      	movs	r1, #0
 8005902:	4630      	mov	r0, r6
 8005904:	6862      	ldr	r2, [r4, #4]
 8005906:	f000 f82f 	bl	8005968 <memchr>
 800590a:	b108      	cbz	r0, 8005910 <_printf_i+0x1f4>
 800590c:	1b80      	subs	r0, r0, r6
 800590e:	6060      	str	r0, [r4, #4]
 8005910:	6863      	ldr	r3, [r4, #4]
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	2300      	movs	r3, #0
 8005916:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800591a:	e7a8      	b.n	800586e <_printf_i+0x152>
 800591c:	4632      	mov	r2, r6
 800591e:	4649      	mov	r1, r9
 8005920:	4640      	mov	r0, r8
 8005922:	6923      	ldr	r3, [r4, #16]
 8005924:	47d0      	blx	sl
 8005926:	3001      	adds	r0, #1
 8005928:	d0ab      	beq.n	8005882 <_printf_i+0x166>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	079b      	lsls	r3, r3, #30
 800592e:	d413      	bmi.n	8005958 <_printf_i+0x23c>
 8005930:	68e0      	ldr	r0, [r4, #12]
 8005932:	9b03      	ldr	r3, [sp, #12]
 8005934:	4298      	cmp	r0, r3
 8005936:	bfb8      	it	lt
 8005938:	4618      	movlt	r0, r3
 800593a:	e7a4      	b.n	8005886 <_printf_i+0x16a>
 800593c:	2301      	movs	r3, #1
 800593e:	4632      	mov	r2, r6
 8005940:	4649      	mov	r1, r9
 8005942:	4640      	mov	r0, r8
 8005944:	47d0      	blx	sl
 8005946:	3001      	adds	r0, #1
 8005948:	d09b      	beq.n	8005882 <_printf_i+0x166>
 800594a:	3501      	adds	r5, #1
 800594c:	68e3      	ldr	r3, [r4, #12]
 800594e:	9903      	ldr	r1, [sp, #12]
 8005950:	1a5b      	subs	r3, r3, r1
 8005952:	42ab      	cmp	r3, r5
 8005954:	dcf2      	bgt.n	800593c <_printf_i+0x220>
 8005956:	e7eb      	b.n	8005930 <_printf_i+0x214>
 8005958:	2500      	movs	r5, #0
 800595a:	f104 0619 	add.w	r6, r4, #25
 800595e:	e7f5      	b.n	800594c <_printf_i+0x230>
 8005960:	080066ae 	.word	0x080066ae
 8005964:	080066bf 	.word	0x080066bf

08005968 <memchr>:
 8005968:	4603      	mov	r3, r0
 800596a:	b510      	push	{r4, lr}
 800596c:	b2c9      	uxtb	r1, r1
 800596e:	4402      	add	r2, r0
 8005970:	4293      	cmp	r3, r2
 8005972:	4618      	mov	r0, r3
 8005974:	d101      	bne.n	800597a <memchr+0x12>
 8005976:	2000      	movs	r0, #0
 8005978:	e003      	b.n	8005982 <memchr+0x1a>
 800597a:	7804      	ldrb	r4, [r0, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	428c      	cmp	r4, r1
 8005980:	d1f6      	bne.n	8005970 <memchr+0x8>
 8005982:	bd10      	pop	{r4, pc}

08005984 <_free_r>:
 8005984:	b538      	push	{r3, r4, r5, lr}
 8005986:	4605      	mov	r5, r0
 8005988:	2900      	cmp	r1, #0
 800598a:	d043      	beq.n	8005a14 <_free_r+0x90>
 800598c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005990:	1f0c      	subs	r4, r1, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	bfb8      	it	lt
 8005996:	18e4      	addlt	r4, r4, r3
 8005998:	f000 f8d0 	bl	8005b3c <__malloc_lock>
 800599c:	4a1e      	ldr	r2, [pc, #120]	; (8005a18 <_free_r+0x94>)
 800599e:	6813      	ldr	r3, [r2, #0]
 80059a0:	4610      	mov	r0, r2
 80059a2:	b933      	cbnz	r3, 80059b2 <_free_r+0x2e>
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	6014      	str	r4, [r2, #0]
 80059a8:	4628      	mov	r0, r5
 80059aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ae:	f000 b8cb 	b.w	8005b48 <__malloc_unlock>
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	d90a      	bls.n	80059cc <_free_r+0x48>
 80059b6:	6821      	ldr	r1, [r4, #0]
 80059b8:	1862      	adds	r2, r4, r1
 80059ba:	4293      	cmp	r3, r2
 80059bc:	bf01      	itttt	eq
 80059be:	681a      	ldreq	r2, [r3, #0]
 80059c0:	685b      	ldreq	r3, [r3, #4]
 80059c2:	1852      	addeq	r2, r2, r1
 80059c4:	6022      	streq	r2, [r4, #0]
 80059c6:	6063      	str	r3, [r4, #4]
 80059c8:	6004      	str	r4, [r0, #0]
 80059ca:	e7ed      	b.n	80059a8 <_free_r+0x24>
 80059cc:	461a      	mov	r2, r3
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	b10b      	cbz	r3, 80059d6 <_free_r+0x52>
 80059d2:	42a3      	cmp	r3, r4
 80059d4:	d9fa      	bls.n	80059cc <_free_r+0x48>
 80059d6:	6811      	ldr	r1, [r2, #0]
 80059d8:	1850      	adds	r0, r2, r1
 80059da:	42a0      	cmp	r0, r4
 80059dc:	d10b      	bne.n	80059f6 <_free_r+0x72>
 80059de:	6820      	ldr	r0, [r4, #0]
 80059e0:	4401      	add	r1, r0
 80059e2:	1850      	adds	r0, r2, r1
 80059e4:	4283      	cmp	r3, r0
 80059e6:	6011      	str	r1, [r2, #0]
 80059e8:	d1de      	bne.n	80059a8 <_free_r+0x24>
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4401      	add	r1, r0
 80059f0:	6011      	str	r1, [r2, #0]
 80059f2:	6053      	str	r3, [r2, #4]
 80059f4:	e7d8      	b.n	80059a8 <_free_r+0x24>
 80059f6:	d902      	bls.n	80059fe <_free_r+0x7a>
 80059f8:	230c      	movs	r3, #12
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	e7d4      	b.n	80059a8 <_free_r+0x24>
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	1821      	adds	r1, r4, r0
 8005a02:	428b      	cmp	r3, r1
 8005a04:	bf01      	itttt	eq
 8005a06:	6819      	ldreq	r1, [r3, #0]
 8005a08:	685b      	ldreq	r3, [r3, #4]
 8005a0a:	1809      	addeq	r1, r1, r0
 8005a0c:	6021      	streq	r1, [r4, #0]
 8005a0e:	6063      	str	r3, [r4, #4]
 8005a10:	6054      	str	r4, [r2, #4]
 8005a12:	e7c9      	b.n	80059a8 <_free_r+0x24>
 8005a14:	bd38      	pop	{r3, r4, r5, pc}
 8005a16:	bf00      	nop
 8005a18:	200002a4 	.word	0x200002a4

08005a1c <_malloc_r>:
 8005a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1e:	1ccd      	adds	r5, r1, #3
 8005a20:	f025 0503 	bic.w	r5, r5, #3
 8005a24:	3508      	adds	r5, #8
 8005a26:	2d0c      	cmp	r5, #12
 8005a28:	bf38      	it	cc
 8005a2a:	250c      	movcc	r5, #12
 8005a2c:	2d00      	cmp	r5, #0
 8005a2e:	4606      	mov	r6, r0
 8005a30:	db01      	blt.n	8005a36 <_malloc_r+0x1a>
 8005a32:	42a9      	cmp	r1, r5
 8005a34:	d903      	bls.n	8005a3e <_malloc_r+0x22>
 8005a36:	230c      	movs	r3, #12
 8005a38:	6033      	str	r3, [r6, #0]
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3e:	f000 f87d 	bl	8005b3c <__malloc_lock>
 8005a42:	4921      	ldr	r1, [pc, #132]	; (8005ac8 <_malloc_r+0xac>)
 8005a44:	680a      	ldr	r2, [r1, #0]
 8005a46:	4614      	mov	r4, r2
 8005a48:	b99c      	cbnz	r4, 8005a72 <_malloc_r+0x56>
 8005a4a:	4f20      	ldr	r7, [pc, #128]	; (8005acc <_malloc_r+0xb0>)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	b923      	cbnz	r3, 8005a5a <_malloc_r+0x3e>
 8005a50:	4621      	mov	r1, r4
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f862 	bl	8005b1c <_sbrk_r>
 8005a58:	6038      	str	r0, [r7, #0]
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f000 f85d 	bl	8005b1c <_sbrk_r>
 8005a62:	1c43      	adds	r3, r0, #1
 8005a64:	d123      	bne.n	8005aae <_malloc_r+0x92>
 8005a66:	230c      	movs	r3, #12
 8005a68:	4630      	mov	r0, r6
 8005a6a:	6033      	str	r3, [r6, #0]
 8005a6c:	f000 f86c 	bl	8005b48 <__malloc_unlock>
 8005a70:	e7e3      	b.n	8005a3a <_malloc_r+0x1e>
 8005a72:	6823      	ldr	r3, [r4, #0]
 8005a74:	1b5b      	subs	r3, r3, r5
 8005a76:	d417      	bmi.n	8005aa8 <_malloc_r+0x8c>
 8005a78:	2b0b      	cmp	r3, #11
 8005a7a:	d903      	bls.n	8005a84 <_malloc_r+0x68>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	441c      	add	r4, r3
 8005a80:	6025      	str	r5, [r4, #0]
 8005a82:	e004      	b.n	8005a8e <_malloc_r+0x72>
 8005a84:	6863      	ldr	r3, [r4, #4]
 8005a86:	42a2      	cmp	r2, r4
 8005a88:	bf0c      	ite	eq
 8005a8a:	600b      	streq	r3, [r1, #0]
 8005a8c:	6053      	strne	r3, [r2, #4]
 8005a8e:	4630      	mov	r0, r6
 8005a90:	f000 f85a 	bl	8005b48 <__malloc_unlock>
 8005a94:	f104 000b 	add.w	r0, r4, #11
 8005a98:	1d23      	adds	r3, r4, #4
 8005a9a:	f020 0007 	bic.w	r0, r0, #7
 8005a9e:	1ac2      	subs	r2, r0, r3
 8005aa0:	d0cc      	beq.n	8005a3c <_malloc_r+0x20>
 8005aa2:	1a1b      	subs	r3, r3, r0
 8005aa4:	50a3      	str	r3, [r4, r2]
 8005aa6:	e7c9      	b.n	8005a3c <_malloc_r+0x20>
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	6864      	ldr	r4, [r4, #4]
 8005aac:	e7cc      	b.n	8005a48 <_malloc_r+0x2c>
 8005aae:	1cc4      	adds	r4, r0, #3
 8005ab0:	f024 0403 	bic.w	r4, r4, #3
 8005ab4:	42a0      	cmp	r0, r4
 8005ab6:	d0e3      	beq.n	8005a80 <_malloc_r+0x64>
 8005ab8:	1a21      	subs	r1, r4, r0
 8005aba:	4630      	mov	r0, r6
 8005abc:	f000 f82e 	bl	8005b1c <_sbrk_r>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d1dd      	bne.n	8005a80 <_malloc_r+0x64>
 8005ac4:	e7cf      	b.n	8005a66 <_malloc_r+0x4a>
 8005ac6:	bf00      	nop
 8005ac8:	200002a4 	.word	0x200002a4
 8005acc:	200002a8 	.word	0x200002a8

08005ad0 <_realloc_r>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	4607      	mov	r7, r0
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	b921      	cbnz	r1, 8005ae4 <_realloc_r+0x14>
 8005ada:	4611      	mov	r1, r2
 8005adc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005ae0:	f7ff bf9c 	b.w	8005a1c <_malloc_r>
 8005ae4:	b922      	cbnz	r2, 8005af0 <_realloc_r+0x20>
 8005ae6:	f7ff ff4d 	bl	8005984 <_free_r>
 8005aea:	4625      	mov	r5, r4
 8005aec:	4628      	mov	r0, r5
 8005aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005af0:	f000 f830 	bl	8005b54 <_malloc_usable_size_r>
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d20f      	bcs.n	8005b18 <_realloc_r+0x48>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4638      	mov	r0, r7
 8005afc:	f7ff ff8e 	bl	8005a1c <_malloc_r>
 8005b00:	4605      	mov	r5, r0
 8005b02:	2800      	cmp	r0, #0
 8005b04:	d0f2      	beq.n	8005aec <_realloc_r+0x1c>
 8005b06:	4631      	mov	r1, r6
 8005b08:	4622      	mov	r2, r4
 8005b0a:	f7ff fbeb 	bl	80052e4 <memcpy>
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7ff ff37 	bl	8005984 <_free_r>
 8005b16:	e7e9      	b.n	8005aec <_realloc_r+0x1c>
 8005b18:	4635      	mov	r5, r6
 8005b1a:	e7e7      	b.n	8005aec <_realloc_r+0x1c>

08005b1c <_sbrk_r>:
 8005b1c:	b538      	push	{r3, r4, r5, lr}
 8005b1e:	2300      	movs	r3, #0
 8005b20:	4d05      	ldr	r5, [pc, #20]	; (8005b38 <_sbrk_r+0x1c>)
 8005b22:	4604      	mov	r4, r0
 8005b24:	4608      	mov	r0, r1
 8005b26:	602b      	str	r3, [r5, #0]
 8005b28:	f7fc fa58 	bl	8001fdc <_sbrk>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d102      	bne.n	8005b36 <_sbrk_r+0x1a>
 8005b30:	682b      	ldr	r3, [r5, #0]
 8005b32:	b103      	cbz	r3, 8005b36 <_sbrk_r+0x1a>
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	20001914 	.word	0x20001914

08005b3c <__malloc_lock>:
 8005b3c:	4801      	ldr	r0, [pc, #4]	; (8005b44 <__malloc_lock+0x8>)
 8005b3e:	f000 b811 	b.w	8005b64 <__retarget_lock_acquire_recursive>
 8005b42:	bf00      	nop
 8005b44:	2000191c 	.word	0x2000191c

08005b48 <__malloc_unlock>:
 8005b48:	4801      	ldr	r0, [pc, #4]	; (8005b50 <__malloc_unlock+0x8>)
 8005b4a:	f000 b80c 	b.w	8005b66 <__retarget_lock_release_recursive>
 8005b4e:	bf00      	nop
 8005b50:	2000191c 	.word	0x2000191c

08005b54 <_malloc_usable_size_r>:
 8005b54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b58:	1f18      	subs	r0, r3, #4
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	bfbc      	itt	lt
 8005b5e:	580b      	ldrlt	r3, [r1, r0]
 8005b60:	18c0      	addlt	r0, r0, r3
 8005b62:	4770      	bx	lr

08005b64 <__retarget_lock_acquire_recursive>:
 8005b64:	4770      	bx	lr

08005b66 <__retarget_lock_release_recursive>:
 8005b66:	4770      	bx	lr

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
