
BaseN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae10  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0800af1c  0800af1c  0001af1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdcc  0800bdcc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bdcc  0800bdcc  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bdcc  0800bdcc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdcc  0800bdcc  0001bdcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdd0  0800bdd0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800bdd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001918  20000090  0800be60  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200019a8  0800be60  000219a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f702  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005764  00000000  00000000  0004f7b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001c757  00000000  00000000  00054f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00071678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00004330  00000000  00000000  000729a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c0b4  00000000  00000000  00076cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002d201  00000000  00000000  00092d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097673  00000000  00000000  000bff8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00157600  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d54  00000000  00000000  00157654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	0800af04 	.word	0x0800af04

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	0800af04 	.word	0x0800af04

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <__aeabi_f2uiz>:
 8000750:	0042      	lsls	r2, r0, #1
 8000752:	d20e      	bcs.n	8000772 <__aeabi_f2uiz+0x22>
 8000754:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000758:	d30b      	bcc.n	8000772 <__aeabi_f2uiz+0x22>
 800075a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800075e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000762:	d409      	bmi.n	8000778 <__aeabi_f2uiz+0x28>
 8000764:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076c:	fa23 f002 	lsr.w	r0, r3, r2
 8000770:	4770      	bx	lr
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	4770      	bx	lr
 8000778:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800077c:	d101      	bne.n	8000782 <__aeabi_f2uiz+0x32>
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	d102      	bne.n	8000788 <__aeabi_f2uiz+0x38>
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <NetSendAsync>:
{
	SendCommand (UARTW_DEBUGOFF, "0");
}

void NetSendAsync (NetHandler_t *h, char *ptr)
{
 8000790:	b570      	push	{r4, r5, r6, lr}
	if (h->nMessages < 7)
 8000792:	f890 6630 	ldrb.w	r6, [r0, #1584]	; 0x630
 8000796:	2e06      	cmp	r6, #6
 8000798:	d900      	bls.n	800079c <NetSendAsync+0xc>
		{
			memcpy (h->messages[h->nMessages], ptr, strlen (ptr));
			h->nMessages++;
		}
}
 800079a:	bd70      	pop	{r4, r5, r6, pc}
			memcpy (h->messages[h->nMessages], ptr, strlen (ptr));
 800079c:	4604      	mov	r4, r0
 800079e:	4608      	mov	r0, r1
 80007a0:	460d      	mov	r5, r1
 80007a2:	f7ff fcd3 	bl	800014c <strlen>
 80007a6:	eb04 16c6 	add.w	r6, r4, r6, lsl #7
 80007aa:	4602      	mov	r2, r0
 80007ac:	4629      	mov	r1, r5
 80007ae:	f506 700c 	add.w	r0, r6, #560	; 0x230
 80007b2:	f009 ff5d 	bl	800a670 <memcpy>
			h->nMessages++;
 80007b6:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80007ba:	3301      	adds	r3, #1
 80007bc:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
}
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	bf00      	nop

080007c4 <NetRefreshNetworkList>:
}

void NetRefreshNetworkList (NetHandler_t *h)
{
	h->netRefreshDone = false;
	h->netRefreshInProgress=true;
 80007c4:	2301      	movs	r3, #1
{
 80007c6:	b510      	push	{r4, lr}
	memset (h->nets, 0, sizeof(h->nets));
 80007c8:	f44f 7200 	mov.w	r2, #512	; 0x200
{
 80007cc:	b0c0      	sub	sp, #256	; 0x100
	h->netRefreshInProgress=true;
 80007ce:	80c3      	strh	r3, [r0, #6]
	memset (h->nets, 0, sizeof(h->nets));
 80007d0:	2100      	movs	r1, #0
 80007d2:	3030      	adds	r0, #48	; 0x30
 80007d4:	f009 ff74 	bl	800a6c0 <memset>
	char tmpStr[256] = { 0, };
 80007d8:	2100      	movs	r1, #0
 80007da:	22fc      	movs	r2, #252	; 0xfc
 80007dc:	a801      	add	r0, sp, #4
 80007de:	9100      	str	r1, [sp, #0]
 80007e0:	f009 ff6e 	bl	800a6c0 <memset>
	sprintf (tmpStr, "<%c%s", com, data);
 80007e4:	2257      	movs	r2, #87	; 0x57
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <NetRefreshNetworkList+0x4c>)
 80007e8:	490a      	ldr	r1, [pc, #40]	; (8000814 <NetRefreshNetworkList+0x50>)
 80007ea:	4668      	mov	r0, sp
 80007ec:	f009 ff70 	bl	800a6d0 <siprintf>
	len = strlen (tmpStr);
 80007f0:	4668      	mov	r0, sp
 80007f2:	f7ff fcab 	bl	800014c <strlen>
	tmpStr[len] = '>';
 80007f6:	243e      	movs	r4, #62	; 0x3e
	HAL_UART_Transmit (&huart1, (uint8_t*) tmpStr, len + 1, 1000);
 80007f8:	1c42      	adds	r2, r0, #1
	tmpStr[len] = '>';
 80007fa:	f80d 4000 	strb.w	r4, [sp, r0]
	HAL_UART_Transmit (&huart1, (uint8_t*) tmpStr, len + 1, 1000);
 80007fe:	4669      	mov	r1, sp
 8000800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000804:	b292      	uxth	r2, r2
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <NetRefreshNetworkList+0x54>)
 8000808:	f009 fcbe 	bl	800a188 <HAL_UART_Transmit>
	SendCommand (UARTW_WIFIREFRESH, "");
}
 800080c:	b040      	add	sp, #256	; 0x100
 800080e:	bd10      	pop	{r4, pc}
 8000810:	0800bd98 	.word	0x0800bd98
 8000814:	0800af1c 	.word	0x0800af1c
 8000818:	20000bc0 	.word	0x20000bc0

0800081c <UC1609_Init>:
									uint16_t csGpioPin,
									GPIO_TypeDef* cdGpioPort,
									uint16_t cdGpioPin,
									GPIO_TypeDef* rstGpioPort,
									uint16_t rstGpioPin)
{
 800081c:	468c      	mov	ip, r1
 800081e:	4611      	mov	r1, r2
 8000820:	4602      	mov	r2, r0
 8000822:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	hspi = spiHandler;
 8000826:	4e67      	ldr	r6, [pc, #412]	; (80009c4 <UC1609_Init+0x1a8>)
{
 8000828:	b082      	sub	sp, #8
	csPort=csGpioPort;
	csPin=csGpioPin;
	cdPort=cdGpioPort;
 800082a:	4f67      	ldr	r7, [pc, #412]	; (80009c8 <UC1609_Init+0x1ac>)
	csPort=csGpioPort;
 800082c:	4c67      	ldr	r4, [pc, #412]	; (80009cc <UC1609_Init+0x1b0>)
	csPin=csGpioPin;
 800082e:	4d68      	ldr	r5, [pc, #416]	; (80009d0 <UC1609_Init+0x1b4>)
{
 8000830:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
	cdPin=cdGpioPin;
 8000834:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80009d4 <UC1609_Init+0x1b8>
{
 8000838:	980b      	ldr	r0, [sp, #44]	; 0x2c
	rstPort=rstGpioPort;
 800083a:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80009d8 <UC1609_Init+0x1bc>
	rstPin=rstGpioPin;
 800083e:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80009dc <UC1609_Init+0x1c0>
	hspi = spiHandler;
 8000842:	6032      	str	r2, [r6, #0]
{
 8000844:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	cdPort=cdGpioPort;
 8000848:	603b      	str	r3, [r7, #0]
	csPort=csGpioPort;
 800084a:	f8c4 c000 	str.w	ip, [r4]
	csPin=csGpioPin;
 800084e:	8029      	strh	r1, [r5, #0]
	cdPin=cdGpioPin;
 8000850:	f8a8 e000 	strh.w	lr, [r8]
	rstPort=rstGpioPort;
 8000854:	f8c9 0000 	str.w	r0, [r9]
	rstPin=rstGpioPin;
 8000858:	f8aa 2000 	strh.w	r2, [sl]
if (rstPin==0 || rstPort==0)
 800085c:	b1a2      	cbz	r2, 8000888 <UC1609_Init+0x6c>
 800085e:	b198      	cbz	r0, 8000888 <UC1609_Init+0x6c>
	HAL_GPIO_WritePin (rstPort, rstPin, 0);
 8000860:	4611      	mov	r1, r2
 8000862:	2200      	movs	r2, #0
 8000864:	f007 fb92 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000868:	2001      	movs	r0, #1
 800086a:	f006 fc7d 	bl	8007168 <HAL_Delay>
	HAL_GPIO_WritePin (rstPort, rstPin, 1);
 800086e:	f8d9 0000 	ldr.w	r0, [r9]
 8000872:	2201      	movs	r2, #1
 8000874:	f8ba 1000 	ldrh.w	r1, [sl]
 8000878:	f007 fb88 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_Delay (5);
 800087c:	2005      	movs	r0, #5
 800087e:	f006 fc73 	bl	8007168 <HAL_Delay>
 8000882:	f10d 0907 	add.w	r9, sp, #7
}
 8000886:	e01c      	b.n	80008c2 <UC1609_Init+0xa6>
sendCommand(0b11100010);
 8000888:	23e2      	movs	r3, #226	; 0xe2
	HAL_GPIO_WritePin (csPort, csPin, 0);
 800088a:	4660      	mov	r0, ip
 800088c:	2200      	movs	r2, #0
 800088e:	f88d 3007 	strb.w	r3, [sp, #7]
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000892:	f10d 0907 	add.w	r9, sp, #7
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000896:	f007 fb79 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	f8b8 1000 	ldrh.w	r1, [r8]
 80008a0:	6838      	ldr	r0, [r7, #0]
 80008a2:	f007 fb73 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80008a6:	4649      	mov	r1, r9
 80008a8:	230a      	movs	r3, #10
 80008aa:	2201      	movs	r2, #1
 80008ac:	6830      	ldr	r0, [r6, #0]
 80008ae:	f008 fda9 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 80008b2:	6820      	ldr	r0, [r4, #0]
 80008b4:	2201      	movs	r2, #1
 80008b6:	8829      	ldrh	r1, [r5, #0]
 80008b8:	f007 fb68 	bl	8007f8c <HAL_GPIO_WritePin>
HAL_Delay (20);
 80008bc:	2014      	movs	r0, #20
 80008be:	f006 fc53 	bl	8007168 <HAL_Delay>
	}
else
	{
	UC1609_HardwareReset();
	}
	sendCommand (UC1609_CMD_MAPPING | MIRROR_X);
 80008c2:	23c4      	movs	r3, #196	; 0xc4
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80008c4:	8829      	ldrh	r1, [r5, #0]
 80008c6:	6820      	ldr	r0, [r4, #0]
 80008c8:	2200      	movs	r2, #0
 80008ca:	f88d 3007 	strb.w	r3, [sp, #7]
 80008ce:	f007 fb5d 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 80008d2:	f8b8 1000 	ldrh.w	r1, [r8]
 80008d6:	6838      	ldr	r0, [r7, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	f007 fb57 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80008de:	230a      	movs	r3, #10
 80008e0:	4649      	mov	r1, r9
 80008e2:	2201      	movs	r2, #1
 80008e4:	6830      	ldr	r0, [r6, #0]
 80008e6:	f008 fd8d 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 80008ea:	8829      	ldrh	r1, [r5, #0]
 80008ec:	6820      	ldr	r0, [r4, #0]
 80008ee:	2201      	movs	r2, #1
 80008f0:	f007 fb4c 	bl	8007f8c <HAL_GPIO_WritePin>
	sendCommand (UC1609_CMD_SET_BIAS_RATIO|DEFAULT_BIAS_RATIO);
 80008f4:	23eb      	movs	r3, #235	; 0xeb
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80008f6:	8829      	ldrh	r1, [r5, #0]
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	f88d 3007 	strb.w	r3, [sp, #7]
 8000900:	f007 fb44 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000904:	f8b8 1000 	ldrh.w	r1, [r8]
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	2200      	movs	r2, #0
 800090c:	f007 fb3e 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000910:	230a      	movs	r3, #10
 8000912:	4649      	mov	r1, r9
 8000914:	2201      	movs	r2, #1
 8000916:	6830      	ldr	r0, [r6, #0]
 8000918:	f008 fd74 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 800091c:	8829      	ldrh	r1, [r5, #0]
 800091e:	6820      	ldr	r0, [r4, #0]
 8000920:	2201      	movs	r2, #1
 8000922:	f007 fb33 	bl	8007f8c <HAL_GPIO_WritePin>
	sendCommand (UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 8000926:	2381      	movs	r3, #129	; 0x81
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000928:	8829      	ldrh	r1, [r5, #0]
 800092a:	6820      	ldr	r0, [r4, #0]
 800092c:	2200      	movs	r2, #0
 800092e:	f88d 3007 	strb.w	r3, [sp, #7]
 8000932:	f007 fb2b 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000936:	f8b8 1000 	ldrh.w	r1, [r8]
 800093a:	6838      	ldr	r0, [r7, #0]
 800093c:	2200      	movs	r2, #0
 800093e:	f007 fb25 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000942:	230a      	movs	r3, #10
 8000944:	4649      	mov	r1, r9
 8000946:	2201      	movs	r2, #1
 8000948:	6830      	ldr	r0, [r6, #0]
 800094a:	f008 fd5b 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 800094e:	8829      	ldrh	r1, [r5, #0]
 8000950:	6820      	ldr	r0, [r4, #0]
 8000952:	2201      	movs	r2, #1
 8000954:	f007 fb1a 	bl	8007f8c <HAL_GPIO_WritePin>
	sendCommand (IMHO_BEST_LOOKING_BIAS_RATIO);
 8000958:	2383      	movs	r3, #131	; 0x83
	HAL_GPIO_WritePin (csPort, csPin, 0);
 800095a:	8829      	ldrh	r1, [r5, #0]
 800095c:	6820      	ldr	r0, [r4, #0]
 800095e:	2200      	movs	r2, #0
 8000960:	f88d 3007 	strb.w	r3, [sp, #7]
 8000964:	f007 fb12 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000968:	f8b8 1000 	ldrh.w	r1, [r8]
 800096c:	6838      	ldr	r0, [r7, #0]
 800096e:	2200      	movs	r2, #0
 8000970:	f007 fb0c 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000974:	230a      	movs	r3, #10
 8000976:	4649      	mov	r1, r9
 8000978:	2201      	movs	r2, #1
 800097a:	6830      	ldr	r0, [r6, #0]
 800097c:	f008 fd42 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000980:	8829      	ldrh	r1, [r5, #0]
 8000982:	6820      	ldr	r0, [r4, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	f007 fb01 	bl	8007f8c <HAL_GPIO_WritePin>
}

void UC1609_Scroll (uint8_t lines)
{
lines%=64;
sendCommand(UC1609_CMD_SCROLL|lines);
 800098a:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_WritePin (csPort, csPin, 0);
 800098c:	8829      	ldrh	r1, [r5, #0]
 800098e:	6820      	ldr	r0, [r4, #0]
 8000990:	2200      	movs	r2, #0
 8000992:	f88d 3007 	strb.w	r3, [sp, #7]
 8000996:	f007 faf9 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 800099a:	f8b8 1000 	ldrh.w	r1, [r8]
 800099e:	6838      	ldr	r0, [r7, #0]
 80009a0:	2200      	movs	r2, #0
 80009a2:	f007 faf3 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 80009a6:	4649      	mov	r1, r9
 80009a8:	230a      	movs	r3, #10
 80009aa:	2201      	movs	r2, #1
 80009ac:	6830      	ldr	r0, [r6, #0]
 80009ae:	f008 fd29 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 80009b2:	2201      	movs	r2, #1
 80009b4:	8829      	ldrh	r1, [r5, #0]
 80009b6:	6820      	ldr	r0, [r4, #0]
 80009b8:	f007 fae8 	bl	8007f8c <HAL_GPIO_WritePin>
}
 80009bc:	b002      	add	sp, #8
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	bf00      	nop
 80009c4:	20000924 	.word	0x20000924
 80009c8:	20000310 	.word	0x20000310
 80009cc:	20000920 	.word	0x20000920
 80009d0:	2000030c 	.word	0x2000030c
 80009d4:	20000918 	.word	0x20000918
 80009d8:	2000091c 	.word	0x2000091c
 80009dc:	20000314 	.word	0x20000314

080009e0 <UC1609_SetPos>:
	cursor = x * 6 + UC1609_WIDTH * y;
 80009e0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <UC1609_SetPos+0x14>)
 80009e6:	0189      	lsls	r1, r1, #6
 80009e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80009ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80009f0:	8019      	strh	r1, [r3, #0]
}
 80009f2:	4770      	bx	lr
 80009f4:	200002fc 	.word	0x200002fc

080009f8 <UC1609_UpdateScreen>:
{
 80009f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80009fc:	2600      	movs	r6, #0
	HAL_GPIO_WritePin (csPort, csPin, 0);
 80009fe:	4d47      	ldr	r5, [pc, #284]	; (8000b1c <UC1609_UpdateScreen+0x124>)
 8000a00:	4c47      	ldr	r4, [pc, #284]	; (8000b20 <UC1609_UpdateScreen+0x128>)
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000a02:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8000b2c <UC1609_UpdateScreen+0x134>
 8000a06:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8000b30 <UC1609_UpdateScreen+0x138>
{
 8000a0a:	b083      	sub	sp, #12
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000a0c:	4f45      	ldr	r7, [pc, #276]	; (8000b24 <UC1609_UpdateScreen+0x12c>)
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000a0e:	4632      	mov	r2, r6
 8000a10:	8829      	ldrh	r1, [r5, #0]
 8000a12:	6820      	ldr	r0, [r4, #0]
 8000a14:	f88d 6007 	strb.w	r6, [sp, #7]
 8000a18:	f007 fab8 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000a1c:	4632      	mov	r2, r6
 8000a1e:	f8b9 1000 	ldrh.w	r1, [r9]
 8000a22:	f8d8 0000 	ldr.w	r0, [r8]
 8000a26:	f007 fab1 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000a2a:	230a      	movs	r3, #10
 8000a2c:	f10d 0107 	add.w	r1, sp, #7
 8000a30:	2201      	movs	r2, #1
 8000a32:	6838      	ldr	r0, [r7, #0]
 8000a34:	f008 fce6 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000a38:	8829      	ldrh	r1, [r5, #0]
 8000a3a:	6820      	ldr	r0, [r4, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f007 faa5 	bl	8007f8c <HAL_GPIO_WritePin>
	sendCommand (0b00010000 | ((x >> 4) & 0xF));
 8000a42:	2310      	movs	r3, #16
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000a44:	4632      	mov	r2, r6
 8000a46:	8829      	ldrh	r1, [r5, #0]
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a4e:	f007 fa9d 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000a52:	4632      	mov	r2, r6
 8000a54:	f8b9 1000 	ldrh.w	r1, [r9]
 8000a58:	f8d8 0000 	ldr.w	r0, [r8]
 8000a5c:	f007 fa96 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000a60:	230a      	movs	r3, #10
 8000a62:	f10d 0107 	add.w	r1, sp, #7
 8000a66:	2201      	movs	r2, #1
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f008 fccb 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000a6e:	8829      	ldrh	r1, [r5, #0]
 8000a70:	6820      	ldr	r0, [r4, #0]
 8000a72:	2201      	movs	r2, #1
 8000a74:	f007 fa8a 	bl	8007f8c <HAL_GPIO_WritePin>
	sendCommand (0b10110000 | y);
 8000a78:	23b0      	movs	r3, #176	; 0xb0
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000a7a:	4632      	mov	r2, r6
 8000a7c:	8829      	ldrh	r1, [r5, #0]
 8000a7e:	6820      	ldr	r0, [r4, #0]
 8000a80:	f88d 3007 	strb.w	r3, [sp, #7]
 8000a84:	f007 fa82 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000a88:	4632      	mov	r2, r6
 8000a8a:	f8b9 1000 	ldrh.w	r1, [r9]
 8000a8e:	f8d8 0000 	ldr.w	r0, [r8]
 8000a92:	f007 fa7b 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000a96:	230a      	movs	r3, #10
 8000a98:	f10d 0107 	add.w	r1, sp, #7
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	6838      	ldr	r0, [r7, #0]
 8000aa0:	f008 fcb0 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000aa4:	8829      	ldrh	r1, [r5, #0]
 8000aa6:	6820      	ldr	r0, [r4, #0]
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f007 fa6f 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000aae:	4632      	mov	r2, r6
 8000ab0:	8829      	ldrh	r1, [r5, #0]
 8000ab2:	6820      	ldr	r0, [r4, #0]
 8000ab4:	f007 fa6a 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 1);
 8000ab8:	f8b9 1000 	ldrh.w	r1, [r9]
 8000abc:	f8d8 0000 	ldr.w	r0, [r8]
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	f007 fa63 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, buffer, BUFFER_SIZE, 1000);
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ace:	6838      	ldr	r0, [r7, #0]
 8000ad0:	4915      	ldr	r1, [pc, #84]	; (8000b28 <UC1609_UpdateScreen+0x130>)
 8000ad2:	f008 fc97 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000ad6:	8829      	ldrh	r1, [r5, #0]
 8000ad8:	6820      	ldr	r0, [r4, #0]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f007 fa56 	bl	8007f8c <HAL_GPIO_WritePin>
	sendCommand (UC1609_CMD_ENABLE);
 8000ae0:	23af      	movs	r3, #175	; 0xaf
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000ae2:	4632      	mov	r2, r6
 8000ae4:	8829      	ldrh	r1, [r5, #0]
 8000ae6:	6820      	ldr	r0, [r4, #0]
 8000ae8:	f88d 3007 	strb.w	r3, [sp, #7]
 8000aec:	f007 fa4e 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000af0:	4632      	mov	r2, r6
 8000af2:	f8b9 1000 	ldrh.w	r1, [r9]
 8000af6:	f8d8 0000 	ldr.w	r0, [r8]
 8000afa:	f007 fa47 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000afe:	230a      	movs	r3, #10
 8000b00:	f10d 0107 	add.w	r1, sp, #7
 8000b04:	2201      	movs	r2, #1
 8000b06:	6838      	ldr	r0, [r7, #0]
 8000b08:	f008 fc7c 	bl	8009404 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	8829      	ldrh	r1, [r5, #0]
 8000b10:	6820      	ldr	r0, [r4, #0]
 8000b12:	f007 fa3b 	bl	8007f8c <HAL_GPIO_WritePin>
}
 8000b16:	b003      	add	sp, #12
 8000b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000b1c:	2000030c 	.word	0x2000030c
 8000b20:	20000920 	.word	0x20000920
 8000b24:	20000924 	.word	0x20000924
 8000b28:	20000318 	.word	0x20000318
 8000b2c:	20000918 	.word	0x20000918
 8000b30:	20000310 	.word	0x20000310

08000b34 <UC1609_Clean>:
	for (uint16_t i = 0; i < BUFFER_SIZE; ++i)
 8000b34:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4801      	ldr	r0, [pc, #4]	; (8000b40 <UC1609_Clean+0xc>)
 8000b3c:	f009 bdc0 	b.w	800a6c0 <memset>
 8000b40:	20000318 	.word	0x20000318

08000b44 <UC1609_PutString>:
	while (*c)
 8000b44:	7803      	ldrb	r3, [r0, #0]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d040      	beq.n	8000bcc <UC1609_PutString+0x88>
{
 8000b4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b4c:	4c20      	ldr	r4, [pc, #128]	; (8000bd0 <UC1609_PutString+0x8c>)
 8000b4e:	4921      	ldr	r1, [pc, #132]	; (8000bd4 <UC1609_PutString+0x90>)
 8000b50:	8823      	ldrh	r3, [r4, #0]
 8000b52:	4d21      	ldr	r5, [pc, #132]	; (8000bd8 <UC1609_PutString+0x94>)
			cursor %= BUFFER_SIZE;
 8000b54:	4e21      	ldr	r6, [pc, #132]	; (8000bdc <UC1609_PutString+0x98>)
 8000b56:	e011      	b.n	8000b7c <UC1609_PutString+0x38>
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b58:	3a20      	subs	r2, #32
 8000b5a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8000b5e:	18ab      	adds	r3, r5, r2
 8000b60:	f893 e004 	ldrb.w	lr, [r3, #4]
 8000b64:	58aa      	ldr	r2, [r5, r2]
	cursor += 5;
 8000b66:	1d7b      	adds	r3, r7, #5
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b68:	51ca      	str	r2, [r1, r7]
				UC1609_Put (*c++);
 8000b6a:	3001      	adds	r0, #1
	cursor += 5;
 8000b6c:	b29b      	uxth	r3, r3
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b6e:	f88c e004 	strb.w	lr, [ip, #4]
			cursor++;
 8000b72:	3301      	adds	r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	8023      	strh	r3, [r4, #0]
	while (*c)
 8000b78:	7802      	ldrb	r2, [r0, #0]
 8000b7a:	b332      	cbz	r2, 8000bca <UC1609_PutString+0x86>
			cursor %= BUFFER_SIZE;
 8000b7c:	fba6 7203 	umull	r7, r2, r6, r3
 8000b80:	0a92      	lsrs	r2, r2, #10
 8000b82:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8000b86:	eba3 2342 	sub.w	r3, r3, r2, lsl #9
 8000b8a:	b29f      	uxth	r7, r3
 8000b8c:	8027      	strh	r7, [r4, #0]
			if (*c == 0xD0 || *c == 0xD1)
 8000b8e:	7802      	ldrb	r2, [r0, #0]
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b90:	eb01 0c07 	add.w	ip, r1, r7
			if (*c == 0xD0 || *c == 0xD1)
 8000b94:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d8dc      	bhi.n	8000b58 <UC1609_PutString+0x14>
		pos = *(c + 1) - 144 + 101;
 8000b9e:	7843      	ldrb	r3, [r0, #1]
	if (*c == 0xD0)
 8000ba0:	2ad0      	cmp	r2, #208	; 0xd0
		pos = *(c + 1) - 144 + 101;
 8000ba2:	bf0c      	ite	eq
 8000ba4:	3b2b      	subeq	r3, #43	; 0x2b
		pos = *(c + 1) - 128 + 149;
 8000ba6:	3315      	addne	r3, #21
 8000ba8:	b2db      	uxtb	r3, r3
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000baa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bae:	18ea      	adds	r2, r5, r3
 8000bb0:	f892 c004 	ldrb.w	ip, [r2, #4]
 8000bb4:	f855 e003 	ldr.w	lr, [r5, r3]
 8000bb8:	19ca      	adds	r2, r1, r7
	cursor += 5;
 8000bba:	1d7b      	adds	r3, r7, #5
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000bbc:	f841 e007 	str.w	lr, [r1, r7]
					c += 2;
 8000bc0:	3002      	adds	r0, #2
	cursor += 5;
 8000bc2:	b29b      	uxth	r3, r3
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000bc4:	f882 c004 	strb.w	ip, [r2, #4]
					c += 2;
 8000bc8:	e7d3      	b.n	8000b72 <UC1609_PutString+0x2e>
}
 8000bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	200002fc 	.word	0x200002fc
 8000bd4:	20000318 	.word	0x20000318
 8000bd8:	0800b9a0 	.word	0x0800b9a0
 8000bdc:	aaaaaaab 	.word	0xaaaaaaab

08000be0 <pow10_>:
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
  if (value>0)
 8000be0:	4603      	mov	r3, r0
 8000be2:	2001      	movs	r0, #1
 8000be4:	b143      	cbz	r3, 8000bf8 <pow10_+0x18>
  	return 10*pow10_(value-1);
 8000be6:	3b01      	subs	r3, #1
 8000be8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  if (value>0)
 8000bec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8000bf0:	ea4f 0040 	mov.w	r0, r0, lsl #1
 8000bf4:	d1f7      	bne.n	8000be6 <pow10_+0x6>
 8000bf6:	4770      	bx	lr
  else
  	return 1;
}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <DecToInt>:

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
	uint32_t value=0;
	uint8_t i=0;
	for(i=0;i<len;i++)
 8000bfc:	b331      	cbz	r1, 8000c4c <DecToInt+0x50>
{
 8000bfe:	b538      	push	{r3, r4, r5, lr}
 8000c00:	3901      	subs	r1, #1
 8000c02:	3801      	subs	r0, #1
 8000c04:	b2cc      	uxtb	r4, r1
	if (string[i]>='0' && string[i]<='9')
 8000c06:	f810 1f01 	ldrb.w	r1, [r0, #1]!
	uint32_t value=0;
 8000c0a:	2500      	movs	r5, #0
	if (string[i]>='0' && string[i]<='9')
 8000c0c:	3930      	subs	r1, #48	; 0x30
 8000c0e:	b2cb      	uxtb	r3, r1
 8000c10:	2b09      	cmp	r3, #9
 8000c12:	d814      	bhi.n	8000c3e <DecToInt+0x42>
  if (value>0)
 8000c14:	b1c4      	cbz	r4, 8000c48 <DecToInt+0x4c>
 8000c16:	4622      	mov	r2, r4
 8000c18:	2301      	movs	r3, #1
  	return 10*pow10_(value-1);
 8000c1a:	3a01      	subs	r2, #1
 8000c1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  if (value>0)
 8000c20:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	d1f7      	bne.n	8000c1a <DecToInt+0x1e>
	value+=(string[i]-'0')*pow10_(len-i-1);
 8000c2a:	fb03 5501 	mla	r5, r3, r1, r5
	if (string[i]>='0' && string[i]<='9')
 8000c2e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8000c32:	3c01      	subs	r4, #1
 8000c34:	3930      	subs	r1, #48	; 0x30
 8000c36:	b2cb      	uxtb	r3, r1
 8000c38:	2b09      	cmp	r3, #9
 8000c3a:	b2e4      	uxtb	r4, r4
 8000c3c:	d9ea      	bls.n	8000c14 <DecToInt+0x18>
	else
	{
		Error_Handler();
 8000c3e:	f004 fc5d 	bl	80054fc <Error_Handler>
		return 0xFFFFFFFF;
 8000c42:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return value;
}
 8000c46:	bd38      	pop	{r3, r4, r5, pc}
	value+=(string[i]-'0')*pow10_(len-i-1);
 8000c48:	1948      	adds	r0, r1, r5
}
 8000c4a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t value=0;
 8000c4c:	4608      	mov	r0, r1
}
 8000c4e:	4770      	bx	lr

08000c50 <HexToInt>:
{
	uint32_t value=0;
	uint32_t tmp=0;
	uint8_t i=0;

	for(i=0;i<len;i++)
 8000c50:	2900      	cmp	r1, #0
 8000c52:	f000 80a6 	beq.w	8000da2 <HexToInt+0x152>
{
 8000c56:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	1e44      	subs	r4, r0, #1
	for(i=0;i<len;i++)
 8000c5e:	4623      	mov	r3, r4
	uint32_t value=0;
 8000c60:	2000      	movs	r0, #0
 8000c62:	f04f 0b0f 	mov.w	fp, #15
 8000c66:	f04f 0a0e 	mov.w	sl, #14
 8000c6a:	f04f 090d 	mov.w	r9, #13
 8000c6e:	f04f 080c 	mov.w	r8, #12
 8000c72:	f04f 0e0b 	mov.w	lr, #11
 8000c76:	f04f 0c0a 	mov.w	ip, #10
 8000c7a:	2709      	movs	r7, #9
 8000c7c:	1e4d      	subs	r5, r1, #1
 8000c7e:	b2ed      	uxtb	r5, r5
 8000c80:	442a      	add	r2, r5
	{
		switch (string[i])
 8000c82:	f813 5f01 	ldrb.w	r5, [r3, #1]!
 8000c86:	3d30      	subs	r5, #48	; 0x30
 8000c88:	2d36      	cmp	r5, #54	; 0x36
 8000c8a:	d81d      	bhi.n	8000cc8 <HexToInt+0x78>
 8000c8c:	e8df f005 	tbb	[pc, r5]
 8000c90:	6f715529 	.word	0x6f715529
 8000c94:	7a838587 	.word	0x7a838587
 8000c98:	1c1c5e66 	.word	0x1c1c5e66
 8000c9c:	1c1c1c1c 	.word	0x1c1c1c1c
 8000ca0:	353d451c 	.word	0x353d451c
 8000ca4:	1c224d2d 	.word	0x1c224d2d
 8000ca8:	1c1c1c1c 	.word	0x1c1c1c1c
 8000cac:	1c1c1c1c 	.word	0x1c1c1c1c
 8000cb0:	1c1c1c1c 	.word	0x1c1c1c1c
 8000cb4:	1c1c1c1c 	.word	0x1c1c1c1c
 8000cb8:	1c1c1c1c 	.word	0x1c1c1c1c
 8000cbc:	1c1c1c1c 	.word	0x1c1c1c1c
 8000cc0:	353d451c 	.word	0x353d451c
 8000cc4:	4d2d      	.short	0x4d2d
 8000cc6:	22          	.byte	0x22
 8000cc7:	00          	.byte	0x00
		case 'E':
		case 'e': tmp=14; break;
		case 'F':
		case 'f': tmp=15; break;
		default:
			Error_Handler();
 8000cc8:	f004 fc18 	bl	80054fc <Error_Handler>
			return 0xFFFFFFFF;
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
		}
		value+=tmp*pow16(len-i-1);
	}
	return value;
}
 8000cd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		case 'f': tmp=15; break;
 8000cd4:	1acd      	subs	r5, r1, r3
 8000cd6:	4425      	add	r5, r4
 8000cd8:	b2ed      	uxtb	r5, r5
 8000cda:	00ad      	lsls	r5, r5, #2
 8000cdc:	fa0b f505 	lsl.w	r5, fp, r5
 8000ce0:	4428      	add	r0, r5
	for(i=0;i<len;i++)
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d1cd      	bne.n	8000c82 <HexToInt+0x32>
}
 8000ce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		case 'd': tmp=13; break;
 8000cea:	1acd      	subs	r5, r1, r3
 8000cec:	4425      	add	r5, r4
 8000cee:	b2ed      	uxtb	r5, r5
 8000cf0:	00ad      	lsls	r5, r5, #2
 8000cf2:	fa09 f505 	lsl.w	r5, r9, r5
 8000cf6:	4428      	add	r0, r5
 8000cf8:	e7f3      	b.n	8000ce2 <HexToInt+0x92>
		case 'c': tmp=12; break;
 8000cfa:	1acd      	subs	r5, r1, r3
 8000cfc:	4425      	add	r5, r4
 8000cfe:	b2ed      	uxtb	r5, r5
 8000d00:	00ad      	lsls	r5, r5, #2
 8000d02:	fa08 f505 	lsl.w	r5, r8, r5
 8000d06:	4428      	add	r0, r5
 8000d08:	e7eb      	b.n	8000ce2 <HexToInt+0x92>
		case 'b': tmp=11; break;
 8000d0a:	1acd      	subs	r5, r1, r3
 8000d0c:	4425      	add	r5, r4
 8000d0e:	b2ed      	uxtb	r5, r5
 8000d10:	00ad      	lsls	r5, r5, #2
 8000d12:	fa0e f505 	lsl.w	r5, lr, r5
 8000d16:	4428      	add	r0, r5
 8000d18:	e7e3      	b.n	8000ce2 <HexToInt+0x92>
		case 'a': tmp=10; break;
 8000d1a:	1acd      	subs	r5, r1, r3
 8000d1c:	4425      	add	r5, r4
 8000d1e:	b2ed      	uxtb	r5, r5
 8000d20:	00ad      	lsls	r5, r5, #2
 8000d22:	fa0c f505 	lsl.w	r5, ip, r5
 8000d26:	4428      	add	r0, r5
 8000d28:	e7db      	b.n	8000ce2 <HexToInt+0x92>
		case 'e': tmp=14; break;
 8000d2a:	1acd      	subs	r5, r1, r3
 8000d2c:	4425      	add	r5, r4
 8000d2e:	b2ed      	uxtb	r5, r5
 8000d30:	00ad      	lsls	r5, r5, #2
 8000d32:	fa0a f505 	lsl.w	r5, sl, r5
 8000d36:	4428      	add	r0, r5
 8000d38:	e7d3      	b.n	8000ce2 <HexToInt+0x92>
		case '1': tmp=1; break;
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	1acd      	subs	r5, r1, r3
 8000d3e:	4425      	add	r5, r4
 8000d40:	b2ed      	uxtb	r5, r5
 8000d42:	00ad      	lsls	r5, r5, #2
 8000d44:	fa06 f505 	lsl.w	r5, r6, r5
 8000d48:	4428      	add	r0, r5
		case '3': tmp=3; break;
 8000d4a:	e7ca      	b.n	8000ce2 <HexToInt+0x92>
		case '9': tmp=9; break;
 8000d4c:	1acd      	subs	r5, r1, r3
 8000d4e:	4425      	add	r5, r4
 8000d50:	b2ed      	uxtb	r5, r5
 8000d52:	00ad      	lsls	r5, r5, #2
 8000d54:	fa07 f505 	lsl.w	r5, r7, r5
 8000d58:	4428      	add	r0, r5
 8000d5a:	e7c2      	b.n	8000ce2 <HexToInt+0x92>
		case '8': tmp=8; break;
 8000d5c:	2608      	movs	r6, #8
 8000d5e:	1acd      	subs	r5, r1, r3
 8000d60:	4425      	add	r5, r4
 8000d62:	b2ed      	uxtb	r5, r5
 8000d64:	00ad      	lsls	r5, r5, #2
 8000d66:	fa06 f505 	lsl.w	r5, r6, r5
 8000d6a:	4428      	add	r0, r5
 8000d6c:	e7b9      	b.n	8000ce2 <HexToInt+0x92>
		case '3': tmp=3; break;
 8000d6e:	2603      	movs	r6, #3
 8000d70:	e7e4      	b.n	8000d3c <HexToInt+0xec>
		case '2': tmp=2; break;
 8000d72:	2602      	movs	r6, #2
 8000d74:	1acd      	subs	r5, r1, r3
 8000d76:	4425      	add	r5, r4
 8000d78:	b2ed      	uxtb	r5, r5
 8000d7a:	40b5      	lsls	r5, r6
 8000d7c:	fa06 f505 	lsl.w	r5, r6, r5
 8000d80:	4428      	add	r0, r5
 8000d82:	e7ae      	b.n	8000ce2 <HexToInt+0x92>
		case '7': tmp=7; break;
 8000d84:	2607      	movs	r6, #7
 8000d86:	1acd      	subs	r5, r1, r3
 8000d88:	4425      	add	r5, r4
 8000d8a:	b2ed      	uxtb	r5, r5
 8000d8c:	00ad      	lsls	r5, r5, #2
 8000d8e:	fa06 f505 	lsl.w	r5, r6, r5
 8000d92:	4428      	add	r0, r5
 8000d94:	e7a5      	b.n	8000ce2 <HexToInt+0x92>
		case '6': tmp=6; break;
 8000d96:	2606      	movs	r6, #6
 8000d98:	e7d0      	b.n	8000d3c <HexToInt+0xec>
		case '5': tmp=5; break;
 8000d9a:	2605      	movs	r6, #5
 8000d9c:	e7ce      	b.n	8000d3c <HexToInt+0xec>
		case '4': tmp=4; break;
 8000d9e:	2604      	movs	r6, #4
 8000da0:	e7cc      	b.n	8000d3c <HexToInt+0xec>
	uint32_t value=0;
 8000da2:	4608      	mov	r0, r1
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <delayMicro>:
	    {
	      tick++;
	    }
	    tick = 0;
	  }
}
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <writeToEeprom>:
void writeToEeprom(uint8_t to, uint8_t* from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
	uint8_t bytesLeft=size;
	uint8_t part;
	uint8_t shift=0;
	while(bytesLeft)
 8000dac:	b332      	cbz	r2, 8000dfc <writeToEeprom+0x50>
{
 8000dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db2:	460f      	mov	r7, r1
 8000db4:	4698      	mov	r8, r3
 8000db6:	4614      	mov	r4, r2
	uint8_t shift=0;
 8000db8:	2500      	movs	r5, #0
	{
		part=(bytesLeft>16)?16:bytesLeft;
		HAL_I2C_Mem_Write(hi2c, 0xA0, to+shift, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000dba:	f04f 0932 	mov.w	r9, #50	; 0x32
{
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	b286      	uxth	r6, r0
		part=(bytesLeft>16)?16:bytesLeft;
 8000dc2:	2c10      	cmp	r4, #16
 8000dc4:	46a2      	mov	sl, r4
 8000dc6:	bf28      	it	cs
 8000dc8:	f04f 0a10 	movcs.w	sl, #16
		HAL_I2C_Mem_Write(hi2c, 0xA0, to+shift, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000dcc:	197b      	adds	r3, r7, r5
 8000dce:	1972      	adds	r2, r6, r5
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	21a0      	movs	r1, #160	; 0xa0
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4640      	mov	r0, r8
 8000dd8:	e9cd a901 	strd	sl, r9, [sp, #4]
		bytesLeft-=part;
 8000ddc:	eba4 040a 	sub.w	r4, r4, sl
		HAL_I2C_Mem_Write(hi2c, 0xA0, to+shift, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000de0:	f007 fbc4 	bl	800856c <HAL_I2C_Mem_Write>
		bytesLeft-=part;
 8000de4:	b2e4      	uxtb	r4, r4
		shift+=part;
 8000de6:	eb0a 0205 	add.w	r2, sl, r5
		HAL_Delay(5);
 8000dea:	2005      	movs	r0, #5
		shift+=part;
 8000dec:	b2d5      	uxtb	r5, r2
		HAL_Delay(5);
 8000dee:	f006 f9bb 	bl	8007168 <HAL_Delay>
	while(bytesLeft)
 8000df2:	2c00      	cmp	r4, #0
 8000df4:	d1e5      	bne.n	8000dc2 <writeToEeprom+0x16>
	}
}
 8000df6:	b004      	add	sp, #16
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <readFromEeprom>:
void readFromEeprom(uint8_t* to, uint8_t from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
	uint8_t bytesLeft=size;
	uint8_t part;
	uint8_t shift=0;
	while(bytesLeft)
 8000e00:	b332      	cbz	r2, 8000e50 <readFromEeprom+0x50>
{
 8000e02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e06:	4607      	mov	r7, r0
 8000e08:	4698      	mov	r8, r3
 8000e0a:	4614      	mov	r4, r2
	uint8_t shift=0;
 8000e0c:	2500      	movs	r5, #0
	{
		part=(bytesLeft>16)?16:bytesLeft;
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000e0e:	f04f 0932 	mov.w	r9, #50	; 0x32
{
 8000e12:	b084      	sub	sp, #16
 8000e14:	b28e      	uxth	r6, r1
		part=(bytesLeft>16)?16:bytesLeft;
 8000e16:	2c10      	cmp	r4, #16
 8000e18:	46a2      	mov	sl, r4
 8000e1a:	bf28      	it	cs
 8000e1c:	f04f 0a10 	movcs.w	sl, #16
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000e20:	197b      	adds	r3, r7, r5
 8000e22:	1972      	adds	r2, r6, r5
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	21a0      	movs	r1, #160	; 0xa0
 8000e28:	2301      	movs	r3, #1
 8000e2a:	4640      	mov	r0, r8
 8000e2c:	e9cd a901 	strd	sl, r9, [sp, #4]
		bytesLeft-=part;
 8000e30:	eba4 040a 	sub.w	r4, r4, sl
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000e34:	f007 fcb8 	bl	80087a8 <HAL_I2C_Mem_Read>
		bytesLeft-=part;
 8000e38:	b2e4      	uxtb	r4, r4
		shift+=part;
 8000e3a:	eb0a 0205 	add.w	r2, sl, r5
		HAL_Delay(5);
 8000e3e:	2005      	movs	r0, #5
		shift+=part;
 8000e40:	b2d5      	uxtb	r5, r2
		HAL_Delay(5);
 8000e42:	f006 f991 	bl	8007168 <HAL_Delay>
	while(bytesLeft)
 8000e46:	2c00      	cmp	r4, #0
 8000e48:	d1e5      	bne.n	8000e16 <readFromEeprom+0x16>
	}
}
 8000e4a:	b004      	add	sp, #16
 8000e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <saveNodeData>:
			nodes[i].masked = nodeData[i].masked;
		}
}

void saveNodeData ()
{
 8000e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8000e58:	4b66      	ldr	r3, [pc, #408]	; (8000ff4 <saveNodeData+0x1a0>)
			nodeData[i].masked = nodes[i].masked;
 8000e5a:	4967      	ldr	r1, [pc, #412]	; (8000ff8 <saveNodeData+0x1a4>)
			nodeData[i].disarmed = nodes[i].disarmed;
 8000e5c:	f893 604d 	ldrb.w	r6, [r3, #77]	; 0x4d
 8000e60:	f893 002d 	ldrb.w	r0, [r3, #45]	; 0x2d
 8000e64:	f893 506d 	ldrb.w	r5, [r3, #109]	; 0x6d
			nodeData[i].masked = nodes[i].masked;
 8000e68:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8000e6c:	7b5a      	ldrb	r2, [r3, #13]
 8000e6e:	f893 c02c 	ldrb.w	ip, [r3, #44]	; 0x2c
 8000e72:	f008 0604 	and.w	r6, r8, #4
 8000e76:	f893 806c 	ldrb.w	r8, [r3, #108]	; 0x6c
 8000e7a:	f893 a00c 	ldrb.w	sl, [r3, #12]
 8000e7e:	7b9f      	ldrb	r7, [r3, #14]
 8000e80:	0080      	lsls	r0, r0, #2
 8000e82:	00ad      	lsls	r5, r5, #2
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8000e84:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
			nodeData[i].masked = nodes[i].masked;
 8000e88:	f893 904c 	ldrb.w	r9, [r3, #76]	; 0x4c
 8000e8c:	f00c 0c03 	and.w	ip, ip, #3
 8000e90:	f008 0803 	and.w	r8, r8, #3
 8000e94:	0092      	lsls	r2, r2, #2
 8000e96:	f000 0004 	and.w	r0, r0, #4
 8000e9a:	f005 0504 	and.w	r5, r5, #4
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8000e9e:	f893 e04e 	ldrb.w	lr, [r3, #78]	; 0x4e
			nodeData[i].masked = nodes[i].masked;
 8000ea2:	f00a 0a03 	and.w	sl, sl, #3
 8000ea6:	ea40 000c 	orr.w	r0, r0, ip
 8000eaa:	ea45 0508 	orr.w	r5, r5, r8
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8000eae:	f893 c06e 	ldrb.w	ip, [r3, #110]	; 0x6e
			nodeData[i].masked = nodes[i].masked;
 8000eb2:	f891 8000 	ldrb.w	r8, [r1]
 8000eb6:	f002 0204 	and.w	r2, r2, #4
 8000eba:	00ff      	lsls	r7, r7, #3
 8000ebc:	f009 0903 	and.w	r9, r9, #3
 8000ec0:	ea42 020a 	orr.w	r2, r2, sl
 8000ec4:	f007 0708 	and.w	r7, r7, #8
 8000ec8:	f891 a001 	ldrb.w	sl, [r1, #1]
 8000ecc:	00e4      	lsls	r4, r4, #3
 8000ece:	f004 0408 	and.w	r4, r4, #8
 8000ed2:	ea46 0609 	orr.w	r6, r6, r9
 8000ed6:	433a      	orrs	r2, r7
 8000ed8:	f891 9002 	ldrb.w	r9, [r1, #2]
 8000edc:	f028 070f 	bic.w	r7, r8, #15
 8000ee0:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8000ee4:	f891 8003 	ldrb.w	r8, [r1, #3]
 8000ee8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000eec:	f00e 0e08 	and.w	lr, lr, #8
 8000ef0:	f00c 0c08 	and.w	ip, ip, #8
 8000ef4:	4320      	orrs	r0, r4
 8000ef6:	f02a 0a0f 	bic.w	sl, sl, #15
			nodeData[i].disarmed = nodes[i].disarmed;
 8000efa:	f893 408d 	ldrb.w	r4, [r3, #141]	; 0x8d
			nodeData[i].masked = nodes[i].masked;
 8000efe:	ea40 000a 	orr.w	r0, r0, sl
 8000f02:	ea46 060e 	orr.w	r6, r6, lr
 8000f06:	f029 090f 	bic.w	r9, r9, #15
 8000f0a:	ea45 050c 	orr.w	r5, r5, ip
 8000f0e:	f028 080f 	bic.w	r8, r8, #15
			nodeData[i].disarmed = nodes[i].disarmed;
 8000f12:	f893 b0ad 	ldrb.w	fp, [r3, #173]	; 0xad
 8000f16:	f893 a0cd 	ldrb.w	sl, [r3, #205]	; 0xcd
			nodeData[i].masked = nodes[i].masked;
 8000f1a:	433a      	orrs	r2, r7
 8000f1c:	ea46 0609 	orr.w	r6, r6, r9
 8000f20:	ea45 0508 	orr.w	r5, r5, r8
			nodeData[i].disarmed = nodes[i].disarmed;
 8000f24:	f893 90ed 	ldrb.w	r9, [r3, #237]	; 0xed
			nodeData[i].masked = nodes[i].masked;
 8000f28:	f893 808c 	ldrb.w	r8, [r3, #140]	; 0x8c
 8000f2c:	7048      	strb	r0, [r1, #1]
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8000f2e:	f893 008e 	ldrb.w	r0, [r3, #142]	; 0x8e
 8000f32:	f893 c0ae 	ldrb.w	ip, [r3, #174]	; 0xae
 8000f36:	f893 e0ce 	ldrb.w	lr, [r3, #206]	; 0xce
 8000f3a:	f893 70ee 	ldrb.w	r7, [r3, #238]	; 0xee
			nodeData[i].masked = nodes[i].masked;
 8000f3e:	700a      	strb	r2, [r1, #0]
 8000f40:	708e      	strb	r6, [r1, #2]
 8000f42:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8000f46:	f893 60cc 	ldrb.w	r6, [r3, #204]	; 0xcc
 8000f4a:	00a4      	lsls	r4, r4, #2
 8000f4c:	70cd      	strb	r5, [r1, #3]
 8000f4e:	f893 50ec 	ldrb.w	r5, [r3, #236]	; 0xec
 8000f52:	f008 0803 	and.w	r8, r8, #3
 8000f56:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000f5a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000f5e:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000f62:	f004 0404 	and.w	r4, r4, #4
 8000f66:	00c0      	lsls	r0, r0, #3
 8000f68:	f006 0303 	and.w	r3, r6, #3
 8000f6c:	f009 0904 	and.w	r9, r9, #4
 8000f70:	f002 0203 	and.w	r2, r2, #3
 8000f74:	ea44 0408 	orr.w	r4, r4, r8
 8000f78:	f000 0008 	and.w	r0, r0, #8
 8000f7c:	f00b 0b04 	and.w	fp, fp, #4
 8000f80:	f00a 0a04 	and.w	sl, sl, #4
 8000f84:	f005 0503 	and.w	r5, r5, #3
 8000f88:	ea4b 0b02 	orr.w	fp, fp, r2
 8000f8c:	ea4a 0a03 	orr.w	sl, sl, r3
 8000f90:	79ca      	ldrb	r2, [r1, #7]
 8000f92:	790b      	ldrb	r3, [r1, #4]
 8000f94:	ea49 0505 	orr.w	r5, r9, r5
 8000f98:	4304      	orrs	r4, r0
 8000f9a:	f891 9005 	ldrb.w	r9, [r1, #5]
 8000f9e:	7988      	ldrb	r0, [r1, #6]
 8000fa0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000fa4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8000fa8:	00ff      	lsls	r7, r7, #3
 8000faa:	f00e 0e08 	and.w	lr, lr, #8
 8000fae:	f007 0708 	and.w	r7, r7, #8
 8000fb2:	f00c 0c08 	and.w	ip, ip, #8
 8000fb6:	ea4b 0c0c 	orr.w	ip, fp, ip
 8000fba:	ea4a 060e 	orr.w	r6, sl, lr
 8000fbe:	433d      	orrs	r5, r7
 8000fc0:	f023 030f 	bic.w	r3, r3, #15
 8000fc4:	f029 090f 	bic.w	r9, r9, #15
 8000fc8:	f020 000f 	bic.w	r0, r0, #15
 8000fcc:	f022 020f 	bic.w	r2, r2, #15
 8000fd0:	431c      	orrs	r4, r3
 8000fd2:	4306      	orrs	r6, r0
 8000fd4:	4315      	orrs	r5, r2
 8000fd6:	ea4c 0c09 	orr.w	ip, ip, r9
 8000fda:	710c      	strb	r4, [r1, #4]
 8000fdc:	718e      	strb	r6, [r1, #6]
 8000fde:	71cd      	strb	r5, [r1, #7]
	actualiseNodeData ();
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000fe0:	2208      	movs	r2, #8
}
 8000fe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <saveNodeData+0x1a8>)
			nodeData[i].masked = nodes[i].masked;
 8000fea:	f881 c005 	strb.w	ip, [r1, #5]
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000fee:	f7ff bedd 	b.w	8000dac <writeToEeprom>
 8000ff2:	bf00      	nop
 8000ff4:	20000c78 	.word	0x20000c78
 8000ff8:	20000d78 	.word	0x20000d78
 8000ffc:	20000a70 	.word	0x20000a70

08001000 <loadNodeData>:

void loadNodeData ()
{
 8001000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	readFromEeprom ((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 8001004:	4c39      	ldr	r4, [pc, #228]	; (80010ec <loadNodeData+0xec>)
 8001006:	2208      	movs	r2, #8
 8001008:	4620      	mov	r0, r4
 800100a:	2100      	movs	r1, #0
 800100c:	4b38      	ldr	r3, [pc, #224]	; (80010f0 <loadNodeData+0xf0>)
 800100e:	f7ff fef7 	bl	8000e00 <readFromEeprom>
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8001012:	f894 c000 	ldrb.w	ip, [r4]
 8001016:	4b37      	ldr	r3, [pc, #220]	; (80010f4 <loadNodeData+0xf4>)
 8001018:	f894 e002 	ldrb.w	lr, [r4, #2]
 800101c:	7867      	ldrb	r7, [r4, #1]
 800101e:	78e6      	ldrb	r6, [r4, #3]
 8001020:	7925      	ldrb	r5, [r4, #4]
 8001022:	f3cc 08c0 	ubfx	r8, ip, #3, #1
 8001026:	7960      	ldrb	r0, [r4, #5]
 8001028:	79a1      	ldrb	r1, [r4, #6]
 800102a:	79e2      	ldrb	r2, [r4, #7]
 800102c:	f883 800e 	strb.w	r8, [r3, #14]
 8001030:	f3c7 04c0 	ubfx	r4, r7, #3, #1
 8001034:	f3ce 08c0 	ubfx	r8, lr, #3, #1
 8001038:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
 800103c:	f883 804e 	strb.w	r8, [r3, #78]	; 0x4e
 8001040:	f3c6 04c0 	ubfx	r4, r6, #3, #1
 8001044:	f3c5 08c0 	ubfx	r8, r5, #3, #1
 8001048:	f883 406e 	strb.w	r4, [r3, #110]	; 0x6e
 800104c:	f883 808e 	strb.w	r8, [r3, #142]	; 0x8e
 8001050:	f3c0 04c0 	ubfx	r4, r0, #3, #1
 8001054:	f3c1 08c0 	ubfx	r8, r1, #3, #1
 8001058:	f883 40ae 	strb.w	r4, [r3, #174]	; 0xae
 800105c:	f883 80ce 	strb.w	r8, [r3, #206]	; 0xce
 8001060:	f3c2 04c0 	ubfx	r4, r2, #3, #1
			nodes[i].disarmed = nodeData[i].disarmed;
 8001064:	f3cc 0880 	ubfx	r8, ip, #2, #1
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8001068:	f883 40ee 	strb.w	r4, [r3, #238]	; 0xee
			nodes[i].masked = nodeData[i].masked;
 800106c:	f3cc 0c01 	ubfx	ip, ip, #0, #2
			nodes[i].disarmed = nodeData[i].disarmed;
 8001070:	f3c7 0480 	ubfx	r4, r7, #2, #1
 8001074:	f883 800d 	strb.w	r8, [r3, #13]
			nodes[i].masked = nodeData[i].masked;
 8001078:	f3c7 0701 	ubfx	r7, r7, #0, #2
			nodes[i].disarmed = nodeData[i].disarmed;
 800107c:	f3ce 0880 	ubfx	r8, lr, #2, #1
 8001080:	f3c5 0980 	ubfx	r9, r5, #2, #1
			nodes[i].masked = nodeData[i].masked;
 8001084:	f3ce 0e01 	ubfx	lr, lr, #0, #2
 8001088:	f883 c00c 	strb.w	ip, [r3, #12]
			nodes[i].disarmed = nodeData[i].disarmed;
 800108c:	f883 402d 	strb.w	r4, [r3, #45]	; 0x2d
 8001090:	f3c6 0c80 	ubfx	ip, r6, #2, #1
 8001094:	f3c2 0480 	ubfx	r4, r2, #2, #1
			nodes[i].masked = nodeData[i].masked;
 8001098:	f3c6 0601 	ubfx	r6, r6, #0, #2
 800109c:	f3c5 0501 	ubfx	r5, r5, #0, #2
 80010a0:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
			nodes[i].disarmed = nodeData[i].disarmed;
 80010a4:	f883 804d 	strb.w	r8, [r3, #77]	; 0x4d
 80010a8:	f3c0 0780 	ubfx	r7, r0, #2, #1
 80010ac:	f3c1 0880 	ubfx	r8, r1, #2, #1
			nodes[i].masked = nodeData[i].masked;
 80010b0:	f3c0 0001 	ubfx	r0, r0, #0, #2
 80010b4:	f3c1 0101 	ubfx	r1, r1, #0, #2
 80010b8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80010bc:	f883 e04c 	strb.w	lr, [r3, #76]	; 0x4c
			nodes[i].disarmed = nodeData[i].disarmed;
 80010c0:	f883 c06d 	strb.w	ip, [r3, #109]	; 0x6d
			nodes[i].masked = nodeData[i].masked;
 80010c4:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
			nodes[i].disarmed = nodeData[i].disarmed;
 80010c8:	f883 908d 	strb.w	r9, [r3, #141]	; 0x8d
			nodes[i].masked = nodeData[i].masked;
 80010cc:	f883 508c 	strb.w	r5, [r3, #140]	; 0x8c
			nodes[i].disarmed = nodeData[i].disarmed;
 80010d0:	f883 70ad 	strb.w	r7, [r3, #173]	; 0xad
			nodes[i].masked = nodeData[i].masked;
 80010d4:	f883 00ac 	strb.w	r0, [r3, #172]	; 0xac
			nodes[i].disarmed = nodeData[i].disarmed;
 80010d8:	f883 80cd 	strb.w	r8, [r3, #205]	; 0xcd
			nodes[i].masked = nodeData[i].masked;
 80010dc:	f883 10cc 	strb.w	r1, [r3, #204]	; 0xcc
			nodes[i].disarmed = nodeData[i].disarmed;
 80010e0:	f883 40ed 	strb.w	r4, [r3, #237]	; 0xed
			nodes[i].masked = nodeData[i].masked;
 80010e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	actualiseNodes ();
}
 80010e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80010ec:	20000d78 	.word	0x20000d78
 80010f0:	20000a70 	.word	0x20000a70
 80010f4:	20000c78 	.word	0x20000c78

080010f8 <HAL_UART_RxCpltCallback>:
 * @brief Callback for UART interrupt
 * @param  *huart - uart handler
 * @retval None
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 80010f8:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 80010fa:	2201      	movs	r2, #1
 80010fc:	4905      	ldr	r1, [pc, #20]	; (8001114 <HAL_UART_RxCpltCallback+0x1c>)
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_UART_RxCpltCallback+0x20>)
 8001100:	f009 f8ca 	bl	800a298 <HAL_UART_Receive_IT>
	lastUartConnect = HAL_GetTick ();
 8001104:	f006 f82a 	bl	800715c <HAL_GetTick>
 8001108:	4b04      	ldr	r3, [pc, #16]	; (800111c <HAL_UART_RxCpltCallback+0x24>)
 800110a:	6018      	str	r0, [r3, #0]
	readByte ();
}
 800110c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	readByte ();
 8001110:	f005 bae4 	b.w	80066dc <readByte>
 8001114:	20000b28 	.word	0x20000b28
 8001118:	20000bc0 	.word	0x20000bc0
 800111c:	20001580 	.word	0x20001580

08001120 <clearStrings>:
 * @brief Fills all strings with '\0' char
 * @param None
 * @retval None
 */
void clearStrings ()
{
 8001120:	b538      	push	{r3, r4, r5, lr}
	memset (string[0], 0, sizeof(string[0]));
 8001122:	2540      	movs	r5, #64	; 0x40
 8001124:	4c18      	ldr	r4, [pc, #96]	; (8001188 <clearStrings+0x68>)
 8001126:	462a      	mov	r2, r5
 8001128:	4620      	mov	r0, r4
 800112a:	2100      	movs	r1, #0
 800112c:	f009 fac8 	bl	800a6c0 <memset>
	memset (string[1], 0, sizeof(string[1]));
 8001130:	462a      	mov	r2, r5
 8001132:	2100      	movs	r1, #0
 8001134:	1960      	adds	r0, r4, r5
 8001136:	f009 fac3 	bl	800a6c0 <memset>
	memset (string[2], 0, sizeof(string[2]));
 800113a:	462a      	mov	r2, r5
 800113c:	2100      	movs	r1, #0
 800113e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8001142:	f009 fabd 	bl	800a6c0 <memset>
	memset (string[3], 0, sizeof(string[3]));
 8001146:	462a      	mov	r2, r5
 8001148:	2100      	movs	r1, #0
 800114a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 800114e:	f009 fab7 	bl	800a6c0 <memset>
	memset (string[4], 0, sizeof(string[4]));
 8001152:	462a      	mov	r2, r5
 8001154:	2100      	movs	r1, #0
 8001156:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800115a:	f009 fab1 	bl	800a6c0 <memset>
	memset (string[5], 0, sizeof(string[5]));
 800115e:	462a      	mov	r2, r5
 8001160:	2100      	movs	r1, #0
 8001162:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8001166:	f009 faab 	bl	800a6c0 <memset>
	memset (string[6], 0, sizeof(string[6]));
 800116a:	462a      	mov	r2, r5
 800116c:	2100      	movs	r1, #0
 800116e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8001172:	f009 faa5 	bl	800a6c0 <memset>
	memset (string[7], 0, sizeof(string[7]));
 8001176:	462a      	mov	r2, r5
 8001178:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 800117c:	2100      	movs	r1, #0
}
 800117e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memset (string[7], 0, sizeof(string[7]));
 8001182:	f009 ba9d 	b.w	800a6c0 <memset>
 8001186:	bf00      	nop
 8001188:	200000f4 	.word	0x200000f4

0800118c <updateLcd>:
 * @brief Writes string[0]..string[3] to all screens
 * @param None
 * @retval None
 */
void updateLcd ()
{
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4d13      	ldr	r5, [pc, #76]	; (80011dc <updateLcd+0x50>)
	ssd1306_Clean ();
 8001190:	f004 fb6a 	bl	8005868 <ssd1306_Clean>
 8001194:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 8001196:	2400      	movs	r4, #0
		{
			ssd1306_GotoXY (0, i);
 8001198:	4621      	mov	r1, r4
 800119a:	2000      	movs	r0, #0
 800119c:	f004 fb26 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 80011a0:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 80011a2:	4630      	mov	r0, r6
 80011a4:	f004 fb2a 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 80011a8:	2c08      	cmp	r4, #8
 80011aa:	f106 0640 	add.w	r6, r6, #64	; 0x40
 80011ae:	d1f3      	bne.n	8001198 <updateLcd+0xc>
		}

	ssd1306_Update ();
 80011b0:	f004 fb62 	bl	8005878 <ssd1306_Update>

	UC1609_Clean ();

	for (int i = 0; i < 8; i++)
 80011b4:	2400      	movs	r4, #0
	UC1609_Clean ();
 80011b6:	f7ff fcbd 	bl	8000b34 <UC1609_Clean>
		{
			UC1609_SetPos (0, i);
 80011ba:	b2e1      	uxtb	r1, r4
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fc0f 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 80011c2:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 80011c4:	4628      	mov	r0, r5
 80011c6:	f7ff fcbd 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 80011ca:	2c08      	cmp	r4, #8
 80011cc:	f105 0540 	add.w	r5, r5, #64	; 0x40
 80011d0:	d1f3      	bne.n	80011ba <updateLcd+0x2e>
		}
	UC1609_UpdateScreen ();

}
 80011d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	UC1609_UpdateScreen ();
 80011d6:	f7ff bc0f 	b.w	80009f8 <UC1609_UpdateScreen>
 80011da:	bf00      	nop
 80011dc:	200000f4 	.word	0x200000f4

080011e0 <settingsInitiate>:
 * @brief Initiates settings from settings structure to radio structure
 * @param None
 * @retval None
 */
void settingsInitiate ()
{
 80011e0:	b538      	push	{r3, r4, r5, lr}
	myRadio.sf = settings.sf;
 80011e2:	4d0c      	ldr	r5, [pc, #48]	; (8001214 <settingsInitiate+0x34>)
 80011e4:	4c0c      	ldr	r4, [pc, #48]	; (8001218 <settingsInitiate+0x38>)
	myRadio.bw = settings.bw;
 80011e6:	7bea      	ldrb	r2, [r5, #15]
	myRadio.cr = settings.cr;
 80011e8:	7c2b      	ldrb	r3, [r5, #16]
	myRadio.sf = settings.sf;
 80011ea:	7ba9      	ldrb	r1, [r5, #14]
	myRadio.bw = settings.bw;
 80011ec:	71a2      	strb	r2, [r4, #6]
	myRadio.cr = settings.cr;
 80011ee:	71e3      	strb	r3, [r4, #7]
	myRadio.sf = settings.sf;
 80011f0:	7161      	strb	r1, [r4, #5]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 80011f2:	6828      	ldr	r0, [r5, #0]
 80011f4:	f7ff f868 	bl	80002c8 <__aeabi_ui2f>
 80011f8:	4908      	ldr	r1, [pc, #32]	; (800121c <settingsInitiate+0x3c>)
 80011fa:	f7ff f971 	bl	80004e0 <__aeabi_fdiv>
 80011fe:	f7ff faa7 	bl	8000750 <__aeabi_f2uiz>
	myRadio.preamble = settings.preamble;
 8001202:	89a9      	ldrh	r1, [r5, #12]
	myRadio.power = settings.power;
 8001204:	7caa      	ldrb	r2, [r5, #18]
	myRadio.syncWord = settings.syncWord;
 8001206:	7c6b      	ldrb	r3, [r5, #17]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8001208:	6020      	str	r0, [r4, #0]
	myRadio.preamble = settings.preamble;
 800120a:	81a1      	strh	r1, [r4, #12]
	myRadio.power = settings.power;
 800120c:	7122      	strb	r2, [r4, #4]
	myRadio.syncWord = settings.syncWord;
 800120e:	73a3      	strb	r3, [r4, #14]
	myRadio.preamble = settings.preamble;
}
 8001210:	bd38      	pop	{r3, r4, r5, pc}
 8001212:	bf00      	nop
 8001214:	20000a00 	.word	0x20000a00
 8001218:	20000928 	.word	0x20000928
 800121c:	427423d7 	.word	0x427423d7

08001220 <tryLoadSettings>:
 * @param None
 * @retval 1 - success 0 - fail
 */
uint8_t tryLoadSettings ()
{
	if (flashSettings->realFrequency >= MIN_FREQUENCY && flashSettings->realFrequency <= MAX_FREQUENCY)
 8001220:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <tryLoadSettings+0x94>)
{
 8001222:	b538      	push	{r3, r4, r5, lr}
	if (flashSettings->realFrequency >= MIN_FREQUENCY && flashSettings->realFrequency <= MAX_FREQUENCY)
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <tryLoadSettings+0x98>)
 8001228:	680a      	ldr	r2, [r1, #0]
 800122a:	4824      	ldr	r0, [pc, #144]	; (80012bc <tryLoadSettings+0x9c>)
 800122c:	4413      	add	r3, r2
 800122e:	4283      	cmp	r3, r0
 8001230:	d83e      	bhi.n	80012b0 <tryLoadSettings+0x90>
		if (flashSettings->sf > 6 && flashSettings->sf < 13)
 8001232:	7b8b      	ldrb	r3, [r1, #14]
 8001234:	3b07      	subs	r3, #7
 8001236:	2b05      	cmp	r3, #5
 8001238:	d83a      	bhi.n	80012b0 <tryLoadSettings+0x90>
			if (flashSettings->bw < 10)
 800123a:	7bcb      	ldrb	r3, [r1, #15]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d837      	bhi.n	80012b0 <tryLoadSettings+0x90>
				if (flashSettings->cr > 0 && flashSettings->cr < 5)
 8001240:	7c0b      	ldrb	r3, [r1, #16]
 8001242:	3b01      	subs	r3, #1
 8001244:	2b03      	cmp	r3, #3
 8001246:	d833      	bhi.n	80012b0 <tryLoadSettings+0x90>
					if (flashSettings->preamble > 1 && flashSettings->preamble < 65535)
 8001248:	f64f 70fc 	movw	r0, #65532	; 0xfffc
 800124c:	898b      	ldrh	r3, [r1, #12]
 800124e:	3b02      	subs	r3, #2
 8001250:	b29b      	uxth	r3, r3
 8001252:	4283      	cmp	r3, r0
 8001254:	d82c      	bhi.n	80012b0 <tryLoadSettings+0x90>
						if (flashSettings->realFrequency > MIN_FREQUENCY && flashSettings->realFrequency < MAX_FREQUENCY)
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <tryLoadSettings+0xa0>)
 8001258:	4c1a      	ldr	r4, [pc, #104]	; (80012c4 <tryLoadSettings+0xa4>)
 800125a:	4410      	add	r0, r2
 800125c:	42a0      	cmp	r0, r4
 800125e:	d227      	bcs.n	80012b0 <tryLoadSettings+0x90>
							if (flashSettings->syncWord != 0x34 && flashSettings->syncWord != 0x55 && flashSettings->syncWord != 0xAA)
 8001260:	7c4a      	ldrb	r2, [r1, #17]
 8001262:	2a34      	cmp	r2, #52	; 0x34
 8001264:	d024      	beq.n	80012b0 <tryLoadSettings+0x90>
 8001266:	2a55      	cmp	r2, #85	; 0x55
 8001268:	d022      	beq.n	80012b0 <tryLoadSettings+0x90>
 800126a:	2aaa      	cmp	r2, #170	; 0xaa
 800126c:	d020      	beq.n	80012b0 <tryLoadSettings+0x90>
								if (flashSettings->power < 21 || flashSettings->power > 9)
									if (flashSettings->warningDelay > MIN_WARNING_DELAY && flashSettings->warningDelay < MAX_WARNING_DELAY)
 800126e:	6848      	ldr	r0, [r1, #4]
 8001270:	4c15      	ldr	r4, [pc, #84]	; (80012c8 <tryLoadSettings+0xa8>)
 8001272:	f5a0 426a 	sub.w	r2, r0, #59904	; 0xea00
 8001276:	3a61      	subs	r2, #97	; 0x61
 8001278:	42a2      	cmp	r2, r4
 800127a:	d819      	bhi.n	80012b0 <tryLoadSettings+0x90>
										if (flashSettings->superWarningDelay > MIN_WARNING_DELAY && flashSettings->superWarningDelay < MAX_WARNING_DELAY)
 800127c:	688c      	ldr	r4, [r1, #8]
 800127e:	4d12      	ldr	r5, [pc, #72]	; (80012c8 <tryLoadSettings+0xa8>)
 8001280:	f5a4 426a 	sub.w	r2, r4, #59904	; 0xea00
 8001284:	3a61      	subs	r2, #97	; 0x61
 8001286:	42aa      	cmp	r2, r5
 8001288:	d812      	bhi.n	80012b0 <tryLoadSettings+0x90>
											if (flashSettings->superWarningDelay > flashSettings->warningDelay)
 800128a:	42a0      	cmp	r0, r4
 800128c:	d210      	bcs.n	80012b0 <tryLoadSettings+0x90>
												if (flashSettings->preamble >= MIN_PREAMBLE && flashSettings->preamble <= MAX_PREAMBLE)
 800128e:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001292:	4293      	cmp	r3, r2
 8001294:	d80c      	bhi.n	80012b0 <tryLoadSettings+0x90>
													if (flashSettings->baseID > 0 && flashSettings->baseID < MAX_BASEID)
 8001296:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <tryLoadSettings+0xac>)
 800129a:	3b01      	subs	r3, #1
 800129c:	4293      	cmp	r3, r2
 800129e:	d807      	bhi.n	80012b0 <tryLoadSettings+0x90>
														{
															settings = *flashSettings;
 80012a0:	2268      	movs	r2, #104	; 0x68
 80012a2:	480b      	ldr	r0, [pc, #44]	; (80012d0 <tryLoadSettings+0xb0>)
 80012a4:	f009 f9e4 	bl	800a670 <memcpy>
															settingsInitiate ();
 80012a8:	f7ff ff9a 	bl	80011e0 <settingsInitiate>
															return 1;
 80012ac:	2001      	movs	r0, #1
														}
	return 0;
}
 80012ae:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
 80012b0:	2000      	movs	r0, #0
}
 80012b2:	bd38      	pop	{r3, r4, r5, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	f7c64980 	.word	0xf7c64980
 80012bc:	3351d140 	.word	0x3351d140
 80012c0:	f7c6497f 	.word	0xf7c6497f
 80012c4:	3351d13f 	.word	0x3351d13f
 80012c8:	0292439e 	.word	0x0292439e
 80012cc:	0098967d 	.word	0x0098967d
 80012d0:	20000a00 	.word	0x20000a00

080012d4 <saveSettings>:
{
	uint16_t i = 0;
	uint16_t const settingsSize = (sizeof(baseSettings_t) + 3) / 4;
	FLASH_EraseInitTypeDef eraseInit;
	uint32_t pageError;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80012d4:	2300      	movs	r3, #0
	eraseInit.PageAddress = (uint32_t) flashSettings;
	eraseInit.NbPages = 1;
 80012d6:	2201      	movs	r2, #1
{
 80012d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	eraseInit.PageAddress = (uint32_t) flashSettings;
 80012dc:	4d1f      	ldr	r5, [pc, #124]	; (800135c <saveSettings+0x88>)
{
 80012de:	b086      	sub	sp, #24
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80012e0:	9302      	str	r3, [sp, #8]
	eraseInit.PageAddress = (uint32_t) flashSettings;
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	4c1e      	ldr	r4, [pc, #120]	; (8001360 <saveSettings+0x8c>)
 80012e6:	e9cd 3204 	strd	r3, r2, [sp, #16]
	HAL_FLASH_Unlock ();
 80012ea:	f006 fc67 	bl	8007bbc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase (&eraseInit, &pageError);
 80012ee:	a901      	add	r1, sp, #4
 80012f0:	a802      	add	r0, sp, #8
 80012f2:	f006 fcd7 	bl	8007ca4 <HAL_FLASHEx_Erase>
	for (i = 0; i < settingsSize; i++)
 80012f6:	f104 0804 	add.w	r8, r4, #4
 80012fa:	f104 0768 	add.w	r7, r4, #104	; 0x68
 80012fe:	4266      	negs	r6, r4
		HAL_FLASH_Program (FLASH_TYPEPROGRAM_WORD, ((uint32_t) flashSettings) + 4 * i, *(((uint32_t*) &settings) + i));
 8001300:	6829      	ldr	r1, [r5, #0]
 8001302:	1933      	adds	r3, r6, r4
 8001304:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8001308:	4419      	add	r1, r3
 800130a:	2002      	movs	r0, #2
 800130c:	2300      	movs	r3, #0
 800130e:	f006 fb77 	bl	8007a00 <HAL_FLASH_Program>
	for (i = 0; i < settingsSize; i++)
 8001312:	42a7      	cmp	r7, r4
 8001314:	d1f4      	bne.n	8001300 <saveSettings+0x2c>
	HAL_FLASH_Lock ();
 8001316:	f006 fc65 	bl	8007be4 <HAL_FLASH_Lock>
	myRadio.sf = settings.sf;
 800131a:	4c12      	ldr	r4, [pc, #72]	; (8001364 <saveSettings+0x90>)
	myRadio.bw = settings.bw;
 800131c:	f898 200f 	ldrb.w	r2, [r8, #15]
	myRadio.cr = settings.cr;
 8001320:	f898 3010 	ldrb.w	r3, [r8, #16]
	myRadio.sf = settings.sf;
 8001324:	f898 100e 	ldrb.w	r1, [r8, #14]
	myRadio.bw = settings.bw;
 8001328:	71a2      	strb	r2, [r4, #6]
	myRadio.cr = settings.cr;
 800132a:	71e3      	strb	r3, [r4, #7]
	myRadio.sf = settings.sf;
 800132c:	7161      	strb	r1, [r4, #5]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 800132e:	f8d8 0000 	ldr.w	r0, [r8]
 8001332:	f7fe ffc9 	bl	80002c8 <__aeabi_ui2f>
 8001336:	490c      	ldr	r1, [pc, #48]	; (8001368 <saveSettings+0x94>)
 8001338:	f7ff f8d2 	bl	80004e0 <__aeabi_fdiv>
 800133c:	f7ff fa08 	bl	8000750 <__aeabi_f2uiz>
	myRadio.preamble = settings.preamble;
 8001340:	f8b8 100c 	ldrh.w	r1, [r8, #12]
	myRadio.power = settings.power;
 8001344:	f898 2012 	ldrb.w	r2, [r8, #18]
	myRadio.syncWord = settings.syncWord;
 8001348:	f898 3011 	ldrb.w	r3, [r8, #17]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 800134c:	6020      	str	r0, [r4, #0]
	myRadio.preamble = settings.preamble;
 800134e:	81a1      	strh	r1, [r4, #12]
	myRadio.power = settings.power;
 8001350:	7122      	strb	r2, [r4, #4]
	myRadio.syncWord = settings.syncWord;
 8001352:	73a3      	strb	r3, [r4, #14]
	settingsInitiate ();
}
 8001354:	b006      	add	sp, #24
 8001356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800135a:	bf00      	nop
 800135c:	20000000 	.word	0x20000000
 8001360:	200009fc 	.word	0x200009fc
 8001364:	20000928 	.word	0x20000928
 8001368:	427423d7 	.word	0x427423d7

0800136c <encoderPinChanged>:
	static uint8_t right;
	static uint8_t left;
	static uint16_t lastStatus;
	static uint8_t r = 0;
	static uint8_t l = 0;
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <encoderPinChanged+0xd8>)
{
 800136e:	b470      	push	{r4, r5, r6}
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 6340 	and.w	r3, r3, #3072	; 0xc00

	switch (status)
 8001376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800137a:	d03d      	beq.n	80013f8 <encoderPinChanged+0x8c>
 800137c:	d80c      	bhi.n	8001398 <encoderPinChanged+0x2c>
 800137e:	4a32      	ldr	r2, [pc, #200]	; (8001448 <encoderPinChanged+0xdc>)
 8001380:	b353      	cbz	r3, 80013d8 <encoderPinChanged+0x6c>
 8001382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001386:	d104      	bne.n	8001392 <encoderPinChanged+0x26>
			r = 0;
			l = 0;
			break;

		case (0x400):
			if (lastStatus == 0xC00)
 8001388:	8811      	ldrh	r1, [r2, #0]
 800138a:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800138e:	d04d      	beq.n	800142c <encoderPinChanged+0xc0>
					right++;
					r = 1;
					l = 0;
				}

			if (lastStatus == 0 && l)
 8001390:	b349      	cbz	r1, 80013e6 <encoderPinChanged+0x7a>
					l = 1;
					r = 0;
				}
	}
	lastStatus = status;
}
 8001392:	bc70      	pop	{r4, r5, r6}
	lastStatus = status;
 8001394:	8013      	strh	r3, [r2, #0]
}
 8001396:	4770      	bx	lr
	switch (status)
 8001398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800139c:	d118      	bne.n	80013d0 <encoderPinChanged+0x64>
			if (right > 2)
 800139e:	482b      	ldr	r0, [pc, #172]	; (800144c <encoderPinChanged+0xe0>)
 80013a0:	7802      	ldrb	r2, [r0, #0]
 80013a2:	2a02      	cmp	r2, #2
 80013a4:	d904      	bls.n	80013b0 <encoderPinChanged+0x44>
				flag.encDec = 1;
 80013a6:	492a      	ldr	r1, [pc, #168]	; (8001450 <encoderPinChanged+0xe4>)
 80013a8:	780a      	ldrb	r2, [r1, #0]
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	700a      	strb	r2, [r1, #0]
			if (left > 2)
 80013b0:	4928      	ldr	r1, [pc, #160]	; (8001454 <encoderPinChanged+0xe8>)
 80013b2:	780a      	ldrb	r2, [r1, #0]
 80013b4:	2a02      	cmp	r2, #2
 80013b6:	d904      	bls.n	80013c2 <encoderPinChanged+0x56>
				flag.encInc = 1;
 80013b8:	4c25      	ldr	r4, [pc, #148]	; (8001450 <encoderPinChanged+0xe4>)
 80013ba:	7822      	ldrb	r2, [r4, #0]
 80013bc:	f042 0201 	orr.w	r2, r2, #1
 80013c0:	7022      	strb	r2, [r4, #0]
			right = 0;
 80013c2:	2200      	movs	r2, #0
			r = 0;
 80013c4:	4d24      	ldr	r5, [pc, #144]	; (8001458 <encoderPinChanged+0xec>)
			l = 0;
 80013c6:	4c25      	ldr	r4, [pc, #148]	; (800145c <encoderPinChanged+0xf0>)
			right = 0;
 80013c8:	7002      	strb	r2, [r0, #0]
			left = 0;
 80013ca:	700a      	strb	r2, [r1, #0]
			r = 0;
 80013cc:	702a      	strb	r2, [r5, #0]
			l = 0;
 80013ce:	7022      	strb	r2, [r4, #0]
			break;
 80013d0:	4a1d      	ldr	r2, [pc, #116]	; (8001448 <encoderPinChanged+0xdc>)
}
 80013d2:	bc70      	pop	{r4, r5, r6}
	lastStatus = status;
 80013d4:	8013      	strh	r3, [r2, #0]
}
 80013d6:	4770      	bx	lr
			if (lastStatus == 0x400 && r)
 80013d8:	8811      	ldrh	r1, [r2, #0]
 80013da:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80013de:	d00e      	beq.n	80013fe <encoderPinChanged+0x92>
			if (lastStatus == 0x800 && l)
 80013e0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80013e4:	d1d5      	bne.n	8001392 <encoderPinChanged+0x26>
			if (lastStatus == 0 && l)
 80013e6:	491d      	ldr	r1, [pc, #116]	; (800145c <encoderPinChanged+0xf0>)
 80013e8:	7809      	ldrb	r1, [r1, #0]
 80013ea:	2900      	cmp	r1, #0
 80013ec:	d0d1      	beq.n	8001392 <encoderPinChanged+0x26>
				left++;
 80013ee:	4819      	ldr	r0, [pc, #100]	; (8001454 <encoderPinChanged+0xe8>)
 80013f0:	7801      	ldrb	r1, [r0, #0]
 80013f2:	3101      	adds	r1, #1
 80013f4:	7001      	strb	r1, [r0, #0]
 80013f6:	e7cc      	b.n	8001392 <encoderPinChanged+0x26>
			if ((lastStatus == 0x000) && r)
 80013f8:	4a13      	ldr	r2, [pc, #76]	; (8001448 <encoderPinChanged+0xdc>)
 80013fa:	8811      	ldrh	r1, [r2, #0]
 80013fc:	b941      	cbnz	r1, 8001410 <encoderPinChanged+0xa4>
			if (lastStatus == 0x400 && r)
 80013fe:	4916      	ldr	r1, [pc, #88]	; (8001458 <encoderPinChanged+0xec>)
 8001400:	7809      	ldrb	r1, [r1, #0]
 8001402:	2900      	cmp	r1, #0
 8001404:	d0c5      	beq.n	8001392 <encoderPinChanged+0x26>
				right++;
 8001406:	4811      	ldr	r0, [pc, #68]	; (800144c <encoderPinChanged+0xe0>)
 8001408:	7801      	ldrb	r1, [r0, #0]
 800140a:	3101      	adds	r1, #1
 800140c:	7001      	strb	r1, [r0, #0]
 800140e:	e7c0      	b.n	8001392 <encoderPinChanged+0x26>
			if (lastStatus == 0xC00)
 8001410:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8001414:	d1bd      	bne.n	8001392 <encoderPinChanged+0x26>
					l = 1;
 8001416:	2601      	movs	r6, #1
					r = 0;
 8001418:	2400      	movs	r4, #0
					left++;
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <encoderPinChanged+0xe8>)
					l = 1;
 800141c:	4d0f      	ldr	r5, [pc, #60]	; (800145c <encoderPinChanged+0xf0>)
					left++;
 800141e:	7801      	ldrb	r1, [r0, #0]
 8001420:	4431      	add	r1, r6
 8001422:	7001      	strb	r1, [r0, #0]
					r = 0;
 8001424:	490c      	ldr	r1, [pc, #48]	; (8001458 <encoderPinChanged+0xec>)
					l = 1;
 8001426:	702e      	strb	r6, [r5, #0]
					r = 0;
 8001428:	700c      	strb	r4, [r1, #0]
 800142a:	e7b2      	b.n	8001392 <encoderPinChanged+0x26>
					r = 1;
 800142c:	2601      	movs	r6, #1
					l = 0;
 800142e:	2400      	movs	r4, #0
					right++;
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <encoderPinChanged+0xe0>)
					r = 1;
 8001432:	4d09      	ldr	r5, [pc, #36]	; (8001458 <encoderPinChanged+0xec>)
					right++;
 8001434:	7801      	ldrb	r1, [r0, #0]
 8001436:	4431      	add	r1, r6
 8001438:	7001      	strb	r1, [r0, #0]
					l = 0;
 800143a:	4908      	ldr	r1, [pc, #32]	; (800145c <encoderPinChanged+0xf0>)
					r = 1;
 800143c:	702e      	strb	r6, [r5, #0]
					l = 0;
 800143e:	700c      	strb	r4, [r1, #0]
			if (lastStatus == 0 && l)
 8001440:	e7a7      	b.n	8001392 <encoderPinChanged+0x26>
 8001442:	bf00      	nop
 8001444:	40010c08 	.word	0x40010c08
 8001448:	200000c0 	.word	0x200000c0
 800144c:	200000ed 	.word	0x200000ed
 8001450:	20000adc 	.word	0x20000adc
 8001454:	200000da 	.word	0x200000da
 8001458:	200000dc 	.word	0x200000dc
 800145c:	200000b6 	.word	0x200000b6

08001460 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin)
 8001460:	2804      	cmp	r0, #4
{
 8001462:	b510      	push	{r4, lr}
 8001464:	4604      	mov	r4, r0
	switch (GPIO_Pin)
 8001466:	d01b      	beq.n	80014a0 <HAL_GPIO_EXTI_Callback+0x40>
 8001468:	d810      	bhi.n	800148c <HAL_GPIO_EXTI_Callback+0x2c>
 800146a:	2802      	cmp	r0, #2
 800146c:	d10d      	bne.n	800148a <HAL_GPIO_EXTI_Callback+0x2a>
			delayMicro (20000);
 800146e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001472:	f7ff fc99 	bl	8000da8 <delayMicro>
			if (HAL_GPIO_ReadPin (B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8001476:	4621      	mov	r1, r4
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x60>)
 800147a:	f006 fd81 	bl	8007f80 <HAL_GPIO_ReadPin>
 800147e:	b920      	cbnz	r0, 800148a <HAL_GPIO_EXTI_Callback+0x2a>
				flag.encOk = 1;
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001482:	7813      	ldrb	r3, [r2, #0]
 8001484:	f043 0304 	orr.w	r3, r3, #4
 8001488:	7013      	strb	r3, [r2, #0]
}
 800148a:	bd10      	pop	{r4, pc}
	switch (GPIO_Pin)
 800148c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001490:	d002      	beq.n	8001498 <HAL_GPIO_EXTI_Callback+0x38>
 8001492:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8001496:	d1f8      	bne.n	800148a <HAL_GPIO_EXTI_Callback+0x2a>
}
 8001498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			encoderPinChanged ();
 800149c:	f7ff bf66 	b.w	800136c <encoderPinChanged>
			delayMicro (20000);
 80014a0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80014a4:	f7ff fc80 	bl	8000da8 <delayMicro>
			if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80014a8:	4621      	mov	r1, r4
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <HAL_GPIO_EXTI_Callback+0x60>)
 80014ac:	f006 fd68 	bl	8007f80 <HAL_GPIO_ReadPin>
 80014b0:	2800      	cmp	r0, #0
 80014b2:	d1ea      	bne.n	800148a <HAL_GPIO_EXTI_Callback+0x2a>
				flag.back = 1;
 80014b4:	4a03      	ldr	r2, [pc, #12]	; (80014c4 <HAL_GPIO_EXTI_Callback+0x64>)
 80014b6:	7813      	ldrb	r3, [r2, #0]
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	7013      	strb	r3, [r2, #0]
}
 80014be:	bd10      	pop	{r4, pc}
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	20000adc 	.word	0x20000adc

080014c8 <handleMessage>:
 * @brief Received radio message handler
 * @param message length
 * @retval None
 */
void handleMessage (uint8_t len)
{
 80014c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t nodeNum = rxMes->adr;
 80014cc:	4eb4      	ldr	r6, [pc, #720]	; (80017a0 <handleMessage+0x2d8>)
	receivedMesCnt++;
 80014ce:	4ab5      	ldr	r2, [pc, #724]	; (80017a4 <handleMessage+0x2dc>)
	uint8_t nodeNum = rxMes->adr;
 80014d0:	6831      	ldr	r1, [r6, #0]
	receivedMesCnt++;
 80014d2:	6813      	ldr	r3, [r2, #0]
	uint8_t nodeNum = rxMes->adr;
 80014d4:	780d      	ldrb	r5, [r1, #0]
{
 80014d6:	b0e7      	sub	sp, #412	; 0x19c
	uint8_t nodeNum = rxMes->adr;
 80014d8:	f3c5 01c4 	ubfx	r1, r5, #3, #5
	receivedMesCnt++;
 80014dc:	3301      	adds	r3, #1
	uint8_t nodeNum = rxMes->adr;
 80014de:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 80014e2:	08e9      	lsrs	r1, r5, #3
	receivedMesCnt++;
 80014e4:	6013      	str	r3, [r2, #0]
	uint8_t nodeNum = rxMes->adr;
 80014e6:	910d      	str	r1, [sp, #52]	; 0x34
	clearStrings ();
 80014e8:	f7ff fe1a 	bl	8001120 <clearStrings>
	if (myRadio.badCrc == 1)
 80014ec:	4bae      	ldr	r3, [pc, #696]	; (80017a8 <handleMessage+0x2e0>)
 80014ee:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 8202 	bne.w	80018fc <handleMessage+0x434>
					updateLcd ();
				}
			return;
		}

	receMesCntSuc++;
 80014f8:	4aac      	ldr	r2, [pc, #688]	; (80017ac <handleMessage+0x2e4>)

	if (rxMes->uplink == 0)
 80014fa:	6830      	ldr	r0, [r6, #0]
	receMesCntSuc++;
 80014fc:	6813      	ldr	r3, [r2, #0]
	if (rxMes->uplink == 0)
 80014fe:	7801      	ldrb	r1, [r0, #0]
	receMesCntSuc++;
 8001500:	3301      	adds	r3, #1
	if (rxMes->uplink == 0)
 8001502:	07cc      	lsls	r4, r1, #31
	receMesCntSuc++;
 8001504:	6013      	str	r3, [r2, #0]
	if (rxMes->uplink == 0)
 8001506:	f140 81f1 	bpl.w	80018ec <handleMessage+0x424>
					updateLcd ();
				}
			return;
		}

	if (rxMes->adr >= MAX_NODES)
 800150a:	293f      	cmp	r1, #63	; 0x3f
 800150c:	f200 83b1 	bhi.w	8001c72 <handleMessage+0x7aa>
					updateLcd ();
				}
			return;
		}

	if (nodes[nodeNum].activated == 0)
 8001510:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001512:	4ca7      	ldr	r4, [pc, #668]	; (80017b0 <handleMessage+0x2e8>)
 8001514:	0153      	lsls	r3, r2, #5
 8001516:	930f      	str	r3, [sp, #60]	; 0x3c
 8001518:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 800151c:	9310      	str	r3, [sp, #64]	; 0x40
 800151e:	7c5b      	ldrb	r3, [r3, #17]
 8001520:	9311      	str	r3, [sp, #68]	; 0x44
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 822f 	beq.w	8001986 <handleMessage+0x4be>
		{
			nodes[nodeNum].activated = 1;
			saveNodeData ();
		}
	nodes[nodeNum].disarmed = rxMes->disarm;
 8001528:	7843      	ldrb	r3, [r0, #1]
 800152a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800152c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001530:	1967      	adds	r7, r4, r5
 8001532:	737b      	strb	r3, [r7, #13]
	nodes[nodeNum].lastContact = HAL_GetTick ();
 8001534:	f005 fe12 	bl	800715c <HAL_GetTick>
	nodes[nodeNum].opened = rxMes->opened;
 8001538:	f8d6 8000 	ldr.w	r8, [r6]
	nodes[nodeNum].lastContact = HAL_GetTick ();
 800153c:	5160      	str	r0, [r4, r5]
	nodes[nodeNum].opened = rxMes->opened;
 800153e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001542:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001546:	73fb      	strb	r3, [r7, #15]
	nodes[nodeNum].powered = rxMes->powered;
 8001548:	f898 3001 	ldrb.w	r3, [r8, #1]
 800154c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001550:	743b      	strb	r3, [r7, #16]
	nodes[nodeNum].voltage = 1.9F + rxMes->codedVoltage / 10.0F;
 8001552:	f898 0001 	ldrb.w	r0, [r8, #1]
 8001556:	08c0      	lsrs	r0, r0, #3
 8001558:	f7fe feba 	bl	80002d0 <__aeabi_i2f>
 800155c:	4995      	ldr	r1, [pc, #596]	; (80017b4 <handleMessage+0x2ec>)
 800155e:	f7fe ffbf 	bl	80004e0 <__aeabi_fdiv>
 8001562:	4995      	ldr	r1, [pc, #596]	; (80017b8 <handleMessage+0x2f0>)
 8001564:	f7fe fe00 	bl	8000168 <__addsf3>
 8001568:	6178      	str	r0, [r7, #20]
	nodes[nodeNum].temperature = rxMes->codedTemperature / 2.0F - 40.0F;
 800156a:	f898 0002 	ldrb.w	r0, [r8, #2]
 800156e:	f7fe feaf 	bl	80002d0 <__aeabi_i2f>
 8001572:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001576:	f7fe feff 	bl	8000378 <__aeabi_fmul>
 800157a:	4990      	ldr	r1, [pc, #576]	; (80017bc <handleMessage+0x2f4>)
 800157c:	f7fe fdf2 	bl	8000164 <__aeabi_fsub>
 8001580:	4603      	mov	r3, r0
	nodes[nodeNum].rssi = SX127X_RSSI_Pack (&myRadio);
 8001582:	4889      	ldr	r0, [pc, #548]	; (80017a8 <handleMessage+0x2e0>)
	nodes[nodeNum].temperature = rxMes->codedTemperature / 2.0F - 40.0F;
 8001584:	61fb      	str	r3, [r7, #28]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack (&myRadio);
 8001586:	f005 f821 	bl	80065cc <SX127X_RSSI_Pack>
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 800158a:	7b3b      	ldrb	r3, [r7, #12]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack (&myRadio);
 800158c:	8178      	strh	r0, [r7, #10]
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 800158e:	07da      	lsls	r2, r3, #31
 8001590:	d40a      	bmi.n	80015a8 <handleMessage+0xe0>
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	b142      	cbz	r2, 80015a8 <handleMessage+0xe0>
		{
			nodes[nodeNum].alarm |= ALARM_DOOR;
			nodes[nodeNum].NetAlarm |= ALARM_DOOR;
 8001596:	f105 0110 	add.w	r1, r5, #16
 800159a:	4421      	add	r1, r4
			nodes[nodeNum].alarm |= ALARM_DOOR;
 800159c:	884a      	ldrh	r2, [r1, #2]
 800159e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	804a      	strh	r2, [r1, #2]
		}
	if ((nodes[nodeNum].masked & MASK_POWER) == 0 && !nodes[nodeNum].powered)
 80015a8:	079b      	lsls	r3, r3, #30
 80015aa:	d40b      	bmi.n	80015c4 <handleMessage+0xfc>
 80015ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80015ae:	18a3      	adds	r3, r4, r2
 80015b0:	7c1b      	ldrb	r3, [r3, #16]
 80015b2:	b93b      	cbnz	r3, 80015c4 <handleMessage+0xfc>
		{
			nodes[nodeNum].alarm |= ALARM_POWER;
			nodes[nodeNum].NetAlarm |= ALARM_POWER;
 80015b4:	3210      	adds	r2, #16
 80015b6:	4422      	add	r2, r4
			nodes[nodeNum].alarm |= ALARM_POWER;
 80015b8:	8853      	ldrh	r3, [r2, #2]
 80015ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015be:	f043 0302 	orr.w	r3, r3, #2
 80015c2:	8053      	strh	r3, [r2, #2]
		}

	lastMessageFrom = nodeNum;
	flag.lcdRefreshRequest = 1;
 80015c4:	4a7e      	ldr	r2, [pc, #504]	; (80017c0 <handleMessage+0x2f8>)
	lastMessageFrom = nodeNum;
 80015c6:	497f      	ldr	r1, [pc, #508]	; (80017c4 <handleMessage+0x2fc>)
	flag.lcdRefreshRequest = 1;
 80015c8:	7813      	ldrb	r3, [r2, #0]
	lastMessageFrom = nodeNum;
 80015ca:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
	flag.lcdRefreshRequest = 1;
 80015ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d2:	7013      	strb	r3, [r2, #0]
	lastMessageFrom = nodeNum;
 80015d4:	7008      	strb	r0, [r1, #0]
	uint32_t tick = HAL_GetTick ();
 80015d6:	f005 fdc1 	bl	800715c <HAL_GetTick>
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 80015da:	7c63      	ldrb	r3, [r4, #17]
 80015dc:	b173      	cbz	r3, 80015fc <handleMessage+0x134>
 80015de:	6863      	ldr	r3, [r4, #4]
 80015e0:	1a1b      	subs	r3, r3, r0
 80015e2:	d00b      	beq.n	80015fc <handleMessage+0x134>
 80015e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015e8:	f080 8380 	bcs.w	8001cec <handleMessage+0x824>
					&& (i != nodeNum))
 80015ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80015ee:	2a00      	cmp	r2, #0
 80015f0:	f000 837e 	beq.w	8001cf0 <handleMessage+0x828>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 80015f4:	4a74      	ldr	r2, [pc, #464]	; (80017c8 <handleMessage+0x300>)
 80015f6:	fba2 2303 	umull	r2, r3, r2, r3
 80015fa:	099b      	lsrs	r3, r3, #6
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 80015fc:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8001600:	b18a      	cbz	r2, 8001626 <handleMessage+0x15e>
 8001602:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001606:	fb01 f103 	mul.w	r1, r1, r3
 800160a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800160c:	1a12      	subs	r2, r2, r0
 800160e:	428a      	cmp	r2, r1
 8001610:	d909      	bls.n	8001626 <handleMessage+0x15e>
 8001612:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001616:	d206      	bcs.n	8001626 <handleMessage+0x15e>
					&& (i != nodeNum))
 8001618:	990d      	ldr	r1, [sp, #52]	; 0x34
 800161a:	2901      	cmp	r1, #1
 800161c:	d003      	beq.n	8001626 <handleMessage+0x15e>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 800161e:	4b6a      	ldr	r3, [pc, #424]	; (80017c8 <handleMessage+0x300>)
 8001620:	fba3 2302 	umull	r2, r3, r3, r2
 8001624:	099b      	lsrs	r3, r3, #6
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 8001626:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 800162a:	b18a      	cbz	r2, 8001650 <handleMessage+0x188>
 800162c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001630:	fb01 f103 	mul.w	r1, r1, r3
 8001634:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001636:	1a12      	subs	r2, r2, r0
 8001638:	428a      	cmp	r2, r1
 800163a:	d909      	bls.n	8001650 <handleMessage+0x188>
 800163c:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001640:	d206      	bcs.n	8001650 <handleMessage+0x188>
					&& (i != nodeNum))
 8001642:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001644:	2902      	cmp	r1, #2
 8001646:	d003      	beq.n	8001650 <handleMessage+0x188>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 8001648:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <handleMessage+0x300>)
 800164a:	fba3 2302 	umull	r2, r3, r3, r2
 800164e:	099b      	lsrs	r3, r3, #6
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 8001650:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8001654:	b18a      	cbz	r2, 800167a <handleMessage+0x1b2>
 8001656:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800165a:	fb01 f103 	mul.w	r1, r1, r3
 800165e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001660:	1a12      	subs	r2, r2, r0
 8001662:	4291      	cmp	r1, r2
 8001664:	d209      	bcs.n	800167a <handleMessage+0x1b2>
 8001666:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800166a:	d206      	bcs.n	800167a <handleMessage+0x1b2>
					&& (i != nodeNum))
 800166c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800166e:	2903      	cmp	r1, #3
 8001670:	d003      	beq.n	800167a <handleMessage+0x1b2>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 8001672:	4b55      	ldr	r3, [pc, #340]	; (80017c8 <handleMessage+0x300>)
 8001674:	fba3 2302 	umull	r2, r3, r3, r2
 8001678:	099b      	lsrs	r3, r3, #6
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 800167a:	f894 2091 	ldrb.w	r2, [r4, #145]	; 0x91
 800167e:	b192      	cbz	r2, 80016a6 <handleMessage+0x1de>
 8001680:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001684:	fb01 f103 	mul.w	r1, r1, r3
 8001688:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800168c:	1a12      	subs	r2, r2, r0
 800168e:	428a      	cmp	r2, r1
 8001690:	d909      	bls.n	80016a6 <handleMessage+0x1de>
 8001692:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001696:	d206      	bcs.n	80016a6 <handleMessage+0x1de>
					&& (i != nodeNum))
 8001698:	990d      	ldr	r1, [sp, #52]	; 0x34
 800169a:	2904      	cmp	r1, #4
 800169c:	d003      	beq.n	80016a6 <handleMessage+0x1de>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 800169e:	4b4a      	ldr	r3, [pc, #296]	; (80017c8 <handleMessage+0x300>)
 80016a0:	fba3 2302 	umull	r2, r3, r3, r2
 80016a4:	099b      	lsrs	r3, r3, #6
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 80016a6:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
 80016aa:	b192      	cbz	r2, 80016d2 <handleMessage+0x20a>
 80016ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b0:	fb01 f103 	mul.w	r1, r1, r3
 80016b4:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80016b8:	1a12      	subs	r2, r2, r0
 80016ba:	428a      	cmp	r2, r1
 80016bc:	d909      	bls.n	80016d2 <handleMessage+0x20a>
 80016be:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80016c2:	d206      	bcs.n	80016d2 <handleMessage+0x20a>
					&& (i != nodeNum))
 80016c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80016c6:	2905      	cmp	r1, #5
 80016c8:	d003      	beq.n	80016d2 <handleMessage+0x20a>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 80016ca:	4b3f      	ldr	r3, [pc, #252]	; (80017c8 <handleMessage+0x300>)
 80016cc:	fba3 2302 	umull	r2, r3, r3, r2
 80016d0:	099b      	lsrs	r3, r3, #6
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 80016d2:	f894 20d1 	ldrb.w	r2, [r4, #209]	; 0xd1
 80016d6:	b192      	cbz	r2, 80016fe <handleMessage+0x236>
 80016d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016dc:	fb01 f103 	mul.w	r1, r1, r3
 80016e0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80016e4:	1a12      	subs	r2, r2, r0
 80016e6:	428a      	cmp	r2, r1
 80016e8:	d909      	bls.n	80016fe <handleMessage+0x236>
 80016ea:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 80016ee:	d206      	bcs.n	80016fe <handleMessage+0x236>
					&& (i != nodeNum))
 80016f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80016f2:	2906      	cmp	r1, #6
 80016f4:	d003      	beq.n	80016fe <handleMessage+0x236>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 80016f6:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <handleMessage+0x300>)
 80016f8:	fba3 2302 	umull	r2, r3, r3, r2
 80016fc:	099b      	lsrs	r3, r3, #6
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 80016fe:	f894 20f1 	ldrb.w	r2, [r4, #241]	; 0xf1
 8001702:	b192      	cbz	r2, 800172a <handleMessage+0x262>
 8001704:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001708:	fb01 f103 	mul.w	r1, r1, r3
 800170c:	f8d4 20e4 	ldr.w	r2, [r4, #228]	; 0xe4
 8001710:	1a12      	subs	r2, r2, r0
 8001712:	428a      	cmp	r2, r1
 8001714:	d909      	bls.n	800172a <handleMessage+0x262>
 8001716:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800171a:	d206      	bcs.n	800172a <handleMessage+0x262>
					&& (i != nodeNum))
 800171c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800171e:	2907      	cmp	r1, #7
 8001720:	d003      	beq.n	800172a <handleMessage+0x262>
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <handleMessage+0x300>)
 8001724:	fba3 2302 	umull	r2, r3, r3, r2
 8001728:	099b      	lsrs	r3, r3, #6
	if (maxDelay > (nodeSettings.workInterval - SAFE_INTERVAL))
 800172a:	4a28      	ldr	r2, [pc, #160]	; (80017cc <handleMessage+0x304>)
	absoluteMaxDelay = absoluteMaxDelay < delay ? delay : absoluteMaxDelay;
 800172c:	4f28      	ldr	r7, [pc, #160]	; (80017d0 <handleMessage+0x308>)
	if (maxDelay > (nodeSettings.workInterval - SAFE_INTERVAL))
 800172e:	6852      	ldr	r2, [r2, #4]
 8001730:	f1a2 010a 	sub.w	r1, r2, #10
 8001734:	4299      	cmp	r1, r3
		delay = nodeSettings.workInterval;
 8001736:	bf28      	it	cs
 8001738:	b293      	uxthcs	r3, r2
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 800173a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		delay = maxDelay + SAFE_INTERVAL;
 800173e:	bf3c      	itt	cc
 8001740:	330a      	addcc	r3, #10
 8001742:	b29b      	uxthcc	r3, r3
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 8001744:	fb02 0003 	mla	r0, r2, r3, r0
	absoluteMaxDelay = absoluteMaxDelay < delay ? delay : absoluteMaxDelay;
 8001748:	683a      	ldr	r2, [r7, #0]
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 800174a:	990f      	ldr	r1, [sp, #60]	; 0x3c
	absoluteMaxDelay = absoluteMaxDelay < delay ? delay : absoluteMaxDelay;
 800174c:	429a      	cmp	r2, r3
 800174e:	bf38      	it	cc
 8001750:	461a      	movcc	r2, r3
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 8001752:	440c      	add	r4, r1
	calcDelay (nodeNum);
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 8001754:	491f      	ldr	r1, [pc, #124]	; (80017d4 <handleMessage+0x30c>)
	nodes[nodeNum].delay = delay;
 8001756:	8123      	strh	r3, [r4, #8]
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 8001758:	6809      	ldr	r1, [r1, #0]
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 800175a:	6060      	str	r0, [r4, #4]
	absoluteMaxDelay = absoluteMaxDelay < delay ? delay : absoluteMaxDelay;
 800175c:	603a      	str	r2, [r7, #0]
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 800175e:	708b      	strb	r3, [r1, #2]
	txMes->codedDelayMSB = (nodes[nodeNum].delay >> 8) & 0x7F;
	txMes->adr = nodeNum;
	txMes->disarm = nodes[nodeNum].disarmRequest;
 8001760:	7ba2      	ldrb	r2, [r4, #14]
	txMes->message = MSG_DOWN_ACKNOWLEDGE;
	txMes->uplink = 0;
 8001762:	980d      	ldr	r0, [sp, #52]	; 0x34
	txMes->disarm = nodes[nodeNum].disarmRequest;
 8001764:	f002 0201 	and.w	r2, r2, #1
	txMes->codedDelayMSB = (nodes[nodeNum].delay >> 8) & 0x7F;
 8001768:	0a1b      	lsrs	r3, r3, #8
	txMes->disarm = nodes[nodeNum].disarmRequest;
 800176a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
	txMes->uplink = 0;
 800176e:	00c5      	lsls	r5, r0, #3
	txMes->disarm = nodes[nodeNum].disarmRequest;
 8001770:	704b      	strb	r3, [r1, #1]
	txMes->uplink = 0;
 8001772:	700d      	strb	r5, [r1, #0]
	HAL_Delay (2);
 8001774:	2002      	movs	r0, #2
	SX127X_transmitAsync (&myRadio, 3);

	if (netHandler.online)
 8001776:	4d18      	ldr	r5, [pc, #96]	; (80017d8 <handleMessage+0x310>)
	HAL_Delay (2);
 8001778:	f005 fcf6 	bl	8007168 <HAL_Delay>
	SX127X_transmitAsync (&myRadio, 3);
 800177c:	2103      	movs	r1, #3
 800177e:	480a      	ldr	r0, [pc, #40]	; (80017a8 <handleMessage+0x2e0>)
 8001780:	f004 fe6a 	bl	8006458 <SX127X_transmitAsync>
	if (netHandler.online)
 8001784:	78eb      	ldrb	r3, [r5, #3]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80a8 	beq.w	80018dc <handleMessage+0x414>
			char message[256];
			char Vstr[16];
			char Tstr[16];
			char DAstr[16];
			char PAstr[16];
			sprintf (DAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_DOOR ? "&DA=true" : "");
 800178c:	f894 9013 	ldrb.w	r9, [r4, #19]
 8001790:	4f12      	ldr	r7, [pc, #72]	; (80017dc <handleMessage+0x314>)
 8001792:	f019 0f01 	tst.w	r9, #1
 8001796:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 800179a:	4911      	ldr	r1, [pc, #68]	; (80017e0 <handleMessage+0x318>)
 800179c:	4640      	mov	r0, r8
 800179e:	e021      	b.n	80017e4 <handleMessage+0x31c>
 80017a0:	20000014 	.word	0x20000014
 80017a4:	200000e4 	.word	0x200000e4
 80017a8:	20000928 	.word	0x20000928
 80017ac:	200000e0 	.word	0x200000e0
 80017b0:	20000c78 	.word	0x20000c78
 80017b4:	41200000 	.word	0x41200000
 80017b8:	3ff33333 	.word	0x3ff33333
 80017bc:	42200000 	.word	0x42200000
 80017c0:	20000adc 	.word	0x20000adc
 80017c4:	20000004 	.word	0x20000004
 80017c8:	10624dd3 	.word	0x10624dd3
 80017cc:	20000c04 	.word	0x20000c04
 80017d0:	200000ac 	.word	0x200000ac
 80017d4:	20000018 	.word	0x20000018
 80017d8:	20000e4c 	.word	0x20000e4c
 80017dc:	0800bd98 	.word	0x0800bd98
 80017e0:	0800af44 	.word	0x0800af44
 80017e4:	bf08      	it	eq
 80017e6:	4639      	moveq	r1, r7
 80017e8:	f008 ff92 	bl	800a710 <strcpy>
			sprintf (PAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_POWER ? "&PA=true" : "");
 80017ec:	f019 0f02 	tst.w	r9, #2
 80017f0:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 80017f4:	49d9      	ldr	r1, [pc, #868]	; (8001b5c <handleMessage+0x694>)
 80017f6:	4648      	mov	r0, r9
 80017f8:	bf08      	it	eq
 80017fa:	4639      	moveq	r1, r7
 80017fc:	f008 ff88 	bl	800a710 <strcpy>
			sprintf (Vstr, "&V=%d.%d", (19 + rxMes->codedVoltage) / 10, (19 + rxMes->codedVoltage) % 10);
 8001800:	6833      	ldr	r3, [r6, #0]
 8001802:	4ad7      	ldr	r2, [pc, #860]	; (8001b60 <handleMessage+0x698>)
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	af16      	add	r7, sp, #88	; 0x58
 8001808:	08db      	lsrs	r3, r3, #3
 800180a:	3313      	adds	r3, #19
 800180c:	fba2 1203 	umull	r1, r2, r2, r3
 8001810:	08d2      	lsrs	r2, r2, #3
 8001812:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8001816:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 800181a:	4638      	mov	r0, r7
 800181c:	49d1      	ldr	r1, [pc, #836]	; (8001b64 <handleMessage+0x69c>)
 800181e:	f008 ff57 	bl	800a6d0 <siprintf>
			sprintf (Tstr, "&T=%d.%d", (int) nodes[nodeNum].temperature, ((int) (nodes[nodeNum].temperature * 10.0f)) % 10);
 8001822:	f8d4 a01c 	ldr.w	sl, [r4, #28]
 8001826:	49d0      	ldr	r1, [pc, #832]	; (8001b68 <handleMessage+0x6a0>)
 8001828:	4650      	mov	r0, sl
 800182a:	f7fe fda5 	bl	8000378 <__aeabi_fmul>
 800182e:	f7fe ff69 	bl	8000704 <__aeabi_f2iz>
 8001832:	4603      	mov	r3, r0
 8001834:	4acd      	ldr	r2, [pc, #820]	; (8001b6c <handleMessage+0x6a4>)
 8001836:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800183a:	fb82 1200 	smull	r1, r2, r2, r0
 800183e:	ebcb 0ba2 	rsb	fp, fp, r2, asr #2
 8001842:	4650      	mov	r0, sl
 8001844:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8001848:	eba3 0b4b 	sub.w	fp, r3, fp, lsl #1
 800184c:	f7fe ff5a 	bl	8000704 <__aeabi_f2iz>
 8001850:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8001854:	4602      	mov	r2, r0
 8001856:	465b      	mov	r3, fp
 8001858:	49c5      	ldr	r1, [pc, #788]	; (8001b70 <handleMessage+0x6a8>)
 800185a:	4650      	mov	r0, sl
 800185c:	f008 ff38 	bl	800a6d0 <siprintf>
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 8001860:	6830      	ldr	r0, [r6, #0]
 8001862:	49c4      	ldr	r1, [pc, #784]	; (8001b74 <handleMessage+0x6ac>)
								settings.ServerPass, rxMes->opened ? "true" : "false", rxMes->powered ? "true" : "false", rxMes->disarm ? "true" : "false",
 8001864:	7842      	ldrb	r2, [r0, #1]
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 8001866:	4bc4      	ldr	r3, [pc, #784]	; (8001b78 <handleMessage+0x6b0>)
 8001868:	f012 0f02 	tst.w	r2, #2
								nodes[nodeNum].masked & MASK_DOOR ? "true" : "false", nodes[nodeNum].masked & MASK_POWER ? "true" : "false", Vstr, Tstr, DAstr,
 800186c:	f894 b00c 	ldrb.w	fp, [r4, #12]
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 8001870:	bf14      	ite	ne
 8001872:	468e      	movne	lr, r1
 8001874:	469e      	moveq	lr, r3
 8001876:	f012 0f04 	tst.w	r2, #4
 800187a:	bf14      	ite	ne
 800187c:	468c      	movne	ip, r1
 800187e:	469c      	moveq	ip, r3
 8001880:	f012 0f01 	tst.w	r2, #1
 8001884:	bf14      	ite	ne
 8001886:	460a      	movne	r2, r1
 8001888:	461a      	moveq	r2, r3
 800188a:	f01b 0f01 	tst.w	fp, #1
 800188e:	bf14      	ite	ne
 8001890:	460e      	movne	r6, r1
 8001892:	461e      	moveq	r6, r3
 8001894:	f01b 0f02 	tst.w	fp, #2
 8001898:	bf08      	it	eq
 800189a:	4619      	moveq	r1, r3
 800189c:	7803      	ldrb	r3, [r0, #0]
 800189e:	e9cd ec02 	strd	lr, ip, [sp, #8]
 80018a2:	e9cd a808 	strd	sl, r8, [sp, #32]
 80018a6:	e9cd 2604 	strd	r2, r6, [sp, #16]
 80018aa:	f8df b2f0 	ldr.w	fp, [pc, #752]	; 8001b9c <handleMessage+0x6d4>
 80018ae:	9106      	str	r1, [sp, #24]
 80018b0:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 80018b4:	9707      	str	r7, [sp, #28]
 80018b6:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 80018ba:	f10b 0033 	add.w	r0, fp, #51	; 0x33
 80018be:	e9cd 2000 	strd	r2, r0, [sp]
 80018c2:	08db      	lsrs	r3, r3, #3
 80018c4:	49ad      	ldr	r1, [pc, #692]	; (8001b7c <handleMessage+0x6b4>)
 80018c6:	f10b 0243 	add.w	r2, fp, #67	; 0x43
 80018ca:	a826      	add	r0, sp, #152	; 0x98
 80018cc:	f008 ff00 	bl	800a6d0 <siprintf>
								PAstr);

			NetSendAsync (&netHandler, message);
 80018d0:	4628      	mov	r0, r5
 80018d2:	a926      	add	r1, sp, #152	; 0x98
 80018d4:	f7fe ff5c 	bl	8000790 <NetSendAsync>
			memset (message, 0, sizeof(message));
			nodes[nodeNum].NetAlarm = ALARM_OFF;
 80018d8:	2300      	movs	r3, #0
 80018da:	74e3      	strb	r3, [r4, #19]
		}

	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 80018dc:	2220      	movs	r2, #32
 80018de:	2100      	movs	r1, #0
 80018e0:	48a7      	ldr	r0, [pc, #668]	; (8001b80 <handleMessage+0x6b8>)

}
 80018e2:	b067      	add	sp, #412	; 0x19c
 80018e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 80018e8:	f008 beea 	b.w	800a6c0 <memset>
			if (screenMode == smRegular)
 80018ec:	4ba5      	ldr	r3, [pc, #660]	; (8001b84 <handleMessage+0x6bc>)
 80018ee:	781c      	ldrb	r4, [r3, #0]
 80018f0:	2c00      	cmp	r4, #0
 80018f2:	f000 8155 	beq.w	8001ba0 <handleMessage+0x6d8>
}
 80018f6:	b067      	add	sp, #412	; 0x19c
 80018f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (screenMode == smRegular)
 80018fc:	4ba1      	ldr	r3, [pc, #644]	; (8001b84 <handleMessage+0x6bc>)
 80018fe:	781d      	ldrb	r5, [r3, #0]
 8001900:	2d00      	cmp	r5, #0
 8001902:	d1f8      	bne.n	80018f6 <handleMessage+0x42e>
					sprintf (string[0], "Сообщение н принято!");
 8001904:	4ca0      	ldr	r4, [pc, #640]	; (8001b88 <handleMessage+0x6c0>)
 8001906:	4ea1      	ldr	r6, [pc, #644]	; (8001b8c <handleMessage+0x6c4>)
					clearStrings ();
 8001908:	f7ff fc0a 	bl	8001120 <clearStrings>
					sprintf (string[0], "Сообщение н принято!");
 800190c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800190e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001910:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001914:	e896 0003 	ldmia.w	r6, {r0, r1}
 8001918:	f844 0b04 	str.w	r0, [r4], #4
 800191c:	4626      	mov	r6, r4
					sprintf (string[1], "Ошибка контрольной суммы");
 800191e:	4f9c      	ldr	r7, [pc, #624]	; (8001b90 <handleMessage+0x6c8>)
					sprintf (string[0], "Сообщение н принято!");
 8001920:	f826 1b1c 	strh.w	r1, [r6], #28
					sprintf (string[1], "Ошибка контрольной суммы");
 8001924:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001926:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001928:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800192a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800192c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001930:	c607      	stmia	r6!, {r0, r1, r2}
 8001932:	f826 3b02 	strh.w	r3, [r6], #2
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	3c24      	subs	r4, #36	; 0x24
 800193a:	7033      	strb	r3, [r6, #0]
	ssd1306_Clean ();
 800193c:	4626      	mov	r6, r4
 800193e:	f003 ff93 	bl	8005868 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 8001942:	4629      	mov	r1, r5
 8001944:	2000      	movs	r0, #0
 8001946:	f003 ff51 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 800194a:	3501      	adds	r5, #1
			ssd1306_PutString (string[i]);
 800194c:	4630      	mov	r0, r6
 800194e:	f003 ff55 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8001952:	2d08      	cmp	r5, #8
 8001954:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8001958:	d1f3      	bne.n	8001942 <handleMessage+0x47a>
	ssd1306_Update ();
 800195a:	f003 ff8d 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 800195e:	2500      	movs	r5, #0
	UC1609_Clean ();
 8001960:	f7ff f8e8 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8001964:	b2e9      	uxtb	r1, r5
 8001966:	2000      	movs	r0, #0
 8001968:	f7ff f83a 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 800196c:	3501      	adds	r5, #1
			UC1609_PutString (string[i]);
 800196e:	4620      	mov	r0, r4
 8001970:	f7ff f8e8 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8001974:	2d08      	cmp	r5, #8
 8001976:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800197a:	d1f3      	bne.n	8001964 <handleMessage+0x49c>
	UC1609_UpdateScreen ();
 800197c:	f7ff f83c 	bl	80009f8 <UC1609_UpdateScreen>
}
 8001980:	b067      	add	sp, #412	; 0x19c
 8001982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nodeData[i].disarmed = nodes[i].disarmed;
 8001986:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
			nodeData[i].masked = nodes[i].masked;
 800198a:	f894 800d 	ldrb.w	r8, [r4, #13]
 800198e:	f894 b02c 	ldrb.w	fp, [r4, #44]	; 0x2c
 8001992:	7b27      	ldrb	r7, [r4, #12]
 8001994:	7ba2      	ldrb	r2, [r4, #14]
 8001996:	ea4f 0989 	mov.w	r9, r9, lsl #2
			nodeData[i].disarmed = nodes[i].disarmed;
 800199a:	f894 c06d 	ldrb.w	ip, [r4, #109]	; 0x6d
			nodeData[i].masked = nodes[i].masked;
 800199e:	f009 0904 	and.w	r9, r9, #4
 80019a2:	f00b 0b03 	and.w	fp, fp, #3
 80019a6:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80019aa:	497a      	ldr	r1, [pc, #488]	; (8001b94 <handleMessage+0x6cc>)
 80019ac:	ea49 050b 	orr.w	r5, r9, fp
 80019b0:	f008 0804 	and.w	r8, r8, #4
 80019b4:	f894 906c 	ldrb.w	r9, [r4, #108]	; 0x6c
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80019b8:	f894 b06e 	ldrb.w	fp, [r4, #110]	; 0x6e
			nodeData[i].masked = nodes[i].masked;
 80019bc:	f007 0703 	and.w	r7, r7, #3
 80019c0:	00d2      	lsls	r2, r2, #3
 80019c2:	ea48 0707 	orr.w	r7, r8, r7
 80019c6:	f002 0208 	and.w	r2, r2, #8
 80019ca:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80019ce:	f00c 0c04 	and.w	ip, ip, #4
 80019d2:	4317      	orrs	r7, r2
 80019d4:	f009 0903 	and.w	r9, r9, #3
 80019d8:	78ca      	ldrb	r2, [r1, #3]
 80019da:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80019de:	ea4c 0909 	orr.w	r9, ip, r9
 80019e2:	f00b 0b08 	and.w	fp, fp, #8
 80019e6:	ea49 090b 	orr.w	r9, r9, fp
 80019ea:	f022 020f 	bic.w	r2, r2, #15
 80019ee:	ea49 0202 	orr.w	r2, r9, r2
 80019f2:	9213      	str	r2, [sp, #76]	; 0x4c
			nodes[nodeNum].activated = 1;
 80019f4:	f04f 0201 	mov.w	r2, #1
			nodeData[i].disarmed = nodes[i].disarmed;
 80019f8:	f894 e04d 	ldrb.w	lr, [r4, #77]	; 0x4d
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80019fc:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
			nodeData[i].masked = nodes[i].masked;
 8001a00:	f894 a04c 	ldrb.w	sl, [r4, #76]	; 0x4c
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8001a04:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
			nodeData[i].masked = nodes[i].masked;
 8001a08:	f891 c000 	ldrb.w	ip, [r1]
 8001a0c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a10:	f891 8001 	ldrb.w	r8, [r1, #1]
 8001a14:	f00a 0a03 	and.w	sl, sl, #3
 8001a18:	00c0      	lsls	r0, r0, #3
 8001a1a:	f00e 0e04 	and.w	lr, lr, #4
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	ea4e 0e0a 	orr.w	lr, lr, sl
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	f02c 0c0f 	bic.w	ip, ip, #15
 8001a2c:	f000 0008 	and.w	r0, r0, #8
 8001a30:	f891 a002 	ldrb.w	sl, [r1, #2]
 8001a34:	ea47 070c 	orr.w	r7, r7, ip
 8001a38:	4328      	orrs	r0, r5
			nodeData[i].disarmed = nodes[i].disarmed;
 8001a3a:	f894 c0ed 	ldrb.w	ip, [r4, #237]	; 0xed
			nodeData[i].masked = nodes[i].masked;
 8001a3e:	f028 080f 	bic.w	r8, r8, #15
 8001a42:	ea4e 0e03 	orr.w	lr, lr, r3
			nodeData[i].disarmed = nodes[i].disarmed;
 8001a46:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
			nodeData[i].masked = nodes[i].masked;
 8001a4a:	ea40 0008 	orr.w	r0, r0, r8
			nodeData[i].disarmed = nodes[i].disarmed;
 8001a4e:	f894 b0ad 	ldrb.w	fp, [r4, #173]	; 0xad
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8001a52:	f894 508e 	ldrb.w	r5, [r4, #142]	; 0x8e
			nodeData[i].masked = nodes[i].masked;
 8001a56:	7048      	strb	r0, [r1, #1]
 8001a58:	f02a 0a0f 	bic.w	sl, sl, #15
			nodes[nodeNum].activated = 1;
 8001a5c:	9810      	ldr	r0, [sp, #64]	; 0x40
			nodeData[i].masked = nodes[i].masked;
 8001a5e:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8001a62:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8001a66:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
			nodeData[i].masked = nodes[i].masked;
 8001a6a:	ea4e 0e0a 	orr.w	lr, lr, sl
 8001a6e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8001a72:	f894 a0ae 	ldrb.w	sl, [r4, #174]	; 0xae
			nodeData[i].masked = nodes[i].masked;
 8001a76:	f00c 0c04 	and.w	ip, ip, #4
 8001a7a:	f881 e002 	strb.w	lr, [r1, #2]
			nodes[nodeNum].activated = 1;
 8001a7e:	7442      	strb	r2, [r0, #17]
			nodeData[i].disarmed = nodes[i].disarmed;
 8001a80:	f894 80cd 	ldrb.w	r8, [r4, #205]	; 0xcd
			nodeData[i].masked = nodes[i].masked;
 8001a84:	f894 008c 	ldrb.w	r0, [r4, #140]	; 0x8c
 8001a88:	f00b 0204 	and.w	r2, fp, #4
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8001a8c:	f894 e0ee 	ldrb.w	lr, [r4, #238]	; 0xee
			nodeData[i].masked = nodes[i].masked;
 8001a90:	700f      	strb	r7, [r1, #0]
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8001a92:	9312      	str	r3, [sp, #72]	; 0x48
			nodeData[i].masked = nodes[i].masked;
 8001a94:	f894 70ac 	ldrb.w	r7, [r4, #172]	; 0xac
 8001a98:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 8001a9c:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 8001aa0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8001aa2:	9210      	str	r2, [sp, #64]	; 0x40
 8001aa4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8001aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001aaa:	ea4f 0bc5 	mov.w	fp, r5, lsl #3
 8001aae:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8001ab2:	f000 0503 	and.w	r5, r0, #3
 8001ab6:	f00c 0008 	and.w	r0, ip, #8
 8001aba:	f00a 0c08 	and.w	ip, sl, #8
 8001abe:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8001ac2:	70ca      	strb	r2, [r1, #3]
 8001ac4:	f00e 0c08 	and.w	ip, lr, #8
 8001ac8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001aca:	f009 0904 	and.w	r9, r9, #4
 8001ace:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 8001ad2:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 8001ad6:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
 8001ada:	f007 0703 	and.w	r7, r7, #3
 8001ade:	ea49 0905 	orr.w	r9, r9, r5
 8001ae2:	4317      	orrs	r7, r2
 8001ae4:	ea49 0900 	orr.w	r9, r9, r0
 8001ae8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001aea:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001aec:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	f008 0804 	and.w	r8, r8, #4
 8001af8:	f00c 0c03 	and.w	ip, ip, #3
 8001afc:	f891 a004 	ldrb.w	sl, [r1, #4]
 8001b00:	f891 e005 	ldrb.w	lr, [r1, #5]
 8001b04:	ea48 0803 	orr.w	r8, r8, r3
 8001b08:	ea42 0c0c 	orr.w	ip, r2, ip
 8001b0c:	79cb      	ldrb	r3, [r1, #7]
 8001b0e:	798a      	ldrb	r2, [r1, #6]
 8001b10:	4307      	orrs	r7, r0
 8001b12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001b14:	f00b 0b08 	and.w	fp, fp, #8
 8001b18:	ea4c 0c00 	orr.w	ip, ip, r0
 8001b1c:	f02e 0e0f 	bic.w	lr, lr, #15
 8001b20:	f022 020f 	bic.w	r2, r2, #15
 8001b24:	f023 030f 	bic.w	r3, r3, #15
 8001b28:	ea48 080b 	orr.w	r8, r8, fp
 8001b2c:	f02a 0a0f 	bic.w	sl, sl, #15
 8001b30:	ea4c 0c03 	orr.w	ip, ip, r3
 8001b34:	ea47 070e 	orr.w	r7, r7, lr
 8001b38:	ea48 0802 	orr.w	r8, r8, r2
 8001b3c:	ea49 090a 	orr.w	r9, r9, sl
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8001b40:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001b42:	2208      	movs	r2, #8
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <handleMessage+0x6d0>)
			nodeData[i].masked = nodes[i].masked;
 8001b46:	f881 9004 	strb.w	r9, [r1, #4]
 8001b4a:	714f      	strb	r7, [r1, #5]
 8001b4c:	f881 8006 	strb.w	r8, [r1, #6]
 8001b50:	f881 c007 	strb.w	ip, [r1, #7]
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8001b54:	f7ff f92a 	bl	8000dac <writeToEeprom>
 8001b58:	6830      	ldr	r0, [r6, #0]
}
 8001b5a:	e4e5      	b.n	8001528 <handleMessage+0x60>
 8001b5c:	0800af50 	.word	0x0800af50
 8001b60:	cccccccd 	.word	0xcccccccd
 8001b64:	0800b0d4 	.word	0x0800b0d4
 8001b68:	41200000 	.word	0x41200000
 8001b6c:	66666667 	.word	0x66666667
 8001b70:	0800b0e0 	.word	0x0800b0e0
 8001b74:	0800af48 	.word	0x0800af48
 8001b78:	0800af5c 	.word	0x0800af5c
 8001b7c:	0800b0ec 	.word	0x0800b0ec
 8001b80:	20000945 	.word	0x20000945
 8001b84:	200000ee 	.word	0x200000ee
 8001b88:	200000f4 	.word	0x200000f4
 8001b8c:	0800af64 	.word	0x0800af64
 8001b90:	0800af8c 	.word	0x0800af8c
 8001b94:	20000d78 	.word	0x20000d78
 8001b98:	20000a70 	.word	0x20000a70
 8001b9c:	20000a00 	.word	0x20000a00
					clearStrings ();
 8001ba0:	f7ff fabe 	bl	8001120 <clearStrings>
					sprintf (string[0], "Ошибка");
 8001ba4:	4d53      	ldr	r5, [pc, #332]	; (8001cf4 <handleMessage+0x82c>)
 8001ba6:	4b54      	ldr	r3, [pc, #336]	; (8001cf8 <handleMessage+0x830>)
					sprintf (string[1], "Принято сообщение для КУ");
 8001ba8:	4f54      	ldr	r7, [pc, #336]	; (8001cfc <handleMessage+0x834>)
					sprintf (string[0], "Ошибка");
 8001baa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bac:	c507      	stmia	r5!, {r0, r1, r2}
 8001bae:	462e      	mov	r6, r5
 8001bb0:	f806 3b34 	strb.w	r3, [r6], #52
					sprintf (string[1], "Принято сообщение для КУ");
 8001bb4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001bb6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bb8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8001bba:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bbc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8001bc0:	c607      	stmia	r6!, {r0, r1, r2}
					sprintf (string[2], "Возможно поблизости другая");
 8001bc2:	f8df c148 	ldr.w	ip, [pc, #328]	; 8001d0c <handleMessage+0x844>
 8001bc6:	f105 0774 	add.w	r7, r5, #116	; 0x74
					sprintf (string[1], "Принято сообщение для КУ");
 8001bca:	8033      	strh	r3, [r6, #0]
					sprintf (string[2], "Возможно поблизости другая");
 8001bcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001bd0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001bd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001bd6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001bd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001bdc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001bde:	f8dc 3000 	ldr.w	r3, [ip]
					sprintf (string[3], "базовая станция с такими же");
 8001be2:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8001d10 <handleMessage+0x848>
					sprintf (string[2], "Возможно поблизости другая");
 8001be6:	f827 3b02 	strh.w	r3, [r7], #2
					sprintf (string[3], "базовая станция с такими же");
 8001bea:	f105 06b4 	add.w	r6, r5, #180	; 0xb4
					sprintf (string[2], "Возможно поблизости другая");
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	703b      	strb	r3, [r7, #0]
					sprintf (string[3], "базовая станция с такими же");
 8001bf2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001bf6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bf8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001bfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001bfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001c02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001c04:	f8dc 3000 	ldr.w	r3, [ip]
					sprintf (string[4], "настройками");
 8001c08:	f8df c108 	ldr.w	ip, [pc, #264]	; 8001d14 <handleMessage+0x84c>
					sprintf (string[3], "базовая станция с такими же");
 8001c0c:	f826 3b02 	strh.w	r3, [r6], #2
					sprintf (string[4], "настройками");
 8001c10:	f105 07f4 	add.w	r7, r5, #244	; 0xf4
					sprintf (string[3], "базовая станция с такими же");
 8001c14:	0c1b      	lsrs	r3, r3, #16
 8001c16:	7033      	strb	r3, [r6, #0]
					sprintf (string[4], "настройками");
 8001c18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001c1c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001c1e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001c22:	f847 0b04 	str.w	r0, [r7], #4
 8001c26:	f827 1b02 	strh.w	r1, [r7], #2
 8001c2a:	0c09      	lsrs	r1, r1, #16
 8001c2c:	3d0c      	subs	r5, #12
 8001c2e:	7039      	strb	r1, [r7, #0]
	ssd1306_Clean ();
 8001c30:	462e      	mov	r6, r5
 8001c32:	f003 fe19 	bl	8005868 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 8001c36:	4621      	mov	r1, r4
 8001c38:	2000      	movs	r0, #0
 8001c3a:	f003 fdd7 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8001c3e:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 8001c40:	4630      	mov	r0, r6
 8001c42:	f003 fddb 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8001c46:	2c08      	cmp	r4, #8
 8001c48:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8001c4c:	d1f3      	bne.n	8001c36 <handleMessage+0x76e>
	ssd1306_Update ();
 8001c4e:	f003 fe13 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8001c52:	2400      	movs	r4, #0
	UC1609_Clean ();
 8001c54:	f7fe ff6e 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8001c58:	b2e1      	uxtb	r1, r4
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7fe fec0 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8001c60:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8001c62:	4628      	mov	r0, r5
 8001c64:	f7fe ff6e 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8001c68:	2c08      	cmp	r4, #8
 8001c6a:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8001c6e:	d1f3      	bne.n	8001c58 <handleMessage+0x790>
 8001c70:	e684      	b.n	800197c <handleMessage+0x4b4>
			if (screenMode == smRegular)
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <handleMessage+0x838>)
 8001c74:	781c      	ldrb	r4, [r3, #0]
 8001c76:	2c00      	cmp	r4, #0
 8001c78:	f47f ae3d 	bne.w	80018f6 <handleMessage+0x42e>
					clearStrings ();
 8001c7c:	f7ff fa50 	bl	8001120 <clearStrings>
					sprintf (string[0], "Ошибка");
 8001c80:	4f1c      	ldr	r7, [pc, #112]	; (8001cf4 <handleMessage+0x82c>)
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <handleMessage+0x830>)
					sprintf (string[1], "Получено от КУ №%d", rxMes->adr);
 8001c84:	6835      	ldr	r5, [r6, #0]
					sprintf (string[0], "Ошибка");
 8001c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c88:	c707      	stmia	r7!, {r0, r1, r2}
 8001c8a:	4638      	mov	r0, r7
 8001c8c:	f800 3b34 	strb.w	r3, [r0], #52
					sprintf (string[1], "Получено от КУ №%d", rxMes->adr);
 8001c90:	782a      	ldrb	r2, [r5, #0]
 8001c92:	491c      	ldr	r1, [pc, #112]	; (8001d04 <handleMessage+0x83c>)
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	f008 fd1b 	bl	800a6d0 <siprintf>
					sprintf (string[2], "Поддерживаентя только %d КУ", MAX_NODES);
 8001c9a:	f1a7 050c 	sub.w	r5, r7, #12
 8001c9e:	2208      	movs	r2, #8
 8001ca0:	4919      	ldr	r1, [pc, #100]	; (8001d08 <handleMessage+0x840>)
 8001ca2:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001ca6:	f008 fd13 	bl	800a6d0 <siprintf>
	ssd1306_Clean ();
 8001caa:	462e      	mov	r6, r5
 8001cac:	f003 fddc 	bl	8005868 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f003 fd9a 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8001cb8:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 8001cba:	4630      	mov	r0, r6
 8001cbc:	f003 fd9e 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8001cc0:	2c08      	cmp	r4, #8
 8001cc2:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8001cc6:	d1f3      	bne.n	8001cb0 <handleMessage+0x7e8>
	ssd1306_Update ();
 8001cc8:	f003 fdd6 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8001ccc:	2400      	movs	r4, #0
	UC1609_Clean ();
 8001cce:	f7fe ff31 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8001cd2:	b2e1      	uxtb	r1, r4
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7fe fe83 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8001cda:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f7fe ff31 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8001ce2:	2c08      	cmp	r4, #8
 8001ce4:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8001ce8:	d1f3      	bne.n	8001cd2 <handleMessage+0x80a>
 8001cea:	e647      	b.n	800197c <handleMessage+0x4b4>
	uint32_t maxDelay = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	e485      	b.n	80015fc <handleMessage+0x134>
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	e483      	b.n	80015fc <handleMessage+0x134>
 8001cf4:	200000f4 	.word	0x200000f4
 8001cf8:	0800afbc 	.word	0x0800afbc
 8001cfc:	0800afcc 	.word	0x0800afcc
 8001d00:	200000ee 	.word	0x200000ee
 8001d04:	0800b07c 	.word	0x0800b07c
 8001d08:	0800b0a0 	.word	0x0800b0a0
 8001d0c:	0800affc 	.word	0x0800affc
 8001d10:	0800b030 	.word	0x0800b030
 8001d14:	0800b064 	.word	0x0800b064

08001d18 <alarmRoutine>:
 * @brief Handles alarm situations
 * @param None
 * @retval None
 */
void alarmRoutine ()
{
 8001d18:	b508      	push	{r3, lr}
	uint16_t i;
	uint8_t gotAlarm = 0;
	for (i = 0; i < MAX_NODES; i++)
		if (nodes[i].alarm)
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	; (8001dc8 <alarmRoutine+0xb0>)
 8001d1c:	7c9a      	ldrb	r2, [r3, #18]
 8001d1e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
			gotAlarm = true;
 8001d22:	3a00      	subs	r2, #0
		if (nodes[i].alarm)
 8001d24:	f893 0052 	ldrb.w	r0, [r3, #82]	; 0x52
			gotAlarm = true;
 8001d28:	bf18      	it	ne
 8001d2a:	2201      	movne	r2, #1
 8001d2c:	2900      	cmp	r1, #0
		if (nodes[i].alarm)
 8001d2e:	f893 1072 	ldrb.w	r1, [r3, #114]	; 0x72
			gotAlarm = true;
 8001d32:	bf18      	it	ne
 8001d34:	2201      	movne	r2, #1
 8001d36:	2800      	cmp	r0, #0
		if (nodes[i].alarm)
 8001d38:	f893 0092 	ldrb.w	r0, [r3, #146]	; 0x92
			gotAlarm = true;
 8001d3c:	bf18      	it	ne
 8001d3e:	2201      	movne	r2, #1
 8001d40:	2900      	cmp	r1, #0
		if (nodes[i].alarm)
 8001d42:	f893 10b2 	ldrb.w	r1, [r3, #178]	; 0xb2
			gotAlarm = true;
 8001d46:	bf18      	it	ne
 8001d48:	2201      	movne	r2, #1
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	bf18      	it	ne
 8001d4e:	2201      	movne	r2, #1
		if (nodes[i].alarm)
 8001d50:	b911      	cbnz	r1, 8001d58 <alarmRoutine+0x40>
 8001d52:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
 8001d56:	b1f9      	cbz	r1, 8001d98 <alarmRoutine+0x80>

	if (gotAlarm)
		{
			uint8_t tact = (HAL_GetTick () / 80) % 12;
 8001d58:	f005 fa00 	bl	800715c <HAL_GetTick>
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <alarmRoutine+0xb4>)
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	; (8001dd0 <alarmRoutine+0xb8>)
 8001d60:	fba3 1300 	umull	r1, r3, r3, r0
 8001d64:	099b      	lsrs	r3, r3, #6
 8001d66:	fba2 1203 	umull	r1, r2, r2, r3
 8001d6a:	08d2      	lsrs	r2, r2, #3
 8001d6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001d70:	eba3 0382 	sub.w	r3, r3, r2, lsl #2
 8001d74:	b2da      	uxtb	r2, r3
			if (tact % 2 && tact < 9)
 8001d76:	07db      	lsls	r3, r3, #31
 8001d78:	d501      	bpl.n	8001d7e <alarmRoutine+0x66>
 8001d7a:	2a08      	cmp	r2, #8
 8001d7c:	d91e      	bls.n	8001dbc <alarmRoutine+0xa4>
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 1);
			else
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2120      	movs	r1, #32
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <alarmRoutine+0xbc>)
 8001d84:	f006 f902 	bl	8007f8c <HAL_GPIO_WritePin>
	else
		{
			HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
		}
}
 8001d88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d92:	4811      	ldr	r0, [pc, #68]	; (8001dd8 <alarmRoutine+0xc0>)
 8001d94:	f006 b8fa 	b.w	8007f8c <HAL_GPIO_WritePin>
		if (nodes[i].alarm)
 8001d98:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1db      	bne.n	8001d58 <alarmRoutine+0x40>
	if (gotAlarm)
 8001da0:	2a00      	cmp	r2, #0
 8001da2:	d1d9      	bne.n	8001d58 <alarmRoutine+0x40>
			HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001da4:	2120      	movs	r1, #32
 8001da6:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <alarmRoutine+0xbc>)
 8001da8:	f006 f8f0 	bl	8007f8c <HAL_GPIO_WritePin>
}
 8001dac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
 8001db0:	2201      	movs	r2, #1
 8001db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <alarmRoutine+0xc0>)
 8001db8:	f006 b8e8 	b.w	8007f8c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <alarmRoutine+0xbc>)
 8001dc2:	f006 f8e3 	bl	8007f8c <HAL_GPIO_WritePin>
 8001dc6:	e7df      	b.n	8001d88 <alarmRoutine+0x70>
 8001dc8:	20000c78 	.word	0x20000c78
 8001dcc:	cccccccd 	.word	0xcccccccd
 8001dd0:	aaaaaaab 	.word	0xaaaaaaab
 8001dd4:	40010c00 	.word	0x40010c00
 8001dd8:	40010800 	.word	0x40010800

08001ddc <ledNodeStatusIndication>:
	for (i = 0; i < MAX_NODES; i++)
		nodes[i].alarm = 0;
}

void ledNodeStatusIndication ()
{
 8001ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de0:	2601      	movs	r6, #1
 8001de2:	4c86      	ldr	r4, [pc, #536]	; (8001ffc <ledNodeStatusIndication+0x220>)
 8001de4:	4f86      	ldr	r7, [pc, #536]	; (8002000 <ledNodeStatusIndication+0x224>)
 8001de6:	f8df 9224 	ldr.w	r9, [pc, #548]	; 800200c <ledNodeStatusIndication+0x230>
			wsSetColor (i + 1, GREEN);
			if (nodes[i].powered == 0)
				wsSetColor (i + 1, CYAN);

			if (nodes[i].voltage < nodes[i].voltageTrashold)
				blinkProvider ? wsSetColor (i + 1, CYAN) : wsSetColor (i + 1, BLACK);
 8001dea:	f8df 8224 	ldr.w	r8, [pc, #548]	; 8002010 <ledNodeStatusIndication+0x234>
				wsSetColor (i + 1, MAGENTA);

			if (nodes[i].activated == 0)
				wsSetColor (i + 1, WHITE);

			if (selectedNode == i && HAL_GetTick () - lastNodeChangeTick < DELAY_SELECTED_MARK && lastNodeChangeTick)
 8001dee:	f8df a224 	ldr.w	sl, [pc, #548]	; 8002014 <ledNodeStatusIndication+0x238>
					float fTemp;
					uint32_t temp = (HAL_GetTick () - nodes[i].lastContact) % 1000;
					if (temp < 500)
						fTemp = 1.0f + (float) temp / 125.0f;
					else
						fTemp = 9.0f - (float) temp / 125.0f;
 8001df2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8002018 <ledNodeStatusIndication+0x23c>
 8001df6:	e022      	b.n	8001e3e <ledNodeStatusIndication+0x62>
			if (nodes[i].disarmed && nodes[i].disarmRequest)
 8001df8:	7ba3      	ldrb	r3, [r4, #14]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 80d9 	bne.w	8001fb2 <ledNodeStatusIndication+0x1d6>
				wsSetColor (i + 1, MAGENTA);
 8001e00:	2310      	movs	r3, #16
 8001e02:	2200      	movs	r2, #0
 8001e04:	4619      	mov	r1, r3
 8001e06:	4628      	mov	r0, r5
 8001e08:	f005 f89c 	bl	8006f44 <wsSetColor>
			if (nodes[i].activated == 0)
 8001e0c:	7c63      	ldrb	r3, [r4, #17]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d067      	beq.n	8001ee2 <ledNodeStatusIndication+0x106>
			if (selectedNode == i && HAL_GetTick () - lastNodeChangeTick < DELAY_SELECTED_MARK && lastNodeChangeTick)
 8001e12:	f9b9 2000 	ldrsh.w	r2, [r9]
 8001e16:	1e73      	subs	r3, r6, #1
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d06d      	beq.n	8001ef8 <ledNodeStatusIndication+0x11c>
			if (HAL_GetTick () - nodes[i].lastContact < DELAY_SHOW_CONTACT && nodes[i].activated)
 8001e1c:	f005 f99e 	bl	800715c <HAL_GetTick>
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	1ac0      	subs	r0, r0, r3
 8001e24:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8001e28:	d203      	bcs.n	8001e32 <ledNodeStatusIndication+0x56>
 8001e2a:	7c63      	ldrb	r3, [r4, #17]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 808d 	bne.w	8001f4c <ledNodeStatusIndication+0x170>
	for (i = 0; i < MAX_NODES; i++)
 8001e32:	3601      	adds	r6, #1
 8001e34:	2e09      	cmp	r6, #9
 8001e36:	f104 0420 	add.w	r4, r4, #32
 8001e3a:	f000 80a9 	beq.w	8001f90 <ledNodeStatusIndication+0x1b4>
			wsSetColor (i + 1, GREEN);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	b2f5      	uxtb	r5, r6
 8001e42:	4619      	mov	r1, r3
 8001e44:	4628      	mov	r0, r5
 8001e46:	2210      	movs	r2, #16
 8001e48:	f005 f87c 	bl	8006f44 <wsSetColor>
			if (nodes[i].powered == 0)
 8001e4c:	7c21      	ldrb	r1, [r4, #16]
 8001e4e:	2900      	cmp	r1, #0
 8001e50:	d061      	beq.n	8001f16 <ledNodeStatusIndication+0x13a>
			if (nodes[i].voltage < nodes[i].voltageTrashold)
 8001e52:	69a1      	ldr	r1, [r4, #24]
 8001e54:	6960      	ldr	r0, [r4, #20]
 8001e56:	f7fe fc2d 	bl	80006b4 <__aeabi_fcmplt>
 8001e5a:	b148      	cbz	r0, 8001e70 <ledNodeStatusIndication+0x94>
				blinkProvider ? wsSetColor (i + 1, CYAN) : wsSetColor (i + 1, BLACK);
 8001e5c:	f898 3000 	ldrb.w	r3, [r8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d06d      	beq.n	8001f40 <ledNodeStatusIndication+0x164>
 8001e64:	2310      	movs	r3, #16
 8001e66:	2100      	movs	r1, #0
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4628      	mov	r0, r5
 8001e6c:	f005 f86a 	bl	8006f44 <wsSetColor>
			if (nodes[i].masked & MASK_DOOR)
 8001e70:	7b23      	ldrb	r3, [r4, #12]
 8001e72:	07db      	lsls	r3, r3, #31
 8001e74:	d50c      	bpl.n	8001e90 <ledNodeStatusIndication+0xb4>
				(nodes[i].opened && blinkProvider) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, BLUE); // Blinking - opened
 8001e76:	7be3      	ldrb	r3, [r4, #15]
 8001e78:	b123      	cbz	r3, 8001e84 <ledNodeStatusIndication+0xa8>
 8001e7a:	f898 3000 	ldrb.w	r3, [r8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 80a2 	bne.w	8001fc8 <ledNodeStatusIndication+0x1ec>
 8001e84:	2200      	movs	r2, #0
 8001e86:	2310      	movs	r3, #16
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f005 f85a 	bl	8006f44 <wsSetColor>
			if (nodes[i].alarm)
 8001e90:	7ca3      	ldrb	r3, [r4, #18]
 8001e92:	b15b      	cbz	r3, 8001eac <ledNodeStatusIndication+0xd0>
				(blinkProvider && nodes[i].alarm == ALARM_DOOR) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001e94:	f898 2000 	ldrb.w	r2, [r8]
 8001e98:	b112      	cbz	r2, 8001ea0 <ledNodeStatusIndication+0xc4>
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	f000 80a6 	beq.w	8001fec <ledNodeStatusIndication+0x210>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f005 f84c 	bl	8006f44 <wsSetColor>
			if (HAL_GetTick () - nodes[i].lastContact > settings.warningDelay && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 8001eac:	f005 f956 	bl	800715c <HAL_GetTick>
 8001eb0:	6822      	ldr	r2, [r4, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	1a80      	subs	r0, r0, r2
 8001eb6:	4298      	cmp	r0, r3
 8001eb8:	d833      	bhi.n	8001f22 <ledNodeStatusIndication+0x146>
			if (HAL_GetTick () - nodes[i].lastContact > settings.superWarningDelay && blinkProvider && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 8001eba:	f005 f94f 	bl	800715c <HAL_GetTick>
 8001ebe:	6822      	ldr	r2, [r4, #0]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1a80      	subs	r0, r0, r2
 8001ec4:	4298      	cmp	r0, r3
 8001ec6:	d903      	bls.n	8001ed0 <ledNodeStatusIndication+0xf4>
 8001ec8:	f898 3000 	ldrb.w	r3, [r8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d161      	bne.n	8001f94 <ledNodeStatusIndication+0x1b8>
			if (nodes[i].disarmed && nodes[i].disarmRequest)
 8001ed0:	7b63      	ldrb	r3, [r4, #13]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d190      	bne.n	8001df8 <ledNodeStatusIndication+0x1c>
			if (nodes[i].disarmRequest != nodes[i].disarmed)
 8001ed6:	7ba2      	ldrb	r2, [r4, #14]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d191      	bne.n	8001e00 <ledNodeStatusIndication+0x24>
			if (nodes[i].activated == 0)
 8001edc:	7c63      	ldrb	r3, [r4, #17]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d197      	bne.n	8001e12 <ledNodeStatusIndication+0x36>
				wsSetColor (i + 1, WHITE);
 8001ee2:	2310      	movs	r3, #16
 8001ee4:	4628      	mov	r0, r5
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f005 f82b 	bl	8006f44 <wsSetColor>
			if (selectedNode == i && HAL_GetTick () - lastNodeChangeTick < DELAY_SELECTED_MARK && lastNodeChangeTick)
 8001eee:	f9b9 2000 	ldrsh.w	r2, [r9]
 8001ef2:	1e73      	subs	r3, r6, #1
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d191      	bne.n	8001e1c <ledNodeStatusIndication+0x40>
 8001ef8:	f005 f930 	bl	800715c <HAL_GetTick>
 8001efc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f00:	f8da 3000 	ldr.w	r3, [sl]
 8001f04:	1ac0      	subs	r0, r0, r3
 8001f06:	4290      	cmp	r0, r2
 8001f08:	d888      	bhi.n	8001e1c <ledNodeStatusIndication+0x40>
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d086      	beq.n	8001e1c <ledNodeStatusIndication+0x40>
				wsDoubleBright (i + 1);
 8001f0e:	4628      	mov	r0, r5
 8001f10:	f005 f824 	bl	8006f5c <wsDoubleBright>
 8001f14:	e782      	b.n	8001e1c <ledNodeStatusIndication+0x40>
				wsSetColor (i + 1, CYAN);
 8001f16:	2310      	movs	r3, #16
 8001f18:	4628      	mov	r0, r5
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f005 f812 	bl	8006f44 <wsSetColor>
 8001f20:	e797      	b.n	8001e52 <ledNodeStatusIndication+0x76>
			if (HAL_GetTick () - nodes[i].lastContact > settings.warningDelay && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 8001f22:	f005 f91b 	bl	800715c <HAL_GetTick>
 8001f26:	6863      	ldr	r3, [r4, #4]
 8001f28:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f2c:	3310      	adds	r3, #16
 8001f2e:	4298      	cmp	r0, r3
 8001f30:	d9c3      	bls.n	8001eba <ledNodeStatusIndication+0xde>
				wsSetColor (i + 1, YELLOW);
 8001f32:	2210      	movs	r2, #16
 8001f34:	2300      	movs	r3, #0
 8001f36:	4611      	mov	r1, r2
 8001f38:	4628      	mov	r0, r5
 8001f3a:	f005 f803 	bl	8006f44 <wsSetColor>
 8001f3e:	e7bc      	b.n	8001eba <ledNodeStatusIndication+0xde>
				blinkProvider ? wsSetColor (i + 1, CYAN) : wsSetColor (i + 1, BLACK);
 8001f40:	461a      	mov	r2, r3
 8001f42:	4619      	mov	r1, r3
 8001f44:	4628      	mov	r0, r5
 8001f46:	f004 fffd 	bl	8006f44 <wsSetColor>
 8001f4a:	e791      	b.n	8001e70 <ledNodeStatusIndication+0x94>
					uint32_t temp = (HAL_GetTick () - nodes[i].lastContact) % 1000;
 8001f4c:	f005 f906 	bl	800715c <HAL_GetTick>
 8001f50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f54:	6823      	ldr	r3, [r4, #0]
 8001f56:	492b      	ldr	r1, [pc, #172]	; (8002004 <ledNodeStatusIndication+0x228>)
 8001f58:	1ac3      	subs	r3, r0, r3
 8001f5a:	fba1 1003 	umull	r1, r0, r1, r3
 8001f5e:	0980      	lsrs	r0, r0, #6
 8001f60:	fb02 3010 	mls	r0, r2, r0, r3
					if (temp < 500)
 8001f64:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001f68:	d235      	bcs.n	8001fd6 <ledNodeStatusIndication+0x1fa>
						fTemp = 1.0f + (float) temp / 125.0f;
 8001f6a:	f7fe f9ad 	bl	80002c8 <__aeabi_ui2f>
 8001f6e:	4659      	mov	r1, fp
 8001f70:	f7fe fab6 	bl	80004e0 <__aeabi_fdiv>
 8001f74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f78:	f7fe f8f6 	bl	8000168 <__addsf3>
 8001f7c:	4601      	mov	r1, r0

					wsMultiply (i + 1, fTemp);
 8001f7e:	4628      	mov	r0, r5
 8001f80:	3601      	adds	r6, #1
 8001f82:	f004 fffd 	bl	8006f80 <wsMultiply>
	for (i = 0; i < MAX_NODES; i++)
 8001f86:	2e09      	cmp	r6, #9
 8001f88:	f104 0420 	add.w	r4, r4, #32
 8001f8c:	f47f af57 	bne.w	8001e3e <ledNodeStatusIndication+0x62>
					if (fastBlinkProvider)
						wsDoubleBright (i + 1);
#endif
				}
		}
}
 8001f90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (HAL_GetTick () - nodes[i].lastContact > settings.superWarningDelay && blinkProvider && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 8001f94:	f005 f8e2 	bl	800715c <HAL_GetTick>
 8001f98:	6863      	ldr	r3, [r4, #4]
 8001f9a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8001f9e:	3310      	adds	r3, #16
 8001fa0:	4298      	cmp	r0, r3
 8001fa2:	d995      	bls.n	8001ed0 <ledNodeStatusIndication+0xf4>
				wsSetColor (i + 1, BLACK);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4619      	mov	r1, r3
 8001fac:	f004 ffca 	bl	8006f44 <wsSetColor>
 8001fb0:	e78e      	b.n	8001ed0 <ledNodeStatusIndication+0xf4>
				wsSetColor (i + 1, ORANGE);
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	2120      	movs	r1, #32
 8001fb8:	4628      	mov	r0, r5
 8001fba:	f004 ffc3 	bl	8006f44 <wsSetColor>
 8001fbe:	7b63      	ldrb	r3, [r4, #13]
			if (nodes[i].disarmRequest != nodes[i].disarmed)
 8001fc0:	7ba2      	ldrb	r2, [r4, #14]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d08a      	beq.n	8001edc <ledNodeStatusIndication+0x100>
 8001fc6:	e71b      	b.n	8001e00 <ledNodeStatusIndication+0x24>
				(nodes[i].opened && blinkProvider) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, BLUE); // Blinking - opened
 8001fc8:	2300      	movs	r3, #0
 8001fca:	4628      	mov	r0, r5
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f004 ffb8 	bl	8006f44 <wsSetColor>
 8001fd4:	e75c      	b.n	8001e90 <ledNodeStatusIndication+0xb4>
						fTemp = 9.0f - (float) temp / 125.0f;
 8001fd6:	f7fe f977 	bl	80002c8 <__aeabi_ui2f>
 8001fda:	4659      	mov	r1, fp
 8001fdc:	f7fe fa80 	bl	80004e0 <__aeabi_fdiv>
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	4809      	ldr	r0, [pc, #36]	; (8002008 <ledNodeStatusIndication+0x22c>)
 8001fe4:	f7fe f8be 	bl	8000164 <__aeabi_fsub>
 8001fe8:	4601      	mov	r1, r0
 8001fea:	e7c8      	b.n	8001f7e <ledNodeStatusIndication+0x1a2>
				(blinkProvider && nodes[i].alarm == ALARM_DOOR) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001fec:	2300      	movs	r3, #0
 8001fee:	4628      	mov	r0, r5
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f004 ffa6 	bl	8006f44 <wsSetColor>
 8001ff8:	e758      	b.n	8001eac <ledNodeStatusIndication+0xd0>
 8001ffa:	bf00      	nop
 8001ffc:	20000c78 	.word	0x20000c78
 8002000:	20000a00 	.word	0x20000a00
 8002004:	10624dd3 	.word	0x10624dd3
 8002008:	41100000 	.word	0x41100000
 800200c:	200000f2 	.word	0x200000f2
 8002010:	20000da8 	.word	0x20000da8
 8002014:	200000bc 	.word	0x200000bc
 8002018:	42fa0000 	.word	0x42fa0000

0800201c <ledRoutine>:
 */
void ledRoutine ()
{
	uint8_t i = 0;

	wsSetColor (0, BLACK);
 800201c:	2300      	movs	r3, #0
{
 800201e:	b510      	push	{r4, lr}

	if (myRadio.status == TX)
 8002020:	4c31      	ldr	r4, [pc, #196]	; (80020e8 <ledRoutine+0xcc>)
	wsSetColor (0, BLACK);
 8002022:	461a      	mov	r2, r3
 8002024:	4619      	mov	r1, r3
 8002026:	4618      	mov	r0, r3
 8002028:	f004 ff8c 	bl	8006f44 <wsSetColor>
	if (myRadio.status == TX)
 800202c:	7c23      	ldrb	r3, [r4, #16]
 800202e:	2b03      	cmp	r3, #3
 8002030:	d053      	beq.n	80020da <ledRoutine+0xbe>
		wsSetColor (0, RED);
	if (myRadio.signalDetected == 1)
 8002032:	7f23      	ldrb	r3, [r4, #28]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d149      	bne.n	80020cc <ledRoutine+0xb0>
		wsSetColor (0, GREEN);
	if (HAL_GetTick () - lastUartConnect < 200)
 8002038:	f005 f890 	bl	800715c <HAL_GetTick>
 800203c:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <ledRoutine+0xd0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	1ac0      	subs	r0, r0, r3
 8002042:	28c7      	cmp	r0, #199	; 0xc7
 8002044:	d93b      	bls.n	80020be <ledRoutine+0xa2>
		wsSetColor (0, YELLOW);

	if (screenMode == smRegular)
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <ledRoutine+0xd4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	b393      	cbz	r3, 80020b2 <ledRoutine+0x96>
		{
			ledNodeStatusIndication ();
		}
	else if (screenMode == smSaveConfig)
 800204c:	2b18      	cmp	r3, #24
	for (i = 0; i < MAX_NODES + 1; i++)
 800204e:	f04f 0400 	mov.w	r4, #0
	else if (screenMode == smSaveConfig)
 8002052:	d00e      	beq.n	8002072 <ledRoutine+0x56>
		{
			ledFillBlack ();
		}
	else if (screenMode == smNodeAction)
 8002054:	2b1c      	cmp	r3, #28
 8002056:	d016      	beq.n	8002086 <ledRoutine+0x6a>
		}
	else
		{
			for (i = 0; i < MAX_NODES + 1; i++)
				{
					wsSetColor (i, BLACK);
 8002058:	2300      	movs	r3, #0
 800205a:	b2e0      	uxtb	r0, r4
 800205c:	461a      	mov	r2, r3
 800205e:	4619      	mov	r1, r3
 8002060:	3401      	adds	r4, #1
 8002062:	f004 ff6f 	bl	8006f44 <wsSetColor>
			for (i = 0; i < MAX_NODES + 1; i++)
 8002066:	2c09      	cmp	r4, #9
 8002068:	d1f6      	bne.n	8002058 <ledRoutine+0x3c>
				}

		}
	wsPrepareArray ();
}
 800206a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wsPrepareArray ();
 800206e:	f004 bfad 	b.w	8006fcc <wsPrepareArray>
		wsSetColor (i, BLACK);
 8002072:	2300      	movs	r3, #0
 8002074:	b2e0      	uxtb	r0, r4
 8002076:	461a      	mov	r2, r3
 8002078:	4619      	mov	r1, r3
	for (i = 0; i < MAX_NODES + 1; i++)
 800207a:	3401      	adds	r4, #1
		wsSetColor (i, BLACK);
 800207c:	f004 ff62 	bl	8006f44 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 8002080:	2c09      	cmp	r4, #9
 8002082:	d1f6      	bne.n	8002072 <ledRoutine+0x56>
 8002084:	e7f1      	b.n	800206a <ledRoutine+0x4e>
					wsSetColor (i, BLACK);
 8002086:	2300      	movs	r3, #0
 8002088:	b2e0      	uxtb	r0, r4
 800208a:	461a      	mov	r2, r3
 800208c:	4619      	mov	r1, r3
 800208e:	3401      	adds	r4, #1
 8002090:	f004 ff58 	bl	8006f44 <wsSetColor>
			for (i = 0; i < MAX_NODES + 1; i++)
 8002094:	2c09      	cmp	r4, #9
 8002096:	d1f6      	bne.n	8002086 <ledRoutine+0x6a>
			wsSetColor (selectedNode + 1, WHITE);
 8002098:	2310      	movs	r3, #16
 800209a:	4916      	ldr	r1, [pc, #88]	; (80020f4 <ledRoutine+0xd8>)
 800209c:	461a      	mov	r2, r3
 800209e:	7808      	ldrb	r0, [r1, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	3001      	adds	r0, #1
 80020a4:	b2c0      	uxtb	r0, r0
 80020a6:	f004 ff4d 	bl	8006f44 <wsSetColor>
}
 80020aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wsPrepareArray ();
 80020ae:	f004 bf8d 	b.w	8006fcc <wsPrepareArray>
			ledNodeStatusIndication ();
 80020b2:	f7ff fe93 	bl	8001ddc <ledNodeStatusIndication>
}
 80020b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wsPrepareArray ();
 80020ba:	f004 bf87 	b.w	8006fcc <wsPrepareArray>
		wsSetColor (0, YELLOW);
 80020be:	2300      	movs	r3, #0
 80020c0:	2210      	movs	r2, #16
 80020c2:	4618      	mov	r0, r3
 80020c4:	4611      	mov	r1, r2
 80020c6:	f004 ff3d 	bl	8006f44 <wsSetColor>
 80020ca:	e7bc      	b.n	8002046 <ledRoutine+0x2a>
		wsSetColor (0, GREEN);
 80020cc:	2300      	movs	r3, #0
 80020ce:	2210      	movs	r2, #16
 80020d0:	4619      	mov	r1, r3
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 ff36 	bl	8006f44 <wsSetColor>
 80020d8:	e7ae      	b.n	8002038 <ledRoutine+0x1c>
		wsSetColor (0, RED);
 80020da:	2300      	movs	r3, #0
 80020dc:	2110      	movs	r1, #16
 80020de:	461a      	mov	r2, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	f004 ff2f 	bl	8006f44 <wsSetColor>
 80020e6:	e7a4      	b.n	8002032 <ledRoutine+0x16>
 80020e8:	20000928 	.word	0x20000928
 80020ec:	20001580 	.word	0x20001580
 80020f0:	200000ee 	.word	0x200000ee
 80020f4:	200000f2 	.word	0x200000f2

080020f8 <ShowLogo>:
 * @brief Handles turn on logo
 * @param None
 * @retval None
 */
void ShowLogo ()
{
 80020f8:	b570      	push	{r4, r5, r6, lr}
	int i = 0;
	for (i = 0; i < MAX_NODES + 1; i++)
 80020fa:	2400      	movs	r4, #0
		{
			wsSetColor (i, WHITE);
 80020fc:	2310      	movs	r3, #16
 80020fe:	b2e0      	uxtb	r0, r4
 8002100:	461a      	mov	r2, r3
 8002102:	4619      	mov	r1, r3
 8002104:	f004 ff1e 	bl	8006f44 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 8002108:	3401      	adds	r4, #1
			wsPrepareArray ();
 800210a:	f004 ff5f 	bl	8006fcc <wsPrepareArray>
			HAL_Delay (20);
 800210e:	2014      	movs	r0, #20
 8002110:	f005 f82a 	bl	8007168 <HAL_Delay>
	for (i = 0; i < MAX_NODES + 1; i++)
 8002114:	2c09      	cmp	r4, #9
 8002116:	d1f1      	bne.n	80020fc <ShowLogo+0x4>
		}
	clearStrings ();
 8002118:	f7ff f802 	bl	8001120 <clearStrings>
	sprintf (string[0], "SX127* is OK ");
 800211c:	4c38      	ldr	r4, [pc, #224]	; (8002200 <ShowLogo+0x108>)
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <ShowLogo+0x10c>)
	sprintf (string[1], "Module Firmware:");
 8002120:	4e39      	ldr	r6, [pc, #228]	; (8002208 <ShowLogo+0x110>)
	sprintf (string[0], "SX127* is OK ");
 8002122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002124:	c407      	stmia	r4!, {r0, r1, r2}
 8002126:	4625      	mov	r5, r4
 8002128:	f825 3b34 	strh.w	r3, [r5], #52
	sprintf (string[1], "Module Firmware:");
 800212c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800212e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002130:	6833      	ldr	r3, [r6, #0]
	sprintf (string[2], "0x%X", myRadio.revision);
 8002132:	4a36      	ldr	r2, [pc, #216]	; (800220c <ShowLogo+0x114>)
 8002134:	f104 0074 	add.w	r0, r4, #116	; 0x74
	sprintf (string[1], "Module Firmware:");
 8002138:	702b      	strb	r3, [r5, #0]
	sprintf (string[2], "0x%X", myRadio.revision);
 800213a:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 800213e:	4934      	ldr	r1, [pc, #208]	; (8002210 <ShowLogo+0x118>)
 8002140:	3c0c      	subs	r4, #12
	ssd1306_Clean ();
 8002142:	4626      	mov	r6, r4
	sprintf (string[2], "0x%X", myRadio.revision);
 8002144:	f008 fac4 	bl	800a6d0 <siprintf>
	for (int i = 0; i < 8; i++)
 8002148:	2500      	movs	r5, #0
	ssd1306_Clean ();
 800214a:	f003 fb8d 	bl	8005868 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 800214e:	4629      	mov	r1, r5
 8002150:	2000      	movs	r0, #0
 8002152:	f003 fb4b 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8002156:	3501      	adds	r5, #1
			ssd1306_PutString (string[i]);
 8002158:	4630      	mov	r0, r6
 800215a:	f003 fb4f 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 800215e:	2d08      	cmp	r5, #8
 8002160:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8002164:	d1f3      	bne.n	800214e <ShowLogo+0x56>
	ssd1306_Update ();
 8002166:	f003 fb87 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 800216a:	2500      	movs	r5, #0
	UC1609_Clean ();
 800216c:	f7fe fce2 	bl	8000b34 <UC1609_Clean>
 8002170:	4e23      	ldr	r6, [pc, #140]	; (8002200 <ShowLogo+0x108>)
			UC1609_SetPos (0, i);
 8002172:	b2e9      	uxtb	r1, r5
 8002174:	2000      	movs	r0, #0
 8002176:	f7fe fc33 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 800217a:	3501      	adds	r5, #1
			UC1609_PutString (string[i]);
 800217c:	4630      	mov	r0, r6
 800217e:	f7fe fce1 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8002182:	2d08      	cmp	r5, #8
 8002184:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8002188:	d1f3      	bne.n	8002172 <ShowLogo+0x7a>
	UC1609_UpdateScreen ();
 800218a:	f7fe fc35 	bl	80009f8 <UC1609_UpdateScreen>
	updateLcd ();
	HAL_Delay (100);
 800218e:	2064      	movs	r0, #100	; 0x64
 8002190:	f004 ffea 	bl	8007168 <HAL_Delay>
	clearStrings ();
	sprintf (string[0], "Firmware:");
 8002194:	4e1a      	ldr	r6, [pc, #104]	; (8002200 <ShowLogo+0x108>)
	clearStrings ();
 8002196:	f7fe ffc3 	bl	8001120 <clearStrings>
	sprintf (string[0], "Firmware:");
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <ShowLogo+0x11c>)
	for (int i = 0; i < 8; i++)
 800219c:	2500      	movs	r5, #0
	sprintf (string[0], "Firmware:");
 800219e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021a2:	c603      	stmia	r6!, {r0, r1}
 80021a4:	4630      	mov	r0, r6
	sprintf (string[1], "%lu", version);
 80021a6:	491c      	ldr	r1, [pc, #112]	; (8002218 <ShowLogo+0x120>)
	sprintf (string[0], "Firmware:");
 80021a8:	f820 2b38 	strh.w	r2, [r0], #56
	sprintf (string[1], "%lu", version);
 80021ac:	4a1b      	ldr	r2, [pc, #108]	; (800221c <ShowLogo+0x124>)
 80021ae:	f008 fa8f 	bl	800a6d0 <siprintf>
	ssd1306_Clean ();
 80021b2:	f003 fb59 	bl	8005868 <ssd1306_Clean>
 80021b6:	3e08      	subs	r6, #8
			ssd1306_GotoXY (0, i);
 80021b8:	4629      	mov	r1, r5
 80021ba:	2000      	movs	r0, #0
 80021bc:	f003 fb16 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 80021c0:	3501      	adds	r5, #1
			ssd1306_PutString (string[i]);
 80021c2:	4630      	mov	r0, r6
 80021c4:	f003 fb1a 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 80021c8:	2d08      	cmp	r5, #8
 80021ca:	f106 0640 	add.w	r6, r6, #64	; 0x40
 80021ce:	d1f3      	bne.n	80021b8 <ShowLogo+0xc0>
	ssd1306_Update ();
 80021d0:	f003 fb52 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 80021d4:	2500      	movs	r5, #0
	UC1609_Clean ();
 80021d6:	f7fe fcad 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 80021da:	b2e9      	uxtb	r1, r5
 80021dc:	2000      	movs	r0, #0
 80021de:	f7fe fbff 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 80021e2:	3501      	adds	r5, #1
			UC1609_PutString (string[i]);
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7fe fcad 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 80021ea:	2d08      	cmp	r5, #8
 80021ec:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80021f0:	d1f3      	bne.n	80021da <ShowLogo+0xe2>
	UC1609_UpdateScreen ();
 80021f2:	f7fe fc01 	bl	80009f8 <UC1609_UpdateScreen>
	updateLcd ();
	HAL_Delay (100);
}
 80021f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay (100);
 80021fa:	2064      	movs	r0, #100	; 0x64
 80021fc:	f004 bfb4 	b.w	8007168 <HAL_Delay>
 8002200:	200000f4 	.word	0x200000f4
 8002204:	0800b138 	.word	0x0800b138
 8002208:	0800b148 	.word	0x0800b148
 800220c:	20000928 	.word	0x20000928
 8002210:	0800b15c 	.word	0x0800b15c
 8002214:	0800b164 	.word	0x0800b164
 8002218:	0800b6e4 	.word	0x0800b6e4
 800221c:	08082021 	.word	0x08082021

08002220 <button_right>:
 * @brief Called when encoder turned right
 * @param  None
 * @retval None
 */
void button_right ()
{
 8002220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	switch (screenMode)
 8002224:	4cc4      	ldr	r4, [pc, #784]	; (8002538 <button_right+0x318>)
 8002226:	7823      	ldrb	r3, [r4, #0]
 8002228:	2b1d      	cmp	r3, #29
 800222a:	d835      	bhi.n	8002298 <button_right+0x78>
 800222c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002230:	003b01a5 	.word	0x003b01a5
 8002234:	017d01b6 	.word	0x017d01b6
 8002238:	003b0044 	.word	0x003b0044
 800223c:	023c01d1 	.word	0x023c01d1
 8002240:	020b0214 	.word	0x020b0214
 8002244:	02440203 	.word	0x02440203
 8002248:	024e001e 	.word	0x024e001e
 800224c:	016901f9 	.word	0x016901f9
 8002250:	008c0162 	.word	0x008c0162
 8002254:	00820034 	.word	0x00820034
 8002258:	00620072 	.word	0x00620072
 800225c:	01bd0052 	.word	0x01bd0052
 8002260:	004c0034 	.word	0x004c0034
 8002264:	004f004c 	.word	0x004f004c
 8002268:	0173019e 	.word	0x0173019e
		case smPreamble:
			settings.preamble = (settings.preamble >= MAX_PREAMBLE) ? MAX_PREAMBLE : settings.preamble + 1;
			break;

		case smPower:
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 800226c:	49b3      	ldr	r1, [pc, #716]	; (800253c <button_right+0x31c>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800226e:	4ab4      	ldr	r2, [pc, #720]	; (8002540 <button_right+0x320>)
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8002270:	7c8b      	ldrb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002272:	f992 2000 	ldrsb.w	r2, [r2]
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8002276:	2b13      	cmp	r3, #19
 8002278:	bf28      	it	cs
 800227a:	2313      	movcs	r3, #19
 800227c:	3301      	adds	r3, #1
 800227e:	b2db      	uxtb	r3, r3
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002280:	1c50      	adds	r0, r2, #1
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8002282:	748b      	strb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002284:	d008      	beq.n	8002298 <button_right+0x78>
 8002286:	48af      	ldr	r0, [pc, #700]	; (8002544 <button_right+0x324>)
 8002288:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800228c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002290:	7b12      	ldrb	r2, [r2, #12]
 8002292:	4293      	cmp	r3, r2
 8002294:	d900      	bls.n	8002298 <button_right+0x78>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 8002296:	748a      	strb	r2, [r1, #18]
				selectedMode = 0;
		default:
			break;
	}
	if (screenMode != smRegular)
		flag.lcdRefreshRequest = 1;
 8002298:	4aab      	ldr	r2, [pc, #684]	; (8002548 <button_right+0x328>)
 800229a:	7813      	ldrb	r3, [r2, #0]
 800229c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a0:	7013      	strb	r3, [r2, #0]
}
 80022a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			menuPosition = (menuPosition > 4) ? 0 : menuPosition + 1;
 80022a6:	4ba9      	ldr	r3, [pc, #676]	; (800254c <button_right+0x32c>)
 80022a8:	f993 2000 	ldrsb.w	r2, [r3]
 80022ac:	2a04      	cmp	r2, #4
 80022ae:	dc08      	bgt.n	80022c2 <button_right+0xa2>
			menuPosition = (menuPosition > 2) ? 0 : menuPosition + 1;
 80022b0:	3201      	adds	r2, #1
 80022b2:	b252      	sxtb	r2, r2
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80022b4:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80022b6:	e7ef      	b.n	8002298 <button_right+0x78>
			menuPosition = (menuPosition > 1) ? 0 : menuPosition + 1;
 80022b8:	4ba4      	ldr	r3, [pc, #656]	; (800254c <button_right+0x32c>)
 80022ba:	f993 2000 	ldrsb.w	r2, [r3]
 80022be:	2a01      	cmp	r2, #1
 80022c0:	ddf6      	ble.n	80022b0 <button_right+0x90>
			menuPosition = (menuPosition > 2) ? 0 : menuPosition + 1;
 80022c2:	2200      	movs	r2, #0
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80022c4:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80022c6:	e7e7      	b.n	8002298 <button_right+0x78>
			screenMode++;
 80022c8:	3301      	adds	r3, #1
 80022ca:	7023      	strb	r3, [r4, #0]
			break;
 80022cc:	e7e4      	b.n	8002298 <button_right+0x78>
			screenMode = smStatus;
 80022ce:	2319      	movs	r3, #25
 80022d0:	7023      	strb	r3, [r4, #0]
			break;
 80022d2:	e7e1      	b.n	8002298 <button_right+0x78>
			settings.host[cursorPos] = (settings.host[cursorPos] >= 'z') ? ' ' : settings.host[cursorPos] + 1;
 80022d4:	4b9e      	ldr	r3, [pc, #632]	; (8002550 <button_right+0x330>)
 80022d6:	4c99      	ldr	r4, [pc, #612]	; (800253c <button_right+0x31c>)
 80022d8:	f993 2000 	ldrsb.w	r2, [r3]
 80022dc:	18a3      	adds	r3, r4, r2
 80022de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80022e2:	4414      	add	r4, r2
 80022e4:	2b79      	cmp	r3, #121	; 0x79
 80022e6:	bf8e      	itee	hi
 80022e8:	2320      	movhi	r3, #32
 80022ea:	3301      	addls	r3, #1
 80022ec:	b2db      	uxtbls	r3, r3
 80022ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
			break;
 80022f2:	e7d1      	b.n	8002298 <button_right+0x78>
			settings.ServerPass[cursorPos] = (settings.ServerPass[cursorPos] >= 'z') ? ' ' : settings.ServerPass[cursorPos] + 1;
 80022f4:	4b96      	ldr	r3, [pc, #600]	; (8002550 <button_right+0x330>)
 80022f6:	4c91      	ldr	r4, [pc, #580]	; (800253c <button_right+0x31c>)
 80022f8:	f993 2000 	ldrsb.w	r2, [r3]
 80022fc:	18a3      	adds	r3, r4, r2
 80022fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002302:	4414      	add	r4, r2
 8002304:	2b79      	cmp	r3, #121	; 0x79
 8002306:	bf8e      	itee	hi
 8002308:	2320      	movhi	r3, #32
 800230a:	3301      	addls	r3, #1
 800230c:	b2db      	uxtbls	r3, r3
 800230e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			break;
 8002312:	e7c1      	b.n	8002298 <button_right+0x78>
			settings.WiFiPass[cursorPos] = (settings.WiFiPass[cursorPos] >= 'z') ? ' ' : settings.WiFiPass[cursorPos] + 1;
 8002314:	4b8e      	ldr	r3, [pc, #568]	; (8002550 <button_right+0x330>)
 8002316:	4c89      	ldr	r4, [pc, #548]	; (800253c <button_right+0x31c>)
 8002318:	f993 2000 	ldrsb.w	r2, [r3]
 800231c:	18a3      	adds	r3, r4, r2
 800231e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002322:	4414      	add	r4, r2
 8002324:	2b79      	cmp	r3, #121	; 0x79
 8002326:	bf8e      	itee	hi
 8002328:	2320      	movhi	r3, #32
 800232a:	3301      	addls	r3, #1
 800232c:	b2db      	uxtbls	r3, r3
 800232e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
			break;
 8002332:	e7b1      	b.n	8002298 <button_right+0x78>
			selectedNetwork = (selectedNetwork > 14) ? 0 : selectedNetwork + 1;
 8002334:	4a87      	ldr	r2, [pc, #540]	; (8002554 <button_right+0x334>)
 8002336:	f992 3000 	ldrsb.w	r3, [r2]
 800233a:	2b0e      	cmp	r3, #14
 800233c:	f300 80f2 	bgt.w	8002524 <button_right+0x304>
 8002340:	3301      	adds	r3, #1
 8002342:	b25b      	sxtb	r3, r3
				selectedMode = 0;
 8002344:	7013      	strb	r3, [r2, #0]
 8002346:	e7a7      	b.n	8002298 <button_right+0x78>
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8002348:	4b83      	ldr	r3, [pc, #524]	; (8002558 <button_right+0x338>)
			nodeData[i].masked = nodes[i].masked;
 800234a:	4984      	ldr	r1, [pc, #528]	; (800255c <button_right+0x33c>)
			nodeData[i].disarmed = nodes[i].disarmed;
 800234c:	f893 002d 	ldrb.w	r0, [r3, #45]	; 0x2d
			nodeData[i].masked = nodes[i].masked;
 8002350:	7b5a      	ldrb	r2, [r3, #13]
 8002352:	f893 a02c 	ldrb.w	sl, [r3, #44]	; 0x2c
 8002356:	7b1d      	ldrb	r5, [r3, #12]
 8002358:	0080      	lsls	r0, r0, #2
			nodeData[i].disarmed = nodes[i].disarmed;
 800235a:	f893 806d 	ldrb.w	r8, [r3, #109]	; 0x6d
			nodeData[i].masked = nodes[i].masked;
 800235e:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8002362:	f00a 0a03 	and.w	sl, sl, #3
 8002366:	f000 0004 	and.w	r0, r0, #4
			nodeData[i].disarmed = nodes[i].disarmed;
 800236a:	f893 904d 	ldrb.w	r9, [r3, #77]	; 0x4d
			nodeData[i].masked = nodes[i].masked;
 800236e:	f00b 0204 	and.w	r2, fp, #4
 8002372:	f005 0503 	and.w	r5, r5, #3
 8002376:	ea40 000a 	orr.w	r0, r0, sl
 800237a:	f893 a06c 	ldrb.w	sl, [r3, #108]	; 0x6c
 800237e:	7b9f      	ldrb	r7, [r3, #14]
 8002380:	f893 e04c 	ldrb.w	lr, [r3, #76]	; 0x4c
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8002384:	f893 604e 	ldrb.w	r6, [r3, #78]	; 0x4e
			nodeData[i].masked = nodes[i].masked;
 8002388:	432a      	orrs	r2, r5
 800238a:	ea4f 0888 	mov.w	r8, r8, lsl #2
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 800238e:	f893 506e 	ldrb.w	r5, [r3, #110]	; 0x6e
			nodeData[i].masked = nodes[i].masked;
 8002392:	f008 0804 	and.w	r8, r8, #4
 8002396:	f00a 0a03 	and.w	sl, sl, #3
 800239a:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800239e:	ea48 0b0a 	orr.w	fp, r8, sl
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80023a2:	f893 c02e 	ldrb.w	ip, [r3, #46]	; 0x2e
			nodeData[i].masked = nodes[i].masked;
 80023a6:	f891 8003 	ldrb.w	r8, [r1, #3]
 80023aa:	f009 0904 	and.w	r9, r9, #4
 80023ae:	00ff      	lsls	r7, r7, #3
 80023b0:	f00e 0e03 	and.w	lr, lr, #3
 80023b4:	00f6      	lsls	r6, r6, #3
 80023b6:	00ed      	lsls	r5, r5, #3
 80023b8:	ea49 0e0e 	orr.w	lr, r9, lr
 80023bc:	f007 0708 	and.w	r7, r7, #8
 80023c0:	f891 9000 	ldrb.w	r9, [r1]
 80023c4:	f006 0608 	and.w	r6, r6, #8
 80023c8:	f005 0508 	and.w	r5, r5, #8
 80023cc:	f891 a001 	ldrb.w	sl, [r1, #1]
 80023d0:	433a      	orrs	r2, r7
 80023d2:	ea4b 0505 	orr.w	r5, fp, r5
 80023d6:	788f      	ldrb	r7, [r1, #2]
 80023d8:	ea4e 0606 	orr.w	r6, lr, r6
 80023dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
			nodeData[i].disarmed = nodes[i].disarmed;
 80023e0:	f893 e08d 	ldrb.w	lr, [r3, #141]	; 0x8d
			nodeData[i].masked = nodes[i].masked;
 80023e4:	f028 080f 	bic.w	r8, r8, #15
 80023e8:	ea45 0808 	orr.w	r8, r5, r8
 80023ec:	f00c 0c08 	and.w	ip, ip, #8
 80023f0:	f893 508c 	ldrb.w	r5, [r3, #140]	; 0x8c
 80023f4:	f029 090f 	bic.w	r9, r9, #15
 80023f8:	ea42 0909 	orr.w	r9, r2, r9
 80023fc:	ea40 000c 	orr.w	r0, r0, ip
			nodeData[i].disarmed = nodes[i].disarmed;
 8002400:	f893 20ed 	ldrb.w	r2, [r3, #237]	; 0xed
			nodeData[i].masked = nodes[i].masked;
 8002404:	f02a 0a0f 	bic.w	sl, sl, #15
 8002408:	f027 070f 	bic.w	r7, r7, #15
 800240c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002410:	ea40 0c0a 	orr.w	ip, r0, sl
 8002414:	433e      	orrs	r6, r7
			nodeData[i].disarmed = nodes[i].disarmed;
 8002416:	f893 00ad 	ldrb.w	r0, [r3, #173]	; 0xad
 800241a:	f893 a0cd 	ldrb.w	sl, [r3, #205]	; 0xcd
			nodeData[i].masked = nodes[i].masked;
 800241e:	f005 0503 	and.w	r5, r5, #3
 8002422:	f00e 0e04 	and.w	lr, lr, #4
 8002426:	0097      	lsls	r7, r2, #2
 8002428:	708e      	strb	r6, [r1, #2]
 800242a:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 800242e:	f893 60ec 	ldrb.w	r6, [r3, #236]	; 0xec
 8002432:	ea4e 0e05 	orr.w	lr, lr, r5
 8002436:	f893 50cc 	ldrb.w	r5, [r3, #204]	; 0xcc
 800243a:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 800243e:	f881 c001 	strb.w	ip, [r1, #1]
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8002442:	f893 008e 	ldrb.w	r0, [r3, #142]	; 0x8e
 8002446:	f893 c0ae 	ldrb.w	ip, [r3, #174]	; 0xae
			nodeData[i].masked = nodes[i].masked;
 800244a:	f881 9000 	strb.w	r9, [r1]
 800244e:	f881 8003 	strb.w	r8, [r1, #3]
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8002452:	f893 90ce 	ldrb.w	r9, [r3, #206]	; 0xce
 8002456:	f893 80ee 	ldrb.w	r8, [r3, #238]	; 0xee
			nodeData[i].masked = nodes[i].masked;
 800245a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800245e:	f005 0303 	and.w	r3, r5, #3
 8002462:	f007 0704 	and.w	r7, r7, #4
 8002466:	f002 0203 	and.w	r2, r2, #3
 800246a:	f00b 0b04 	and.w	fp, fp, #4
 800246e:	f00a 0a04 	and.w	sl, sl, #4
 8002472:	f006 0603 	and.w	r6, r6, #3
 8002476:	790d      	ldrb	r5, [r1, #4]
 8002478:	ea4b 0b02 	orr.w	fp, fp, r2
 800247c:	ea4a 0a03 	orr.w	sl, sl, r3
 8002480:	79ca      	ldrb	r2, [r1, #7]
 8002482:	794b      	ldrb	r3, [r1, #5]
 8002484:	433e      	orrs	r6, r7
 8002486:	00c0      	lsls	r0, r0, #3
 8002488:	798f      	ldrb	r7, [r1, #6]
 800248a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800248e:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8002492:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8002496:	f000 0008 	and.w	r0, r0, #8
 800249a:	f00c 0c08 	and.w	ip, ip, #8
 800249e:	f009 0908 	and.w	r9, r9, #8
 80024a2:	f008 0808 	and.w	r8, r8, #8
 80024a6:	ea4e 0e00 	orr.w	lr, lr, r0
 80024aa:	f023 030f 	bic.w	r3, r3, #15
 80024ae:	f022 020f 	bic.w	r2, r2, #15
 80024b2:	ea4b 0c0c 	orr.w	ip, fp, ip
 80024b6:	ea4a 0909 	orr.w	r9, sl, r9
 80024ba:	ea46 0608 	orr.w	r6, r6, r8
 80024be:	f025 050f 	bic.w	r5, r5, #15
 80024c2:	f027 070f 	bic.w	r7, r7, #15
 80024c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80024ca:	4316      	orrs	r6, r2
 80024cc:	ea4e 0505 	orr.w	r5, lr, r5
 80024d0:	ea49 0707 	orr.w	r7, r9, r7
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 80024d4:	2208      	movs	r2, #8
 80024d6:	2000      	movs	r0, #0
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <button_right+0x340>)
			nodeData[i].masked = nodes[i].masked;
 80024da:	710d      	strb	r5, [r1, #4]
 80024dc:	f881 c005 	strb.w	ip, [r1, #5]
 80024e0:	718f      	strb	r7, [r1, #6]
 80024e2:	71ce      	strb	r6, [r1, #7]
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 80024e4:	f7fe fc62 	bl	8000dac <writeToEeprom>
	if (screenMode != smRegular)
 80024e8:	7823      	ldrb	r3, [r4, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f47f aed4 	bne.w	8002298 <button_right+0x78>
}
 80024f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			nodeSettings.useLed = !nodeSettings.useLed;
 80024f4:	4a1b      	ldr	r2, [pc, #108]	; (8002564 <button_right+0x344>)
 80024f6:	7c13      	ldrb	r3, [r2, #16]
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	095b      	lsrs	r3, r3, #5
 80024fe:	7413      	strb	r3, [r2, #16]
			break;
 8002500:	e6ca      	b.n	8002298 <button_right+0x78>
			if (nodeSettings.workInterval > MAX_WORK_INTERVAL)
 8002502:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
			nodeSettings.workInterval += 5;
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <button_right+0x344>)
 8002508:	6853      	ldr	r3, [r2, #4]
 800250a:	3305      	adds	r3, #5
 800250c:	428b      	cmp	r3, r1
 800250e:	bf28      	it	cs
 8002510:	460b      	movcs	r3, r1
 8002512:	6053      	str	r3, [r2, #4]
 8002514:	e6c0      	b.n	8002298 <button_right+0x78>
			selectedMode++;
 8002516:	4a14      	ldr	r2, [pc, #80]	; (8002568 <button_right+0x348>)
 8002518:	7813      	ldrb	r3, [r2, #0]
 800251a:	3301      	adds	r3, #1
 800251c:	b2db      	uxtb	r3, r3
			if (selectedMode > testSignal)
 800251e:	2b05      	cmp	r3, #5
 8002520:	f67f af10 	bls.w	8002344 <button_right+0x124>
				selectedMode = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	7013      	strb	r3, [r2, #0]
 8002528:	e6b6      	b.n	8002298 <button_right+0x78>
			menuPosition = (menuPosition > 0) ? 0 : menuPosition + 1;
 800252a:	4b08      	ldr	r3, [pc, #32]	; (800254c <button_right+0x32c>)
 800252c:	f993 2000 	ldrsb.w	r2, [r3]
 8002530:	2a00      	cmp	r2, #0
 8002532:	f73f aec6 	bgt.w	80022c2 <button_right+0xa2>
 8002536:	e6bb      	b.n	80022b0 <button_right+0x90>
 8002538:	200000ee 	.word	0x200000ee
 800253c:	20000a00 	.word	0x20000a00
 8002540:	20001588 	.word	0x20001588
 8002544:	20000b5c 	.word	0x20000b5c
 8002548:	20000adc 	.word	0x20000adc
 800254c:	200000db 	.word	0x200000db
 8002550:	200000b2 	.word	0x200000b2
 8002554:	200000f0 	.word	0x200000f0
 8002558:	20000c78 	.word	0x20000c78
 800255c:	20000d78 	.word	0x20000d78
 8002560:	20000a70 	.word	0x20000a70
 8002564:	20000c04 	.word	0x20000c04
 8002568:	200000ef 	.word	0x200000ef
			menuPosition = (menuPosition > 2) ? 0 : menuPosition + 1;
 800256c:	4b64      	ldr	r3, [pc, #400]	; (8002700 <button_right+0x4e0>)
 800256e:	f993 2000 	ldrsb.w	r2, [r3]
 8002572:	2a02      	cmp	r2, #2
 8002574:	f73f aea5 	bgt.w	80022c2 <button_right+0xa2>
 8002578:	e69a      	b.n	80022b0 <button_right+0x90>
			lastNodeChangeTick = HAL_GetTick ();
 800257a:	f004 fdef 	bl	800715c <HAL_GetTick>
			selectedNode++;
 800257e:	4a61      	ldr	r2, [pc, #388]	; (8002704 <button_right+0x4e4>)
			lastNodeChangeTick = HAL_GetTick ();
 8002580:	4961      	ldr	r1, [pc, #388]	; (8002708 <button_right+0x4e8>)
			selectedNode++;
 8002582:	8813      	ldrh	r3, [r2, #0]
			lastNodeChangeTick = HAL_GetTick ();
 8002584:	6008      	str	r0, [r1, #0]
			selectedNode++;
 8002586:	3301      	adds	r3, #1
 8002588:	b21b      	sxth	r3, r3
			if (selectedNode > MAX_NODES - 1)
 800258a:	2b07      	cmp	r3, #7
			selectedNode++;
 800258c:	8013      	strh	r3, [r2, #0]
			if (selectedNode > MAX_NODES - 1)
 800258e:	ddab      	ble.n	80024e8 <button_right+0x2c8>
				selectedNode = 0;
 8002590:	2100      	movs	r1, #0
 8002592:	7823      	ldrb	r3, [r4, #0]
 8002594:	8011      	strh	r1, [r2, #0]
	if (screenMode != smRegular)
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0aa      	beq.n	80024f0 <button_right+0x2d0>
 800259a:	e67d      	b.n	8002298 <button_right+0x78>
			menuPosition = (menuPosition > 5) ? 0 : menuPosition + 1;
 800259c:	4b58      	ldr	r3, [pc, #352]	; (8002700 <button_right+0x4e0>)
 800259e:	f993 2000 	ldrsb.w	r2, [r3]
 80025a2:	2a05      	cmp	r2, #5
 80025a4:	f73f ae8d 	bgt.w	80022c2 <button_right+0xa2>
 80025a8:	e682      	b.n	80022b0 <button_right+0x90>
			settings.baseID += pow10_ (6 - cursorPos);
 80025aa:	4b58      	ldr	r3, [pc, #352]	; (800270c <button_right+0x4ec>)
 80025ac:	7818      	ldrb	r0, [r3, #0]
 80025ae:	f1c0 0006 	rsb	r0, r0, #6
 80025b2:	b2c0      	uxtb	r0, r0
 80025b4:	f7fe fb14 	bl	8000be0 <pow10_>
 80025b8:	4a55      	ldr	r2, [pc, #340]	; (8002710 <button_right+0x4f0>)
			if (settings.baseID > MAX_BASEID)
 80025ba:	4b56      	ldr	r3, [pc, #344]	; (8002714 <button_right+0x4f4>)
			settings.baseID += pow10_ (6 - cursorPos);
 80025bc:	6e51      	ldr	r1, [r2, #100]	; 0x64
 80025be:	4408      	add	r0, r1
			if (settings.baseID > MAX_BASEID)
 80025c0:	4298      	cmp	r0, r3
			settings.baseID += pow10_ (6 - cursorPos);
 80025c2:	6650      	str	r0, [r2, #100]	; 0x64
			if (settings.baseID > MAX_BASEID)
 80025c4:	db90      	blt.n	80024e8 <button_right+0x2c8>
				settings.baseID = MAX_BASEID;
 80025c6:	4954      	ldr	r1, [pc, #336]	; (8002718 <button_right+0x4f8>)
 80025c8:	7823      	ldrb	r3, [r4, #0]
 80025ca:	6651      	str	r1, [r2, #100]	; 0x64
	if (screenMode != smRegular)
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d08f      	beq.n	80024f0 <button_right+0x2d0>
 80025d0:	e662      	b.n	8002298 <button_right+0x78>
			if (settings.realFrequency < MAX_FREQUENCY)
 80025d2:	4c4f      	ldr	r4, [pc, #316]	; (8002710 <button_right+0x4f0>)
 80025d4:	4b51      	ldr	r3, [pc, #324]	; (800271c <button_right+0x4fc>)
 80025d6:	6820      	ldr	r0, [r4, #0]
 80025d8:	4298      	cmp	r0, r3
 80025da:	d803      	bhi.n	80025e4 <button_right+0x3c4>
				settings.realFrequency += 50000;
 80025dc:	f500 4043 	add.w	r0, r0, #49920	; 0xc300
 80025e0:	3050      	adds	r0, #80	; 0x50
 80025e2:	6020      	str	r0, [r4, #0]
 * @retval returns interval
 */
uint8_t checkFreq (uint32_t frequency, uint8_t bw)
{
	uint8_t i;
	for (i = 0; i < legalFreq.intervalCount; i++)
 80025e4:	4b4e      	ldr	r3, [pc, #312]	; (8002720 <button_right+0x500>)
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80025e6:	7be5      	ldrb	r5, [r4, #15]
	for (i = 0; i < legalFreq.intervalCount; i++)
 80025e8:	781f      	ldrb	r7, [r3, #0]
 80025ea:	b1c7      	cbz	r7, 800261e <button_right+0x3fe>
 80025ec:	461a      	mov	r2, r3
		{
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 80025ee:	2100      	movs	r1, #0
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 80025f0:	4e4c      	ldr	r6, [pc, #304]	; (8002724 <button_right+0x504>)
 80025f2:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 80025f6:	eba0 0556 	sub.w	r5, r0, r6, lsr #1
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 80025fa:	eb00 0c56 	add.w	ip, r0, r6, lsr #1
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 80025fe:	6850      	ldr	r0, [r2, #4]
 8002600:	4285      	cmp	r5, r0
 8002602:	d306      	bcc.n	8002612 <button_right+0x3f2>
 8002604:	6896      	ldr	r6, [r2, #8]
 8002606:	42b5      	cmp	r5, r6
 8002608:	d803      	bhi.n	8002612 <button_right+0x3f2>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 800260a:	4560      	cmp	r0, ip
 800260c:	d801      	bhi.n	8002612 <button_right+0x3f2>
 800260e:	4566      	cmp	r6, ip
 8002610:	d266      	bcs.n	80026e0 <button_right+0x4c0>
 8002612:	3101      	adds	r1, #1
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002614:	b2c8      	uxtb	r0, r1
 8002616:	4287      	cmp	r7, r0
 8002618:	f102 020c 	add.w	r2, r2, #12
 800261c:	d8ef      	bhi.n	80025fe <button_right+0x3de>
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 800261e:	22ff      	movs	r2, #255	; 0xff
 8002620:	e03f      	b.n	80026a2 <button_right+0x482>
			settings.superWarningDelay = (settings.superWarningDelay >= MAX_WARNING_DELAY) ? MAX_WARNING_DELAY : settings.superWarningDelay + 10000;
 8002622:	4c3b      	ldr	r4, [pc, #236]	; (8002710 <button_right+0x4f0>)
 8002624:	4b40      	ldr	r3, [pc, #256]	; (8002728 <button_right+0x508>)
 8002626:	68a2      	ldr	r2, [r4, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	bf3c      	itt	cc
 800262c:	f502 531c 	addcc.w	r3, r2, #9984	; 0x2700
 8002630:	3310      	addcc	r3, #16
 8002632:	60a3      	str	r3, [r4, #8]
			break;
 8002634:	e630      	b.n	8002298 <button_right+0x78>
			settings.cr = (settings.cr >= 4) ? 4 : settings.cr + 1;
 8002636:	4a36      	ldr	r2, [pc, #216]	; (8002710 <button_right+0x4f0>)
 8002638:	7c13      	ldrb	r3, [r2, #16]
 800263a:	2b03      	cmp	r3, #3
 800263c:	bf28      	it	cs
 800263e:	2303      	movcs	r3, #3
 8002640:	3301      	adds	r3, #1
 8002642:	7413      	strb	r3, [r2, #16]
			break;
 8002644:	e628      	b.n	8002298 <button_right+0x78>
			settings.syncWord++;
 8002646:	4a32      	ldr	r2, [pc, #200]	; (8002710 <button_right+0x4f0>)
 8002648:	7c53      	ldrb	r3, [r2, #17]
 800264a:	3301      	adds	r3, #1
 800264c:	b2db      	uxtb	r3, r3
			if (settings.syncWord == 0x34)
 800264e:	2b34      	cmp	r3, #52	; 0x34
				settings.syncWord = 0x35;
 8002650:	bf08      	it	eq
 8002652:	2335      	moveq	r3, #53	; 0x35
 8002654:	7453      	strb	r3, [r2, #17]
 8002656:	e61f      	b.n	8002298 <button_right+0x78>
			if (settings.bw < 9)
 8002658:	4c2d      	ldr	r4, [pc, #180]	; (8002710 <button_right+0x4f0>)
 800265a:	7be1      	ldrb	r1, [r4, #15]
 800265c:	2908      	cmp	r1, #8
 800265e:	d802      	bhi.n	8002666 <button_right+0x446>
				settings.bw++;
 8002660:	3101      	adds	r1, #1
 8002662:	b2c9      	uxtb	r1, r1
 8002664:	73e1      	strb	r1, [r4, #15]
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002666:	4b2e      	ldr	r3, [pc, #184]	; (8002720 <button_right+0x500>)
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002668:	6826      	ldr	r6, [r4, #0]
	for (i = 0; i < legalFreq.intervalCount; i++)
 800266a:	781d      	ldrb	r5, [r3, #0]
 800266c:	b1bd      	cbz	r5, 800269e <button_right+0x47e>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 800266e:	2200      	movs	r2, #0
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 8002670:	482c      	ldr	r0, [pc, #176]	; (8002724 <button_right+0x504>)
 8002672:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002676:	eba6 0051 	sub.w	r0, r6, r1, lsr #1
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 800267a:	eb06 0651 	add.w	r6, r6, r1, lsr #1
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	4288      	cmp	r0, r1
 8002682:	d306      	bcc.n	8002692 <button_right+0x472>
 8002684:	689c      	ldr	r4, [r3, #8]
 8002686:	42a0      	cmp	r0, r4
 8002688:	d803      	bhi.n	8002692 <button_right+0x472>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 800268a:	42b1      	cmp	r1, r6
 800268c:	d801      	bhi.n	8002692 <button_right+0x472>
 800268e:	42b4      	cmp	r4, r6
 8002690:	d234      	bcs.n	80026fc <button_right+0x4dc>
 8002692:	3201      	adds	r2, #1
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002694:	b2d1      	uxtb	r1, r2
 8002696:	428d      	cmp	r5, r1
 8002698:	f103 030c 	add.w	r3, r3, #12
 800269c:	d8ef      	bhi.n	800267e <button_right+0x45e>
 800269e:	f04f 32ff 	mov.w	r2, #4294967295
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80026a2:	4b22      	ldr	r3, [pc, #136]	; (800272c <button_right+0x50c>)
 80026a4:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80026a6:	e5f7      	b.n	8002298 <button_right+0x78>
			if (settings.sf < 12)
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <button_right+0x4f0>)
 80026aa:	7b93      	ldrb	r3, [r2, #14]
 80026ac:	2b0b      	cmp	r3, #11
 80026ae:	f63f adf3 	bhi.w	8002298 <button_right+0x78>
				settings.sf++;
 80026b2:	3301      	adds	r3, #1
 80026b4:	7393      	strb	r3, [r2, #14]
 80026b6:	e5ef      	b.n	8002298 <button_right+0x78>
			settings.preamble = (settings.preamble >= MAX_PREAMBLE) ? MAX_PREAMBLE : settings.preamble + 1;
 80026b8:	f240 31e7 	movw	r1, #999	; 0x3e7
 80026bc:	4a14      	ldr	r2, [pc, #80]	; (8002710 <button_right+0x4f0>)
 80026be:	8993      	ldrh	r3, [r2, #12]
 80026c0:	428b      	cmp	r3, r1
 80026c2:	bf28      	it	cs
 80026c4:	460b      	movcs	r3, r1
 80026c6:	3301      	adds	r3, #1
 80026c8:	8193      	strh	r3, [r2, #12]
			break;
 80026ca:	e5e5      	b.n	8002298 <button_right+0x78>
			settings.warningDelay = (settings.warningDelay >= MAX_WARNING_DELAY) ? MAX_WARNING_DELAY : settings.warningDelay + 10000;
 80026cc:	4c10      	ldr	r4, [pc, #64]	; (8002710 <button_right+0x4f0>)
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <button_right+0x508>)
 80026d0:	6862      	ldr	r2, [r4, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	bf3c      	itt	cc
 80026d6:	f502 531c 	addcc.w	r3, r2, #9984	; 0x2700
 80026da:	3310      	addcc	r3, #16
 80026dc:	6063      	str	r3, [r4, #4]
			break;
 80026de:	e5db      	b.n	8002298 <button_right+0x78>
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80026e0:	b249      	sxtb	r1, r1
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80026e2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80026e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80026ea:	7b1b      	ldrb	r3, [r3, #12]
 80026ec:	7ca2      	ldrb	r2, [r4, #18]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80026ee:	480f      	ldr	r0, [pc, #60]	; (800272c <button_right+0x50c>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80026f0:	429a      	cmp	r2, r3
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80026f2:	7001      	strb	r1, [r0, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80026f4:	f67f add0 	bls.w	8002298 <button_right+0x78>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 80026f8:	74a3      	strb	r3, [r4, #18]
 80026fa:	e5cd      	b.n	8002298 <button_right+0x78>
 80026fc:	b252      	sxtb	r2, r2
 80026fe:	e7d0      	b.n	80026a2 <button_right+0x482>
 8002700:	200000db 	.word	0x200000db
 8002704:	200000f2 	.word	0x200000f2
 8002708:	200000bc 	.word	0x200000bc
 800270c:	200000b2 	.word	0x200000b2
 8002710:	20000a00 	.word	0x20000a00
 8002714:	00989680 	.word	0x00989680
 8002718:	0098967f 	.word	0x0098967f
 800271c:	3b8b87bf 	.word	0x3b8b87bf
 8002720:	20000b5c 	.word	0x20000b5c
 8002724:	0800b974 	.word	0x0800b974
 8002728:	02932e00 	.word	0x02932e00
 800272c:	20001588 	.word	0x20001588

08002730 <button_left>:
{
 8002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (screenMode)
 8002732:	4ca5      	ldr	r4, [pc, #660]	; (80029c8 <button_left+0x298>)
 8002734:	7823      	ldrb	r3, [r4, #0]
 8002736:	2b1d      	cmp	r3, #29
 8002738:	d835      	bhi.n	80027a6 <button_left+0x76>
 800273a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800273e:	0166      	.short	0x0166
 8002740:	0133003a 	.word	0x0133003a
 8002744:	0179015d 	.word	0x0179015d
 8002748:	010b003a 	.word	0x010b003a
 800274c:	00da0103 	.word	0x00da0103
 8002750:	00c900d1 	.word	0x00c900d1
 8002754:	001e00c1 	.word	0x001e00c1
 8002758:	00ab00b6 	.word	0x00ab00b6
 800275c:	009c00a3 	.word	0x009c00a3
 8002760:	00340034 	.word	0x00340034
 8002764:	00800091 	.word	0x00800091
 8002768:	005e006f 	.word	0x005e006f
 800276c:	0034004c 	.word	0x0034004c
 8002770:	00490182 	.word	0x00490182
 8002774:	01850049 	.word	0x01850049
 8002778:	013c      	.short	0x013c
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 800277a:	4994      	ldr	r1, [pc, #592]	; (80029cc <button_left+0x29c>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800277c:	4a94      	ldr	r2, [pc, #592]	; (80029d0 <button_left+0x2a0>)
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 800277e:	7c8b      	ldrb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002780:	f992 2000 	ldrsb.w	r2, [r2]
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8002784:	2b0b      	cmp	r3, #11
 8002786:	bf38      	it	cc
 8002788:	230b      	movcc	r3, #11
 800278a:	3b01      	subs	r3, #1
 800278c:	b2db      	uxtb	r3, r3
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800278e:	1c50      	adds	r0, r2, #1
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8002790:	748b      	strb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002792:	d008      	beq.n	80027a6 <button_left+0x76>
 8002794:	488f      	ldr	r0, [pc, #572]	; (80029d4 <button_left+0x2a4>)
 8002796:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800279a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800279e:	7b12      	ldrb	r2, [r2, #12]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d900      	bls.n	80027a6 <button_left+0x76>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 80027a4:	748a      	strb	r2, [r1, #18]
		flag.lcdRefreshRequest = 1;
 80027a6:	4a8c      	ldr	r2, [pc, #560]	; (80029d8 <button_left+0x2a8>)
 80027a8:	7813      	ldrb	r3, [r2, #0]
 80027aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ae:	7013      	strb	r3, [r2, #0]
}
 80027b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			menuPosition = (menuPosition < 1) ? 5 : menuPosition - 1;
 80027b2:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <button_left+0x2ac>)
 80027b4:	f993 2000 	ldrsb.w	r2, [r3]
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	f340 814e 	ble.w	8002a5a <button_left+0x32a>
			menuPosition = (menuPosition < 1) ? 3 : menuPosition - 1;
 80027be:	3a01      	subs	r2, #1
 80027c0:	b252      	sxtb	r2, r2
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80027c2:	701a      	strb	r2, [r3, #0]
		flag.lcdRefreshRequest = 1;
 80027c4:	4a84      	ldr	r2, [pc, #528]	; (80029d8 <button_left+0x2a8>)
 80027c6:	7813      	ldrb	r3, [r2, #0]
 80027c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027cc:	7013      	strb	r3, [r2, #0]
 80027ce:	e7ef      	b.n	80027b0 <button_left+0x80>
			screenMode--;
 80027d0:	3b01      	subs	r3, #1
 80027d2:	7023      	strb	r3, [r4, #0]
			break;
 80027d4:	e7e7      	b.n	80027a6 <button_left+0x76>
			settings.baseID -= pow10_ (6 - cursorPos);
 80027d6:	4b82      	ldr	r3, [pc, #520]	; (80029e0 <button_left+0x2b0>)
 80027d8:	7818      	ldrb	r0, [r3, #0]
 80027da:	f1c0 0006 	rsb	r0, r0, #6
 80027de:	b2c0      	uxtb	r0, r0
 80027e0:	f7fe f9fe 	bl	8000be0 <pow10_>
 80027e4:	4a79      	ldr	r2, [pc, #484]	; (80029cc <button_left+0x29c>)
 80027e6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80027e8:	1a18      	subs	r0, r3, r0
			if (settings.baseID <= 0)
 80027ea:	2800      	cmp	r0, #0
			settings.baseID -= pow10_ (6 - cursorPos);
 80027ec:	6650      	str	r0, [r2, #100]	; 0x64
			if (settings.baseID <= 0)
 80027ee:	f340 8145 	ble.w	8002a7c <button_left+0x34c>
	if (screenMode != smRegular)
 80027f2:	7823      	ldrb	r3, [r4, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1d6      	bne.n	80027a6 <button_left+0x76>
}
 80027f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			settings.host[cursorPos] = (settings.host[cursorPos] <= ' ') ? 'z' : settings.host[cursorPos] - 1;
 80027fa:	4b79      	ldr	r3, [pc, #484]	; (80029e0 <button_left+0x2b0>)
 80027fc:	4c73      	ldr	r4, [pc, #460]	; (80029cc <button_left+0x29c>)
 80027fe:	f993 2000 	ldrsb.w	r2, [r3]
 8002802:	18a3      	adds	r3, r4, r2
 8002804:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002808:	4414      	add	r4, r2
 800280a:	2b20      	cmp	r3, #32
 800280c:	bf92      	itee	ls
 800280e:	237a      	movls	r3, #122	; 0x7a
 8002810:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8002814:	b2db      	uxtbhi	r3, r3
 8002816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
			break;
 800281a:	e7c4      	b.n	80027a6 <button_left+0x76>
			settings.ServerPass[cursorPos] = (settings.ServerPass[cursorPos] <= ' ') ? 'z' : settings.ServerPass[cursorPos] - 1;
 800281c:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <button_left+0x2b0>)
 800281e:	4c6b      	ldr	r4, [pc, #428]	; (80029cc <button_left+0x29c>)
 8002820:	f993 2000 	ldrsb.w	r2, [r3]
 8002824:	18a3      	adds	r3, r4, r2
 8002826:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800282a:	4414      	add	r4, r2
 800282c:	2b20      	cmp	r3, #32
 800282e:	bf92      	itee	ls
 8002830:	237a      	movls	r3, #122	; 0x7a
 8002832:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8002836:	b2db      	uxtbhi	r3, r3
 8002838:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
			break;
 800283c:	e7b3      	b.n	80027a6 <button_left+0x76>
			settings.WiFiPass[cursorPos] = (settings.WiFiPass[cursorPos] <= ' ') ? 'z' : settings.WiFiPass[cursorPos] - 1;
 800283e:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <button_left+0x2b0>)
 8002840:	4c62      	ldr	r4, [pc, #392]	; (80029cc <button_left+0x29c>)
 8002842:	f993 2000 	ldrsb.w	r2, [r3]
 8002846:	18a3      	adds	r3, r4, r2
 8002848:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800284c:	4414      	add	r4, r2
 800284e:	2b20      	cmp	r3, #32
 8002850:	bf92      	itee	ls
 8002852:	237a      	movls	r3, #122	; 0x7a
 8002854:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8002858:	b2db      	uxtbhi	r3, r3
 800285a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
			break;
 800285e:	e7a2      	b.n	80027a6 <button_left+0x76>
			selectedNetwork = (selectedNetwork < 1) ? 15 : selectedNetwork - 1;
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <button_left+0x2b4>)
 8002862:	f992 3000 	ldrsb.w	r3, [r2]
 8002866:	2b00      	cmp	r3, #0
 8002868:	bfd2      	itee	le
 800286a:	230f      	movle	r3, #15
 800286c:	f103 33ff 	addgt.w	r3, r3, #4294967295
 8002870:	b25b      	sxtbgt	r3, r3
				selectedMode = testSignal;
 8002872:	7013      	strb	r3, [r2, #0]
 8002874:	e797      	b.n	80027a6 <button_left+0x76>
			nodeSettings.useLed = !nodeSettings.useLed;
 8002876:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <button_left+0x2b8>)
 8002878:	7c13      	ldrb	r3, [r2, #16]
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	7413      	strb	r3, [r2, #16]
			break;
 8002882:	e790      	b.n	80027a6 <button_left+0x76>
			nodeSettings.workInterval = nodeSettings.workInterval <= MIN_WORK_INTERVAL ? MIN_WORK_INTERVAL : nodeSettings.workInterval - 5;
 8002884:	4a58      	ldr	r2, [pc, #352]	; (80029e8 <button_left+0x2b8>)
 8002886:	6853      	ldr	r3, [r2, #4]
 8002888:	2b14      	cmp	r3, #20
 800288a:	bf94      	ite	ls
 800288c:	2314      	movls	r3, #20
 800288e:	3b05      	subhi	r3, #5
 8002890:	6053      	str	r3, [r2, #4]
			break;
 8002892:	e788      	b.n	80027a6 <button_left+0x76>
			settings.superWarningDelay = (settings.superWarningDelay <= MIN_WARNING_DELAY) ? MIN_WARNING_DELAY : settings.superWarningDelay - 10000;
 8002894:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002898:	4c4c      	ldr	r4, [pc, #304]	; (80029cc <button_left+0x29c>)
 800289a:	68a2      	ldr	r2, [r4, #8]
 800289c:	429a      	cmp	r2, r3
 800289e:	bf84      	itt	hi
 80028a0:	f5a2 531c 	subhi.w	r3, r2, #9984	; 0x2700
 80028a4:	3b10      	subhi	r3, #16
 80028a6:	60a3      	str	r3, [r4, #8]
			break;
 80028a8:	e77d      	b.n	80027a6 <button_left+0x76>
			settings.warningDelay = (settings.warningDelay <= MIN_WARNING_DELAY) ? MIN_WARNING_DELAY : settings.warningDelay - 10000;
 80028aa:	f64e 2360 	movw	r3, #60000	; 0xea60
 80028ae:	4c47      	ldr	r4, [pc, #284]	; (80029cc <button_left+0x29c>)
 80028b0:	6862      	ldr	r2, [r4, #4]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	bf84      	itt	hi
 80028b6:	f5a2 531c 	subhi.w	r3, r2, #9984	; 0x2700
 80028ba:	3b10      	subhi	r3, #16
 80028bc:	6063      	str	r3, [r4, #4]
			break;
 80028be:	e772      	b.n	80027a6 <button_left+0x76>
			settings.preamble = (settings.preamble <= MIN_PREAMBLE) ? MIN_PREAMBLE : settings.preamble - 1;
 80028c0:	4a42      	ldr	r2, [pc, #264]	; (80029cc <button_left+0x29c>)
 80028c2:	8993      	ldrh	r3, [r2, #12]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	bf38      	it	cc
 80028c8:	2303      	movcc	r3, #3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	8193      	strh	r3, [r2, #12]
			break;
 80028ce:	e76a      	b.n	80027a6 <button_left+0x76>
			settings.cr = (settings.cr <= 1) ? 1 : settings.cr - 1;
 80028d0:	4a3e      	ldr	r2, [pc, #248]	; (80029cc <button_left+0x29c>)
 80028d2:	7c13      	ldrb	r3, [r2, #16]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	bf38      	it	cc
 80028d8:	2302      	movcc	r3, #2
 80028da:	3b01      	subs	r3, #1
 80028dc:	7413      	strb	r3, [r2, #16]
			break;
 80028de:	e762      	b.n	80027a6 <button_left+0x76>
			settings.syncWord--;
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <button_left+0x29c>)
 80028e2:	7c53      	ldrb	r3, [r2, #17]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b2db      	uxtb	r3, r3
			if (settings.syncWord == 0x34)
 80028e8:	2b34      	cmp	r3, #52	; 0x34
				settings.syncWord = 0x33;
 80028ea:	bf08      	it	eq
 80028ec:	2333      	moveq	r3, #51	; 0x33
 80028ee:	7453      	strb	r3, [r2, #17]
 80028f0:	e759      	b.n	80027a6 <button_left+0x76>
			if (settings.bw > 1)
 80028f2:	4c36      	ldr	r4, [pc, #216]	; (80029cc <button_left+0x29c>)
 80028f4:	7be1      	ldrb	r1, [r4, #15]
 80028f6:	2901      	cmp	r1, #1
 80028f8:	d902      	bls.n	8002900 <button_left+0x1d0>
				settings.bw--;
 80028fa:	3901      	subs	r1, #1
 80028fc:	b2c9      	uxtb	r1, r1
 80028fe:	73e1      	strb	r1, [r4, #15]
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002900:	4b34      	ldr	r3, [pc, #208]	; (80029d4 <button_left+0x2a4>)
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002902:	6826      	ldr	r6, [r4, #0]
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002904:	781d      	ldrb	r5, [r3, #0]
 8002906:	b1c5      	cbz	r5, 800293a <button_left+0x20a>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 8002908:	2200      	movs	r2, #0
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 800290a:	4838      	ldr	r0, [pc, #224]	; (80029ec <button_left+0x2bc>)
 800290c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8002910:	eba6 0051 	sub.w	r0, r6, r1, lsr #1
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 8002914:	eb06 0651 	add.w	r6, r6, r1, lsr #1
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 8002918:	6859      	ldr	r1, [r3, #4]
 800291a:	4288      	cmp	r0, r1
 800291c:	d307      	bcc.n	800292e <button_left+0x1fe>
 800291e:	689c      	ldr	r4, [r3, #8]
 8002920:	42a0      	cmp	r0, r4
 8002922:	d804      	bhi.n	800292e <button_left+0x1fe>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 8002924:	42b1      	cmp	r1, r6
 8002926:	d802      	bhi.n	800292e <button_left+0x1fe>
 8002928:	42b4      	cmp	r4, r6
 800292a:	f080 80ae 	bcs.w	8002a8a <button_left+0x35a>
 800292e:	3201      	adds	r2, #1
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002930:	b2d1      	uxtb	r1, r2
 8002932:	428d      	cmp	r5, r1
 8002934:	f103 030c 	add.w	r3, r3, #12
 8002938:	d8ee      	bhi.n	8002918 <button_left+0x1e8>
 800293a:	f04f 32ff 	mov.w	r2, #4294967295
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <button_left+0x2a0>)
 8002940:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002942:	e73f      	b.n	80027c4 <button_left+0x94>
			if (settings.sf > 7)
 8002944:	4a21      	ldr	r2, [pc, #132]	; (80029cc <button_left+0x29c>)
 8002946:	7b93      	ldrb	r3, [r2, #14]
 8002948:	2b07      	cmp	r3, #7
 800294a:	f67f af2c 	bls.w	80027a6 <button_left+0x76>
				settings.sf--;
 800294e:	3b01      	subs	r3, #1
 8002950:	7393      	strb	r3, [r2, #14]
 8002952:	e728      	b.n	80027a6 <button_left+0x76>
			if (settings.realFrequency > MIN_FREQUENCY)
 8002954:	4c1d      	ldr	r4, [pc, #116]	; (80029cc <button_left+0x29c>)
 8002956:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <button_left+0x2c0>)
 8002958:	6820      	ldr	r0, [r4, #0]
 800295a:	4298      	cmp	r0, r3
 800295c:	d903      	bls.n	8002966 <button_left+0x236>
				settings.realFrequency -= 50000;
 800295e:	f5a0 4043 	sub.w	r0, r0, #49920	; 0xc300
 8002962:	3850      	subs	r0, #80	; 0x50
 8002964:	6020      	str	r0, [r4, #0]
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002966:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <button_left+0x2a4>)
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002968:	7be5      	ldrb	r5, [r4, #15]
	for (i = 0; i < legalFreq.intervalCount; i++)
 800296a:	781f      	ldrb	r7, [r3, #0]
 800296c:	b1c7      	cbz	r7, 80029a0 <button_left+0x270>
 800296e:	461a      	mov	r2, r3
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 8002970:	2100      	movs	r1, #0
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 8002972:	4e1e      	ldr	r6, [pc, #120]	; (80029ec <button_left+0x2bc>)
 8002974:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8002978:	eba0 0556 	sub.w	r5, r0, r6, lsr #1
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 800297c:	eb00 0c56 	add.w	ip, r0, r6, lsr #1
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 8002980:	6850      	ldr	r0, [r2, #4]
 8002982:	4285      	cmp	r5, r0
 8002984:	d306      	bcc.n	8002994 <button_left+0x264>
 8002986:	6896      	ldr	r6, [r2, #8]
 8002988:	42b5      	cmp	r5, r6
 800298a:	d803      	bhi.n	8002994 <button_left+0x264>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 800298c:	4560      	cmp	r0, ip
 800298e:	d801      	bhi.n	8002994 <button_left+0x264>
 8002990:	4566      	cmp	r6, ip
 8002992:	d265      	bcs.n	8002a60 <button_left+0x330>
 8002994:	3101      	adds	r1, #1
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002996:	b2c8      	uxtb	r0, r1
 8002998:	42b8      	cmp	r0, r7
 800299a:	f102 020c 	add.w	r2, r2, #12
 800299e:	d3ef      	bcc.n	8002980 <button_left+0x250>
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	e7cc      	b.n	800293e <button_left+0x20e>
			menuPosition = (menuPosition < 1) ? 6 : menuPosition - 1;
 80029a4:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <button_left+0x2ac>)
 80029a6:	f993 2000 	ldrsb.w	r2, [r3]
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	f73f af07 	bgt.w	80027be <button_left+0x8e>
 80029b0:	2206      	movs	r2, #6
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80029b2:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80029b4:	e706      	b.n	80027c4 <button_left+0x94>
			selectedMode--;
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <button_left+0x2c4>)
 80029b8:	7813      	ldrb	r3, [r2, #0]
 80029ba:	3b01      	subs	r3, #1
			if (selectedMode <= work)
 80029bc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
				selectedMode = testSignal;
 80029c0:	bf08      	it	eq
 80029c2:	2305      	moveq	r3, #5
 80029c4:	7013      	strb	r3, [r2, #0]
 80029c6:	e6ee      	b.n	80027a6 <button_left+0x76>
 80029c8:	200000ee 	.word	0x200000ee
 80029cc:	20000a00 	.word	0x20000a00
 80029d0:	20001588 	.word	0x20001588
 80029d4:	20000b5c 	.word	0x20000b5c
 80029d8:	20000adc 	.word	0x20000adc
 80029dc:	200000db 	.word	0x200000db
 80029e0:	200000b2 	.word	0x200000b2
 80029e4:	200000f0 	.word	0x200000f0
 80029e8:	20000c04 	.word	0x20000c04
 80029ec:	0800b974 	.word	0x0800b974
 80029f0:	0839b680 	.word	0x0839b680
 80029f4:	200000ef 	.word	0x200000ef
			menuPosition = (menuPosition < 1) ? 1 : menuPosition - 1;
 80029f8:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <button_left+0x360>)
 80029fa:	f993 2000 	ldrsb.w	r2, [r3]
 80029fe:	2a00      	cmp	r2, #0
 8002a00:	f73f aedd 	bgt.w	80027be <button_left+0x8e>
 8002a04:	2201      	movs	r2, #1
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002a06:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002a08:	e6dc      	b.n	80027c4 <button_left+0x94>
			lastNodeChangeTick = HAL_GetTick ();
 8002a0a:	f004 fba7 	bl	800715c <HAL_GetTick>
			selectedNode--;
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <button_left+0x364>)
			lastNodeChangeTick = HAL_GetTick ();
 8002a10:	4921      	ldr	r1, [pc, #132]	; (8002a98 <button_left+0x368>)
			selectedNode--;
 8002a12:	8813      	ldrh	r3, [r2, #0]
			lastNodeChangeTick = HAL_GetTick ();
 8002a14:	6008      	str	r0, [r1, #0]
			selectedNode--;
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b21b      	sxth	r3, r3
			if (selectedNode < 0)
 8002a1a:	2b00      	cmp	r3, #0
			selectedNode--;
 8002a1c:	8013      	strh	r3, [r2, #0]
			if (selectedNode < 0)
 8002a1e:	f6bf aee8 	bge.w	80027f2 <button_left+0xc2>
				selectedNode = MAX_NODES - 1;
 8002a22:	2107      	movs	r1, #7
 8002a24:	7823      	ldrb	r3, [r4, #0]
 8002a26:	8011      	strh	r1, [r2, #0]
	if (screenMode != smRegular)
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f43f aee5 	beq.w	80027f8 <button_left+0xc8>
 8002a2e:	e6ba      	b.n	80027a6 <button_left+0x76>
			menuPosition = (menuPosition < 1) ? 2 : menuPosition - 1;
 8002a30:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <button_left+0x360>)
 8002a32:	f993 2000 	ldrsb.w	r2, [r3]
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	f73f aec1 	bgt.w	80027be <button_left+0x8e>
 8002a3c:	2202      	movs	r2, #2
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002a3e:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002a40:	e6c0      	b.n	80027c4 <button_left+0x94>
			screenMode = smMessageCounter;
 8002a42:	231b      	movs	r3, #27
 8002a44:	7023      	strb	r3, [r4, #0]
			break;
 8002a46:	e6ae      	b.n	80027a6 <button_left+0x76>
			menuPosition = (menuPosition < 1) ? 3 : menuPosition - 1;
 8002a48:	4b11      	ldr	r3, [pc, #68]	; (8002a90 <button_left+0x360>)
 8002a4a:	f993 2000 	ldrsb.w	r2, [r3]
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	f73f aeb5 	bgt.w	80027be <button_left+0x8e>
 8002a54:	2203      	movs	r2, #3
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002a56:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002a58:	e6b4      	b.n	80027c4 <button_left+0x94>
			menuPosition = (menuPosition < 1) ? 5 : menuPosition - 1;
 8002a5a:	2205      	movs	r2, #5
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002a5c:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002a5e:	e6b1      	b.n	80027c4 <button_left+0x94>
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002a60:	b249      	sxtb	r1, r1
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002a62:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002a66:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002a6a:	7b1b      	ldrb	r3, [r3, #12]
 8002a6c:	7ca2      	ldrb	r2, [r4, #18]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002a6e:	480b      	ldr	r0, [pc, #44]	; (8002a9c <button_left+0x36c>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002a70:	429a      	cmp	r2, r3
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002a72:	7001      	strb	r1, [r0, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8002a74:	f67f ae97 	bls.w	80027a6 <button_left+0x76>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 8002a78:	74a3      	strb	r3, [r4, #18]
 8002a7a:	e694      	b.n	80027a6 <button_left+0x76>
				settings.baseID = 0;
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	7823      	ldrb	r3, [r4, #0]
 8002a80:	6651      	str	r1, [r2, #100]	; 0x64
	if (screenMode != smRegular)
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f43f aeb8 	beq.w	80027f8 <button_left+0xc8>
 8002a88:	e68d      	b.n	80027a6 <button_left+0x76>
 8002a8a:	b252      	sxtb	r2, r2
 8002a8c:	e757      	b.n	800293e <button_left+0x20e>
 8002a8e:	bf00      	nop
 8002a90:	200000db 	.word	0x200000db
 8002a94:	200000f2 	.word	0x200000f2
 8002a98:	200000bc 	.word	0x200000bc
 8002a9c:	20001588 	.word	0x20001588

08002aa0 <button_back>:
	menuPosition = 0;
 8002aa0:	2300      	movs	r3, #0
{
 8002aa2:	b410      	push	{r4}
	switch (screenMode)
 8002aa4:	4824      	ldr	r0, [pc, #144]	; (8002b38 <button_back+0x98>)
		nodes[i].alarm = 0;
 8002aa6:	4a25      	ldr	r2, [pc, #148]	; (8002b3c <button_back+0x9c>)
	menuPosition = 0;
 8002aa8:	4c25      	ldr	r4, [pc, #148]	; (8002b40 <button_back+0xa0>)
	switch (screenMode)
 8002aaa:	7801      	ldrb	r1, [r0, #0]
	menuPosition = 0;
 8002aac:	7023      	strb	r3, [r4, #0]
		nodes[i].alarm = 0;
 8002aae:	7493      	strb	r3, [r2, #18]
 8002ab0:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
 8002ab4:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
 8002ab8:	f882 3072 	strb.w	r3, [r2, #114]	; 0x72
 8002abc:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
 8002ac0:	f882 30b2 	strb.w	r3, [r2, #178]	; 0xb2
 8002ac4:	f882 30d2 	strb.w	r3, [r2, #210]	; 0xd2
 8002ac8:	f882 30f2 	strb.w	r3, [r2, #242]	; 0xf2
	switch (screenMode)
 8002acc:	291d      	cmp	r1, #29
 8002ace:	d82f      	bhi.n	8002b30 <button_back+0x90>
 8002ad0:	e8df f001 	tbb	[pc, r1]
 8002ad4:	1c1c2b15 	.word	0x1c1c2b15
 8002ad8:	1f1f1c1c 	.word	0x1f1f1c1c
 8002adc:	1f1f1f1f 	.word	0x1f1f1f1f
 8002ae0:	2228281f 	.word	0x2228281f
 8002ae4:	25252222 	.word	0x25252222
 8002ae8:	0f0f0f0f 	.word	0x0f0f0f0f
 8002aec:	1c1c1c1c 	.word	0x1c1c1c1c
 8002af0:	152b      	.short	0x152b
			if (cursorPos)
 8002af2:	4a14      	ldr	r2, [pc, #80]	; (8002b44 <button_back+0xa4>)
 8002af4:	f992 3000 	ldrsb.w	r3, [r2]
 8002af8:	b18b      	cbz	r3, 8002b1e <button_back+0x7e>
				cursorPos--;
 8002afa:	3b01      	subs	r3, #1
 8002afc:	7013      	strb	r3, [r2, #0]
	flag.lcdRefreshRequest = 1;
 8002afe:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <button_back+0xa8>)
}
 8002b00:	bc10      	pop	{r4}
	flag.lcdRefreshRequest = 1;
 8002b02:	7813      	ldrb	r3, [r2, #0]
 8002b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b08:	7013      	strb	r3, [r2, #0]
}
 8002b0a:	4770      	bx	lr
			screenMode = smMainMenu;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	7003      	strb	r3, [r0, #0]
			break;
 8002b10:	e7f5      	b.n	8002afe <button_back+0x5e>
			screenMode = smRadioMenu;
 8002b12:	2302      	movs	r3, #2
 8002b14:	7003      	strb	r3, [r0, #0]
			break;
 8002b16:	e7f2      	b.n	8002afe <button_back+0x5e>
			screenMode = smNodeMenu;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	7003      	strb	r3, [r0, #0]
			break;
 8002b1c:	e7ef      	b.n	8002afe <button_back+0x5e>
				screenMode = smNetworkMenu;
 8002b1e:	2305      	movs	r3, #5
 8002b20:	7003      	strb	r3, [r0, #0]
 8002b22:	e7ec      	b.n	8002afe <button_back+0x5e>
			screenMode = smBaseMenu;
 8002b24:	2303      	movs	r3, #3
 8002b26:	7003      	strb	r3, [r0, #0]
			break;
 8002b28:	e7e9      	b.n	8002afe <button_back+0x5e>
			screenMode = smRegular;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	7003      	strb	r3, [r0, #0]
			break;
 8002b2e:	e7e6      	b.n	8002afe <button_back+0x5e>
			screenMode--;
 8002b30:	3901      	subs	r1, #1
 8002b32:	7001      	strb	r1, [r0, #0]
 8002b34:	e7e3      	b.n	8002afe <button_back+0x5e>
 8002b36:	bf00      	nop
 8002b38:	200000ee 	.word	0x200000ee
 8002b3c:	20000c78 	.word	0x20000c78
 8002b40:	200000db 	.word	0x200000db
 8002b44:	200000b2 	.word	0x200000b2
 8002b48:	20000adc 	.word	0x20000adc

08002b4c <lcdRoutine>:
{
 8002b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b50:	b082      	sub	sp, #8
	clearStrings ();
 8002b52:	f7fe fae5 	bl	8001120 <clearStrings>
	switch (screenMode)
 8002b56:	4bac      	ldr	r3, [pc, #688]	; (8002e08 <lcdRoutine+0x2bc>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b1d      	cmp	r3, #29
 8002b5c:	d847      	bhi.n	8002bee <lcdRoutine+0xa2>
 8002b5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002b62:	04db      	.short	0x04db
 8002b64:	04050455 	.word	0x04050455
 8002b68:	056203e6 	.word	0x056203e6
 8002b6c:	02c2036f 	.word	0x02c2036f
 8002b70:	03c102ac 	.word	0x03c102ac
 8002b74:	03d703b4 	.word	0x03d703b4
 8002b78:	00d50104 	.word	0x00d50104
 8002b7c:	00b700cf 	.word	0x00b700cf
 8002b80:	020300a7 	.word	0x020300a7
 8002b84:	01db01f6 	.word	0x01db01f6
 8002b88:	019d01c1 	.word	0x019d01c1
 8002b8c:	001e012e 	.word	0x001e012e
 8002b90:	029b0111 	.word	0x029b0111
 8002b94:	028c0216 	.word	0x028c0216
 8002b98:	007b0098 	.word	0x007b0098
 8002b9c:	006d      	.short	0x006d
			sprintf (string[0], "Set Host");
 8002b9e:	4c9b      	ldr	r4, [pc, #620]	; (8002e0c <lcdRoutine+0x2c0>)
 8002ba0:	4a9b      	ldr	r2, [pc, #620]	; (8002e10 <lcdRoutine+0x2c4>)
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ba6:	c303      	stmia	r3!, {r0, r1}
			sprintf (string[1], settings.host);
 8002ba8:	499a      	ldr	r1, [pc, #616]	; (8002e14 <lcdRoutine+0x2c8>)
			sprintf (string[0], "Set Host");
 8002baa:	701a      	strb	r2, [r3, #0]
			sprintf (string[1], settings.host);
 8002bac:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002bb0:	f007 fd8e 	bl	800a6d0 <siprintf>
			setCursor (string[2], cursorPos);
 8002bb4:	4b98      	ldr	r3, [pc, #608]	; (8002e18 <lcdRoutine+0x2cc>)
 8002bb6:	f993 5000 	ldrsb.w	r5, [r3]
	for (int i = 0; i < pos; i++)
 8002bba:	2d00      	cmp	r5, #0
 8002bbc:	dd05      	ble.n	8002bca <lcdRoutine+0x7e>
 8002bbe:	462a      	mov	r2, r5
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002bc6:	f007 fd7b 	bl	800a6c0 <memset>
	string[pos] = '^';
 8002bca:	215e      	movs	r1, #94	; 0x5e
			if (settings.host[cursorPos] == ' ' || settings.host[cursorPos] == '\0')
 8002bcc:	4b93      	ldr	r3, [pc, #588]	; (8002e1c <lcdRoutine+0x2d0>)
	string[pos] = '^';
 8002bce:	1962      	adds	r2, r4, r5
			if (settings.host[cursorPos] == ' ' || settings.host[cursorPos] == '\0')
 8002bd0:	441d      	add	r5, r3
 8002bd2:	f895 3043 	ldrb.w	r3, [r5, #67]	; 0x43
	string[pos] = '^';
 8002bd6:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
			if (settings.host[cursorPos] == ' ' || settings.host[cursorPos] == '\0')
 8002bda:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8002bde:	d106      	bne.n	8002bee <lcdRoutine+0xa2>
				sprintf (string[3], "Done");
 8002be0:	4b8f      	ldr	r3, [pc, #572]	; (8002e20 <lcdRoutine+0x2d4>)
 8002be2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002be6:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8002bea:	f884 10c4 	strb.w	r1, [r4, #196]	; 0xc4
	ssd1306_Clean ();
 8002bee:	4d87      	ldr	r5, [pc, #540]	; (8002e0c <lcdRoutine+0x2c0>)
 8002bf0:	f002 fe3a 	bl	8005868 <ssd1306_Clean>
 8002bf4:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 8002bf6:	2400      	movs	r4, #0
			ssd1306_GotoXY (0, i);
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f002 fdf6 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8002c00:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 8002c02:	4630      	mov	r0, r6
 8002c04:	f002 fdfa 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8002c08:	2c08      	cmp	r4, #8
 8002c0a:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8002c0e:	d1f3      	bne.n	8002bf8 <lcdRoutine+0xac>
	ssd1306_Update ();
 8002c10:	f002 fe32 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8002c14:	2400      	movs	r4, #0
	UC1609_Clean ();
 8002c16:	f7fd ff8d 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8002c1a:	b2e1      	uxtb	r1, r4
 8002c1c:	2000      	movs	r0, #0
 8002c1e:	f7fd fedf 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8002c22:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8002c24:	4628      	mov	r0, r5
 8002c26:	f7fd ff8d 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8002c2a:	2c08      	cmp	r4, #8
 8002c2c:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8002c30:	d1f3      	bne.n	8002c1a <lcdRoutine+0xce>
}
 8002c32:	b002      	add	sp, #8
 8002c34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	UC1609_UpdateScreen ();
 8002c38:	f7fd bede 	b.w	80009f8 <UC1609_UpdateScreen>
			clearStrings ();
 8002c3c:	f7fe fa70 	bl	8001120 <clearStrings>
			switch (selectedMode)
 8002c40:	4b78      	ldr	r3, [pc, #480]	; (8002e24 <lcdRoutine+0x2d8>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b05      	cmp	r3, #5
 8002c46:	d8d2      	bhi.n	8002bee <lcdRoutine+0xa2>
 8002c48:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c4c:	056c0576 	.word	0x056c0576
 8002c50:	055d0564 	.word	0x055d0564
 8002c54:	054c0556 	.word	0x054c0556
			sprintf (string[0], "   Node Actions:");
 8002c58:	4c6c      	ldr	r4, [pc, #432]	; (8002e0c <lcdRoutine+0x2c0>)
			switch (nodes[selectedNode].masked)
 8002c5a:	4f73      	ldr	r7, [pc, #460]	; (8002e28 <lcdRoutine+0x2dc>)
			sprintf (string[0], "   Node Actions:");
 8002c5c:	4625      	mov	r5, r4
 8002c5e:	4e73      	ldr	r6, [pc, #460]	; (8002e2c <lcdRoutine+0x2e0>)
 8002c60:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			switch (nodes[selectedNode].masked)
 8002c64:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c68:	4f71      	ldr	r7, [pc, #452]	; (8002e30 <lcdRoutine+0x2e4>)
			sprintf (string[0], "   Node Actions:");
 8002c6a:	6830      	ldr	r0, [r6, #0]
			switch (nodes[selectedNode].masked)
 8002c6c:	eb07 1243 	add.w	r2, r7, r3, lsl #5
			sprintf (string[1], " Ping");
 8002c70:	4970      	ldr	r1, [pc, #448]	; (8002e34 <lcdRoutine+0x2e8>)
 8002c72:	7b12      	ldrb	r2, [r2, #12]
			sprintf (string[0], "   Node Actions:");
 8002c74:	7028      	strb	r0, [r5, #0]
			sprintf (string[1], " Ping");
 8002c76:	c903      	ldmia	r1, {r0, r1}
			switch (nodes[selectedNode].masked)
 8002c78:	015d      	lsls	r5, r3, #5
			sprintf (string[1], " Ping");
 8002c7a:	6420      	str	r0, [r4, #64]	; 0x40
 8002c7c:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
			switch (nodes[selectedNode].masked)
 8002c80:	2a03      	cmp	r2, #3
 8002c82:	f200 8502 	bhi.w	800368a <lcdRoutine+0xb3e>
 8002c86:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002c8a:	0520      	.short	0x0520
 8002c8c:	051a052a 	.word	0x051a052a
 8002c90:	04f8      	.short	0x04f8
			sprintf (string[0], "Total received:");
 8002c92:	4c5e      	ldr	r4, [pc, #376]	; (8002e0c <lcdRoutine+0x2c0>)
			sprintf (string[1], "%lu/%lu", receMesCntSuc, receivedMesCnt);
 8002c94:	4e68      	ldr	r6, [pc, #416]	; (8002e38 <lcdRoutine+0x2ec>)
 8002c96:	4d69      	ldr	r5, [pc, #420]	; (8002e3c <lcdRoutine+0x2f0>)
			sprintf (string[0], "Total received:");
 8002c98:	4b69      	ldr	r3, [pc, #420]	; (8002e40 <lcdRoutine+0x2f4>)
 8002c9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			sprintf (string[1], "%lu/%lu", receMesCntSuc, receivedMesCnt);
 8002ca0:	6833      	ldr	r3, [r6, #0]
 8002ca2:	682a      	ldr	r2, [r5, #0]
 8002ca4:	4967      	ldr	r1, [pc, #412]	; (8002e44 <lcdRoutine+0x2f8>)
 8002ca6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002caa:	f007 fd11 	bl	800a6d0 <siprintf>
			break;
 8002cae:	e79e      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Send every");
 8002cb0:	4a65      	ldr	r2, [pc, #404]	; (8002e48 <lcdRoutine+0x2fc>)
 8002cb2:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <lcdRoutine+0x2c0>)
 8002cb4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002cb6:	c303      	stmia	r3!, {r0, r1}
 8002cb8:	f823 2b02 	strh.w	r2, [r3], #2
 8002cbc:	4618      	mov	r0, r3
			sprintf (string[1], "%lu s", nodeSettings.workInterval);
 8002cbe:	4b63      	ldr	r3, [pc, #396]	; (8002e4c <lcdRoutine+0x300>)
			sprintf (string[0], "Send every");
 8002cc0:	0c12      	lsrs	r2, r2, #16
			sprintf (string[1], "%lu s", nodeSettings.workInterval);
 8002cc2:	4963      	ldr	r1, [pc, #396]	; (8002e50 <lcdRoutine+0x304>)
			sprintf (string[0], "Send every");
 8002cc4:	f800 2b36 	strb.w	r2, [r0], #54
			sprintf (string[1], "%lu s", nodeSettings.workInterval);
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	f007 fd01 	bl	800a6d0 <siprintf>
			break;
 8002cce:	e78e      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8002cd0:	4b52      	ldr	r3, [pc, #328]	; (8002e1c <lcdRoutine+0x2d0>)
			sprintf (string[0], "Level 2");
 8002cd2:	4c4e      	ldr	r4, [pc, #312]	; (8002e0c <lcdRoutine+0x2c0>)
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8002cd4:	689e      	ldr	r6, [r3, #8]
			sprintf (string[0], "Level 2");
 8002cd6:	4a5f      	ldr	r2, [pc, #380]	; (8002e54 <lcdRoutine+0x308>)
			sprintf (string[1], "Silence alarm");
 8002cd8:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <lcdRoutine+0x30c>)
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8002cda:	4960      	ldr	r1, [pc, #384]	; (8002e5c <lcdRoutine+0x310>)
			sprintf (string[1], "Silence alarm");
 8002cdc:	f104 0540 	add.w	r5, r4, #64	; 0x40
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8002ce0:	fba1 1606 	umull	r1, r6, r1, r6
			sprintf (string[0], "Level 2");
 8002ce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ce8:	e884 0003 	stmia.w	r4, {r0, r1}
			sprintf (string[1], "Silence alarm");
 8002cec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cee:	c507      	stmia	r5!, {r0, r1, r2}
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8002cf0:	4957      	ldr	r1, [pc, #348]	; (8002e50 <lcdRoutine+0x304>)
 8002cf2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002cf6:	09b2      	lsrs	r2, r6, #6
			sprintf (string[1], "Silence alarm");
 8002cf8:	802b      	strh	r3, [r5, #0]
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8002cfa:	f007 fce9 	bl	800a6d0 <siprintf>
			break;
 8002cfe:	e776      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[2], "%lu s", settings.warningDelay / 1000);
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <lcdRoutine+0x2d0>)
			sprintf (string[0], "Level 1");
 8002d02:	4c42      	ldr	r4, [pc, #264]	; (8002e0c <lcdRoutine+0x2c0>)
			sprintf (string[2], "%lu s", settings.warningDelay / 1000);
 8002d04:	685e      	ldr	r6, [r3, #4]
			sprintf (string[0], "Level 1");
 8002d06:	4a56      	ldr	r2, [pc, #344]	; (8002e60 <lcdRoutine+0x314>)
			sprintf (string[1], "Silence Alarm");
 8002d08:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <lcdRoutine+0x318>)
 8002d0a:	e7e6      	b.n	8002cda <lcdRoutine+0x18e>
			sprintf (string[0], "Transmission power");
 8002d0c:	4d56      	ldr	r5, [pc, #344]	; (8002e68 <lcdRoutine+0x31c>)
 8002d0e:	4c3f      	ldr	r4, [pc, #252]	; (8002e0c <lcdRoutine+0x2c0>)
 8002d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d14:	682b      	ldr	r3, [r5, #0]
			sprintf (string[1], "%d dBm (%d mW)", settings.power, mW[settings.power - 10]);
 8002d16:	4a41      	ldr	r2, [pc, #260]	; (8002e1c <lcdRoutine+0x2d0>)
			sprintf (string[0], "Transmission power");
 8002d18:	f824 3b02 	strh.w	r3, [r4], #2
 8002d1c:	4620      	mov	r0, r4
			sprintf (string[1], "%d dBm (%d mW)", settings.power, mW[settings.power - 10]);
 8002d1e:	7c92      	ldrb	r2, [r2, #18]
 8002d20:	4952      	ldr	r1, [pc, #328]	; (8002e6c <lcdRoutine+0x320>)
			sprintf (string[0], "Transmission power");
 8002d22:	0c1b      	lsrs	r3, r3, #16
			sprintf (string[1], "%d dBm (%d mW)", settings.power, mW[settings.power - 10]);
 8002d24:	4411      	add	r1, r2
			sprintf (string[0], "Transmission power");
 8002d26:	f800 3b2e 	strb.w	r3, [r0], #46
			sprintf (string[1], "%d dBm (%d mW)", settings.power, mW[settings.power - 10]);
 8002d2a:	f811 3c0a 	ldrb.w	r3, [r1, #-10]
 8002d2e:	4950      	ldr	r1, [pc, #320]	; (8002e70 <lcdRoutine+0x324>)
 8002d30:	f007 fcce 	bl	800a6d0 <siprintf>
			if (currentInterval != BAD_INTERVAL)
 8002d34:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <lcdRoutine+0x328>)
 8002d36:	f993 6000 	ldrsb.w	r6, [r3]
 8002d3a:	1c73      	adds	r3, r6, #1
 8002d3c:	f000 85f1 	beq.w	8003922 <lcdRoutine+0xdd6>
					sprintf (string[2], "For this frequency");
 8002d40:	4d4d      	ldr	r5, [pc, #308]	; (8002e78 <lcdRoutine+0x32c>)
 8002d42:	346e      	adds	r4, #110	; 0x6e
 8002d44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d48:	682b      	ldr	r3, [r5, #0]
					sprintf (string[3], "Max:%d dBm", legalFreq.interval[currentInterval].maxPower);
 8002d4a:	4a4c      	ldr	r2, [pc, #304]	; (8002e7c <lcdRoutine+0x330>)
					sprintf (string[2], "For this frequency");
 8002d4c:	f824 3b02 	strh.w	r3, [r4], #2
 8002d50:	4620      	mov	r0, r4
					sprintf (string[3], "Max:%d dBm", legalFreq.interval[currentInterval].maxPower);
 8002d52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
					sprintf (string[2], "For this frequency");
 8002d56:	0c1b      	lsrs	r3, r3, #16
					sprintf (string[3], "Max:%d dBm", legalFreq.interval[currentInterval].maxPower);
 8002d58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8002d5c:	7b32      	ldrb	r2, [r6, #12]
 8002d5e:	4948      	ldr	r1, [pc, #288]	; (8002e80 <lcdRoutine+0x334>)
					sprintf (string[2], "For this frequency");
 8002d60:	f800 3b2e 	strb.w	r3, [r0], #46
					sprintf (string[3], "Max:%d dBm", legalFreq.interval[currentInterval].maxPower);
 8002d64:	f007 fcb4 	bl	800a6d0 <siprintf>
 8002d68:	e741      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Preamble");
 8002d6a:	4a46      	ldr	r2, [pc, #280]	; (8002e84 <lcdRoutine+0x338>)
 8002d6c:	4b27      	ldr	r3, [pc, #156]	; (8002e0c <lcdRoutine+0x2c0>)
 8002d6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002d70:	c303      	stmia	r3!, {r0, r1}
 8002d72:	4618      	mov	r0, r3
			sprintf (string[1], "%d sym", settings.preamble);
 8002d74:	4b29      	ldr	r3, [pc, #164]	; (8002e1c <lcdRoutine+0x2d0>)
 8002d76:	4944      	ldr	r1, [pc, #272]	; (8002e88 <lcdRoutine+0x33c>)
			sprintf (string[0], "Preamble");
 8002d78:	f800 2b38 	strb.w	r2, [r0], #56
			sprintf (string[1], "%d sym", settings.preamble);
 8002d7c:	899a      	ldrh	r2, [r3, #12]
 8002d7e:	f007 fca7 	bl	800a6d0 <siprintf>
			break;
 8002d82:	e734      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Set Base ID");
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <lcdRoutine+0x340>)
 8002d86:	4c21      	ldr	r4, [pc, #132]	; (8002e0c <lcdRoutine+0x2c0>)
			sprintf (string[1], "%07lu", settings.baseID);
 8002d88:	4d24      	ldr	r5, [pc, #144]	; (8002e1c <lcdRoutine+0x2d0>)
			sprintf (string[0], "Set Base ID");
 8002d8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			sprintf (string[1], "%07lu", settings.baseID);
 8002d92:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 8002d94:	493e      	ldr	r1, [pc, #248]	; (8002e90 <lcdRoutine+0x344>)
 8002d96:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002d9a:	f007 fc99 	bl	800a6d0 <siprintf>
			setCursor (string[2], cursorPos);
 8002d9e:	4b1e      	ldr	r3, [pc, #120]	; (8002e18 <lcdRoutine+0x2cc>)
 8002da0:	f993 5000 	ldrsb.w	r5, [r3]
	for (int i = 0; i < pos; i++)
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	dd05      	ble.n	8002db4 <lcdRoutine+0x268>
 8002da8:	462a      	mov	r2, r5
 8002daa:	2120      	movs	r1, #32
 8002dac:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002db0:	f007 fc86 	bl	800a6c0 <memset>
	string[pos] = '^';
 8002db4:	235e      	movs	r3, #94	; 0x5e
 8002db6:	442c      	add	r4, r5
 8002db8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8002dbc:	e717      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Set Server password");
 8002dbe:	4c13      	ldr	r4, [pc, #76]	; (8002e0c <lcdRoutine+0x2c0>)
 8002dc0:	4e34      	ldr	r6, [pc, #208]	; (8002e94 <lcdRoutine+0x348>)
 8002dc2:	4625      	mov	r5, r4
 8002dc4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002dc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc8:	6833      	ldr	r3, [r6, #0]
			sprintf (string[1], settings.ServerPass);
 8002dca:	4933      	ldr	r1, [pc, #204]	; (8002e98 <lcdRoutine+0x34c>)
			sprintf (string[0], "Set Server password");
 8002dcc:	602b      	str	r3, [r5, #0]
			sprintf (string[1], settings.ServerPass);
 8002dce:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002dd2:	f007 fc7d 	bl	800a6d0 <siprintf>
			setCursor (string[2], cursorPos);
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <lcdRoutine+0x2cc>)
 8002dd8:	f993 5000 	ldrsb.w	r5, [r3]
	for (int i = 0; i < pos; i++)
 8002ddc:	2d00      	cmp	r5, #0
 8002dde:	dd05      	ble.n	8002dec <lcdRoutine+0x2a0>
 8002de0:	462a      	mov	r2, r5
 8002de2:	2120      	movs	r1, #32
 8002de4:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002de8:	f007 fc6a 	bl	800a6c0 <memset>
	string[pos] = '^';
 8002dec:	215e      	movs	r1, #94	; 0x5e
			if (settings.ServerPass[cursorPos] == ' ' || settings.ServerPass[cursorPos] == '\0')
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <lcdRoutine+0x2d0>)
	string[pos] = '^';
 8002df0:	1962      	adds	r2, r4, r5
			if (settings.ServerPass[cursorPos] == ' ' || settings.ServerPass[cursorPos] == '\0')
 8002df2:	441d      	add	r5, r3
 8002df4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	string[pos] = '^';
 8002df8:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
			if (settings.ServerPass[cursorPos] == ' ' || settings.ServerPass[cursorPos] == '\0')
 8002dfc:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8002e00:	f43f aeee 	beq.w	8002be0 <lcdRoutine+0x94>
 8002e04:	e6f3      	b.n	8002bee <lcdRoutine+0xa2>
 8002e06:	bf00      	nop
 8002e08:	200000ee 	.word	0x200000ee
 8002e0c:	200000f4 	.word	0x200000f4
 8002e10:	0800b678 	.word	0x0800b678
 8002e14:	20000a43 	.word	0x20000a43
 8002e18:	200000b2 	.word	0x200000b2
 8002e1c:	20000a00 	.word	0x20000a00
 8002e20:	0800b65c 	.word	0x0800b65c
 8002e24:	200000ef 	.word	0x200000ef
 8002e28:	200000f2 	.word	0x200000f2
 8002e2c:	0800b764 	.word	0x0800b764
 8002e30:	20000c78 	.word	0x20000c78
 8002e34:	0800b778 	.word	0x0800b778
 8002e38:	200000e4 	.word	0x200000e4
 8002e3c:	200000e0 	.word	0x200000e0
 8002e40:	0800b6b8 	.word	0x0800b6b8
 8002e44:	0800b6c8 	.word	0x0800b6c8
 8002e48:	0800b5bc 	.word	0x0800b5bc
 8002e4c:	20000c04 	.word	0x20000c04
 8002e50:	0800b59c 	.word	0x0800b59c
 8002e54:	0800b5a4 	.word	0x0800b5a4
 8002e58:	0800b5ac 	.word	0x0800b5ac
 8002e5c:	10624dd3 	.word	0x10624dd3
 8002e60:	0800b584 	.word	0x0800b584
 8002e64:	0800b58c 	.word	0x0800b58c
 8002e68:	0800b52c 	.word	0x0800b52c
 8002e6c:	20000008 	.word	0x20000008
 8002e70:	0800b540 	.word	0x0800b540
 8002e74:	20001588 	.word	0x20001588
 8002e78:	0800b550 	.word	0x0800b550
 8002e7c:	20000b5c 	.word	0x20000b5c
 8002e80:	0800b564 	.word	0x0800b564
 8002e84:	0800b518 	.word	0x0800b518
 8002e88:	0800b524 	.word	0x0800b524
 8002e8c:	0800b684 	.word	0x0800b684
 8002e90:	0800b690 	.word	0x0800b690
 8002e94:	0800b664 	.word	0x0800b664
 8002e98:	20000a33 	.word	0x20000a33
			sprintf (string[0], "Set WiFi password");
 8002e9c:	4cb3      	ldr	r4, [pc, #716]	; (800316c <lcdRoutine+0x620>)
 8002e9e:	4eb4      	ldr	r6, [pc, #720]	; (8003170 <lcdRoutine+0x624>)
 8002ea0:	4625      	mov	r5, r4
 8002ea2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ea6:	6833      	ldr	r3, [r6, #0]
			sprintf (string[1], settings.WiFiPass);
 8002ea8:	49b2      	ldr	r1, [pc, #712]	; (8003174 <lcdRoutine+0x628>)
			sprintf (string[0], "Set WiFi password");
 8002eaa:	802b      	strh	r3, [r5, #0]
			sprintf (string[1], settings.WiFiPass);
 8002eac:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002eb0:	f007 fc0e 	bl	800a6d0 <siprintf>
			setCursor (string[2], cursorPos);
 8002eb4:	4bb0      	ldr	r3, [pc, #704]	; (8003178 <lcdRoutine+0x62c>)
 8002eb6:	f993 5000 	ldrsb.w	r5, [r3]
	for (int i = 0; i < pos; i++)
 8002eba:	2d00      	cmp	r5, #0
 8002ebc:	dd05      	ble.n	8002eca <lcdRoutine+0x37e>
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	2120      	movs	r1, #32
 8002ec2:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002ec6:	f007 fbfb 	bl	800a6c0 <memset>
	string[pos] = '^';
 8002eca:	215e      	movs	r1, #94	; 0x5e
			if (settings.WiFiPass[cursorPos] == ' ' || settings.WiFiPass[cursorPos] == '\0')
 8002ecc:	4bab      	ldr	r3, [pc, #684]	; (800317c <lcdRoutine+0x630>)
	string[pos] = '^';
 8002ece:	1962      	adds	r2, r4, r5
			if (settings.WiFiPass[cursorPos] == ' ' || settings.WiFiPass[cursorPos] == '\0')
 8002ed0:	441d      	add	r5, r3
 8002ed2:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
	string[pos] = '^';
 8002ed6:	f882 1080 	strb.w	r1, [r2, #128]	; 0x80
			if (settings.WiFiPass[cursorPos] == ' ' || settings.WiFiPass[cursorPos] == '\0')
 8002eda:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8002ede:	f43f ae7f 	beq.w	8002be0 <lcdRoutine+0x94>
 8002ee2:	e684      	b.n	8002bee <lcdRoutine+0xa2>
			if (netHandler.nets[selectedNetwork][0] == 0)
 8002ee4:	4ba6      	ldr	r3, [pc, #664]	; (8003180 <lcdRoutine+0x634>)
 8002ee6:	4fa7      	ldr	r7, [pc, #668]	; (8003184 <lcdRoutine+0x638>)
 8002ee8:	f993 5000 	ldrsb.w	r5, [r3]
			sprintf (string[0], "Select WLAN");
 8002eec:	4c9f      	ldr	r4, [pc, #636]	; (800316c <lcdRoutine+0x620>)
			if (netHandler.nets[selectedNetwork][0] == 0)
 8002eee:	eb07 1245 	add.w	r2, r7, r5, lsl #5
			sprintf (string[0], "Select WLAN");
 8002ef2:	4ba5      	ldr	r3, [pc, #660]	; (8003188 <lcdRoutine+0x63c>)
			if (netHandler.nets[selectedNetwork][0] == 0)
 8002ef4:	f892 c030 	ldrb.w	ip, [r2, #48]	; 0x30
 8002ef8:	016e      	lsls	r6, r5, #5
			sprintf (string[0], "Select WLAN");
 8002efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			if (netHandler.nets[selectedNetwork][0] == 0)
 8002f02:	f1bc 0f00 	cmp.w	ip, #0
 8002f06:	f040 84ff 	bne.w	8003908 <lcdRoutine+0xdbc>
				sprintf (string[1], "Slot %d Empty", selectedNetwork);
 8002f0a:	462a      	mov	r2, r5
 8002f0c:	499f      	ldr	r1, [pc, #636]	; (800318c <lcdRoutine+0x640>)
 8002f0e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002f12:	f007 fbdd 	bl	800a6d0 <siprintf>
 8002f16:	e66a      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Refresh Network");
 8002f18:	4c94      	ldr	r4, [pc, #592]	; (800316c <lcdRoutine+0x620>)
			if (netHandler.netRefreshInProgress)
 8002f1a:	4d9a      	ldr	r5, [pc, #616]	; (8003184 <lcdRoutine+0x638>)
			sprintf (string[0], "Refresh Network");
 8002f1c:	4b9c      	ldr	r3, [pc, #624]	; (8003190 <lcdRoutine+0x644>)
			sprintf (string[1], "List");
 8002f1e:	4e9d      	ldr	r6, [pc, #628]	; (8003194 <lcdRoutine+0x648>)
			sprintf (string[0], "Refresh Network");
 8002f20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			sprintf (string[1], "List");
 8002f26:	e896 0003 	ldmia.w	r6, {r0, r1}
			if (netHandler.netRefreshInProgress)
 8002f2a:	79ab      	ldrb	r3, [r5, #6]
			sprintf (string[1], "List");
 8002f2c:	6420      	str	r0, [r4, #64]	; 0x40
 8002f2e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
			if (netHandler.netRefreshInProgress)
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f040 84fd 	bne.w	8003932 <lcdRoutine+0xde6>
			if (netHandler.netRefreshDone)
 8002f38:	79eb      	ldrb	r3, [r5, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f43f ae57 	beq.w	8002bee <lcdRoutine+0xa2>
				sprintf (string[3], "Found %d Nets", netHandler.netCount);
 8002f40:	f895 2631 	ldrb.w	r2, [r5, #1585]	; 0x631
 8002f44:	4994      	ldr	r1, [pc, #592]	; (8003198 <lcdRoutine+0x64c>)
 8002f46:	4895      	ldr	r0, [pc, #596]	; (800319c <lcdRoutine+0x650>)
 8002f48:	f007 fbc2 	bl	800a6d0 <siprintf>
 8002f4c:	e64f      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Clean saved");
 8002f4e:	4c87      	ldr	r4, [pc, #540]	; (800316c <lcdRoutine+0x620>)
 8002f50:	4a93      	ldr	r2, [pc, #588]	; (80031a0 <lcdRoutine+0x654>)
			sprintf (string[1], "Node data");
 8002f52:	4d94      	ldr	r5, [pc, #592]	; (80031a4 <lcdRoutine+0x658>)
 8002f54:	f104 0340 	add.w	r3, r4, #64	; 0x40
			sprintf (string[0], "Clean saved");
 8002f58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			sprintf (string[1], "Node data");
 8002f5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f62:	c303      	stmia	r3!, {r0, r1}
 8002f64:	801a      	strh	r2, [r3, #0]
			break;
 8002f66:	e642      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Node LED use");
 8002f68:	4d80      	ldr	r5, [pc, #512]	; (800316c <lcdRoutine+0x620>)
 8002f6a:	4b8f      	ldr	r3, [pc, #572]	; (80031a8 <lcdRoutine+0x65c>)
 8002f6c:	462c      	mov	r4, r5
 8002f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f70:	c407      	stmia	r4!, {r0, r1, r2}
			if (nodeSettings.useLed)
 8002f72:	4a8e      	ldr	r2, [pc, #568]	; (80031ac <lcdRoutine+0x660>)
			sprintf (string[0], "Node LED use");
 8002f74:	7023      	strb	r3, [r4, #0]
			if (nodeSettings.useLed)
 8002f76:	7c13      	ldrb	r3, [r2, #16]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 84ce 	beq.w	800391a <lcdRoutine+0xdce>
				sprintf (string[1], "On");
 8002f7e:	4b8c      	ldr	r3, [pc, #560]	; (80031b0 <lcdRoutine+0x664>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0c1a      	lsrs	r2, r3, #16
 8002f84:	f8a5 3040 	strh.w	r3, [r5, #64]	; 0x40
 8002f88:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
 8002f8c:	e62f      	b.n	8002bee <lcdRoutine+0xa2>
				sprintf (string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400, upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002f8e:	4b89      	ldr	r3, [pc, #548]	; (80031b4 <lcdRoutine+0x668>)
 8002f90:	4989      	ldr	r1, [pc, #548]	; (80031b8 <lcdRoutine+0x66c>)
 8002f92:	681d      	ldr	r5, [r3, #0]
 8002f94:	4b89      	ldr	r3, [pc, #548]	; (80031bc <lcdRoutine+0x670>)
 8002f96:	fba1 2405 	umull	r2, r4, r1, r5
 8002f9a:	fba3 2305 	umull	r2, r3, r3, r5
 8002f9e:	0964      	lsrs	r4, r4, #5
 8002fa0:	fba1 2104 	umull	r2, r1, r1, r4
 8002fa4:	4886      	ldr	r0, [pc, #536]	; (80031c0 <lcdRoutine+0x674>)
 8002fa6:	0adb      	lsrs	r3, r3, #11
 8002fa8:	fba0 6003 	umull	r6, r0, r0, r3
 8002fac:	4a85      	ldr	r2, [pc, #532]	; (80031c4 <lcdRoutine+0x678>)
 8002fae:	0949      	lsrs	r1, r1, #5
 8002fb0:	fba2 6205 	umull	r6, r2, r2, r5
 8002fb4:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8002fb8:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
 8002fbc:	eba4 0181 	sub.w	r1, r4, r1, lsl #2
				sprintf (string[0], "Uptime:");
 8002fc0:	4e81      	ldr	r6, [pc, #516]	; (80031c8 <lcdRoutine+0x67c>)
 8002fc2:	4c6a      	ldr	r4, [pc, #424]	; (800316c <lcdRoutine+0x620>)
				sprintf (string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400, upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002fc4:	0900      	lsrs	r0, r0, #4
 8002fc6:	eba5 0587 	sub.w	r5, r5, r7, lsl #2
 8002fca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002fce:	0c12      	lsrs	r2, r2, #16
 8002fd0:	e9cd 1500 	strd	r1, r5, [sp]
 8002fd4:	eba3 03c0 	sub.w	r3, r3, r0, lsl #3
				sprintf (string[0], "Uptime:");
 8002fd8:	e896 0003 	ldmia.w	r6, {r0, r1}
 8002fdc:	e884 0003 	stmia.w	r4, {r0, r1}
				sprintf (string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400, upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002fe0:	497a      	ldr	r1, [pc, #488]	; (80031cc <lcdRoutine+0x680>)
 8002fe2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002fe6:	f007 fb73 	bl	800a6d0 <siprintf>
				sprintf (string[2], "RX use: %d.%02d", (int) (airUseForRx * 100), (int) (airUseForRx * 10000));
 8002fea:	4b79      	ldr	r3, [pc, #484]	; (80031d0 <lcdRoutine+0x684>)
 8002fec:	4979      	ldr	r1, [pc, #484]	; (80031d4 <lcdRoutine+0x688>)
 8002fee:	681f      	ldr	r7, [r3, #0]
				sprintf (string[4], "WiFI:%d,Connected:%d", netHandler.plugged, netHandler.connected);
 8002ff0:	4d64      	ldr	r5, [pc, #400]	; (8003184 <lcdRoutine+0x638>)
				sprintf (string[2], "RX use: %d.%02d", (int) (airUseForRx * 100), (int) (airUseForRx * 10000));
 8002ff2:	4638      	mov	r0, r7
 8002ff4:	f7fd f9c0 	bl	8000378 <__aeabi_fmul>
 8002ff8:	f7fd fb84 	bl	8000704 <__aeabi_f2iz>
 8002ffc:	4976      	ldr	r1, [pc, #472]	; (80031d8 <lcdRoutine+0x68c>)
 8002ffe:	4606      	mov	r6, r0
 8003000:	4638      	mov	r0, r7
 8003002:	f7fd f9b9 	bl	8000378 <__aeabi_fmul>
 8003006:	f7fd fb7d 	bl	8000704 <__aeabi_f2iz>
 800300a:	4633      	mov	r3, r6
 800300c:	4602      	mov	r2, r0
 800300e:	4973      	ldr	r1, [pc, #460]	; (80031dc <lcdRoutine+0x690>)
 8003010:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8003014:	f007 fb5c 	bl	800a6d0 <siprintf>
				sprintf (string[3], "TX use: %d.%02d", (int) (airUseForTx * 100), (int) (airUseForTx * 10000));
 8003018:	4b71      	ldr	r3, [pc, #452]	; (80031e0 <lcdRoutine+0x694>)
 800301a:	496e      	ldr	r1, [pc, #440]	; (80031d4 <lcdRoutine+0x688>)
 800301c:	681f      	ldr	r7, [r3, #0]
 800301e:	4638      	mov	r0, r7
 8003020:	f7fd f9aa 	bl	8000378 <__aeabi_fmul>
 8003024:	f7fd fb6e 	bl	8000704 <__aeabi_f2iz>
 8003028:	496b      	ldr	r1, [pc, #428]	; (80031d8 <lcdRoutine+0x68c>)
 800302a:	4606      	mov	r6, r0
 800302c:	4638      	mov	r0, r7
 800302e:	f7fd f9a3 	bl	8000378 <__aeabi_fmul>
 8003032:	f7fd fb67 	bl	8000704 <__aeabi_f2iz>
 8003036:	4633      	mov	r3, r6
 8003038:	4602      	mov	r2, r0
 800303a:	496a      	ldr	r1, [pc, #424]	; (80031e4 <lcdRoutine+0x698>)
 800303c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8003040:	f007 fb46 	bl	800a6d0 <siprintf>
				sprintf (string[4], "WiFI:%d,Connected:%d", netHandler.plugged, netHandler.connected);
 8003044:	78ab      	ldrb	r3, [r5, #2]
 8003046:	782a      	ldrb	r2, [r5, #0]
 8003048:	4967      	ldr	r1, [pc, #412]	; (80031e8 <lcdRoutine+0x69c>)
 800304a:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800304e:	f007 fb3f 	bl	800a6d0 <siprintf>
				sprintf (string[5], "Local IP:%s", netHandler.ip);
 8003052:	f105 0214 	add.w	r2, r5, #20
 8003056:	4965      	ldr	r1, [pc, #404]	; (80031ec <lcdRoutine+0x6a0>)
 8003058:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800305c:	f007 fb38 	bl	800a6d0 <siprintf>
				sprintf (string[6], "Online:%d", netHandler.online);
 8003060:	78ea      	ldrb	r2, [r5, #3]
 8003062:	4963      	ldr	r1, [pc, #396]	; (80031f0 <lcdRoutine+0x6a4>)
 8003064:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8003068:	f007 fb32 	bl	800a6d0 <siprintf>
				sprintf (string[7], "TX:%d", netHandler.TX);
 800306c:	796a      	ldrb	r2, [r5, #5]
 800306e:	4961      	ldr	r1, [pc, #388]	; (80031f4 <lcdRoutine+0x6a8>)
 8003070:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
 8003074:	f007 fb2c 	bl	800a6d0 <siprintf>
				break;
 8003078:	e5b9      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Firmware: ");
 800307a:	4a5f      	ldr	r2, [pc, #380]	; (80031f8 <lcdRoutine+0x6ac>)
 800307c:	4b3b      	ldr	r3, [pc, #236]	; (800316c <lcdRoutine+0x620>)
 800307e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003080:	c303      	stmia	r3!, {r0, r1}
 8003082:	f823 2b02 	strh.w	r2, [r3], #2
 8003086:	4618      	mov	r0, r3
 8003088:	0c12      	lsrs	r2, r2, #16
			sprintf (string[1], "release %lu", version);
 800308a:	495c      	ldr	r1, [pc, #368]	; (80031fc <lcdRoutine+0x6b0>)
			sprintf (string[0], "Firmware: ");
 800308c:	f800 2b36 	strb.w	r2, [r0], #54
			sprintf (string[1], "release %lu", version);
 8003090:	4a5b      	ldr	r2, [pc, #364]	; (8003200 <lcdRoutine+0x6b4>)
 8003092:	f007 fb1d 	bl	800a6d0 <siprintf>
			break;
 8003096:	e5aa      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Save to Flash?");
 8003098:	4b5a      	ldr	r3, [pc, #360]	; (8003204 <lcdRoutine+0x6b8>)
 800309a:	4c34      	ldr	r4, [pc, #208]	; (800316c <lcdRoutine+0x620>)
 800309c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800309e:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[1], "OK:Yes BACK:No");
 80030a0:	4a59      	ldr	r2, [pc, #356]	; (8003208 <lcdRoutine+0x6bc>)
			sprintf (string[0], "Save to Flash?");
 80030a2:	f824 3b02 	strh.w	r3, [r4], #2
 80030a6:	0c1b      	lsrs	r3, r3, #16
 80030a8:	f804 3b32 	strb.w	r3, [r4], #50
			sprintf (string[1], "OK:Yes BACK:No");
 80030ac:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80030ae:	c407      	stmia	r4!, {r0, r1, r2}
 80030b0:	0c1a      	lsrs	r2, r3, #16
 80030b2:	f824 3b02 	strh.w	r3, [r4], #2
 80030b6:	7022      	strb	r2, [r4, #0]
			break;
 80030b8:	e599      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Spreading");
 80030ba:	4b2c      	ldr	r3, [pc, #176]	; (800316c <lcdRoutine+0x620>)
 80030bc:	4a53      	ldr	r2, [pc, #332]	; (800320c <lcdRoutine+0x6c0>)
 80030be:	461c      	mov	r4, r3
 80030c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80030c2:	c403      	stmia	r4!, {r0, r1}
			sprintf (string[1], "factor");
 80030c4:	4952      	ldr	r1, [pc, #328]	; (8003210 <lcdRoutine+0x6c4>)
			sprintf (string[2], "%d", settings.sf);
 80030c6:	4d2d      	ldr	r5, [pc, #180]	; (800317c <lcdRoutine+0x630>)
			sprintf (string[1], "factor");
 80030c8:	c903      	ldmia	r1, {r0, r1}
			sprintf (string[0], "Spreading");
 80030ca:	8022      	strh	r2, [r4, #0]
			sprintf (string[1], "factor");
 80030cc:	0c0c      	lsrs	r4, r1, #16
 80030ce:	6418      	str	r0, [r3, #64]	; 0x40
 80030d0:	f8a3 1044 	strh.w	r1, [r3, #68]	; 0x44
			sprintf (string[2], "%d", settings.sf);
 80030d4:	7baa      	ldrb	r2, [r5, #14]
 80030d6:	494f      	ldr	r1, [pc, #316]	; (8003214 <lcdRoutine+0x6c8>)
 80030d8:	f103 0080 	add.w	r0, r3, #128	; 0x80
			sprintf (string[1], "factor");
 80030dc:	f883 4046 	strb.w	r4, [r3, #70]	; 0x46
			sprintf (string[2], "%d", settings.sf);
 80030e0:	f007 faf6 	bl	800a6d0 <siprintf>
			break;
 80030e4:	e583      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Frequency");
 80030e6:	4b4c      	ldr	r3, [pc, #304]	; (8003218 <lcdRoutine+0x6cc>)
 80030e8:	4c20      	ldr	r4, [pc, #128]	; (800316c <lcdRoutine+0x620>)
 80030ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80030ee:	c403      	stmia	r4!, {r0, r1}
			sprintf (string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000, (settings.realFrequency / 10000) % 100);
 80030f0:	2664      	movs	r6, #100	; 0x64
			sprintf (string[0], "Frequency");
 80030f2:	4620      	mov	r0, r4
			sprintf (string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000, (settings.realFrequency / 10000) % 100);
 80030f4:	4b21      	ldr	r3, [pc, #132]	; (800317c <lcdRoutine+0x630>)
 80030f6:	4949      	ldr	r1, [pc, #292]	; (800321c <lcdRoutine+0x6d0>)
 80030f8:	681d      	ldr	r5, [r3, #0]
 80030fa:	4b49      	ldr	r3, [pc, #292]	; (8003220 <lcdRoutine+0x6d4>)
 80030fc:	fba1 7105 	umull	r7, r1, r1, r5
 8003100:	0b49      	lsrs	r1, r1, #13
 8003102:	fba3 7301 	umull	r7, r3, r3, r1
 8003106:	4f47      	ldr	r7, [pc, #284]	; (8003224 <lcdRoutine+0x6d8>)
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	fba7 7505 	umull	r7, r5, r7, r5
 800310e:	fb06 1313 	mls	r3, r6, r3, r1
			if (currentInterval != BAD_INTERVAL)
 8003112:	4e45      	ldr	r6, [pc, #276]	; (8003228 <lcdRoutine+0x6dc>)
			sprintf (string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000, (settings.realFrequency / 10000) % 100);
 8003114:	4945      	ldr	r1, [pc, #276]	; (800322c <lcdRoutine+0x6e0>)
			sprintf (string[0], "Frequency");
 8003116:	f820 2b38 	strh.w	r2, [r0], #56
			sprintf (string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000, (settings.realFrequency / 10000) % 100);
 800311a:	0caa      	lsrs	r2, r5, #18
 800311c:	f007 fad8 	bl	800a6d0 <siprintf>
			if (currentInterval != BAD_INTERVAL)
 8003120:	f996 3000 	ldrsb.w	r3, [r6]
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	f000 83db 	beq.w	80038e0 <lcdRoutine+0xd94>
					sprintf (string[2], "Power:%u dB", legalFreq.interval[currentInterval].maxPower);
 800312a:	4d41      	ldr	r5, [pc, #260]	; (8003230 <lcdRoutine+0x6e4>)
 800312c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003130:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003134:	7b1a      	ldrb	r2, [r3, #12]
 8003136:	493f      	ldr	r1, [pc, #252]	; (8003234 <lcdRoutine+0x6e8>)
 8003138:	f104 0078 	add.w	r0, r4, #120	; 0x78
 800313c:	f007 fac8 	bl	800a6d0 <siprintf>
					sprintf (string[3], "Air use.%u.%u%%", legalFreq.interval[currentInterval].maxAirUse / 10,
 8003140:	f996 3000 	ldrsb.w	r3, [r6]
 8003144:	4a3c      	ldr	r2, [pc, #240]	; (8003238 <lcdRoutine+0x6ec>)
 8003146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800314a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800314e:	89eb      	ldrh	r3, [r5, #14]
 8003150:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8003154:	fba2 1203 	umull	r1, r2, r2, r3
 8003158:	08d2      	lsrs	r2, r2, #3
 800315a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800315e:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8003162:	b29b      	uxth	r3, r3
 8003164:	4935      	ldr	r1, [pc, #212]	; (800323c <lcdRoutine+0x6f0>)
 8003166:	f007 fab3 	bl	800a6d0 <siprintf>
 800316a:	e540      	b.n	8002bee <lcdRoutine+0xa2>
 800316c:	200000f4 	.word	0x200000f4
 8003170:	0800b648 	.word	0x0800b648
 8003174:	20000a23 	.word	0x20000a23
 8003178:	200000b2 	.word	0x200000b2
 800317c:	20000a00 	.word	0x20000a00
 8003180:	200000f0 	.word	0x200000f0
 8003184:	20000e4c 	.word	0x20000e4c
 8003188:	0800b62c 	.word	0x0800b62c
 800318c:	0800b638 	.word	0x0800b638
 8003190:	0800b5f4 	.word	0x0800b5f4
 8003194:	0800b604 	.word	0x0800b604
 8003198:	0800b61c 	.word	0x0800b61c
 800319c:	200001b4 	.word	0x200001b4
 80031a0:	0800b5dc 	.word	0x0800b5dc
 80031a4:	0800b5e8 	.word	0x0800b5e8
 80031a8:	0800b5c8 	.word	0x0800b5c8
 80031ac:	20000c04 	.word	0x20000c04
 80031b0:	0800b5d8 	.word	0x0800b5d8
 80031b4:	20000ad0 	.word	0x20000ad0
 80031b8:	88888889 	.word	0x88888889
 80031bc:	91a2b3c5 	.word	0x91a2b3c5
 80031c0:	aaaaaaab 	.word	0xaaaaaaab
 80031c4:	c22e4507 	.word	0xc22e4507
 80031c8:	0800b6e8 	.word	0x0800b6e8
 80031cc:	0800b6f0 	.word	0x0800b6f0
 80031d0:	20000b24 	.word	0x20000b24
 80031d4:	461c4000 	.word	0x461c4000
 80031d8:	42c80000 	.word	0x42c80000
 80031dc:	0800b70c 	.word	0x0800b70c
 80031e0:	20000ad4 	.word	0x20000ad4
 80031e4:	0800b71c 	.word	0x0800b71c
 80031e8:	0800b72c 	.word	0x0800b72c
 80031ec:	0800b744 	.word	0x0800b744
 80031f0:	0800b750 	.word	0x0800b750
 80031f4:	0800b75c 	.word	0x0800b75c
 80031f8:	0800b6d0 	.word	0x0800b6d0
 80031fc:	0800b6dc 	.word	0x0800b6dc
 8003200:	08082021 	.word	0x08082021
 8003204:	0800b698 	.word	0x0800b698
 8003208:	0800b6a8 	.word	0x0800b6a8
 800320c:	0800b46c 	.word	0x0800b46c
 8003210:	0800b478 	.word	0x0800b478
 8003214:	0800b480 	.word	0x0800b480
 8003218:	0800b41c 	.word	0x0800b41c
 800321c:	d1b71759 	.word	0xd1b71759
 8003220:	51eb851f 	.word	0x51eb851f
 8003224:	431bde83 	.word	0x431bde83
 8003228:	20001588 	.word	0x20001588
 800322c:	0800b428 	.word	0x0800b428
 8003230:	20000b5c 	.word	0x20000b5c
 8003234:	0800b438 	.word	0x0800b438
 8003238:	cccccccd 	.word	0xcccccccd
 800323c:	0800b444 	.word	0x0800b444
			sprintf (string[0], "Network settings");
 8003240:	f8df c270 	ldr.w	ip, [pc, #624]	; 80034b4 <lcdRoutine+0x968>
			string[1 + menuPosition][0] = 0x83;
 8003244:	f04f 0e83 	mov.w	lr, #131	; 0x83
			sprintf (string[0], "Network settings");
 8003248:	4666      	mov	r6, ip
 800324a:	4f92      	ldr	r7, [pc, #584]	; (8003494 <lcdRoutine+0x948>)
			sprintf (string[1], " Refresh Network List");
 800324c:	4d92      	ldr	r5, [pc, #584]	; (8003498 <lcdRoutine+0x94c>)
 800324e:	f10c 0440 	add.w	r4, ip, #64	; 0x40
			sprintf (string[0], "Network settings");
 8003252:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003254:	c60f      	stmia	r6!, {r0, r1, r2, r3}
			sprintf (string[1], " Refresh Network List");
 8003256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800325a:	e895 0003 	ldmia.w	r5, {r0, r1}
			sprintf (string[0], "Network settings");
 800325e:	683a      	ldr	r2, [r7, #0]
			sprintf (string[2], " Select Network");
 8003260:	4b8e      	ldr	r3, [pc, #568]	; (800349c <lcdRoutine+0x950>)
			sprintf (string[1], " Refresh Network List");
 8003262:	f844 0b04 	str.w	r0, [r4], #4
			sprintf (string[0], "Network settings");
 8003266:	7032      	strb	r2, [r6, #0]
			sprintf (string[3], " Set WiFi Password");
 8003268:	4f8d      	ldr	r7, [pc, #564]	; (80034a0 <lcdRoutine+0x954>)
			sprintf (string[2], " Select Network");
 800326a:	f10c 0680 	add.w	r6, ip, #128	; 0x80
			sprintf (string[4], " Set Server Password");
 800326e:	4d8d      	ldr	r5, [pc, #564]	; (80034a4 <lcdRoutine+0x958>)
			sprintf (string[1], " Refresh Network List");
 8003270:	8021      	strh	r1, [r4, #0]
			sprintf (string[2], " Select Network");
 8003272:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
			sprintf (string[4], " Set Server Password");
 8003274:	f50c 7480 	add.w	r4, ip, #256	; 0x100
			sprintf (string[2], " Select Network");
 8003278:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
			sprintf (string[3], " Set WiFi Password");
 800327c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800327e:	f10c 06c0 	add.w	r6, ip, #192	; 0xc0
 8003282:	c60f      	stmia	r6!, {r0, r1, r2, r3}
			sprintf (string[4], " Set Server Password");
 8003284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003288:	e895 0003 	ldmia.w	r5, {r0, r1}
			sprintf (string[3], " Set WiFi Password");
 800328c:	683a      	ldr	r2, [r7, #0]
			sprintf (string[4], " Set Server Password");
 800328e:	f844 0b04 	str.w	r0, [r4], #4
			sprintf (string[5], " Set BaseID");
 8003292:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8003514 <lcdRoutine+0x9c8>
			sprintf (string[6], " Set Host");
 8003296:	4d84      	ldr	r5, [pc, #528]	; (80034a8 <lcdRoutine+0x95c>)
			sprintf (string[4], " Set Server Password");
 8003298:	7021      	strb	r1, [r4, #0]
			sprintf (string[3], " Set WiFi Password");
 800329a:	f826 2b02 	strh.w	r2, [r6], #2
			sprintf (string[5], " Set BaseID");
 800329e:	f50c 74a0 	add.w	r4, ip, #320	; 0x140
			sprintf (string[3], " Set WiFi Password");
 80032a2:	0c12      	lsrs	r2, r2, #16
			sprintf (string[6], " Set Host");
 80032a4:	f50c 73c0 	add.w	r3, ip, #384	; 0x180
			sprintf (string[3], " Set WiFi Password");
 80032a8:	7032      	strb	r2, [r6, #0]
			sprintf (string[5], " Set BaseID");
 80032aa:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80032ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			sprintf (string[6], " Set Host");
 80032b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032b6:	c303      	stmia	r3!, {r0, r1}
			string[1 + menuPosition][0] = 0x83;
 80032b8:	497c      	ldr	r1, [pc, #496]	; (80034ac <lcdRoutine+0x960>)
			sprintf (string[6], " Set Host");
 80032ba:	801a      	strh	r2, [r3, #0]
			string[1 + menuPosition][0] = 0x83;
 80032bc:	f991 3000 	ldrsb.w	r3, [r1]
 80032c0:	eb0c 1383 	add.w	r3, ip, r3, lsl #6
 80032c4:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
			break;
 80032c8:	e491      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "SyncWord");
 80032ca:	4a79      	ldr	r2, [pc, #484]	; (80034b0 <lcdRoutine+0x964>)
 80032cc:	4b79      	ldr	r3, [pc, #484]	; (80034b4 <lcdRoutine+0x968>)
 80032ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80032d0:	c303      	stmia	r3!, {r0, r1}
 80032d2:	4618      	mov	r0, r3
			sprintf (string[1], "0x%X", settings.syncWord);
 80032d4:	4b78      	ldr	r3, [pc, #480]	; (80034b8 <lcdRoutine+0x96c>)
 80032d6:	4979      	ldr	r1, [pc, #484]	; (80034bc <lcdRoutine+0x970>)
			sprintf (string[0], "SyncWord");
 80032d8:	f800 2b38 	strb.w	r2, [r0], #56
			sprintf (string[1], "0x%X", settings.syncWord);
 80032dc:	7c5a      	ldrb	r2, [r3, #17]
 80032de:	f007 f9f7 	bl	800a6d0 <siprintf>
			break;
 80032e2:	e484      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Bandwidth");
 80032e4:	4a76      	ldr	r2, [pc, #472]	; (80034c0 <lcdRoutine+0x974>)
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <lcdRoutine+0x968>)
			switch (settings.bw)
 80032e8:	4c73      	ldr	r4, [pc, #460]	; (80034b8 <lcdRoutine+0x96c>)
			sprintf (string[0], "Bandwidth");
 80032ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80032ec:	c303      	stmia	r3!, {r0, r1}
 80032ee:	7be1      	ldrb	r1, [r4, #15]
 80032f0:	801a      	strh	r2, [r3, #0]
			switch (settings.bw)
 80032f2:	2909      	cmp	r1, #9
 80032f4:	f200 822d 	bhi.w	8003752 <lcdRoutine+0xc06>
 80032f8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80032fc:	02510257 	.word	0x02510257
 8003300:	02ec0226 	.word	0x02ec0226
 8003304:	02e002e6 	.word	0x02e002e6
 8003308:	026c02da 	.word	0x026c02da
 800330c:	025e0265 	.word	0x025e0265
			sprintf (string[1], "4/%d", settings.cr + 4);
 8003310:	4a69      	ldr	r2, [pc, #420]	; (80034b8 <lcdRoutine+0x96c>)
			sprintf (string[0], "Coding rate");
 8003312:	4c68      	ldr	r4, [pc, #416]	; (80034b4 <lcdRoutine+0x968>)
			sprintf (string[1], "4/%d", settings.cr + 4);
 8003314:	7c15      	ldrb	r5, [r2, #16]
			sprintf (string[0], "Coding rate");
 8003316:	4b6b      	ldr	r3, [pc, #428]	; (80034c4 <lcdRoutine+0x978>)
 8003318:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800331c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			sprintf (string[1], "4/%d", settings.cr + 4);
 8003320:	4969      	ldr	r1, [pc, #420]	; (80034c8 <lcdRoutine+0x97c>)
 8003322:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003326:	1d2a      	adds	r2, r5, #4
 8003328:	f007 f9d2 	bl	800a6d0 <siprintf>
			break;
 800332c:	e45f      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Base settings");
 800332e:	f8df c184 	ldr.w	ip, [pc, #388]	; 80034b4 <lcdRoutine+0x968>
			string[1 + menuPosition][0] = 0x83;
 8003332:	f04f 0e83 	mov.w	lr, #131	; 0x83
			sprintf (string[0], "Base settings");
 8003336:	4664      	mov	r4, ip
 8003338:	4b64      	ldr	r3, [pc, #400]	; (80034cc <lcdRoutine+0x980>)
			sprintf (string[1], " Warning Delay 1");
 800333a:	4f65      	ldr	r7, [pc, #404]	; (80034d0 <lcdRoutine+0x984>)
			sprintf (string[0], "Base settings");
 800333c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800333e:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[2], " Warning Delay 2");
 8003340:	4e64      	ldr	r6, [pc, #400]	; (80034d4 <lcdRoutine+0x988>)
			sprintf (string[0], "Base settings");
 8003342:	8023      	strh	r3, [r4, #0]
			sprintf (string[1], " Warning Delay 1");
 8003344:	f10c 0540 	add.w	r5, ip, #64	; 0x40
			sprintf (string[2], " Warning Delay 2");
 8003348:	f10c 0480 	add.w	r4, ip, #128	; 0x80
			sprintf (string[1], " Warning Delay 1");
 800334c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800334e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sprintf (string[2], " Warning Delay 2");
 8003350:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			string[1 + menuPosition][0] = 0x83;
 8003354:	4b55      	ldr	r3, [pc, #340]	; (80034ac <lcdRoutine+0x960>)
			sprintf (string[1], " Warning Delay 1");
 8003356:	683a      	ldr	r2, [r7, #0]
			string[1 + menuPosition][0] = 0x83;
 8003358:	f993 1000 	ldrsb.w	r1, [r3]
			sprintf (string[2], " Warning Delay 2");
 800335c:	6833      	ldr	r3, [r6, #0]
			string[1 + menuPosition][0] = 0x83;
 800335e:	eb0c 1c81 	add.w	ip, ip, r1, lsl #6
			sprintf (string[1], " Warning Delay 1");
 8003362:	702a      	strb	r2, [r5, #0]
			sprintf (string[2], " Warning Delay 2");
 8003364:	7023      	strb	r3, [r4, #0]
			string[1 + menuPosition][0] = 0x83;
 8003366:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
			break;
 800336a:	e440      	b.n	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Radio settings");
 800336c:	f8df e144 	ldr.w	lr, [pc, #324]	; 80034b4 <lcdRoutine+0x968>
			string[1 + menuPosition][0] = 0x83;
 8003370:	f04f 0883 	mov.w	r8, #131	; 0x83
			sprintf (string[0], "Radio settings");
 8003374:	4674      	mov	r4, lr
			sprintf (string[1], " Frequency");
 8003376:	4d58      	ldr	r5, [pc, #352]	; (80034d8 <lcdRoutine+0x98c>)
			sprintf (string[0], "Radio settings");
 8003378:	4b58      	ldr	r3, [pc, #352]	; (80034dc <lcdRoutine+0x990>)
			sprintf (string[1], " Frequency");
 800337a:	f10e 0c40 	add.w	ip, lr, #64	; 0x40
			sprintf (string[0], "Radio settings");
 800337e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003380:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[1], " Frequency");
 8003382:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003386:	e8ac 0003 	stmia.w	ip!, {r0, r1}
			sprintf (string[2], " Bandwidth");
 800338a:	4955      	ldr	r1, [pc, #340]	; (80034e0 <lcdRoutine+0x994>)
 800338c:	f10e 0680 	add.w	r6, lr, #128	; 0x80
			sprintf (string[1], " Frequency");
 8003390:	f82c 2b02 	strh.w	r2, [ip], #2
 8003394:	ea4f 4a12 	mov.w	sl, r2, lsr #16
			sprintf (string[2], " Bandwidth");
 8003398:	c907      	ldmia	r1, {r0, r1, r2}
 800339a:	c603      	stmia	r6!, {r0, r1}
			sprintf (string[3], " Spreading Factor");
 800339c:	4f51      	ldr	r7, [pc, #324]	; (80034e4 <lcdRoutine+0x998>)
			sprintf (string[0], "Radio settings");
 800339e:	f824 3b02 	strh.w	r3, [r4], #2
			sprintf (string[3], " Spreading Factor");
 80033a2:	f10e 05c0 	add.w	r5, lr, #192	; 0xc0
			sprintf (string[0], "Radio settings");
 80033a6:	0c1b      	lsrs	r3, r3, #16
			sprintf (string[2], " Bandwidth");
 80033a8:	f826 2b02 	strh.w	r2, [r6], #2
			sprintf (string[0], "Radio settings");
 80033ac:	7023      	strb	r3, [r4, #0]
			sprintf (string[2], " Bandwidth");
 80033ae:	ea4f 4912 	mov.w	r9, r2, lsr #16
			sprintf (string[3], " Spreading Factor");
 80033b2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80033b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b6:	6839      	ldr	r1, [r7, #0]
			sprintf (string[4], " SyncWord");
 80033b8:	4a4b      	ldr	r2, [pc, #300]	; (80034e8 <lcdRoutine+0x99c>)
 80033ba:	f50e 7380 	add.w	r3, lr, #256	; 0x100
			sprintf (string[2], " Bandwidth");
 80033be:	f886 9000 	strb.w	r9, [r6]
			sprintf (string[1], " Frequency");
 80033c2:	f88c a000 	strb.w	sl, [ip]
			sprintf (string[3], " Spreading Factor");
 80033c6:	8029      	strh	r1, [r5, #0]
			sprintf (string[4], " SyncWord");
 80033c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80033ca:	c303      	stmia	r3!, {r0, r1}
			sprintf (string[5], " Coding rate");
 80033cc:	4947      	ldr	r1, [pc, #284]	; (80034ec <lcdRoutine+0x9a0>)
			sprintf (string[6], " Preamble");
 80033ce:	4d48      	ldr	r5, [pc, #288]	; (80034f0 <lcdRoutine+0x9a4>)
			sprintf (string[5], " Coding rate");
 80033d0:	f50e 74a0 	add.w	r4, lr, #320	; 0x140
			sprintf (string[4], " SyncWord");
 80033d4:	801a      	strh	r2, [r3, #0]
			string[1 + menuPosition][0] = 0x83;
 80033d6:	4e35      	ldr	r6, [pc, #212]	; (80034ac <lcdRoutine+0x960>)
			sprintf (string[5], " Coding rate");
 80033d8:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80033da:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[6], " Preamble");
 80033dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033e0:	f50e 75c0 	add.w	r5, lr, #384	; 0x180
 80033e4:	c503      	stmia	r5!, {r0, r1}
			string[1 + menuPosition][0] = 0x83;
 80033e6:	f996 6000 	ldrsb.w	r6, [r6]
			sprintf (string[7], " Power");
 80033ea:	4942      	ldr	r1, [pc, #264]	; (80034f4 <lcdRoutine+0x9a8>)
			sprintf (string[5], " Coding rate");
 80033ec:	7023      	strb	r3, [r4, #0]
			sprintf (string[7], " Power");
 80033ee:	c903      	ldmia	r1, {r0, r1}
			string[1 + menuPosition][0] = 0x83;
 80033f0:	eb0e 1686 	add.w	r6, lr, r6, lsl #6
			sprintf (string[7], " Power");
 80033f4:	0c0b      	lsrs	r3, r1, #16
			sprintf (string[6], " Preamble");
 80033f6:	802a      	strh	r2, [r5, #0]
			sprintf (string[7], " Power");
 80033f8:	f8ce 01c0 	str.w	r0, [lr, #448]	; 0x1c0
 80033fc:	f8ae 11c4 	strh.w	r1, [lr, #452]	; 0x1c4
 8003400:	f88e 31c6 	strb.w	r3, [lr, #454]	; 0x1c6
			string[1 + menuPosition][0] = 0x83;
 8003404:	f886 8040 	strb.w	r8, [r6, #64]	; 0x40
			break;
 8003408:	f7ff bbf1 	b.w	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Main Menu");
 800340c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80034b4 <lcdRoutine+0x968>
			string[1 + menuPosition][0] = 0x83;
 8003410:	f04f 0e83 	mov.w	lr, #131	; 0x83
			sprintf (string[0], "Main Menu");
 8003414:	4663      	mov	r3, ip
 8003416:	4a38      	ldr	r2, [pc, #224]	; (80034f8 <lcdRoutine+0x9ac>)
			sprintf (string[2], " Base Settings");
 8003418:	4c38      	ldr	r4, [pc, #224]	; (80034fc <lcdRoutine+0x9b0>)
			sprintf (string[0], "Main Menu");
 800341a:	ca07      	ldmia	r2, {r0, r1, r2}
 800341c:	c303      	stmia	r3!, {r0, r1}
			sprintf (string[1], " Radio Settings");
 800341e:	4938      	ldr	r1, [pc, #224]	; (8003500 <lcdRoutine+0x9b4>)
 8003420:	f10c 0540 	add.w	r5, ip, #64	; 0x40
			sprintf (string[0], "Main Menu");
 8003424:	801a      	strh	r2, [r3, #0]
			sprintf (string[1], " Radio Settings");
 8003426:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8003428:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			sprintf (string[2], " Base Settings");
 800342c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003430:	f10c 0580 	add.w	r5, ip, #128	; 0x80
 8003434:	c507      	stmia	r5!, {r0, r1, r2}
			sprintf (string[3], " Node Settings");
 8003436:	4a33      	ldr	r2, [pc, #204]	; (8003504 <lcdRoutine+0x9b8>)
 8003438:	f10c 04c0 	add.w	r4, ip, #192	; 0xc0
			sprintf (string[2], " Base Settings");
 800343c:	f825 3b02 	strh.w	r3, [r5], #2
 8003440:	ea4f 4813 	mov.w	r8, r3, lsr #16
			sprintf (string[3], " Node Settings");
 8003444:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8003446:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[2], " Base Settings");
 8003448:	f885 8000 	strb.w	r8, [r5]
			sprintf (string[3], " Node Settings");
 800344c:	f824 3b02 	strh.w	r3, [r4], #2
			sprintf (string[4], " Network Settings");
 8003450:	4f2d      	ldr	r7, [pc, #180]	; (8003508 <lcdRoutine+0x9bc>)
			sprintf (string[3], " Node Settings");
 8003452:	0c1b      	lsrs	r3, r3, #16
			sprintf (string[5], " Save Settings");
 8003454:	4d2d      	ldr	r5, [pc, #180]	; (800350c <lcdRoutine+0x9c0>)
			sprintf (string[3], " Node Settings");
 8003456:	7023      	strb	r3, [r4, #0]
			sprintf (string[4], " Network Settings");
 8003458:	f50c 7680 	add.w	r6, ip, #256	; 0x100
			sprintf (string[5], " Save Settings");
 800345c:	f50c 74a0 	add.w	r4, ip, #320	; 0x140
			sprintf (string[4], " Network Settings");
 8003460:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8003462:	c60f      	stmia	r6!, {r0, r1, r2, r3}
			sprintf (string[5], " Save Settings");
 8003464:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003468:	c407      	stmia	r4!, {r0, r1, r2}
			string[1 + menuPosition][0] = 0x83;
 800346a:	4a10      	ldr	r2, [pc, #64]	; (80034ac <lcdRoutine+0x960>)
			sprintf (string[4], " Network Settings");
 800346c:	6838      	ldr	r0, [r7, #0]
			string[1 + menuPosition][0] = 0x83;
 800346e:	f992 2000 	ldrsb.w	r2, [r2]
			sprintf (string[6], " Info");
 8003472:	4927      	ldr	r1, [pc, #156]	; (8003510 <lcdRoutine+0x9c4>)
			sprintf (string[5], " Save Settings");
 8003474:	f824 3b02 	strh.w	r3, [r4], #2
			string[1 + menuPosition][0] = 0x83;
 8003478:	eb0c 1282 	add.w	r2, ip, r2, lsl #6
			sprintf (string[5], " Save Settings");
 800347c:	0c1b      	lsrs	r3, r3, #16
			sprintf (string[4], " Network Settings");
 800347e:	8030      	strh	r0, [r6, #0]
			sprintf (string[5], " Save Settings");
 8003480:	7023      	strb	r3, [r4, #0]
			sprintf (string[6], " Info");
 8003482:	c903      	ldmia	r1, {r0, r1}
 8003484:	f8cc 0180 	str.w	r0, [ip, #384]	; 0x180
 8003488:	f8ac 1184 	strh.w	r1, [ip, #388]	; 0x184
			string[1 + menuPosition][0] = 0x83;
 800348c:	f882 e040 	strb.w	lr, [r2, #64]	; 0x40
			break;
 8003490:	f7ff bbad 	b.w	8002bee <lcdRoutine+0xa2>
 8003494:	0800b39c 	.word	0x0800b39c
 8003498:	0800b3b0 	.word	0x0800b3b0
 800349c:	0800b3c8 	.word	0x0800b3c8
 80034a0:	0800b3d8 	.word	0x0800b3d8
 80034a4:	0800b3ec 	.word	0x0800b3ec
 80034a8:	0800b410 	.word	0x0800b410
 80034ac:	200000db 	.word	0x200000db
 80034b0:	0800b4f8 	.word	0x0800b4f8
 80034b4:	200000f4 	.word	0x200000f4
 80034b8:	20000a00 	.word	0x20000a00
 80034bc:	0800b15c 	.word	0x0800b15c
 80034c0:	0800b484 	.word	0x0800b484
 80034c4:	0800b504 	.word	0x0800b504
 80034c8:	0800b510 	.word	0x0800b510
 80034cc:	0800b320 	.word	0x0800b320
 80034d0:	0800b330 	.word	0x0800b330
 80034d4:	0800b344 	.word	0x0800b344
 80034d8:	0800b2c4 	.word	0x0800b2c4
 80034dc:	0800b2b4 	.word	0x0800b2b4
 80034e0:	0800b2d0 	.word	0x0800b2d0
 80034e4:	0800b2dc 	.word	0x0800b2dc
 80034e8:	0800b2f0 	.word	0x0800b2f0
 80034ec:	0800b2fc 	.word	0x0800b2fc
 80034f0:	0800b30c 	.word	0x0800b30c
 80034f4:	0800b318 	.word	0x0800b318
 80034f8:	0800b24c 	.word	0x0800b24c
 80034fc:	0800b268 	.word	0x0800b268
 8003500:	0800b258 	.word	0x0800b258
 8003504:	0800b278 	.word	0x0800b278
 8003508:	0800b288 	.word	0x0800b288
 800350c:	0800b29c 	.word	0x0800b29c
 8003510:	0800b2ac 	.word	0x0800b2ac
 8003514:	0800b404 	.word	0x0800b404
			if (lastMessageFrom < MAX_NODES)
 8003518:	4db2      	ldr	r5, [pc, #712]	; (80037e4 <lcdRoutine+0xc98>)
 800351a:	782a      	ldrb	r2, [r5, #0]
 800351c:	2a07      	cmp	r2, #7
 800351e:	f200 81ea 	bhi.w	80038f6 <lcdRoutine+0xdaa>
					sprintf (string[0], "From %d RSSI:%ddB", lastMessageFrom, nodes[lastMessageFrom].rssi);
 8003522:	4fb1      	ldr	r7, [pc, #708]	; (80037e8 <lcdRoutine+0xc9c>)
 8003524:	49b1      	ldr	r1, [pc, #708]	; (80037ec <lcdRoutine+0xca0>)
 8003526:	eb07 1342 	add.w	r3, r7, r2, lsl #5
 800352a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800352e:	48b0      	ldr	r0, [pc, #704]	; (80037f0 <lcdRoutine+0xca4>)
 8003530:	f007 f8ce 	bl	800a6d0 <siprintf>
					if (nodes[lastMessageFrom].opened)
 8003534:	782c      	ldrb	r4, [r5, #0]
 8003536:	eb07 1344 	add.w	r3, r7, r4, lsl #5
 800353a:	7bdb      	ldrb	r3, [r3, #15]
 800353c:	0164      	lsls	r4, r4, #5
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 820e 	beq.w	8003960 <lcdRoutine+0xe14>
						sprintf (string[1], "Door: Opened");
 8003544:	4bab      	ldr	r3, [pc, #684]	; (80037f4 <lcdRoutine+0xca8>)
 8003546:	4eac      	ldr	r6, [pc, #688]	; (80037f8 <lcdRoutine+0xcac>)
 8003548:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800354a:	c607      	stmia	r6!, {r0, r1, r2}
 800354c:	7033      	strb	r3, [r6, #0]
					if (nodes[lastMessageFrom].powered)
 800354e:	193b      	adds	r3, r7, r4
 8003550:	7c1b      	ldrb	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 81f7 	beq.w	8003946 <lcdRoutine+0xdfa>
						sprintf (string[2], "Powered by PS");
 8003558:	4ba8      	ldr	r3, [pc, #672]	; (80037fc <lcdRoutine+0xcb0>)
 800355a:	4ea9      	ldr	r6, [pc, #676]	; (8003800 <lcdRoutine+0xcb4>)
 800355c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800355e:	c607      	stmia	r6!, {r0, r1, r2}
 8003560:	8033      	strh	r3, [r6, #0]
					sprintf (string[3], "Voltage:%d.%d V", (int) nodes[lastMessageFrom].voltage, ((int) (nodes[lastMessageFrom].voltage * 10) % 10));
 8003562:	443c      	add	r4, r7
 8003564:	6966      	ldr	r6, [r4, #20]
 8003566:	49a7      	ldr	r1, [pc, #668]	; (8003804 <lcdRoutine+0xcb8>)
 8003568:	4630      	mov	r0, r6
 800356a:	f7fc ff05 	bl	8000378 <__aeabi_fmul>
 800356e:	f7fd f8c9 	bl	8000704 <__aeabi_f2iz>
 8003572:	4603      	mov	r3, r0
 8003574:	4aa4      	ldr	r2, [pc, #656]	; (8003808 <lcdRoutine+0xcbc>)
 8003576:	17c4      	asrs	r4, r0, #31
 8003578:	fb82 1200 	smull	r1, r2, r2, r0
 800357c:	ebc4 04a2 	rsb	r4, r4, r2, asr #2
 8003580:	4630      	mov	r0, r6
 8003582:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003586:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
 800358a:	f7fd f8bb 	bl	8000704 <__aeabi_f2iz>
 800358e:	499f      	ldr	r1, [pc, #636]	; (800380c <lcdRoutine+0xcc0>)
 8003590:	4602      	mov	r2, r0
 8003592:	4623      	mov	r3, r4
 8003594:	489e      	ldr	r0, [pc, #632]	; (8003810 <lcdRoutine+0xcc4>)
 8003596:	f007 f89b 	bl	800a6d0 <siprintf>
					sprintf (string[4], "Temperature:%d.%d C", (int) nodes[lastMessageFrom].temperature,
 800359a:	782b      	ldrb	r3, [r5, #0]
 800359c:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 80035a0:	69d8      	ldr	r0, [r3, #28]
 80035a2:	f7fd f8af 	bl	8000704 <__aeabi_f2iz>
 80035a6:	2300      	movs	r3, #0
 80035a8:	4602      	mov	r2, r0
 80035aa:	499a      	ldr	r1, [pc, #616]	; (8003814 <lcdRoutine+0xcc8>)
 80035ac:	489a      	ldr	r0, [pc, #616]	; (8003818 <lcdRoutine+0xccc>)
 80035ae:	f007 f88f 	bl	800a6d0 <siprintf>
					sprintf (string[5], "Next link in %d s", nodes[lastMessageFrom].delay);
 80035b2:	782b      	ldrb	r3, [r5, #0]
 80035b4:	4999      	ldr	r1, [pc, #612]	; (800381c <lcdRoutine+0xcd0>)
 80035b6:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 80035ba:	891a      	ldrh	r2, [r3, #8]
 80035bc:	4898      	ldr	r0, [pc, #608]	; (8003820 <lcdRoutine+0xcd4>)
 80035be:	f007 f887 	bl	800a6d0 <siprintf>
					sprintf (string[6], "Max delay: %lu s", absoluteMaxDelay);
 80035c2:	4b98      	ldr	r3, [pc, #608]	; (8003824 <lcdRoutine+0xcd8>)
 80035c4:	4998      	ldr	r1, [pc, #608]	; (8003828 <lcdRoutine+0xcdc>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	4898      	ldr	r0, [pc, #608]	; (800382c <lcdRoutine+0xce0>)
 80035ca:	f007 f881 	bl	800a6d0 <siprintf>
					sprintf (string[7], "ADC: %u", adc);
 80035ce:	4b98      	ldr	r3, [pc, #608]	; (8003830 <lcdRoutine+0xce4>)
 80035d0:	4998      	ldr	r1, [pc, #608]	; (8003834 <lcdRoutine+0xce8>)
 80035d2:	881a      	ldrh	r2, [r3, #0]
 80035d4:	4898      	ldr	r0, [pc, #608]	; (8003838 <lcdRoutine+0xcec>)
 80035d6:	f007 f87b 	bl	800a6d0 <siprintf>
	ssd1306_Clean ();
 80035da:	4d85      	ldr	r5, [pc, #532]	; (80037f0 <lcdRoutine+0xca4>)
 80035dc:	f002 f944 	bl	8005868 <ssd1306_Clean>
 80035e0:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 80035e2:	2400      	movs	r4, #0
			ssd1306_GotoXY (0, i);
 80035e4:	4621      	mov	r1, r4
 80035e6:	2000      	movs	r0, #0
 80035e8:	f002 f900 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 80035ec:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 80035ee:	4630      	mov	r0, r6
 80035f0:	f002 f904 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 80035f4:	2c08      	cmp	r4, #8
 80035f6:	f106 0640 	add.w	r6, r6, #64	; 0x40
 80035fa:	d1f3      	bne.n	80035e4 <lcdRoutine+0xa98>
	ssd1306_Update ();
 80035fc:	f002 f93c 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8003600:	2400      	movs	r4, #0
	UC1609_Clean ();
 8003602:	f7fd fa97 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8003606:	b2e1      	uxtb	r1, r4
 8003608:	2000      	movs	r0, #0
 800360a:	f7fd f9e9 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 800360e:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8003610:	4628      	mov	r0, r5
 8003612:	f7fd fa97 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8003616:	2c08      	cmp	r4, #8
 8003618:	f105 0540 	add.w	r5, r5, #64	; 0x40
 800361c:	d1f3      	bne.n	8003606 <lcdRoutine+0xaba>
	UC1609_UpdateScreen ();
 800361e:	f7fd f9eb 	bl	80009f8 <UC1609_UpdateScreen>
}
 8003622:	f7ff bae4 	b.w	8002bee <lcdRoutine+0xa2>
			sprintf (string[0], "Node settings");
 8003626:	4c72      	ldr	r4, [pc, #456]	; (80037f0 <lcdRoutine+0xca4>)
			string[1 + menuPosition][0] = 0x83;
 8003628:	f04f 0e83 	mov.w	lr, #131	; 0x83
			sprintf (string[0], "Node settings");
 800362c:	4625      	mov	r5, r4
 800362e:	4b83      	ldr	r3, [pc, #524]	; (800383c <lcdRoutine+0xcf0>)
			sprintf (string[1], " Working Interval");
 8003630:	f8df c270 	ldr.w	ip, [pc, #624]	; 80038a4 <lcdRoutine+0xd58>
			sprintf (string[0], "Node settings");
 8003634:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003636:	c507      	stmia	r5!, {r0, r1, r2}
			sprintf (string[1], " Working Interval");
 8003638:	f104 0740 	add.w	r7, r4, #64	; 0x40
			sprintf (string[0], "Node settings");
 800363c:	802b      	strh	r3, [r5, #0]
			sprintf (string[2], " Use LED");
 800363e:	4e80      	ldr	r6, [pc, #512]	; (8003840 <lcdRoutine+0xcf4>)
			sprintf (string[1], " Working Interval");
 8003640:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003644:	c70f      	stmia	r7!, {r0, r1, r2, r3}
			sprintf (string[2], " Use LED");
 8003646:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800364a:	f104 0380 	add.w	r3, r4, #128	; 0x80
 800364e:	c303      	stmia	r3!, {r0, r1}
			sprintf (string[3], " Clean saved data");
 8003650:	4e7c      	ldr	r6, [pc, #496]	; (8003844 <lcdRoutine+0xcf8>)
			sprintf (string[1], " Working Interval");
 8003652:	f8dc 1000 	ldr.w	r1, [ip]
			sprintf (string[3], " Clean saved data");
 8003656:	f104 05c0 	add.w	r5, r4, #192	; 0xc0
			sprintf (string[2], " Use LED");
 800365a:	701a      	strb	r2, [r3, #0]
			sprintf (string[1], " Working Interval");
 800365c:	8039      	strh	r1, [r7, #0]
			string[1 + menuPosition][0] = 0x83;
 800365e:	f8df c1f8 	ldr.w	ip, [pc, #504]	; 8003858 <lcdRoutine+0xd0c>
			sprintf (string[3], " Clean saved data");
 8003662:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003664:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003666:	6832      	ldr	r2, [r6, #0]
			string[1 + menuPosition][0] = 0x83;
 8003668:	f99c 3000 	ldrsb.w	r3, [ip]
			sprintf (string[3], " Clean saved data");
 800366c:	802a      	strh	r2, [r5, #0]
			string[1 + menuPosition][0] = 0x83;
 800366e:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 8003672:	f884 e040 	strb.w	lr, [r4, #64]	; 0x40
			break;
 8003676:	f7ff baba 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[2], " Mask:No Alarm");
 800367a:	4b73      	ldr	r3, [pc, #460]	; (8003848 <lcdRoutine+0xcfc>)
 800367c:	4e60      	ldr	r6, [pc, #384]	; (8003800 <lcdRoutine+0xcb4>)
 800367e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003680:	c607      	stmia	r6!, {r0, r1, r2}
 8003682:	0c1a      	lsrs	r2, r3, #16
 8003684:	f826 3b02 	strh.w	r3, [r6], #2
 8003688:	7032      	strb	r2, [r6, #0]
			string[1 + menuPosition][0] = 0x83;
 800368a:	2683      	movs	r6, #131	; 0x83
			sprintf (string[3], nodes[selectedNode].disarmRequest ? " Disarmed" : " Armed");
 800368c:	197b      	adds	r3, r7, r5
 800368e:	7b99      	ldrb	r1, [r3, #14]
 8003690:	4a6e      	ldr	r2, [pc, #440]	; (800384c <lcdRoutine+0xd00>)
 8003692:	4b6f      	ldr	r3, [pc, #444]	; (8003850 <lcdRoutine+0xd04>)
 8003694:	485e      	ldr	r0, [pc, #376]	; (8003810 <lcdRoutine+0xcc4>)
 8003696:	2900      	cmp	r1, #0
 8003698:	bf14      	ite	ne
 800369a:	4611      	movne	r1, r2
 800369c:	4619      	moveq	r1, r3
 800369e:	f007 f817 	bl	800a6d0 <siprintf>
			sprintf (string[4], " Config Node");
 80036a2:	4d5d      	ldr	r5, [pc, #372]	; (8003818 <lcdRoutine+0xccc>)
 80036a4:	4b6b      	ldr	r3, [pc, #428]	; (8003854 <lcdRoutine+0xd08>)
 80036a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a8:	c507      	stmia	r5!, {r0, r1, r2}
			string[1 + menuPosition][0] = 0x83;
 80036aa:	4a6b      	ldr	r2, [pc, #428]	; (8003858 <lcdRoutine+0xd0c>)
			sprintf (string[4], " Config Node");
 80036ac:	702b      	strb	r3, [r5, #0]
			string[1 + menuPosition][0] = 0x83;
 80036ae:	f992 3000 	ldrsb.w	r3, [r2]
 80036b2:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 80036b6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
			break;
 80036ba:	f7ff ba98 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[2], " Mask:Only Door");
 80036be:	4b67      	ldr	r3, [pc, #412]	; (800385c <lcdRoutine+0xd10>)
 80036c0:	4e4f      	ldr	r6, [pc, #316]	; (8003800 <lcdRoutine+0xcb4>)
 80036c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c4:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
					break;
 80036c8:	e7df      	b.n	800368a <lcdRoutine+0xb3e>
					sprintf (string[2], " Mask:Full Alarm");
 80036ca:	f8df c1dc 	ldr.w	ip, [pc, #476]	; 80038a8 <lcdRoutine+0xd5c>
 80036ce:	4e4c      	ldr	r6, [pc, #304]	; (8003800 <lcdRoutine+0xcb4>)
 80036d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80036d4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80036d6:	f8dc 3000 	ldr.w	r3, [ip]
 80036da:	7033      	strb	r3, [r6, #0]
					break;
 80036dc:	e7d5      	b.n	800368a <lcdRoutine+0xb3e>
					sprintf (string[2], " Mask:Only Power");
 80036de:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 80038ac <lcdRoutine+0xd60>
 80036e2:	e7f4      	b.n	80036ce <lcdRoutine+0xb82>
					sprintf (string[0], "RSSI Indicator");
 80036e4:	4b5e      	ldr	r3, [pc, #376]	; (8003860 <lcdRoutine+0xd14>)
 80036e6:	4c42      	ldr	r4, [pc, #264]	; (80037f0 <lcdRoutine+0xca4>)
 80036e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ea:	c407      	stmia	r4!, {r0, r1, r2}
 80036ec:	0c1a      	lsrs	r2, r3, #16
 80036ee:	f824 3b02 	strh.w	r3, [r4], #2
 80036f2:	7022      	strb	r2, [r4, #0]
					break;
 80036f4:	f7ff ba7b 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[0], "Ping test");
 80036f8:	4a5a      	ldr	r2, [pc, #360]	; (8003864 <lcdRoutine+0xd18>)
 80036fa:	4b3d      	ldr	r3, [pc, #244]	; (80037f0 <lcdRoutine+0xca4>)
 80036fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80036fe:	c303      	stmia	r3!, {r0, r1}
 8003700:	801a      	strh	r2, [r3, #0]
					break;
 8003702:	f7ff ba74 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[0], "Receiver Test");
 8003706:	4b58      	ldr	r3, [pc, #352]	; (8003868 <lcdRoutine+0xd1c>)
 8003708:	4c39      	ldr	r4, [pc, #228]	; (80037f0 <lcdRoutine+0xca4>)
 800370a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800370c:	c407      	stmia	r4!, {r0, r1, r2}
 800370e:	8023      	strh	r3, [r4, #0]
					break;
 8003710:	f7ff ba6d 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[0], "Transmitter test");
 8003714:	4d55      	ldr	r5, [pc, #340]	; (800386c <lcdRoutine+0xd20>)
 8003716:	4c36      	ldr	r4, [pc, #216]	; (80037f0 <lcdRoutine+0xca4>)
 8003718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800371a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	7023      	strb	r3, [r4, #0]
					break;
 8003720:	f7ff ba65 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[0], "Color test");
 8003724:	4a52      	ldr	r2, [pc, #328]	; (8003870 <lcdRoutine+0xd24>)
 8003726:	4b32      	ldr	r3, [pc, #200]	; (80037f0 <lcdRoutine+0xca4>)
 8003728:	ca07      	ldmia	r2, {r0, r1, r2}
 800372a:	c303      	stmia	r3!, {r0, r1}
 800372c:	0c11      	lsrs	r1, r2, #16
 800372e:	f823 2b02 	strh.w	r2, [r3], #2
 8003732:	7019      	strb	r1, [r3, #0]
					break;
 8003734:	f7ff ba5b 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[0], "Work");
 8003738:	4c2d      	ldr	r4, [pc, #180]	; (80037f0 <lcdRoutine+0xca4>)
 800373a:	4b4e      	ldr	r3, [pc, #312]	; (8003874 <lcdRoutine+0xd28>)
 800373c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003740:	6020      	str	r0, [r4, #0]
 8003742:	7121      	strb	r1, [r4, #4]
					break;
 8003744:	f7ff ba53 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[1], "15.6 kHz");
 8003748:	4a4b      	ldr	r2, [pc, #300]	; (8003878 <lcdRoutine+0xd2c>)
 800374a:	4b2b      	ldr	r3, [pc, #172]	; (80037f8 <lcdRoutine+0xcac>)
 800374c:	ca07      	ldmia	r2, {r0, r1, r2}
 800374e:	c303      	stmia	r3!, {r0, r1}
 8003750:	701a      	strb	r2, [r3, #0]
			if (currentInterval != BAD_INTERVAL)
 8003752:	4d4a      	ldr	r5, [pc, #296]	; (800387c <lcdRoutine+0xd30>)
 8003754:	f995 3000 	ldrsb.w	r3, [r5]
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	f000 80c1 	beq.w	80038e0 <lcdRoutine+0xd94>
					sprintf (string[2], "Power:%u dB", legalFreq.interval[currentInterval].maxPower);
 800375e:	4c48      	ldr	r4, [pc, #288]	; (8003880 <lcdRoutine+0xd34>)
 8003760:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003764:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003768:	7b1a      	ldrb	r2, [r3, #12]
 800376a:	4946      	ldr	r1, [pc, #280]	; (8003884 <lcdRoutine+0xd38>)
 800376c:	4824      	ldr	r0, [pc, #144]	; (8003800 <lcdRoutine+0xcb4>)
 800376e:	f006 ffaf 	bl	800a6d0 <siprintf>
					sprintf (string[3], "Air use.%u.%u%%", legalFreq.interval[currentInterval].maxAirUse / 10,
 8003772:	f995 3000 	ldrsb.w	r3, [r5]
 8003776:	4a44      	ldr	r2, [pc, #272]	; (8003888 <lcdRoutine+0xd3c>)
 8003778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800377c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8003780:	89e3      	ldrh	r3, [r4, #14]
 8003782:	4942      	ldr	r1, [pc, #264]	; (800388c <lcdRoutine+0xd40>)
 8003784:	fba2 0203 	umull	r0, r2, r2, r3
 8003788:	08d2      	lsrs	r2, r2, #3
 800378a:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800378e:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8003792:	b29b      	uxth	r3, r3
 8003794:	481e      	ldr	r0, [pc, #120]	; (8003810 <lcdRoutine+0xcc4>)
 8003796:	f006 ff9b 	bl	800a6d0 <siprintf>
 800379a:	f7ff ba28 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[1], "10.4 kHz");
 800379e:	4a3c      	ldr	r2, [pc, #240]	; (8003890 <lcdRoutine+0xd44>)
 80037a0:	4b15      	ldr	r3, [pc, #84]	; (80037f8 <lcdRoutine+0xcac>)
 80037a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80037a4:	c303      	stmia	r3!, {r0, r1}
 80037a6:	701a      	strb	r2, [r3, #0]
					break;
 80037a8:	e7d3      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[1], "7.8 kHz");
 80037aa:	4a3a      	ldr	r2, [pc, #232]	; (8003894 <lcdRoutine+0xd48>)
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <lcdRoutine+0xcac>)
 80037ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037b2:	e883 0003 	stmia.w	r3, {r0, r1}
					break;
 80037b6:	e7cc      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[1], "500 kHz");
 80037b8:	4a37      	ldr	r2, [pc, #220]	; (8003898 <lcdRoutine+0xd4c>)
 80037ba:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <lcdRoutine+0xcac>)
 80037bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037c0:	e883 0003 	stmia.w	r3, {r0, r1}
					break;
 80037c4:	e7c5      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[1], "250 kHz");
 80037c6:	4a35      	ldr	r2, [pc, #212]	; (800389c <lcdRoutine+0xd50>)
 80037c8:	4b0b      	ldr	r3, [pc, #44]	; (80037f8 <lcdRoutine+0xcac>)
 80037ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037ce:	e883 0003 	stmia.w	r3, {r0, r1}
					break;
 80037d2:	e7be      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[1], "125 kHz");
 80037d4:	4a32      	ldr	r2, [pc, #200]	; (80038a0 <lcdRoutine+0xd54>)
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <lcdRoutine+0xcac>)
 80037d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80037dc:	e883 0003 	stmia.w	r3, {r0, r1}
					break;
 80037e0:	e7b7      	b.n	8003752 <lcdRoutine+0xc06>
 80037e2:	bf00      	nop
 80037e4:	20000004 	.word	0x20000004
 80037e8:	20000c78 	.word	0x20000c78
 80037ec:	0800b184 	.word	0x0800b184
 80037f0:	200000f4 	.word	0x200000f4
 80037f4:	0800b198 	.word	0x0800b198
 80037f8:	20000134 	.word	0x20000134
 80037fc:	0800b1b8 	.word	0x0800b1b8
 8003800:	20000174 	.word	0x20000174
 8003804:	41200000 	.word	0x41200000
 8003808:	66666667 	.word	0x66666667
 800380c:	0800b1dc 	.word	0x0800b1dc
 8003810:	200001b4 	.word	0x200001b4
 8003814:	0800b1ec 	.word	0x0800b1ec
 8003818:	200001f4 	.word	0x200001f4
 800381c:	0800b200 	.word	0x0800b200
 8003820:	20000234 	.word	0x20000234
 8003824:	200000ac 	.word	0x200000ac
 8003828:	0800b214 	.word	0x0800b214
 800382c:	20000274 	.word	0x20000274
 8003830:	20000c20 	.word	0x20000c20
 8003834:	0800b228 	.word	0x0800b228
 8003838:	200002b4 	.word	0x200002b4
 800383c:	0800b358 	.word	0x0800b358
 8003840:	0800b37c 	.word	0x0800b37c
 8003844:	0800b388 	.word	0x0800b388
 8003848:	0800b780 	.word	0x0800b780
 800384c:	0800b170 	.word	0x0800b170
 8003850:	0800b17c 	.word	0x0800b17c
 8003854:	0800b7c8 	.word	0x0800b7c8
 8003858:	200000db 	.word	0x200000db
 800385c:	0800b7a4 	.word	0x0800b7a4
 8003860:	0800b81c 	.word	0x0800b81c
 8003864:	0800b810 	.word	0x0800b810
 8003868:	0800b800 	.word	0x0800b800
 800386c:	0800b7ec 	.word	0x0800b7ec
 8003870:	0800b7e0 	.word	0x0800b7e0
 8003874:	0800b7d8 	.word	0x0800b7d8
 8003878:	0800b4a4 	.word	0x0800b4a4
 800387c:	20001588 	.word	0x20001588
 8003880:	20000b5c 	.word	0x20000b5c
 8003884:	0800b438 	.word	0x0800b438
 8003888:	cccccccd 	.word	0xcccccccd
 800388c:	0800b444 	.word	0x0800b444
 8003890:	0800b498 	.word	0x0800b498
 8003894:	0800b490 	.word	0x0800b490
 8003898:	0800b4f0 	.word	0x0800b4f0
 800389c:	0800b4e8 	.word	0x0800b4e8
 80038a0:	0800b4e0 	.word	0x0800b4e0
 80038a4:	0800b368 	.word	0x0800b368
 80038a8:	0800b7b4 	.word	0x0800b7b4
 80038ac:	0800b790 	.word	0x0800b790
					sprintf (string[1], "62.5 kHz");
 80038b0:	4a2e      	ldr	r2, [pc, #184]	; (800396c <lcdRoutine+0xe20>)
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <lcdRoutine+0xe24>)
 80038b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80038b6:	c303      	stmia	r3!, {r0, r1}
 80038b8:	701a      	strb	r2, [r3, #0]
					break;
 80038ba:	e74a      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[1], "42.6 kHz");
 80038bc:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <lcdRoutine+0xe28>)
 80038be:	4b2c      	ldr	r3, [pc, #176]	; (8003970 <lcdRoutine+0xe24>)
 80038c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80038c2:	c303      	stmia	r3!, {r0, r1}
 80038c4:	701a      	strb	r2, [r3, #0]
					break;
 80038c6:	e744      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[1], "31.2 kHz");
 80038c8:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <lcdRoutine+0xe2c>)
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <lcdRoutine+0xe24>)
 80038cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80038ce:	c303      	stmia	r3!, {r0, r1}
 80038d0:	701a      	strb	r2, [r3, #0]
					break;
 80038d2:	e73e      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[1], "20.8 kHz");
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <lcdRoutine+0xe30>)
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <lcdRoutine+0xe24>)
 80038d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80038da:	c303      	stmia	r3!, {r0, r1}
 80038dc:	701a      	strb	r2, [r3, #0]
					break;
 80038de:	e738      	b.n	8003752 <lcdRoutine+0xc06>
					sprintf (string[3], "Not within ISM Band!");
 80038e0:	4d27      	ldr	r5, [pc, #156]	; (8003980 <lcdRoutine+0xe34>)
 80038e2:	4c28      	ldr	r4, [pc, #160]	; (8003984 <lcdRoutine+0xe38>)
 80038e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80038ec:	f844 0b04 	str.w	r0, [r4], #4
 80038f0:	7021      	strb	r1, [r4, #0]
 80038f2:	f7ff b97c 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[0], "Ждем сообщений");
 80038f6:	4d24      	ldr	r5, [pc, #144]	; (8003988 <lcdRoutine+0xe3c>)
 80038f8:	4c24      	ldr	r4, [pc, #144]	; (800398c <lcdRoutine+0xe40>)
 80038fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003902:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003906:	e668      	b.n	80035da <lcdRoutine+0xa8e>
				sprintf (string[1], "%s", netHandler.nets[selectedNetwork]);
 8003908:	f106 0130 	add.w	r1, r6, #48	; 0x30
 800390c:	4439      	add	r1, r7
 800390e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8003912:	f006 fefd 	bl	800a710 <strcpy>
 8003916:	f7ff b96a 	b.w	8002bee <lcdRoutine+0xa2>
				sprintf (string[1], "Off");
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <lcdRoutine+0xe44>)
 800391c:	642b      	str	r3, [r5, #64]	; 0x40
 800391e:	f7ff b966 	b.w	8002bee <lcdRoutine+0xa2>
					sprintf (string[3], "Not within ISM band");
 8003922:	4d1c      	ldr	r5, [pc, #112]	; (8003994 <lcdRoutine+0xe48>)
 8003924:	34ae      	adds	r4, #174	; 0xae
 8003926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	6023      	str	r3, [r4, #0]
 800392e:	f7ff b95e 	b.w	8002bee <lcdRoutine+0xa2>
				sprintf (string[2], "In progress...");
 8003932:	4b19      	ldr	r3, [pc, #100]	; (8003998 <lcdRoutine+0xe4c>)
 8003934:	3480      	adds	r4, #128	; 0x80
 8003936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003938:	c407      	stmia	r4!, {r0, r1, r2}
 800393a:	0c1a      	lsrs	r2, r3, #16
 800393c:	f824 3b02 	strh.w	r3, [r4], #2
 8003940:	7022      	strb	r2, [r4, #0]
 8003942:	f7ff baf9 	b.w	8002f38 <lcdRoutine+0x3ec>
						sprintf (string[2], "Powered by battery");
 8003946:	f8df c05c 	ldr.w	ip, [pc, #92]	; 80039a4 <lcdRoutine+0xe58>
 800394a:	4e14      	ldr	r6, [pc, #80]	; (800399c <lcdRoutine+0xe50>)
 800394c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003950:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003952:	f8dc 3000 	ldr.w	r3, [ip]
 8003956:	f826 3b02 	strh.w	r3, [r6], #2
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	7033      	strb	r3, [r6, #0]
 800395e:	e600      	b.n	8003562 <lcdRoutine+0xa16>
						sprintf (string[1], "Door: Closed");
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <lcdRoutine+0xe54>)
 8003962:	4e03      	ldr	r6, [pc, #12]	; (8003970 <lcdRoutine+0xe24>)
 8003964:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003966:	c607      	stmia	r6!, {r0, r1, r2}
 8003968:	7033      	strb	r3, [r6, #0]
 800396a:	e5f0      	b.n	800354e <lcdRoutine+0xa02>
 800396c:	0800b4d4 	.word	0x0800b4d4
 8003970:	20000134 	.word	0x20000134
 8003974:	0800b4c8 	.word	0x0800b4c8
 8003978:	0800b4bc 	.word	0x0800b4bc
 800397c:	0800b4b0 	.word	0x0800b4b0
 8003980:	0800b454 	.word	0x0800b454
 8003984:	200001b4 	.word	0x200001b4
 8003988:	0800b230 	.word	0x0800b230
 800398c:	200000f4 	.word	0x200000f4
 8003990:	0066664f 	.word	0x0066664f
 8003994:	0800b570 	.word	0x0800b570
 8003998:	0800b60c 	.word	0x0800b60c
 800399c:	20000174 	.word	0x20000174
 80039a0:	0800b1a8 	.word	0x0800b1a8
 80039a4:	0800b1c8 	.word	0x0800b1c8

080039a8 <colorTest>:
	flag.lcdRefreshRequest = 1;
 80039a8:	4c6d      	ldr	r4, [pc, #436]	; (8003b60 <colorTest+0x1b8>)
{
 80039aa:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	flag.lcdRefreshRequest = 1;
 80039ae:	7823      	ldrb	r3, [r4, #0]
{
 80039b0:	b083      	sub	sp, #12
	flag.lcdRefreshRequest = 1;
 80039b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039b6:	7023      	strb	r3, [r4, #0]
					sprintf (string[1], " Red:%02X", red);
 80039b8:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <colorTest+0x1bc>)
 80039ba:	4e6b      	ldr	r6, [pc, #428]	; (8003b68 <colorTest+0x1c0>)
 80039bc:	3336      	adds	r3, #54	; 0x36
 80039be:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8003b84 <colorTest+0x1dc>
 80039c2:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8003b88 <colorTest+0x1e0>
 80039c6:	9301      	str	r3, [sp, #4]
			if (flag.encInc)
 80039c8:	7823      	ldrb	r3, [r4, #0]
 80039ca:	07d8      	lsls	r0, r3, #31
 80039cc:	d511      	bpl.n	80039f2 <colorTest+0x4a>
					switch (currentCol)
 80039ce:	7832      	ldrb	r2, [r6, #0]
					flag.encInc = 0;
 80039d0:	f36f 0300 	bfc	r3, #0, #1
					switch (currentCol)
 80039d4:	2a01      	cmp	r2, #1
					flag.encInc = 0;
 80039d6:	7023      	strb	r3, [r4, #0]
					switch (currentCol)
 80039d8:	f000 80a5 	beq.w	8003b26 <colorTest+0x17e>
 80039dc:	2a02      	cmp	r2, #2
 80039de:	f000 809c 	beq.w	8003b1a <colorTest+0x172>
 80039e2:	2a00      	cmp	r2, #0
 80039e4:	f000 80a4 	beq.w	8003b30 <colorTest+0x188>
					flag.lcdRefreshRequest = 1;
 80039e8:	7822      	ldrb	r2, [r4, #0]
 80039ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ee:	4613      	mov	r3, r2
 80039f0:	7022      	strb	r2, [r4, #0]
			if (flag.encDec)
 80039f2:	0799      	lsls	r1, r3, #30
 80039f4:	d512      	bpl.n	8003a1c <colorTest+0x74>
					flag.encDec = 0;
 80039f6:	7822      	ldrb	r2, [r4, #0]
					switch (currentCol)
 80039f8:	7833      	ldrb	r3, [r6, #0]
					flag.encDec = 0;
 80039fa:	f36f 0241 	bfc	r2, #1, #1
					switch (currentCol)
 80039fe:	2b01      	cmp	r3, #1
					flag.encDec = 0;
 8003a00:	7022      	strb	r2, [r4, #0]
					switch (currentCol)
 8003a02:	f000 80a7 	beq.w	8003b54 <colorTest+0x1ac>
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	f000 809e 	beq.w	8003b48 <colorTest+0x1a0>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 8095 	beq.w	8003b3c <colorTest+0x194>
					flag.lcdRefreshRequest = 1;
 8003a12:	7822      	ldrb	r2, [r4, #0]
 8003a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a18:	4613      	mov	r3, r2
 8003a1a:	7022      	strb	r2, [r4, #0]
			if (flag.encOk)
 8003a1c:	075a      	lsls	r2, r3, #29
 8003a1e:	d50d      	bpl.n	8003a3c <colorTest+0x94>
					currentCol = (++currentCol > 2) ? 0 : currentCol;
 8003a20:	7832      	ldrb	r2, [r6, #0]
					flag.encOk = 0;
 8003a22:	7821      	ldrb	r1, [r4, #0]
					currentCol = (++currentCol > 2) ? 0 : currentCol;
 8003a24:	3201      	adds	r2, #1
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	2a03      	cmp	r2, #3
					flag.lcdRefreshRequest = 1;
 8003a2a:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 8003a2e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
					currentCol = (++currentCol > 2) ? 0 : currentCol;
 8003a32:	bf28      	it	cs
 8003a34:	2200      	movcs	r2, #0
 8003a36:	460b      	mov	r3, r1
 8003a38:	7032      	strb	r2, [r6, #0]
					flag.lcdRefreshRequest = 1;
 8003a3a:	7021      	strb	r1, [r4, #0]
			if (flag.lcdRefreshRequest == 1)
 8003a3c:	065b      	lsls	r3, r3, #25
 8003a3e:	d552      	bpl.n	8003ae6 <colorTest+0x13e>
					flag.lcdRefreshRequest = 0;
 8003a40:	7823      	ldrb	r3, [r4, #0]
					sprintf (string[0], "Color test");
 8003a42:	4d4a      	ldr	r5, [pc, #296]	; (8003b6c <colorTest+0x1c4>)
					flag.lcdRefreshRequest = 0;
 8003a44:	f36f 1386 	bfc	r3, #6, #1
 8003a48:	7023      	strb	r3, [r4, #0]
					clearStrings ();
 8003a4a:	f7fd fb69 	bl	8001120 <clearStrings>
					sprintf (string[0], "Color test");
 8003a4e:	4b48      	ldr	r3, [pc, #288]	; (8003b70 <colorTest+0x1c8>)
 8003a50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a54:	c503      	stmia	r5!, {r0, r1}
 8003a56:	0c13      	lsrs	r3, r2, #16
					sprintf (string[1], " Red:%02X", red);
 8003a58:	4946      	ldr	r1, [pc, #280]	; (8003b74 <colorTest+0x1cc>)
					sprintf (string[0], "Color test");
 8003a5a:	802a      	strh	r2, [r5, #0]
 8003a5c:	70ab      	strb	r3, [r5, #2]
					sprintf (string[1], " Red:%02X", red);
 8003a5e:	f899 2000 	ldrb.w	r2, [r9]
 8003a62:	9801      	ldr	r0, [sp, #4]
 8003a64:	f006 fe34 	bl	800a6d0 <siprintf>
					sprintf (string[2], " Green:%02X", green);
 8003a68:	4b43      	ldr	r3, [pc, #268]	; (8003b78 <colorTest+0x1d0>)
 8003a6a:	4944      	ldr	r1, [pc, #272]	; (8003b7c <colorTest+0x1d4>)
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8003a72:	f006 fe2d 	bl	800a6d0 <siprintf>
					sprintf (string[3], " Blue:%02X", blue);
 8003a76:	f898 2000 	ldrb.w	r2, [r8]
 8003a7a:	4941      	ldr	r1, [pc, #260]	; (8003b80 <colorTest+0x1d8>)
 8003a7c:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 8003a80:	f006 fe26 	bl	800a6d0 <siprintf>
					if (currentCol == 0)
 8003a84:	7833      	ldrb	r3, [r6, #0]
 8003a86:	bbd3      	cbnz	r3, 8003afe <colorTest+0x156>
						string[1][0] = 0x83;
 8003a88:	2383      	movs	r3, #131	; 0x83
 8003a8a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	ssd1306_Clean ();
 8003a8e:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 8003b6c <colorTest+0x1c4>
 8003a92:	f001 fee9 	bl	8005868 <ssd1306_Clean>
 8003a96:	465d      	mov	r5, fp
	for (int i = 0; i < 8; i++)
 8003a98:	f04f 0a00 	mov.w	sl, #0
			ssd1306_GotoXY (0, i);
 8003a9c:	4651      	mov	r1, sl
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f001 fea4 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8003aa4:	f10a 0a01 	add.w	sl, sl, #1
			ssd1306_PutString (string[i]);
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f001 fea7 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8003aae:	f1ba 0f08 	cmp.w	sl, #8
 8003ab2:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8003ab6:	d1f1      	bne.n	8003a9c <colorTest+0xf4>
	ssd1306_Update ();
 8003ab8:	f001 fede 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8003abc:	f04f 0a00 	mov.w	sl, #0
	UC1609_Clean ();
 8003ac0:	f7fd f838 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8003ac4:	fa5f f18a 	uxtb.w	r1, sl
 8003ac8:	2000      	movs	r0, #0
 8003aca:	f7fc ff89 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8003ace:	f10a 0a01 	add.w	sl, sl, #1
			UC1609_PutString (string[i]);
 8003ad2:	4658      	mov	r0, fp
 8003ad4:	f7fd f836 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8003ad8:	f1ba 0f08 	cmp.w	sl, #8
 8003adc:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8003ae0:	d1f0      	bne.n	8003ac4 <colorTest+0x11c>
	UC1609_UpdateScreen ();
 8003ae2:	f7fc ff89 	bl	80009f8 <UC1609_UpdateScreen>
			wsSetColor (0, red, green, blue);
 8003ae6:	4a24      	ldr	r2, [pc, #144]	; (8003b78 <colorTest+0x1d0>)
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f898 3000 	ldrb.w	r3, [r8]
 8003aee:	7812      	ldrb	r2, [r2, #0]
 8003af0:	f899 1000 	ldrb.w	r1, [r9]
 8003af4:	f003 fa26 	bl	8006f44 <wsSetColor>
			wsPrepareArray ();
 8003af8:	f003 fa68 	bl	8006fcc <wsPrepareArray>
		{
 8003afc:	e764      	b.n	80039c8 <colorTest+0x20>
					if (currentCol == 1)
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d104      	bne.n	8003b0c <colorTest+0x164>
						string[2][0] = 0x83;
 8003b02:	2383      	movs	r3, #131	; 0x83
 8003b04:	4a19      	ldr	r2, [pc, #100]	; (8003b6c <colorTest+0x1c4>)
 8003b06:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
					if (currentCol == 2)
 8003b0a:	e7c0      	b.n	8003a8e <colorTest+0xe6>
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d1be      	bne.n	8003a8e <colorTest+0xe6>
						string[3][0] = 0x83;
 8003b10:	2383      	movs	r3, #131	; 0x83
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <colorTest+0x1c4>)
 8003b14:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 8003b18:	e7b9      	b.n	8003a8e <colorTest+0xe6>
							blue++;
 8003b1a:	f898 3000 	ldrb.w	r3, [r8]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f888 3000 	strb.w	r3, [r8]
							break;
 8003b24:	e760      	b.n	80039e8 <colorTest+0x40>
							green++;
 8003b26:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <colorTest+0x1d0>)
 8003b28:	7813      	ldrb	r3, [r2, #0]
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	7013      	strb	r3, [r2, #0]
							break;
 8003b2e:	e75b      	b.n	80039e8 <colorTest+0x40>
							red++;
 8003b30:	f899 3000 	ldrb.w	r3, [r9]
 8003b34:	3301      	adds	r3, #1
 8003b36:	f889 3000 	strb.w	r3, [r9]
							break;
 8003b3a:	e755      	b.n	80039e8 <colorTest+0x40>
							red--;
 8003b3c:	f899 3000 	ldrb.w	r3, [r9]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	f889 3000 	strb.w	r3, [r9]
							break;
 8003b46:	e764      	b.n	8003a12 <colorTest+0x6a>
							blue--;
 8003b48:	f898 3000 	ldrb.w	r3, [r8]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	f888 3000 	strb.w	r3, [r8]
							break;
 8003b52:	e75e      	b.n	8003a12 <colorTest+0x6a>
							green--;
 8003b54:	4a08      	ldr	r2, [pc, #32]	; (8003b78 <colorTest+0x1d0>)
 8003b56:	7813      	ldrb	r3, [r2, #0]
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	7013      	strb	r3, [r2, #0]
							break;
 8003b5c:	e759      	b.n	8003a12 <colorTest+0x6a>
 8003b5e:	bf00      	nop
 8003b60:	20000adc 	.word	0x20000adc
 8003b64:	200000fe 	.word	0x200000fe
 8003b68:	200000b1 	.word	0x200000b1
 8003b6c:	200000f4 	.word	0x200000f4
 8003b70:	0800b7e0 	.word	0x0800b7e0
 8003b74:	0800b82c 	.word	0x0800b82c
 8003b78:	200000b3 	.word	0x200000b3
 8003b7c:	0800b838 	.word	0x0800b838
 8003b80:	0800b844 	.word	0x0800b844
 8003b84:	200000ec 	.word	0x200000ec
 8003b88:	200000b0 	.word	0x200000b0

08003b8c <radioTestTransmit>:
{
 8003b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b90:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003d44 <radioTestTransmit+0x1b8>
 8003b94:	4b61      	ldr	r3, [pc, #388]	; (8003d1c <radioTestTransmit+0x190>)
					SX127X_config (&myRadio);
 8003b96:	46c1      	mov	r9, r8
{
 8003b98:	b083      	sub	sp, #12
	SX127X_defaultConfig (&myRadio);
 8003b9a:	4640      	mov	r0, r8
	flag.lcdRefreshRequest = 1;
 8003b9c:	4d60      	ldr	r5, [pc, #384]	; (8003d20 <radioTestTransmit+0x194>)
 8003b9e:	9301      	str	r3, [sp, #4]
	SX127X_defaultConfig (&myRadio);
 8003ba0:	f002 fa8e 	bl	80060c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 8003ba4:	f7fd fb3c 	bl	8001220 <tryLoadSettings>
	SX127X_config (&myRadio);
 8003ba8:	4640      	mov	r0, r8
 8003baa:	f002 f8ef 	bl	8005d8c <SX127X_config>
	flag.lcdRefreshRequest = 1;
 8003bae:	782b      	ldrb	r3, [r5, #0]
 8003bb0:	4c5c      	ldr	r4, [pc, #368]	; (8003d24 <radioTestTransmit+0x198>)
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb6:	f8df a190 	ldr.w	sl, [pc, #400]	; 8003d48 <radioTestTransmit+0x1bc>
 8003bba:	702b      	strb	r3, [r5, #0]
{
 8003bbc:	2600      	movs	r6, #0
					if (power - 12 == i)
 8003bbe:	7823      	ldrb	r3, [r4, #0]
 8003bc0:	b2f0      	uxtb	r0, r6
 8003bc2:	3b0c      	subs	r3, #12
 8003bc4:	42b3      	cmp	r3, r6
						wsSetColor (i, GREEN);
 8003bc6:	f04f 0300 	mov.w	r3, #0
 8003bca:	bf07      	ittee	eq
 8003bcc:	2210      	moveq	r2, #16
 8003bce:	4619      	moveq	r1, r3
						wsSetColor (i, BLACK);
 8003bd0:	461a      	movne	r2, r3
 8003bd2:	4619      	movne	r1, r3
 8003bd4:	3601      	adds	r6, #1
 8003bd6:	f003 f9b5 	bl	8006f44 <wsSetColor>
			for (i = 0; i < 9; i++)
 8003bda:	2e09      	cmp	r6, #9
 8003bdc:	d1ef      	bne.n	8003bbe <radioTestTransmit+0x32>
			wsPrepareArray ();
 8003bde:	f003 f9f5 	bl	8006fcc <wsPrepareArray>
			if (myRadio.status != TX)
 8003be2:	f898 3010 	ldrb.w	r3, [r8, #16]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d01c      	beq.n	8003c24 <radioTestTransmit+0x98>
					if (radioTxTestMode == 0)
 8003bea:	f89a 3000 	ldrb.w	r3, [sl]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f040 8087 	bne.w	8003d02 <radioTestTransmit+0x176>
						power = (power + 1 > 20) ? 10 : power + 1;
 8003bf4:	7823      	ldrb	r3, [r4, #0]
 8003bf6:	2b13      	cmp	r3, #19
 8003bf8:	bf8e      	itee	hi
 8003bfa:	230a      	movhi	r3, #10
 8003bfc:	3301      	addls	r3, #1
 8003bfe:	b2db      	uxtbls	r3, r3
					SX127X_config (&myRadio);
 8003c00:	4648      	mov	r0, r9
						power = radioTxTestMode + 9;
 8003c02:	7023      	strb	r3, [r4, #0]
					myRadio.power = power;
 8003c04:	f888 3004 	strb.w	r3, [r8, #4]
					SX127X_config (&myRadio);
 8003c08:	f002 f8c0 	bl	8005d8c <SX127X_config>
					myRadio.txBuf[0] = 'a' + power - 10;
 8003c0c:	7823      	ldrb	r3, [r4, #0]
					SX127X_transmitAsync (&myRadio, 3);
 8003c0e:	2103      	movs	r1, #3
					myRadio.txBuf[0] = 'a' + power - 10;
 8003c10:	3357      	adds	r3, #87	; 0x57
					SX127X_transmitAsync (&myRadio, 3);
 8003c12:	4648      	mov	r0, r9
					myRadio.txBuf[0] = 'a' + power - 10;
 8003c14:	f888 303d 	strb.w	r3, [r8, #61]	; 0x3d
					SX127X_transmitAsync (&myRadio, 3);
 8003c18:	f002 fc1e 	bl	8006458 <SX127X_transmitAsync>
					flag.lcdRefreshRequest = 1;
 8003c1c:	782b      	ldrb	r3, [r5, #0]
 8003c1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c22:	702b      	strb	r3, [r5, #0]
			if (flag.encInc || flag.encDec)
 8003c24:	782b      	ldrb	r3, [r5, #0]
 8003c26:	079e      	lsls	r6, r3, #30
 8003c28:	d01a      	beq.n	8003c60 <radioTestTransmit+0xd4>
					if (flag.encInc)
 8003c2a:	07d8      	lsls	r0, r3, #31
 8003c2c:	d508      	bpl.n	8003c40 <radioTestTransmit+0xb4>
						radioTxTestMode = (radioTxTestMode == 11) ? 0 : radioTxTestMode + 1;
 8003c2e:	f89a 2000 	ldrb.w	r2, [sl]
 8003c32:	2a0b      	cmp	r2, #11
 8003c34:	bf0e      	itee	eq
 8003c36:	2200      	moveq	r2, #0
 8003c38:	3201      	addne	r2, #1
 8003c3a:	b2d2      	uxtbne	r2, r2
 8003c3c:	f88a 2000 	strb.w	r2, [sl]
					if (flag.encDec)
 8003c40:	0799      	lsls	r1, r3, #30
 8003c42:	d507      	bpl.n	8003c54 <radioTestTransmit+0xc8>
						radioTxTestMode = (radioTxTestMode == 0) ? 11 : radioTxTestMode - 1;
 8003c44:	f89a 3000 	ldrb.w	r3, [sl]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05d      	beq.n	8003d08 <radioTestTransmit+0x17c>
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	f88a 3000 	strb.w	r3, [sl]
					flag.encInc = 0;
 8003c54:	782b      	ldrb	r3, [r5, #0]
 8003c56:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8003c5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5e:	702b      	strb	r3, [r5, #0]
			SX127X_Routine (&myRadio);
 8003c60:	4648      	mov	r0, r9
 8003c62:	f002 fc05 	bl	8006470 <SX127X_Routine>
			if (flag.lcdRefreshRequest)
 8003c66:	782b      	ldrb	r3, [r5, #0]
 8003c68:	065a      	lsls	r2, r3, #25
 8003c6a:	d5a7      	bpl.n	8003bbc <radioTestTransmit+0x30>
					flag.lcdRefreshRequest = 0;
 8003c6c:	f36f 1386 	bfc	r3, #6, #1
 8003c70:	702b      	strb	r3, [r5, #0]
					clearStrings ();
 8003c72:	f7fd fa55 	bl	8001120 <clearStrings>
					sprintf (string[0], "Transmitter");
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <radioTestTransmit+0x19c>)
 8003c78:	9e01      	ldr	r6, [sp, #4]
 8003c7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c7e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
					sprintf (string[1], "Mode:");
 8003c82:	4a2a      	ldr	r2, [pc, #168]	; (8003d2c <radioTestTransmit+0x1a0>)
					if (!radioTxTestMode)
 8003c84:	f89a 3000 	ldrb.w	r3, [sl]
					sprintf (string[1], "Mode:");
 8003c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c8c:	4a28      	ldr	r2, [pc, #160]	; (8003d30 <radioTestTransmit+0x1a4>)
 8003c8e:	6010      	str	r0, [r2, #0]
 8003c90:	8091      	strh	r1, [r2, #4]
 8003c92:	3204      	adds	r2, #4
					if (!radioTxTestMode)
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d139      	bne.n	8003d0c <radioTestTransmit+0x180>
						sprintf (string[3], "Cyclic");
 8003c98:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <radioTestTransmit+0x1a8>)
 8003c9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003c9e:	0c0b      	lsrs	r3, r1, #16
 8003ca0:	67d0      	str	r0, [r2, #124]	; 0x7c
 8003ca2:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8003ca6:	f882 3082 	strb.w	r3, [r2, #130]	; 0x82
					sprintf (string[2], "Pow:%d dBm", power);
 8003caa:	4f1c      	ldr	r7, [pc, #112]	; (8003d1c <radioTestTransmit+0x190>)
 8003cac:	7822      	ldrb	r2, [r4, #0]
 8003cae:	4922      	ldr	r1, [pc, #136]	; (8003d38 <radioTestTransmit+0x1ac>)
 8003cb0:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8003cb4:	f006 fd0c 	bl	800a6d0 <siprintf>
	ssd1306_Clean ();
 8003cb8:	46bb      	mov	fp, r7
 8003cba:	9701      	str	r7, [sp, #4]
	for (int i = 0; i < 8; i++)
 8003cbc:	2600      	movs	r6, #0
	ssd1306_Clean ();
 8003cbe:	f001 fdd3 	bl	8005868 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 8003cc2:	4631      	mov	r1, r6
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f001 fd91 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8003cca:	3601      	adds	r6, #1
			ssd1306_PutString (string[i]);
 8003ccc:	4658      	mov	r0, fp
 8003cce:	f001 fd95 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8003cd2:	2e08      	cmp	r6, #8
 8003cd4:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8003cd8:	d1f3      	bne.n	8003cc2 <radioTestTransmit+0x136>
	ssd1306_Update ();
 8003cda:	f001 fdcd 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8003cde:	2600      	movs	r6, #0
	UC1609_Clean ();
 8003ce0:	f7fc ff28 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8003ce4:	b2f1      	uxtb	r1, r6
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f7fc fe7a 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8003cec:	3601      	adds	r6, #1
			UC1609_PutString (string[i]);
 8003cee:	4638      	mov	r0, r7
 8003cf0:	f7fc ff28 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8003cf4:	2e08      	cmp	r6, #8
 8003cf6:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8003cfa:	d1f3      	bne.n	8003ce4 <radioTestTransmit+0x158>
	UC1609_UpdateScreen ();
 8003cfc:	f7fc fe7c 	bl	80009f8 <UC1609_UpdateScreen>
}
 8003d00:	e75c      	b.n	8003bbc <radioTestTransmit+0x30>
						power = radioTxTestMode + 9;
 8003d02:	3309      	adds	r3, #9
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e77b      	b.n	8003c00 <radioTestTransmit+0x74>
						radioTxTestMode = (radioTxTestMode == 0) ? 11 : radioTxTestMode - 1;
 8003d08:	230b      	movs	r3, #11
 8003d0a:	e7a1      	b.n	8003c50 <radioTestTransmit+0xc4>
						sprintf (string[3], "Constant %u mw", radioTxTestMode + 9);
 8003d0c:	490b      	ldr	r1, [pc, #44]	; (8003d3c <radioTestTransmit+0x1b0>)
 8003d0e:	f103 0209 	add.w	r2, r3, #9
 8003d12:	480b      	ldr	r0, [pc, #44]	; (8003d40 <radioTestTransmit+0x1b4>)
 8003d14:	f006 fcdc 	bl	800a6d0 <siprintf>
 8003d18:	e7c7      	b.n	8003caa <radioTestTransmit+0x11e>
 8003d1a:	bf00      	nop
 8003d1c:	200000f4 	.word	0x200000f4
 8003d20:	20000adc 	.word	0x20000adc
 8003d24:	20000013 	.word	0x20000013
 8003d28:	0800b850 	.word	0x0800b850
 8003d2c:	0800b85c 	.word	0x0800b85c
 8003d30:	20000134 	.word	0x20000134
 8003d34:	0800b864 	.word	0x0800b864
 8003d38:	0800b87c 	.word	0x0800b87c
 8003d3c:	0800b86c 	.word	0x0800b86c
 8003d40:	200001b4 	.word	0x200001b4
 8003d44:	20000928 	.word	0x20000928
 8003d48:	200000dd 	.word	0x200000dd

08003d4c <radioTestReceive>:
{
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SX127X_defaultConfig (&myRadio);
 8003d50:	4f89      	ldr	r7, [pc, #548]	; (8003f78 <radioTestReceive+0x22c>)
{
 8003d52:	b08b      	sub	sp, #44	; 0x2c
	SX127X_defaultConfig (&myRadio);
 8003d54:	4638      	mov	r0, r7
 8003d56:	f002 f9b3 	bl	80060c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 8003d5a:	f7fd fa61 	bl	8001220 <tryLoadSettings>
	SX127X_config (&myRadio);
 8003d5e:	4638      	mov	r0, r7
 8003d60:	f002 f814 	bl	8005d8c <SX127X_config>
	myRadio.alwaysRX = 1;
 8003d64:	2201      	movs	r2, #1
			SX127X_Routine (&myRadio);
 8003d66:	46b9      	mov	r9, r7
	flag.lcdRefreshRequest = 1;
 8003d68:	f8df 8228 	ldr.w	r8, [pc, #552]	; 8003f94 <radioTestReceive+0x248>
 8003d6c:	4d83      	ldr	r5, [pc, #524]	; (8003f7c <radioTestReceive+0x230>)
 8003d6e:	f898 3000 	ldrb.w	r3, [r8]
	myRadio.alwaysRX = 1;
 8003d72:	73fa      	strb	r2, [r7, #15]
	flag.lcdRefreshRequest = 1;
 8003d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d78:	f888 3000 	strb.w	r3, [r8]
 8003d7c:	f10d 0a14 	add.w	sl, sp, #20
			char message[20] = { 0, };
 8003d80:	2400      	movs	r4, #0
			SX127X_Routine (&myRadio);
 8003d82:	4648      	mov	r0, r9
			char message[20] = { 0, };
 8003d84:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003d88:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003d8c:	9409      	str	r4, [sp, #36]	; 0x24
			SX127X_Routine (&myRadio);
 8003d8e:	f002 fb6f 	bl	8006470 <SX127X_Routine>
			if (flag.uartGotMessage)
 8003d92:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d96:	07da      	lsls	r2, r3, #31
 8003d98:	d40b      	bmi.n	8003db2 <radioTestReceive+0x66>
			if (myRadio.readBytes)
 8003d9a:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003d9e:	b192      	cbz	r2, 8003dc6 <radioTestReceive+0x7a>
					if (myRadio.badCrc)
 8003da0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
 8003da4:	2c00      	cmp	r4, #0
 8003da6:	f000 80d0 	beq.w	8003f4a <radioTestReceive+0x1fe>
							myRadio.readBytes = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
							continue;
 8003db0:	e7e6      	b.n	8003d80 <radioTestReceive+0x34>
					flag.uartGotMessage = 0;
 8003db2:	f364 0300 	bfi	r3, r4, #0, #1
 8003db6:	f888 3001 	strb.w	r3, [r8, #1]
					uartReceiveHandler ();
 8003dba:	f002 fcc1 	bl	8006740 <uartReceiveHandler>
			if (myRadio.readBytes)
 8003dbe:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	d1ec      	bne.n	8003da0 <radioTestReceive+0x54>
			uint32_t lastMessageReceived = 0;
 8003dc6:	4614      	mov	r4, r2
			if (myRadio.signalDetected)
 8003dc8:	7f3b      	ldrb	r3, [r7, #28]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80b7 	beq.w	8003f3e <radioTestReceive+0x1f2>
				wsSetColor (0, 0, 0, 20);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2314      	movs	r3, #20
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4610      	mov	r0, r2
 8003dd8:	f003 f8b4 	bl	8006f44 <wsSetColor>
			if (HAL_GetTick () - lastMessageReceived < 1000)
 8003ddc:	f003 f9be 	bl	800715c <HAL_GetTick>
 8003de0:	1b02      	subs	r2, r0, r4
 8003de2:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
				wsSetColor (1, 0, 20, 0);
 8003de6:	f04f 0300 	mov.w	r3, #0
			if (HAL_GetTick () - lastMessageReceived < 1000)
 8003dea:	f080 80a2 	bcs.w	8003f32 <radioTestReceive+0x1e6>
				wsSetColor (1, 0, 20, 0);
 8003dee:	2214      	movs	r2, #20
 8003df0:	4619      	mov	r1, r3
 8003df2:	2001      	movs	r0, #1
 8003df4:	f003 f8a6 	bl	8006f44 <wsSetColor>
			uint32_t lastMessageReceived = 0;
 8003df8:	2402      	movs	r4, #2
 8003dfa:	4e61      	ldr	r6, [pc, #388]	; (8003f80 <radioTestReceive+0x234>)
					wsSetColor (i, 0, ledPower[i] / 256, 0);
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f836 2b02 	ldrh.w	r2, [r6], #2
 8003e02:	b2e0      	uxtb	r0, r4
 8003e04:	4619      	mov	r1, r3
 8003e06:	0a12      	lsrs	r2, r2, #8
 8003e08:	3401      	adds	r4, #1
 8003e0a:	f003 f89b 	bl	8006f44 <wsSetColor>
			for (i = 2; i < 9; i++)
 8003e0e:	2c09      	cmp	r4, #9
 8003e10:	d1f4      	bne.n	8003dfc <radioTestReceive+0xb0>
			wsPrepareArray ();
 8003e12:	f003 f8db 	bl	8006fcc <wsPrepareArray>
				ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 8003e16:	882b      	ldrh	r3, [r5, #0]
 8003e18:	b10b      	cbz	r3, 8003e1e <radioTestReceive+0xd2>
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	886a      	ldrh	r2, [r5, #2]
 8003e20:	802b      	strh	r3, [r5, #0]
 8003e22:	b10a      	cbz	r2, 8003e28 <radioTestReceive+0xdc>
 8003e24:	3a01      	subs	r2, #1
 8003e26:	b292      	uxth	r2, r2
 8003e28:	88ab      	ldrh	r3, [r5, #4]
 8003e2a:	806a      	strh	r2, [r5, #2]
 8003e2c:	b10b      	cbz	r3, 8003e32 <radioTestReceive+0xe6>
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	88ea      	ldrh	r2, [r5, #6]
 8003e34:	80ab      	strh	r3, [r5, #4]
 8003e36:	b10a      	cbz	r2, 8003e3c <radioTestReceive+0xf0>
 8003e38:	3a01      	subs	r2, #1
 8003e3a:	b292      	uxth	r2, r2
 8003e3c:	892b      	ldrh	r3, [r5, #8]
 8003e3e:	80ea      	strh	r2, [r5, #6]
 8003e40:	b10b      	cbz	r3, 8003e46 <radioTestReceive+0xfa>
 8003e42:	3b01      	subs	r3, #1
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	896a      	ldrh	r2, [r5, #10]
 8003e48:	812b      	strh	r3, [r5, #8]
 8003e4a:	b10a      	cbz	r2, 8003e50 <radioTestReceive+0x104>
 8003e4c:	3a01      	subs	r2, #1
 8003e4e:	b292      	uxth	r2, r2
 8003e50:	89ab      	ldrh	r3, [r5, #12]
 8003e52:	816a      	strh	r2, [r5, #10]
 8003e54:	b10b      	cbz	r3, 8003e5a <radioTestReceive+0x10e>
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	89ea      	ldrh	r2, [r5, #14]
 8003e5c:	81ab      	strh	r3, [r5, #12]
 8003e5e:	b10a      	cbz	r2, 8003e64 <radioTestReceive+0x118>
 8003e60:	3a01      	subs	r2, #1
 8003e62:	b292      	uxth	r2, r2
 8003e64:	8a2b      	ldrh	r3, [r5, #16]
 8003e66:	81ea      	strh	r2, [r5, #14]
 8003e68:	b10b      	cbz	r3, 8003e6e <radioTestReceive+0x122>
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29b      	uxth	r3, r3
			if (flag.lcdRefreshRequest)
 8003e6e:	f898 2000 	ldrb.w	r2, [r8]
				ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 8003e72:	822b      	strh	r3, [r5, #16]
			if (flag.lcdRefreshRequest)
 8003e74:	0653      	lsls	r3, r2, #25
 8003e76:	d583      	bpl.n	8003d80 <radioTestReceive+0x34>
					flag.lcdRefreshRequest = 0;
 8003e78:	f36f 1286 	bfc	r2, #6, #1
 8003e7c:	f888 2000 	strb.w	r2, [r8]
					clearStrings ();
 8003e80:	f7fd f94e 	bl	8001120 <clearStrings>
					sprintf (string[0], "Receiver RSSI:%d dB", SX127X_RSSI_Pack (&myRadio));
 8003e84:	4648      	mov	r0, r9
 8003e86:	f002 fba1 	bl	80065cc <SX127X_RSSI_Pack>
					memcpy (string[1], message, 14);
 8003e8a:	4c3e      	ldr	r4, [pc, #248]	; (8003f84 <radioTestReceive+0x238>)
					sprintf (string[0], "Receiver RSSI:%d dB", SX127X_RSSI_Pack (&myRadio));
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	493e      	ldr	r1, [pc, #248]	; (8003f88 <radioTestReceive+0x23c>)
 8003e90:	f1a4 0040 	sub.w	r0, r4, #64	; 0x40
 8003e94:	f006 fc1c 	bl	800a6d0 <siprintf>
					memcpy (string[1], message, 14);
 8003e98:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 8003e9c:	c407      	stmia	r4!, {r0, r1, r2}
 8003e9e:	4620      	mov	r0, r4
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 8003ea0:	f89d 6018 	ldrb.w	r6, [sp, #24]
 8003ea4:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8003ea8:	f89d 2016 	ldrb.w	r2, [sp, #22]
					memcpy (string[1], message, 14);
 8003eac:	f820 3b34 	strh.w	r3, [r0], #52
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 8003eb0:	e9cd 1601 	strd	r1, r6, [sp, #4]
 8003eb4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003eb8:	4934      	ldr	r1, [pc, #208]	; (8003f8c <radioTestReceive+0x240>)
 8003eba:	9200      	str	r2, [sp, #0]
 8003ebc:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003ec0:	f006 fc06 	bl	800a6d0 <siprintf>
					sprintf (string[3], "%02x %02x %02x %02x %02x", message[5], message[6], message[7], message[8], message[9]);
 8003ec4:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8003ec8:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8003ecc:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8003ed0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003ed4:	f104 0074 	add.w	r0, r4, #116	; 0x74
 8003ed8:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8003edc:	492b      	ldr	r1, [pc, #172]	; (8003f8c <radioTestReceive+0x240>)
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	3c4c      	subs	r4, #76	; 0x4c
 8003ee2:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8003ee6:	f006 fbf3 	bl	800a6d0 <siprintf>
	ssd1306_Clean ();
 8003eea:	46a3      	mov	fp, r4
 8003eec:	f001 fcbc 	bl	8005868 <ssd1306_Clean>
	for (int i = 0; i < 8; i++)
 8003ef0:	2600      	movs	r6, #0
			ssd1306_GotoXY (0, i);
 8003ef2:	4631      	mov	r1, r6
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f001 fc79 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8003efa:	3601      	adds	r6, #1
			ssd1306_PutString (string[i]);
 8003efc:	4658      	mov	r0, fp
 8003efe:	f001 fc7d 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8003f02:	2e08      	cmp	r6, #8
 8003f04:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8003f08:	d1f3      	bne.n	8003ef2 <radioTestReceive+0x1a6>
	ssd1306_Update ();
 8003f0a:	f001 fcb5 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8003f0e:	2600      	movs	r6, #0
	UC1609_Clean ();
 8003f10:	f7fc fe10 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8003f14:	b2f1      	uxtb	r1, r6
 8003f16:	2000      	movs	r0, #0
 8003f18:	f7fc fd62 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8003f1c:	3601      	adds	r6, #1
			UC1609_PutString (string[i]);
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7fc fe10 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8003f24:	2e08      	cmp	r6, #8
 8003f26:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8003f2a:	d1f3      	bne.n	8003f14 <radioTestReceive+0x1c8>
	UC1609_UpdateScreen ();
 8003f2c:	f7fc fd64 	bl	80009f8 <UC1609_UpdateScreen>
}
 8003f30:	e726      	b.n	8003d80 <radioTestReceive+0x34>
				wsSetColor (1, 0, 0, 0);
 8003f32:	2001      	movs	r0, #1
 8003f34:	461a      	mov	r2, r3
 8003f36:	4619      	mov	r1, r3
 8003f38:	f003 f804 	bl	8006f44 <wsSetColor>
 8003f3c:	e75c      	b.n	8003df8 <radioTestReceive+0xac>
				wsSetColor (0, 0, 0, 0);
 8003f3e:	461a      	mov	r2, r3
 8003f40:	4619      	mov	r1, r3
 8003f42:	4618      	mov	r0, r3
 8003f44:	f002 fffe 	bl	8006f44 <wsSetColor>
 8003f48:	e748      	b.n	8003ddc <radioTestReceive+0x90>
					memcpy (message, myRadio.rxBuf, myRadio.readBytes);
 8003f4a:	4911      	ldr	r1, [pc, #68]	; (8003f90 <radioTestReceive+0x244>)
 8003f4c:	4650      	mov	r0, sl
 8003f4e:	f006 fb8f 	bl	800a670 <memcpy>
					ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8003f52:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003f56:	7f7b      	ldrb	r3, [r7, #29]
					myRadio.readBytes = 0;
 8003f58:	f887 405d 	strb.w	r4, [r7, #93]	; 0x5d
					ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8003f5c:	3b61      	subs	r3, #97	; 0x61
 8003f5e:	f825 2013 	strh.w	r2, [r5, r3, lsl #1]
					lastMessageReceived = HAL_GetTick ();
 8003f62:	f003 f8fb 	bl	800715c <HAL_GetTick>
					flag.lcdRefreshRequest = 1;
 8003f66:	f898 3000 	ldrb.w	r3, [r8]
					lastMessageReceived = HAL_GetTick ();
 8003f6a:	4604      	mov	r4, r0
					flag.lcdRefreshRequest = 1;
 8003f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f70:	f888 3000 	strb.w	r3, [r8]
 8003f74:	e728      	b.n	8003dc8 <radioTestReceive+0x7c>
 8003f76:	bf00      	nop
 8003f78:	20000928 	.word	0x20000928
 8003f7c:	200000c8 	.word	0x200000c8
 8003f80:	200000cc 	.word	0x200000cc
 8003f84:	20000134 	.word	0x20000134
 8003f88:	0800b888 	.word	0x0800b888
 8003f8c:	0800b89c 	.word	0x0800b89c
 8003f90:	20000945 	.word	0x20000945
 8003f94:	20000adc 	.word	0x20000adc

08003f98 <radioTestPing>:
	uint32_t receivedCount = 0;
 8003f98:	2300      	movs	r3, #0
{
 8003f9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SX127X_defaultConfig (&myRadio);
 8003f9e:	4ea1      	ldr	r6, [pc, #644]	; (8004224 <radioTestPing+0x28c>)
	uint32_t receivedCount = 0;
 8003fa0:	461c      	mov	r4, r3
{
 8003fa2:	b087      	sub	sp, #28
	SX127X_defaultConfig (&myRadio);
 8003fa4:	4630      	mov	r0, r6
	uint32_t receivedCount = 0;
 8003fa6:	9301      	str	r3, [sp, #4]
	uint32_t sendCount = 0;
 8003fa8:	9300      	str	r3, [sp, #0]
	SX127X_defaultConfig (&myRadio);
 8003faa:	f002 f889 	bl	80060c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 8003fae:	f7fd f937 	bl	8001220 <tryLoadSettings>
	SX127X_config (&myRadio);
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	f001 feea 	bl	8005d8c <SX127X_config>
	myRadio.alwaysRX = 1;
 8003fb8:	2001      	movs	r0, #1
	txMes->uplink = 0;
 8003fba:	2102      	movs	r1, #2
	txMes->adr = 0;
 8003fbc:	4b9a      	ldr	r3, [pc, #616]	; (8004228 <radioTestPing+0x290>)
	uint8_t autoPing = 0;
 8003fbe:	46a0      	mov	r8, r4
	txMes->adr = 0;
 8003fc0:	681b      	ldr	r3, [r3, #0]
	uint32_t lastReceived = 0;
 8003fc2:	e9cd 4402 	strd	r4, r4, [sp, #8]
	txMes->disarm = 0;
 8003fc6:	785a      	ldrb	r2, [r3, #1]
	uint32_t lastSend = 0;
 8003fc8:	9404      	str	r4, [sp, #16]
 8003fca:	4c98      	ldr	r4, [pc, #608]	; (800422c <radioTestPing+0x294>)
	txMes->disarm = 0;
 8003fcc:	f36f 0200 	bfc	r2, #0, #1
 8003fd0:	4f97      	ldr	r7, [pc, #604]	; (8004230 <radioTestPing+0x298>)
 8003fd2:	f8df b284 	ldr.w	fp, [pc, #644]	; 8004258 <radioTestPing+0x2c0>
			HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 8003fd6:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800425c <radioTestPing+0x2c4>
	myRadio.alwaysRX = 1;
 8003fda:	73f0      	strb	r0, [r6, #15]
	txMes->message = MSG_DOWN_REQUEST;
 8003fdc:	9405      	str	r4, [sp, #20]
	txMes->uplink = 0;
 8003fde:	7019      	strb	r1, [r3, #0]
	txMes->disarm = 0;
 8003fe0:	705a      	strb	r2, [r3, #1]
			HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4649      	mov	r1, r9
 8003fe6:	4893      	ldr	r0, [pc, #588]	; (8004234 <radioTestPing+0x29c>)
 8003fe8:	f006 f956 	bl	800a298 <HAL_UART_Receive_IT>
			if (flag.encInc || flag.encDec)
 8003fec:	783b      	ldrb	r3, [r7, #0]
 8003fee:	0798      	lsls	r0, r3, #30
 8003ff0:	d008      	beq.n	8004004 <radioTestPing+0x6c>
					autoPing = ~autoPing;
 8003ff2:	ea6f 0808 	mvn.w	r8, r8
					flag.encInc = 0;
 8003ff6:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8003ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffe:	703b      	strb	r3, [r7, #0]
					autoPing = ~autoPing;
 8004000:	fa5f f888 	uxtb.w	r8, r8
			if (myRadio.readBytes > 0)
 8004004:	f896 305d 	ldrb.w	r3, [r6, #93]	; 0x5d
 8004008:	b173      	cbz	r3, 8004028 <radioTestPing+0x90>
					if (myRadio.badCrc != 0)
 800400a:	f896 4060 	ldrb.w	r4, [r6, #96]	; 0x60
 800400e:	b11c      	cbz	r4, 8004018 <radioTestPing+0x80>
							myRadio.readBytes = 0;
 8004010:	2300      	movs	r3, #0
 8004012:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
							continue;
 8004016:	e7e4      	b.n	8003fe2 <radioTestPing+0x4a>
					lastReceived = HAL_GetTick ();
 8004018:	f003 f8a0 	bl	800715c <HAL_GetTick>
					receivedCount++;
 800401c:	9b01      	ldr	r3, [sp, #4]
					lastReceived = HAL_GetTick ();
 800401e:	9003      	str	r0, [sp, #12]
					receivedCount++;
 8004020:	3301      	adds	r3, #1
 8004022:	9301      	str	r3, [sp, #4]
					myRadio.readBytes = 0;
 8004024:	f886 405d 	strb.w	r4, [r6, #93]	; 0x5d
			if (HAL_GetTick () - lastSend > 2000 && (autoPing || flag.encOk))
 8004028:	f003 f898 	bl	800715c <HAL_GetTick>
 800402c:	9b04      	ldr	r3, [sp, #16]
 800402e:	1ac0      	subs	r0, r0, r3
 8004030:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004034:	d912      	bls.n	800405c <radioTestPing+0xc4>
 8004036:	783b      	ldrb	r3, [r7, #0]
 8004038:	f003 0204 	and.w	r2, r3, #4
 800403c:	ea58 0202 	orrs.w	r2, r8, r2
 8004040:	d00c      	beq.n	800405c <radioTestPing+0xc4>
					flag.encOk = 0;
 8004042:	f36f 0382 	bfc	r3, #2, #1
					SX127X_transmitAsync (&myRadio, 3);
 8004046:	2103      	movs	r1, #3
 8004048:	4876      	ldr	r0, [pc, #472]	; (8004224 <radioTestPing+0x28c>)
					flag.encOk = 0;
 800404a:	703b      	strb	r3, [r7, #0]
					SX127X_transmitAsync (&myRadio, 3);
 800404c:	f002 fa04 	bl	8006458 <SX127X_transmitAsync>
					lastSend = HAL_GetTick ();
 8004050:	f003 f884 	bl	800715c <HAL_GetTick>
					sendCount++;
 8004054:	9b00      	ldr	r3, [sp, #0]
					lastSend = HAL_GetTick ();
 8004056:	9004      	str	r0, [sp, #16]
					sendCount++;
 8004058:	3301      	adds	r3, #1
 800405a:	9300      	str	r3, [sp, #0]
			SX127X_Routine (&myRadio);
 800405c:	4871      	ldr	r0, [pc, #452]	; (8004224 <radioTestPing+0x28c>)
 800405e:	f002 fa07 	bl	8006470 <SX127X_Routine>
 8004062:	2400      	movs	r4, #0
				wsSetColor (i, BLACK);
 8004064:	2300      	movs	r3, #0
 8004066:	b2e0      	uxtb	r0, r4
 8004068:	461a      	mov	r2, r3
 800406a:	4619      	mov	r1, r3
 800406c:	3401      	adds	r4, #1
 800406e:	f002 ff69 	bl	8006f44 <wsSetColor>
			for (i = 0; i < 9; i++)
 8004072:	2c09      	cmp	r4, #9
 8004074:	d1f6      	bne.n	8004064 <radioTestPing+0xcc>
			if (myRadio.status == TX)
 8004076:	7c34      	ldrb	r4, [r6, #16]
 8004078:	2c03      	cmp	r4, #3
 800407a:	f000 80a1 	beq.w	80041c0 <radioTestPing+0x228>
			if (HAL_GetTick () - lastReceived < 600 && lastReceived)
 800407e:	f003 f86d 	bl	800715c <HAL_GetTick>
 8004082:	9b03      	ldr	r3, [sp, #12]
 8004084:	1ac0      	subs	r0, r0, r3
 8004086:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 800408a:	d202      	bcs.n	8004092 <radioTestPing+0xfa>
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 80b0 	bne.w	80041f2 <radioTestPing+0x25a>
			if (HAL_GetTick () - lastUartConnect < 200)
 8004092:	f003 f863 	bl	800715c <HAL_GetTick>
 8004096:	f8db 3000 	ldr.w	r3, [fp]
 800409a:	1ac0      	subs	r0, r0, r3
 800409c:	28c7      	cmp	r0, #199	; 0xc7
 800409e:	d978      	bls.n	8004192 <radioTestPing+0x1fa>
			wsPrepareArray ();
 80040a0:	f002 ff94 	bl	8006fcc <wsPrepareArray>
			if (HAL_GetTick () - lastLcdUpdate > 300)
 80040a4:	f003 f85a 	bl	800715c <HAL_GetTick>
 80040a8:	9b02      	ldr	r3, [sp, #8]
 80040aa:	1ac0      	subs	r0, r0, r3
 80040ac:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80040b0:	d903      	bls.n	80040ba <radioTestPing+0x122>
				flag.lcdRefreshRequest = 1;
 80040b2:	783b      	ldrb	r3, [r7, #0]
 80040b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040b8:	703b      	strb	r3, [r7, #0]
			if (flag.uartGotMessage)
 80040ba:	787b      	ldrb	r3, [r7, #1]
 80040bc:	07d9      	lsls	r1, r3, #31
 80040be:	d45e      	bmi.n	800417e <radioTestPing+0x1e6>
			if (flag.lcdRefreshRequest)
 80040c0:	783b      	ldrb	r3, [r7, #0]
 80040c2:	065a      	lsls	r2, r3, #25
 80040c4:	d58d      	bpl.n	8003fe2 <radioTestPing+0x4a>
					if (sendCount != 0)
 80040c6:	9d00      	ldr	r5, [sp, #0]
					flag.lcdRefreshRequest = 0;
 80040c8:	f36f 1386 	bfc	r3, #6, #1
 80040cc:	703b      	strb	r3, [r7, #0]
					if (sendCount != 0)
 80040ce:	2d00      	cmp	r5, #0
 80040d0:	d066      	beq.n	80041a0 <radioTestPing+0x208>
						sucess = (float) receivedCount / (float) sendCount;
 80040d2:	9801      	ldr	r0, [sp, #4]
 80040d4:	f7fc f8f8 	bl	80002c8 <__aeabi_ui2f>
 80040d8:	4604      	mov	r4, r0
 80040da:	4628      	mov	r0, r5
 80040dc:	f7fc f8f4 	bl	80002c8 <__aeabi_ui2f>
 80040e0:	4601      	mov	r1, r0
 80040e2:	4620      	mov	r0, r4
 80040e4:	f7fc f9fc 	bl	80004e0 <__aeabi_fdiv>
 80040e8:	4604      	mov	r4, r0
					lastLcdUpdate = HAL_GetTick ();
 80040ea:	f003 f837 	bl	800715c <HAL_GetTick>
 80040ee:	9002      	str	r0, [sp, #8]
					clearStrings ();
 80040f0:	f7fd f816 	bl	8001120 <clearStrings>
					if (autoPing)
 80040f4:	f1b8 0f00 	cmp.w	r8, #0
 80040f8:	d05b      	beq.n	80041b2 <radioTestPing+0x21a>
						sprintf (string[0], "Ping auto");
 80040fa:	4b4f      	ldr	r3, [pc, #316]	; (8004238 <radioTestPing+0x2a0>)
 80040fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004100:	4b4a      	ldr	r3, [pc, #296]	; (800422c <radioTestPing+0x294>)
 8004102:	c303      	stmia	r3!, {r0, r1}
 8004104:	801a      	strh	r2, [r3, #0]
					sprintf (string[1], "send %lu", sendCount);
 8004106:	9a00      	ldr	r2, [sp, #0]
 8004108:	494c      	ldr	r1, [pc, #304]	; (800423c <radioTestPing+0x2a4>)
 800410a:	484d      	ldr	r0, [pc, #308]	; (8004240 <radioTestPing+0x2a8>)
 800410c:	f006 fae0 	bl	800a6d0 <siprintf>
					sprintf (string[2], "received %lu", receivedCount);
 8004110:	9a01      	ldr	r2, [sp, #4]
 8004112:	494c      	ldr	r1, [pc, #304]	; (8004244 <radioTestPing+0x2ac>)
 8004114:	484c      	ldr	r0, [pc, #304]	; (8004248 <radioTestPing+0x2b0>)
 8004116:	f006 fadb 	bl	800a6d0 <siprintf>
					sprintf (string[3], "%d%% sucess", (int) (sucess * 100));
 800411a:	494c      	ldr	r1, [pc, #304]	; (800424c <radioTestPing+0x2b4>)
 800411c:	4620      	mov	r0, r4
 800411e:	f7fc f92b 	bl	8000378 <__aeabi_fmul>
 8004122:	f7fc faef 	bl	8000704 <__aeabi_f2iz>
 8004126:	4d41      	ldr	r5, [pc, #260]	; (800422c <radioTestPing+0x294>)
 8004128:	4602      	mov	r2, r0
 800412a:	4949      	ldr	r1, [pc, #292]	; (8004250 <radioTestPing+0x2b8>)
 800412c:	f105 00c0 	add.w	r0, r5, #192	; 0xc0
 8004130:	f006 face 	bl	800a6d0 <siprintf>
	ssd1306_Clean ();
 8004134:	46aa      	mov	sl, r5
 8004136:	9505      	str	r5, [sp, #20]
	for (int i = 0; i < 8; i++)
 8004138:	2400      	movs	r4, #0
	ssd1306_Clean ();
 800413a:	f001 fb95 	bl	8005868 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 800413e:	4621      	mov	r1, r4
 8004140:	2000      	movs	r0, #0
 8004142:	f001 fb53 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8004146:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 8004148:	4650      	mov	r0, sl
 800414a:	f001 fb57 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 800414e:	2c08      	cmp	r4, #8
 8004150:	f10a 0a40 	add.w	sl, sl, #64	; 0x40
 8004154:	d1f3      	bne.n	800413e <radioTestPing+0x1a6>
	ssd1306_Update ();
 8004156:	f001 fb8f 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 800415a:	2400      	movs	r4, #0
	UC1609_Clean ();
 800415c:	f7fc fcea 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8004160:	b2e1      	uxtb	r1, r4
 8004162:	2000      	movs	r0, #0
 8004164:	f7fc fc3c 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8004168:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 800416a:	4628      	mov	r0, r5
 800416c:	f7fc fcea 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8004170:	2c08      	cmp	r4, #8
 8004172:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8004176:	d1f3      	bne.n	8004160 <radioTestPing+0x1c8>
	UC1609_UpdateScreen ();
 8004178:	f7fc fc3e 	bl	80009f8 <UC1609_UpdateScreen>
}
 800417c:	e731      	b.n	8003fe2 <radioTestPing+0x4a>
					flag.uartGotMessage = 0;
 800417e:	f36f 0300 	bfc	r3, #0, #1
 8004182:	707b      	strb	r3, [r7, #1]
					lastUartConnect = HAL_GetTick ();
 8004184:	f002 ffea 	bl	800715c <HAL_GetTick>
 8004188:	f8cb 0000 	str.w	r0, [fp]
					uartReceiveHandler ();
 800418c:	f002 fad8 	bl	8006740 <uartReceiveHandler>
 8004190:	e796      	b.n	80040c0 <radioTestPing+0x128>
					wsSetColor (0, YELLOW);
 8004192:	2300      	movs	r3, #0
 8004194:	2210      	movs	r2, #16
 8004196:	4618      	mov	r0, r3
 8004198:	4611      	mov	r1, r2
 800419a:	f002 fed3 	bl	8006f44 <wsSetColor>
 800419e:	e77f      	b.n	80040a0 <radioTestPing+0x108>
					lastLcdUpdate = HAL_GetTick ();
 80041a0:	f002 ffdc 	bl	800715c <HAL_GetTick>
						sucess = 0;
 80041a4:	2400      	movs	r4, #0
					lastLcdUpdate = HAL_GetTick ();
 80041a6:	9002      	str	r0, [sp, #8]
					clearStrings ();
 80041a8:	f7fc ffba 	bl	8001120 <clearStrings>
					if (autoPing)
 80041ac:	f1b8 0f00 	cmp.w	r8, #0
 80041b0:	d1a3      	bne.n	80040fa <radioTestPing+0x162>
						sprintf (string[0], "Ping manual");
 80041b2:	4b28      	ldr	r3, [pc, #160]	; (8004254 <radioTestPing+0x2bc>)
 80041b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80041b8:	9b05      	ldr	r3, [sp, #20]
 80041ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80041be:	e7a2      	b.n	8004106 <radioTestPing+0x16e>
					wsSetColor (1, MAGENTA);
 80041c0:	2310      	movs	r3, #16
 80041c2:	2200      	movs	r2, #0
 80041c4:	4619      	mov	r1, r3
 80041c6:	2001      	movs	r0, #1
 80041c8:	f002 febc 	bl	8006f44 <wsSetColor>
					wsSetColor (2, MAGENTA);
 80041cc:	2310      	movs	r3, #16
 80041ce:	2200      	movs	r2, #0
 80041d0:	4619      	mov	r1, r3
 80041d2:	2002      	movs	r0, #2
 80041d4:	f002 feb6 	bl	8006f44 <wsSetColor>
					wsSetColor (3, MAGENTA);
 80041d8:	2310      	movs	r3, #16
 80041da:	4620      	mov	r0, r4
 80041dc:	4619      	mov	r1, r3
 80041de:	2200      	movs	r2, #0
 80041e0:	f002 feb0 	bl	8006f44 <wsSetColor>
					wsSetColor (4, MAGENTA);
 80041e4:	2310      	movs	r3, #16
 80041e6:	2200      	movs	r2, #0
 80041e8:	4619      	mov	r1, r3
 80041ea:	2004      	movs	r0, #4
 80041ec:	f002 feaa 	bl	8006f44 <wsSetColor>
 80041f0:	e745      	b.n	800407e <radioTestPing+0xe6>
					wsSetColor (5, GREEN);
 80041f2:	2300      	movs	r3, #0
 80041f4:	2210      	movs	r2, #16
 80041f6:	4619      	mov	r1, r3
 80041f8:	2005      	movs	r0, #5
 80041fa:	f002 fea3 	bl	8006f44 <wsSetColor>
					wsSetColor (6, GREEN);
 80041fe:	2300      	movs	r3, #0
 8004200:	2210      	movs	r2, #16
 8004202:	4619      	mov	r1, r3
 8004204:	2006      	movs	r0, #6
 8004206:	f002 fe9d 	bl	8006f44 <wsSetColor>
					wsSetColor (7, GREEN);
 800420a:	2300      	movs	r3, #0
 800420c:	2210      	movs	r2, #16
 800420e:	4619      	mov	r1, r3
 8004210:	2007      	movs	r0, #7
 8004212:	f002 fe97 	bl	8006f44 <wsSetColor>
					wsSetColor (8, GREEN);
 8004216:	2300      	movs	r3, #0
 8004218:	2210      	movs	r2, #16
 800421a:	4619      	mov	r1, r3
 800421c:	2008      	movs	r0, #8
 800421e:	f002 fe91 	bl	8006f44 <wsSetColor>
 8004222:	e736      	b.n	8004092 <radioTestPing+0xfa>
 8004224:	20000928 	.word	0x20000928
 8004228:	20000018 	.word	0x20000018
 800422c:	200000f4 	.word	0x200000f4
 8004230:	20000adc 	.word	0x20000adc
 8004234:	20000bc0 	.word	0x20000bc0
 8004238:	0800b8b8 	.word	0x0800b8b8
 800423c:	0800b8d0 	.word	0x0800b8d0
 8004240:	20000134 	.word	0x20000134
 8004244:	0800b8dc 	.word	0x0800b8dc
 8004248:	20000174 	.word	0x20000174
 800424c:	42c80000 	.word	0x42c80000
 8004250:	0800b8ec 	.word	0x0800b8ec
 8004254:	0800b8c4 	.word	0x0800b8c4
 8004258:	20001580 	.word	0x20001580
 800425c:	20000b28 	.word	0x20000b28

08004260 <radioSignalIndicator>:
	SX127X_defaultConfig (&myRadio);
 8004260:	4850      	ldr	r0, [pc, #320]	; (80043a4 <radioSignalIndicator+0x144>)
{
 8004262:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004266:	4681      	mov	r9, r0
			rssi = SX127X_RSSI (&myRadio);
 8004268:	46c8      	mov	r8, r9
	SX127X_defaultConfig (&myRadio);
 800426a:	f001 ff29 	bl	80060c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 800426e:	f7fc ffd7 	bl	8001220 <tryLoadSettings>
	SX127X_config (&myRadio);
 8004272:	4648      	mov	r0, r9
 8004274:	f001 fd8a 	bl	8005d8c <SX127X_config>
			rssi = SX127X_RSSI (&myRadio);
 8004278:	4640      	mov	r0, r8
 800427a:	f002 f981 	bl	8006580 <SX127X_RSSI>
			scale = (rssi > -120) ? 120 + rssi : 0;
 800427e:	f110 0f77 	cmn.w	r0, #119	; 0x77
			rssi = SX127X_RSSI (&myRadio);
 8004282:	4683      	mov	fp, r0
			scale = (rssi > -120) ? 120 + rssi : 0;
 8004284:	db7a      	blt.n	800437c <radioSignalIndicator+0x11c>
 8004286:	f100 0378 	add.w	r3, r0, #120	; 0x78
 800428a:	4a47      	ldr	r2, [pc, #284]	; (80043a8 <radioSignalIndicator+0x148>)
 800428c:	fa0f fa83 	sxth.w	sl, r3
 8004290:	fb82 320a 	smull	r3, r2, r2, sl
 8004294:	ea4f 75ea 	mov.w	r5, sl, asr #31
 8004298:	ebc5 05a2 	rsb	r5, r5, r2, asr #2
 800429c:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 80042a0:	ebaa 0646 	sub.w	r6, sl, r6, lsl #1
 80042a4:	b2f6      	uxtb	r6, r6
 80042a6:	b22d      	sxth	r5, r5
			clearStrings ();
 80042a8:	f7fc ff3a 	bl	8001120 <clearStrings>
			sprintf (string[0], "RSSI Meter");
 80042ac:	4c3f      	ldr	r4, [pc, #252]	; (80043ac <radioSignalIndicator+0x14c>)
 80042ae:	4b40      	ldr	r3, [pc, #256]	; (80043b0 <radioSignalIndicator+0x150>)
 80042b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042b4:	c403      	stmia	r4!, {r0, r1}
 80042b6:	4620      	mov	r0, r4
 80042b8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
			sprintf (string[1], "RSSI:%4d C:%d", rssi, scale);
 80042bc:	4653      	mov	r3, sl
			sprintf (string[0], "RSSI Meter");
 80042be:	f820 2b38 	strh.w	r2, [r0], #56
			sprintf (string[1], "RSSI:%4d C:%d", rssi, scale);
 80042c2:	493c      	ldr	r1, [pc, #240]	; (80043b4 <radioSignalIndicator+0x154>)
 80042c4:	465a      	mov	r2, fp
			sprintf (string[0], "RSSI Meter");
 80042c6:	f884 c002 	strb.w	ip, [r4, #2]
			sprintf (string[1], "RSSI:%4d C:%d", rssi, scale);
 80042ca:	f006 fa01 	bl	800a6d0 <siprintf>
			SX127X_Routine (&myRadio);
 80042ce:	f1a4 0b08 	sub.w	fp, r4, #8
 80042d2:	4640      	mov	r0, r8
	ssd1306_Clean ();
 80042d4:	465c      	mov	r4, fp
			SX127X_Routine (&myRadio);
 80042d6:	f002 f8cb 	bl	8006470 <SX127X_Routine>
	for (int i = 0; i < 8; i++)
 80042da:	f04f 0a00 	mov.w	sl, #0
	ssd1306_Clean ();
 80042de:	f001 fac3 	bl	8005868 <ssd1306_Clean>
			ssd1306_GotoXY (0, i);
 80042e2:	4651      	mov	r1, sl
 80042e4:	2000      	movs	r0, #0
 80042e6:	f001 fa81 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 80042ea:	f10a 0a01 	add.w	sl, sl, #1
			ssd1306_PutString (string[i]);
 80042ee:	4620      	mov	r0, r4
 80042f0:	f001 fa84 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 80042f4:	f1ba 0f08 	cmp.w	sl, #8
 80042f8:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80042fc:	d1f1      	bne.n	80042e2 <radioSignalIndicator+0x82>
	ssd1306_Update ();
 80042fe:	f001 fabb 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8004302:	2400      	movs	r4, #0
	UC1609_Clean ();
 8004304:	f7fc fc16 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8004308:	b2e1      	uxtb	r1, r4
 800430a:	2000      	movs	r0, #0
 800430c:	f7fc fb68 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8004310:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8004312:	4658      	mov	r0, fp
 8004314:	f7fc fc16 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8004318:	2c08      	cmp	r4, #8
 800431a:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 800431e:	d1f3      	bne.n	8004308 <radioSignalIndicator+0xa8>
	UC1609_UpdateScreen ();
 8004320:	f7fc fb6a 	bl	80009f8 <UC1609_UpdateScreen>
			wsSetColor (0, BLACK);
 8004324:	2300      	movs	r3, #0
 8004326:	461a      	mov	r2, r3
 8004328:	4619      	mov	r1, r3
 800432a:	4618      	mov	r0, r3
 800432c:	f002 fe0a 	bl	8006f44 <wsSetColor>
			if (myRadio.signalDetected)
 8004330:	f899 301c 	ldrb.w	r3, [r9, #28]
 8004334:	bb7b      	cbnz	r3, 8004396 <radioSignalIndicator+0x136>
	for (int i = 0; i < 8; i++)
 8004336:	2400      	movs	r4, #0
 8004338:	e006      	b.n	8004348 <radioSignalIndicator+0xe8>
						wsSetColor (8 - i, 0, 0, 0);
 800433a:	461a      	mov	r2, r3
 800433c:	4619      	mov	r1, r3
 800433e:	f002 fe01 	bl	8006f44 <wsSetColor>
			for (i = 0; i < 8; i++)
 8004342:	3401      	adds	r4, #1
 8004344:	2c08      	cmp	r4, #8
 8004346:	d010      	beq.n	800436a <radioSignalIndicator+0x10a>
					if (scale / 10 > i)
 8004348:	42ac      	cmp	r4, r5
 800434a:	db1b      	blt.n	8004384 <radioSignalIndicator+0x124>
						wsSetColor (8 - i, 0, 0, 0);
 800434c:	f1c4 0008 	rsb	r0, r4, #8
						wsSetColor (8 - i, 0, scale % 10, 0);
 8004350:	4602      	mov	r2, r0
						wsSetColor (8 - i, 0, 0, 0);
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	b2c0      	uxtb	r0, r0
					else if (scale / 10 < i)
 8004358:	dcef      	bgt.n	800433a <radioSignalIndicator+0xda>
						wsSetColor (8 - i, 0, scale % 10, 0);
 800435a:	b2d0      	uxtb	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4632      	mov	r2, r6
 8004360:	3401      	adds	r4, #1
 8004362:	f002 fdef 	bl	8006f44 <wsSetColor>
			for (i = 0; i < 8; i++)
 8004366:	2c08      	cmp	r4, #8
 8004368:	d1ee      	bne.n	8004348 <radioSignalIndicator+0xe8>
			wsPrepareArray ();
 800436a:	f002 fe2f 	bl	8006fcc <wsPrepareArray>
			rssi = SX127X_RSSI (&myRadio);
 800436e:	4640      	mov	r0, r8
 8004370:	f002 f906 	bl	8006580 <SX127X_RSSI>
			scale = (rssi > -120) ? 120 + rssi : 0;
 8004374:	f110 0f77 	cmn.w	r0, #119	; 0x77
			rssi = SX127X_RSSI (&myRadio);
 8004378:	4683      	mov	fp, r0
			scale = (rssi > -120) ? 120 + rssi : 0;
 800437a:	da84      	bge.n	8004286 <radioSignalIndicator+0x26>
 800437c:	2600      	movs	r6, #0
 800437e:	4635      	mov	r5, r6
 8004380:	46b2      	mov	sl, r6
 8004382:	e791      	b.n	80042a8 <radioSignalIndicator+0x48>
						wsSetColor (8 - i, 0, 10, 0);
 8004384:	2300      	movs	r3, #0
 8004386:	f1c4 0008 	rsb	r0, r4, #8
 800438a:	4619      	mov	r1, r3
 800438c:	220a      	movs	r2, #10
 800438e:	b2c0      	uxtb	r0, r0
 8004390:	f002 fdd8 	bl	8006f44 <wsSetColor>
 8004394:	e7d5      	b.n	8004342 <radioSignalIndicator+0xe2>
				wsSetColor (0, CYAN);
 8004396:	2310      	movs	r3, #16
 8004398:	2100      	movs	r1, #0
 800439a:	461a      	mov	r2, r3
 800439c:	4608      	mov	r0, r1
 800439e:	f002 fdd1 	bl	8006f44 <wsSetColor>
 80043a2:	e7c8      	b.n	8004336 <radioSignalIndicator+0xd6>
 80043a4:	20000928 	.word	0x20000928
 80043a8:	66666667 	.word	0x66666667
 80043ac:	200000f4 	.word	0x200000f4
 80043b0:	0800b8f8 	.word	0x0800b8f8
 80043b4:	0800b904 	.word	0x0800b904

080043b8 <button_ok>:
{
 80043b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (screenMode == smModeSelect)
 80043bc:	4c6e      	ldr	r4, [pc, #440]	; (8004578 <button_ok+0x1c0>)
 80043be:	7823      	ldrb	r3, [r4, #0]
 80043c0:	2b1d      	cmp	r3, #29
 80043c2:	d038      	beq.n	8004436 <button_ok+0x7e>
	else if (screenMode == smRegular)
 80043c4:	b943      	cbnz	r3, 80043d8 <button_ok+0x20>
			screenMode = smNodeAction;
 80043c6:	231c      	movs	r3, #28
 80043c8:	7023      	strb	r3, [r4, #0]
	flag.lcdRefreshRequest = 1;
 80043ca:	4a6c      	ldr	r2, [pc, #432]	; (800457c <button_ok+0x1c4>)
 80043cc:	7813      	ldrb	r3, [r2, #0]
 80043ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043d2:	7013      	strb	r3, [r2, #0]
}
 80043d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (screenMode == smMainMenu)
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d052      	beq.n	8004482 <button_ok+0xca>
	else if (screenMode == smRadioMenu)
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d033      	beq.n	8004448 <button_ok+0x90>
	else if (screenMode == smBaseMenu)
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	f000 80a5 	beq.w	8004530 <button_ok+0x178>
	else if (screenMode == smNodeMenu)
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d03c      	beq.n	8004464 <button_ok+0xac>
	else if (screenMode == smNetworkMenu)
 80043ea:	2b05      	cmp	r3, #5
 80043ec:	d05d      	beq.n	80044aa <button_ok+0xf2>
	else if (screenMode == smNodeAction)
 80043ee:	2b1c      	cmp	r3, #28
 80043f0:	f000 80aa 	beq.w	8004548 <button_ok+0x190>
	else if (screenMode == smSaveConfig)
 80043f4:	2b18      	cmp	r3, #24
 80043f6:	f000 82a5 	beq.w	8004944 <button_ok+0x58c>
	else if (screenMode == smRefreshNetworks)
 80043fa:	2b12      	cmp	r3, #18
 80043fc:	f000 82b6 	beq.w	800496c <button_ok+0x5b4>
	else if (screenMode == smSelectNet)
 8004400:	2b13      	cmp	r3, #19
 8004402:	f000 82bf 	beq.w	8004984 <button_ok+0x5cc>
	else if (screenMode == smSetWiFiPassword)
 8004406:	2b14      	cmp	r3, #20
 8004408:	f000 82a1 	beq.w	800494e <button_ok+0x596>
	else if (screenMode == smSetHost)
 800440c:	2b16      	cmp	r3, #22
 800440e:	f000 82c8 	beq.w	80049a2 <button_ok+0x5ea>
	else if (screenMode == smSetServerPassword)
 8004412:	2b15      	cmp	r3, #21
 8004414:	f000 82d9 	beq.w	80049ca <button_ok+0x612>
	else if (screenMode == smSetBaseID)
 8004418:	2b17      	cmp	r3, #23
 800441a:	f000 82ea 	beq.w	80049f2 <button_ok+0x63a>
	else if (screenMode == smMessageCounter)
 800441e:	2b1b      	cmp	r3, #27
 8004420:	f000 82f1 	beq.w	8004a06 <button_ok+0x64e>
	else if (screenMode == smCleanNodeData)
 8004424:	2b11      	cmp	r3, #17
 8004426:	f000 82f4 	beq.w	8004a12 <button_ok+0x65a>
	else if (screenMode >= smFrequency && screenMode <= smPower)
 800442a:	3b06      	subs	r3, #6
 800442c:	2b06      	cmp	r3, #6
			screenMode = smRadioMenu;
 800442e:	bf9c      	itt	ls
 8004430:	2302      	movls	r3, #2
 8004432:	7023      	strbls	r3, [r4, #0]
 8004434:	e7c9      	b.n	80043ca <button_ok+0x12>
			switch (selectedMode)
 8004436:	4b52      	ldr	r3, [pc, #328]	; (8004580 <button_ok+0x1c8>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d8c5      	bhi.n	80043ca <button_ok+0x12>
 800443e:	e8df f003 	tbb	[pc, r3]
 8004442:	2c0e      	.short	0x2c0e
 8004444:	2a32302e 	.word	0x2a32302e
			switch (menuPosition)
 8004448:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <button_ok+0x1cc>)
 800444a:	f993 2000 	ldrsb.w	r2, [r3]
 800444e:	2a06      	cmp	r2, #6
 8004450:	d814      	bhi.n	800447c <button_ok+0xc4>
 8004452:	e8df f002 	tbb	[pc, r2]
 8004456:	5558      	.short	0x5558
 8004458:	494c4f52 	.word	0x494c4f52
 800445c:	46          	.byte	0x46
 800445d:	00          	.byte	0x00
					screenMode = smRegular;
 800445e:	2300      	movs	r3, #0
 8004460:	7023      	strb	r3, [r4, #0]
					break;
 8004462:	e7b2      	b.n	80043ca <button_ok+0x12>
			switch (menuPosition)
 8004464:	4b47      	ldr	r3, [pc, #284]	; (8004584 <button_ok+0x1cc>)
 8004466:	f993 2000 	ldrsb.w	r2, [r3]
 800446a:	2a01      	cmp	r2, #1
 800446c:	f000 825b 	beq.w	8004926 <button_ok+0x56e>
 8004470:	2a02      	cmp	r2, #2
 8004472:	f000 8255 	beq.w	8004920 <button_ok+0x568>
 8004476:	b90a      	cbnz	r2, 800447c <button_ok+0xc4>
					screenMode = smWorkInterval;
 8004478:	220f      	movs	r2, #15
 800447a:	7022      	strb	r2, [r4, #0]
			menuPosition = 0;
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e7a3      	b.n	80043ca <button_ok+0x12>
			switch (menuPosition)
 8004482:	4b40      	ldr	r3, [pc, #256]	; (8004584 <button_ok+0x1cc>)
 8004484:	f993 2000 	ldrsb.w	r2, [r3]
 8004488:	2a05      	cmp	r2, #5
 800448a:	d8f7      	bhi.n	800447c <button_ok+0xc4>
 800448c:	e8df f002 	tbb	[pc, r2]
 8004490:	171a1d20 	.word	0x171a1d20
 8004494:	2326      	.short	0x2326
					radioSignalIndicator ();
 8004496:	f7ff fee3 	bl	8004260 <radioSignalIndicator>
					colorTest ();
 800449a:	f7ff fa85 	bl	80039a8 <colorTest>
					radioTestTransmit ();
 800449e:	f7ff fb75 	bl	8003b8c <radioTestTransmit>
					radioTestReceive ();
 80044a2:	f7ff fc53 	bl	8003d4c <radioTestReceive>
					radioTestPing ();
 80044a6:	f7ff fd77 	bl	8003f98 <radioTestPing>
			switch (menuPosition)
 80044aa:	4b36      	ldr	r3, [pc, #216]	; (8004584 <button_ok+0x1cc>)
 80044ac:	f993 2000 	ldrsb.w	r2, [r3]
 80044b0:	2a05      	cmp	r2, #5
 80044b2:	d8e3      	bhi.n	800447c <button_ok+0xc4>
 80044b4:	e8df f002 	tbb	[pc, r2]
 80044b8:	2a2d3033 	.word	0x2a2d3033
 80044bc:	3639      	.short	0x3639
					screenMode = smNetworkMenu;
 80044be:	2205      	movs	r2, #5
 80044c0:	7022      	strb	r2, [r4, #0]
					break;
 80044c2:	e7db      	b.n	800447c <button_ok+0xc4>
					screenMode = smNodeMenu;
 80044c4:	2204      	movs	r2, #4
 80044c6:	7022      	strb	r2, [r4, #0]
					break;
 80044c8:	e7d8      	b.n	800447c <button_ok+0xc4>
					screenMode = smBaseMenu;
 80044ca:	2203      	movs	r2, #3
 80044cc:	7022      	strb	r2, [r4, #0]
					break;
 80044ce:	e7d5      	b.n	800447c <button_ok+0xc4>
					screenMode = smRadioMenu;
 80044d0:	2202      	movs	r2, #2
 80044d2:	7022      	strb	r2, [r4, #0]
					break;
 80044d4:	e7d2      	b.n	800447c <button_ok+0xc4>
					screenMode = smStatus;
 80044d6:	2219      	movs	r2, #25
 80044d8:	7022      	strb	r2, [r4, #0]
					break;
 80044da:	e7cf      	b.n	800447c <button_ok+0xc4>
					screenMode = smSaveConfig;
 80044dc:	2218      	movs	r2, #24
 80044de:	7022      	strb	r2, [r4, #0]
					break;
 80044e0:	e7cc      	b.n	800447c <button_ok+0xc4>
					screenMode = smPower;
 80044e2:	220c      	movs	r2, #12
 80044e4:	7022      	strb	r2, [r4, #0]
					break;
 80044e6:	e7c9      	b.n	800447c <button_ok+0xc4>
					screenMode = smPreamble;
 80044e8:	220b      	movs	r2, #11
 80044ea:	7022      	strb	r2, [r4, #0]
					break;
 80044ec:	e7c6      	b.n	800447c <button_ok+0xc4>
					screenMode = smCr;
 80044ee:	220a      	movs	r2, #10
 80044f0:	7022      	strb	r2, [r4, #0]
					break;
 80044f2:	e7c3      	b.n	800447c <button_ok+0xc4>
					screenMode = smSw;
 80044f4:	2209      	movs	r2, #9
 80044f6:	7022      	strb	r2, [r4, #0]
					break;
 80044f8:	e7c0      	b.n	800447c <button_ok+0xc4>
					screenMode = smSf;
 80044fa:	2207      	movs	r2, #7
 80044fc:	7022      	strb	r2, [r4, #0]
					break;
 80044fe:	e7bd      	b.n	800447c <button_ok+0xc4>
					screenMode = smBw;
 8004500:	2208      	movs	r2, #8
 8004502:	7022      	strb	r2, [r4, #0]
					break;
 8004504:	e7ba      	b.n	800447c <button_ok+0xc4>
					screenMode = smFrequency;
 8004506:	2206      	movs	r2, #6
 8004508:	7022      	strb	r2, [r4, #0]
					break;
 800450a:	e7b7      	b.n	800447c <button_ok+0xc4>
					screenMode = smSetServerPassword;
 800450c:	2215      	movs	r2, #21
 800450e:	7022      	strb	r2, [r4, #0]
					break;
 8004510:	e7b4      	b.n	800447c <button_ok+0xc4>
					screenMode = smSetWiFiPassword;
 8004512:	2214      	movs	r2, #20
 8004514:	7022      	strb	r2, [r4, #0]
					break;
 8004516:	e7b1      	b.n	800447c <button_ok+0xc4>
					screenMode = smSelectNet;
 8004518:	2213      	movs	r2, #19
 800451a:	7022      	strb	r2, [r4, #0]
					break;
 800451c:	e7ae      	b.n	800447c <button_ok+0xc4>
					screenMode = smRefreshNetworks;
 800451e:	2212      	movs	r2, #18
 8004520:	7022      	strb	r2, [r4, #0]
					break;
 8004522:	e7ab      	b.n	800447c <button_ok+0xc4>
					screenMode = smSetHost;
 8004524:	2216      	movs	r2, #22
 8004526:	7022      	strb	r2, [r4, #0]
					break;
 8004528:	e7a8      	b.n	800447c <button_ok+0xc4>
					screenMode = smSetBaseID;
 800452a:	2217      	movs	r2, #23
 800452c:	7022      	strb	r2, [r4, #0]
					break;
 800452e:	e7a5      	b.n	800447c <button_ok+0xc4>
			switch (menuPosition)
 8004530:	4b14      	ldr	r3, [pc, #80]	; (8004584 <button_ok+0x1cc>)
 8004532:	f993 2000 	ldrsb.w	r2, [r3]
 8004536:	b122      	cbz	r2, 8004542 <button_ok+0x18a>
 8004538:	2a01      	cmp	r2, #1
 800453a:	d19f      	bne.n	800447c <button_ok+0xc4>
					screenMode = smInterval2;
 800453c:	220e      	movs	r2, #14
 800453e:	7022      	strb	r2, [r4, #0]
					break;
 8004540:	e79c      	b.n	800447c <button_ok+0xc4>
					screenMode = smInterval1;
 8004542:	220d      	movs	r2, #13
 8004544:	7022      	strb	r2, [r4, #0]
					break;
 8004546:	e799      	b.n	800447c <button_ok+0xc4>
			switch (menuPosition)
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <button_ok+0x1cc>)
 800454a:	f993 3000 	ldrsb.w	r3, [r3]
 800454e:	2b03      	cmp	r3, #3
 8004550:	f63f af3b 	bhi.w	80043ca <button_ok+0x12>
 8004554:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004558:	00fd01cc 	.word	0x00fd01cc
 800455c:	0004001e 	.word	0x0004001e
					configNodeViaUart (selectedNode);
 8004560:	4b09      	ldr	r3, [pc, #36]	; (8004588 <button_ok+0x1d0>)
 8004562:	7818      	ldrb	r0, [r3, #0]
 8004564:	f002 fbf8 	bl	8006d58 <configNodeViaUart>
					configTime = HAL_GetTick ();
 8004568:	f002 fdf8 	bl	800715c <HAL_GetTick>
					configStep = 1;
 800456c:	2201      	movs	r2, #1
					configTime = HAL_GetTick ();
 800456e:	4907      	ldr	r1, [pc, #28]	; (800458c <button_ok+0x1d4>)
					configStep = 1;
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <button_ok+0x1d8>)
					configTime = HAL_GetTick ();
 8004572:	6008      	str	r0, [r1, #0]
					configStep = 1;
 8004574:	701a      	strb	r2, [r3, #0]
					break;
 8004576:	e728      	b.n	80043ca <button_ok+0x12>
 8004578:	200000ee 	.word	0x200000ee
 800457c:	20000adc 	.word	0x20000adc
 8004580:	200000ef 	.word	0x200000ef
 8004584:	200000db 	.word	0x200000db
 8004588:	200000f2 	.word	0x200000f2
 800458c:	20000c74 	.word	0x20000c74
 8004590:	20000b29 	.word	0x20000b29
					changeDisarmNode (selectedNode);
 8004594:	4be5      	ldr	r3, [pc, #916]	; (800492c <button_ok+0x574>)
	nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 8004596:	4ce6      	ldr	r4, [pc, #920]	; (8004930 <button_ok+0x578>)
					changeDisarmNode (selectedNode);
 8004598:	f9b3 3000 	ldrsh.w	r3, [r3]
	txMes->adr = selectedNode;
 800459c:	49e5      	ldr	r1, [pc, #916]	; (8004934 <button_ok+0x57c>)
	nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 800459e:	eb04 1043 	add.w	r0, r4, r3, lsl #5
 80045a2:	7b82      	ldrb	r2, [r0, #14]
	txMes->adr = selectedNode;
 80045a4:	6809      	ldr	r1, [r1, #0]
	nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 80045a6:	fab2 f282 	clz	r2, r2
 80045aa:	0952      	lsrs	r2, r2, #5
 80045ac:	7382      	strb	r2, [r0, #14]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80045ae:	7848      	ldrb	r0, [r1, #1]
	txMes->uplink = 0;
 80045b0:	00db      	lsls	r3, r3, #3
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80045b2:	f362 0000 	bfi	r0, r2, #0, #1
	txMes->uplink = 0;
 80045b6:	f043 0302 	orr.w	r3, r3, #2
 80045ba:	700b      	strb	r3, [r1, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80045bc:	7048      	strb	r0, [r1, #1]
	SX127X_transmitAsync (&myRadio, 3);
 80045be:	2103      	movs	r1, #3
 80045c0:	48dd      	ldr	r0, [pc, #884]	; (8004938 <button_ok+0x580>)
 80045c2:	f001 ff49 	bl	8006458 <SX127X_transmitAsync>
			nodeData[i].disarmed = nodes[i].disarmed;
 80045c6:	f894 502d 	ldrb.w	r5, [r4, #45]	; 0x2d
			nodeData[i].masked = nodes[i].masked;
 80045ca:	7b60      	ldrb	r0, [r4, #13]
 80045cc:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 80045d0:	f894 800c 	ldrb.w	r8, [r4, #12]
			nodeData[i].disarmed = nodes[i].disarmed;
 80045d4:	f894 104d 	ldrb.w	r1, [r4, #77]	; 0x4d
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80045d8:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
			nodeData[i].masked = nodes[i].masked;
 80045dc:	7ba7      	ldrb	r7, [r4, #14]
 80045de:	00ad      	lsls	r5, r5, #2
 80045e0:	0080      	lsls	r0, r0, #2
			nodeData[i].disarmed = nodes[i].disarmed;
 80045e2:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
			nodeData[i].masked = nodes[i].masked;
 80045e6:	f894 e04c 	ldrb.w	lr, [r4, #76]	; 0x4c
 80045ea:	f00c 0c03 	and.w	ip, ip, #3
 80045ee:	f008 0803 	and.w	r8, r8, #3
 80045f2:	f005 0504 	and.w	r5, r5, #4
 80045f6:	f000 0004 	and.w	r0, r0, #4
 80045fa:	4bd0      	ldr	r3, [pc, #832]	; (800493c <button_ok+0x584>)
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80045fc:	f894 904e 	ldrb.w	r9, [r4, #78]	; 0x4e
			nodeData[i].masked = nodes[i].masked;
 8004600:	ea45 050c 	orr.w	r5, r5, ip
 8004604:	ea40 0008 	orr.w	r0, r0, r8
 8004608:	f894 c06c 	ldrb.w	ip, [r4, #108]	; 0x6c
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 800460c:	f894 806e 	ldrb.w	r8, [r4, #110]	; 0x6e
			nodeData[i].masked = nodes[i].masked;
 8004610:	0089      	lsls	r1, r1, #2
 8004612:	00f6      	lsls	r6, r6, #3
 8004614:	00ff      	lsls	r7, r7, #3
 8004616:	f00e 0e03 	and.w	lr, lr, #3
 800461a:	f006 0608 	and.w	r6, r6, #8
 800461e:	f007 0708 	and.w	r7, r7, #8
 8004622:	0092      	lsls	r2, r2, #2
 8004624:	f001 0104 	and.w	r1, r1, #4
 8004628:	f00c 0c03 	and.w	ip, ip, #3
 800462c:	ea41 010e 	orr.w	r1, r1, lr
 8004630:	4335      	orrs	r5, r6
 8004632:	f893 e001 	ldrb.w	lr, [r3, #1]
 8004636:	78de      	ldrb	r6, [r3, #3]
 8004638:	4338      	orrs	r0, r7
 800463a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800463e:	789f      	ldrb	r7, [r3, #2]
 8004640:	f002 0204 	and.w	r2, r2, #4
 8004644:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004648:	f009 0908 	and.w	r9, r9, #8
 800464c:	ea42 020c 	orr.w	r2, r2, ip
 8004650:	f008 0808 	and.w	r8, r8, #8
 8004654:	f893 c000 	ldrb.w	ip, [r3]
 8004658:	f02e 0e0f 	bic.w	lr, lr, #15
 800465c:	ea41 0109 	orr.w	r1, r1, r9
 8004660:	f027 070f 	bic.w	r7, r7, #15
 8004664:	ea42 0208 	orr.w	r2, r2, r8
 8004668:	f026 060f 	bic.w	r6, r6, #15
 800466c:	ea45 050e 	orr.w	r5, r5, lr
 8004670:	4339      	orrs	r1, r7
 8004672:	4332      	orrs	r2, r6
			nodeData[i].disarmed = nodes[i].disarmed;
 8004674:	f894 808d 	ldrb.w	r8, [r4, #141]	; 0x8d
			nodeData[i].masked = nodes[i].masked;
 8004678:	f02c 0c0f 	bic.w	ip, ip, #15
 800467c:	705d      	strb	r5, [r3, #1]
 800467e:	7099      	strb	r1, [r3, #2]
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8004680:	f894 508e 	ldrb.w	r5, [r4, #142]	; 0x8e
 8004684:	f894 10ee 	ldrb.w	r1, [r4, #238]	; 0xee
			nodeData[i].masked = nodes[i].masked;
 8004688:	70da      	strb	r2, [r3, #3]
 800468a:	f894 20ac 	ldrb.w	r2, [r4, #172]	; 0xac
 800468e:	ea40 000c 	orr.w	r0, r0, ip
			nodeData[i].disarmed = nodes[i].disarmed;
 8004692:	f894 70ed 	ldrb.w	r7, [r4, #237]	; 0xed
 8004696:	f894 c0cd 	ldrb.w	ip, [r4, #205]	; 0xcd
			nodeData[i].masked = nodes[i].masked;
 800469a:	f894 608c 	ldrb.w	r6, [r4, #140]	; 0x8c
			nodeData[i].disarmed = nodes[i].disarmed;
 800469e:	f894 e0ad 	ldrb.w	lr, [r4, #173]	; 0xad
			nodeData[i].masked = nodes[i].masked;
 80046a2:	7018      	strb	r0, [r3, #0]
 80046a4:	f002 0b03 	and.w	fp, r2, #3
 80046a8:	00e8      	lsls	r0, r5, #3
 80046aa:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
 80046ae:	00cd      	lsls	r5, r1, #3
 80046b0:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80046b4:	f894 10cc 	ldrb.w	r1, [r4, #204]	; 0xcc
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80046b8:	f894 90ae 	ldrb.w	r9, [r4, #174]	; 0xae
 80046bc:	f894 a0ce 	ldrb.w	sl, [r4, #206]	; 0xce
			nodeData[i].masked = nodes[i].masked;
 80046c0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80046c4:	00bf      	lsls	r7, r7, #2
 80046c6:	f008 0804 	and.w	r8, r8, #4
 80046ca:	f006 0603 	and.w	r6, r6, #3
 80046ce:	f00c 0c04 	and.w	ip, ip, #4
 80046d2:	f007 0704 	and.w	r7, r7, #4
 80046d6:	ea48 0606 	orr.w	r6, r8, r6
 80046da:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80046de:	f001 0103 	and.w	r1, r1, #3
 80046e2:	f002 0203 	and.w	r2, r2, #3
 80046e6:	f000 0008 	and.w	r0, r0, #8
 80046ea:	791c      	ldrb	r4, [r3, #4]
 80046ec:	4330      	orrs	r0, r6
 80046ee:	ea4c 0101 	orr.w	r1, ip, r1
 80046f2:	799e      	ldrb	r6, [r3, #6]
 80046f4:	f893 c007 	ldrb.w	ip, [r3, #7]
 80046f8:	433a      	orrs	r2, r7
 80046fa:	f00e 0e04 	and.w	lr, lr, #4
 80046fe:	795f      	ldrb	r7, [r3, #5]
 8004700:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8004704:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8004708:	f005 0508 	and.w	r5, r5, #8
 800470c:	f009 0908 	and.w	r9, r9, #8
 8004710:	f00a 0a08 	and.w	sl, sl, #8
 8004714:	ea4e 0e0b 	orr.w	lr, lr, fp
 8004718:	432a      	orrs	r2, r5
 800471a:	ea4e 0909 	orr.w	r9, lr, r9
 800471e:	ea41 010a 	orr.w	r1, r1, sl
 8004722:	f024 040f 	bic.w	r4, r4, #15
 8004726:	f027 070f 	bic.w	r7, r7, #15
 800472a:	f026 060f 	bic.w	r6, r6, #15
 800472e:	f02c 050f 	bic.w	r5, ip, #15
 8004732:	4304      	orrs	r4, r0
 8004734:	4331      	orrs	r1, r6
 8004736:	ea49 0007 	orr.w	r0, r9, r7
 800473a:	432a      	orrs	r2, r5
 800473c:	711c      	strb	r4, [r3, #4]
 800473e:	7158      	strb	r0, [r3, #5]
 8004740:	7199      	strb	r1, [r3, #6]
 8004742:	71da      	strb	r2, [r3, #7]
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8004744:	2208      	movs	r2, #8
 8004746:	2000      	movs	r0, #0
 8004748:	4b7d      	ldr	r3, [pc, #500]	; (8004940 <button_ok+0x588>)
 800474a:	497c      	ldr	r1, [pc, #496]	; (800493c <button_ok+0x584>)
 800474c:	f7fc fb2e 	bl	8000dac <writeToEeprom>
}
 8004750:	e63b      	b.n	80043ca <button_ok+0x12>
					nodes[selectedNode].masked = (nodes[selectedNode].masked == 3) ? 0 : nodes[selectedNode].masked + 1;
 8004752:	4a76      	ldr	r2, [pc, #472]	; (800492c <button_ok+0x574>)
 8004754:	4b76      	ldr	r3, [pc, #472]	; (8004930 <button_ok+0x578>)
 8004756:	f9b2 2000 	ldrsh.w	r2, [r2]
			nodeData[i].masked = nodes[i].masked;
 800475a:	7b5c      	ldrb	r4, [r3, #13]
					nodes[selectedNode].masked = (nodes[selectedNode].masked == 3) ? 0 : nodes[selectedNode].masked + 1;
 800475c:	eb03 1142 	add.w	r1, r3, r2, lsl #5
 8004760:	7b09      	ldrb	r1, [r1, #12]
 8004762:	0152      	lsls	r2, r2, #5
 8004764:	2903      	cmp	r1, #3
 8004766:	bf0c      	ite	eq
 8004768:	2100      	moveq	r1, #0
 800476a:	3101      	addne	r1, #1
 800476c:	441a      	add	r2, r3
 800476e:	bf18      	it	ne
 8004770:	b2c9      	uxtbne	r1, r1
 8004772:	7311      	strb	r1, [r2, #12]
			nodeData[i].disarmed = nodes[i].disarmed;
 8004774:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
			nodeData[i].masked = nodes[i].masked;
 8004778:	f893 c02c 	ldrb.w	ip, [r3, #44]	; 0x2c
 800477c:	0089      	lsls	r1, r1, #2
			nodeData[i].disarmed = nodes[i].disarmed;
 800477e:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 8004782:	f893 e06d 	ldrb.w	lr, [r3, #109]	; 0x6d
			nodeData[i].masked = nodes[i].masked;
 8004786:	7b1d      	ldrb	r5, [r3, #12]
 8004788:	f001 0104 	and.w	r1, r1, #4
 800478c:	f00c 0c03 	and.w	ip, ip, #3
 8004790:	f893 806c 	ldrb.w	r8, [r3, #108]	; 0x6c
 8004794:	ea41 0c0c 	orr.w	ip, r1, ip
 8004798:	00a4      	lsls	r4, r4, #2
 800479a:	f893 104c 	ldrb.w	r1, [r3, #76]	; 0x4c
 800479e:	4a67      	ldr	r2, [pc, #412]	; (800493c <button_ok+0x584>)
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80047a0:	f893 702e 	ldrb.w	r7, [r3, #46]	; 0x2e
			nodeData[i].masked = nodes[i].masked;
 80047a4:	7b9e      	ldrb	r6, [r3, #14]
 80047a6:	f005 0503 	and.w	r5, r5, #3
 80047aa:	0080      	lsls	r0, r0, #2
 80047ac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80047b0:	f004 0404 	and.w	r4, r4, #4
 80047b4:	432c      	orrs	r4, r5
 80047b6:	f001 0103 	and.w	r1, r1, #3
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80047ba:	f893 504e 	ldrb.w	r5, [r3, #78]	; 0x4e
			nodeData[i].masked = nodes[i].masked;
 80047be:	f008 0803 	and.w	r8, r8, #3
 80047c2:	f000 0004 	and.w	r0, r0, #4
 80047c6:	f00e 0e04 	and.w	lr, lr, #4
 80047ca:	4308      	orrs	r0, r1
 80047cc:	ea4e 0e08 	orr.w	lr, lr, r8
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 80047d0:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
			nodeData[i].masked = nodes[i].masked;
 80047d4:	f892 8001 	ldrb.w	r8, [r2, #1]
 80047d8:	00ff      	lsls	r7, r7, #3
 80047da:	00f6      	lsls	r6, r6, #3
 80047dc:	f006 0608 	and.w	r6, r6, #8
 80047e0:	f007 0708 	and.w	r7, r7, #8
 80047e4:	00ed      	lsls	r5, r5, #3
 80047e6:	ea4c 0707 	orr.w	r7, ip, r7
 80047ea:	00c9      	lsls	r1, r1, #3
 80047ec:	ea44 0c06 	orr.w	ip, r4, r6
 80047f0:	f005 0508 	and.w	r5, r5, #8
 80047f4:	7816      	ldrb	r6, [r2, #0]
 80047f6:	f028 040f 	bic.w	r4, r8, #15
 80047fa:	4305      	orrs	r5, r0
 80047fc:	4327      	orrs	r7, r4
 80047fe:	7890      	ldrb	r0, [r2, #2]
			nodeData[i].disarmed = nodes[i].disarmed;
 8004800:	f893 40ad 	ldrb.w	r4, [r3, #173]	; 0xad
			nodeData[i].masked = nodes[i].masked;
 8004804:	f001 0108 	and.w	r1, r1, #8
			nodeData[i].disarmed = nodes[i].disarmed;
 8004808:	f893 908d 	ldrb.w	r9, [r3, #141]	; 0x8d
			nodeData[i].masked = nodes[i].masked;
 800480c:	f893 a0ac 	ldrb.w	sl, [r3, #172]	; 0xac
 8004810:	ea4e 0101 	orr.w	r1, lr, r1
 8004814:	f026 060f 	bic.w	r6, r6, #15
 8004818:	f892 e003 	ldrb.w	lr, [r2, #3]
 800481c:	ea4c 0606 	orr.w	r6, ip, r6
 8004820:	f020 000f 	bic.w	r0, r0, #15
			nodeData[i].disarmed = nodes[i].disarmed;
 8004824:	f893 c0cd 	ldrb.w	ip, [r3, #205]	; 0xcd
			nodeData[i].masked = nodes[i].masked;
 8004828:	00a4      	lsls	r4, r4, #2
 800482a:	f893 808c 	ldrb.w	r8, [r3, #140]	; 0x8c
 800482e:	4328      	orrs	r0, r5
 8004830:	f02e 0e0f 	bic.w	lr, lr, #15
 8004834:	ea4f 0589 	mov.w	r5, r9, lsl #2
 8004838:	7057      	strb	r7, [r2, #1]
 800483a:	f893 90cc 	ldrb.w	r9, [r3, #204]	; 0xcc
			nodeData[i].disarmed = nodes[i].disarmed;
 800483e:	f893 70ed 	ldrb.w	r7, [r3, #237]	; 0xed
			nodeData[i].masked = nodes[i].masked;
 8004842:	7016      	strb	r6, [r2, #0]
 8004844:	f004 0404 	and.w	r4, r4, #4
 8004848:	f00a 0603 	and.w	r6, sl, #3
 800484c:	ea41 010e 	orr.w	r1, r1, lr
 8004850:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004854:	f893 e0ec 	ldrb.w	lr, [r3, #236]	; 0xec
 8004858:	4334      	orrs	r4, r6
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 800485a:	f893 60ae 	ldrb.w	r6, [r3, #174]	; 0xae
			nodeData[i].masked = nodes[i].masked;
 800485e:	7090      	strb	r0, [r2, #2]
 8004860:	f008 0803 	and.w	r8, r8, #3
 8004864:	f009 0003 	and.w	r0, r9, #3
 8004868:	00bf      	lsls	r7, r7, #2
 800486a:	f00c 0904 	and.w	r9, ip, #4
 800486e:	f005 0504 	and.w	r5, r5, #4
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8004872:	f893 c08e 	ldrb.w	ip, [r3, #142]	; 0x8e
			nodeData[i].masked = nodes[i].masked;
 8004876:	f00e 0e03 	and.w	lr, lr, #3
 800487a:	ea45 0508 	orr.w	r5, r5, r8
 800487e:	f007 0704 	and.w	r7, r7, #4
 8004882:	ea4f 08c6 	mov.w	r8, r6, lsl #3
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8004886:	f893 60ce 	ldrb.w	r6, [r3, #206]	; 0xce
			nodeData[i].masked = nodes[i].masked;
 800488a:	ea47 070e 	orr.w	r7, r7, lr
 800488e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
 8004892:	f893 e0ee 	ldrb.w	lr, [r3, #238]	; 0xee
			nodeData[i].masked = nodes[i].masked;
 8004896:	f00c 0c08 	and.w	ip, ip, #8
 800489a:	00f3      	lsls	r3, r6, #3
 800489c:	f008 0608 	and.w	r6, r8, #8
 80048a0:	ea45 050c 	orr.w	r5, r5, ip
 80048a4:	f892 8004 	ldrb.w	r8, [r2, #4]
 80048a8:	f892 c006 	ldrb.w	ip, [r2, #6]
 80048ac:	4334      	orrs	r4, r6
 80048ae:	70d1      	strb	r1, [r2, #3]
 80048b0:	79d6      	ldrb	r6, [r2, #7]
 80048b2:	ea4f 01ce 	mov.w	r1, lr, lsl #3
 80048b6:	f892 e005 	ldrb.w	lr, [r2, #5]
 80048ba:	f003 0308 	and.w	r3, r3, #8
 80048be:	f001 0108 	and.w	r1, r1, #8
 80048c2:	ea49 0000 	orr.w	r0, r9, r0
 80048c6:	4318      	orrs	r0, r3
 80048c8:	f028 080f 	bic.w	r8, r8, #15
 80048cc:	ea47 0301 	orr.w	r3, r7, r1
 80048d0:	f026 060f 	bic.w	r6, r6, #15
 80048d4:	f02e 070f 	bic.w	r7, lr, #15
 80048d8:	f02c 010f 	bic.w	r1, ip, #15
 80048dc:	ea45 0508 	orr.w	r5, r5, r8
 80048e0:	433c      	orrs	r4, r7
 80048e2:	4301      	orrs	r1, r0
 80048e4:	4333      	orrs	r3, r6
 80048e6:	7115      	strb	r5, [r2, #4]
 80048e8:	7154      	strb	r4, [r2, #5]
 80048ea:	7191      	strb	r1, [r2, #6]
 80048ec:	71d3      	strb	r3, [r2, #7]
	for (int i = 0; i < MAX_NODES; ++i)
 80048ee:	e729      	b.n	8004744 <button_ok+0x38c>
					screenMode = smRegular;
 80048f0:	2000      	movs	r0, #0
					pingNode (selectedNode);
 80048f2:	4b0e      	ldr	r3, [pc, #56]	; (800492c <button_ok+0x574>)
	txMes->adr = selectedNode;
 80048f4:	4a0f      	ldr	r2, [pc, #60]	; (8004934 <button_ok+0x57c>)
					pingNode (selectedNode);
 80048f6:	f9b3 3000 	ldrsh.w	r3, [r3]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80048fa:	490d      	ldr	r1, [pc, #52]	; (8004930 <button_ok+0x578>)
	txMes->adr = selectedNode;
 80048fc:	6812      	ldr	r2, [r2, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80048fe:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8004902:	7b8d      	ldrb	r5, [r1, #14]
 8004904:	7851      	ldrb	r1, [r2, #1]
	txMes->uplink = 0;
 8004906:	00db      	lsls	r3, r3, #3
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8004908:	f365 0100 	bfi	r1, r5, #0, #1
	txMes->uplink = 0;
 800490c:	f043 0302 	orr.w	r3, r3, #2
					screenMode = smRegular;
 8004910:	7020      	strb	r0, [r4, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8004912:	7051      	strb	r1, [r2, #1]
	txMes->uplink = 0;
 8004914:	7013      	strb	r3, [r2, #0]
	SX127X_transmitAsync (&myRadio, 3);
 8004916:	2103      	movs	r1, #3
 8004918:	4807      	ldr	r0, [pc, #28]	; (8004938 <button_ok+0x580>)
 800491a:	f001 fd9d 	bl	8006458 <SX127X_transmitAsync>
}
 800491e:	e554      	b.n	80043ca <button_ok+0x12>
					screenMode = smCleanNodeData;
 8004920:	2211      	movs	r2, #17
 8004922:	7022      	strb	r2, [r4, #0]
					break;
 8004924:	e5aa      	b.n	800447c <button_ok+0xc4>
					screenMode = smLed;
 8004926:	2210      	movs	r2, #16
 8004928:	7022      	strb	r2, [r4, #0]
					break;
 800492a:	e5a7      	b.n	800447c <button_ok+0xc4>
 800492c:	200000f2 	.word	0x200000f2
 8004930:	20000c78 	.word	0x20000c78
 8004934:	20000018 	.word	0x20000018
 8004938:	20000928 	.word	0x20000928
 800493c:	20000d78 	.word	0x20000d78
 8004940:	20000a70 	.word	0x20000a70
			screenMode = smMainMenu;
 8004944:	2301      	movs	r3, #1
 8004946:	7023      	strb	r3, [r4, #0]
			saveSettings ();
 8004948:	f7fc fcc4 	bl	80012d4 <saveSettings>
 800494c:	e53d      	b.n	80043ca <button_ok+0x12>
			if (cursorPos < 20 && settings.WiFiPass[cursorPos] != ' ' && settings.WiFiPass[cursorPos] != '\0')
 800494e:	4b43      	ldr	r3, [pc, #268]	; (8004a5c <button_ok+0x6a4>)
 8004950:	4943      	ldr	r1, [pc, #268]	; (8004a60 <button_ok+0x6a8>)
 8004952:	f993 2000 	ldrsb.w	r2, [r3]
 8004956:	2a13      	cmp	r2, #19
 8004958:	dc0c      	bgt.n	8004974 <button_ok+0x5bc>
 800495a:	1888      	adds	r0, r1, r2
 800495c:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 8004960:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 8004964:	d006      	beq.n	8004974 <button_ok+0x5bc>
				cursorPos++;
 8004966:	3201      	adds	r2, #1
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e52e      	b.n	80043ca <button_ok+0x12>
			NetRefreshNetworkList (&netHandler);
 800496c:	483d      	ldr	r0, [pc, #244]	; (8004a64 <button_ok+0x6ac>)
 800496e:	f7fb ff29 	bl	80007c4 <NetRefreshNetworkList>
 8004972:	e52a      	b.n	80043ca <button_ok+0x12>
					settings.WiFiPass[cursorPos] = 0;
 8004974:	2000      	movs	r0, #0
					screenMode = smNetworkMenu;
 8004976:	2505      	movs	r5, #5
					settings.WiFiPass[cursorPos] = 0;
 8004978:	440a      	add	r2, r1
 800497a:	f882 0023 	strb.w	r0, [r2, #35]	; 0x23
					cursorPos = 0;
 800497e:	7018      	strb	r0, [r3, #0]
					screenMode = smNetworkMenu;
 8004980:	7025      	strb	r5, [r4, #0]
					cursorPos = 0;
 8004982:	e522      	b.n	80043ca <button_ok+0x12>
			sprintf (settings.SSID, "%s", netHandler.nets[selectedNetwork]);
 8004984:	4a38      	ldr	r2, [pc, #224]	; (8004a68 <button_ok+0x6b0>)
 8004986:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <button_ok+0x6b4>)
 8004988:	f992 1000 	ldrsb.w	r1, [r2]
 800498c:	4838      	ldr	r0, [pc, #224]	; (8004a70 <button_ok+0x6b8>)
 800498e:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8004992:	f005 febd 	bl	800a710 <strcpy>
			screenMode = smNetworkMenu;
 8004996:	2105      	movs	r1, #5
			cursorPos = 0;
 8004998:	2200      	movs	r2, #0
 800499a:	4b30      	ldr	r3, [pc, #192]	; (8004a5c <button_ok+0x6a4>)
			screenMode = smNetworkMenu;
 800499c:	7021      	strb	r1, [r4, #0]
			cursorPos = 0;
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	e513      	b.n	80043ca <button_ok+0x12>
			if (cursorPos < 20 && settings.host[cursorPos] != ' ' && settings.host[cursorPos] != '\0')
 80049a2:	4b2e      	ldr	r3, [pc, #184]	; (8004a5c <button_ok+0x6a4>)
 80049a4:	492e      	ldr	r1, [pc, #184]	; (8004a60 <button_ok+0x6a8>)
 80049a6:	f993 2000 	ldrsb.w	r2, [r3]
 80049aa:	2a13      	cmp	r2, #19
 80049ac:	dc05      	bgt.n	80049ba <button_ok+0x602>
 80049ae:	1888      	adds	r0, r1, r2
 80049b0:	f890 0043 	ldrb.w	r0, [r0, #67]	; 0x43
 80049b4:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 80049b8:	d1d5      	bne.n	8004966 <button_ok+0x5ae>
					settings.host[cursorPos] = 0;
 80049ba:	2000      	movs	r0, #0
					screenMode = smNetworkMenu;
 80049bc:	2505      	movs	r5, #5
					settings.host[cursorPos] = 0;
 80049be:	440a      	add	r2, r1
 80049c0:	f882 0043 	strb.w	r0, [r2, #67]	; 0x43
					cursorPos = 0;
 80049c4:	7018      	strb	r0, [r3, #0]
					screenMode = smNetworkMenu;
 80049c6:	7025      	strb	r5, [r4, #0]
					cursorPos = 0;
 80049c8:	e4ff      	b.n	80043ca <button_ok+0x12>
			if (cursorPos < 20 && settings.ServerPass[cursorPos] != ' ' && settings.ServerPass[cursorPos] != '\0')
 80049ca:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <button_ok+0x6a4>)
 80049cc:	4924      	ldr	r1, [pc, #144]	; (8004a60 <button_ok+0x6a8>)
 80049ce:	f993 2000 	ldrsb.w	r2, [r3]
 80049d2:	2a13      	cmp	r2, #19
 80049d4:	dc05      	bgt.n	80049e2 <button_ok+0x62a>
 80049d6:	1888      	adds	r0, r1, r2
 80049d8:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
 80049dc:	f010 0fdf 	tst.w	r0, #223	; 0xdf
 80049e0:	d1c1      	bne.n	8004966 <button_ok+0x5ae>
					settings.ServerPass[cursorPos] = 0;
 80049e2:	2000      	movs	r0, #0
					screenMode = smNetworkMenu;
 80049e4:	2505      	movs	r5, #5
					settings.ServerPass[cursorPos] = 0;
 80049e6:	440a      	add	r2, r1
 80049e8:	f882 0033 	strb.w	r0, [r2, #51]	; 0x33
					cursorPos = 0;
 80049ec:	7018      	strb	r0, [r3, #0]
					screenMode = smNetworkMenu;
 80049ee:	7025      	strb	r5, [r4, #0]
					cursorPos = 0;
 80049f0:	e4eb      	b.n	80043ca <button_ok+0x12>
			if (cursorPos < 7)
 80049f2:	4a1a      	ldr	r2, [pc, #104]	; (8004a5c <button_ok+0x6a4>)
 80049f4:	f992 3000 	ldrsb.w	r3, [r2]
 80049f8:	2b06      	cmp	r3, #6
				screenMode = smNetworkMenu;
 80049fa:	bfcd      	iteet	gt
 80049fc:	2305      	movgt	r3, #5
				cursorPos++;
 80049fe:	3301      	addle	r3, #1
 8004a00:	7013      	strble	r3, [r2, #0]
				screenMode = smNetworkMenu;
 8004a02:	7023      	strbgt	r3, [r4, #0]
 8004a04:	e4e1      	b.n	80043ca <button_ok+0x12>
			screenMode = smMainMenu;
 8004a06:	2101      	movs	r1, #1
			menuPosition = 0;
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <button_ok+0x6bc>)
			screenMode = smMainMenu;
 8004a0c:	7021      	strb	r1, [r4, #0]
			menuPosition = 0;
 8004a0e:	701a      	strb	r2, [r3, #0]
 8004a10:	e4db      	b.n	80043ca <button_ok+0x12>
			nodeData[i].masked = 0;
 8004a12:	4b19      	ldr	r3, [pc, #100]	; (8004a78 <button_ok+0x6c0>)
 8004a14:	7819      	ldrb	r1, [r3, #0]
 8004a16:	785a      	ldrb	r2, [r3, #1]
 8004a18:	f021 010f 	bic.w	r1, r1, #15
 8004a1c:	f022 020f 	bic.w	r2, r2, #15
 8004a20:	789e      	ldrb	r6, [r3, #2]
 8004a22:	78dd      	ldrb	r5, [r3, #3]
 8004a24:	791c      	ldrb	r4, [r3, #4]
 8004a26:	7958      	ldrb	r0, [r3, #5]
 8004a28:	7019      	strb	r1, [r3, #0]
 8004a2a:	705a      	strb	r2, [r3, #1]
 8004a2c:	7999      	ldrb	r1, [r3, #6]
 8004a2e:	79da      	ldrb	r2, [r3, #7]
 8004a30:	f026 060f 	bic.w	r6, r6, #15
 8004a34:	f025 050f 	bic.w	r5, r5, #15
 8004a38:	f024 040f 	bic.w	r4, r4, #15
 8004a3c:	f020 000f 	bic.w	r0, r0, #15
 8004a40:	f021 010f 	bic.w	r1, r1, #15
 8004a44:	f022 020f 	bic.w	r2, r2, #15
 8004a48:	709e      	strb	r6, [r3, #2]
 8004a4a:	70dd      	strb	r5, [r3, #3]
 8004a4c:	711c      	strb	r4, [r3, #4]
 8004a4e:	7158      	strb	r0, [r3, #5]
 8004a50:	7199      	strb	r1, [r3, #6]
 8004a52:	71da      	strb	r2, [r3, #7]
	saveNodeData ();
 8004a54:	f7fc f9fe 	bl	8000e54 <saveNodeData>
}
 8004a58:	e4b7      	b.n	80043ca <button_ok+0x12>
 8004a5a:	bf00      	nop
 8004a5c:	200000b2 	.word	0x200000b2
 8004a60:	20000a00 	.word	0x20000a00
 8004a64:	20000e4c 	.word	0x20000e4c
 8004a68:	200000f0 	.word	0x200000f0
 8004a6c:	20000e7c 	.word	0x20000e7c
 8004a70:	20000a13 	.word	0x20000a13
 8004a74:	200000db 	.word	0x200000db
 8004a78:	20000d78 	.word	0x20000d78

08004a7c <nodeConfigureRoutine>:
			&& settings.realFrequency == nodeSettings.realFrequency && settings.preamble == nodeSettings.preamble && settings.syncWord == nodeSettings.sw
			&& selectedNode == nodeSettings.nodeNum);
}

void nodeConfigureRoutine ()
{
 8004a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (HAL_GetTick () - configTime > 500 && configStep == 1)
 8004a80:	f002 fb6c 	bl	800715c <HAL_GetTick>
 8004a84:	4d3d      	ldr	r5, [pc, #244]	; (8004b7c <nodeConfigureRoutine+0x100>)
 8004a86:	682b      	ldr	r3, [r5, #0]
 8004a88:	1ac0      	subs	r0, r0, r3
 8004a8a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004a8e:	d905      	bls.n	8004a9c <nodeConfigureRoutine+0x20>
 8004a90:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8004b80 <nodeConfigureRoutine+0x104>
 8004a94:	f898 3000 	ldrb.w	r3, [r8]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d016      	beq.n	8004aca <nodeConfigureRoutine+0x4e>
				}
			updateLcd ();
			configStep = 2;
		}

	if (HAL_GetTick () - configTime > 1500 && configStep == 2)
 8004a9c:	f002 fb5e 	bl	800715c <HAL_GetTick>
 8004aa0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8004aa4:	682a      	ldr	r2, [r5, #0]
 8004aa6:	1a80      	subs	r0, r0, r2
 8004aa8:	4298      	cmp	r0, r3
 8004aaa:	d903      	bls.n	8004ab4 <nodeConfigureRoutine+0x38>
 8004aac:	4b34      	ldr	r3, [pc, #208]	; (8004b80 <nodeConfigureRoutine+0x104>)
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	2a02      	cmp	r2, #2
 8004ab2:	d001      	beq.n	8004ab8 <nodeConfigureRoutine+0x3c>
		{
			configStep = 0;
			flag.lcdRefreshRequest = 1;
		}
}
 8004ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			configStep = 0;
 8004ab8:	2100      	movs	r1, #0
			flag.lcdRefreshRequest = 1;
 8004aba:	4a32      	ldr	r2, [pc, #200]	; (8004b84 <nodeConfigureRoutine+0x108>)
			configStep = 0;
 8004abc:	7019      	strb	r1, [r3, #0]
			flag.lcdRefreshRequest = 1;
 8004abe:	7813      	ldrb	r3, [r2, #0]
 8004ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ac4:	7013      	strb	r3, [r2, #0]
}
 8004ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			clearStrings ();
 8004aca:	f7fc fb29 	bl	8001120 <clearStrings>
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr && settings.sf == nodeSettings.sf
 8004ace:	4a2e      	ldr	r2, [pc, #184]	; (8004b88 <nodeConfigureRoutine+0x10c>)
 8004ad0:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <nodeConfigureRoutine+0x110>)
			&& selectedNode == nodeSettings.nodeNum);
 8004ad2:	7bd0      	ldrb	r0, [r2, #15]
 8004ad4:	7b59      	ldrb	r1, [r3, #13]
 8004ad6:	4288      	cmp	r0, r1
 8004ad8:	d02d      	beq.n	8004b36 <nodeConfigureRoutine+0xba>
					sprintf (string[0], "Failure");
 8004ada:	4a2d      	ldr	r2, [pc, #180]	; (8004b90 <nodeConfigureRoutine+0x114>)
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <nodeConfigureRoutine+0x118>)
 8004ade:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ae2:	e883 0003 	stmia.w	r3, {r0, r1}
	ssd1306_Clean ();
 8004ae6:	4e2b      	ldr	r6, [pc, #172]	; (8004b94 <nodeConfigureRoutine+0x118>)
 8004ae8:	f000 febe 	bl	8005868 <ssd1306_Clean>
 8004aec:	4637      	mov	r7, r6
	for (int i = 0; i < 8; i++)
 8004aee:	2400      	movs	r4, #0
			ssd1306_GotoXY (0, i);
 8004af0:	4621      	mov	r1, r4
 8004af2:	2000      	movs	r0, #0
 8004af4:	f000 fe7a 	bl	80057ec <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8004af8:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 8004afa:	4638      	mov	r0, r7
 8004afc:	f000 fe7e 	bl	80057fc <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8004b00:	2c08      	cmp	r4, #8
 8004b02:	f107 0740 	add.w	r7, r7, #64	; 0x40
 8004b06:	d1f3      	bne.n	8004af0 <nodeConfigureRoutine+0x74>
	ssd1306_Update ();
 8004b08:	f000 feb6 	bl	8005878 <ssd1306_Update>
	for (int i = 0; i < 8; i++)
 8004b0c:	2400      	movs	r4, #0
	UC1609_Clean ();
 8004b0e:	f7fc f811 	bl	8000b34 <UC1609_Clean>
			UC1609_SetPos (0, i);
 8004b12:	b2e1      	uxtb	r1, r4
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7fb ff63 	bl	80009e0 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8004b1a:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7fc f811 	bl	8000b44 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8004b22:	2c08      	cmp	r4, #8
 8004b24:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8004b28:	d1f3      	bne.n	8004b12 <nodeConfigureRoutine+0x96>
	UC1609_UpdateScreen ();
 8004b2a:	f7fb ff65 	bl	80009f8 <UC1609_UpdateScreen>
			configStep = 2;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	f888 3000 	strb.w	r3, [r8]
 8004b34:	e7b2      	b.n	8004a9c <nodeConfigureRoutine+0x20>
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr && settings.sf == nodeSettings.sf
 8004b36:	7c10      	ldrb	r0, [r2, #16]
 8004b38:	7ad9      	ldrb	r1, [r3, #11]
 8004b3a:	4288      	cmp	r0, r1
 8004b3c:	d1cd      	bne.n	8004ada <nodeConfigureRoutine+0x5e>
 8004b3e:	7b90      	ldrb	r0, [r2, #14]
 8004b40:	7b19      	ldrb	r1, [r3, #12]
 8004b42:	4288      	cmp	r0, r1
 8004b44:	d1c9      	bne.n	8004ada <nodeConfigureRoutine+0x5e>
			&& settings.realFrequency == nodeSettings.realFrequency && settings.preamble == nodeSettings.preamble && settings.syncWord == nodeSettings.sw
 8004b46:	6810      	ldr	r0, [r2, #0]
 8004b48:	6819      	ldr	r1, [r3, #0]
 8004b4a:	4288      	cmp	r0, r1
 8004b4c:	d1c5      	bne.n	8004ada <nodeConfigureRoutine+0x5e>
 8004b4e:	8990      	ldrh	r0, [r2, #12]
 8004b50:	8919      	ldrh	r1, [r3, #8]
 8004b52:	4288      	cmp	r0, r1
 8004b54:	d1c1      	bne.n	8004ada <nodeConfigureRoutine+0x5e>
 8004b56:	7c51      	ldrb	r1, [r2, #17]
 8004b58:	7b9a      	ldrb	r2, [r3, #14]
 8004b5a:	4291      	cmp	r1, r2
 8004b5c:	d1bd      	bne.n	8004ada <nodeConfigureRoutine+0x5e>
			&& selectedNode == nodeSettings.nodeNum);
 8004b5e:	4a0e      	ldr	r2, [pc, #56]	; (8004b98 <nodeConfigureRoutine+0x11c>)
 8004b60:	7a9b      	ldrb	r3, [r3, #10]
 8004b62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d1b7      	bne.n	8004ada <nodeConfigureRoutine+0x5e>
					sprintf (string[0], "Sucess");
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	; (8004b9c <nodeConfigureRoutine+0x120>)
 8004b6c:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <nodeConfigureRoutine+0x118>)
 8004b6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004b72:	0c0a      	lsrs	r2, r1, #16
 8004b74:	6018      	str	r0, [r3, #0]
 8004b76:	8099      	strh	r1, [r3, #4]
 8004b78:	719a      	strb	r2, [r3, #6]
 8004b7a:	e7b4      	b.n	8004ae6 <nodeConfigureRoutine+0x6a>
 8004b7c:	20000c74 	.word	0x20000c74
 8004b80:	20000b29 	.word	0x20000b29
 8004b84:	20000adc 	.word	0x20000adc
 8004b88:	20000a00 	.word	0x20000a00
 8004b8c:	20000c04 	.word	0x20000c04
 8004b90:	0800b914 	.word	0x0800b914
 8004b94:	200000f4 	.word	0x200000f4
 8004b98:	200000f2 	.word	0x200000f2
 8004b9c:	0800b91c 	.word	0x0800b91c

08004ba0 <RadioInit>:

void RadioInit ()
{
 8004ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	SX127X_defaultConfig (&myRadio);
 8004ba4:	4e25      	ldr	r6, [pc, #148]	; (8004c3c <RadioInit+0x9c>)
{
 8004ba6:	b082      	sub	sp, #8
	SX127X_defaultConfig (&myRadio);
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f001 fa89 	bl	80060c0 <SX127X_defaultConfig>
	settings.cr = SX127X_CR_4_8;
 8004bae:	f44f 7882 	mov.w	r8, #260	; 0x104
	defaultSettings ();

	nss.pin = NSS_Pin;
	nss.port = NSS_GPIO_Port;
	reset.pin = RESET_Pin;
 8004bb2:	f04f 0e08 	mov.w	lr, #8
	nss.pin = NSS_Pin;
 8004bb6:	2310      	movs	r3, #16
	settings.power = SX127X_POWER_20DBM;
 8004bb8:	f04f 0c14 	mov.w	ip, #20
	settings.baseID = 1;
 8004bbc:	2701      	movs	r7, #1
	settings.realFrequency = DEF_FREQUENCY;
 8004bbe:	4a20      	ldr	r2, [pc, #128]	; (8004c40 <RadioInit+0xa0>)
	sprintf (settings.SSID, "EXEcutor");
 8004bc0:	4d20      	ldr	r5, [pc, #128]	; (8004c44 <RadioInit+0xa4>)
	sprintf (settings.WiFiPass, "executor");
 8004bc2:	4c21      	ldr	r4, [pc, #132]	; (8004c48 <RadioInit+0xa8>)
	sprintf (settings.SSID, "EXEcutor");
 8004bc4:	cd03      	ldmia	r5!, {r0, r1}
 8004bc6:	f8c2 1017 	str.w	r1, [r2, #23]
 8004bca:	7829      	ldrb	r1, [r5, #0]
 8004bcc:	f8c2 0013 	str.w	r0, [r2, #19]
 8004bd0:	76d1      	strb	r1, [r2, #27]
	sprintf (settings.ServerPass, "12345");
 8004bd2:	4d1e      	ldr	r5, [pc, #120]	; (8004c4c <RadioInit+0xac>)
	sprintf (settings.WiFiPass, "executor");
 8004bd4:	cc03      	ldmia	r4!, {r0, r1}
 8004bd6:	f8c2 0023 	str.w	r0, [r2, #35]	; 0x23
 8004bda:	7820      	ldrb	r0, [r4, #0]
	sprintf (settings.ServerPass, "12345");
 8004bdc:	88ac      	ldrh	r4, [r5, #4]
	sprintf (settings.WiFiPass, "executor");
 8004bde:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
	sprintf (settings.ServerPass, "12345");
 8004be2:	6828      	ldr	r0, [r5, #0]
	sprintf (settings.WiFiPass, "executor");
 8004be4:	f8c2 1027 	str.w	r1, [r2, #39]	; 0x27
	sprintf (settings.ServerPass, "12345");
 8004be8:	f8c2 0033 	str.w	r0, [r2, #51]	; 0x33
 8004bec:	f8a2 4037 	strh.w	r4, [r2, #55]	; 0x37
	nss.port = NSS_GPIO_Port;
 8004bf0:	4817      	ldr	r0, [pc, #92]	; (8004c50 <RadioInit+0xb0>)
	reset.pin = RESET_Pin;
 8004bf2:	4918      	ldr	r1, [pc, #96]	; (8004c54 <RadioInit+0xb4>)
	settings.realFrequency = DEF_FREQUENCY;
 8004bf4:	4c18      	ldr	r4, [pc, #96]	; (8004c58 <RadioInit+0xb8>)
	settings.cr = SX127X_CR_4_8;
 8004bf6:	f8a2 8010 	strh.w	r8, [r2, #16]
	reset.pin = RESET_Pin;
 8004bfa:	f8c1 e000 	str.w	lr, [r1]
	reset.port = RESET_GPIO_Port;
 8004bfe:	6048      	str	r0, [r1, #4]
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8004c00:	9000      	str	r0, [sp, #0]
	settings.realFrequency = DEF_FREQUENCY;
 8004c02:	6014      	str	r4, [r2, #0]
	settings.warningDelay = WARNING_DELAY;
 8004c04:	4c15      	ldr	r4, [pc, #84]	; (8004c5c <RadioInit+0xbc>)
	settings.preamble = 5;
 8004c06:	4d16      	ldr	r5, [pc, #88]	; (8004c60 <RadioInit+0xc0>)
	settings.warningDelay = WARNING_DELAY;
 8004c08:	6054      	str	r4, [r2, #4]
	settings.superWarningDelay = SUPER_WARNING_DELAY;
 8004c0a:	f504 2412 	add.w	r4, r4, #598016	; 0x92000
 8004c0e:	f504 64f8 	add.w	r4, r4, #1984	; 0x7c0
 8004c12:	6094      	str	r4, [r2, #8]
	nss.pin = NSS_Pin;
 8004c14:	4c13      	ldr	r4, [pc, #76]	; (8004c64 <RadioInit+0xc4>)
	settings.preamble = 5;
 8004c16:	60d5      	str	r5, [r2, #12]
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8004c18:	4d13      	ldr	r5, [pc, #76]	; (8004c68 <RadioInit+0xc8>)
	nss.pin = NSS_Pin;
 8004c1a:	e9c4 3000 	strd	r3, r0, [r4]
	settings.power = SX127X_POWER_20DBM;
 8004c1e:	f882 c012 	strb.w	ip, [r2, #18]
	settings.baseID = 1;
 8004c22:	6657      	str	r7, [r2, #100]	; 0x64
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8004c24:	4630      	mov	r0, r6
 8004c26:	c906      	ldmia	r1, {r1, r2}
 8004c28:	9501      	str	r5, [sp, #4]
 8004c2a:	f001 fa5d 	bl	80060e8 <SX127X_PortConfig>
	SX127X_init (&myRadio);
 8004c2e:	4630      	mov	r0, r6
}
 8004c30:	b002      	add	sp, #8
 8004c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	SX127X_init (&myRadio);
 8004c36:	f001 bcef 	b.w	8006618 <SX127X_init>
 8004c3a:	bf00      	nop
 8004c3c:	20000928 	.word	0x20000928
 8004c40:	20000a00 	.word	0x20000a00
 8004c44:	0800af24 	.word	0x0800af24
 8004c48:	0800af30 	.word	0x0800af30
 8004c4c:	0800af3c 	.word	0x0800af3c
 8004c50:	40010800 	.word	0x40010800
 8004c54:	20000a68 	.word	0x20000a68
 8004c58:	33c8d600 	.word	0x33c8d600
 8004c5c:	0009eb10 	.word	0x0009eb10
 8004c60:	070c0005 	.word	0x070c0005
 8004c64:	20000c24 	.word	0x20000c24
 8004c68:	20000dac 	.word	0x20000dac

08004c6c <airCounter>:

void airCounter ()
{
 8004c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	static uint32_t upTimeMs;
	static uint32_t transmittingTimeMs;
	static uint32_t receivingTimeMs;
	static uint32_t lastTick;

	uint32_t delta = HAL_GetTick () - lastTick;
 8004c70:	f002 fa74 	bl	800715c <HAL_GetTick>
 8004c74:	4e3d      	ldr	r6, [pc, #244]	; (8004d6c <airCounter+0x100>)
	upTimeMs += delta;
 8004c76:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004d8c <airCounter+0x120>
	if (myRadio.signalDetected)
 8004c7a:	4a3d      	ldr	r2, [pc, #244]	; (8004d70 <airCounter+0x104>)
	uint32_t delta = HAL_GetTick () - lastTick;
 8004c7c:	6833      	ldr	r3, [r6, #0]
	upTimeMs += delta;
 8004c7e:	f8de 1000 	ldr.w	r1, [lr]
		receivingTimeMs += delta;
 8004c82:	4f3c      	ldr	r7, [pc, #240]	; (8004d74 <airCounter+0x108>)
	if (myRadio.signalDetected)
 8004c84:	7f14      	ldrb	r4, [r2, #28]
	uint32_t delta = HAL_GetTick () - lastTick;
 8004c86:	1ac0      	subs	r0, r0, r3
		receivingTimeMs += delta;
 8004c88:	683d      	ldr	r5, [r7, #0]
	upTimeMs += delta;
 8004c8a:	4401      	add	r1, r0
	if (myRadio.signalDetected)
 8004c8c:	b10c      	cbz	r4, 8004c92 <airCounter+0x26>
		receivingTimeMs += delta;
 8004c8e:	4405      	add	r5, r0
 8004c90:	603d      	str	r5, [r7, #0]
	if (myRadio.status == TX)
		transmittingTimeMs += delta;
	upTime += upTimeMs / 1000;
	upTimeMs %= 1000;
 8004c92:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	if (myRadio.status == TX)
 8004c96:	7c13      	ldrb	r3, [r2, #16]
		transmittingTimeMs += delta;
 8004c98:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8004d90 <airCounter+0x124>
	if (myRadio.status == TX)
 8004c9c:	2b03      	cmp	r3, #3
	upTime += upTimeMs / 1000;
 8004c9e:	4a36      	ldr	r2, [pc, #216]	; (8004d78 <airCounter+0x10c>)
		transmittingTimeMs += delta;
 8004ca0:	f8dc 3000 	ldr.w	r3, [ip]
	upTime += upTimeMs / 1000;
 8004ca4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8004d94 <airCounter+0x128>
		transmittingTimeMs += delta;
 8004ca8:	bf08      	it	eq
 8004caa:	181b      	addeq	r3, r3, r0
	upTime += upTimeMs / 1000;
 8004cac:	fba2 0a01 	umull	r0, sl, r2, r1
 8004cb0:	ea4f 109a 	mov.w	r0, sl, lsr #6
	upTimeMs %= 1000;
 8004cb4:	fb08 1110 	mls	r1, r8, r0, r1
	upTime += upTimeMs / 1000;
 8004cb8:	f8d9 4000 	ldr.w	r4, [r9]
		transmittingTimeMs += delta;
 8004cbc:	bf08      	it	eq
 8004cbe:	f8cc 3000 	streq.w	r3, [ip]
	upTime += upTimeMs / 1000;
 8004cc2:	eb04 149a 	add.w	r4, r4, sl, lsr #6
	if (receivingTimeMs > 1000)
 8004cc6:	4545      	cmp	r5, r8
	upTimeMs %= 1000;
 8004cc8:	f8ce 1000 	str.w	r1, [lr]
	upTime += upTimeMs / 1000;
 8004ccc:	f8c9 4000 	str.w	r4, [r9]
	if (receivingTimeMs > 1000)
 8004cd0:	d840      	bhi.n	8004d54 <airCounter+0xe8>
 8004cd2:	4a2a      	ldr	r2, [pc, #168]	; (8004d7c <airCounter+0x110>)
 8004cd4:	6810      	ldr	r0, [r2, #0]
		{
			receivingTime += receivingTimeMs / 1000;
			receivingTimeMs %= 1000;
		}
	if (transmittingTimeMs > 1000)
 8004cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cda:	d823      	bhi.n	8004d24 <airCounter+0xb8>
		{
			transmittingTime += transmittingTimeMs / 1000;
			transmittingTimeMs %= 1000;
		}
	airUseForRx = (receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 8004cdc:	4b28      	ldr	r3, [pc, #160]	; (8004d80 <airCounter+0x114>)
 8004cde:	681d      	ldr	r5, [r3, #0]
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	d030      	beq.n	8004d46 <airCounter+0xda>
 8004ce4:	f7fb faf0 	bl	80002c8 <__aeabi_ui2f>
 8004ce8:	4607      	mov	r7, r0
 8004cea:	4620      	mov	r0, r4
 8004cec:	f7fb faec 	bl	80002c8 <__aeabi_ui2f>
 8004cf0:	4601      	mov	r1, r0
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	f7fb fbf4 	bl	80004e0 <__aeabi_fdiv>
 8004cf8:	4b22      	ldr	r3, [pc, #136]	; (8004d84 <airCounter+0x118>)
 8004cfa:	6018      	str	r0, [r3, #0]
	airUseForTx = (transmittingTime == 0) ? 0 : (float) transmittingTime / (float) upTime;
 8004cfc:	b345      	cbz	r5, 8004d50 <airCounter+0xe4>
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f7fb fae2 	bl	80002c8 <__aeabi_ui2f>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4620      	mov	r0, r4
 8004d08:	461c      	mov	r4, r3
 8004d0a:	f7fb fadd 	bl	80002c8 <__aeabi_ui2f>
 8004d0e:	4601      	mov	r1, r0
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7fb fbe5 	bl	80004e0 <__aeabi_fdiv>
 8004d16:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <airCounter+0x11c>)
 8004d18:	6018      	str	r0, [r3, #0]
	lastTick = HAL_GetTick ();
 8004d1a:	f002 fa1f 	bl	800715c <HAL_GetTick>
 8004d1e:	6030      	str	r0, [r6, #0]

}
 8004d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			transmittingTimeMs %= 1000;
 8004d24:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
			transmittingTime += transmittingTimeMs / 1000;
 8004d28:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <airCounter+0x10c>)
 8004d2a:	4f15      	ldr	r7, [pc, #84]	; (8004d80 <airCounter+0x114>)
 8004d2c:	fba2 1203 	umull	r1, r2, r2, r3
 8004d30:	0991      	lsrs	r1, r2, #6
			transmittingTimeMs %= 1000;
 8004d32:	fb0e 3311 	mls	r3, lr, r1, r3
			transmittingTime += transmittingTimeMs / 1000;
 8004d36:	683d      	ldr	r5, [r7, #0]
			transmittingTimeMs %= 1000;
 8004d38:	f8cc 3000 	str.w	r3, [ip]
			transmittingTime += transmittingTimeMs / 1000;
 8004d3c:	eb05 1592 	add.w	r5, r5, r2, lsr #6
 8004d40:	603d      	str	r5, [r7, #0]
	airUseForRx = (receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d1ce      	bne.n	8004ce4 <airCounter+0x78>
 8004d46:	2000      	movs	r0, #0
 8004d48:	4b0e      	ldr	r3, [pc, #56]	; (8004d84 <airCounter+0x118>)
 8004d4a:	6018      	str	r0, [r3, #0]
	airUseForTx = (transmittingTime == 0) ? 0 : (float) transmittingTime / (float) upTime;
 8004d4c:	2d00      	cmp	r5, #0
 8004d4e:	d1d6      	bne.n	8004cfe <airCounter+0x92>
 8004d50:	2000      	movs	r0, #0
 8004d52:	e7e0      	b.n	8004d16 <airCounter+0xaa>
			receivingTime += receivingTimeMs / 1000;
 8004d54:	fba2 2005 	umull	r2, r0, r2, r5
 8004d58:	4908      	ldr	r1, [pc, #32]	; (8004d7c <airCounter+0x110>)
 8004d5a:	0982      	lsrs	r2, r0, #6
			receivingTimeMs %= 1000;
 8004d5c:	fb08 5512 	mls	r5, r8, r2, r5
			receivingTime += receivingTimeMs / 1000;
 8004d60:	680a      	ldr	r2, [r1, #0]
			receivingTimeMs %= 1000;
 8004d62:	603d      	str	r5, [r7, #0]
			receivingTime += receivingTimeMs / 1000;
 8004d64:	eb02 1090 	add.w	r0, r2, r0, lsr #6
 8004d68:	6008      	str	r0, [r1, #0]
			receivingTimeMs %= 1000;
 8004d6a:	e7b4      	b.n	8004cd6 <airCounter+0x6a>
 8004d6c:	200000c4 	.word	0x200000c4
 8004d70:	20000928 	.word	0x20000928
 8004d74:	200000e8 	.word	0x200000e8
 8004d78:	10624dd3 	.word	0x10624dd3
 8004d7c:	200009fc 	.word	0x200009fc
 8004d80:	20001584 	.word	0x20001584
 8004d84:	20000b24 	.word	0x20000b24
 8004d88:	20000ad4 	.word	0x20000ad4
 8004d8c:	200002f8 	.word	0x200002f8
 8004d90:	200002f4 	.word	0x200002f4
 8004d94:	20000ad0 	.word	0x20000ad0

08004d98 <SystemClock_Config>:
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d98:	2001      	movs	r0, #1
 8004d9a:	2102      	movs	r1, #2
{
 8004d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d9e:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004da0:	2609      	movs	r6, #9
 8004da2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004da6:	2201      	movs	r2, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004da8:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8004dac:	f44f 15e0 	mov.w	r5, #1835008	; 0x1c0000
{
 8004db0:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004db6:	a80a      	add	r0, sp, #40	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004db8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004dbc:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dc0:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004dc4:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004dc8:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dcc:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004dce:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dd0:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004dd2:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004dd4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dd6:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004dd8:	920e      	str	r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004dda:	f003 feeb 	bl	8008bb4 <HAL_RCC_OscConfig>
 8004dde:	b100      	cbz	r0, 8004de2 <SystemClock_Config+0x4a>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */

	while (1)
 8004de0:	e7fe      	b.n	8004de0 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004de2:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004de4:	260f      	movs	r6, #15
 8004de6:	2702      	movs	r7, #2
 8004de8:	2400      	movs	r4, #0
 8004dea:	f44f 6580 	mov.w	r5, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004dee:	2102      	movs	r1, #2
 8004df0:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004df2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004df6:	e9cd 4506 	strd	r4, r5, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004dfa:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004dfc:	f004 f8da 	bl	8008fb4 <HAL_RCC_ClockConfig>
 8004e00:	b100      	cbz	r0, 8004e04 <SystemClock_Config+0x6c>
	while (1)
 8004e02:	e7fe      	b.n	8004e02 <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004e04:	2202      	movs	r2, #2
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004e06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e0a:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004e0c:	9200      	str	r2, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004e0e:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e10:	f004 f9be 	bl	8009190 <HAL_RCCEx_PeriphCLKConfig>
 8004e14:	b908      	cbnz	r0, 8004e1a <SystemClock_Config+0x82>
}
 8004e16:	b015      	add	sp, #84	; 0x54
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (1)
 8004e1a:	e7fe      	b.n	8004e1a <SystemClock_Config+0x82>

08004e1c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e1c:	2400      	movs	r4, #0
{
 8004e1e:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8004e22:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8004e24:	f002 f97c 	bl	8007120 <HAL_Init>
  SystemClock_Config();
 8004e28:	f7ff ffb6 	bl	8004d98 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e2c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8004e30:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e34:	4d86      	ldr	r5, [pc, #536]	; (8005050 <main+0x234>)
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8004e36:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e38:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8004e3a:	f44f 718c 	mov.w	r1, #280	; 0x118
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e3e:	f043 0320 	orr.w	r3, r3, #32
 8004e42:	61ab      	str	r3, [r5, #24]
 8004e44:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8004e46:	4883      	ldr	r0, [pc, #524]	; (8005054 <main+0x238>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	9307      	str	r3, [sp, #28]
 8004e4e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e50:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 8004e52:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e56:	f043 0304 	orr.w	r3, r3, #4
 8004e5a:	61ab      	str	r3, [r5, #24]
 8004e5c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 8004e5e:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	9308      	str	r3, [sp, #32]
 8004e68:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6a:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e6c:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e6e:	f043 0308 	orr.w	r3, r3, #8
 8004e72:	61ab      	str	r3, [r5, #24]
 8004e74:	69ab      	ldr	r3, [r5, #24]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin|RELAY_Pin, GPIO_PIN_RESET);
 8004e7e:	f003 f885 	bl	8007f8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CD_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8004e82:	4622      	mov	r2, r4
 8004e84:	f245 0120 	movw	r1, #20512	; 0x5020
 8004e88:	4873      	ldr	r0, [pc, #460]	; (8005058 <main+0x23c>)
 8004e8a:	f003 f87f 	bl	8007f8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 8004e8e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004e92:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e94:	486f      	ldr	r0, [pc, #444]	; (8005054 <main+0x238>)
 8004e96:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = RESET_Pin|NSS_Pin|RELAY_Pin;
 8004e98:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004e9c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea0:	f002 ff62 	bl	8007d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 8004ea4:	f640 4206 	movw	r2, #3078	; 0xc06
 8004ea8:	4b6c      	ldr	r3, [pc, #432]	; (800505c <main+0x240>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eaa:	486b      	ldr	r0, [pc, #428]	; (8005058 <main+0x23c>)
 8004eac:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B3_Pin|B4_Pin;
 8004eae:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eb2:	960e      	str	r6, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb4:	f002 ff58 	bl	8007d68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin|CD_Pin|BUZZER_Pin;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f245 0220 	movw	r2, #20512	; 0x5020
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ebe:	4866      	ldr	r0, [pc, #408]	; (8005058 <main+0x23c>)
 8004ec0:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Pin = CS_Pin|CD_Pin|BUZZER_Pin;
 8004ec2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004ec6:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eca:	f002 ff4d 	bl	8007d68 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8004ece:	4622      	mov	r2, r4
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	2007      	movs	r0, #7
 8004ed4:	f002 fbc2 	bl	800765c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8004ed8:	2007      	movs	r0, #7
 8004eda:	f002 fbf7 	bl	80076cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004ede:	4622      	mov	r2, r4
 8004ee0:	4621      	mov	r1, r4
 8004ee2:	2008      	movs	r0, #8
 8004ee4:	f002 fbba 	bl	800765c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8004ee8:	2008      	movs	r0, #8
 8004eea:	f002 fbef 	bl	80076cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004eee:	4622      	mov	r2, r4
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	2028      	movs	r0, #40	; 0x28
 8004ef4:	f002 fbb2 	bl	800765c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ef8:	2028      	movs	r0, #40	; 0x28
 8004efa:	f002 fbe7 	bl	80076cc <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004efe:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8004f00:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f02:	4333      	orrs	r3, r6
 8004f04:	616b      	str	r3, [r5, #20]
 8004f06:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8004f08:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f0a:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8004f0c:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004f0e:	9306      	str	r3, [sp, #24]
 8004f10:	9b06      	ldr	r3, [sp, #24]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8004f12:	f002 fba3 	bl	800765c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8004f16:	2011      	movs	r0, #17
 8004f18:	f002 fbd8 	bl	80076cc <HAL_NVIC_EnableIRQ>
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8004f20:	484f      	ldr	r0, [pc, #316]	; (8005060 <main+0x244>)
 8004f22:	4950      	ldr	r1, [pc, #320]	; (8005064 <main+0x248>)
  hi2c1.Init.ClockSpeed = 400000;
 8004f24:	4a50      	ldr	r2, [pc, #320]	; (8005068 <main+0x24c>)
  hi2c1.Init.OwnAddress1 = 0;
 8004f26:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8004f2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f2e:	e9c0 4407 	strd	r4, r4, [r0, #28]
  hi2c1.Init.ClockSpeed = 400000;
 8004f32:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f36:	6103      	str	r3, [r0, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f38:	f003 fa54 	bl	80083e4 <HAL_I2C_Init>
 8004f3c:	b9c8      	cbnz	r0, 8004f72 <main+0x156>
  hspi1.Instance = SPI1;
 8004f3e:	4603      	mov	r3, r0
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f40:	f44f 7882 	mov.w	r8, #260	; 0x104
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f44:	f44f 7700 	mov.w	r7, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004f48:	2508      	movs	r5, #8
  hspi1.Init.CRCPolynomial = 10;
 8004f4a:	240a      	movs	r4, #10
  hspi1.Instance = SPI1;
 8004f4c:	4847      	ldr	r0, [pc, #284]	; (800506c <main+0x250>)
 8004f4e:	4a48      	ldr	r2, [pc, #288]	; (8005070 <main+0x254>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f50:	e9c0 8301 	strd	r8, r3, [r0, #4]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f54:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f58:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f5c:	6143      	str	r3, [r0, #20]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f5e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004f60:	e9c0 7506 	strd	r7, r5, [r0, #24]
  hspi1.Instance = SPI1;
 8004f64:	6002      	str	r2, [r0, #0]
  hspi1.Init.CRCPolynomial = 10;
 8004f66:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f68:	f004 f9f2 	bl	8009350 <HAL_SPI_Init>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	b108      	cbz	r0, 8004f74 <main+0x158>
	while (1)
 8004f70:	e7fe      	b.n	8004f70 <main+0x154>
 8004f72:	e7fe      	b.n	8004f72 <main+0x156>
  hspi2.Instance = SPI2;
 8004f74:	483f      	ldr	r0, [pc, #252]	; (8005074 <main+0x258>)
 8004f76:	4a40      	ldr	r2, [pc, #256]	; (8005078 <main+0x25c>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f78:	e9c0 8301 	strd	r8, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f80:	e9c0 3705 	strd	r3, r7, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f84:	e9c0 5307 	strd	r5, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f88:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.CRCPolynomial = 10;
 8004f8c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi2.Instance = SPI2;
 8004f8e:	6002      	str	r2, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f90:	f004 f9de 	bl	8009350 <HAL_SPI_Init>
 8004f94:	4603      	mov	r3, r0
 8004f96:	b100      	cbz	r0, 8004f9a <main+0x17e>
	while (1)
 8004f98:	e7fe      	b.n	8004f98 <main+0x17c>
  htim2.Instance = TIM2;
 8004f9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 89;
 8004f9e:	2259      	movs	r2, #89	; 0x59
  htim2.Instance = TIM2;
 8004fa0:	4c36      	ldr	r4, [pc, #216]	; (800507c <main+0x260>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fa2:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8004fa6:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8004faa:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fae:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004fb0:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004fb2:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb4:	e9c4 3301 	strd	r3, r3, [r4, #4]
  htim2.Instance = TIM2;
 8004fb8:	6021      	str	r1, [r4, #0]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fba:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fbc:	61a3      	str	r3, [r4, #24]
  htim2.Init.Period = 89;
 8004fbe:	60e2      	str	r2, [r4, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004fc0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004fc2:	f004 fd1d 	bl	8009a00 <HAL_TIM_PWM_Init>
 8004fc6:	b100      	cbz	r0, 8004fca <main+0x1ae>
	while (1)
 8004fc8:	e7fe      	b.n	8004fc8 <main+0x1ac>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fce:	4620      	mov	r0, r4
 8004fd0:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004fd6:	f005 f83b 	bl	800a050 <HAL_TIMEx_MasterConfigSynchronization>
 8004fda:	b100      	cbz	r0, 8004fde <main+0x1c2>
	while (1)
 8004fdc:	e7fe      	b.n	8004fdc <main+0x1c0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004fde:	f04f 0860 	mov.w	r8, #96	; 0x60
 8004fe2:	f04f 0900 	mov.w	r9, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004fe6:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004fe8:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004fea:	2204      	movs	r2, #4
 8004fec:	4620      	mov	r0, r4
 8004fee:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ff0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004ff4:	f004 fe6c 	bl	8009cd0 <HAL_TIM_PWM_ConfigChannel>
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	b100      	cbz	r0, 8004ffe <main+0x1e2>
	while (1)
 8004ffc:	e7fe      	b.n	8004ffc <main+0x1e0>
  HAL_TIM_MspPostInit(&htim2);
 8004ffe:	4620      	mov	r0, r4
 8005000:	f000 fdd0 	bl	8005ba4 <HAL_TIM_MspPostInit>
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005004:	230c      	movs	r3, #12
  huart1.Init.BaudRate = 9600;
 8005006:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart1.Instance = USART1;
 800500a:	481d      	ldr	r0, [pc, #116]	; (8005080 <main+0x264>)
 800500c:	4a1d      	ldr	r2, [pc, #116]	; (8005084 <main+0x268>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 800500e:	6143      	str	r3, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005010:	e9c0 1501 	strd	r1, r5, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005014:	e9c0 5503 	strd	r5, r5, [r0, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005018:	e9c0 5506 	strd	r5, r5, [r0, #24]
  huart1.Instance = USART1;
 800501c:	6002      	str	r2, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800501e:	f005 f849 	bl	800a0b4 <HAL_UART_Init>
 8005022:	4603      	mov	r3, r0
 8005024:	b990      	cbnz	r0, 800504c <main+0x230>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005026:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 800502a:	4c17      	ldr	r4, [pc, #92]	; (8005088 <main+0x26c>)
 800502c:	4a17      	ldr	r2, [pc, #92]	; (800508c <main+0x270>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800502e:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8005032:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005034:	4620      	mov	r0, r4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005036:	61e1      	str	r1, [r4, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005038:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800503a:	7326      	strb	r6, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800503c:	7523      	strb	r3, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800503e:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 8005040:	6126      	str	r6, [r4, #16]
  hadc1.Instance = ADC1;
 8005042:	6022      	str	r2, [r4, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005044:	f002 f8a2 	bl	800718c <HAL_ADC_Init>
 8005048:	b310      	cbz	r0, 8005090 <main+0x274>
	while (1)
 800504a:	e7fe      	b.n	800504a <main+0x22e>
 800504c:	e7fe      	b.n	800504c <main+0x230>
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000
 8005054:	40010800 	.word	0x40010800
 8005058:	40010c00 	.word	0x40010c00
 800505c:	10310000 	.word	0x10310000
 8005060:	20000a70 	.word	0x20000a70
 8005064:	40005400 	.word	0x40005400
 8005068:	00061a80 	.word	0x00061a80
 800506c:	20000dac 	.word	0x20000dac
 8005070:	40013000 	.word	0x40013000
 8005074:	200009a4 	.word	0x200009a4
 8005078:	40003800 	.word	0x40003800
 800507c:	20000e04 	.word	0x20000e04
 8005080:	20000bc0 	.word	0x20000bc0
 8005084:	40013800 	.word	0x40013800
 8005088:	20000b2c 	.word	0x20000b2c
 800508c:	40012400 	.word	0x40012400
  sConfig.Channel = ADC_CHANNEL_2;
 8005090:	2602      	movs	r6, #2
 8005092:	2701      	movs	r7, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8005094:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005096:	4620      	mov	r0, r4
 8005098:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_2;
 800509a:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800509e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80050a0:	f002 f96c 	bl	800737c <HAL_ADC_ConfigChannel>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f040 8132 	bne.w	800530e <main+0x4f2>
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80050aa:	2106      	movs	r1, #6
  hiwdg.Init.Reload = 4095;
 80050ac:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Instance = IWDG;
 80050b0:	48a6      	ldr	r0, [pc, #664]	; (800534c <main+0x530>)
 80050b2:	4aa7      	ldr	r2, [pc, #668]	; (8005350 <main+0x534>)
  hiwdg.Init.Reload = 4095;
 80050b4:	6083      	str	r3, [r0, #8]
  hiwdg.Instance = IWDG;
 80050b6:	e9c0 2100 	strd	r2, r1, [r0]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80050ba:	f003 fd4d 	bl	8008b58 <HAL_IWDG_Init>
 80050be:	2800      	cmp	r0, #0
 80050c0:	f040 8126 	bne.w	8005310 <main+0x4f4>
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80050c4:	4aa3      	ldr	r2, [pc, #652]	; (8005354 <main+0x538>)
	HAL_Delay (300);
 80050c6:	f44f 7096 	mov.w	r0, #300	; 0x12c
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80050ca:	6853      	ldr	r3, [r2, #4]
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 80050cc:	2400      	movs	r4, #0
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 80050ce:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80050d2:	6053      	str	r3, [r2, #4]
	HAL_Delay (300);
 80050d4:	f002 f848 	bl	8007168 <HAL_Delay>
	ssd1306_Init ();
 80050d8:	f000 fa12 	bl	8005500 <ssd1306_Init>
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 80050dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80050e0:	4b9d      	ldr	r3, [pc, #628]	; (8005358 <main+0x53c>)
 80050e2:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80050e6:	4619      	mov	r1, r3
 80050e8:	489c      	ldr	r0, [pc, #624]	; (800535c <main+0x540>)
 80050ea:	9200      	str	r2, [sp, #0]
 80050ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80050f0:	f7fb fb94 	bl	800081c <UC1609_Init>
	wsInit (&htim2, TIM_CHANNEL_2);
 80050f4:	2104      	movs	r1, #4
 80050f6:	489a      	ldr	r0, [pc, #616]	; (8005360 <main+0x544>)
 80050f8:	f001 ffc0 	bl	800707c <wsInit>
	uartInit (&huart1);
 80050fc:	4899      	ldr	r0, [pc, #612]	; (8005364 <main+0x548>)
 80050fe:	f001 fae3 	bl	80066c8 <uartInit>
	HAL_ADC_Start_DMA (&hadc1, (uint32_t*) &adc, 1);
 8005102:	2201      	movs	r2, #1
 8005104:	4998      	ldr	r1, [pc, #608]	; (8005368 <main+0x54c>)
 8005106:	4899      	ldr	r0, [pc, #612]	; (800536c <main+0x550>)
 8005108:	f002 fa08 	bl	800751c <HAL_ADC_Start_DMA>
	RadioInit ();
 800510c:	f7ff fd48 	bl	8004ba0 <RadioInit>
	legalFreq.intervalCount = 3;
 8005110:	2203      	movs	r2, #3
	legalFreq.interval[1].maxAirUse = 10; //1%
 8005112:	f04f 0c0a 	mov.w	ip, #10
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 8005116:	2501      	movs	r5, #1
	legalFreq.interval[0].maxPower = 14; //25mW
 8005118:	200e      	movs	r0, #14
	legalFreq.interval[2].maxPower = 20;
 800511a:	2614      	movs	r6, #20
	legalFreq.interval[2].maxAirUse = 100; //10%
 800511c:	2764      	movs	r7, #100	; 0x64
	legalFreq.intervalCount = 3;
 800511e:	4b94      	ldr	r3, [pc, #592]	; (8005370 <main+0x554>)
	memset (nodes, 0, sizeof(nodes));
 8005120:	4621      	mov	r1, r4
	legalFreq.intervalCount = 3;
 8005122:	701a      	strb	r2, [r3, #0]
	legalFreq.interval[0].minFreq = 864000000;
 8005124:	4a93      	ldr	r2, [pc, #588]	; (8005374 <main+0x558>)
	legalFreq.interval[1].minFreq = 866000000;
 8005126:	4c94      	ldr	r4, [pc, #592]	; (8005378 <main+0x55c>)
	legalFreq.interval[0].minFreq = 864000000;
 8005128:	605a      	str	r2, [r3, #4]
	legalFreq.interval[0].maxFreq = 865000000;
 800512a:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
 800512e:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8005132:	609a      	str	r2, [r3, #8]
	legalFreq.interval[1].maxFreq = 868000000;
 8005134:	f502 1237 	add.w	r2, r2, #2998272	; 0x2dc000
 8005138:	f502 62d8 	add.w	r2, r2, #1728	; 0x6c0
 800513c:	e9c3 4204 	strd	r4, r2, [r3, #16]
	legalFreq.interval[2].minFreq = 868700000;
 8005140:	4c8e      	ldr	r4, [pc, #568]	; (800537c <main+0x560>)
	legalFreq.interval[2].maxFreq = 869200000;
 8005142:	f502 1292 	add.w	r2, r2, #1196032	; 0x124000
 8005146:	f502 6278 	add.w	r2, r2, #3968	; 0xf80
	legalFreq.interval[1].maxAirUse = 10; //1%
 800514a:	f8a3 c01a 	strh.w	ip, [r3, #26]
	legalFreq.interval[2].maxFreq = 869200000;
 800514e:	e9c3 4207 	strd	r4, r2, [r3, #28]
	legalFreq.interval[2].maxAirUse = 100; //10%
 8005152:	84df      	strh	r7, [r3, #38]	; 0x26
	legalFreq.interval[0].maxPower = 14; //25mW
 8005154:	7318      	strb	r0, [r3, #12]
	legalFreq.interval[1].maxPower = 14;
 8005156:	7618      	strb	r0, [r3, #24]
	memset (nodes, 0, sizeof(nodes));
 8005158:	f44f 7280 	mov.w	r2, #256	; 0x100
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 800515c:	81dd      	strh	r5, [r3, #14]
	legalFreq.interval[2].maxPower = 20;
 800515e:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
	memset (nodes, 0, sizeof(nodes));
 8005162:	4887      	ldr	r0, [pc, #540]	; (8005380 <main+0x564>)
 8005164:	f005 faac 	bl	800a6c0 <memset>
	loadNodeData ();
 8005168:	f7fb ff4a 	bl	8001000 <loadNodeData>
	nodeSettings.realFrequency = DEF_FREQUENCY;
 800516c:	223c      	movs	r2, #60	; 0x3c
	nodeSettings.preamble = 5;
 800516e:	2705      	movs	r7, #5
	nodeSettings.power = SX127X_POWER_20DBM;
 8005170:	4b84      	ldr	r3, [pc, #528]	; (8005384 <main+0x568>)
	nodeSettings.realFrequency = DEF_FREQUENCY;
 8005172:	4985      	ldr	r1, [pc, #532]	; (8005388 <main+0x56c>)
	nodeSettings.cr = SX127X_CR_4_8;
 8005174:	4c85      	ldr	r4, [pc, #532]	; (800538c <main+0x570>)
	nodeSettings.voltageTreshold = 2.5f;
 8005176:	4886      	ldr	r0, [pc, #536]	; (8005390 <main+0x574>)
	nodeSettings.realFrequency = DEF_FREQUENCY;
 8005178:	e9c3 1200 	strd	r1, r2, [r3]
	nodeSettings.cr = SX127X_CR_4_8;
 800517c:	f8c3 400b 	str.w	r4, [r3, #11]
	nodeSettings.power = SX127X_POWER_20DBM;
 8005180:	73de      	strb	r6, [r3, #15]
	nodeSettings.useLed = true;
 8005182:	741d      	strb	r5, [r3, #16]
	nodeSettings.preamble = 5;
 8005184:	811f      	strh	r7, [r3, #8]
	nodeSettings.voltageTreshold = 2.5f;
 8005186:	6158      	str	r0, [r3, #20]
	ShowLogo ();
 8005188:	f7fc ffb6 	bl	80020f8 <ShowLogo>
	clearStrings ();
 800518c:	f7fb ffc8 	bl	8001120 <clearStrings>
	if (tryLoadSettings () == 1)
 8005190:	f7fc f846 	bl	8001220 <tryLoadSettings>
 8005194:	42a8      	cmp	r0, r5
 8005196:	f000 8193 	beq.w	80054c0 <main+0x6a4>
			sprintf (string[0], "Failed to load");
 800519a:	4b7e      	ldr	r3, [pc, #504]	; (8005394 <main+0x578>)
 800519c:	4c7e      	ldr	r4, [pc, #504]	; (8005398 <main+0x57c>)
 800519e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051a0:	c407      	stmia	r4!, {r0, r1, r2}
 80051a2:	f824 3b02 	strh.w	r3, [r4], #2
 80051a6:	4625      	mov	r5, r4
 80051a8:	0c1b      	lsrs	r3, r3, #16
			sprintf (string[1], "settings from flash");
 80051aa:	4e7c      	ldr	r6, [pc, #496]	; (800539c <main+0x580>)
			sprintf (string[2], "Using defaults");
 80051ac:	4f7c      	ldr	r7, [pc, #496]	; (80053a0 <main+0x584>)
			sprintf (string[0], "Failed to load");
 80051ae:	f805 3b32 	strb.w	r3, [r5], #50
			sprintf (string[2], "Using defaults");
 80051b2:	3472      	adds	r4, #114	; 0x72
			sprintf (string[1], "settings from flash");
 80051b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80051b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
			sprintf (string[2], "Using defaults");
 80051b8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80051bc:	c407      	stmia	r4!, {r0, r1, r2}
			sprintf (string[1], "settings from flash");
 80051be:	6832      	ldr	r2, [r6, #0]
			sprintf (string[2], "Using defaults");
 80051c0:	f824 3b02 	strh.w	r3, [r4], #2
 80051c4:	0c1b      	lsrs	r3, r3, #16
			sprintf (string[1], "settings from flash");
 80051c6:	602a      	str	r2, [r5, #0]
			sprintf (string[2], "Using defaults");
 80051c8:	7023      	strb	r3, [r4, #0]
	updateLcd ();
 80051ca:	f7fb ffdf 	bl	800118c <updateLcd>
	HAL_Delay (500);
 80051ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051d2:	f001 ffc9 	bl	8007168 <HAL_Delay>
	myRadio.alwaysRX = true;   //Always listen for AIR
 80051d6:	2201      	movs	r2, #1
	flag.lcdRefreshRequest = 1;
 80051d8:	4c72      	ldr	r4, [pc, #456]	; (80053a4 <main+0x588>)
	myRadio.alwaysRX = true;   //Always listen for AIR
 80051da:	4d73      	ldr	r5, [pc, #460]	; (80053a8 <main+0x58c>)
	flag.lcdRefreshRequest = 1;
 80051dc:	7823      	ldrb	r3, [r4, #0]
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80051de:	2104      	movs	r1, #4
	flag.lcdRefreshRequest = 1;
 80051e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80051e4:	485c      	ldr	r0, [pc, #368]	; (8005358 <main+0x53c>)
	flag.lcdRefreshRequest = 1;
 80051e6:	7023      	strb	r3, [r4, #0]
	myRadio.alwaysRX = true;   //Always listen for AIR
 80051e8:	73ea      	strb	r2, [r5, #15]
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80051ea:	f002 fec9 	bl	8007f80 <HAL_GPIO_ReadPin>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	f000 8160 	beq.w	80054b4 <main+0x698>
 80051f4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 80053c4 <main+0x5a8>
 80051f8:	4e6c      	ldr	r6, [pc, #432]	; (80053ac <main+0x590>)
 80051fa:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 80053c8 <main+0x5ac>
 80051fe:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 80053cc <main+0x5b0>
 8005202:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80053d0 <main+0x5b4>
			HAL_IWDG_Refresh (&hiwdg);
 8005206:	4851      	ldr	r0, [pc, #324]	; (800534c <main+0x530>)
 8005208:	f003 fcce 	bl	8008ba8 <HAL_IWDG_Refresh>
			blinkProvider = HAL_GetTick () % 1000 > 500;
 800520c:	f001 ffa6 	bl	800715c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005216:	4b66      	ldr	r3, [pc, #408]	; (80053b0 <main+0x594>)
 8005218:	fba3 0302 	umull	r0, r3, r3, r2
 800521c:	099b      	lsrs	r3, r3, #6
 800521e:	fb01 2313 	mls	r3, r1, r3, r2
 8005222:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005226:	bf94      	ite	ls
 8005228:	2300      	movls	r3, #0
 800522a:	2301      	movhi	r3, #1
 800522c:	4a61      	ldr	r2, [pc, #388]	; (80053b4 <main+0x598>)
 800522e:	7013      	strb	r3, [r2, #0]
			fastBlinkProvider = HAL_GetTick () % 70 > 35;
 8005230:	f001 ff94 	bl	800715c <HAL_GetTick>
 8005234:	2146      	movs	r1, #70	; 0x46
 8005236:	4602      	mov	r2, r0
 8005238:	0843      	lsrs	r3, r0, #1
 800523a:	485f      	ldr	r0, [pc, #380]	; (80053b8 <main+0x59c>)
 800523c:	fba0 0303 	umull	r0, r3, r0, r3
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	fb01 2313 	mls	r3, r1, r3, r2
 8005246:	2b23      	cmp	r3, #35	; 0x23
 8005248:	bf94      	ite	ls
 800524a:	2300      	movls	r3, #0
 800524c:	2301      	movhi	r3, #1
 800524e:	4a5b      	ldr	r2, [pc, #364]	; (80053bc <main+0x5a0>)
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == false && screenMode == smRegular)
 8005250:	2104      	movs	r1, #4
 8005252:	4841      	ldr	r0, [pc, #260]	; (8005358 <main+0x53c>)
			fastBlinkProvider = HAL_GetTick () % 70 > 35;
 8005254:	7013      	strb	r3, [r2, #0]
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == false && screenMode == smRegular)
 8005256:	f002 fe93 	bl	8007f80 <HAL_GPIO_ReadPin>
 800525a:	4603      	mov	r3, r0
 800525c:	2800      	cmp	r0, #0
 800525e:	d158      	bne.n	8005312 <main+0x4f6>
 8005260:	f898 2000 	ldrb.w	r2, [r8]
 8005264:	2a00      	cmp	r2, #0
 8005266:	d155      	bne.n	8005314 <main+0x4f8>
		infoCounter++;
 8005268:	f8b9 3000 	ldrh.w	r3, [r9]
 800526c:	3301      	adds	r3, #1
 800526e:	b29b      	uxth	r3, r3
	if (infoCounter > 2000)
 8005270:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005274:	d94e      	bls.n	8005314 <main+0x4f8>
			screenMode = smMainMenu;
 8005276:	2101      	movs	r1, #1
			flag.lcdRefreshRequest = 1;
 8005278:	7823      	ldrb	r3, [r4, #0]
			infoCounter = 0;
 800527a:	f8a9 2000 	strh.w	r2, [r9]
			flag.lcdRefreshRequest = 1;
 800527e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005282:	7023      	strb	r3, [r4, #0]
			screenMode = smMainMenu;
 8005284:	f888 1000 	strb.w	r1, [r8]
	if (lastHalf != HAL_GetTick () / 500 && ((screenMode >= smStatus && screenMode <= smMessageCounter)))
 8005288:	f001 ff68 	bl	800715c <HAL_GetTick>
 800528c:	4a48      	ldr	r2, [pc, #288]	; (80053b0 <main+0x594>)
 800528e:	fba2 2300 	umull	r2, r3, r2, r0
 8005292:	f8db 2000 	ldr.w	r2, [fp]
 8005296:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 800529a:	d004      	beq.n	80052a6 <main+0x48a>
 800529c:	f898 3000 	ldrb.w	r3, [r8]
 80052a0:	3b19      	subs	r3, #25
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d939      	bls.n	800531a <main+0x4fe>
			alarmRoutine ();
 80052a6:	f7fc fd37 	bl	8001d18 <alarmRoutine>
			ledRoutine ();
 80052aa:	f7fc feb7 	bl	800201c <ledRoutine>
			airCounter ();
 80052ae:	f7ff fcdd 	bl	8004c6c <airCounter>
			SX127X_Routine (&myRadio);
 80052b2:	483d      	ldr	r0, [pc, #244]	; (80053a8 <main+0x58c>)
 80052b4:	f001 f8dc 	bl	8006470 <SX127X_Routine>
			if (flag.lcdRefreshRequest)
 80052b8:	7823      	ldrb	r3, [r4, #0]
 80052ba:	0658      	lsls	r0, r3, #25
 80052bc:	f100 80f4 	bmi.w	80054a8 <main+0x68c>
			if (myRadio.readBytes)
 80052c0:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
 80052c4:	2800      	cmp	r0, #0
 80052c6:	f040 80e9 	bne.w	800549c <main+0x680>
			if (flag.encDec)
 80052ca:	7823      	ldrb	r3, [r4, #0]
 80052cc:	0799      	lsls	r1, r3, #30
 80052ce:	f100 80de 	bmi.w	800548e <main+0x672>
			if (flag.encInc)
 80052d2:	07da      	lsls	r2, r3, #31
 80052d4:	f100 80d3 	bmi.w	800547e <main+0x662>
			if (flag.encOk)
 80052d8:	075f      	lsls	r7, r3, #29
 80052da:	f100 80c8 	bmi.w	800546e <main+0x652>
			if (flag.back == 1)
 80052de:	0718      	lsls	r0, r3, #28
 80052e0:	f100 80b9 	bmi.w	8005456 <main+0x63a>
			if (screenMode == smModeSelect)
 80052e4:	f898 3000 	ldrb.w	r3, [r8]
 80052e8:	2b1d      	cmp	r3, #29
 80052ea:	d08c      	beq.n	8005206 <main+0x3ea>
			if (flag.uartGotMessage)
 80052ec:	7863      	ldrb	r3, [r4, #1]
 80052ee:	07d9      	lsls	r1, r3, #31
 80052f0:	f100 80ab 	bmi.w	800544a <main+0x62e>
			if (flag.saveSettings)
 80052f4:	7823      	ldrb	r3, [r4, #0]
 80052f6:	06da      	lsls	r2, r3, #27
 80052f8:	d46c      	bmi.n	80053d4 <main+0x5b8>
			if (flag.sendConfig)
 80052fa:	069b      	lsls	r3, r3, #26
 80052fc:	d41a      	bmi.n	8005334 <main+0x518>
			if (configStep)
 80052fe:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <main+0x5a4>)
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	f43f af7f 	beq.w	8005206 <main+0x3ea>
					nodeConfigureRoutine ();
 8005308:	f7ff fbb8 	bl	8004a7c <nodeConfigureRoutine>
 800530c:	e77b      	b.n	8005206 <main+0x3ea>
	while (1)
 800530e:	e7fe      	b.n	800530e <main+0x4f2>
 8005310:	e7fe      	b.n	8005310 <main+0x4f4>
 8005312:	2300      	movs	r3, #0
 8005314:	f8a9 3000 	strh.w	r3, [r9]
	if (infoCounter > 2000)
 8005318:	e7b6      	b.n	8005288 <main+0x46c>
			lastHalf = HAL_GetTick () / 500;
 800531a:	f001 ff1f 	bl	800715c <HAL_GetTick>
 800531e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005322:	fbb0 f2f2 	udiv	r2, r0, r2
			flag.lcdRefreshRequest = 1;
 8005326:	7823      	ldrb	r3, [r4, #0]
			lastHalf = HAL_GetTick () / 500;
 8005328:	f8cb 2000 	str.w	r2, [fp]
			flag.lcdRefreshRequest = 1;
 800532c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005330:	7023      	strb	r3, [r4, #0]
}
 8005332:	e7b8      	b.n	80052a6 <main+0x48a>
					flag.sendConfig = 0;
 8005334:	7823      	ldrb	r3, [r4, #0]
 8005336:	f36f 1345 	bfc	r3, #5, #1
 800533a:	7023      	strb	r3, [r4, #0]
					sendConfig ();
 800533c:	f001 fc40 	bl	8006bc0 <sendConfig>
			if (configStep)
 8005340:	4b1f      	ldr	r3, [pc, #124]	; (80053c0 <main+0x5a4>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f43f af5e 	beq.w	8005206 <main+0x3ea>
 800534a:	e7dd      	b.n	8005308 <main+0x4ec>
 800534c:	20000ac4 	.word	0x20000ac4
 8005350:	40003000 	.word	0x40003000
 8005354:	e0042000 	.word	0xe0042000
 8005358:	40010c00 	.word	0x40010c00
 800535c:	200009a4 	.word	0x200009a4
 8005360:	20000e04 	.word	0x20000e04
 8005364:	20000bc0 	.word	0x20000bc0
 8005368:	20000c20 	.word	0x20000c20
 800536c:	20000b2c 	.word	0x20000b2c
 8005370:	20000b5c 	.word	0x20000b5c
 8005374:	337f9800 	.word	0x337f9800
 8005378:	339e1c80 	.word	0x339e1c80
 800537c:	33c74f60 	.word	0x33c74f60
 8005380:	20000c78 	.word	0x20000c78
 8005384:	20000c04 	.word	0x20000c04
 8005388:	33c8d600 	.word	0x33c8d600
 800538c:	01070c04 	.word	0x01070c04
 8005390:	40200000 	.word	0x40200000
 8005394:	0800b940 	.word	0x0800b940
 8005398:	200000f4 	.word	0x200000f4
 800539c:	0800b950 	.word	0x0800b950
 80053a0:	0800b964 	.word	0x0800b964
 80053a4:	20000adc 	.word	0x20000adc
 80053a8:	20000928 	.word	0x20000928
 80053ac:	20000a00 	.word	0x20000a00
 80053b0:	10624dd3 	.word	0x10624dd3
 80053b4:	20000da8 	.word	0x20000da8
 80053b8:	ea0ea0eb 	.word	0xea0ea0eb
 80053bc:	20000ad8 	.word	0x20000ad8
 80053c0:	20000b29 	.word	0x20000b29
 80053c4:	200000ee 	.word	0x200000ee
 80053c8:	200000b4 	.word	0x200000b4
 80053cc:	200000b8 	.word	0x200000b8
 80053d0:	20000000 	.word	0x20000000
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80053d4:	2100      	movs	r1, #0
	eraseInit.NbPages = 1;
 80053d6:	2201      	movs	r2, #1
					flag.saveSettings = 0;
 80053d8:	f36f 1304 	bfc	r3, #4, #1
 80053dc:	7023      	strb	r3, [r4, #0]
	eraseInit.PageAddress = (uint32_t) flashSettings;
 80053de:	f8da 3000 	ldr.w	r3, [sl]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80053e2:	910c      	str	r1, [sp, #48]	; 0x30
	eraseInit.PageAddress = (uint32_t) flashSettings;
 80053e4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
	HAL_FLASH_Unlock ();
 80053e8:	f002 fbe8 	bl	8007bbc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase (&eraseInit, &pageError);
 80053ec:	a90a      	add	r1, sp, #40	; 0x28
 80053ee:	a80c      	add	r0, sp, #48	; 0x30
 80053f0:	f002 fc58 	bl	8007ca4 <HAL_FLASHEx_Erase>
	for (i = 0; i < settingsSize; i++)
 80053f4:	4f3a      	ldr	r7, [pc, #232]	; (80054e0 <main+0x6c4>)
 80053f6:	f1c6 0304 	rsb	r3, r6, #4
 80053fa:	9305      	str	r3, [sp, #20]
		HAL_FLASH_Program (FLASH_TYPEPROGRAM_WORD, ((uint32_t) flashSettings) + 4 * i, *(((uint32_t*) &settings) + i));
 80053fc:	9b05      	ldr	r3, [sp, #20]
 80053fe:	f8da 1000 	ldr.w	r1, [sl]
 8005402:	443b      	add	r3, r7
 8005404:	4419      	add	r1, r3
 8005406:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800540a:	2300      	movs	r3, #0
 800540c:	2002      	movs	r0, #2
 800540e:	f002 faf7 	bl	8007a00 <HAL_FLASH_Program>
	for (i = 0; i < settingsSize; i++)
 8005412:	4b34      	ldr	r3, [pc, #208]	; (80054e4 <main+0x6c8>)
 8005414:	429f      	cmp	r7, r3
 8005416:	d1f1      	bne.n	80053fc <main+0x5e0>
	HAL_FLASH_Lock ();
 8005418:	f002 fbe4 	bl	8007be4 <HAL_FLASH_Lock>
	myRadio.bw = settings.bw;
 800541c:	7bf2      	ldrb	r2, [r6, #15]
	myRadio.cr = settings.cr;
 800541e:	7c33      	ldrb	r3, [r6, #16]
	myRadio.sf = settings.sf;
 8005420:	7bb1      	ldrb	r1, [r6, #14]
	myRadio.bw = settings.bw;
 8005422:	71aa      	strb	r2, [r5, #6]
	myRadio.cr = settings.cr;
 8005424:	71eb      	strb	r3, [r5, #7]
	myRadio.sf = settings.sf;
 8005426:	7169      	strb	r1, [r5, #5]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8005428:	6830      	ldr	r0, [r6, #0]
 800542a:	f7fa ff4d 	bl	80002c8 <__aeabi_ui2f>
 800542e:	492e      	ldr	r1, [pc, #184]	; (80054e8 <main+0x6cc>)
 8005430:	f7fb f856 	bl	80004e0 <__aeabi_fdiv>
 8005434:	f7fb f98c 	bl	8000750 <__aeabi_f2uiz>
	myRadio.preamble = settings.preamble;
 8005438:	89b3      	ldrh	r3, [r6, #12]
	myRadio.power = settings.power;
 800543a:	7cb1      	ldrb	r1, [r6, #18]
	myRadio.syncWord = settings.syncWord;
 800543c:	7c72      	ldrb	r2, [r6, #17]
	myRadio.preamble = settings.preamble;
 800543e:	81ab      	strh	r3, [r5, #12]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8005440:	6028      	str	r0, [r5, #0]
	myRadio.power = settings.power;
 8005442:	7823      	ldrb	r3, [r4, #0]
 8005444:	7129      	strb	r1, [r5, #4]
	myRadio.syncWord = settings.syncWord;
 8005446:	73aa      	strb	r2, [r5, #14]
}
 8005448:	e757      	b.n	80052fa <main+0x4de>
					flag.uartGotMessage = 0;
 800544a:	f36f 0300 	bfc	r3, #0, #1
 800544e:	7063      	strb	r3, [r4, #1]
					uartReceiveHandler ();
 8005450:	f001 f976 	bl	8006740 <uartReceiveHandler>
 8005454:	e74e      	b.n	80052f4 <main+0x4d8>
					flag.back = 0;
 8005456:	7823      	ldrb	r3, [r4, #0]
 8005458:	f36f 03c3 	bfc	r3, #3, #1
 800545c:	7023      	strb	r3, [r4, #0]
					button_back ();
 800545e:	f7fd fb1f 	bl	8002aa0 <button_back>
			if (screenMode == smModeSelect)
 8005462:	f898 3000 	ldrb.w	r3, [r8]
 8005466:	2b1d      	cmp	r3, #29
 8005468:	f47f af40 	bne.w	80052ec <main+0x4d0>
 800546c:	e6cb      	b.n	8005206 <main+0x3ea>
					flag.encOk = 0;
 800546e:	7823      	ldrb	r3, [r4, #0]
 8005470:	f36f 0382 	bfc	r3, #2, #1
 8005474:	7023      	strb	r3, [r4, #0]
					button_ok ();
 8005476:	f7fe ff9f 	bl	80043b8 <button_ok>
 800547a:	7823      	ldrb	r3, [r4, #0]
 800547c:	e72f      	b.n	80052de <main+0x4c2>
					flag.encInc = 0;
 800547e:	7823      	ldrb	r3, [r4, #0]
 8005480:	f36f 0300 	bfc	r3, #0, #1
 8005484:	7023      	strb	r3, [r4, #0]
					button_right ();
 8005486:	f7fc fecb 	bl	8002220 <button_right>
 800548a:	7823      	ldrb	r3, [r4, #0]
 800548c:	e724      	b.n	80052d8 <main+0x4bc>
					flag.encDec = 0;
 800548e:	f36f 0341 	bfc	r3, #1, #1
 8005492:	7023      	strb	r3, [r4, #0]
					button_left ();
 8005494:	f7fd f94c 	bl	8002730 <button_left>
 8005498:	7823      	ldrb	r3, [r4, #0]
 800549a:	e71a      	b.n	80052d2 <main+0x4b6>
					handleMessage (myRadio.readBytes);
 800549c:	f7fc f814 	bl	80014c8 <handleMessage>
					myRadio.readBytes = 0;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 80054a6:	e710      	b.n	80052ca <main+0x4ae>
					flag.lcdRefreshRequest = 0;
 80054a8:	f36f 1386 	bfc	r3, #6, #1
 80054ac:	7023      	strb	r3, [r4, #0]
					lcdRoutine ();
 80054ae:	f7fd fb4d 	bl	8002b4c <lcdRoutine>
 80054b2:	e705      	b.n	80052c0 <main+0x4a4>
		screenMode = smModeSelect;
 80054b4:	231d      	movs	r3, #29
 80054b6:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80054f8 <main+0x6dc>
 80054ba:	f888 3000 	strb.w	r3, [r8]
 80054be:	e69b      	b.n	80051f8 <main+0x3dc>
			sprintf (string[0], "Settings loaded");
 80054c0:	4c0a      	ldr	r4, [pc, #40]	; (80054ec <main+0x6d0>)
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <main+0x6d4>)
			sprintf (string[1], "from flash");
 80054c4:	4d0b      	ldr	r5, [pc, #44]	; (80054f4 <main+0x6d8>)
			sprintf (string[0], "Settings loaded");
 80054c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			sprintf (string[1], "from flash");
 80054cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054d0:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80054d4:	c303      	stmia	r3!, {r0, r1}
 80054d6:	0c11      	lsrs	r1, r2, #16
 80054d8:	f823 2b02 	strh.w	r2, [r3], #2
 80054dc:	7019      	strb	r1, [r3, #0]
 80054de:	e674      	b.n	80051ca <main+0x3ae>
 80054e0:	200009fc 	.word	0x200009fc
 80054e4:	20000a64 	.word	0x20000a64
 80054e8:	427423d7 	.word	0x427423d7
 80054ec:	200000f4 	.word	0x200000f4
 80054f0:	0800b924 	.word	0x0800b924
 80054f4:	0800b934 	.word	0x0800b934
 80054f8:	200000ee 	.word	0x200000ee

080054fc <Error_Handler>:
	while (1)
 80054fc:	e7fe      	b.n	80054fc <Error_Handler>
 80054fe:	bf00      	nop

08005500 <ssd1306_Init>:

//
//	Initialize the oled screen
//
void ssd1306_Init(void)
{	
 8005500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

	// Wait for the screen to boot
	HAL_Delay(100);
 8005504:	2064      	movs	r0, #100	; 0x64
{	
 8005506:	b086      	sub	sp, #24
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005508:	2401      	movs	r4, #1
 800550a:	260a      	movs	r6, #10
	HAL_Delay(100);
 800550c:	f001 fe2c 	bl	8007168 <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8005510:	f04f 0cae 	mov.w	ip, #174	; 0xae
 8005514:	f04f 0920 	mov.w	r9, #32
 8005518:	f04f 0a10 	mov.w	sl, #16
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800551c:	4db2      	ldr	r5, [pc, #712]	; (80057e8 <ssd1306_Init+0x2e8>)
 800551e:	f10d 0717 	add.w	r7, sp, #23
 8005522:	4623      	mov	r3, r4
 8005524:	4628      	mov	r0, r5
 8005526:	2200      	movs	r2, #0
 8005528:	2178      	movs	r1, #120	; 0x78
 800552a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800552e:	9700      	str	r7, [sp, #0]
 8005530:	f88d c017 	strb.w	ip, [sp, #23]
 8005534:	f003 f81a 	bl	800856c <HAL_I2C_Mem_Write>
 8005538:	4623      	mov	r3, r4
 800553a:	4628      	mov	r0, r5
 800553c:	2200      	movs	r2, #0
 800553e:	2178      	movs	r1, #120	; 0x78
 8005540:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005544:	9700      	str	r7, [sp, #0]
 8005546:	f88d 9017 	strb.w	r9, [sp, #23]
 800554a:	f003 f80f 	bl	800856c <HAL_I2C_Mem_Write>
 800554e:	4623      	mov	r3, r4
 8005550:	4628      	mov	r0, r5
 8005552:	2200      	movs	r2, #0
 8005554:	2178      	movs	r1, #120	; 0x78
 8005556:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800555a:	9700      	str	r7, [sp, #0]
 800555c:	f88d a017 	strb.w	sl, [sp, #23]
 8005560:	f003 f804 	bl	800856c <HAL_I2C_Mem_Write>
 8005564:	2200      	movs	r2, #0
 8005566:	f04f 0cb0 	mov.w	ip, #176	; 0xb0
 800556a:	4690      	mov	r8, r2
 800556c:	4623      	mov	r3, r4
 800556e:	4628      	mov	r0, r5
 8005570:	2178      	movs	r1, #120	; 0x78
 8005572:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005576:	9700      	str	r7, [sp, #0]
 8005578:	f88d c017 	strb.w	ip, [sp, #23]
 800557c:	f002 fff6 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005580:	f04f 0cc8 	mov.w	ip, #200	; 0xc8
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005584:	4623      	mov	r3, r4
 8005586:	4642      	mov	r2, r8
 8005588:	4628      	mov	r0, r5
 800558a:	2178      	movs	r1, #120	; 0x78
 800558c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005590:	9700      	str	r7, [sp, #0]
 8005592:	f88d c017 	strb.w	ip, [sp, #23]
 8005596:	f002 ffe9 	bl	800856c <HAL_I2C_Mem_Write>
 800559a:	4623      	mov	r3, r4
 800559c:	4642      	mov	r2, r8
 800559e:	4628      	mov	r0, r5
 80055a0:	2178      	movs	r1, #120	; 0x78
 80055a2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80055a6:	9700      	str	r7, [sp, #0]
 80055a8:	f88d 8017 	strb.w	r8, [sp, #23]
 80055ac:	f002 ffde 	bl	800856c <HAL_I2C_Mem_Write>
 80055b0:	4623      	mov	r3, r4
 80055b2:	4642      	mov	r2, r8
 80055b4:	4628      	mov	r0, r5
 80055b6:	2178      	movs	r1, #120	; 0x78
 80055b8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80055bc:	9700      	str	r7, [sp, #0]
 80055be:	f88d a017 	strb.w	sl, [sp, #23]
 80055c2:	f002 ffd3 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x00); //---set low column address
	ssd1306_WriteCommand(0x10); //---set high column address
	ssd1306_WriteCommand(0x40); //--set start line address
 80055c6:	f04f 0c40 	mov.w	ip, #64	; 0x40
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80055ca:	4623      	mov	r3, r4
 80055cc:	4642      	mov	r2, r8
 80055ce:	4628      	mov	r0, r5
 80055d0:	2178      	movs	r1, #120	; 0x78
 80055d2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80055d6:	9700      	str	r7, [sp, #0]
 80055d8:	f88d c017 	strb.w	ip, [sp, #23]
 80055dc:	f002 ffc6 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 80055e0:	f04f 0c81 	mov.w	ip, #129	; 0x81
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80055e4:	4623      	mov	r3, r4
 80055e6:	4642      	mov	r2, r8
 80055e8:	4628      	mov	r0, r5
 80055ea:	2178      	movs	r1, #120	; 0x78
 80055ec:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80055f0:	9700      	str	r7, [sp, #0]
 80055f2:	f88d c017 	strb.w	ip, [sp, #23]
 80055f6:	f002 ffb9 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xFF);
 80055fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80055fe:	4623      	mov	r3, r4
 8005600:	4642      	mov	r2, r8
 8005602:	4628      	mov	r0, r5
 8005604:	2178      	movs	r1, #120	; 0x78
 8005606:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800560a:	9700      	str	r7, [sp, #0]
 800560c:	f88d c017 	strb.w	ip, [sp, #23]
 8005610:	f002 ffac 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8005614:	f04f 0ca1 	mov.w	ip, #161	; 0xa1
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005618:	4623      	mov	r3, r4
 800561a:	4642      	mov	r2, r8
 800561c:	4628      	mov	r0, r5
 800561e:	2178      	movs	r1, #120	; 0x78
 8005620:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005624:	9700      	str	r7, [sp, #0]
 8005626:	f88d c017 	strb.w	ip, [sp, #23]
 800562a:	f002 ff9f 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800562e:	f04f 0ca6 	mov.w	ip, #166	; 0xa6
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005632:	4623      	mov	r3, r4
 8005634:	4642      	mov	r2, r8
 8005636:	4628      	mov	r0, r5
 8005638:	2178      	movs	r1, #120	; 0x78
 800563a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800563e:	9700      	str	r7, [sp, #0]
 8005640:	f88d c017 	strb.w	ip, [sp, #23]
 8005644:	f002 ff92 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8005648:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800564c:	4623      	mov	r3, r4
 800564e:	4642      	mov	r2, r8
 8005650:	4628      	mov	r0, r5
 8005652:	2178      	movs	r1, #120	; 0x78
 8005654:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005658:	9700      	str	r7, [sp, #0]
 800565a:	f88d c017 	strb.w	ip, [sp, #23]
 800565e:	f002 ff85 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x3F); //
 8005662:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005666:	4623      	mov	r3, r4
 8005668:	4642      	mov	r2, r8
 800566a:	4628      	mov	r0, r5
 800566c:	2178      	movs	r1, #120	; 0x78
 800566e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005672:	9700      	str	r7, [sp, #0]
 8005674:	f88d c017 	strb.w	ip, [sp, #23]
 8005678:	f002 ff78 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800567c:	f04f 0ca4 	mov.w	ip, #164	; 0xa4
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005680:	4623      	mov	r3, r4
 8005682:	4642      	mov	r2, r8
 8005684:	4628      	mov	r0, r5
 8005686:	2178      	movs	r1, #120	; 0x78
 8005688:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800568c:	9700      	str	r7, [sp, #0]
 800568e:	f88d c017 	strb.w	ip, [sp, #23]
 8005692:	f002 ff6b 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8005696:	f04f 0cd3 	mov.w	ip, #211	; 0xd3
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800569a:	4623      	mov	r3, r4
 800569c:	4642      	mov	r2, r8
 800569e:	4628      	mov	r0, r5
 80056a0:	2178      	movs	r1, #120	; 0x78
 80056a2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80056a6:	9700      	str	r7, [sp, #0]
 80056a8:	f88d c017 	strb.w	ip, [sp, #23]
 80056ac:	f002 ff5e 	bl	800856c <HAL_I2C_Mem_Write>
 80056b0:	4623      	mov	r3, r4
 80056b2:	4642      	mov	r2, r8
 80056b4:	4628      	mov	r0, r5
 80056b6:	2178      	movs	r1, #120	; 0x78
 80056b8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80056bc:	9700      	str	r7, [sp, #0]
 80056be:	f88d 8017 	strb.w	r8, [sp, #23]
 80056c2:	f002 ff53 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x00); //-not offset
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80056c6:	f04f 0cd5 	mov.w	ip, #213	; 0xd5
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80056ca:	4623      	mov	r3, r4
 80056cc:	4642      	mov	r2, r8
 80056ce:	4628      	mov	r0, r5
 80056d0:	2178      	movs	r1, #120	; 0x78
 80056d2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80056d6:	9700      	str	r7, [sp, #0]
 80056d8:	f88d c017 	strb.w	ip, [sp, #23]
 80056dc:	f002 ff46 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80056e0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80056e4:	4623      	mov	r3, r4
 80056e6:	4642      	mov	r2, r8
 80056e8:	4628      	mov	r0, r5
 80056ea:	2178      	movs	r1, #120	; 0x78
 80056ec:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80056f0:	9700      	str	r7, [sp, #0]
 80056f2:	f88d c017 	strb.w	ip, [sp, #23]
 80056f6:	f002 ff39 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80056fa:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80056fe:	4623      	mov	r3, r4
 8005700:	4642      	mov	r2, r8
 8005702:	4628      	mov	r0, r5
 8005704:	2178      	movs	r1, #120	; 0x78
 8005706:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800570a:	9700      	str	r7, [sp, #0]
 800570c:	f88d c017 	strb.w	ip, [sp, #23]
 8005710:	f002 ff2c 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x22); //
 8005714:	f04f 0c22 	mov.w	ip, #34	; 0x22
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005718:	4623      	mov	r3, r4
 800571a:	4642      	mov	r2, r8
 800571c:	4628      	mov	r0, r5
 800571e:	2178      	movs	r1, #120	; 0x78
 8005720:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005724:	9700      	str	r7, [sp, #0]
 8005726:	f88d c017 	strb.w	ip, [sp, #23]
 800572a:	f002 ff1f 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800572e:	f04f 0cda 	mov.w	ip, #218	; 0xda
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005732:	4623      	mov	r3, r4
 8005734:	4642      	mov	r2, r8
 8005736:	4628      	mov	r0, r5
 8005738:	2178      	movs	r1, #120	; 0x78
 800573a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800573e:	9700      	str	r7, [sp, #0]
 8005740:	f88d c017 	strb.w	ip, [sp, #23]
 8005744:	f002 ff12 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x12);
 8005748:	f04f 0c12 	mov.w	ip, #18
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800574c:	4623      	mov	r3, r4
 800574e:	4642      	mov	r2, r8
 8005750:	4628      	mov	r0, r5
 8005752:	2178      	movs	r1, #120	; 0x78
 8005754:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005758:	9700      	str	r7, [sp, #0]
 800575a:	f88d c017 	strb.w	ip, [sp, #23]
 800575e:	f002 ff05 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8005762:	f04f 0cdb 	mov.w	ip, #219	; 0xdb
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005766:	4623      	mov	r3, r4
 8005768:	4642      	mov	r2, r8
 800576a:	4628      	mov	r0, r5
 800576c:	2178      	movs	r1, #120	; 0x78
 800576e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005772:	9700      	str	r7, [sp, #0]
 8005774:	f88d c017 	strb.w	ip, [sp, #23]
 8005778:	f002 fef8 	bl	800856c <HAL_I2C_Mem_Write>
 800577c:	4623      	mov	r3, r4
 800577e:	4642      	mov	r2, r8
 8005780:	4628      	mov	r0, r5
 8005782:	2178      	movs	r1, #120	; 0x78
 8005784:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8005788:	9700      	str	r7, [sp, #0]
 800578a:	f88d 9017 	strb.w	r9, [sp, #23]
 800578e:	f002 feed 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005792:	f04f 0c8d 	mov.w	ip, #141	; 0x8d
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005796:	4623      	mov	r3, r4
 8005798:	4642      	mov	r2, r8
 800579a:	4628      	mov	r0, r5
 800579c:	2178      	movs	r1, #120	; 0x78
 800579e:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80057a2:	9700      	str	r7, [sp, #0]
 80057a4:	f88d c017 	strb.w	ip, [sp, #23]
 80057a8:	f002 fee0 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0x14); //
 80057ac:	f04f 0c14 	mov.w	ip, #20
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80057b0:	4623      	mov	r3, r4
 80057b2:	4642      	mov	r2, r8
 80057b4:	4628      	mov	r0, r5
 80057b6:	2178      	movs	r1, #120	; 0x78
 80057b8:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80057bc:	9700      	str	r7, [sp, #0]
 80057be:	f88d c017 	strb.w	ip, [sp, #23]
 80057c2:	f002 fed3 	bl	800856c <HAL_I2C_Mem_Write>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80057c6:	f04f 0caf 	mov.w	ip, #175	; 0xaf
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80057ca:	4642      	mov	r2, r8
 80057cc:	4623      	mov	r3, r4
 80057ce:	4628      	mov	r0, r5
 80057d0:	2178      	movs	r1, #120	; 0x78
 80057d2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80057d6:	9700      	str	r7, [sp, #0]
 80057d8:	f88d c017 	strb.w	ip, [sp, #23]
 80057dc:	f002 fec6 	bl	800856c <HAL_I2C_Mem_Write>
}
 80057e0:	b006      	add	sp, #24
 80057e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e6:	bf00      	nop
 80057e8:	20000a70 	.word	0x20000a70

080057ec <ssd1306_GotoXY>:

void ssd1306_GotoXY(int x, int y)
{
cursor=SSD1306_WIDTH*y+x;
 80057ec:	4b02      	ldr	r3, [pc, #8]	; (80057f8 <ssd1306_GotoXY+0xc>)
 80057ee:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 80057f2:	8018      	strh	r0, [r3, #0]
}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	200002fc 	.word	0x200002fc

080057fc <ssd1306_PutString>:
	cursor+=5;
}

void ssd1306_PutString(char *c)
{
	while (*c) {
 80057fc:	7803      	ldrb	r3, [r0, #0]
 80057fe:	b363      	cbz	r3, 800585a <ssd1306_PutString+0x5e>
{
 8005800:	b4f0      	push	{r4, r5, r6, r7}
 8005802:	4e16      	ldr	r6, [pc, #88]	; (800585c <ssd1306_PutString+0x60>)
 8005804:	4d16      	ldr	r5, [pc, #88]	; (8005860 <ssd1306_PutString+0x64>)
 8005806:	8832      	ldrh	r2, [r6, #0]
 8005808:	4c16      	ldr	r4, [pc, #88]	; (8005864 <ssd1306_PutString+0x68>)
 800580a:	e00e      	b.n	800582a <ssd1306_PutString+0x2e>
	memcpy(buffer+cursor,&myFont[c-0x20][0],5);
 800580c:	3b20      	subs	r3, #32
 800580e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005812:	18e1      	adds	r1, r4, r3
 8005814:	58e7      	ldr	r7, [r4, r3]
 8005816:	7909      	ldrb	r1, [r1, #4]
 8005818:	18ab      	adds	r3, r5, r2
 800581a:	50af      	str	r7, [r5, r2]
		{
			ssd1306_PutRuC(c);
			c+=2;
		}
		else
			ssd1306_Put(*c++);
 800581c:	3001      	adds	r0, #1
	memcpy(buffer+cursor,&myFont[c-0x20][0],5);
 800581e:	7119      	strb	r1, [r3, #4]
		cursor++;
 8005820:	3206      	adds	r2, #6
 8005822:	b292      	uxth	r2, r2
 8005824:	8032      	strh	r2, [r6, #0]
	while (*c) {
 8005826:	7803      	ldrb	r3, [r0, #0]
 8005828:	b1ab      	cbz	r3, 8005856 <ssd1306_PutString+0x5a>
		if (*c==0xD0 || *c==0xD1)
 800582a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800582e:	b2c9      	uxtb	r1, r1
 8005830:	2901      	cmp	r1, #1
 8005832:	d8eb      	bhi.n	800580c <ssd1306_PutString+0x10>
	if (*c==0xD0) pos=*(c+1)-144+101;
 8005834:	2bd0      	cmp	r3, #208	; 0xd0
 8005836:	7843      	ldrb	r3, [r0, #1]
			c+=2;
 8005838:	f100 0002 	add.w	r0, r0, #2
	if (*c==0xD0) pos=*(c+1)-144+101;
 800583c:	bf0c      	ite	eq
 800583e:	3b2b      	subeq	r3, #43	; 0x2b
	else if (*c==0xD1) pos=*(c+1)-128+149;
 8005840:	3315      	addne	r3, #21
 8005842:	b2db      	uxtb	r3, r3
	memcpy(buffer+cursor,&myFont[pos][0],5);
 8005844:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005848:	18e1      	adds	r1, r4, r3
 800584a:	58e7      	ldr	r7, [r4, r3]
 800584c:	7909      	ldrb	r1, [r1, #4]
 800584e:	18ab      	adds	r3, r5, r2
 8005850:	50af      	str	r7, [r5, r2]
 8005852:	7119      	strb	r1, [r3, #4]
			c+=2;
 8005854:	e7e4      	b.n	8005820 <ssd1306_PutString+0x24>
	}
}
 8005856:	bcf0      	pop	{r4, r5, r6, r7}
 8005858:	4770      	bx	lr
 800585a:	4770      	bx	lr
 800585c:	200002fc 	.word	0x200002fc
 8005860:	20000318 	.word	0x20000318
 8005864:	0800b9a0 	.word	0x0800b9a0

08005868 <ssd1306_Clean>:

void ssd1306_Clean(void)
{
	uint16_t i;
	for (i=0;i<SSD1306_HEIGHT*SSD1306_WIDTH/8;i++)
 8005868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800586c:	2100      	movs	r1, #0
 800586e:	4801      	ldr	r0, [pc, #4]	; (8005874 <ssd1306_Clean+0xc>)
 8005870:	f004 bf26 	b.w	800a6c0 <memset>
 8005874:	20000318 	.word	0x20000318

08005878 <ssd1306_Update>:
	buffer[i]=0;
}

void ssd1306_Update(void)
{
 8005878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587c:	25b0      	movs	r5, #176	; 0xb0
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 800587e:	f04f 0a00 	mov.w	sl, #0
{
 8005882:	b086      	sub	sp, #24
 8005884:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8005910 <ssd1306_Update+0x98>
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8005888:	4f20      	ldr	r7, [pc, #128]	; (800590c <ssd1306_Update+0x94>)
 800588a:	f10d 0817 	add.w	r8, sp, #23
 800588e:	2401      	movs	r4, #1
 8005890:	260a      	movs	r6, #10
 8005892:	4623      	mov	r3, r4
 8005894:	2200      	movs	r2, #0
 8005896:	2178      	movs	r1, #120	; 0x78
 8005898:	4638      	mov	r0, r7
 800589a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800589e:	f8cd 8000 	str.w	r8, [sp]
 80058a2:	f88d 5017 	strb.w	r5, [sp, #23]
 80058a6:	f002 fe61 	bl	800856c <HAL_I2C_Mem_Write>
 80058aa:	4623      	mov	r3, r4
 80058ac:	2200      	movs	r2, #0
 80058ae:	2178      	movs	r1, #120	; 0x78
 80058b0:	4638      	mov	r0, r7
 80058b2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80058b6:	f8cd 8000 	str.w	r8, [sp]
 80058ba:	f88d a017 	strb.w	sl, [sp, #23]
 80058be:	f002 fe55 	bl	800856c <HAL_I2C_Mem_Write>

		for(j=0;j<8;j++)
		{
			ssd1306_WriteCommand(0xB0+j);
		    ssd1306_WriteCommand(0x00);
			ssd1306_WriteCommand(0x10);
 80058c2:	f04f 0c10 	mov.w	ip, #16
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 80058c6:	4623      	mov	r3, r4
 80058c8:	2200      	movs	r2, #0
 80058ca:	2178      	movs	r1, #120	; 0x78
 80058cc:	4638      	mov	r0, r7
 80058ce:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80058d2:	f8cd 8000 	str.w	r8, [sp]
 80058d6:	f88d c017 	strb.w	ip, [sp, #23]
 80058da:	f002 fe47 	bl	800856c <HAL_I2C_Mem_Write>
			HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,buffer+j*128,128,1000);
 80058de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	4425      	add	r5, r4
 80058e6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80058ea:	f8cd 9000 	str.w	r9, [sp]
 80058ee:	4623      	mov	r3, r4
 80058f0:	2240      	movs	r2, #64	; 0x40
 80058f2:	2178      	movs	r1, #120	; 0x78
 80058f4:	4638      	mov	r0, r7
 80058f6:	b2ed      	uxtb	r5, r5
 80058f8:	f002 fe38 	bl	800856c <HAL_I2C_Mem_Write>
		for(j=0;j<8;j++)
 80058fc:	2db8      	cmp	r5, #184	; 0xb8
 80058fe:	f109 0980 	add.w	r9, r9, #128	; 0x80
 8005902:	d1c4      	bne.n	800588e <ssd1306_Update+0x16>

		}
}
 8005904:	b006      	add	sp, #24
 8005906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800590a:	bf00      	nop
 800590c:	20000a70 	.word	0x20000a70
 8005910:	20000318 	.word	0x20000318

08005914 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005914:	4b0e      	ldr	r3, [pc, #56]	; (8005950 <HAL_MspInit+0x3c>)
{
 8005916:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005918:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800591a:	490e      	ldr	r1, [pc, #56]	; (8005954 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 800591c:	f042 0201 	orr.w	r2, r2, #1
 8005920:	619a      	str	r2, [r3, #24]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	f002 0201 	and.w	r2, r2, #1
 8005928:	9200      	str	r2, [sp, #0]
 800592a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800592c:	69da      	ldr	r2, [r3, #28]
 800592e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005932:	61da      	str	r2, [r3, #28]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800593a:	9301      	str	r3, [sp, #4]
 800593c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800593e:	684b      	ldr	r3, [r1, #4]
 8005940:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005944:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005948:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800594a:	b002      	add	sp, #8
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	40010000 	.word	0x40010000

08005958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005958:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800595a:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 800595c:	6802      	ldr	r2, [r0, #0]
 800595e:	4b20      	ldr	r3, [pc, #128]	; (80059e0 <HAL_ADC_MspInit+0x88>)
{
 8005960:	b087      	sub	sp, #28
  if(hadc->Instance==ADC1)
 8005962:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005964:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005968:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(hadc->Instance==ADC1)
 800596c:	d001      	beq.n	8005972 <HAL_ADC_MspInit+0x1a>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800596e:	b007      	add	sp, #28
 8005970:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005972:	2604      	movs	r6, #4
 8005974:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005976:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800597a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800597e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005982:	619a      	str	r2, [r3, #24]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	4605      	mov	r5, r0
 8005988:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800598c:	9200      	str	r2, [sp, #0]
 800598e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005990:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005992:	4814      	ldr	r0, [pc, #80]	; (80059e4 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005994:	f042 0204 	orr.w	r2, r2, #4
 8005998:	619a      	str	r2, [r3, #24]
 800599a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800599c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059a8:	f002 f9de 	bl	8007d68 <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059ac:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80059b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80059b4:	2320      	movs	r3, #32
    hdma_adc1.Instance = DMA1_Channel1;
 80059b6:	4e0c      	ldr	r6, [pc, #48]	; (80059e8 <HAL_ADC_MspInit+0x90>)
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059ba:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80059bc:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80059be:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80059c2:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80059c6:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80059c8:	61f4      	str	r4, [r6, #28]
    hdma_adc1.Instance = DMA1_Channel1;
 80059ca:	6031      	str	r1, [r6, #0]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80059cc:	f001 fea4 	bl	8007718 <HAL_DMA_Init>
 80059d0:	b918      	cbnz	r0, 80059da <HAL_ADC_MspInit+0x82>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80059d2:	622e      	str	r6, [r5, #32]
 80059d4:	6275      	str	r5, [r6, #36]	; 0x24
}
 80059d6:	b007      	add	sp, #28
 80059d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80059da:	f7ff fd8f 	bl	80054fc <Error_Handler>
 80059de:	e7f8      	b.n	80059d2 <HAL_ADC_MspInit+0x7a>
 80059e0:	40012400 	.word	0x40012400
 80059e4:	40010800 	.word	0x40010800
 80059e8:	20000c2c 	.word	0x20000c2c
 80059ec:	40020008 	.word	0x40020008

080059f0 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059f0:	2300      	movs	r3, #0
{
 80059f2:	b5d0      	push	{r4, r6, r7, lr}
  if(hi2c->Instance==I2C1)
 80059f4:	6801      	ldr	r1, [r0, #0]
 80059f6:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <HAL_I2C_MspInit+0x58>)
{
 80059f8:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 80059fa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a00:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(hi2c->Instance==I2C1)
 8005a04:	d001      	beq.n	8005a0a <HAL_I2C_MspInit+0x1a>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8005a06:	b006      	add	sp, #24
 8005a08:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a0a:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a0c:	26c0      	movs	r6, #192	; 0xc0
 8005a0e:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a10:	4c0e      	ldr	r4, [pc, #56]	; (8005a4c <HAL_I2C_MspInit+0x5c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a12:	480f      	ldr	r0, [pc, #60]	; (8005a50 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a14:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a16:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a18:	f043 0308 	orr.w	r3, r3, #8
 8005a1c:	61a3      	str	r3, [r4, #24]
 8005a1e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a20:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a2c:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a2e:	f002 f99b 	bl	8007d68 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005a32:	69e3      	ldr	r3, [r4, #28]
 8005a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005a38:	61e3      	str	r3, [r4, #28]
 8005a3a:	69e3      	ldr	r3, [r4, #28]
 8005a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	9b01      	ldr	r3, [sp, #4]
}
 8005a44:	b006      	add	sp, #24
 8005a46:	bdd0      	pop	{r4, r6, r7, pc}
 8005a48:	40005400 	.word	0x40005400
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40010c00 	.word	0x40010c00

08005a54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005a54:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a56:	2400      	movs	r4, #0
  if(hspi->Instance==SPI1)
 8005a58:	6803      	ldr	r3, [r0, #0]
 8005a5a:	4a2e      	ldr	r2, [pc, #184]	; (8005b14 <HAL_SPI_MspInit+0xc0>)
{
 8005a5c:	b089      	sub	sp, #36	; 0x24
  if(hspi->Instance==SPI1)
 8005a5e:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a60:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005a64:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hspi->Instance==SPI1)
 8005a68:	d004      	beq.n	8005a74 <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 8005a6a:	4a2b      	ldr	r2, [pc, #172]	; (8005b18 <HAL_SPI_MspInit+0xc4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d029      	beq.n	8005ac4 <HAL_SPI_MspInit+0x70>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005a70:	b009      	add	sp, #36	; 0x24
 8005a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a74:	20a0      	movs	r0, #160	; 0xa0
 8005a76:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005a78:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005a7a:	4b28      	ldr	r3, [pc, #160]	; (8005b1c <HAL_SPI_MspInit+0xc8>)
 8005a7c:	699a      	ldr	r2, [r3, #24]
 8005a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a82:	619a      	str	r2, [r3, #24]
 8005a84:	699a      	ldr	r2, [r3, #24]
 8005a86:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005a8a:	9200      	str	r2, [sp, #0]
 8005a8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	f042 0204 	orr.w	r2, r2, #4
 8005a94:	619a      	str	r2, [r3, #24]
 8005a96:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aa2:	a904      	add	r1, sp, #16
 8005aa4:	481e      	ldr	r0, [pc, #120]	; (8005b20 <HAL_SPI_MspInit+0xcc>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005aa6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005aa8:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005aaa:	f002 f95d 	bl	8007d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ab2:	481b      	ldr	r0, [pc, #108]	; (8005b20 <HAL_SPI_MspInit+0xcc>)
 8005ab4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005ab6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aba:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005abc:	f002 f954 	bl	8007d68 <HAL_GPIO_Init>
}
 8005ac0:	b009      	add	sp, #36	; 0x24
 8005ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ac4:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005ac6:	f44f 4620 	mov.w	r6, #40960	; 0xa000
 8005aca:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005acc:	4b13      	ldr	r3, [pc, #76]	; (8005b1c <HAL_SPI_MspInit+0xc8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ace:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ad0:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad2:	4814      	ldr	r0, [pc, #80]	; (8005b24 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005ad4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ad8:	61da      	str	r2, [r3, #28]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005ae0:	9202      	str	r2, [sp, #8]
 8005ae2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f042 0208 	orr.w	r2, r2, #8
 8005aea:	619a      	str	r2, [r3, #24]
 8005aec:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005aee:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005af2:	f003 0308 	and.w	r3, r3, #8
 8005af6:	9303      	str	r3, [sp, #12]
 8005af8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005afa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005afc:	f002 f934 	bl	8007d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8005b00:	4622      	mov	r2, r4
 8005b02:	4621      	mov	r1, r4
 8005b04:	2024      	movs	r0, #36	; 0x24
 8005b06:	f001 fda9 	bl	800765c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005b0a:	2024      	movs	r0, #36	; 0x24
 8005b0c:	f001 fdde 	bl	80076cc <HAL_NVIC_EnableIRQ>
}
 8005b10:	b009      	add	sp, #36	; 0x24
 8005b12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b14:	40013000 	.word	0x40013000
 8005b18:	40003800 	.word	0x40003800
 8005b1c:	40021000 	.word	0x40021000
 8005b20:	40010800 	.word	0x40010800
 8005b24:	40010c00 	.word	0x40010c00

08005b28 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 8005b28:	6803      	ldr	r3, [r0, #0]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d000      	beq.n	8005b32 <HAL_TIM_PWM_MspInit+0xa>
 8005b30:	4770      	bx	lr
{
 8005b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8005b36:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8005b3a:	4604      	mov	r4, r0
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b3c:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b40:	f04f 0810 	mov.w	r8, #16
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b44:	f04f 0e00 	mov.w	lr, #0
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005b48:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8005b4c:	2620      	movs	r6, #32
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8005b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b52:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005b56:	69da      	ldr	r2, [r3, #28]
{
 8005b58:	b082      	sub	sp, #8
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b5a:	f042 0201 	orr.w	r2, r2, #1
 8005b5e:	61da      	str	r2, [r3, #28]
 8005b60:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005b62:	4d0e      	ldr	r5, [pc, #56]	; (8005b9c <HAL_TIM_PWM_MspInit+0x74>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ba0 <HAL_TIM_PWM_MspInit+0x78>)
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005b6e:	e9c5 c003 	strd	ip, r0, [r5, #12]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8005b72:	4628      	mov	r0, r5
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8005b74:	e9c5 7605 	strd	r7, r6, [r5, #20]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b78:	f8c5 8004 	str.w	r8, [r5, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b7c:	f8c5 e008 	str.w	lr, [r5, #8]
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8005b80:	602b      	str	r3, [r5, #0]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8005b82:	61e9      	str	r1, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8005b84:	f001 fdc8 	bl	8007718 <HAL_DMA_Init>
 8005b88:	b928      	cbnz	r0, 8005b96 <HAL_TIM_PWM_MspInit+0x6e>
      Error_Handler();
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8005b8a:	62a5      	str	r5, [r4, #40]	; 0x28
 8005b8c:	626c      	str	r4, [r5, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8005b8e:	6325      	str	r5, [r4, #48]	; 0x30
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005b90:	b002      	add	sp, #8
 8005b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      Error_Handler();
 8005b96:	f7ff fcb1 	bl	80054fc <Error_Handler>
 8005b9a:	e7f6      	b.n	8005b8a <HAL_TIM_PWM_MspInit+0x62>
 8005b9c:	20000ae0 	.word	0x20000ae0
 8005ba0:	40020080 	.word	0x40020080

08005ba4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ba4:	2300      	movs	r3, #0
{
 8005ba6:	b5d0      	push	{r4, r6, r7, lr}
  if(htim->Instance==TIM2)
 8005ba8:	6802      	ldr	r2, [r0, #0]
{
 8005baa:	b086      	sub	sp, #24
  if(htim->Instance==TIM2)
 8005bac:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bb4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM2)
 8005bb8:	d001      	beq.n	8005bbe <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005bba:	b006      	add	sp, #24
 8005bbc:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005bbe:	2602      	movs	r6, #2
 8005bc0:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bc2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005bc8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005bcc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bce:	4808      	ldr	r0, [pc, #32]	; (8005bf0 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bd0:	f042 0204 	orr.w	r2, r2, #4
 8005bd4:	619a      	str	r2, [r3, #24]
 8005bd6:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bd8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005be0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be8:	f002 f8be 	bl	8007d68 <HAL_GPIO_Init>
}
 8005bec:	b006      	add	sp, #24
 8005bee:	bdd0      	pop	{r4, r6, r7, pc}
 8005bf0:	40010800 	.word	0x40010800

08005bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bf4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf6:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8005bf8:	6802      	ldr	r2, [r0, #0]
 8005bfa:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <HAL_UART_MspInit+0x88>)
{
 8005bfc:	b087      	sub	sp, #28
  if(huart->Instance==USART1)
 8005bfe:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c00:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8005c04:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART1)
 8005c08:	d001      	beq.n	8005c0e <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c0a:	b007      	add	sp, #28
 8005c0c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c0e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005c12:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c14:	2503      	movs	r5, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c16:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005c28:	9200      	str	r2, [sp, #0]
 8005c2a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	f042 0204 	orr.w	r2, r2, #4
 8005c32:	619a      	str	r2, [r3, #24]
 8005c34:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c36:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c3a:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c3e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c42:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c44:	a902      	add	r1, sp, #8
 8005c46:	f500 3083 	add.w	r0, r0, #67072	; 0x10600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c4a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c4c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c4e:	f002 f88b 	bl	8007d68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c52:	2300      	movs	r3, #0
 8005c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c58:	a902      	add	r1, sp, #8
 8005c5a:	4809      	ldr	r0, [pc, #36]	; (8005c80 <HAL_UART_MspInit+0x8c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c60:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c62:	f002 f881 	bl	8007d68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005c66:	4622      	mov	r2, r4
 8005c68:	4621      	mov	r1, r4
 8005c6a:	2025      	movs	r0, #37	; 0x25
 8005c6c:	f001 fcf6 	bl	800765c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005c70:	2025      	movs	r0, #37	; 0x25
 8005c72:	f001 fd2b 	bl	80076cc <HAL_NVIC_EnableIRQ>
}
 8005c76:	b007      	add	sp, #28
 8005c78:	bd30      	pop	{r4, r5, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40013800 	.word	0x40013800
 8005c80:	40010800 	.word	0x40010800

08005c84 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c84:	e7fe      	b.n	8005c84 <NMI_Handler>
 8005c86:	bf00      	nop

08005c88 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c88:	e7fe      	b.n	8005c88 <HardFault_Handler>
 8005c8a:	bf00      	nop

08005c8c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c8c:	e7fe      	b.n	8005c8c <MemManage_Handler>
 8005c8e:	bf00      	nop

08005c90 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c90:	e7fe      	b.n	8005c90 <BusFault_Handler>
 8005c92:	bf00      	nop

08005c94 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c94:	e7fe      	b.n	8005c94 <UsageFault_Handler>
 8005c96:	bf00      	nop

08005c98 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop

08005c9c <DebugMon_Handler>:
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop

08005ca0 <PendSV_Handler>:
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop

08005ca4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ca4:	f001 ba4e 	b.w	8007144 <HAL_IncTick>

08005ca8 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005ca8:	2002      	movs	r0, #2
 8005caa:	f002 b973 	b.w	8007f94 <HAL_GPIO_EXTI_IRQHandler>
 8005cae:	bf00      	nop

08005cb0 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005cb0:	2004      	movs	r0, #4
 8005cb2:	f002 b96f 	b.w	8007f94 <HAL_GPIO_EXTI_IRQHandler>
 8005cb6:	bf00      	nop

08005cb8 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8005cb8:	4801      	ldr	r0, [pc, #4]	; (8005cc0 <DMA1_Channel7_IRQHandler+0x8>)
 8005cba:	f001 be0d 	b.w	80078d8 <HAL_DMA_IRQHandler>
 8005cbe:	bf00      	nop
 8005cc0:	20000ae0 	.word	0x20000ae0

08005cc4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005cc4:	4801      	ldr	r0, [pc, #4]	; (8005ccc <SPI2_IRQHandler+0x8>)
 8005cc6:	f003 be03 	b.w	80098d0 <HAL_SPI_IRQHandler>
 8005cca:	bf00      	nop
 8005ccc:	200009a4 	.word	0x200009a4

08005cd0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005cd0:	4801      	ldr	r0, [pc, #4]	; (8005cd8 <USART1_IRQHandler+0x8>)
 8005cd2:	f004 bb75 	b.w	800a3c0 <HAL_UART_IRQHandler>
 8005cd6:	bf00      	nop
 8005cd8:	20000bc0 	.word	0x20000bc0

08005cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005cdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005cde:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005ce2:	f002 f957 	bl	8007f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8005cea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005cee:	f002 b951 	b.w	8007f94 <HAL_GPIO_EXTI_IRQHandler>
 8005cf2:	bf00      	nop

08005cf4 <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 8005cf4:	460a      	mov	r2, r1
            	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 8005cf6:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
 8005cfa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8005cfc:	f002 b946 	b.w	8007f8c <HAL_GPIO_WritePin>

08005d00 <SX127X_Reset>:
}

__weak void SX127X_Reset(SX127X_t *module)
{
 8005d00:	b510      	push	{r4, lr}
 8005d02:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 8005d04:	2101      	movs	r1, #1
 8005d06:	f7ff fff5 	bl	8005cf4 <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 8005d0a:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8005d0e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005d10:	2200      	movs	r2, #0
 8005d12:	f002 f93b 	bl	8007f8c <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8005d16:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8005d1a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005d1c:	2201      	movs	r2, #1

	SX127X_delayMicro(6000);
}
 8005d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8005d22:	f002 b933 	b.w	8007f8c <HAL_GPIO_WritePin>
 8005d26:	bf00      	nop

08005d28 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 8005d28:	460b      	mov	r3, r1
 8005d2a:	b510      	push	{r4, lr}
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	b082      	sub	sp, #8
	SX127X_SetNSS(module, 0);
 8005d30:	2100      	movs	r1, #0
{
 8005d32:	f88d 3007 	strb.w	r3, [sp, #7]
	SX127X_SetNSS(module, 0);
 8005d36:	f7ff ffdd 	bl	8005cf4 <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 8005d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d3e:	2201      	movs	r2, #1
 8005d40:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005d42:	f10d 0107 	add.w	r1, sp, #7
 8005d46:	f003 fb5d 	bl	8009404 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 8005d4a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005d4c:	f003 fe54 	bl	80099f8 <HAL_SPI_GetState>
 8005d50:	2801      	cmp	r0, #1
 8005d52:	d1fa      	bne.n	8005d4a <SX127X_SPICommand+0x22>
		;
}
 8005d54:	b002      	add	sp, #8
 8005d56:	bd10      	pop	{r4, pc}

08005d58 <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
	uint8_t txByte = 0x00;
 8005d58:	2100      	movs	r1, #0
{
 8005d5a:	b510      	push	{r4, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	4604      	mov	r4, r0
	uint8_t txByte = 0x00;
 8005d60:	f88d 100e 	strb.w	r1, [sp, #14]
	uint8_t rxByte = 0x00;
 8005d64:	f88d 100f 	strb.w	r1, [sp, #15]

	SX127X_SetNSS(module, 0);
 8005d68:	f7ff ffc4 	bl	8005cf4 <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 8005d6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005d70:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005d72:	f10d 020f 	add.w	r2, sp, #15
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	f10d 010e 	add.w	r1, sp, #14
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f003 fc43 	bl	8009608 <HAL_SPI_TransmitReceive>
	return rxByte;
}
 8005d82:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8005d86:	b004      	add	sp, #16
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	bf00      	nop

08005d8c <SX127X_config>:
		SX127X_SetNSS(module, 1);
	}
}

void SX127X_config(SX127X_t *module)
{
 8005d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	module->status = STANDBY;
}

void SX127X_sleep(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005d8e:	6802      	ldr	r2, [r0, #0]
 8005d90:	4bc8      	ldr	r3, [pc, #800]	; (80060b4 <SX127X_config+0x328>)
{
 8005d92:	4604      	mov	r4, r0
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005d94:	429a      	cmp	r2, r3
	SX127X_SetNSS(module, 0);
 8005d96:	f04f 0100 	mov.w	r1, #0
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005d9a:	f200 8128 	bhi.w	8005fee <SX127X_config+0x262>
	SX127X_SetNSS(module, 0);
 8005d9e:	f7ff ffa9 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005da2:	2181      	movs	r1, #129	; 0x81
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff ffbf 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005daa:	2188      	movs	r1, #136	; 0x88
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
	module->status = SLEEP;
 8005dac:	2501      	movs	r5, #1
	SX127X_SPICommand(module, cmd);
 8005dae:	4620      	mov	r0, r4
 8005db0:	f7ff ffba 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005db4:	2101      	movs	r1, #1
 8005db6:	4620      	mov	r0, r4
 8005db8:	f7ff ff9c 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 8005dbc:	78a6      	ldrb	r6, [r4, #2]
	SX127X_SetNSS(module, 0);
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	4620      	mov	r0, r4
	module->status = SLEEP;
 8005dc2:	7425      	strb	r5, [r4, #16]
	SX127X_SetNSS(module, 0);
 8005dc4:	f7ff ff96 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005dc8:	2186      	movs	r1, #134	; 0x86
 8005dca:	4620      	mov	r0, r4
 8005dcc:	f7ff ffac 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005dd0:	4631      	mov	r1, r6
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f7ff ffa8 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f7ff ff8a 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8005de0:	7866      	ldrb	r6, [r4, #1]
	SX127X_SetNSS(module, 0);
 8005de2:	2100      	movs	r1, #0
 8005de4:	4620      	mov	r0, r4
 8005de6:	f7ff ff85 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005dea:	2187      	movs	r1, #135	; 0x87
 8005dec:	4620      	mov	r0, r4
 8005dee:	f7ff ff9b 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005df2:	4631      	mov	r1, r6
 8005df4:	4620      	mov	r0, r4
 8005df6:	f7ff ff97 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f7ff ff79 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 8005e02:	7826      	ldrb	r6, [r4, #0]
	SX127X_SetNSS(module, 0);
 8005e04:	2100      	movs	r1, #0
 8005e06:	4620      	mov	r0, r4
 8005e08:	f7ff ff74 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005e0c:	2188      	movs	r1, #136	; 0x88
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f7ff ff8a 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005e14:	4631      	mov	r1, r6
 8005e16:	4620      	mov	r0, r4
 8005e18:	f7ff ff86 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f7ff ff68 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8005e24:	7926      	ldrb	r6, [r4, #4]
	SX127X_SetNSS(module, 0);
 8005e26:	2100      	movs	r1, #0
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8005e28:	3e05      	subs	r6, #5
	SX127X_SetNSS(module, 0);
 8005e2a:	4620      	mov	r0, r4
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8005e2c:	f066 060f 	orn	r6, r6, #15
	SX127X_SetNSS(module, 0);
 8005e30:	f7ff ff60 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8005e34:	b2f6      	uxtb	r6, r6
	SX127X_SPICommand(module, addr | 0x80);
 8005e36:	2189      	movs	r1, #137	; 0x89
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff ff75 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7ff ff71 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005e46:	4629      	mov	r1, r5
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f7ff ff53 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7ff ff4f 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005e56:	218b      	movs	r1, #139	; 0x8b
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f7ff ff65 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005e5e:	2132      	movs	r1, #50	; 0x32
 8005e60:	4620      	mov	r0, r4
 8005e62:	f7ff ff61 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005e66:	4629      	mov	r1, r5
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f7ff ff43 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4620      	mov	r0, r4
 8005e72:	f7ff ff3f 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005e76:	218c      	movs	r1, #140	; 0x8c
 8005e78:	4620      	mov	r0, r4
 8005e7a:	f7ff ff55 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005e7e:	2123      	movs	r1, #35	; 0x23
 8005e80:	4620      	mov	r0, r4
 8005e82:	f7ff ff51 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005e86:	4629      	mov	r1, r5
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f7ff ff33 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8005e8e:	2100      	movs	r1, #0
	module->readBytes = 0;
 8005e90:	460f      	mov	r7, r1
			(module->cr << 1)) +         //Coding rate
 8005e92:	79e6      	ldrb	r6, [r4, #7]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8005e94:	79a2      	ldrb	r2, [r4, #6]
			(module->implicitHeader & 1)); //Implicit header flag
 8005e96:	7aa3      	ldrb	r3, [r4, #10]
			(module->cr << 1)) +         //Coding rate
 8005e98:	40ae      	lsls	r6, r5
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8005e9a:	eb06 1602 	add.w	r6, r6, r2, lsl #4
			(module->implicitHeader & 1)); //Implicit header flag
 8005e9e:	402b      	ands	r3, r5
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8005ea0:	441e      	add	r6, r3
	SX127X_SetNSS(module, 0);
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7ff ff26 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8005ea8:	b2f6      	uxtb	r6, r6
	SX127X_SPICommand(module, addr | 0x80);
 8005eaa:	219d      	movs	r1, #157	; 0x9d
 8005eac:	4620      	mov	r0, r4
 8005eae:	f7ff ff3b 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7ff ff37 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005eba:	4629      	mov	r1, r5
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f7ff ff19 	bl	8005cf4 <SX127X_SetNSS>
			(module->crcEnable << 2) +     //CRC enable flag
 8005ec2:	7a66      	ldrb	r6, [r4, #9]
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8005ec4:	7963      	ldrb	r3, [r4, #5]
			(module->crcEnable << 2) +     //CRC enable flag
 8005ec6:	00b6      	lsls	r6, r6, #2
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8005ec8:	eb06 1603 	add.w	r6, r6, r3, lsl #4
	SX127X_SetNSS(module, 0);
 8005ecc:	4639      	mov	r1, r7
 8005ece:	4620      	mov	r0, r4
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8005ed0:	3603      	adds	r6, #3
	SX127X_SetNSS(module, 0);
 8005ed2:	f7ff ff0f 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8005ed6:	b2f6      	uxtb	r6, r6
	SX127X_SPICommand(module, addr | 0x80);
 8005ed8:	219e      	movs	r1, #158	; 0x9e
 8005eda:	4620      	mov	r0, r4
 8005edc:	f7ff ff24 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005ee0:	4631      	mov	r1, r6
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f7ff ff20 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005ee8:	4629      	mov	r1, r5
 8005eea:	4620      	mov	r0, r4
 8005eec:	f7ff ff02 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f7ff fefe 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005ef8:	219f      	movs	r1, #159	; 0x9f
 8005efa:	4620      	mov	r0, r4
 8005efc:	f7ff ff14 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005f00:	21ff      	movs	r1, #255	; 0xff
 8005f02:	4620      	mov	r0, r4
 8005f04:	f7ff ff10 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005f08:	4629      	mov	r1, r5
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f7ff fef2 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8005f10:	89a6      	ldrh	r6, [r4, #12]
	SX127X_SetNSS(module, 0);
 8005f12:	4639      	mov	r1, r7
 8005f14:	4620      	mov	r0, r4
 8005f16:	f7ff feed 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8005f1a:	0a36      	lsrs	r6, r6, #8
	SX127X_SPICommand(module, addr | 0x80);
 8005f1c:	21a0      	movs	r1, #160	; 0xa0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f7ff ff02 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005f24:	4631      	mov	r1, r6
 8005f26:	4620      	mov	r0, r4
 8005f28:	f7ff fefe 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4620      	mov	r0, r4
 8005f30:	f7ff fee0 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8005f34:	7b26      	ldrb	r6, [r4, #12]
	SX127X_SetNSS(module, 0);
 8005f36:	4639      	mov	r1, r7
 8005f38:	4620      	mov	r0, r4
 8005f3a:	f7ff fedb 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005f3e:	21a1      	movs	r1, #161	; 0xa1
 8005f40:	4620      	mov	r0, r4
 8005f42:	f7ff fef1 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005f46:	4631      	mov	r1, r6
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f7ff feed 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005f4e:	4629      	mov	r1, r5
 8005f50:	4620      	mov	r0, r4
 8005f52:	f7ff fecf 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8005f56:	7a26      	ldrb	r6, [r4, #8]
	SX127X_SetNSS(module, 0);
 8005f58:	4639      	mov	r1, r7
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff feca 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005f60:	21a2      	movs	r1, #162	; 0xa2
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7ff fee0 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005f68:	4631      	mov	r1, r6
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7ff fedc 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005f70:	4629      	mov	r1, r5
 8005f72:	4620      	mov	r0, r4
 8005f74:	f7ff febe 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8005f78:	7ba6      	ldrb	r6, [r4, #14]
	SX127X_SetNSS(module, 0);
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f7ff feb9 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005f82:	21b9      	movs	r1, #185	; 0xb9
 8005f84:	4620      	mov	r0, r4
 8005f86:	f7ff fecf 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005f8a:	4631      	mov	r1, r6
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff fecb 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005f92:	4629      	mov	r1, r5
 8005f94:	4620      	mov	r0, r4
 8005f96:	f7ff fead 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr);
 8005f9a:	2142      	movs	r1, #66	; 0x42
 8005f9c:	4620      	mov	r0, r4
	module->readBytes = 0;
 8005f9e:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
	SX127X_SPICommand(module, addr);
 8005fa2:	f7ff fec1 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	f7ff fed6 	bl	8005d58 <SX127X_SPIReadByte>
 8005fac:	4606      	mov	r6, r0
	SX127X_SetNSS(module, 1);
 8005fae:	4629      	mov	r1, r5
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff fe9f 	bl	8005cf4 <SX127X_SetNSS>
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8005fb6:	79a3      	ldrb	r3, [r4, #6]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8005fb8:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8005fbc:	2b09      	cmp	r3, #9
		if (module->frequency > SX127X_FREQ_820MHZ
 8005fbe:	6823      	ldr	r3, [r4, #0]
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8005fc0:	d025      	beq.n	800600e <SX127X_config+0x282>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005fc2:	4a3c      	ldr	r2, [pc, #240]	; (80060b4 <SX127X_config+0x328>)
	SX127X_SetNSS(module, 0);
 8005fc4:	2100      	movs	r1, #0
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005fc6:	4293      	cmp	r3, r2
	SX127X_SetNSS(module, 0);
 8005fc8:	4620      	mov	r0, r4
	if (module->frequency < SX127X_FREQ_525MHZ)
 8005fca:	d818      	bhi.n	8005ffe <SX127X_config+0x272>
	SX127X_SetNSS(module, 0);
 8005fcc:	f7ff fe92 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005fd0:	2181      	movs	r1, #129	; 0x81
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	f7ff fea8 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005fd8:	2189      	movs	r1, #137	; 0x89
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f7ff fea4 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	f7ff fe86 	bl	8005cf4 <SX127X_SetNSS>
	module->status = STANDBY;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	7423      	strb	r3, [r4, #16]
}
 8005fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SX127X_SetNSS(module, 0);
 8005fee:	f7ff fe81 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8005ff2:	2181      	movs	r1, #129	; 0x81
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	f7ff fe97 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8005ffa:	2180      	movs	r1, #128	; 0x80
 8005ffc:	e6d6      	b.n	8005dac <SX127X_config+0x20>
	SX127X_SetNSS(module, 0);
 8005ffe:	f7ff fe79 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006002:	2181      	movs	r1, #129	; 0x81
 8006004:	4620      	mov	r0, r4
 8006006:	f7ff fe8f 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800600a:	2181      	movs	r1, #129	; 0x81
 800600c:	e7e5      	b.n	8005fda <SX127X_config+0x24e>
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 800600e:	2e12      	cmp	r6, #18
 8006010:	d1d7      	bne.n	8005fc2 <SX127X_config+0x236>
		if (module->frequency > SX127X_FREQ_820MHZ
 8006012:	4929      	ldr	r1, [pc, #164]	; (80060b8 <SX127X_config+0x32c>)
				&& module->frequency < SX127X_FREQ_1020MHZ)
 8006014:	f5a3 024d 	sub.w	r2, r3, #13434880	; 0xcd0000
 8006018:	3a23      	subs	r2, #35	; 0x23
		if (module->frequency > SX127X_FREQ_820MHZ
 800601a:	428a      	cmp	r2, r1
 800601c:	d927      	bls.n	800606e <SX127X_config+0x2e2>
		if (module->frequency > SX127X_FREQ_410MHZ
 800601e:	4927      	ldr	r1, [pc, #156]	; (80060bc <SX127X_config+0x330>)
				&& module->frequency < SX127X_FREQ_525MHZ)
 8006020:	f5a3 02cd 	sub.w	r2, r3, #6717440	; 0x668000
 8006024:	3a12      	subs	r2, #18
		if (module->frequency > SX127X_FREQ_410MHZ
 8006026:	428a      	cmp	r2, r1
 8006028:	d8cb      	bhi.n	8005fc2 <SX127X_config+0x236>
	SX127X_SetNSS(module, 0);
 800602a:	2100      	movs	r1, #0
 800602c:	4620      	mov	r0, r4
 800602e:	f7ff fe61 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006032:	21b6      	movs	r1, #182	; 0xb6
 8006034:	4620      	mov	r0, r4
 8006036:	f7ff fe77 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800603a:	2103      	movs	r1, #3
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff fe73 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006042:	2101      	movs	r1, #1
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff fe55 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 800604a:	2100      	movs	r1, #0
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff fe51 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006052:	21ba      	movs	r1, #186	; 0xba
 8006054:	4620      	mov	r0, r4
 8006056:	f7ff fe67 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800605a:	217f      	movs	r1, #127	; 0x7f
 800605c:	4620      	mov	r0, r4
 800605e:	f7ff fe63 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006062:	2101      	movs	r1, #1
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff fe45 	bl	8005cf4 <SX127X_SetNSS>
 800606a:	6823      	ldr	r3, [r4, #0]
}
 800606c:	e7a9      	b.n	8005fc2 <SX127X_config+0x236>
	SX127X_SetNSS(module, 0);
 800606e:	4639      	mov	r1, r7
 8006070:	4620      	mov	r0, r4
 8006072:	f7ff fe3f 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006076:	21b6      	movs	r1, #182	; 0xb6
 8006078:	4620      	mov	r0, r4
 800607a:	f7ff fe55 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800607e:	2102      	movs	r1, #2
 8006080:	4620      	mov	r0, r4
 8006082:	f7ff fe51 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006086:	4629      	mov	r1, r5
 8006088:	4620      	mov	r0, r4
 800608a:	f7ff fe33 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 800608e:	4639      	mov	r1, r7
 8006090:	4620      	mov	r0, r4
 8006092:	f7ff fe2f 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006096:	21ba      	movs	r1, #186	; 0xba
 8006098:	4620      	mov	r0, r4
 800609a:	f7ff fe45 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800609e:	2164      	movs	r1, #100	; 0x64
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7ff fe41 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80060a6:	4629      	mov	r1, r5
 80060a8:	4620      	mov	r0, r4
 80060aa:	f7ff fe23 	bl	8005cf4 <SX127X_SetNSS>
 80060ae:	6823      	ldr	r3, [r4, #0]
}
 80060b0:	e7b5      	b.n	800601e <SX127X_config+0x292>
 80060b2:	bf00      	nop
 80060b4:	00834015 	.word	0x00834015
 80060b8:	00320006 	.word	0x00320006
 80060bc:	001cc003 	.word	0x001cc003

080060c0 <SX127X_defaultConfig>:
	module->len = 3;
 80060c0:	f240 1103 	movw	r1, #259	; 0x103
	module->implicitHeader = 1;
 80060c4:	2201      	movs	r2, #1
{
 80060c6:	b430      	push	{r4, r5}
	module->preamble = 5;
 80060c8:	4b04      	ldr	r3, [pc, #16]	; (80060dc <SX127X_defaultConfig+0x1c>)
	module->frequency = SX127X_FREQ_DEFAULT;
 80060ca:	4d05      	ldr	r5, [pc, #20]	; (80060e0 <SX127X_defaultConfig+0x20>)
	module->power = SX127X_POWER_20DBM;
 80060cc:	4c05      	ldr	r4, [pc, #20]	; (80060e4 <SX127X_defaultConfig+0x24>)
	module->len = 3;
 80060ce:	8101      	strh	r1, [r0, #8]
	module->power = SX127X_POWER_20DBM;
 80060d0:	e9c0 5400 	strd	r5, r4, [r0]
}
 80060d4:	bc30      	pop	{r4, r5}
	module->implicitHeader = 1;
 80060d6:	7282      	strb	r2, [r0, #10]
	module->preamble = 5;
 80060d8:	60c3      	str	r3, [r0, #12]
}
 80060da:	4770      	bx	lr
 80060dc:	01010005 	.word	0x01010005
 80060e0:	00d94024 	.word	0x00d94024
 80060e4:	04070c14 	.word	0x04070c14

080060e8 <SX127X_PortConfig>:
{
 80060e8:	b082      	sub	sp, #8
 80060ea:	b430      	push	{r4, r5}
 80060ec:	b082      	sub	sp, #8
 80060ee:	4604      	mov	r4, r0
 80060f0:	4668      	mov	r0, sp
 80060f2:	e880 0006 	stmia.w	r0, {r1, r2}
 80060f6:	9305      	str	r3, [sp, #20]
 80060f8:	9d07      	ldr	r5, [sp, #28]
	module->reset = reset;
 80060fa:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80060fe:	c803      	ldmia	r0, {r0, r1}
 8006100:	e883 0005 	stmia.w	r3, {r0, r2}
	module->nss = nss;
 8006104:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8006108:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800610c:	e883 0003 	stmia.w	r3, {r0, r1}
	module->spi = hspi;
 8006110:	6765      	str	r5, [r4, #116]	; 0x74
}
 8006112:	b002      	add	sp, #8
 8006114:	bc30      	pop	{r4, r5}
 8006116:	b002      	add	sp, #8
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop

0800611c <SX127X_startRx>:
{
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
}

int SX127X_startRx(SX127X_t *module, uint32_t timeout)
{
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	4604      	mov	r4, r0
 8006120:	460e      	mov	r6, r1
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8006122:	f7ff fe33 	bl	8005d8c <SX127X_config>
	SX127X_SetNSS(module, 0);
 8006126:	4620      	mov	r0, r4
 8006128:	2100      	movs	r1, #0
 800612a:	f7ff fde3 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 800612e:	4620      	mov	r0, r4
 8006130:	21cd      	movs	r1, #205	; 0xcd
 8006132:	f7ff fdf9 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006136:	4620      	mov	r0, r4
 8006138:	2184      	movs	r1, #132	; 0x84
 800613a:	f7ff fdf5 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 800613e:	4620      	mov	r0, r4
 8006140:	2101      	movs	r1, #1
 8006142:	f7ff fdd7 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8006146:	4620      	mov	r0, r4
 8006148:	2100      	movs	r1, #0
 800614a:	f7ff fdd3 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 800614e:	4620      	mov	r0, r4
 8006150:	21a4      	movs	r1, #164	; 0xa4
 8006152:	f7ff fde9 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006156:	4620      	mov	r0, r4
 8006158:	2100      	movs	r1, #0
 800615a:	f7ff fde5 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 800615e:	4620      	mov	r0, r4
 8006160:	2101      	movs	r1, #1
 8006162:	f7ff fdc7 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8006166:	4620      	mov	r0, r4
 8006168:	2100      	movs	r1, #0
 800616a:	f7ff fdc3 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 800616e:	4620      	mov	r0, r4
 8006170:	2192      	movs	r1, #146	; 0x92
 8006172:	f7ff fdd9 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006176:	4620      	mov	r0, r4
 8006178:	21ff      	movs	r1, #255	; 0xff
 800617a:	f7ff fdd5 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 800617e:	4620      	mov	r0, r4
 8006180:	2101      	movs	r1, #1
 8006182:	f7ff fdb7 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
	SX127X_clearIrq(module);
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8006186:	7a25      	ldrb	r5, [r4, #8]
	SX127X_SetNSS(module, 0);
 8006188:	4620      	mov	r0, r4
 800618a:	2100      	movs	r1, #0
 800618c:	f7ff fdb2 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006190:	4620      	mov	r0, r4
 8006192:	21a2      	movs	r1, #162	; 0xa2
 8006194:	f7ff fdc8 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006198:	4629      	mov	r1, r5
 800619a:	4620      	mov	r0, r4
 800619c:	f7ff fdc4 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80061a0:	4620      	mov	r0, r4
 80061a2:	2101      	movs	r1, #1
 80061a4:	f7ff fda6 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr);
 80061a8:	210f      	movs	r1, #15
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7ff fdbc 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80061b0:	4620      	mov	r0, r4
 80061b2:	f7ff fdd1 	bl	8005d58 <SX127X_SPIReadByte>
 80061b6:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 80061b8:	2101      	movs	r1, #1
 80061ba:	4620      	mov	r0, r4
 80061bc:	f7ff fd9a 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 80061c0:	4620      	mov	r0, r4
 80061c2:	2100      	movs	r1, #0
 80061c4:	f7ff fd96 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 80061c8:	4620      	mov	r0, r4
 80061ca:	218d      	movs	r1, #141	; 0x8d
 80061cc:	f7ff fdac 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 80061d0:	4629      	mov	r1, r5
 80061d2:	4620      	mov	r0, r4
 80061d4:	f7ff fda8 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80061d8:	4620      	mov	r0, r4
 80061da:	2101      	movs	r1, #1
 80061dc:	f7ff fd8a 	bl	8005cf4 <SX127X_SetNSS>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
	if (module->frequency < SX127X_FREQ_525MHZ)
 80061e0:	6822      	ldr	r2, [r4, #0]
 80061e2:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <SX127X_startRx+0x144>)
	SX127X_SetNSS(module, 0);
 80061e4:	2100      	movs	r1, #0
	if (module->frequency < SX127X_FREQ_525MHZ)
 80061e6:	429a      	cmp	r2, r3
	SX127X_SetNSS(module, 0);
 80061e8:	4620      	mov	r0, r4
	if (module->frequency < SX127X_FREQ_525MHZ)
 80061ea:	d828      	bhi.n	800623e <SX127X_startRx+0x122>
	SX127X_SetNSS(module, 0);
 80061ec:	f7ff fd82 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 80061f0:	2181      	movs	r1, #129	; 0x81
 80061f2:	4620      	mov	r0, r4
 80061f4:	f7ff fd98 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 80061f8:	218d      	movs	r1, #141	; 0x8d
 80061fa:	4620      	mov	r0, r4
 80061fc:	f7ff fd94 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006200:	2101      	movs	r1, #1
 8006202:	4620      	mov	r0, r4
 8006204:	f7ff fd76 	bl	8005cf4 <SX127X_SetNSS>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
	module->readBytes = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 800620e:	e004      	b.n	800621a <SX127X_startRx+0xfe>
		{	//Rx-on going RegModemStat
			module->status = RX;
			return 1;
		}

		if (--timeout == 0)
 8006210:	3e01      	subs	r6, #1
 8006212:	d01c      	beq.n	800624e <SX127X_startRx+0x132>
			SX127X_Reset(module);
			SX127X_config(module);
			return 0;
		}

		HAL_Delay(1);
 8006214:	2001      	movs	r0, #1
 8006216:	f000 ffa7 	bl	8007168 <HAL_Delay>
	SX127X_SPICommand(module, addr);
 800621a:	2118      	movs	r1, #24
 800621c:	4620      	mov	r0, r4
 800621e:	f7ff fd83 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8006222:	4620      	mov	r0, r4
 8006224:	f7ff fd98 	bl	8005d58 <SX127X_SPIReadByte>
 8006228:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 800622a:	2101      	movs	r1, #1
 800622c:	4620      	mov	r0, r4
 800622e:	f7ff fd61 	bl	8005cf4 <SX127X_SetNSS>
		if (status & 0x04)
 8006232:	076b      	lsls	r3, r5, #29
 8006234:	d5ec      	bpl.n	8006210 <SX127X_startRx+0xf4>
			module->status = RX;
 8006236:	2304      	movs	r3, #4
 8006238:	7423      	strb	r3, [r4, #16]
			return 1;
 800623a:	2001      	movs	r0, #1
	}
}
 800623c:	bd70      	pop	{r4, r5, r6, pc}
	SX127X_SetNSS(module, 0);
 800623e:	f7ff fd59 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006242:	2181      	movs	r1, #129	; 0x81
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff fd6f 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800624a:	2185      	movs	r1, #133	; 0x85
 800624c:	e7d5      	b.n	80061fa <SX127X_startRx+0xde>
			SX127X_Reset(module);
 800624e:	4620      	mov	r0, r4
 8006250:	f7ff fd56 	bl	8005d00 <SX127X_Reset>
			SX127X_config(module);
 8006254:	4620      	mov	r0, r4
 8006256:	f7ff fd99 	bl	8005d8c <SX127X_config>
			return 0;
 800625a:	4630      	mov	r0, r6
}
 800625c:	bd70      	pop	{r4, r5, r6, pc}
 800625e:	bf00      	nop
 8006260:	00834015 	.word	0x00834015

08006264 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module)
{
 8006264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006266:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8006268:	f100 061d 	add.w	r6, r0, #29
 800626c:	2220      	movs	r2, #32
 800626e:	2100      	movs	r1, #0
 8006270:	4630      	mov	r0, r6
 8006272:	f004 fa25 	bl	800a6c0 <memset>
	SX127X_SPICommand(module, addr);
 8006276:	2110      	movs	r1, #16
 8006278:	4620      	mov	r0, r4
 800627a:	f7ff fd55 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 800627e:	4620      	mov	r0, r4
 8006280:	f7ff fd6a 	bl	8005d58 <SX127X_SPIReadByte>
 8006284:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8006286:	2101      	movs	r1, #1
 8006288:	4620      	mov	r0, r4
 800628a:	f7ff fd33 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 800628e:	4620      	mov	r0, r4
 8006290:	2100      	movs	r1, #0
 8006292:	f7ff fd2f 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006296:	4620      	mov	r0, r4
 8006298:	218d      	movs	r1, #141	; 0x8d
 800629a:	f7ff fd45 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800629e:	4629      	mov	r1, r5
 80062a0:	4620      	mov	r0, r4
 80062a2:	f7ff fd41 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80062a6:	4620      	mov	r0, r4
 80062a8:	2101      	movs	r1, #1
 80062aa:	f7ff fd23 	bl	8005cf4 <SX127X_SetNSS>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
	if (module->sf == SX127X_LORA_SF_6)
 80062ae:	7963      	ldrb	r3, [r4, #5]
 80062b0:	2b06      	cmp	r3, #6
 80062b2:	d11e      	bne.n	80062f2 <SX127X_receive+0x8e>
		packet_size = module->len;
 80062b4:	7a25      	ldrb	r5, [r4, #8]
	if (length <= 1)
 80062b6:	2d01      	cmp	r5, #1
 80062b8:	d917      	bls.n	80062ea <SX127X_receive+0x86>
		SX127X_SetNSS(module, 0);
 80062ba:	2100      	movs	r1, #0
 80062bc:	4620      	mov	r0, r4
 80062be:	f7ff fd19 	bl	8005cf4 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 80062c2:	2100      	movs	r1, #0
 80062c4:	4620      	mov	r0, r4
 80062c6:	f7ff fd2f 	bl	8005d28 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 80062ca:	1e6b      	subs	r3, r5, #1
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	441e      	add	r6, r3
 80062d0:	f104 071c 	add.w	r7, r4, #28
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 80062d4:	4620      	mov	r0, r4
 80062d6:	f7ff fd3f 	bl	8005d58 <SX127X_SPIReadByte>
 80062da:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++)
 80062de:	42b7      	cmp	r7, r6
 80062e0:	d1f8      	bne.n	80062d4 <SX127X_receive+0x70>
		SX127X_SetNSS(module, 1);
 80062e2:	2101      	movs	r1, #1
 80062e4:	4620      	mov	r0, r4
 80062e6:	f7ff fd05 	bl	8005cf4 <SX127X_SetNSS>
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
	module->readBytes = packet_size;
 80062ea:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
	return module->readBytes;
}
 80062ee:	4628      	mov	r0, r5
 80062f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SX127X_SPICommand(module, addr);
 80062f2:	2113      	movs	r1, #19
 80062f4:	4620      	mov	r0, r4
 80062f6:	f7ff fd17 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80062fa:	4620      	mov	r0, r4
 80062fc:	f7ff fd2c 	bl	8005d58 <SX127X_SPIReadByte>
	SX127X_SetNSS(module, 1);
 8006300:	2101      	movs	r1, #1
	tmp = SX127X_SPIReadByte(module);
 8006302:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8006304:	4620      	mov	r0, r4
 8006306:	f7ff fcf5 	bl	8005cf4 <SX127X_SetNSS>
	return tmp;
 800630a:	e7d4      	b.n	80062b6 <SX127X_receive+0x52>

0800630c <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module)
{
 800630c:	b570      	push	{r4, r5, r6, lr}
 800630e:	4604      	mov	r4, r0
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8006310:	f7ff fd3c 	bl	8005d8c <SX127X_config>
	module->status = TX;
 8006314:	2303      	movs	r3, #3
	SX127X_SetNSS(module, 0);
 8006316:	4620      	mov	r0, r4
	module->status = TX;
 8006318:	7423      	strb	r3, [r4, #16]
	SX127X_SetNSS(module, 0);
 800631a:	2100      	movs	r1, #0
 800631c:	f7ff fcea 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006320:	4620      	mov	r0, r4
 8006322:	21cd      	movs	r1, #205	; 0xcd
 8006324:	f7ff fd00 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006328:	4620      	mov	r0, r4
 800632a:	2187      	movs	r1, #135	; 0x87
 800632c:	f7ff fcfc 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006330:	4620      	mov	r0, r4
 8006332:	2101      	movs	r1, #1
 8006334:	f7ff fcde 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8006338:	4620      	mov	r0, r4
 800633a:	2100      	movs	r1, #0
 800633c:	f7ff fcda 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006340:	4620      	mov	r0, r4
 8006342:	21a4      	movs	r1, #164	; 0xa4
 8006344:	f7ff fcf0 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006348:	4620      	mov	r0, r4
 800634a:	2100      	movs	r1, #0
 800634c:	f7ff fcec 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006350:	4620      	mov	r0, r4
 8006352:	2101      	movs	r1, #1
 8006354:	f7ff fcce 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 8006358:	4620      	mov	r0, r4
 800635a:	2100      	movs	r1, #0
 800635c:	f7ff fcca 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006360:	4620      	mov	r0, r4
 8006362:	2192      	movs	r1, #146	; 0x92
 8006364:	f7ff fce0 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006368:	4620      	mov	r0, r4
 800636a:	21ff      	movs	r1, #255	; 0xff
 800636c:	f7ff fcdc 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006370:	4620      	mov	r0, r4
 8006372:	2101      	movs	r1, #1
 8006374:	f7ff fcbe 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
	SX127X_clearIrq(module);
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8006378:	7a25      	ldrb	r5, [r4, #8]
	SX127X_SetNSS(module, 0);
 800637a:	4620      	mov	r0, r4
 800637c:	2100      	movs	r1, #0
 800637e:	f7ff fcb9 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006382:	4620      	mov	r0, r4
 8006384:	21a2      	movs	r1, #162	; 0xa2
 8006386:	f7ff fccf 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800638a:	4629      	mov	r1, r5
 800638c:	4620      	mov	r0, r4
 800638e:	f7ff fccb 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006392:	4620      	mov	r0, r4
 8006394:	2101      	movs	r1, #1
 8006396:	f7ff fcad 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr);
 800639a:	210e      	movs	r1, #14
 800639c:	4620      	mov	r0, r4
 800639e:	f7ff fcc3 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7ff fcd8 	bl	8005d58 <SX127X_SPIReadByte>
 80063a8:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 80063aa:	2101      	movs	r1, #1
 80063ac:	4620      	mov	r0, r4
 80063ae:	f7ff fca1 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SetNSS(module, 0);
 80063b2:	4620      	mov	r0, r4
 80063b4:	2100      	movs	r1, #0
 80063b6:	f7ff fc9d 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 80063ba:	4620      	mov	r0, r4
 80063bc:	218d      	movs	r1, #141	; 0x8d
 80063be:	f7ff fcb3 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 80063c2:	4629      	mov	r1, r5
 80063c4:	4620      	mov	r0, r4
 80063c6:	f7ff fcaf 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80063ca:	4620      	mov	r0, r4
 80063cc:	2101      	movs	r1, #1
 80063ce:	f7ff fc91 	bl	8005cf4 <SX127X_SetNSS>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 80063d2:	7a25      	ldrb	r5, [r4, #8]
	if (length <= 1)
 80063d4:	2d01      	cmp	r5, #1
 80063d6:	d919      	bls.n	800640c <SX127X_startTransmission+0x100>
		SX127X_SetNSS(module, 0);
 80063d8:	2100      	movs	r1, #0
 80063da:	4620      	mov	r0, r4
 80063dc:	f7ff fc8a 	bl	8005cf4 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 80063e0:	3d01      	subs	r5, #1
 80063e2:	2180      	movs	r1, #128	; 0x80
 80063e4:	4620      	mov	r0, r4
 80063e6:	f7ff fc9f 	bl	8005d28 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 80063ea:	b2ed      	uxtb	r5, r5
 80063ec:	f104 033d 	add.w	r3, r4, #61	; 0x3d
 80063f0:	441d      	add	r5, r3
 80063f2:	f104 063c 	add.w	r6, r4, #60	; 0x3c
			SX127X_SPICommand(module, *(txBuf + i));
 80063f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063fa:	4620      	mov	r0, r4
 80063fc:	f7ff fc94 	bl	8005d28 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8006400:	42ae      	cmp	r6, r5
 8006402:	d1f8      	bne.n	80063f6 <SX127X_startTransmission+0xea>
		SX127X_SetNSS(module, 1);
 8006404:	2101      	movs	r1, #1
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff fc74 	bl	8005cf4 <SX127X_SetNSS>
	module->lastTransTick = HAL_GetTick();
 800640c:	f000 fea6 	bl	800715c <HAL_GetTick>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <SX127X_startTransmission+0x148>)
 8006412:	6822      	ldr	r2, [r4, #0]
	module->lastTransTick = HAL_GetTick();
 8006414:	6160      	str	r0, [r4, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8006416:	429a      	cmp	r2, r3
	SX127X_SetNSS(module, 0);
 8006418:	f04f 0100 	mov.w	r1, #0
 800641c:	4620      	mov	r0, r4
	if (module->frequency < SX127X_FREQ_525MHZ)
 800641e:	d810      	bhi.n	8006442 <SX127X_startTransmission+0x136>
	SX127X_SetNSS(module, 0);
 8006420:	f7ff fc68 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006424:	2181      	movs	r1, #129	; 0x81
 8006426:	4620      	mov	r0, r4
 8006428:	f7ff fc7e 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800642c:	218b      	movs	r1, #139	; 0x8b
 800642e:	4620      	mov	r0, r4
 8006430:	f7ff fc7a 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006434:	2101      	movs	r1, #1
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff fc5c 	bl	8005cf4 <SX127X_SetNSS>
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
	module->TXrequest = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	7463      	strb	r3, [r4, #17]

}
 8006440:	bd70      	pop	{r4, r5, r6, pc}
	SX127X_SetNSS(module, 0);
 8006442:	f7ff fc57 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006446:	2181      	movs	r1, #129	; 0x81
 8006448:	4620      	mov	r0, r4
 800644a:	f7ff fc6d 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800644e:	2183      	movs	r1, #131	; 0x83
 8006450:	e7ed      	b.n	800642e <SX127X_startTransmission+0x122>
 8006452:	bf00      	nop
 8006454:	00834015 	.word	0x00834015

08006458 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght)
{
 8006458:	4603      	mov	r3, r0
	if (module->TXrequest == 0 && module->status != TX)
 800645a:	7c40      	ldrb	r0, [r0, #17]
 800645c:	b930      	cbnz	r0, 800646c <SX127X_transmitAsync+0x14>
 800645e:	7c1a      	ldrb	r2, [r3, #16]
 8006460:	2a03      	cmp	r2, #3
 8006462:	d003      	beq.n	800646c <SX127X_transmitAsync+0x14>
	{
		module->len = lenght;
		module->TXrequest = 1;
 8006464:	2201      	movs	r2, #1
		module->len = lenght;
 8006466:	7219      	strb	r1, [r3, #8]
		module->TXrequest = 1;
 8006468:	745a      	strb	r2, [r3, #17]

		return HAL_OK;
 800646a:	4770      	bx	lr
	}
	else
		return HAL_ERROR;
 800646c:	2001      	movs	r0, #1
}
 800646e:	4770      	bx	lr

08006470 <SX127X_Routine>:

void SX127X_Routine(SX127X_t *module)
{
 8006470:	b538      	push	{r3, r4, r5, lr}
 8006472:	4604      	mov	r4, r0
	SX127X_SPICommand(module, addr);
 8006474:	2118      	movs	r1, #24
 8006476:	f7ff fc57 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 800647a:	4620      	mov	r0, r4
 800647c:	f7ff fc6c 	bl	8005d58 <SX127X_SPIReadByte>
 8006480:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8006482:	2101      	movs	r1, #1
 8006484:	4620      	mov	r0, r4
 8006486:	f7ff fc35 	bl	8005cf4 <SX127X_SetNSS>
		return -ret;
}

void SX127X_readStatus(SX127X_t *module)
{
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 800648a:	f884 505f 	strb.w	r5, [r4, #95]	; 0x5f
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 800648e:	f015 0501 	ands.w	r5, r5, #1
 8006492:	d16a      	bne.n	800656a <SX127X_Routine+0xfa>
	{
		module->signalDetected = true;
		module->lastSignalTick = HAL_GetTick();
	}
	else
		module->signalDetected = false;
 8006494:	7725      	strb	r5, [r4, #28]
	SX127X_SPICommand(module, addr);
 8006496:	2112      	movs	r1, #18
 8006498:	4620      	mov	r0, r4
 800649a:	f7ff fc45 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 800649e:	4620      	mov	r0, r4
 80064a0:	f7ff fc5a 	bl	8005d58 <SX127X_SPIReadByte>
 80064a4:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 80064a6:	2101      	movs	r1, #1
 80064a8:	4620      	mov	r0, r4
 80064aa:	f7ff fc23 	bl	8005cf4 <SX127X_SetNSS>
	if (module->status == UNINITIALISED)
 80064ae:	7c23      	ldrb	r3, [r4, #16]
}

void SX127X_readIrq(SX127X_t *module)
{
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 80064b0:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	if (module->status == UNINITIALISED)
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d053      	beq.n	8006560 <SX127X_Routine+0xf0>
	if ((module->status == SLEEP || module->status == STANDBY)
 80064b8:	3b01      	subs	r3, #1
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d930      	bls.n	8006520 <SX127X_Routine+0xb0>
	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 80064be:	7c63      	ldrb	r3, [r4, #17]
 80064c0:	b11b      	cbz	r3, 80064ca <SX127X_Routine+0x5a>
 80064c2:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 80064c6:	07d9      	lsls	r1, r3, #31
 80064c8:	d555      	bpl.n	8006576 <SX127X_Routine+0x106>
	SX127X_SPICommand(module, addr);
 80064ca:	2112      	movs	r1, #18
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff fc2b 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80064d2:	4620      	mov	r0, r4
 80064d4:	f7ff fc40 	bl	8005d58 <SX127X_SPIReadByte>
 80064d8:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 80064da:	2101      	movs	r1, #1
 80064dc:	4620      	mov	r0, r4
 80064de:	f7ff fc09 	bl	8005cf4 <SX127X_SetNSS>
	if (module->irq & IRQ_TX_DONE)
 80064e2:	072a      	lsls	r2, r5, #28
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 80064e4:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
	if (module->irq & IRQ_TX_DONE)
 80064e8:	d423      	bmi.n	8006532 <SX127X_Routine+0xc2>
	if (module->irq & IRQ_RX_DONE)
 80064ea:	066b      	lsls	r3, r5, #25
 80064ec:	d400      	bmi.n	80064f0 <SX127X_Routine+0x80>
}
 80064ee:	bd38      	pop	{r3, r4, r5, pc}
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 80064f0:	f3c5 1540 	ubfx	r5, r5, #5, #1
		SX127X_receive(module);
 80064f4:	4620      	mov	r0, r4
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 80064f6:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
		SX127X_receive(module);
 80064fa:	f7ff feb3 	bl	8006264 <SX127X_receive>
	SX127X_SetNSS(module, 0);
 80064fe:	4620      	mov	r0, r4
 8006500:	2100      	movs	r1, #0
 8006502:	f7ff fbf7 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 8006506:	4620      	mov	r0, r4
 8006508:	2192      	movs	r1, #146	; 0x92
 800650a:	f7ff fc0d 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 800650e:	4620      	mov	r0, r4
 8006510:	21ff      	movs	r1, #255	; 0xff
 8006512:	f7ff fc09 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 8006516:	4620      	mov	r0, r4
 8006518:	2101      	movs	r1, #1
 800651a:	f7ff fbeb 	bl	8005cf4 <SX127X_SetNSS>
}
 800651e:	bd38      	pop	{r3, r4, r5, pc}
			&& module->alwaysRX)
 8006520:	7be3      	ldrb	r3, [r4, #15]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0cb      	beq.n	80064be <SX127X_Routine+0x4e>
		SX127X_startRx(module, 1000);
 8006526:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800652a:	4620      	mov	r0, r4
 800652c:	f7ff fdf6 	bl	800611c <SX127X_startRx>
 8006530:	e7c5      	b.n	80064be <SX127X_Routine+0x4e>
	SX127X_SetNSS(module, 0);
 8006532:	2100      	movs	r1, #0
 8006534:	4620      	mov	r0, r4
 8006536:	f7ff fbdd 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 800653a:	2192      	movs	r1, #146	; 0x92
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff fbf3 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8006542:	21ff      	movs	r1, #255	; 0xff
 8006544:	4620      	mov	r0, r4
 8006546:	f7ff fbef 	bl	8005d28 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 800654a:	2101      	movs	r1, #1
 800654c:	4620      	mov	r0, r4
 800654e:	f7ff fbd1 	bl	8005cf4 <SX127X_SetNSS>
		SX127X_startRx(module, 100);
 8006552:	2164      	movs	r1, #100	; 0x64
 8006554:	4620      	mov	r0, r4
 8006556:	f7ff fde1 	bl	800611c <SX127X_startRx>
 800655a:	f894 505e 	ldrb.w	r5, [r4, #94]	; 0x5e
 800655e:	e7c4      	b.n	80064ea <SX127X_Routine+0x7a>
		SX127X_config(module);
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff fc13 	bl	8005d8c <SX127X_config>
 8006566:	7c23      	ldrb	r3, [r4, #16]
 8006568:	e7a6      	b.n	80064b8 <SX127X_Routine+0x48>
		module->signalDetected = true;
 800656a:	2301      	movs	r3, #1
 800656c:	7723      	strb	r3, [r4, #28]
		module->lastSignalTick = HAL_GetTick();
 800656e:	f000 fdf5 	bl	800715c <HAL_GetTick>
 8006572:	61a0      	str	r0, [r4, #24]
}
 8006574:	e78f      	b.n	8006496 <SX127X_Routine+0x26>
		SX127X_startTransmission(module);
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff fec8 	bl	800630c <SX127X_startTransmission>
 800657c:	e7a5      	b.n	80064ca <SX127X_Routine+0x5a>
 800657e:	bf00      	nop

08006580 <SX127X_RSSI>:
{
 8006580:	b538      	push	{r3, r4, r5, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8006582:	6802      	ldr	r2, [r0, #0]
 8006584:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <SX127X_RSSI+0x48>)
{
 8006586:	4605      	mov	r5, r0
	if (module->frequency < SX127X_FREQ_525MHZ)
 8006588:	429a      	cmp	r2, r3
	SX127X_SPICommand(module, addr);
 800658a:	f04f 011b 	mov.w	r1, #27
	if (module->frequency < SX127X_FREQ_525MHZ)
 800658e:	d80d      	bhi.n	80065ac <SX127X_RSSI+0x2c>
	SX127X_SPICommand(module, addr);
 8006590:	f7ff fbca 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8006594:	4628      	mov	r0, r5
 8006596:	f7ff fbdf 	bl	8005d58 <SX127X_SPIReadByte>
 800659a:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 800659c:	2101      	movs	r1, #1
 800659e:	4628      	mov	r0, r5
 80065a0:	f7ff fba8 	bl	8005cf4 <SX127X_SetNSS>
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 164;
 80065a4:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
 80065a8:	b200      	sxth	r0, r0
}
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
	SX127X_SPICommand(module, addr);
 80065ac:	f7ff fbbc 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80065b0:	4628      	mov	r0, r5
 80065b2:	f7ff fbd1 	bl	8005d58 <SX127X_SPIReadByte>
 80065b6:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 80065b8:	2101      	movs	r1, #1
 80065ba:	4628      	mov	r0, r5
 80065bc:	f7ff fb9a 	bl	8005cf4 <SX127X_SetNSS>
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 157;
 80065c0:	f1a4 009d 	sub.w	r0, r4, #157	; 0x9d
 80065c4:	b200      	sxth	r0, r0
}
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	00834015 	.word	0x00834015

080065cc <SX127X_RSSI_Pack>:
{
 80065cc:	b538      	push	{r3, r4, r5, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 80065ce:	6802      	ldr	r2, [r0, #0]
 80065d0:	4b10      	ldr	r3, [pc, #64]	; (8006614 <SX127X_RSSI_Pack+0x48>)
{
 80065d2:	4605      	mov	r5, r0
	if (module->frequency < SX127X_FREQ_525MHZ)
 80065d4:	429a      	cmp	r2, r3
	SX127X_SPICommand(module, addr);
 80065d6:	f04f 011a 	mov.w	r1, #26
	if (module->frequency < SX127X_FREQ_525MHZ)
 80065da:	d80d      	bhi.n	80065f8 <SX127X_RSSI_Pack+0x2c>
	SX127X_SPICommand(module, addr);
 80065dc:	f7ff fba4 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7ff fbb9 	bl	8005d58 <SX127X_SPIReadByte>
 80065e6:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 80065e8:	2101      	movs	r1, #1
 80065ea:	4628      	mov	r0, r5
 80065ec:	f7ff fb82 	bl	8005cf4 <SX127X_SetNSS>
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 164;
 80065f0:	f1a4 00a4 	sub.w	r0, r4, #164	; 0xa4
 80065f4:	b200      	sxth	r0, r0
}
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
	SX127X_SPICommand(module, addr);
 80065f8:	f7ff fb96 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80065fc:	4628      	mov	r0, r5
 80065fe:	f7ff fbab 	bl	8005d58 <SX127X_SPIReadByte>
 8006602:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 8006604:	2101      	movs	r1, #1
 8006606:	4628      	mov	r0, r5
 8006608:	f7ff fb74 	bl	8005cf4 <SX127X_SetNSS>
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 157;
 800660c:	f1a4 009d 	sub.w	r0, r4, #157	; 0x9d
 8006610:	b200      	sxth	r0, r0
}
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	00834015 	.word	0x00834015

08006618 <SX127X_init>:
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module)
{
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4604      	mov	r4, r0

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 800661c:	f8b0 1064 	ldrh.w	r1, [r0, #100]	; 0x64
 8006620:	2200      	movs	r2, #0
 8006622:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8006624:	f001 fcb2 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8006628:	200f      	movs	r0, #15
 800662a:	f000 fd9d 	bl	8007168 <HAL_Delay>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 800662e:	2201      	movs	r2, #1
 8006630:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8006634:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006636:	f001 fca9 	bl	8007f8c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 800663a:	200f      	movs	r0, #15
 800663c:	f000 fd94 	bl	8007168 <HAL_Delay>
	SX127X_SPICommand(module, addr);
 8006640:	2142      	movs	r1, #66	; 0x42
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff fb70 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8006648:	4620      	mov	r0, r4
 800664a:	f7ff fb85 	bl	8005d58 <SX127X_SPIReadByte>
 800664e:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8006650:	2101      	movs	r1, #1
 8006652:	4620      	mov	r0, r4
 8006654:	f7ff fb4e 	bl	8005cf4 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr);
 8006658:	2142      	movs	r1, #66	; 0x42
 800665a:	4620      	mov	r0, r4
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 800665c:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
	SX127X_SPICommand(module, addr);
 8006660:	f7ff fb62 	bl	8005d28 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff fb77 	bl	8005d58 <SX127X_SPIReadByte>
 800666a:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 800666c:	2101      	movs	r1, #1
 800666e:	4620      	mov	r0, r4
 8006670:	f7ff fb40 	bl	8005cf4 <SX127X_SetNSS>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8006674:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
}
 8006678:	bd38      	pop	{r3, r4, r5, pc}
 800667a:	bf00      	nop

0800667c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800667c:	490d      	ldr	r1, [pc, #52]	; (80066b4 <_sbrk+0x38>)
{
 800667e:	4603      	mov	r3, r0
 8006680:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006682:	4a0d      	ldr	r2, [pc, #52]	; (80066b8 <_sbrk+0x3c>)
 8006684:	4c0d      	ldr	r4, [pc, #52]	; (80066bc <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8006686:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006688:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800668a:	b120      	cbz	r0, 8006696 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800668c:	4403      	add	r3, r0
 800668e:	4293      	cmp	r3, r2
 8006690:	d807      	bhi.n	80066a2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8006692:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8006694:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8006696:	4c0a      	ldr	r4, [pc, #40]	; (80066c0 <_sbrk+0x44>)
 8006698:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800669a:	4403      	add	r3, r0
 800669c:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 800669e:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80066a0:	d9f7      	bls.n	8006692 <_sbrk+0x16>
    errno = ENOMEM;
 80066a2:	f003 ffbb 	bl	800a61c <__errno>
 80066a6:	220c      	movs	r2, #12
 80066a8:	4603      	mov	r3, r0
    return (void *)-1;
 80066aa:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 80066ae:	601a      	str	r2, [r3, #0]
}
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	bf00      	nop
 80066b4:	20000300 	.word	0x20000300
 80066b8:	20005000 	.word	0x20005000
 80066bc:	00000400 	.word	0x00000400
 80066c0:	200019a8 	.word	0x200019a8

080066c4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop

080066c8 <uartInit>:
uint8_t len;
uint8_t nodeNum;

void uartInit ()
{
	HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 80066c8:	2201      	movs	r2, #1
 80066ca:	4902      	ldr	r1, [pc, #8]	; (80066d4 <uartInit+0xc>)
 80066cc:	4802      	ldr	r0, [pc, #8]	; (80066d8 <uartInit+0x10>)
 80066ce:	f003 bde3 	b.w	800a298 <HAL_UART_Receive_IT>
 80066d2:	bf00      	nop
 80066d4:	20000b28 	.word	0x20000b28
 80066d8:	20000bc0 	.word	0x20000bc0

080066dc <readByte>:
}

void readByte (void)
{
	switch (uartIn)
 80066dc:	4b13      	ldr	r3, [pc, #76]	; (800672c <readByte+0x50>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b3c      	cmp	r3, #60	; 0x3c
 80066e2:	d01f      	beq.n	8006724 <readByte+0x48>
 80066e4:	2b3e      	cmp	r3, #62	; 0x3e
{
 80066e6:	b430      	push	{r4, r5}
	switch (uartIn)
 80066e8:	d10e      	bne.n	8006708 <readByte+0x2c>
			uartPos = 0;
			break;

		case '>':
			len = uartPos;
			uartRx[uartPos]=0;
 80066ea:	2100      	movs	r1, #0
			flag.uartGotMessage = 1;
 80066ec:	4c10      	ldr	r4, [pc, #64]	; (8006730 <readByte+0x54>)
			len = uartPos;
 80066ee:	4811      	ldr	r0, [pc, #68]	; (8006734 <readByte+0x58>)
			flag.uartGotMessage = 1;
 80066f0:	7863      	ldrb	r3, [r4, #1]
			len = uartPos;
 80066f2:	7802      	ldrb	r2, [r0, #0]
			flag.uartGotMessage = 1;
 80066f4:	f043 0301 	orr.w	r3, r3, #1
 80066f8:	7063      	strb	r3, [r4, #1]
			uartRx[uartPos]=0;
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <readByte+0x5c>)
			len = uartPos;
 80066fc:	4d0f      	ldr	r5, [pc, #60]	; (800673c <readByte+0x60>)
			uartPos = 0;
 80066fe:	7001      	strb	r1, [r0, #0]
			uartRx[uartPos]=0;
 8006700:	5499      	strb	r1, [r3, r2]
			len = uartPos;
 8006702:	702a      	strb	r2, [r5, #0]
		default:
			uartRx[uartPos++] = uartIn;
			break;
	}
	if (uartPos>126) uartPos=126;
}
 8006704:	bc30      	pop	{r4, r5}
 8006706:	4770      	bx	lr
			uartRx[uartPos++] = uartIn;
 8006708:	490a      	ldr	r1, [pc, #40]	; (8006734 <readByte+0x58>)
 800670a:	4c0b      	ldr	r4, [pc, #44]	; (8006738 <readByte+0x5c>)
 800670c:	7808      	ldrb	r0, [r1, #0]
 800670e:	1c42      	adds	r2, r0, #1
 8006710:	b2d2      	uxtb	r2, r2
	if (uartPos>126) uartPos=126;
 8006712:	2a7e      	cmp	r2, #126	; 0x7e
			uartRx[uartPos++] = uartIn;
 8006714:	5423      	strb	r3, [r4, r0]
	if (uartPos>126) uartPos=126;
 8006716:	bf88      	it	hi
 8006718:	237e      	movhi	r3, #126	; 0x7e
			uartRx[uartPos++] = uartIn;
 800671a:	700a      	strb	r2, [r1, #0]
	if (uartPos>126) uartPos=126;
 800671c:	bf88      	it	hi
 800671e:	700b      	strbhi	r3, [r1, #0]
}
 8006720:	bc30      	pop	{r4, r5}
 8006722:	4770      	bx	lr
			uartPos = 0;
 8006724:	2200      	movs	r2, #0
 8006726:	4b03      	ldr	r3, [pc, #12]	; (8006734 <readByte+0x58>)
 8006728:	701a      	strb	r2, [r3, #0]
			break;
 800672a:	4770      	bx	lr
 800672c:	20000b28 	.word	0x20000b28
 8006730:	20000adc 	.word	0x20000adc
 8006734:	2000158c 	.word	0x2000158c
 8006738:	20001590 	.word	0x20001590
 800673c:	20001610 	.word	0x20001610

08006740 <uartReceiveHandler>:

void uartReceiveHandler ()
{
 8006740:	b530      	push	{r4, r5, lr}
	char tempString[20];

	uint8_t l = len - 1;
 8006742:	4b80      	ldr	r3, [pc, #512]	; (8006944 <uartReceiveHandler+0x204>)
{
 8006744:	b087      	sub	sp, #28
	uint8_t l = len - 1;
 8006746:	7819      	ldrb	r1, [r3, #0]
 8006748:	3901      	subs	r1, #1
 800674a:	b2cc      	uxtb	r4, r1
	uint8_t *ptr = uartRx + 1;

	if (HAL_GetTick () - configTime > 500) //First half second after node configuring saving incoming data into node var
 800674c:	f000 fd06 	bl	800715c <HAL_GetTick>
 8006750:	4b7d      	ldr	r3, [pc, #500]	; (8006948 <uartReceiveHandler+0x208>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	1ac0      	subs	r0, r0, r3
 8006756:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800675a:	d950      	bls.n	80067fe <uartReceiveHandler+0xbe>
		switch (uartRx[0])
 800675c:	4d7b      	ldr	r5, [pc, #492]	; (800694c <uartReceiveHandler+0x20c>)
 800675e:	782b      	ldrb	r3, [r5, #0]
 8006760:	3b31      	subs	r3, #49	; 0x31
 8006762:	2b49      	cmp	r3, #73	; 0x49
 8006764:	d879      	bhi.n	800685a <uartReceiveHandler+0x11a>
 8006766:	e8df f013 	tbh	[pc, r3, lsl #1]
 800676a:	010c      	.short	0x010c
 800676c:	00e60105 	.word	0x00e60105
 8006770:	00d800df 	.word	0x00d800df
 8006774:	00780078 	.word	0x00780078
 8006778:	0123012a 	.word	0x0123012a
 800677c:	00780078 	.word	0x00780078
 8006780:	00780078 	.word	0x00780078
 8006784:	00780078 	.word	0x00780078
 8006788:	00780078 	.word	0x00780078
 800678c:	01130078 	.word	0x01130078
 8006790:	0078007f 	.word	0x0078007f
 8006794:	00780078 	.word	0x00780078
 8006798:	01450078 	.word	0x01450078
 800679c:	007f0078 	.word	0x007f0078
 80067a0:	00780078 	.word	0x00780078
 80067a4:	0078007f 	.word	0x0078007f
 80067a8:	00780078 	.word	0x00780078
 80067ac:	0139013f 	.word	0x0139013f
 80067b0:	00780078 	.word	0x00780078
 80067b4:	00780078 	.word	0x00780078
 80067b8:	00780131 	.word	0x00780131
 80067bc:	007801f4 	.word	0x007801f4
 80067c0:	00780078 	.word	0x00780078
 80067c4:	00780078 	.word	0x00780078
 80067c8:	00780078 	.word	0x00780078
 80067cc:	00780078 	.word	0x00780078
 80067d0:	01ab0078 	.word	0x01ab0078
 80067d4:	00780078 	.word	0x00780078
 80067d8:	0078007f 	.word	0x0078007f
 80067dc:	00780078 	.word	0x00780078
 80067e0:	00780078 	.word	0x00780078
 80067e4:	019c0078 	.word	0x019c0078
 80067e8:	01910078 	.word	0x01910078
 80067ec:	00780078 	.word	0x00780078
 80067f0:	01820078 	.word	0x01820078
 80067f4:	01770078 	.word	0x01770078
 80067f8:	01630078 	.word	0x01630078
 80067fc:	0157      	.short	0x0157
				HAL_UART_Transmit (&huart1, (uint8_t*) "//Bad Format", 10, 100);
				break;
		}
	else
		{
			switch (uartRx[0])
 80067fe:	4b53      	ldr	r3, [pc, #332]	; (800694c <uartReceiveHandler+0x20c>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	3b31      	subs	r3, #49	; 0x31
 8006804:	2b3d      	cmp	r3, #61	; 0x3d
 8006806:	d820      	bhi.n	800684a <uartReceiveHandler+0x10a>
 8006808:	e8df f003 	tbb	[pc, r3]
 800680c:	6b727980 	.word	0x6b727980
 8006810:	5d1f1f64 	.word	0x5d1f1f64
 8006814:	1f1f1f56 	.word	0x1f1f1f56
 8006818:	1f1f1f1f 	.word	0x1f1f1f1f
 800681c:	1f1f1f1f 	.word	0x1f1f1f1f
 8006820:	1f1f1f1f 	.word	0x1f1f1f1f
 8006824:	4f1f1f1f 	.word	0x4f1f1f1f
 8006828:	1f1f1f1f 	.word	0x1f1f1f1f
 800682c:	1f1f1f1f 	.word	0x1f1f1f1f
 8006830:	1f1f1f1f 	.word	0x1f1f1f1f
 8006834:	1f1f1f1f 	.word	0x1f1f1f1f
 8006838:	1f1f1f1f 	.word	0x1f1f1f1f
 800683c:	1f1f1f1f 	.word	0x1f1f1f1f
 8006840:	1f1f1f1f 	.word	0x1f1f1f1f
 8006844:	1f1f1f48 	.word	0x1f1f1f48
 8006848:	411f      	.short	0x411f
				case UART_WORKING_INTERVAL:
					nodeSettings.workInterval = DecToInt (ptr, l);
					break;

				default:
					HAL_UART_Transmit (&huart1, (uint8_t*) "Bad Format", 10, 100);
 800684a:	2364      	movs	r3, #100	; 0x64
 800684c:	220a      	movs	r2, #10
 800684e:	4940      	ldr	r1, [pc, #256]	; (8006950 <uartReceiveHandler+0x210>)
 8006850:	4840      	ldr	r0, [pc, #256]	; (8006954 <uartReceiveHandler+0x214>)
 8006852:	f003 fc99 	bl	800a188 <HAL_UART_Transmit>
					break;
			}
		}
}
 8006856:	b007      	add	sp, #28
 8006858:	bd30      	pop	{r4, r5, pc}
				HAL_UART_Transmit (&huart1, (uint8_t*) "//Bad Format", 10, 100);
 800685a:	2364      	movs	r3, #100	; 0x64
 800685c:	220a      	movs	r2, #10
 800685e:	493e      	ldr	r1, [pc, #248]	; (8006958 <uartReceiveHandler+0x218>)
 8006860:	483c      	ldr	r0, [pc, #240]	; (8006954 <uartReceiveHandler+0x214>)
 8006862:	f003 fc91 	bl	800a188 <HAL_UART_Transmit>
				break;
 8006866:	e7f6      	b.n	8006856 <uartReceiveHandler+0x116>
				netHandler.TX=false;
 8006868:	2500      	movs	r5, #0
 800686a:	4c3c      	ldr	r4, [pc, #240]	; (800695c <uartReceiveHandler+0x21c>)
 800686c:	7165      	strb	r5, [r4, #5]
				netHandler.lastStatusCheck=HAL_GetTick();
 800686e:	f000 fc75 	bl	800715c <HAL_GetTick>
 8006872:	4603      	mov	r3, r0
				sprintf (netHandler.response, "%s", ptr);
 8006874:	493a      	ldr	r1, [pc, #232]	; (8006960 <uartReceiveHandler+0x220>)
 8006876:	f204 6032 	addw	r0, r4, #1586	; 0x632
				netHandler.lastStatusCheck=HAL_GetTick();
 800687a:	6123      	str	r3, [r4, #16]
				sprintf (netHandler.response, "%s", ptr);
 800687c:	f003 ff48 	bl	800a710 <strcpy>
				flag.lcdRefreshRequest=true;
 8006880:	4a38      	ldr	r2, [pc, #224]	; (8006964 <uartReceiveHandler+0x224>)
				netHandler.TX = false;
 8006882:	7165      	strb	r5, [r4, #5]
				flag.lcdRefreshRequest=true;
 8006884:	7813      	ldrb	r3, [r2, #0]
 8006886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688a:	7013      	strb	r3, [r2, #0]
				break;
 800688c:	e7e3      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeNum = DecToInt (ptr, l);
 800688e:	4621      	mov	r1, r4
 8006890:	4833      	ldr	r0, [pc, #204]	; (8006960 <uartReceiveHandler+0x220>)
 8006892:	f7fa f9b3 	bl	8000bfc <DecToInt>
 8006896:	4b34      	ldr	r3, [pc, #208]	; (8006968 <uartReceiveHandler+0x228>)
 8006898:	7018      	strb	r0, [r3, #0]
					break;
 800689a:	e7dc      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.workInterval = DecToInt (ptr, l);
 800689c:	4621      	mov	r1, r4
 800689e:	4830      	ldr	r0, [pc, #192]	; (8006960 <uartReceiveHandler+0x220>)
 80068a0:	f7fa f9ac 	bl	8000bfc <DecToInt>
 80068a4:	4b31      	ldr	r3, [pc, #196]	; (800696c <uartReceiveHandler+0x22c>)
 80068a6:	6058      	str	r0, [r3, #4]
					break;
 80068a8:	e7d5      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.useLed = DecToInt (ptr, l);
 80068aa:	4621      	mov	r1, r4
 80068ac:	482c      	ldr	r0, [pc, #176]	; (8006960 <uartReceiveHandler+0x220>)
 80068ae:	f7fa f9a5 	bl	8000bfc <DecToInt>
 80068b2:	4b2e      	ldr	r3, [pc, #184]	; (800696c <uartReceiveHandler+0x22c>)
 80068b4:	7418      	strb	r0, [r3, #16]
					break;
 80068b6:	e7ce      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.cr = DecToInt (ptr, l);
 80068b8:	4621      	mov	r1, r4
 80068ba:	4829      	ldr	r0, [pc, #164]	; (8006960 <uartReceiveHandler+0x220>)
 80068bc:	f7fa f99e 	bl	8000bfc <DecToInt>
 80068c0:	4b2a      	ldr	r3, [pc, #168]	; (800696c <uartReceiveHandler+0x22c>)
 80068c2:	72d8      	strb	r0, [r3, #11]
					break;
 80068c4:	e7c7      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.preamble = DecToInt (ptr, l);
 80068c6:	4621      	mov	r1, r4
 80068c8:	4825      	ldr	r0, [pc, #148]	; (8006960 <uartReceiveHandler+0x220>)
 80068ca:	f7fa f997 	bl	8000bfc <DecToInt>
 80068ce:	4b27      	ldr	r3, [pc, #156]	; (800696c <uartReceiveHandler+0x22c>)
 80068d0:	8118      	strh	r0, [r3, #8]
					break;
 80068d2:	e7c0      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.power = DecToInt (ptr, l);
 80068d4:	4621      	mov	r1, r4
 80068d6:	4822      	ldr	r0, [pc, #136]	; (8006960 <uartReceiveHandler+0x220>)
 80068d8:	f7fa f990 	bl	8000bfc <DecToInt>
 80068dc:	4b23      	ldr	r3, [pc, #140]	; (800696c <uartReceiveHandler+0x22c>)
 80068de:	73d8      	strb	r0, [r3, #15]
					break;
 80068e0:	e7b9      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.sw = HexToInt (ptr, l);
 80068e2:	4621      	mov	r1, r4
 80068e4:	481e      	ldr	r0, [pc, #120]	; (8006960 <uartReceiveHandler+0x220>)
 80068e6:	f7fa f9b3 	bl	8000c50 <HexToInt>
 80068ea:	4b20      	ldr	r3, [pc, #128]	; (800696c <uartReceiveHandler+0x22c>)
 80068ec:	7398      	strb	r0, [r3, #14]
					break;
 80068ee:	e7b2      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.bw = DecToInt (ptr, l);
 80068f0:	4621      	mov	r1, r4
 80068f2:	481b      	ldr	r0, [pc, #108]	; (8006960 <uartReceiveHandler+0x220>)
 80068f4:	f7fa f982 	bl	8000bfc <DecToInt>
 80068f8:	4b1c      	ldr	r3, [pc, #112]	; (800696c <uartReceiveHandler+0x22c>)
 80068fa:	7358      	strb	r0, [r3, #13]
					break;
 80068fc:	e7ab      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.sf = DecToInt (ptr, l);
 80068fe:	4621      	mov	r1, r4
 8006900:	4817      	ldr	r0, [pc, #92]	; (8006960 <uartReceiveHandler+0x220>)
 8006902:	f7fa f97b 	bl	8000bfc <DecToInt>
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <uartReceiveHandler+0x22c>)
 8006908:	7318      	strb	r0, [r3, #12]
					break;
 800690a:	e7a4      	b.n	8006856 <uartReceiveHandler+0x116>
					nodeSettings.realFrequency = DecToInt (ptr, l);
 800690c:	4621      	mov	r1, r4
 800690e:	4814      	ldr	r0, [pc, #80]	; (8006960 <uartReceiveHandler+0x220>)
 8006910:	f7fa f974 	bl	8000bfc <DecToInt>
 8006914:	4b15      	ldr	r3, [pc, #84]	; (800696c <uartReceiveHandler+0x22c>)
 8006916:	6018      	str	r0, [r3, #0]
					break;
 8006918:	e79d      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.power = DecToInt (ptr, l);
 800691a:	4621      	mov	r1, r4
 800691c:	4810      	ldr	r0, [pc, #64]	; (8006960 <uartReceiveHandler+0x220>)
 800691e:	f7fa f96d 	bl	8000bfc <DecToInt>
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <uartReceiveHandler+0x230>)
 8006924:	7498      	strb	r0, [r3, #18]
				break;
 8006926:	e796      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.syncWord = HexToInt (ptr, l);
 8006928:	4621      	mov	r1, r4
 800692a:	480d      	ldr	r0, [pc, #52]	; (8006960 <uartReceiveHandler+0x220>)
 800692c:	f7fa f990 	bl	8000c50 <HexToInt>
 8006930:	4b0f      	ldr	r3, [pc, #60]	; (8006970 <uartReceiveHandler+0x230>)
 8006932:	7458      	strb	r0, [r3, #17]
				break;
 8006934:	e78f      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.bw = DecToInt (ptr, l);
 8006936:	4621      	mov	r1, r4
 8006938:	4809      	ldr	r0, [pc, #36]	; (8006960 <uartReceiveHandler+0x220>)
 800693a:	f7fa f95f 	bl	8000bfc <DecToInt>
 800693e:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <uartReceiveHandler+0x230>)
 8006940:	73d8      	strb	r0, [r3, #15]
				break;
 8006942:	e788      	b.n	8006856 <uartReceiveHandler+0x116>
 8006944:	20001610 	.word	0x20001610
 8006948:	20000c74 	.word	0x20000c74
 800694c:	20001590 	.word	0x20001590
 8006950:	0800bd0c 	.word	0x0800bd0c
 8006954:	20000bc0 	.word	0x20000bc0
 8006958:	0800bcfc 	.word	0x0800bcfc
 800695c:	20000e4c 	.word	0x20000e4c
 8006960:	20001591 	.word	0x20001591
 8006964:	20000adc 	.word	0x20000adc
 8006968:	2000158d 	.word	0x2000158d
 800696c:	20000c04 	.word	0x20000c04
 8006970:	20000a00 	.word	0x20000a00
				settings.sf = DecToInt (ptr, l);
 8006974:	4621      	mov	r1, r4
 8006976:	4889      	ldr	r0, [pc, #548]	; (8006b9c <uartReceiveHandler+0x45c>)
 8006978:	f7fa f940 	bl	8000bfc <DecToInt>
 800697c:	4b88      	ldr	r3, [pc, #544]	; (8006ba0 <uartReceiveHandler+0x460>)
 800697e:	7398      	strb	r0, [r3, #14]
				break;
 8006980:	e769      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.realFrequency = DecToInt (ptr, l);
 8006982:	4621      	mov	r1, r4
 8006984:	4885      	ldr	r0, [pc, #532]	; (8006b9c <uartReceiveHandler+0x45c>)
 8006986:	f7fa f939 	bl	8000bfc <DecToInt>
 800698a:	4b85      	ldr	r3, [pc, #532]	; (8006ba0 <uartReceiveHandler+0x460>)
 800698c:	6018      	str	r0, [r3, #0]
				break;
 800698e:	e762      	b.n	8006856 <uartReceiveHandler+0x116>
				sprintf (tempString, "<aBv%d>", version);
 8006990:	4b84      	ldr	r3, [pc, #528]	; (8006ba4 <uartReceiveHandler+0x464>)
 8006992:	4985      	ldr	r1, [pc, #532]	; (8006ba8 <uartReceiveHandler+0x468>)
 8006994:	881a      	ldrh	r2, [r3, #0]
 8006996:	a801      	add	r0, sp, #4
 8006998:	f003 fe9a 	bl	800a6d0 <siprintf>
				HAL_UART_Transmit (&huart1, (uint8_t*) tempString, strlen (tempString), 100);
 800699c:	a801      	add	r0, sp, #4
 800699e:	f7f9 fbd5 	bl	800014c <strlen>
 80069a2:	2364      	movs	r3, #100	; 0x64
 80069a4:	b282      	uxth	r2, r0
 80069a6:	a901      	add	r1, sp, #4
 80069a8:	4880      	ldr	r0, [pc, #512]	; (8006bac <uartReceiveHandler+0x46c>)
 80069aa:	f003 fbed 	bl	800a188 <HAL_UART_Transmit>
				break;
 80069ae:	e752      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.cr = DecToInt (ptr, l);
 80069b0:	4621      	mov	r1, r4
 80069b2:	487a      	ldr	r0, [pc, #488]	; (8006b9c <uartReceiveHandler+0x45c>)
 80069b4:	f7fa f922 	bl	8000bfc <DecToInt>
 80069b8:	4b79      	ldr	r3, [pc, #484]	; (8006ba0 <uartReceiveHandler+0x460>)
 80069ba:	7418      	strb	r0, [r3, #16]
				break;
 80069bc:	e74b      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.preamble = DecToInt (ptr, l);
 80069be:	4621      	mov	r1, r4
 80069c0:	4876      	ldr	r0, [pc, #472]	; (8006b9c <uartReceiveHandler+0x45c>)
 80069c2:	f7fa f91b 	bl	8000bfc <DecToInt>
 80069c6:	4b76      	ldr	r3, [pc, #472]	; (8006ba0 <uartReceiveHandler+0x460>)
 80069c8:	8198      	strh	r0, [r3, #12]
				break;
 80069ca:	e744      	b.n	8006856 <uartReceiveHandler+0x116>
				memcpy (settings.WiFiPass, ptr, l);
 80069cc:	4622      	mov	r2, r4
 80069ce:	4973      	ldr	r1, [pc, #460]	; (8006b9c <uartReceiveHandler+0x45c>)
 80069d0:	4877      	ldr	r0, [pc, #476]	; (8006bb0 <uartReceiveHandler+0x470>)
}
 80069d2:	b007      	add	sp, #28
 80069d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				memcpy (settings.WiFiPass, ptr, l);
 80069d8:	f003 be4a 	b.w	800a670 <memcpy>
				flag.saveSettings = 1;
 80069dc:	4a75      	ldr	r2, [pc, #468]	; (8006bb4 <uartReceiveHandler+0x474>)
 80069de:	7813      	ldrb	r3, [r2, #0]
 80069e0:	f043 0310 	orr.w	r3, r3, #16
 80069e4:	7013      	strb	r3, [r2, #0]
				break;
 80069e6:	e736      	b.n	8006856 <uartReceiveHandler+0x116>
				flag.sendConfig = 1;
 80069e8:	4a72      	ldr	r2, [pc, #456]	; (8006bb4 <uartReceiveHandler+0x474>)
 80069ea:	7813      	ldrb	r3, [r2, #0]
 80069ec:	f043 0320 	orr.w	r3, r3, #32
 80069f0:	7013      	strb	r3, [r2, #0]
				break;
 80069f2:	e730      	b.n	8006856 <uartReceiveHandler+0x116>
				netHandler.lastStatusCheck=HAL_GetTick();
 80069f4:	f000 fbb2 	bl	800715c <HAL_GetTick>
 80069f8:	4603      	mov	r3, r0
 80069fa:	4c6f      	ldr	r4, [pc, #444]	; (8006bb8 <uartReceiveHandler+0x478>)
				sprintf (netHandler.ip, "%s", ptr);
 80069fc:	4967      	ldr	r1, [pc, #412]	; (8006b9c <uartReceiveHandler+0x45c>)
 80069fe:	f104 0014 	add.w	r0, r4, #20
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a02:	6123      	str	r3, [r4, #16]
				sprintf (netHandler.ip, "%s", ptr);
 8006a04:	f003 fe84 	bl	800a710 <strcpy>
				netHandler.connected = true;
 8006a08:	2301      	movs	r3, #1
				flag.lcdRefreshRequest=true;
 8006a0a:	4a6a      	ldr	r2, [pc, #424]	; (8006bb4 <uartReceiveHandler+0x474>)
				netHandler.connected = true;
 8006a0c:	70a3      	strb	r3, [r4, #2]
				flag.lcdRefreshRequest=true;
 8006a0e:	7813      	ldrb	r3, [r2, #0]
 8006a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a14:	7013      	strb	r3, [r2, #0]
				break;
 8006a16:	e71e      	b.n	8006856 <uartReceiveHandler+0x116>
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a18:	f000 fba0 	bl	800715c <HAL_GetTick>
				netHandler.plugged = true;
 8006a1c:	2401      	movs	r4, #1
				flag.lcdRefreshRequest=true;
 8006a1e:	4a65      	ldr	r2, [pc, #404]	; (8006bb4 <uartReceiveHandler+0x474>)
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a20:	4965      	ldr	r1, [pc, #404]	; (8006bb8 <uartReceiveHandler+0x478>)
				flag.lcdRefreshRequest=true;
 8006a22:	7813      	ldrb	r3, [r2, #0]
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a24:	6108      	str	r0, [r1, #16]
				flag.lcdRefreshRequest=true;
 8006a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				netHandler.plugged = true;
 8006a2a:	700c      	strb	r4, [r1, #0]
				flag.lcdRefreshRequest=true;
 8006a2c:	7013      	strb	r3, [r2, #0]
				break;
 8006a2e:	e712      	b.n	8006856 <uartReceiveHandler+0x116>
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a30:	f000 fb94 	bl	800715c <HAL_GetTick>
 8006a34:	4603      	mov	r3, r0
 8006a36:	4d60      	ldr	r5, [pc, #384]	; (8006bb8 <uartReceiveHandler+0x478>)
				netHandler.netCount = DecToInt (ptr, l);
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4858      	ldr	r0, [pc, #352]	; (8006b9c <uartReceiveHandler+0x45c>)
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a3c:	612b      	str	r3, [r5, #16]
				netHandler.netCount = DecToInt (ptr, l);
 8006a3e:	f7fa f8dd 	bl	8000bfc <DecToInt>
				netHandler.netRefreshInProgress=false;
 8006a42:	f44f 7180 	mov.w	r1, #256	; 0x100
				flag.lcdRefreshRequest = 1;
 8006a46:	4a5b      	ldr	r2, [pc, #364]	; (8006bb4 <uartReceiveHandler+0x474>)
				netHandler.netCount = DecToInt (ptr, l);
 8006a48:	f885 0631 	strb.w	r0, [r5, #1585]	; 0x631
				flag.lcdRefreshRequest = 1;
 8006a4c:	7813      	ldrb	r3, [r2, #0]
				netHandler.netRefreshInProgress=false;
 8006a4e:	80e9      	strh	r1, [r5, #6]
				flag.lcdRefreshRequest = 1;
 8006a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a54:	7013      	strb	r3, [r2, #0]
				break;
 8006a56:	e6fe      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.superWarningDelay = 1000 * DecToInt (ptr, l);
 8006a58:	4621      	mov	r1, r4
 8006a5a:	4850      	ldr	r0, [pc, #320]	; (8006b9c <uartReceiveHandler+0x45c>)
 8006a5c:	f7fa f8ce 	bl	8000bfc <DecToInt>
 8006a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a64:	fb03 f300 	mul.w	r3, r3, r0
 8006a68:	4a4d      	ldr	r2, [pc, #308]	; (8006ba0 <uartReceiveHandler+0x460>)
 8006a6a:	6093      	str	r3, [r2, #8]
				break;
 8006a6c:	e6f3      	b.n	8006856 <uartReceiveHandler+0x116>
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a6e:	f000 fb75 	bl	800715c <HAL_GetTick>
				netHandler.connected = ptr[0];
 8006a72:	786a      	ldrb	r2, [r5, #1]
				flag.lcdRefreshRequest=true;
 8006a74:	494f      	ldr	r1, [pc, #316]	; (8006bb4 <uartReceiveHandler+0x474>)
				netHandler.connected = ptr[0];
 8006a76:	3a00      	subs	r2, #0
 8006a78:	bf18      	it	ne
 8006a7a:	2201      	movne	r2, #1
				flag.lcdRefreshRequest=true;
 8006a7c:	780b      	ldrb	r3, [r1, #0]
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a7e:	4c4e      	ldr	r4, [pc, #312]	; (8006bb8 <uartReceiveHandler+0x478>)
				flag.lcdRefreshRequest=true;
 8006a80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				netHandler.connected = ptr[0];
 8006a84:	70a2      	strb	r2, [r4, #2]
				netHandler.lastStatusCheck=HAL_GetTick();
 8006a86:	6120      	str	r0, [r4, #16]
				flag.lcdRefreshRequest=true;
 8006a88:	700b      	strb	r3, [r1, #0]
				break;
 8006a8a:	e6e4      	b.n	8006856 <uartReceiveHandler+0x116>
				settings.warningDelay = 1000 * DecToInt (ptr, l);
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4843      	ldr	r0, [pc, #268]	; (8006b9c <uartReceiveHandler+0x45c>)
 8006a90:	f7fa f8b4 	bl	8000bfc <DecToInt>
 8006a94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a98:	fb03 f300 	mul.w	r3, r3, r0
 8006a9c:	4a40      	ldr	r2, [pc, #256]	; (8006ba0 <uartReceiveHandler+0x460>)
 8006a9e:	6053      	str	r3, [r2, #4]
				break;
 8006aa0:	e6d9      	b.n	8006856 <uartReceiveHandler+0x116>
				netHandler.lastStatusCheck=HAL_GetTick();
 8006aa2:	f000 fb5b 	bl	800715c <HAL_GetTick>
				netHandler.online = ptr[0];
 8006aa6:	786a      	ldrb	r2, [r5, #1]
				flag.lcdRefreshRequest=true;
 8006aa8:	4942      	ldr	r1, [pc, #264]	; (8006bb4 <uartReceiveHandler+0x474>)
				netHandler.online = ptr[0];
 8006aaa:	3a00      	subs	r2, #0
 8006aac:	bf18      	it	ne
 8006aae:	2201      	movne	r2, #1
				flag.lcdRefreshRequest=true;
 8006ab0:	780b      	ldrb	r3, [r1, #0]
				netHandler.lastStatusCheck=HAL_GetTick();
 8006ab2:	4c41      	ldr	r4, [pc, #260]	; (8006bb8 <uartReceiveHandler+0x478>)
				flag.lcdRefreshRequest=true;
 8006ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
				netHandler.online = ptr[0];
 8006ab8:	70e2      	strb	r2, [r4, #3]
				netHandler.lastStatusCheck=HAL_GetTick();
 8006aba:	6120      	str	r0, [r4, #16]
				flag.lcdRefreshRequest=true;
 8006abc:	700b      	strb	r3, [r1, #0]
				break;
 8006abe:	e6ca      	b.n	8006856 <uartReceiveHandler+0x116>
				netHandler.lastStatusCheck=HAL_GetTick();
 8006ac0:	f000 fb4c 	bl	800715c <HAL_GetTick>
 8006ac4:	4b3c      	ldr	r3, [pc, #240]	; (8006bb8 <uartReceiveHandler+0x478>)
							if (netHandler.nets[i][0] == 0)
 8006ac6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
				netHandler.lastStatusCheck=HAL_GetTick();
 8006aca:	6118      	str	r0, [r3, #16]
							if (netHandler.nets[i][0] == 0)
 8006acc:	2a00      	cmp	r2, #0
 8006ace:	d036      	beq.n	8006b3e <uartReceiveHandler+0x3fe>
 8006ad0:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	d045      	beq.n	8006b64 <uartReceiveHandler+0x424>
 8006ad8:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 8006adc:	2a00      	cmp	r2, #0
 8006ade:	d043      	beq.n	8006b68 <uartReceiveHandler+0x428>
 8006ae0:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	d041      	beq.n	8006b6c <uartReceiveHandler+0x42c>
 8006ae8:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8006aec:	2a00      	cmp	r2, #0
 8006aee:	d03f      	beq.n	8006b70 <uartReceiveHandler+0x430>
 8006af0:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
 8006af4:	2a00      	cmp	r2, #0
 8006af6:	d03f      	beq.n	8006b78 <uartReceiveHandler+0x438>
 8006af8:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8006afc:	2a00      	cmp	r2, #0
 8006afe:	d039      	beq.n	8006b74 <uartReceiveHandler+0x434>
 8006b00:	f893 2110 	ldrb.w	r2, [r3, #272]	; 0x110
 8006b04:	2a00      	cmp	r2, #0
 8006b06:	d03b      	beq.n	8006b80 <uartReceiveHandler+0x440>
 8006b08:	f893 2130 	ldrb.w	r2, [r3, #304]	; 0x130
 8006b0c:	b3b2      	cbz	r2, 8006b7c <uartReceiveHandler+0x43c>
 8006b0e:	f893 2150 	ldrb.w	r2, [r3, #336]	; 0x150
 8006b12:	b3ba      	cbz	r2, 8006b84 <uartReceiveHandler+0x444>
 8006b14:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
 8006b18:	b3b2      	cbz	r2, 8006b88 <uartReceiveHandler+0x448>
 8006b1a:	f893 2190 	ldrb.w	r2, [r3, #400]	; 0x190
 8006b1e:	b3aa      	cbz	r2, 8006b8c <uartReceiveHandler+0x44c>
 8006b20:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
 8006b24:	b3a2      	cbz	r2, 8006b90 <uartReceiveHandler+0x450>
 8006b26:	f893 21d0 	ldrb.w	r2, [r3, #464]	; 0x1d0
 8006b2a:	b3aa      	cbz	r2, 8006b98 <uartReceiveHandler+0x458>
 8006b2c:	f893 21f0 	ldrb.w	r2, [r3, #496]	; 0x1f0
 8006b30:	b382      	cbz	r2, 8006b94 <uartReceiveHandler+0x454>
 8006b32:	f893 2210 	ldrb.w	r2, [r3, #528]	; 0x210
 8006b36:	2a00      	cmp	r2, #0
 8006b38:	f47f ae8d 	bne.w	8006856 <uartReceiveHandler+0x116>
								i++;
 8006b3c:	220f      	movs	r2, #15
									sprintf (netHandler.nets[i], "%s", ptr);
 8006b3e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006b42:	4916      	ldr	r1, [pc, #88]	; (8006b9c <uartReceiveHandler+0x45c>)
 8006b44:	f103 0030 	add.w	r0, r3, #48	; 0x30
}
 8006b48:	b007      	add	sp, #28
 8006b4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
									sprintf (netHandler.nets[i], "%s", ptr);
 8006b4e:	f003 bddf 	b.w	800a710 <strcpy>
				memset (settings.SSID, 0, sizeof(settings.SSID));
 8006b52:	2300      	movs	r3, #0
 8006b54:	4819      	ldr	r0, [pc, #100]	; (8006bbc <uartReceiveHandler+0x47c>)
				memcpy (settings.SSID, ptr, l);
 8006b56:	4622      	mov	r2, r4
 8006b58:	4910      	ldr	r1, [pc, #64]	; (8006b9c <uartReceiveHandler+0x45c>)
				memset (settings.SSID, 0, sizeof(settings.SSID));
 8006b5a:	6003      	str	r3, [r0, #0]
 8006b5c:	6043      	str	r3, [r0, #4]
 8006b5e:	6083      	str	r3, [r0, #8]
 8006b60:	60c3      	str	r3, [r0, #12]
				memcpy (settings.SSID, ptr, l);
 8006b62:	e736      	b.n	80069d2 <uartReceiveHandler+0x292>
								i++;
 8006b64:	2201      	movs	r2, #1
 8006b66:	e7ea      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b68:	2202      	movs	r2, #2
 8006b6a:	e7e8      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	e7e6      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b70:	2204      	movs	r2, #4
 8006b72:	e7e4      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b74:	2206      	movs	r2, #6
 8006b76:	e7e2      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b78:	2205      	movs	r2, #5
 8006b7a:	e7e0      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	e7de      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b80:	2207      	movs	r2, #7
 8006b82:	e7dc      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b84:	2209      	movs	r2, #9
 8006b86:	e7da      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b88:	220a      	movs	r2, #10
 8006b8a:	e7d8      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b8c:	220b      	movs	r2, #11
 8006b8e:	e7d6      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b90:	220c      	movs	r2, #12
 8006b92:	e7d4      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b94:	220e      	movs	r2, #14
 8006b96:	e7d2      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b98:	220d      	movs	r2, #13
 8006b9a:	e7d0      	b.n	8006b3e <uartReceiveHandler+0x3fe>
 8006b9c:	20001591 	.word	0x20001591
 8006ba0:	20000a00 	.word	0x20000a00
 8006ba4:	0800b99c 	.word	0x0800b99c
 8006ba8:	0800bcf4 	.word	0x0800bcf4
 8006bac:	20000bc0 	.word	0x20000bc0
 8006bb0:	20000a23 	.word	0x20000a23
 8006bb4:	20000adc 	.word	0x20000adc
 8006bb8:	20000e4c 	.word	0x20000e4c
 8006bbc:	20000a13 	.word	0x20000a13

08006bc0 <sendConfig>:

void sendConfig (void)
{
 8006bc0:	b570      	push	{r4, r5, r6, lr}
 8006bc2:	b08a      	sub	sp, #40	; 0x28
	lastUartConnect = HAL_GetTick ();
 8006bc4:	f000 faca 	bl	800715c <HAL_GetTick>
 8006bc8:	4604      	mov	r4, r0
	char str[40];
	sprintf (str, "<1%ld>", settings.realFrequency);
 8006bca:	4d54      	ldr	r5, [pc, #336]	; (8006d1c <sendConfig+0x15c>)
	lastUartConnect = HAL_GetTick ();
 8006bcc:	4b54      	ldr	r3, [pc, #336]	; (8006d20 <sendConfig+0x160>)
	sprintf (str, "<1%ld>", settings.realFrequency);
 8006bce:	682a      	ldr	r2, [r5, #0]
 8006bd0:	4954      	ldr	r1, [pc, #336]	; (8006d24 <sendConfig+0x164>)
 8006bd2:	4668      	mov	r0, sp
	lastUartConnect = HAL_GetTick ();
 8006bd4:	601c      	str	r4, [r3, #0]
	sprintf (str, "<1%ld>", settings.realFrequency);
 8006bd6:	f003 fd7b 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006bda:	4668      	mov	r0, sp
 8006bdc:	f7f9 fab6 	bl	800014c <strlen>
 8006be0:	4c51      	ldr	r4, [pc, #324]	; (8006d28 <sendConfig+0x168>)
 8006be2:	2364      	movs	r3, #100	; 0x64
 8006be4:	4669      	mov	r1, sp
 8006be6:	b282      	uxth	r2, r0
 8006be8:	4620      	mov	r0, r4
 8006bea:	f003 facd 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<2%u>", settings.sf);
 8006bee:	7baa      	ldrb	r2, [r5, #14]
 8006bf0:	494e      	ldr	r1, [pc, #312]	; (8006d2c <sendConfig+0x16c>)
 8006bf2:	4668      	mov	r0, sp
 8006bf4:	f003 fd6c 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006bf8:	4668      	mov	r0, sp
 8006bfa:	f7f9 faa7 	bl	800014c <strlen>
 8006bfe:	2364      	movs	r3, #100	; 0x64
 8006c00:	4669      	mov	r1, sp
 8006c02:	b282      	uxth	r2, r0
 8006c04:	4620      	mov	r0, r4
 8006c06:	f003 fabf 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<3%u>", settings.bw);
 8006c0a:	7bea      	ldrb	r2, [r5, #15]
 8006c0c:	4948      	ldr	r1, [pc, #288]	; (8006d30 <sendConfig+0x170>)
 8006c0e:	4668      	mov	r0, sp
 8006c10:	f003 fd5e 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006c14:	4668      	mov	r0, sp
 8006c16:	f7f9 fa99 	bl	800014c <strlen>
 8006c1a:	2364      	movs	r3, #100	; 0x64
 8006c1c:	4669      	mov	r1, sp
 8006c1e:	b282      	uxth	r2, r0
 8006c20:	4620      	mov	r0, r4
 8006c22:	f003 fab1 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<4%X>", settings.syncWord);
 8006c26:	7c6a      	ldrb	r2, [r5, #17]
 8006c28:	4942      	ldr	r1, [pc, #264]	; (8006d34 <sendConfig+0x174>)
 8006c2a:	4668      	mov	r0, sp
 8006c2c:	f003 fd50 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006c30:	4668      	mov	r0, sp
 8006c32:	f7f9 fa8b 	bl	800014c <strlen>
 8006c36:	2364      	movs	r3, #100	; 0x64
 8006c38:	4669      	mov	r1, sp
 8006c3a:	b282      	uxth	r2, r0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f003 faa3 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<5%u>", settings.power);
 8006c42:	7caa      	ldrb	r2, [r5, #18]
 8006c44:	493c      	ldr	r1, [pc, #240]	; (8006d38 <sendConfig+0x178>)
 8006c46:	4668      	mov	r0, sp
 8006c48:	f003 fd42 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006c4c:	4668      	mov	r0, sp
 8006c4e:	f7f9 fa7d 	bl	800014c <strlen>
 8006c52:	2364      	movs	r3, #100	; 0x64
 8006c54:	4669      	mov	r1, sp
 8006c56:	b282      	uxth	r2, r0
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f003 fa95 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<8%u>", settings.preamble);
 8006c5e:	89aa      	ldrh	r2, [r5, #12]
 8006c60:	4936      	ldr	r1, [pc, #216]	; (8006d3c <sendConfig+0x17c>)
 8006c62:	4668      	mov	r0, sp
 8006c64:	f003 fd34 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006c68:	4668      	mov	r0, sp
 8006c6a:	f7f9 fa6f 	bl	800014c <strlen>
 8006c6e:	2364      	movs	r3, #100	; 0x64
 8006c70:	4669      	mov	r1, sp
 8006c72:	b282      	uxth	r2, r0
 8006c74:	4620      	mov	r0, r4
 8006c76:	f003 fa87 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<9%u>", settings.cr);
 8006c7a:	7c2a      	ldrb	r2, [r5, #16]
 8006c7c:	4930      	ldr	r1, [pc, #192]	; (8006d40 <sendConfig+0x180>)
 8006c7e:	4668      	mov	r0, sp
 8006c80:	f003 fd26 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006c84:	4668      	mov	r0, sp
 8006c86:	f7f9 fa61 	bl	800014c <strlen>
 8006c8a:	2364      	movs	r3, #100	; 0x64
 8006c8c:	4669      	mov	r1, sp
 8006c8e:	b282      	uxth	r2, r0
 8006c90:	4620      	mov	r0, r4
 8006c92:	f003 fa79 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<q%lu>", settings.warningDelay / 1000);
 8006c96:	4e2b      	ldr	r6, [pc, #172]	; (8006d44 <sendConfig+0x184>)
 8006c98:	686a      	ldr	r2, [r5, #4]
 8006c9a:	492b      	ldr	r1, [pc, #172]	; (8006d48 <sendConfig+0x188>)
 8006c9c:	fba6 3202 	umull	r3, r2, r6, r2
 8006ca0:	4668      	mov	r0, sp
 8006ca2:	0992      	lsrs	r2, r2, #6
 8006ca4:	f003 fd14 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006ca8:	4668      	mov	r0, sp
 8006caa:	f7f9 fa4f 	bl	800014c <strlen>
 8006cae:	2364      	movs	r3, #100	; 0x64
 8006cb0:	4669      	mov	r1, sp
 8006cb2:	b282      	uxth	r2, r0
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f003 fa67 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<w%lu>", settings.superWarningDelay / 1000);
 8006cba:	68aa      	ldr	r2, [r5, #8]
 8006cbc:	4923      	ldr	r1, [pc, #140]	; (8006d4c <sendConfig+0x18c>)
 8006cbe:	fba6 3202 	umull	r3, r2, r6, r2
 8006cc2:	4668      	mov	r0, sp
 8006cc4:	0992      	lsrs	r2, r2, #6
 8006cc6:	f003 fd03 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006cca:	4668      	mov	r0, sp
 8006ccc:	f7f9 fa3e 	bl	800014c <strlen>
 8006cd0:	2364      	movs	r3, #100	; 0x64
 8006cd2:	4669      	mov	r1, sp
 8006cd4:	b282      	uxth	r2, r0
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	f003 fa56 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<Z%s>", settings.SSID);
 8006cdc:	f105 0213 	add.w	r2, r5, #19
 8006ce0:	491b      	ldr	r1, [pc, #108]	; (8006d50 <sendConfig+0x190>)
 8006ce2:	4668      	mov	r0, sp
 8006ce4:	f003 fcf4 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006ce8:	4668      	mov	r0, sp
 8006cea:	f7f9 fa2f 	bl	800014c <strlen>
 8006cee:	2364      	movs	r3, #100	; 0x64
 8006cf0:	4669      	mov	r1, sp
 8006cf2:	b282      	uxth	r2, r0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f003 fa47 	bl	800a188 <HAL_UART_Transmit>
	sprintf (str, "<X%s>", settings.WiFiPass);
 8006cfa:	f105 0223 	add.w	r2, r5, #35	; 0x23
 8006cfe:	4915      	ldr	r1, [pc, #84]	; (8006d54 <sendConfig+0x194>)
 8006d00:	4668      	mov	r0, sp
 8006d02:	f003 fce5 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006d06:	4668      	mov	r0, sp
 8006d08:	f7f9 fa20 	bl	800014c <strlen>
 8006d0c:	4669      	mov	r1, sp
 8006d0e:	b282      	uxth	r2, r0
 8006d10:	2364      	movs	r3, #100	; 0x64
 8006d12:	4620      	mov	r0, r4
 8006d14:	f003 fa38 	bl	800a188 <HAL_UART_Transmit>
}
 8006d18:	b00a      	add	sp, #40	; 0x28
 8006d1a:	bd70      	pop	{r4, r5, r6, pc}
 8006d1c:	20000a00 	.word	0x20000a00
 8006d20:	20001580 	.word	0x20001580
 8006d24:	0800bd18 	.word	0x0800bd18
 8006d28:	20000bc0 	.word	0x20000bc0
 8006d2c:	0800bd20 	.word	0x0800bd20
 8006d30:	0800bd28 	.word	0x0800bd28
 8006d34:	0800bd30 	.word	0x0800bd30
 8006d38:	0800bd38 	.word	0x0800bd38
 8006d3c:	0800bd40 	.word	0x0800bd40
 8006d40:	0800bd48 	.word	0x0800bd48
 8006d44:	10624dd3 	.word	0x10624dd3
 8006d48:	0800bd50 	.word	0x0800bd50
 8006d4c:	0800bd58 	.word	0x0800bd58
 8006d50:	0800bd60 	.word	0x0800bd60
 8006d54:	0800bd68 	.word	0x0800bd68

08006d58 <configNodeViaUart>:

void configNodeViaUart (uint8_t nodeNum)
{
	char str[12];
	memset (&nodeSettings, 0, sizeof(nodeSettings_t));
 8006d58:	2300      	movs	r3, #0
{
 8006d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
	sprintf (str, "<1%ld>", settings.realFrequency);
 8006d5c:	4e69      	ldr	r6, [pc, #420]	; (8006f04 <configNodeViaUart+0x1ac>)
	memset (&nodeSettings, 0, sizeof(nodeSettings_t));
 8006d5e:	4d6a      	ldr	r5, [pc, #424]	; (8006f08 <configNodeViaUart+0x1b0>)
{
 8006d60:	b085      	sub	sp, #20
	memset (&nodeSettings, 0, sizeof(nodeSettings_t));
 8006d62:	e9c5 3300 	strd	r3, r3, [r5]
 8006d66:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8006d6a:	e9c5 3304 	strd	r3, r3, [r5, #16]
	sprintf (str, "<1%ld>", settings.realFrequency);
 8006d6e:	6832      	ldr	r2, [r6, #0]
	memset (&nodeSettings, 0, sizeof(nodeSettings_t));
 8006d70:	61ab      	str	r3, [r5, #24]
{
 8006d72:	4607      	mov	r7, r0
	sprintf (str, "<1%ld>", settings.realFrequency);
 8006d74:	4965      	ldr	r1, [pc, #404]	; (8006f0c <configNodeViaUart+0x1b4>)
 8006d76:	a801      	add	r0, sp, #4
 8006d78:	f003 fcaa 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006d7c:	a801      	add	r0, sp, #4
 8006d7e:	f7f9 f9e5 	bl	800014c <strlen>
 8006d82:	4c63      	ldr	r4, [pc, #396]	; (8006f10 <configNodeViaUart+0x1b8>)
 8006d84:	2364      	movs	r3, #100	; 0x64
 8006d86:	b282      	uxth	r2, r0
 8006d88:	a901      	add	r1, sp, #4
 8006d8a:	4620      	mov	r0, r4
 8006d8c:	f003 f9fc 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006d90:	201e      	movs	r0, #30
 8006d92:	f000 f9e9 	bl	8007168 <HAL_Delay>
	sprintf (str, "<2%u>", settings.sf);
 8006d96:	7bb2      	ldrb	r2, [r6, #14]
 8006d98:	495e      	ldr	r1, [pc, #376]	; (8006f14 <configNodeViaUart+0x1bc>)
 8006d9a:	a801      	add	r0, sp, #4
 8006d9c:	f003 fc98 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006da0:	a801      	add	r0, sp, #4
 8006da2:	f7f9 f9d3 	bl	800014c <strlen>
 8006da6:	2364      	movs	r3, #100	; 0x64
 8006da8:	a901      	add	r1, sp, #4
 8006daa:	b282      	uxth	r2, r0
 8006dac:	4620      	mov	r0, r4
 8006dae:	f003 f9eb 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006db2:	201e      	movs	r0, #30
 8006db4:	f000 f9d8 	bl	8007168 <HAL_Delay>
	sprintf (str, "<3%u>", settings.bw);
 8006db8:	7bf2      	ldrb	r2, [r6, #15]
 8006dba:	4957      	ldr	r1, [pc, #348]	; (8006f18 <configNodeViaUart+0x1c0>)
 8006dbc:	a801      	add	r0, sp, #4
 8006dbe:	f003 fc87 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006dc2:	a801      	add	r0, sp, #4
 8006dc4:	f7f9 f9c2 	bl	800014c <strlen>
 8006dc8:	2364      	movs	r3, #100	; 0x64
 8006dca:	a901      	add	r1, sp, #4
 8006dcc:	b282      	uxth	r2, r0
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f003 f9da 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006dd4:	201e      	movs	r0, #30
 8006dd6:	f000 f9c7 	bl	8007168 <HAL_Delay>
	sprintf (str, "<4%X>", settings.syncWord);
 8006dda:	7c72      	ldrb	r2, [r6, #17]
 8006ddc:	494f      	ldr	r1, [pc, #316]	; (8006f1c <configNodeViaUart+0x1c4>)
 8006dde:	a801      	add	r0, sp, #4
 8006de0:	f003 fc76 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006de4:	a801      	add	r0, sp, #4
 8006de6:	f7f9 f9b1 	bl	800014c <strlen>
 8006dea:	2364      	movs	r3, #100	; 0x64
 8006dec:	a901      	add	r1, sp, #4
 8006dee:	b282      	uxth	r2, r0
 8006df0:	4620      	mov	r0, r4
 8006df2:	f003 f9c9 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006df6:	201e      	movs	r0, #30
 8006df8:	f000 f9b6 	bl	8007168 <HAL_Delay>
	sprintf (str, "<5%u>", settings.power);
 8006dfc:	7cb2      	ldrb	r2, [r6, #18]
 8006dfe:	4948      	ldr	r1, [pc, #288]	; (8006f20 <configNodeViaUart+0x1c8>)
 8006e00:	a801      	add	r0, sp, #4
 8006e02:	f003 fc65 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006e06:	a801      	add	r0, sp, #4
 8006e08:	f7f9 f9a0 	bl	800014c <strlen>
 8006e0c:	2364      	movs	r3, #100	; 0x64
 8006e0e:	a901      	add	r1, sp, #4
 8006e10:	b282      	uxth	r2, r0
 8006e12:	4620      	mov	r0, r4
 8006e14:	f003 f9b8 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006e18:	201e      	movs	r0, #30
 8006e1a:	f000 f9a5 	bl	8007168 <HAL_Delay>
	sprintf (str, "<8%u>", settings.preamble);
 8006e1e:	89b2      	ldrh	r2, [r6, #12]
 8006e20:	4940      	ldr	r1, [pc, #256]	; (8006f24 <configNodeViaUart+0x1cc>)
 8006e22:	a801      	add	r0, sp, #4
 8006e24:	f003 fc54 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006e28:	a801      	add	r0, sp, #4
 8006e2a:	f7f9 f98f 	bl	800014c <strlen>
 8006e2e:	2364      	movs	r3, #100	; 0x64
 8006e30:	a901      	add	r1, sp, #4
 8006e32:	b282      	uxth	r2, r0
 8006e34:	4620      	mov	r0, r4
 8006e36:	f003 f9a7 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006e3a:	201e      	movs	r0, #30
 8006e3c:	f000 f994 	bl	8007168 <HAL_Delay>
	sprintf (str, "<9%u>", settings.cr);
 8006e40:	7c32      	ldrb	r2, [r6, #16]
 8006e42:	4939      	ldr	r1, [pc, #228]	; (8006f28 <configNodeViaUart+0x1d0>)
 8006e44:	a801      	add	r0, sp, #4
 8006e46:	f003 fc43 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006e4a:	a801      	add	r0, sp, #4
 8006e4c:	f7f9 f97e 	bl	800014c <strlen>
 8006e50:	2364      	movs	r3, #100	; 0x64
 8006e52:	a901      	add	r1, sp, #4
 8006e54:	b282      	uxth	r2, r0
 8006e56:	4620      	mov	r0, r4
 8006e58:	f003 f996 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006e5c:	201e      	movs	r0, #30
 8006e5e:	f000 f983 	bl	8007168 <HAL_Delay>
	sprintf (str, "<n%u>", nodeNum);
 8006e62:	463a      	mov	r2, r7
 8006e64:	4931      	ldr	r1, [pc, #196]	; (8006f2c <configNodeViaUart+0x1d4>)
 8006e66:	a801      	add	r0, sp, #4
 8006e68:	f003 fc32 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006e6c:	a801      	add	r0, sp, #4
 8006e6e:	f7f9 f96d 	bl	800014c <strlen>
 8006e72:	2364      	movs	r3, #100	; 0x64
 8006e74:	a901      	add	r1, sp, #4
 8006e76:	b282      	uxth	r2, r0
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f003 f985 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006e7e:	201e      	movs	r0, #30
 8006e80:	f000 f972 	bl	8007168 <HAL_Delay>
	sprintf (str, "<i%lu>", nodeSettings.workInterval);
 8006e84:	686a      	ldr	r2, [r5, #4]
 8006e86:	492a      	ldr	r1, [pc, #168]	; (8006f30 <configNodeViaUart+0x1d8>)
 8006e88:	a801      	add	r0, sp, #4
 8006e8a:	f003 fc21 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006e8e:	a801      	add	r0, sp, #4
 8006e90:	f7f9 f95c 	bl	800014c <strlen>
 8006e94:	2364      	movs	r3, #100	; 0x64
 8006e96:	a901      	add	r1, sp, #4
 8006e98:	b282      	uxth	r2, r0
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f003 f974 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);
 8006ea0:	201e      	movs	r0, #30
 8006ea2:	f000 f961 	bl	8007168 <HAL_Delay>
	sprintf (str, "<L%u>", nodeSettings.useLed);
 8006ea6:	7c2a      	ldrb	r2, [r5, #16]
 8006ea8:	4922      	ldr	r1, [pc, #136]	; (8006f34 <configNodeViaUart+0x1dc>)
 8006eaa:	a801      	add	r0, sp, #4
 8006eac:	f003 fc10 	bl	800a6d0 <siprintf>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006eb0:	a801      	add	r0, sp, #4
 8006eb2:	f7f9 f94b 	bl	800014c <strlen>
 8006eb6:	a901      	add	r1, sp, #4
 8006eb8:	b282      	uxth	r2, r0
 8006eba:	2364      	movs	r3, #100	; 0x64
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f003 f963 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (30);

	sprintf (str, "<S>");
 8006ec2:	4d1d      	ldr	r5, [pc, #116]	; (8006f38 <configNodeViaUart+0x1e0>)
	HAL_Delay (30);
 8006ec4:	201e      	movs	r0, #30
 8006ec6:	f000 f94f 	bl	8007168 <HAL_Delay>
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006eca:	a901      	add	r1, sp, #4
 8006ecc:	2364      	movs	r3, #100	; 0x64
 8006ece:	2203      	movs	r2, #3
 8006ed0:	4620      	mov	r0, r4
	sprintf (str, "<S>");
 8006ed2:	9501      	str	r5, [sp, #4]
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006ed4:	f003 f958 	bl	800a188 <HAL_UART_Transmit>
	HAL_Delay (50);
 8006ed8:	2032      	movs	r0, #50	; 0x32
 8006eda:	f000 f945 	bl	8007168 <HAL_Delay>
	sprintf (str, "<R>");
 8006ede:	f5a5 7580 	sub.w	r5, r5, #256	; 0x100
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	a901      	add	r1, sp, #4
 8006ee6:	2364      	movs	r3, #100	; 0x64
 8006ee8:	4620      	mov	r0, r4
	sprintf (str, "<R>");
 8006eea:	9501      	str	r5, [sp, #4]
	HAL_UART_Transmit (&huart1, (uint8_t*) str, strlen (str), 100);
 8006eec:	f003 f94c 	bl	800a188 <HAL_UART_Transmit>
	configTime = HAL_GetTick ();
 8006ef0:	f000 f934 	bl	800715c <HAL_GetTick>
 8006ef4:	4b11      	ldr	r3, [pc, #68]	; (8006f3c <configNodeViaUart+0x1e4>)
 8006ef6:	6018      	str	r0, [r3, #0]
	lastUartConnect = HAL_GetTick ();
 8006ef8:	f000 f930 	bl	800715c <HAL_GetTick>
 8006efc:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <configNodeViaUart+0x1e8>)
 8006efe:	6018      	str	r0, [r3, #0]
}
 8006f00:	b005      	add	sp, #20
 8006f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f04:	20000a00 	.word	0x20000a00
 8006f08:	20000c04 	.word	0x20000c04
 8006f0c:	0800bd18 	.word	0x0800bd18
 8006f10:	20000bc0 	.word	0x20000bc0
 8006f14:	0800bd20 	.word	0x0800bd20
 8006f18:	0800bd28 	.word	0x0800bd28
 8006f1c:	0800bd30 	.word	0x0800bd30
 8006f20:	0800bd38 	.word	0x0800bd38
 8006f24:	0800bd40 	.word	0x0800bd40
 8006f28:	0800bd48 	.word	0x0800bd48
 8006f2c:	0800bd70 	.word	0x0800bd70
 8006f30:	0800bd78 	.word	0x0800bd78
 8006f34:	0800bd80 	.word	0x0800bd80
 8006f38:	003e533c 	.word	0x003e533c
 8006f3c:	20000c74 	.word	0x20000c74
 8006f40:	20001580 	.word	0x20001580

08006f44 <wsSetColor>:

uint16_t wsBuffer[ARRAY_LEN];
color_t cBuffer[LED_COUNT];

void wsSetColor(uint8_t num, uint8_t red, uint8_t green, uint8_t blue)
{
 8006f44:	b430      	push	{r4, r5}
cBuffer[num].red=red;
 8006f46:	4d04      	ldr	r5, [pc, #16]	; (8006f58 <wsSetColor+0x14>)
 8006f48:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006f4c:	182c      	adds	r4, r5, r0
 8006f4e:	7061      	strb	r1, [r4, #1]
cBuffer[num].green=green;
cBuffer[num].blue=blue;
 8006f50:	70a3      	strb	r3, [r4, #2]
cBuffer[num].green=green;
 8006f52:	542a      	strb	r2, [r5, r0]
}
 8006f54:	bc30      	pop	{r4, r5}
 8006f56:	4770      	bx	lr
 8006f58:	20001954 	.word	0x20001954

08006f5c <wsDoubleBright>:

void wsDoubleBright(uint8_t num)
{
 8006f5c:	b430      	push	{r4, r5}
	cBuffer[num].red*=2;
 8006f5e:	4c07      	ldr	r4, [pc, #28]	; (8006f7c <wsDoubleBright+0x20>)
 8006f60:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006f64:	1823      	adds	r3, r4, r0
 8006f66:	7859      	ldrb	r1, [r3, #1]
	cBuffer[num].green*=2;
	cBuffer[num].blue*=2;
 8006f68:	789a      	ldrb	r2, [r3, #2]
	cBuffer[num].green*=2;
 8006f6a:	5c25      	ldrb	r5, [r4, r0]
	cBuffer[num].red*=2;
 8006f6c:	0049      	lsls	r1, r1, #1
	cBuffer[num].blue*=2;
 8006f6e:	0052      	lsls	r2, r2, #1
	cBuffer[num].green*=2;
 8006f70:	006d      	lsls	r5, r5, #1
	cBuffer[num].red*=2;
 8006f72:	7059      	strb	r1, [r3, #1]
	cBuffer[num].blue*=2;
 8006f74:	709a      	strb	r2, [r3, #2]
	cBuffer[num].green*=2;
 8006f76:	5425      	strb	r5, [r4, r0]
}
 8006f78:	bc30      	pop	{r4, r5}
 8006f7a:	4770      	bx	lr
 8006f7c:	20001954 	.word	0x20001954

08006f80 <wsMultiply>:

void wsMultiply(uint8_t num, float k)
{
 8006f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f82:	460d      	mov	r5, r1
	cBuffer[num].red*=k;
 8006f84:	4f10      	ldr	r7, [pc, #64]	; (8006fc8 <wsMultiply+0x48>)
 8006f86:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8006f8a:	193e      	adds	r6, r7, r4
 8006f8c:	7870      	ldrb	r0, [r6, #1]
 8006f8e:	f7f9 f99f 	bl	80002d0 <__aeabi_i2f>
 8006f92:	4629      	mov	r1, r5
 8006f94:	f7f9 f9f0 	bl	8000378 <__aeabi_fmul>
 8006f98:	f7f9 fbda 	bl	8000750 <__aeabi_f2uiz>
 8006f9c:	4603      	mov	r3, r0
	cBuffer[num].green*=k;
 8006f9e:	5d38      	ldrb	r0, [r7, r4]
	cBuffer[num].red*=k;
 8006fa0:	7073      	strb	r3, [r6, #1]
	cBuffer[num].green*=k;
 8006fa2:	f7f9 f995 	bl	80002d0 <__aeabi_i2f>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 f9e6 	bl	8000378 <__aeabi_fmul>
 8006fac:	f7f9 fbd0 	bl	8000750 <__aeabi_f2uiz>
 8006fb0:	4603      	mov	r3, r0
	cBuffer[num].blue*=k;
 8006fb2:	78b0      	ldrb	r0, [r6, #2]
	cBuffer[num].green*=k;
 8006fb4:	553b      	strb	r3, [r7, r4]
	cBuffer[num].blue*=k;
 8006fb6:	f7f9 f98b 	bl	80002d0 <__aeabi_i2f>
 8006fba:	4629      	mov	r1, r5
 8006fbc:	f7f9 f9dc 	bl	8000378 <__aeabi_fmul>
 8006fc0:	f7f9 fbc6 	bl	8000750 <__aeabi_f2uiz>
 8006fc4:	70b0      	strb	r0, [r6, #2]
}
 8006fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fc8:	20001954 	.word	0x20001954

08006fcc <wsPrepareArray>:
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
}

uint32_t * getBitBanded(uint32_t * adr,uint8_t bit)
{
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8006fcc:	4b29      	ldr	r3, [pc, #164]	; (8007074 <wsPrepareArray+0xa8>)
{
 8006fce:	b4f0      	push	{r4, r5, r6, r7}
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4e29      	ldr	r6, [pc, #164]	; (8007078 <wsPrepareArray+0xac>)
 8006fd4:	015b      	lsls	r3, r3, #5
 8006fd6:	4632      	mov	r2, r6
 8006fd8:	2500      	movs	r5, #0
      wsBuffer[i*8+j]=65;
 8006fda:	2041      	movs	r0, #65	; 0x41
	  wsBuffer[i*8+j]=26;
 8006fdc:	211a      	movs	r1, #26
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8006fde:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
	for(i=0;i<LED_COUNT*3;i++)
 8006fe2:	f506 77d8 	add.w	r7, r6, #432	; 0x1b0
 8006fe6:	e026      	b.n	8007036 <wsPrepareArray+0x6a>
		if (*adr++)
 8006fe8:	685c      	ldr	r4, [r3, #4]
	  wsBuffer[i*8+j]=26;
 8006fea:	81d1      	strh	r1, [r2, #14]
		if (*adr++)
 8006fec:	2c00      	cmp	r4, #0
 8006fee:	d129      	bne.n	8007044 <wsPrepareArray+0x78>
 8006ff0:	689c      	ldr	r4, [r3, #8]
	  wsBuffer[i*8+j]=26;
 8006ff2:	8191      	strh	r1, [r2, #12]
		if (*adr++)
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	d129      	bne.n	800704c <wsPrepareArray+0x80>
 8006ff8:	68dc      	ldr	r4, [r3, #12]
	  wsBuffer[i*8+j]=26;
 8006ffa:	8151      	strh	r1, [r2, #10]
		if (*adr++)
 8006ffc:	2c00      	cmp	r4, #0
 8006ffe:	d129      	bne.n	8007054 <wsPrepareArray+0x88>
 8007000:	691c      	ldr	r4, [r3, #16]
	  wsBuffer[i*8+j]=26;
 8007002:	8111      	strh	r1, [r2, #8]
		if (*adr++)
 8007004:	2c00      	cmp	r4, #0
 8007006:	d129      	bne.n	800705c <wsPrepareArray+0x90>
 8007008:	695c      	ldr	r4, [r3, #20]
	  wsBuffer[i*8+j]=26;
 800700a:	80d1      	strh	r1, [r2, #6]
		if (*adr++)
 800700c:	2c00      	cmp	r4, #0
 800700e:	d129      	bne.n	8007064 <wsPrepareArray+0x98>
 8007010:	699c      	ldr	r4, [r3, #24]
	  wsBuffer[i*8+j]=26;
 8007012:	8091      	strh	r1, [r2, #4]
		if (*adr++)
 8007014:	2c00      	cmp	r4, #0
 8007016:	d129      	bne.n	800706c <wsPrepareArray+0xa0>
	  wsBuffer[i*8+j]=26;
 8007018:	8051      	strh	r1, [r2, #2]
		if (*adr++)
 800701a:	69dc      	ldr	r4, [r3, #28]
 800701c:	3210      	adds	r2, #16
	  wsBuffer[i*8+j]=26;
 800701e:	2c00      	cmp	r4, #0
 8007020:	bf14      	ite	ne
 8007022:	4604      	movne	r4, r0
 8007024:	460c      	moveq	r4, r1
	for(i=0;i<LED_COUNT*3;i++)
 8007026:	42ba      	cmp	r2, r7
	  wsBuffer[i*8+j]=26;
 8007028:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
 800702c:	f103 0320 	add.w	r3, r3, #32
	for(i=0;i<LED_COUNT*3;i++)
 8007030:	f105 0508 	add.w	r5, r5, #8
 8007034:	d01c      	beq.n	8007070 <wsPrepareArray+0xa4>
		if (*adr++)
 8007036:	681c      	ldr	r4, [r3, #0]
 8007038:	2c00      	cmp	r4, #0
 800703a:	d0d5      	beq.n	8006fe8 <wsPrepareArray+0x1c>
 800703c:	685c      	ldr	r4, [r3, #4]
      wsBuffer[i*8+j]=65;
 800703e:	81d0      	strh	r0, [r2, #14]
		if (*adr++)
 8007040:	2c00      	cmp	r4, #0
 8007042:	d0d5      	beq.n	8006ff0 <wsPrepareArray+0x24>
 8007044:	689c      	ldr	r4, [r3, #8]
      wsBuffer[i*8+j]=65;
 8007046:	8190      	strh	r0, [r2, #12]
		if (*adr++)
 8007048:	2c00      	cmp	r4, #0
 800704a:	d0d5      	beq.n	8006ff8 <wsPrepareArray+0x2c>
 800704c:	68dc      	ldr	r4, [r3, #12]
      wsBuffer[i*8+j]=65;
 800704e:	8150      	strh	r0, [r2, #10]
		if (*adr++)
 8007050:	2c00      	cmp	r4, #0
 8007052:	d0d5      	beq.n	8007000 <wsPrepareArray+0x34>
 8007054:	691c      	ldr	r4, [r3, #16]
      wsBuffer[i*8+j]=65;
 8007056:	8110      	strh	r0, [r2, #8]
		if (*adr++)
 8007058:	2c00      	cmp	r4, #0
 800705a:	d0d5      	beq.n	8007008 <wsPrepareArray+0x3c>
 800705c:	695c      	ldr	r4, [r3, #20]
      wsBuffer[i*8+j]=65;
 800705e:	80d0      	strh	r0, [r2, #6]
		if (*adr++)
 8007060:	2c00      	cmp	r4, #0
 8007062:	d0d5      	beq.n	8007010 <wsPrepareArray+0x44>
 8007064:	699c      	ldr	r4, [r3, #24]
      wsBuffer[i*8+j]=65;
 8007066:	8090      	strh	r0, [r2, #4]
		if (*adr++)
 8007068:	2c00      	cmp	r4, #0
 800706a:	d0d5      	beq.n	8007018 <wsPrepareArray+0x4c>
      wsBuffer[i*8+j]=65;
 800706c:	8050      	strh	r0, [r2, #2]
 800706e:	e7d4      	b.n	800701a <wsPrepareArray+0x4e>
}
 8007070:	bcf0      	pop	{r4, r5, r6, r7}
 8007072:	4770      	bx	lr
 8007074:	20001954 	.word	0x20001954
 8007078:	20001614 	.word	0x20001614

0800707c <wsInit>:
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
 800707c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8007080:	4a01      	ldr	r2, [pc, #4]	; (8007088 <wsInit+0xc>)
 8007082:	f002 bd21 	b.w	8009ac8 <HAL_TIM_PWM_Start_DMA>
 8007086:	bf00      	nop
 8007088:	20001614 	.word	0x20001614

0800708c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800708c:	480c      	ldr	r0, [pc, #48]	; (80070c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800708e:	490d      	ldr	r1, [pc, #52]	; (80070c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007090:	4a0d      	ldr	r2, [pc, #52]	; (80070c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007094:	e002      	b.n	800709c <LoopCopyDataInit>

08007096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800709a:	3304      	adds	r3, #4

0800709c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800709c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800709e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80070a0:	d3f9      	bcc.n	8007096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80070a2:	4a0a      	ldr	r2, [pc, #40]	; (80070cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80070a4:	4c0a      	ldr	r4, [pc, #40]	; (80070d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80070a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80070a8:	e001      	b.n	80070ae <LoopFillZerobss>

080070aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80070aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80070ac:	3204      	adds	r2, #4

080070ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80070ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80070b0:	d3fb      	bcc.n	80070aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80070b2:	f7ff fb07 	bl	80066c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80070b6:	f003 fab7 	bl	800a628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80070ba:	f7fd feaf 	bl	8004e1c <main>
  bx lr
 80070be:	4770      	bx	lr
  ldr r0, =_sdata
 80070c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80070c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80070c8:	0800bdd4 	.word	0x0800bdd4
  ldr r2, =_sbss
 80070cc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80070d0:	200019a8 	.word	0x200019a8

080070d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80070d4:	e7fe      	b.n	80070d4 <ADC1_2_IRQHandler>
	...

080070d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070de:	4a0d      	ldr	r2, [pc, #52]	; (8007114 <HAL_InitTick+0x3c>)
{
 80070e0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070e2:	7811      	ldrb	r1, [r2, #0]
 80070e4:	4a0c      	ldr	r2, [pc, #48]	; (8007118 <HAL_InitTick+0x40>)
 80070e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80070ea:	6812      	ldr	r2, [r2, #0]
 80070ec:	fbb2 f0f3 	udiv	r0, r2, r3
 80070f0:	f000 fafa 	bl	80076e8 <HAL_SYSTICK_Config>
 80070f4:	b908      	cbnz	r0, 80070fa <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070f6:	2d0f      	cmp	r5, #15
 80070f8:	d901      	bls.n	80070fe <HAL_InitTick+0x26>
    return HAL_ERROR;
 80070fa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80070fc:	bd38      	pop	{r3, r4, r5, pc}
 80070fe:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007100:	4602      	mov	r2, r0
 8007102:	4629      	mov	r1, r5
 8007104:	f04f 30ff 	mov.w	r0, #4294967295
 8007108:	f000 faa8 	bl	800765c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800710c:	4b03      	ldr	r3, [pc, #12]	; (800711c <HAL_InitTick+0x44>)
 800710e:	4620      	mov	r0, r4
 8007110:	601d      	str	r5, [r3, #0]
}
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20000020 	.word	0x20000020
 8007118:	2000001c 	.word	0x2000001c
 800711c:	20000024 	.word	0x20000024

08007120 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007120:	4a07      	ldr	r2, [pc, #28]	; (8007140 <HAL_Init+0x20>)
{
 8007122:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007124:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007126:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007128:	f043 0310 	orr.w	r3, r3, #16
 800712c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800712e:	f000 fa83 	bl	8007638 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8007132:	2000      	movs	r0, #0
 8007134:	f7ff ffd0 	bl	80070d8 <HAL_InitTick>
  HAL_MspInit();
 8007138:	f7fe fbec 	bl	8005914 <HAL_MspInit>
}
 800713c:	2000      	movs	r0, #0
 800713e:	bd08      	pop	{r3, pc}
 8007140:	40022000 	.word	0x40022000

08007144 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007144:	4a03      	ldr	r2, [pc, #12]	; (8007154 <HAL_IncTick+0x10>)
 8007146:	4b04      	ldr	r3, [pc, #16]	; (8007158 <HAL_IncTick+0x14>)
 8007148:	6811      	ldr	r1, [r2, #0]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	440b      	add	r3, r1
 800714e:	6013      	str	r3, [r2, #0]
}
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20001970 	.word	0x20001970
 8007158:	20000020 	.word	0x20000020

0800715c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800715c:	4b01      	ldr	r3, [pc, #4]	; (8007164 <HAL_GetTick+0x8>)
 800715e:	6818      	ldr	r0, [r3, #0]
}
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop
 8007164:	20001970 	.word	0x20001970

08007168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007168:	b538      	push	{r3, r4, r5, lr}
 800716a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800716c:	f7ff fff6 	bl	800715c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007170:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8007172:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8007174:	d002      	beq.n	800717c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007176:	4b04      	ldr	r3, [pc, #16]	; (8007188 <HAL_Delay+0x20>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800717c:	f7ff ffee 	bl	800715c <HAL_GetTick>
 8007180:	1b40      	subs	r0, r0, r5
 8007182:	42a0      	cmp	r0, r4
 8007184:	d3fa      	bcc.n	800717c <HAL_Delay+0x14>
  {
  }
}
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	20000020 	.word	0x20000020

0800718c <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800718c:	2800      	cmp	r0, #0
 800718e:	f000 8082 	beq.w	8007296 <HAL_ADC_Init+0x10a>
{
 8007192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007194:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007196:	4604      	mov	r4, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d065      	beq.n	8007268 <HAL_ADC_Init+0xdc>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800719c:	6823      	ldr	r3, [r4, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	07d5      	lsls	r5, r2, #31
 80071a2:	d43e      	bmi.n	8007222 <HAL_ADC_Init+0x96>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80071a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80071a6:	06d2      	lsls	r2, r2, #27
 80071a8:	d458      	bmi.n	800725c <HAL_ADC_Init+0xd0>
    ADC_STATE_CLR_SET(hadc->State,
 80071aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80071ac:	69e0      	ldr	r0, [r4, #28]
 80071ae:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80071b0:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80071b4:	4301      	orrs	r1, r0
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80071b6:	68a0      	ldr	r0, [r4, #8]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80071b8:	7b26      	ldrb	r6, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80071ba:	f022 0202 	bic.w	r2, r2, #2
 80071be:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80071c2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 80071c6:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80071c8:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80071cc:	7d21      	ldrb	r1, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80071ce:	d051      	beq.n	8007274 <HAL_ADC_Init+0xe8>
 80071d0:	2801      	cmp	r0, #1
 80071d2:	bf0c      	ite	eq
 80071d4:	f44f 7780 	moveq.w	r7, #256	; 0x100
 80071d8:	2700      	movne	r7, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80071da:	2901      	cmp	r1, #1
 80071dc:	d067      	beq.n	80072ae <HAL_ADC_Init+0x122>
      MODIFY_REG(hadc->Instance->CR1,
 80071de:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80071e0:	4943      	ldr	r1, [pc, #268]	; (80072f0 <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 80071e2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80071e6:	433d      	orrs	r5, r7
 80071e8:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80071ea:	689d      	ldr	r5, [r3, #8]
 80071ec:	4029      	ands	r1, r5
 80071ee:	4311      	orrs	r1, r2
 80071f0:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80071f2:	2801      	cmp	r0, #1
 80071f4:	d04b      	beq.n	800728e <HAL_ADC_Init+0x102>
  uint32_t tmp_sqr1 = 0U;
 80071f6:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 80071f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80071fa:	4d3e      	ldr	r5, [pc, #248]	; (80072f4 <HAL_ADC_Init+0x168>)
    MODIFY_REG(hadc->Instance->SQR1,
 80071fc:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8007200:	4301      	orrs	r1, r0
 8007202:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	401d      	ands	r5, r3
 8007208:	42aa      	cmp	r2, r5
 800720a:	d046      	beq.n	800729a <HAL_ADC_Init+0x10e>
      tmp_hal_status = HAL_ERROR;
 800720c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800720e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007210:	f023 0312 	bic.w	r3, r3, #18
 8007214:	f043 0310 	orr.w	r3, r3, #16
 8007218:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800721a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800721c:	4303      	orrs	r3, r0
 800721e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8007220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800722a:	f7ff ff97 	bl	800715c <HAL_GetTick>
 800722e:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	07d0      	lsls	r0, r2, #31
 8007236:	d5b5      	bpl.n	80071a4 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007238:	f7ff ff90 	bl	800715c <HAL_GetTick>
 800723c:	1b43      	subs	r3, r0, r5
 800723e:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007240:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007242:	d9f6      	bls.n	8007232 <HAL_ADC_Init+0xa6>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8007244:	689a      	ldr	r2, [r3, #8]
 8007246:	07d1      	lsls	r1, r2, #31
 8007248:	d5f3      	bpl.n	8007232 <HAL_ADC_Init+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800724a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800724c:	f043 0310 	orr.w	r3, r3, #16
 8007250:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007252:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007254:	f043 0301 	orr.w	r3, r3, #1
 8007258:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800725a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800725c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800725e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007260:	f043 0310 	orr.w	r3, r3, #16
 8007264:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8007266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8007268:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800726a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800726e:	f7fe fb73 	bl	8005958 <HAL_ADC_MspInit>
 8007272:	e793      	b.n	800719c <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007274:	2901      	cmp	r1, #1
 8007276:	d019      	beq.n	80072ac <HAL_ADC_Init+0x120>
      MODIFY_REG(hadc->Instance->CR1,
 8007278:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800727a:	491d      	ldr	r1, [pc, #116]	; (80072f0 <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 800727c:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8007280:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8007284:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8007286:	6898      	ldr	r0, [r3, #8]
 8007288:	4001      	ands	r1, r0
 800728a:	4311      	orrs	r1, r2
 800728c:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800728e:	6921      	ldr	r1, [r4, #16]
 8007290:	3901      	subs	r1, #1
 8007292:	0508      	lsls	r0, r1, #20
 8007294:	e7b0      	b.n	80071f8 <HAL_ADC_Init+0x6c>
    return HAL_ERROR;
 8007296:	2001      	movs	r0, #1
}
 8007298:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 800729a:	2000      	movs	r0, #0
 800729c:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800729e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072a0:	f023 0303 	bic.w	r3, r3, #3
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80072aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80072ac:	4607      	mov	r7, r0
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80072ae:	b1be      	cbz	r6, 80072e0 <HAL_ADC_Init+0x154>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80072b2:	f041 0120 	orr.w	r1, r1, #32
 80072b6:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80072ba:	f041 0101 	orr.w	r1, r1, #1
 80072be:	62e1      	str	r1, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 80072c0:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80072c2:	490b      	ldr	r1, [pc, #44]	; (80072f0 <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 80072c4:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80072c8:	433d      	orrs	r5, r7
 80072ca:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80072cc:	689d      	ldr	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80072ce:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 80072d2:	ea01 0105 	and.w	r1, r1, r5
 80072d6:	ea41 0102 	orr.w	r1, r1, r2
 80072da:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80072dc:	d189      	bne.n	80071f2 <HAL_ADC_Init+0x66>
 80072de:	e7d6      	b.n	800728e <HAL_ADC_Init+0x102>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80072e0:	69a1      	ldr	r1, [r4, #24]
 80072e2:	1e4d      	subs	r5, r1, #1
 80072e4:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 80072e8:	f445 6700 	orr.w	r7, r5, #2048	; 0x800
 80072ec:	e7e8      	b.n	80072c0 <HAL_ADC_Init+0x134>
 80072ee:	bf00      	nop
 80072f0:	ffe1f7fd 	.word	0xffe1f7fd
 80072f4:	ff1f0efe 	.word	0xff1f0efe

080072f8 <HAL_ADC_ConvCpltCallback>:
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop

080072fc <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80072fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007300:	f012 0f50 	tst.w	r2, #80	; 0x50
 8007304:	d10f      	bne.n	8007326 <ADC_DMAConvCplt+0x2a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007306:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007308:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800730a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
{
 800730e:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007310:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8007312:	688a      	ldr	r2, [r1, #8]
 8007314:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8007318:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800731c:	d006      	beq.n	800732c <ADC_DMAConvCplt+0x30>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff ffea 	bl	80072f8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007324:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007326:	6a1b      	ldr	r3, [r3, #32]
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	4718      	bx	r3
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800732c:	7b1a      	ldrb	r2, [r3, #12]
 800732e:	2a00      	cmp	r2, #0
 8007330:	d1f5      	bne.n	800731e <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007338:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800733a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733c:	04d2      	lsls	r2, r2, #19
 800733e:	d4ee      	bmi.n	800731e <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	629a      	str	r2, [r3, #40]	; 0x28
 8007348:	e7e9      	b.n	800731e <ADC_DMAConvCplt+0x22>
 800734a:	bf00      	nop

0800734c <HAL_ADC_ConvHalfCpltCallback>:
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop

08007350 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007350:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007352:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007354:	f7ff fffa 	bl	800734c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007358:	bd08      	pop	{r3, pc}
 800735a:	bf00      	nop

0800735c <HAL_ADC_ErrorCallback>:
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop

08007360 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007360:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8007362:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007364:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800736a:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800736c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800736e:	f043 0304 	orr.w	r3, r3, #4
 8007372:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007374:	f7ff fff2 	bl	800735c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007378:	bd08      	pop	{r3, pc}
 800737a:	bf00      	nop

0800737c <HAL_ADC_ConfigChannel>:
{ 
 800737c:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0U;
 800737e:	2000      	movs	r0, #0
{ 
 8007380:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8007382:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
{ 
 8007386:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8007388:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 800738a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800738c:	d05b      	beq.n	8007446 <HAL_ADC_ConfigChannel+0xca>
 800738e:	2301      	movs	r3, #1
 8007390:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8007394:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007396:	261f      	movs	r6, #31
  if (sConfig->Rank < 7U)
 8007398:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800739a:	6814      	ldr	r4, [r2, #0]
  if (sConfig->Rank < 7U)
 800739c:	d92d      	bls.n	80073fa <HAL_ADC_ConfigChannel+0x7e>
  else if (sConfig->Rank < 13U)
 800739e:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80073a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 80073a4:	d844      	bhi.n	8007430 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80073a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80073a8:	6808      	ldr	r0, [r1, #0]
 80073aa:	3b23      	subs	r3, #35	; 0x23
 80073ac:	409e      	lsls	r6, r3
 80073ae:	ea25 0506 	bic.w	r5, r5, r6
 80073b2:	fa00 f303 	lsl.w	r3, r0, r3
 80073b6:	432b      	orrs	r3, r5
 80073b8:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80073ba:	2809      	cmp	r0, #9
 80073bc:	d92b      	bls.n	8007416 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80073be:	2607      	movs	r6, #7
 80073c0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80073c4:	688d      	ldr	r5, [r1, #8]
 80073c6:	3b1e      	subs	r3, #30
 80073c8:	68e1      	ldr	r1, [r4, #12]
 80073ca:	409e      	lsls	r6, r3
 80073cc:	409d      	lsls	r5, r3
 80073ce:	ea21 0306 	bic.w	r3, r1, r6
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073d2:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80073d6:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073d8:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80073da:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80073dc:	d826      	bhi.n	800742c <HAL_ADC_ConfigChannel+0xb0>
    if (hadc->Instance == ADC1)
 80073de:	4b2a      	ldr	r3, [pc, #168]	; (8007488 <HAL_ADC_ConfigChannel+0x10c>)
 80073e0:	429c      	cmp	r4, r3
 80073e2:	d034      	beq.n	800744e <HAL_ADC_ConfigChannel+0xd2>
      tmp_hal_status = HAL_ERROR;
 80073e4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80073e8:	f043 0320 	orr.w	r3, r3, #32
 80073ec:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80073ee:	2300      	movs	r3, #0
 80073f0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 80073f4:	b003      	add	sp, #12
 80073f6:	bc70      	pop	{r4, r5, r6}
 80073f8:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80073fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80073fe:	6808      	ldr	r0, [r1, #0]
 8007400:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007402:	3b05      	subs	r3, #5
 8007404:	409e      	lsls	r6, r3
 8007406:	ea25 0506 	bic.w	r5, r5, r6
 800740a:	fa00 f303 	lsl.w	r3, r0, r3
 800740e:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007410:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8007412:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8007414:	d8d3      	bhi.n	80073be <HAL_ADC_ConfigChannel+0x42>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8007416:	2507      	movs	r5, #7
 8007418:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800741c:	6889      	ldr	r1, [r1, #8]
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	4085      	lsls	r5, r0
 8007422:	4081      	lsls	r1, r0
 8007424:	ea23 0005 	bic.w	r0, r3, r5
 8007428:	4308      	orrs	r0, r1
 800742a:	6120      	str	r0, [r4, #16]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800742c:	2000      	movs	r0, #0
 800742e:	e7de      	b.n	80073ee <HAL_ADC_ConfigChannel+0x72>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8007430:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8007432:	6808      	ldr	r0, [r1, #0]
 8007434:	3b41      	subs	r3, #65	; 0x41
 8007436:	409e      	lsls	r6, r3
 8007438:	ea25 0506 	bic.w	r5, r5, r6
 800743c:	fa00 f303 	lsl.w	r3, r0, r3
 8007440:	432b      	orrs	r3, r5
 8007442:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007444:	e7b9      	b.n	80073ba <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8007446:	2002      	movs	r0, #2
}
 8007448:	b003      	add	sp, #12
 800744a:	bc70      	pop	{r4, r5, r6}
 800744c:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	021b      	lsls	r3, r3, #8
 8007452:	d4eb      	bmi.n	800742c <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007454:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007456:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8007458:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800745c:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800745e:	d1e5      	bne.n	800742c <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <HAL_ADC_ConfigChannel+0x110>)
 8007462:	490b      	ldr	r1, [pc, #44]	; (8007490 <HAL_ADC_ConfigChannel+0x114>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	fba1 1303 	umull	r1, r3, r1, r3
 800746a:	0c9b      	lsrs	r3, r3, #18
 800746c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8007474:	9b01      	ldr	r3, [sp, #4]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0d8      	beq.n	800742c <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 800747a:	9b01      	ldr	r3, [sp, #4]
 800747c:	3b01      	subs	r3, #1
 800747e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8007480:	9b01      	ldr	r3, [sp, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f9      	bne.n	800747a <HAL_ADC_ConfigChannel+0xfe>
 8007486:	e7d1      	b.n	800742c <HAL_ADC_ConfigChannel+0xb0>
 8007488:	40012400 	.word	0x40012400
 800748c:	2000001c 	.word	0x2000001c
 8007490:	431bde83 	.word	0x431bde83

08007494 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8007494:	2300      	movs	r3, #0
{
 8007496:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8007498:	6802      	ldr	r2, [r0, #0]
{
 800749a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800749c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800749e:	6893      	ldr	r3, [r2, #8]
 80074a0:	07d9      	lsls	r1, r3, #31
 80074a2:	d427      	bmi.n	80074f4 <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074a4:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <ADC_Enable+0x80>)
 80074a6:	4604      	mov	r4, r0
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	481b      	ldr	r0, [pc, #108]	; (8007518 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 80074ac:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074ae:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 80074b2:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074b6:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 80074b8:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80074ba:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80074bc:	9b01      	ldr	r3, [sp, #4]
 80074be:	b12b      	cbz	r3, 80074cc <ADC_Enable+0x38>
      wait_loop_index--;
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80074c6:	9b01      	ldr	r3, [sp, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1f9      	bne.n	80074c0 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 80074cc:	f7ff fe46 	bl	800715c <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80074d0:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80074d2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	07da      	lsls	r2, r3, #31
 80074d8:	d40c      	bmi.n	80074f4 <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80074da:	f7ff fe3f 	bl	800715c <HAL_GetTick>
 80074de:	1b43      	subs	r3, r0, r5
 80074e0:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 80074e2:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80074e4:	d903      	bls.n	80074ee <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80074e6:	689a      	ldr	r2, [r3, #8]
 80074e8:	f012 0201 	ands.w	r2, r2, #1
 80074ec:	d005      	beq.n	80074fa <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	07db      	lsls	r3, r3, #31
 80074f2:	d5f2      	bpl.n	80074da <ADC_Enable+0x46>
  return HAL_OK;
 80074f4:	2000      	movs	r0, #0
}
 80074f6:	b003      	add	sp, #12
 80074f8:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 80074fa:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80074fe:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007502:	f043 0310 	orr.w	r3, r3, #16
 8007506:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007508:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800750a:	4303      	orrs	r3, r0
 800750c:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800750e:	b003      	add	sp, #12
 8007510:	bd30      	pop	{r4, r5, pc}
 8007512:	bf00      	nop
 8007514:	2000001c 	.word	0x2000001c
 8007518:	431bde83 	.word	0x431bde83

0800751c <HAL_ADC_Start_DMA>:
{
 800751c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007520:	4d40      	ldr	r5, [pc, #256]	; (8007624 <HAL_ADC_Start_DMA+0x108>)
 8007522:	6800      	ldr	r0, [r0, #0]
{
 8007524:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8007526:	42a8      	cmp	r0, r5
{
 8007528:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800752a:	d05c      	beq.n	80075e6 <HAL_ADC_Start_DMA+0xca>
 800752c:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <HAL_ADC_Start_DMA+0x10c>)
 800752e:	4298      	cmp	r0, r3
 8007530:	d059      	beq.n	80075e6 <HAL_ADC_Start_DMA+0xca>
    __HAL_LOCK(hadc);
 8007532:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007536:	2b01      	cmp	r3, #1
 8007538:	d062      	beq.n	8007600 <HAL_ADC_Start_DMA+0xe4>
 800753a:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800753c:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 800753e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8007542:	f7ff ffa7 	bl	8007494 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8007546:	4605      	mov	r5, r0
 8007548:	2800      	cmp	r0, #0
 800754a:	d154      	bne.n	80075f6 <HAL_ADC_Start_DMA+0xda>
      ADC_STATE_CLR_SET(hadc->State,
 800754c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800754e:	6821      	ldr	r1, [r4, #0]
 8007550:	4b35      	ldr	r3, [pc, #212]	; (8007628 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8007552:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8007556:	f020 0001 	bic.w	r0, r0, #1
 800755a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800755e:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8007560:	62a0      	str	r0, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007562:	d050      	beq.n	8007606 <HAL_ADC_Start_DMA+0xea>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007564:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007566:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800756a:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800756c:	684b      	ldr	r3, [r1, #4]
 800756e:	055a      	lsls	r2, r3, #21
 8007570:	d505      	bpl.n	800757e <HAL_ADC_Start_DMA+0x62>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007578:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800757c:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800757e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8007580:	f06f 0202 	mvn.w	r2, #2
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007584:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007588:	bf18      	it	ne
 800758a:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800758c:	6a20      	ldr	r0, [r4, #32]
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800758e:	bf18      	it	ne
 8007590:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8007594:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8007596:	2300      	movs	r3, #0
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007598:	f8df c094 	ldr.w	ip, [pc, #148]	; 8007630 <HAL_ADC_Start_DMA+0x114>
      __HAL_UNLOCK(hadc);
 800759c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80075a0:	4b22      	ldr	r3, [pc, #136]	; (800762c <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80075a2:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80075a4:	e9c0 c30a 	strd	ip, r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80075a8:	f8df c088 	ldr.w	ip, [pc, #136]	; 8007634 <HAL_ADC_Start_DMA+0x118>
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80075ac:	4633      	mov	r3, r6
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80075ae:	f8c0 c030 	str.w	ip, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80075b2:	f841 2c4c 	str.w	r2, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80075b6:	f851 6c44 	ldr.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80075ba:	463a      	mov	r2, r7
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80075bc:	f446 7680 	orr.w	r6, r6, #256	; 0x100
 80075c0:	f841 6c44 	str.w	r6, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80075c4:	f000 f8da 	bl	800777c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80075c8:	6823      	ldr	r3, [r4, #0]
}
 80075ca:	4628      	mov	r0, r5
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80075d2:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	bf0c      	ite	eq
 80075da:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80075de:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 80075e2:	609a      	str	r2, [r3, #8]
}
 80075e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80075e6:	4b0f      	ldr	r3, [pc, #60]	; (8007624 <HAL_ADC_Start_DMA+0x108>)
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80075ee:	d0a0      	beq.n	8007532 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 80075f0:	2501      	movs	r5, #1
}
 80075f2:	4628      	mov	r0, r5
 80075f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_UNLOCK(hadc);
 80075f6:	2300      	movs	r3, #0
 80075f8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 80075fc:	4628      	mov	r0, r5
 80075fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8007600:	2502      	movs	r5, #2
}
 8007602:	4628      	mov	r0, r5
 8007604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8007606:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8007610:	d0a8      	beq.n	8007564 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007612:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007614:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007618:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	055b      	lsls	r3, r3, #21
 800761e:	d5ae      	bpl.n	800757e <HAL_ADC_Start_DMA+0x62>
 8007620:	e7a7      	b.n	8007572 <HAL_ADC_Start_DMA+0x56>
 8007622:	bf00      	nop
 8007624:	40012400 	.word	0x40012400
 8007628:	40012800 	.word	0x40012800
 800762c:	08007351 	.word	0x08007351
 8007630:	080072fd 	.word	0x080072fd
 8007634:	08007361 	.word	0x08007361

08007638 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007638:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800763c:	4a06      	ldr	r2, [pc, #24]	; (8007658 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800763e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007640:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007642:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007646:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007648:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800764a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800764e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8007652:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	e000ed00 	.word	0xe000ed00

0800765c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800765c:	4b19      	ldr	r3, [pc, #100]	; (80076c4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800765e:	b430      	push	{r4, r5}
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007666:	f1c3 0507 	rsb	r5, r3, #7
 800766a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800766c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007670:	bf28      	it	cs
 8007672:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007674:	2c06      	cmp	r4, #6
 8007676:	d919      	bls.n	80076ac <HAL_NVIC_SetPriority+0x50>
 8007678:	f04f 34ff 	mov.w	r4, #4294967295
 800767c:	3b03      	subs	r3, #3
 800767e:	409c      	lsls	r4, r3
 8007680:	ea22 0204 	bic.w	r2, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007684:	f04f 34ff 	mov.w	r4, #4294967295
 8007688:	40ac      	lsls	r4, r5
 800768a:	ea21 0104 	bic.w	r1, r1, r4
 800768e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8007690:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007692:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8007696:	db0c      	blt.n	80076b2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007698:	0109      	lsls	r1, r1, #4
 800769a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800769e:	b2c9      	uxtb	r1, r1
 80076a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80076a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80076a8:	bc30      	pop	{r4, r5}
 80076aa:	4770      	bx	lr
 80076ac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076ae:	4613      	mov	r3, r2
 80076b0:	e7e8      	b.n	8007684 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <HAL_NVIC_SetPriority+0x6c>)
 80076b4:	f000 000f 	and.w	r0, r0, #15
 80076b8:	0109      	lsls	r1, r1, #4
 80076ba:	b2c9      	uxtb	r1, r1
 80076bc:	4403      	add	r3, r0
 80076be:	7619      	strb	r1, [r3, #24]
 80076c0:	bc30      	pop	{r4, r5}
 80076c2:	4770      	bx	lr
 80076c4:	e000ed00 	.word	0xe000ed00
 80076c8:	e000ecfc 	.word	0xe000ecfc

080076cc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80076cc:	2800      	cmp	r0, #0
 80076ce:	db07      	blt.n	80076e0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076d0:	2301      	movs	r3, #1
 80076d2:	f000 011f 	and.w	r1, r0, #31
 80076d6:	4a03      	ldr	r2, [pc, #12]	; (80076e4 <HAL_NVIC_EnableIRQ+0x18>)
 80076d8:	408b      	lsls	r3, r1
 80076da:	0940      	lsrs	r0, r0, #5
 80076dc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	e000e100 	.word	0xe000e100

080076e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076e8:	3801      	subs	r0, #1
 80076ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80076ee:	d20d      	bcs.n	800770c <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80076f0:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076f2:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076f4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076f6:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076f8:	4b05      	ldr	r3, [pc, #20]	; (8007710 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076fa:	4c06      	ldr	r4, [pc, #24]	; (8007714 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80076fc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076fe:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007702:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 8007704:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007706:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007708:	6019      	str	r1, [r3, #0]
 800770a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800770c:	2001      	movs	r0, #1
 800770e:	4770      	bx	lr
 8007710:	e000e010 	.word	0xe000e010
 8007714:	e000ed00 	.word	0xe000ed00

08007718 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007718:	b340      	cbz	r0, 800776c <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800771a:	4603      	mov	r3, r0
{
 800771c:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800771e:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007722:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007726:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 8007728:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800772a:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800772c:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800772e:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007730:	490f      	ldr	r1, [pc, #60]	; (8007770 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007732:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007734:	4f0f      	ldr	r7, [pc, #60]	; (8007774 <HAL_DMA_Init+0x5c>)
 8007736:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007738:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800773a:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800773c:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007740:	4332      	orrs	r2, r6
 8007742:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 8007744:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007746:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 8007748:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800774a:	0909      	lsrs	r1, r1, #4
 800774c:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800774e:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 8007752:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007754:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007758:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800775a:	4907      	ldr	r1, [pc, #28]	; (8007778 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 800775c:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 800775e:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 8007760:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 8007762:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 8007764:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007766:	639c      	str	r4, [r3, #56]	; 0x38
}
 8007768:	bcf0      	pop	{r4, r5, r6, r7}
 800776a:	4770      	bx	lr
    return HAL_ERROR;
 800776c:	2001      	movs	r0, #1
}
 800776e:	4770      	bx	lr
 8007770:	bffdfff8 	.word	0xbffdfff8
 8007774:	cccccccd 	.word	0xcccccccd
 8007778:	40020000 	.word	0x40020000

0800777c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800777c:	b4f0      	push	{r4, r5, r6, r7}
 800777e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007780:	f890 0020 	ldrb.w	r0, [r0, #32]
 8007784:	2801      	cmp	r0, #1
 8007786:	d038      	beq.n	80077fa <HAL_DMA_Start_IT+0x7e>
 8007788:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800778a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 800778e:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8007792:	42a8      	cmp	r0, r5
 8007794:	d005      	beq.n	80077a2 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007796:	2300      	movs	r3, #0
 8007798:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800779c:	2002      	movs	r0, #2
  }    
  return status;
}
 800779e:	bcf0      	pop	{r4, r5, r6, r7}
 80077a0:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 80077a2:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077a4:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 80077a6:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80077a8:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80077ac:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80077ae:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80077b0:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80077b2:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 80077b4:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80077b8:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80077ba:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077bc:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80077be:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 80077c0:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 80077c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077c4:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077c6:	bf0b      	itete	eq
 80077c8:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80077ca:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 80077cc:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80077ce:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80077d0:	b153      	cbz	r3, 80077e8 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80077d2:	682b      	ldr	r3, [r5, #0]
 80077d4:	f043 030e 	orr.w	r3, r3, #14
 80077d8:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80077da:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077dc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	602b      	str	r3, [r5, #0]
}
 80077e4:	bcf0      	pop	{r4, r5, r6, r7}
 80077e6:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	f023 0304 	bic.w	r3, r3, #4
 80077ee:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	f043 030a 	orr.w	r3, r3, #10
 80077f6:	602b      	str	r3, [r5, #0]
 80077f8:	e7ef      	b.n	80077da <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 80077fa:	2002      	movs	r0, #2
}
 80077fc:	bcf0      	pop	{r4, r5, r6, r7}
 80077fe:	4770      	bx	lr

08007800 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007800:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 8007804:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007806:	2a02      	cmp	r2, #2
 8007808:	d006      	beq.n	8007818 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800780a:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 800780c:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800780e:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8007810:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 8007814:	2001      	movs	r0, #1
}
 8007816:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007818:	2101      	movs	r1, #1
{
 800781a:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 800781c:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007820:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007822:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007824:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007826:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007828:	f024 040e 	bic.w	r4, r4, #14
 800782c:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800782e:	6814      	ldr	r4, [r2, #0]
  return status; 
 8007830:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8007832:	f024 0401 	bic.w	r4, r4, #1
 8007836:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783a:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 800783c:	841d      	strh	r5, [r3, #32]
}
 800783e:	bc70      	pop	{r4, r5, r6}
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop

08007844 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8007844:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8007848:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800784a:	2a02      	cmp	r2, #2
 800784c:	d003      	beq.n	8007856 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800784e:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8007850:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007852:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007854:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007856:	6802      	ldr	r2, [r0, #0]
{  
 8007858:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800785a:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800785c:	481b      	ldr	r0, [pc, #108]	; (80078cc <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800785e:	f021 010e 	bic.w	r1, r1, #14
 8007862:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007864:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007866:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8007868:	f021 0101 	bic.w	r1, r1, #1
 800786c:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800786e:	d021      	beq.n	80078b4 <HAL_DMA_Abort_IT+0x70>
 8007870:	4917      	ldr	r1, [pc, #92]	; (80078d0 <HAL_DMA_Abort_IT+0x8c>)
 8007872:	428a      	cmp	r2, r1
 8007874:	d01a      	beq.n	80078ac <HAL_DMA_Abort_IT+0x68>
 8007876:	3114      	adds	r1, #20
 8007878:	428a      	cmp	r2, r1
 800787a:	d01d      	beq.n	80078b8 <HAL_DMA_Abort_IT+0x74>
 800787c:	3114      	adds	r1, #20
 800787e:	428a      	cmp	r2, r1
 8007880:	d01d      	beq.n	80078be <HAL_DMA_Abort_IT+0x7a>
 8007882:	3114      	adds	r1, #20
 8007884:	428a      	cmp	r2, r1
 8007886:	d01d      	beq.n	80078c4 <HAL_DMA_Abort_IT+0x80>
 8007888:	3114      	adds	r1, #20
 800788a:	428a      	cmp	r2, r1
 800788c:	bf0c      	ite	eq
 800788e:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 8007892:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 8007896:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800789a:	4c0e      	ldr	r4, [pc, #56]	; (80078d4 <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 800789c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800789e:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80078a0:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 80078a2:	b129      	cbz	r1, 80078b0 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 80078a4:	4618      	mov	r0, r3
 80078a6:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 80078a8:	2000      	movs	r0, #0
}
 80078aa:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80078ac:	2210      	movs	r2, #16
 80078ae:	e7f2      	b.n	8007896 <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 80078b0:	4608      	mov	r0, r1
}
 80078b2:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80078b4:	2201      	movs	r2, #1
 80078b6:	e7ee      	b.n	8007896 <HAL_DMA_Abort_IT+0x52>
 80078b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078bc:	e7eb      	b.n	8007896 <HAL_DMA_Abort_IT+0x52>
 80078be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078c2:	e7e8      	b.n	8007896 <HAL_DMA_Abort_IT+0x52>
 80078c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80078c8:	e7e5      	b.n	8007896 <HAL_DMA_Abort_IT+0x52>
 80078ca:	bf00      	nop
 80078cc:	40020008 	.word	0x40020008
 80078d0:	4002001c 	.word	0x4002001c
 80078d4:	40020000 	.word	0x40020000

080078d8 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80078d8:	2204      	movs	r2, #4
{
 80078da:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80078dc:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80078e0:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80078e2:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80078e4:	408a      	lsls	r2, r1
 80078e6:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80078e8:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80078ea:	d01f      	beq.n	800792c <HAL_DMA_IRQHandler+0x54>
 80078ec:	076a      	lsls	r2, r5, #29
 80078ee:	d51d      	bpl.n	800792c <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	0691      	lsls	r1, r2, #26
 80078f4:	d403      	bmi.n	80078fe <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	f022 0204 	bic.w	r2, r2, #4
 80078fc:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80078fe:	4a3e      	ldr	r2, [pc, #248]	; (80079f8 <HAL_DMA_IRQHandler+0x120>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d05a      	beq.n	80079ba <HAL_DMA_IRQHandler+0xe2>
 8007904:	3214      	adds	r2, #20
 8007906:	4293      	cmp	r3, r2
 8007908:	d05f      	beq.n	80079ca <HAL_DMA_IRQHandler+0xf2>
 800790a:	3214      	adds	r2, #20
 800790c:	4293      	cmp	r3, r2
 800790e:	d066      	beq.n	80079de <HAL_DMA_IRQHandler+0x106>
 8007910:	3214      	adds	r2, #20
 8007912:	4293      	cmp	r3, r2
 8007914:	d069      	beq.n	80079ea <HAL_DMA_IRQHandler+0x112>
 8007916:	3214      	adds	r2, #20
 8007918:	4293      	cmp	r3, r2
 800791a:	d05b      	beq.n	80079d4 <HAL_DMA_IRQHandler+0xfc>
 800791c:	3214      	adds	r2, #20
 800791e:	4293      	cmp	r3, r2
 8007920:	bf0c      	ite	eq
 8007922:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8007926:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800792a:	e047      	b.n	80079bc <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800792c:	2202      	movs	r2, #2
 800792e:	408a      	lsls	r2, r1
 8007930:	4222      	tst	r2, r4
 8007932:	d022      	beq.n	800797a <HAL_DMA_IRQHandler+0xa2>
 8007934:	07aa      	lsls	r2, r5, #30
 8007936:	d520      	bpl.n	800797a <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	0691      	lsls	r1, r2, #26
 800793c:	d406      	bmi.n	800794c <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 800793e:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	f022 020a 	bic.w	r2, r2, #10
 8007946:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8007948:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800794c:	4a2a      	ldr	r2, [pc, #168]	; (80079f8 <HAL_DMA_IRQHandler+0x120>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d029      	beq.n	80079a6 <HAL_DMA_IRQHandler+0xce>
 8007952:	3214      	adds	r2, #20
 8007954:	4293      	cmp	r3, r2
 8007956:	d040      	beq.n	80079da <HAL_DMA_IRQHandler+0x102>
 8007958:	3214      	adds	r2, #20
 800795a:	4293      	cmp	r3, r2
 800795c:	d042      	beq.n	80079e4 <HAL_DMA_IRQHandler+0x10c>
 800795e:	3214      	adds	r2, #20
 8007960:	4293      	cmp	r3, r2
 8007962:	d034      	beq.n	80079ce <HAL_DMA_IRQHandler+0xf6>
 8007964:	3214      	adds	r2, #20
 8007966:	4293      	cmp	r3, r2
 8007968:	d042      	beq.n	80079f0 <HAL_DMA_IRQHandler+0x118>
 800796a:	3214      	adds	r2, #20
 800796c:	4293      	cmp	r3, r2
 800796e:	bf0c      	ite	eq
 8007970:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8007974:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8007978:	e016      	b.n	80079a8 <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800797a:	2208      	movs	r2, #8
 800797c:	408a      	lsls	r2, r1
 800797e:	4222      	tst	r2, r4
 8007980:	d019      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xde>
 8007982:	072a      	lsls	r2, r5, #28
 8007984:	d517      	bpl.n	80079b6 <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007986:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 8007988:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800798c:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800798e:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007992:	f022 020e 	bic.w	r2, r2, #14
 8007996:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 8007998:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800799a:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800799c:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800799e:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80079a0:	b14b      	cbz	r3, 80079b6 <HAL_DMA_IRQHandler+0xde>
}
 80079a2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80079a4:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079a6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80079a8:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079aa:	4c14      	ldr	r4, [pc, #80]	; (80079fc <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 80079ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079ae:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 80079b0:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80079b4:	b93a      	cbnz	r2, 80079c6 <HAL_DMA_IRQHandler+0xee>
}
 80079b6:	bc70      	pop	{r4, r5, r6}
 80079b8:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80079ba:	2304      	movs	r3, #4
 80079bc:	490f      	ldr	r1, [pc, #60]	; (80079fc <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 80079be:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80079c0:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	d0f7      	beq.n	80079b6 <HAL_DMA_IRQHandler+0xde>
}
 80079c6:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80079c8:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80079ca:	2340      	movs	r3, #64	; 0x40
 80079cc:	e7f6      	b.n	80079bc <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079d2:	e7e9      	b.n	80079a8 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80079d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80079d8:	e7f0      	b.n	80079bc <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079da:	2320      	movs	r3, #32
 80079dc:	e7e4      	b.n	80079a8 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80079de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e2:	e7eb      	b.n	80079bc <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079e8:	e7de      	b.n	80079a8 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80079ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079ee:	e7e5      	b.n	80079bc <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80079f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f4:	e7d8      	b.n	80079a8 <HAL_DMA_IRQHandler+0xd0>
 80079f6:	bf00      	nop
 80079f8:	40020008 	.word	0x40020008
 80079fc:	40020000 	.word	0x40020000

08007a00 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0;
  uint8_t nbiterations = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007a04:	4e6b      	ldr	r6, [pc, #428]	; (8007bb4 <HAL_FLASH_Program+0x1b4>)
{
 8007a06:	4680      	mov	r8, r0
  __HAL_LOCK(&pFlash);
 8007a08:	7e30      	ldrb	r0, [r6, #24]
 8007a0a:	2801      	cmp	r0, #1
 8007a0c:	f000 80c7 	beq.w	8007b9e <HAL_FLASH_Program+0x19e>
 8007a10:	461f      	mov	r7, r3
 8007a12:	2301      	movs	r3, #1
 8007a14:	460d      	mov	r5, r1
 8007a16:	4691      	mov	r9, r2
 8007a18:	7633      	strb	r3, [r6, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007a1a:	f7ff fb9f 	bl	800715c <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007a1e:	f24c 3b50 	movw	fp, #50000	; 0xc350
  uint32_t tickstart = HAL_GetTick();
 8007a22:	4604      	mov	r4, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007a24:	f8df a190 	ldr.w	sl, [pc, #400]	; 8007bb8 <HAL_FLASH_Program+0x1b8>
 8007a28:	e005      	b.n	8007a36 <HAL_FLASH_Program+0x36>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007a2a:	f7ff fb97 	bl	800715c <HAL_GetTick>
 8007a2e:	1b00      	subs	r0, r0, r4
 8007a30:	4558      	cmp	r0, fp
 8007a32:	f200 80b2 	bhi.w	8007b9a <HAL_FLASH_Program+0x19a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007a36:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007a3a:	07db      	lsls	r3, r3, #31
 8007a3c:	d4f5      	bmi.n	8007a2a <HAL_FLASH_Program+0x2a>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007a3e:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007a42:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007a44:	bf44      	itt	mi
 8007a46:	2320      	movmi	r3, #32
 8007a48:	f8ca 300c 	strmi.w	r3, [sl, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007a4c:	4b5a      	ldr	r3, [pc, #360]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	06d1      	lsls	r1, r2, #27
 8007a52:	d453      	bmi.n	8007afc <HAL_FLASH_Program+0xfc>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007a54:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007a56:	07d2      	lsls	r2, r2, #31
 8007a58:	d450      	bmi.n	8007afc <HAL_FLASH_Program+0xfc>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007a5a:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007a5c:	f013 0a04 	ands.w	sl, r3, #4
 8007a60:	d14c      	bne.n	8007afc <HAL_FLASH_Program+0xfc>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007a62:	f1b8 0f01 	cmp.w	r8, #1
 8007a66:	d006      	beq.n	8007a76 <HAL_FLASH_Program+0x76>
      nbiterations = 4U;
 8007a68:	f1b8 0f02 	cmp.w	r8, #2
 8007a6c:	bf0c      	ite	eq
 8007a6e:	f04f 0802 	moveq.w	r8, #2
 8007a72:	f04f 0804 	movne.w	r8, #4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007a76:	4c50      	ldr	r4, [pc, #320]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007a78:	eb05 0848 	add.w	r8, r5, r8, lsl #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a7c:	2200      	movs	r2, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007a7e:	f1ca 0c20 	rsb	ip, sl, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007a82:	61f2      	str	r2, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007a84:	fa07 fc0c 	lsl.w	ip, r7, ip
 8007a88:	fa29 f00a 	lsr.w	r0, r9, sl
 8007a8c:	f1aa 0120 	sub.w	r1, sl, #32
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007a90:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007a92:	ea40 000c 	orr.w	r0, r0, ip
 8007a96:	fa27 f101 	lsr.w	r1, r7, r1
 8007a9a:	4308      	orrs	r0, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007a9c:	f042 0201 	orr.w	r2, r2, #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007aa0:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007aa2:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8007aa4:	8028      	strh	r0, [r5, #0]
  uint32_t tickstart = HAL_GetTick();
 8007aa6:	f7ff fb59 	bl	800715c <HAL_GetTick>
 8007aaa:	4683      	mov	fp, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007aac:	e007      	b.n	8007abe <HAL_FLASH_Program+0xbe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007aae:	f7ff fb55 	bl	800715c <HAL_GetTick>
 8007ab2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007ab6:	eba0 000b 	sub.w	r0, r0, fp
 8007aba:	4298      	cmp	r0, r3
 8007abc:	d865      	bhi.n	8007b8a <HAL_FLASH_Program+0x18a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007abe:	68e2      	ldr	r2, [r4, #12]
 8007ac0:	07d0      	lsls	r0, r2, #31
 8007ac2:	d4f4      	bmi.n	8007aae <HAL_FLASH_Program+0xae>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007ac4:	68e2      	ldr	r2, [r4, #12]
 8007ac6:	0691      	lsls	r1, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007ac8:	bf44      	itt	mi
 8007aca:	2220      	movmi	r2, #32
 8007acc:	60e2      	strmi	r2, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007ace:	68e2      	ldr	r2, [r4, #12]
 8007ad0:	06d2      	lsls	r2, r2, #27
 8007ad2:	d432      	bmi.n	8007b3a <HAL_FLASH_Program+0x13a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007ad4:	69e2      	ldr	r2, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007ad6:	07d3      	lsls	r3, r2, #31
 8007ad8:	d42f      	bmi.n	8007b3a <HAL_FLASH_Program+0x13a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007ada:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007adc:	f010 0004 	ands.w	r0, r0, #4
 8007ae0:	d12b      	bne.n	8007b3a <HAL_FLASH_Program+0x13a>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007ae2:	6922      	ldr	r2, [r4, #16]
 8007ae4:	3502      	adds	r5, #2
 8007ae6:	f022 0201 	bic.w	r2, r2, #1
    for (index = 0U; index < nbiterations; index++)
 8007aea:	4545      	cmp	r5, r8
 8007aec:	f10a 0a10 	add.w	sl, sl, #16
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007af0:	6122      	str	r2, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 8007af2:	d1c3      	bne.n	8007a7c <HAL_FLASH_Program+0x7c>
  __HAL_UNLOCK(&pFlash);
 8007af4:	2300      	movs	r3, #0
 8007af6:	7633      	strb	r3, [r6, #24]
}
 8007af8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007afc:	4b2e      	ldr	r3, [pc, #184]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f013 0310 	ands.w	r3, r3, #16
 8007b04:	d14e      	bne.n	8007ba4 <HAL_FLASH_Program+0x1a4>
 8007b06:	2104      	movs	r1, #4
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007b08:	4a2b      	ldr	r2, [pc, #172]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007b0a:	68d2      	ldr	r2, [r2, #12]
 8007b0c:	0755      	lsls	r5, r2, #29
 8007b0e:	d504      	bpl.n	8007b1a <HAL_FLASH_Program+0x11a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8007b10:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007b12:	69f2      	ldr	r2, [r6, #28]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	61f2      	str	r2, [r6, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007b1a:	4a27      	ldr	r2, [pc, #156]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007b1c:	69d1      	ldr	r1, [r2, #28]
 8007b1e:	07cc      	lsls	r4, r1, #31
 8007b20:	d507      	bpl.n	8007b32 <HAL_FLASH_Program+0x132>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007b22:	69f1      	ldr	r1, [r6, #28]
 8007b24:	f041 0104 	orr.w	r1, r1, #4
 8007b28:	61f1      	str	r1, [r6, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007b2a:	69d1      	ldr	r1, [r2, #28]
 8007b2c:	f021 0101 	bic.w	r1, r1, #1
 8007b30:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007b32:	4a21      	ldr	r2, [pc, #132]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
    return HAL_ERROR;
 8007b34:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007b36:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 8007b38:	e7dc      	b.n	8007af4 <HAL_FLASH_Program+0xf4>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007b3a:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	f013 0310 	ands.w	r3, r3, #16
 8007b42:	d028      	beq.n	8007b96 <HAL_FLASH_Program+0x196>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007b44:	69f3      	ldr	r3, [r6, #28]
 8007b46:	2114      	movs	r1, #20
 8007b48:	f043 0302 	orr.w	r3, r3, #2
 8007b4c:	61f3      	str	r3, [r6, #28]
    flags |= FLASH_FLAG_WRPERR;
 8007b4e:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007b50:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007b52:	68d2      	ldr	r2, [r2, #12]
 8007b54:	0750      	lsls	r0, r2, #29
 8007b56:	d504      	bpl.n	8007b62 <HAL_FLASH_Program+0x162>
    flags |= FLASH_FLAG_PGERR;
 8007b58:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007b5a:	69f2      	ldr	r2, [r6, #28]
 8007b5c:	f042 0201 	orr.w	r2, r2, #1
 8007b60:	61f2      	str	r2, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007b62:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
 8007b64:	69d1      	ldr	r1, [r2, #28]
 8007b66:	07c9      	lsls	r1, r1, #31
 8007b68:	d507      	bpl.n	8007b7a <HAL_FLASH_Program+0x17a>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007b6a:	69f1      	ldr	r1, [r6, #28]
 8007b6c:	f041 0104 	orr.w	r1, r1, #4
 8007b70:	61f1      	str	r1, [r6, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007b72:	69d1      	ldr	r1, [r2, #28]
 8007b74:	f021 0101 	bic.w	r1, r1, #1
 8007b78:	61d1      	str	r1, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007b7a:	4a0f      	ldr	r2, [pc, #60]	; (8007bb8 <HAL_FLASH_Program+0x1b8>)
    return HAL_ERROR;
 8007b7c:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007b7e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b80:	6913      	ldr	r3, [r2, #16]
 8007b82:	f023 0301 	bic.w	r3, r3, #1
 8007b86:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 8007b88:	e7b4      	b.n	8007af4 <HAL_FLASH_Program+0xf4>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	2003      	movs	r0, #3
 8007b8e:	f023 0301 	bic.w	r3, r3, #1
 8007b92:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8007b94:	e7ae      	b.n	8007af4 <HAL_FLASH_Program+0xf4>
 8007b96:	2104      	movs	r1, #4
 8007b98:	e7da      	b.n	8007b50 <HAL_FLASH_Program+0x150>
 8007b9a:	2003      	movs	r0, #3
 8007b9c:	e7aa      	b.n	8007af4 <HAL_FLASH_Program+0xf4>
  __HAL_LOCK(&pFlash);
 8007b9e:	2002      	movs	r0, #2
}
 8007ba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007ba4:	69f3      	ldr	r3, [r6, #28]
 8007ba6:	2114      	movs	r1, #20
 8007ba8:	f043 0302 	orr.w	r3, r3, #2
 8007bac:	61f3      	str	r3, [r6, #28]
    flags |= FLASH_FLAG_WRPERR;
 8007bae:	2310      	movs	r3, #16
 8007bb0:	e7aa      	b.n	8007b08 <HAL_FLASH_Program+0x108>
 8007bb2:	bf00      	nop
 8007bb4:	20001978 	.word	0x20001978
 8007bb8:	40022000 	.word	0x40022000

08007bbc <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <HAL_FLASH_Unlock+0x1c>)
 8007bbe:	6918      	ldr	r0, [r3, #16]
 8007bc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bc4:	d006      	beq.n	8007bd4 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007bc6:	4905      	ldr	r1, [pc, #20]	; (8007bdc <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007bc8:	4a05      	ldr	r2, [pc, #20]	; (8007be0 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007bca:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007bcc:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007bce:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8007bd0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	40022000 	.word	0x40022000
 8007bdc:	45670123 	.word	0x45670123
 8007be0:	cdef89ab 	.word	0xcdef89ab

08007be4 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007be4:	4a03      	ldr	r2, [pc, #12]	; (8007bf4 <HAL_FLASH_Lock+0x10>)
}
 8007be6:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007be8:	6913      	ldr	r3, [r2, #16]
 8007bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bee:	6113      	str	r3, [r2, #16]
}
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	40022000 	.word	0x40022000

08007bf8 <FLASH_WaitForLastOperation>:
{
 8007bf8:	b570      	push	{r4, r5, r6, lr}
 8007bfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007bfc:	f7ff faae 	bl	800715c <HAL_GetTick>
 8007c00:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007c02:	4e26      	ldr	r6, [pc, #152]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
 8007c04:	1c60      	adds	r0, r4, #1
 8007c06:	d136      	bne.n	8007c76 <FLASH_WaitForLastOperation+0x7e>
 8007c08:	4a24      	ldr	r2, [pc, #144]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
 8007c0a:	68d3      	ldr	r3, [r2, #12]
 8007c0c:	07d9      	lsls	r1, r3, #31
 8007c0e:	d4fc      	bmi.n	8007c0a <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007c10:	4b22      	ldr	r3, [pc, #136]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
 8007c12:	68da      	ldr	r2, [r3, #12]
 8007c14:	0696      	lsls	r6, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007c16:	bf44      	itt	mi
 8007c18:	2220      	movmi	r2, #32
 8007c1a:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007c1c:	4b1f      	ldr	r3, [pc, #124]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	06d5      	lsls	r5, r2, #27
 8007c22:	d407      	bmi.n	8007c34 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007c24:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007c26:	07d4      	lsls	r4, r2, #31
 8007c28:	d404      	bmi.n	8007c34 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007c2a:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8007c2c:	f010 0004 	ands.w	r0, r0, #4
 8007c30:	d100      	bne.n	8007c34 <FLASH_WaitForLastOperation+0x3c>
}
 8007c32:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8007c34:	4b19      	ldr	r3, [pc, #100]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f013 0310 	ands.w	r3, r3, #16
 8007c3c:	d126      	bne.n	8007c8c <FLASH_WaitForLastOperation+0x94>
 8007c3e:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007c40:	4a16      	ldr	r2, [pc, #88]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
 8007c42:	68d2      	ldr	r2, [r2, #12]
 8007c44:	0750      	lsls	r0, r2, #29
 8007c46:	d505      	bpl.n	8007c54 <FLASH_WaitForLastOperation+0x5c>
    flags |= FLASH_FLAG_PGERR;
 8007c48:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007c4a:	4915      	ldr	r1, [pc, #84]	; (8007ca0 <FLASH_WaitForLastOperation+0xa8>)
 8007c4c:	69ca      	ldr	r2, [r1, #28]
 8007c4e:	f042 0201 	orr.w	r2, r2, #1
 8007c52:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8007c54:	4a11      	ldr	r2, [pc, #68]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
 8007c56:	69d1      	ldr	r1, [r2, #28]
 8007c58:	07c9      	lsls	r1, r1, #31
 8007c5a:	d508      	bpl.n	8007c6e <FLASH_WaitForLastOperation+0x76>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8007c5c:	4810      	ldr	r0, [pc, #64]	; (8007ca0 <FLASH_WaitForLastOperation+0xa8>)
 8007c5e:	69c1      	ldr	r1, [r0, #28]
 8007c60:	f041 0104 	orr.w	r1, r1, #4
 8007c64:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8007c66:	69d1      	ldr	r1, [r2, #28]
 8007c68:	f021 0101 	bic.w	r1, r1, #1
 8007c6c:	61d1      	str	r1, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007c6e:	4a0b      	ldr	r2, [pc, #44]	; (8007c9c <FLASH_WaitForLastOperation+0xa4>)
    return HAL_ERROR;
 8007c70:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007c72:	60d3      	str	r3, [r2, #12]
}
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007c76:	68f3      	ldr	r3, [r6, #12]
 8007c78:	07db      	lsls	r3, r3, #31
 8007c7a:	d5c9      	bpl.n	8007c10 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007c7c:	b124      	cbz	r4, 8007c88 <FLASH_WaitForLastOperation+0x90>
 8007c7e:	f7ff fa6d 	bl	800715c <HAL_GetTick>
 8007c82:	1b40      	subs	r0, r0, r5
 8007c84:	42a0      	cmp	r0, r4
 8007c86:	d9bd      	bls.n	8007c04 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8007c88:	2003      	movs	r0, #3
}
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007c8c:	4804      	ldr	r0, [pc, #16]	; (8007ca0 <FLASH_WaitForLastOperation+0xa8>)
 8007c8e:	2114      	movs	r1, #20
 8007c90:	69c2      	ldr	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8007c92:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007c94:	f042 0202 	orr.w	r2, r2, #2
 8007c98:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8007c9a:	e7d1      	b.n	8007c40 <FLASH_WaitForLastOperation+0x48>
 8007c9c:	40022000 	.word	0x40022000
 8007ca0:	20001978 	.word	0x20001978

08007ca4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007ca8:	4e2d      	ldr	r6, [pc, #180]	; (8007d60 <HAL_FLASHEx_Erase+0xbc>)
 8007caa:	7e33      	ldrb	r3, [r6, #24]
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d054      	beq.n	8007d5a <HAL_FLASHEx_Erase+0xb6>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007cb4:	6803      	ldr	r3, [r0, #0]
 8007cb6:	4681      	mov	r9, r0
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d031      	beq.n	8007d20 <HAL_FLASHEx_Erase+0x7c>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007cc0:	4688      	mov	r8, r1
 8007cc2:	f7ff ff99 	bl	8007bf8 <FLASH_WaitForLastOperation>
 8007cc6:	bb80      	cbnz	r0, 8007d2a <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8007cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ccc:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007cd0:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 8007cd4:	eb05 2383 	add.w	r3, r5, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 8007cd8:	429d      	cmp	r5, r3
 8007cda:	d226      	bcs.n	8007d2a <HAL_FLASHEx_Erase+0x86>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cdc:	4607      	mov	r7, r0
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007cde:	4c21      	ldr	r4, [pc, #132]	; (8007d64 <HAL_FLASHEx_Erase+0xc0>)
 8007ce0:	e007      	b.n	8007cf2 <HAL_FLASHEx_Erase+0x4e>
            address += FLASH_PAGE_SIZE)
 8007ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8007ce6:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 8007cea:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8007cee:	42ab      	cmp	r3, r5
 8007cf0:	d91c      	bls.n	8007d2c <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cf2:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007cf4:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cf6:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007cfa:	f043 0302 	orr.w	r3, r3, #2
 8007cfe:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007d00:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007d02:	6923      	ldr	r3, [r4, #16]
 8007d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d08:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d0a:	f7ff ff75 	bl	8007bf8 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007d0e:	6923      	ldr	r3, [r4, #16]
 8007d10:	f023 0302 	bic.w	r3, r3, #2
 8007d14:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d0e3      	beq.n	8007ce2 <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 8007d1a:	f8c8 5000 	str.w	r5, [r8]
            break;
 8007d1e:	e005      	b.n	8007d2c <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007d20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d24:	f7ff ff68 	bl	8007bf8 <FLASH_WaitForLastOperation>
 8007d28:	b120      	cbz	r0, 8007d34 <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 8007d2a:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	7633      	strb	r3, [r6, #24]
}
 8007d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007d34:	4c0b      	ldr	r4, [pc, #44]	; (8007d64 <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007d36:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007d38:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d3a:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007d3e:	f043 0304 	orr.w	r3, r3, #4
 8007d42:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d4a:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d4c:	f7ff ff54 	bl	8007bf8 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	f023 0304 	bic.w	r3, r3, #4
 8007d56:	6123      	str	r3, [r4, #16]
 8007d58:	e7e8      	b.n	8007d2c <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 8007d5a:	2002      	movs	r0, #2
}
 8007d5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d60:	20001978 	.word	0x20001978
 8007d64:	40022000 	.word	0x40022000

08007d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d6c:	680c      	ldr	r4, [r1, #0]
{
 8007d6e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d70:	2c00      	cmp	r4, #0
 8007d72:	f000 809e 	beq.w	8007eb2 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 8007d76:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007d78:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8007f70 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 8007d7c:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007d7e:	4f77      	ldr	r7, [pc, #476]	; (8007f5c <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 8007d80:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 8007f74 <HAL_GPIO_Init+0x20c>
 8007d84:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8007f78 <HAL_GPIO_Init+0x210>
 8007d88:	9000      	str	r0, [sp, #0]
 8007d8a:	e004      	b.n	8007d96 <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 8007d8c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007d8e:	fa34 f203 	lsrs.w	r2, r4, r3
 8007d92:	f000 808e 	beq.w	8007eb2 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 8007d96:	2201      	movs	r2, #1
 8007d98:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 8007d9a:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d9e:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 8007da2:	d1f3      	bne.n	8007d8c <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 8007da4:	684c      	ldr	r4, [r1, #4]
 8007da6:	2c12      	cmp	r4, #18
 8007da8:	f200 8086 	bhi.w	8007eb8 <HAL_GPIO_Init+0x150>
 8007dac:	2c12      	cmp	r4, #18
 8007dae:	d80c      	bhi.n	8007dca <HAL_GPIO_Init+0x62>
 8007db0:	e8df f004 	tbb	[pc, r4]
 8007db4:	0abcbf8a 	.word	0x0abcbf8a
 8007db8:	0b0b0b0b 	.word	0x0b0b0b0b
 8007dbc:	0b0b0b0b 	.word	0x0b0b0b0b
 8007dc0:	0b0b0b0b 	.word	0x0b0b0b0b
 8007dc4:	b90b      	.short	0xb90b
 8007dc6:	b6          	.byte	0xb6
 8007dc7:	00          	.byte	0x00
 8007dc8:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007dca:	2dff      	cmp	r5, #255	; 0xff
 8007dcc:	f200 8083 	bhi.w	8007ed6 <HAL_GPIO_Init+0x16e>
 8007dd0:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007dd4:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8007dd8:	240f      	movs	r4, #15
 8007dda:	f8d9 2000 	ldr.w	r2, [r9]
 8007dde:	fa04 fb0a 	lsl.w	fp, r4, sl
 8007de2:	ea22 020b 	bic.w	r2, r2, fp
 8007de6:	fa06 fa0a 	lsl.w	sl, r6, sl
 8007dea:	ea42 020a 	orr.w	r2, r2, sl
 8007dee:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007df2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007df6:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8007dfa:	f000 808f 	beq.w	8007f1c <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007dfe:	f8dc a018 	ldr.w	sl, [ip, #24]
 8007e02:	f023 0203 	bic.w	r2, r3, #3
 8007e06:	f04a 0a01 	orr.w	sl, sl, #1
 8007e0a:	f8cc a018 	str.w	sl, [ip, #24]
 8007e0e:	f8dc a018 	ldr.w	sl, [ip, #24]
 8007e12:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007e16:	f00a 0a01 	and.w	sl, sl, #1
 8007e1a:	f8cd a00c 	str.w	sl, [sp, #12]
 8007e1e:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e22:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007e26:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e2a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8007e2e:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007e32:	fa04 f40a 	lsl.w	r4, r4, sl
 8007e36:	ea2b 0004 	bic.w	r0, fp, r4
 8007e3a:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007e3c:	9c00      	ldr	r4, [sp, #0]
 8007e3e:	4848      	ldr	r0, [pc, #288]	; (8007f60 <HAL_GPIO_Init+0x1f8>)
 8007e40:	4284      	cmp	r4, r0
 8007e42:	d013      	beq.n	8007e6c <HAL_GPIO_Init+0x104>
 8007e44:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8007e48:	4284      	cmp	r4, r0
 8007e4a:	d07d      	beq.n	8007f48 <HAL_GPIO_Init+0x1e0>
 8007e4c:	4845      	ldr	r0, [pc, #276]	; (8007f64 <HAL_GPIO_Init+0x1fc>)
 8007e4e:	4284      	cmp	r4, r0
 8007e50:	d071      	beq.n	8007f36 <HAL_GPIO_Init+0x1ce>
 8007e52:	4845      	ldr	r0, [pc, #276]	; (8007f68 <HAL_GPIO_Init+0x200>)
 8007e54:	4284      	cmp	r4, r0
 8007e56:	bf0c      	ite	eq
 8007e58:	f04f 0b03 	moveq.w	fp, #3
 8007e5c:	f04f 0b04 	movne.w	fp, #4
 8007e60:	9801      	ldr	r0, [sp, #4]
 8007e62:	fa0b fa0a 	lsl.w	sl, fp, sl
 8007e66:	ea40 000a 	orr.w	r0, r0, sl
 8007e6a:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 8007e6c:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e6e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 8007e72:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	bf14      	ite	ne
 8007e78:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007e7a:	43aa      	biceq	r2, r5
 8007e7c:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8007e7e:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e80:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8007e84:	bf14      	ite	ne
 8007e86:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007e88:	43aa      	biceq	r2, r5
 8007e8a:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8007e8c:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007e8e:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8007e92:	bf14      	ite	ne
 8007e94:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007e96:	43aa      	biceq	r2, r5
 8007e98:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007e9a:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8007e9e:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ea0:	d039      	beq.n	8007f16 <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 8007ea2:	4315      	orrs	r5, r2
 8007ea4:	60fd      	str	r5, [r7, #12]
 8007ea6:	680c      	ldr	r4, [r1, #0]
	position++;
 8007ea8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007eaa:	fa34 f203 	lsrs.w	r2, r4, r3
 8007eae:	f47f af72 	bne.w	8007d96 <HAL_GPIO_Init+0x2e>
  }
}
 8007eb2:	b005      	add	sp, #20
 8007eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8007eb8:	4544      	cmp	r4, r8
 8007eba:	d005      	beq.n	8007ec8 <HAL_GPIO_Init+0x160>
 8007ebc:	d913      	bls.n	8007ee6 <HAL_GPIO_Init+0x17e>
 8007ebe:	4574      	cmp	r4, lr
 8007ec0:	d002      	beq.n	8007ec8 <HAL_GPIO_Init+0x160>
 8007ec2:	482a      	ldr	r0, [pc, #168]	; (8007f6c <HAL_GPIO_Init+0x204>)
 8007ec4:	4284      	cmp	r4, r0
 8007ec6:	d180      	bne.n	8007dca <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007ec8:	688c      	ldr	r4, [r1, #8]
 8007eca:	b9e4      	cbnz	r4, 8007f06 <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ecc:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007ece:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ed2:	f67f af7d 	bls.w	8007dd0 <HAL_GPIO_Init+0x68>
 8007ed6:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007ed8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8007edc:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8007ee0:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8007ee4:	e778      	b.n	8007dd8 <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 8007ee6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8007f7c <HAL_GPIO_Init+0x214>
 8007eea:	454c      	cmp	r4, r9
 8007eec:	d0ec      	beq.n	8007ec8 <HAL_GPIO_Init+0x160>
 8007eee:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8007ef2:	454c      	cmp	r4, r9
 8007ef4:	d0e8      	beq.n	8007ec8 <HAL_GPIO_Init+0x160>
 8007ef6:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8007efa:	454c      	cmp	r4, r9
 8007efc:	f47f af65 	bne.w	8007dca <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007f00:	688c      	ldr	r4, [r1, #8]
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	d0e2      	beq.n	8007ecc <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 8007f06:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007f08:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007f0a:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 8007f0e:	bf0c      	ite	eq
 8007f10:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 8007f12:	6142      	strne	r2, [r0, #20]
 8007f14:	e759      	b.n	8007dca <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007f16:	ea22 0505 	bic.w	r5, r2, r5
 8007f1a:	60fd      	str	r5, [r7, #12]
 8007f1c:	680c      	ldr	r4, [r1, #0]
 8007f1e:	e735      	b.n	8007d8c <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007f20:	68ce      	ldr	r6, [r1, #12]
 8007f22:	360c      	adds	r6, #12
          break;
 8007f24:	e751      	b.n	8007dca <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007f26:	68ce      	ldr	r6, [r1, #12]
 8007f28:	3604      	adds	r6, #4
          break;
 8007f2a:	e74e      	b.n	8007dca <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007f2c:	68ce      	ldr	r6, [r1, #12]
 8007f2e:	3608      	adds	r6, #8
          break;
 8007f30:	e74b      	b.n	8007dca <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007f32:	68ce      	ldr	r6, [r1, #12]
          break;
 8007f34:	e749      	b.n	8007dca <HAL_GPIO_Init+0x62>
 8007f36:	f04f 0b02 	mov.w	fp, #2
 8007f3a:	9801      	ldr	r0, [sp, #4]
 8007f3c:	fa0b fa0a 	lsl.w	sl, fp, sl
 8007f40:	ea40 000a 	orr.w	r0, r0, sl
 8007f44:	9001      	str	r0, [sp, #4]
 8007f46:	e791      	b.n	8007e6c <HAL_GPIO_Init+0x104>
 8007f48:	f04f 0b01 	mov.w	fp, #1
 8007f4c:	9801      	ldr	r0, [sp, #4]
 8007f4e:	fa0b fa0a 	lsl.w	sl, fp, sl
 8007f52:	ea40 000a 	orr.w	r0, r0, sl
 8007f56:	9001      	str	r0, [sp, #4]
 8007f58:	e788      	b.n	8007e6c <HAL_GPIO_Init+0x104>
 8007f5a:	bf00      	nop
 8007f5c:	40010400 	.word	0x40010400
 8007f60:	40010800 	.word	0x40010800
 8007f64:	40011000 	.word	0x40011000
 8007f68:	40011400 	.word	0x40011400
 8007f6c:	10320000 	.word	0x10320000
 8007f70:	40021000 	.word	0x40021000
 8007f74:	10220000 	.word	0x10220000
 8007f78:	10310000 	.word	0x10310000
 8007f7c:	10120000 	.word	0x10120000

08007f80 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007f80:	6883      	ldr	r3, [r0, #8]
 8007f82:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007f84:	bf14      	ite	ne
 8007f86:	2001      	movne	r0, #1
 8007f88:	2000      	moveq	r0, #0
 8007f8a:	4770      	bx	lr

08007f8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f8c:	b902      	cbnz	r2, 8007f90 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007f8e:	0409      	lsls	r1, r1, #16
 8007f90:	6101      	str	r1, [r0, #16]
  }
}
 8007f92:	4770      	bx	lr

08007f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007f94:	4a04      	ldr	r2, [pc, #16]	; (8007fa8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8007f96:	6951      	ldr	r1, [r2, #20]
 8007f98:	4201      	tst	r1, r0
 8007f9a:	d100      	bne.n	8007f9e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8007f9c:	4770      	bx	lr
{
 8007f9e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007fa0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007fa2:	f7f9 fa5d 	bl	8001460 <HAL_GPIO_EXTI_Callback>
  }
}
 8007fa6:	bd08      	pop	{r3, pc}
 8007fa8:	40010400 	.word	0x40010400

08007fac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	4605      	mov	r5, r0
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	4617      	mov	r7, r2
 8007fb4:	1c72      	adds	r2, r6, #1
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fb6:	682c      	ldr	r4, [r5, #0]
 8007fb8:	d003      	beq.n	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x16>
 8007fba:	e009      	b.n	8007fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x24>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fbc:	6963      	ldr	r3, [r4, #20]
 8007fbe:	055b      	lsls	r3, r3, #21
 8007fc0:	d424      	bmi.n	800800c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fc2:	6963      	ldr	r3, [r4, #20]
 8007fc4:	43db      	mvns	r3, r3
 8007fc6:	f013 0302 	ands.w	r3, r3, #2
 8007fca:	d1f7      	bne.n	8007fbc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x10>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8007fcc:	4618      	mov	r0, r3
}
 8007fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fd0:	6963      	ldr	r3, [r4, #20]
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	f013 0302 	ands.w	r3, r3, #2
 8007fd8:	d0f8      	beq.n	8007fcc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007fda:	6963      	ldr	r3, [r4, #20]
 8007fdc:	0559      	lsls	r1, r3, #21
 8007fde:	d415      	bmi.n	800800c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fe0:	f7ff f8bc 	bl	800715c <HAL_GetTick>
 8007fe4:	1bc0      	subs	r0, r0, r7
 8007fe6:	4286      	cmp	r6, r0
 8007fe8:	d301      	bcc.n	8007fee <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x42>
 8007fea:	2e00      	cmp	r6, #0
 8007fec:	d1e2      	bne.n	8007fb4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007fee:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ff0:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ff2:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ff4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ff8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ffc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007ffe:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008002:	f043 0320 	orr.w	r3, r3, #32
        return HAL_ERROR;
 8008006:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008008:	642b      	str	r3, [r5, #64]	; 0x40
}
 800800a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 800800c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800800e:	f46f 6080 	mvn.w	r0, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8008012:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008014:	6823      	ldr	r3, [r4, #0]
 8008016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800801a:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800801c:	6160      	str	r0, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800801e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008020:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008024:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008028:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800802a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800802e:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8008032:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008034:	642b      	str	r3, [r5, #64]	; 0x40
}
 8008036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008038 <I2C_RequestMemoryWrite>:
{
 8008038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800803c:	4616      	mov	r6, r2
 800803e:	461f      	mov	r7, r3
 8008040:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008042:	6800      	ldr	r0, [r0, #0]
{
 8008044:	460d      	mov	r5, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008046:	6801      	ldr	r1, [r0, #0]
{
 8008048:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800804a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800804e:	6001      	str	r1, [r0, #0]
{
 8008050:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	; 0x28
 8008054:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008058:	d111      	bne.n	800807e <I2C_RequestMemoryWrite+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800805a:	6943      	ldr	r3, [r0, #20]
 800805c:	07d9      	lsls	r1, r3, #31
 800805e:	d5fc      	bpl.n	800805a <I2C_RequestMemoryWrite+0x22>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008060:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8008064:	6105      	str	r5, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008066:	4642      	mov	r2, r8
 8008068:	4649      	mov	r1, r9
 800806a:	4620      	mov	r0, r4
 800806c:	f7ff ff9e 	bl	8007fac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8008070:	4605      	mov	r5, r0
 8008072:	b190      	cbz	r0, 800809a <I2C_RequestMemoryWrite+0x62>
    return HAL_ERROR;
 8008074:	2501      	movs	r5, #1
}
 8008076:	4628      	mov	r0, r5
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800807e:	6943      	ldr	r3, [r0, #20]
 8008080:	07da      	lsls	r2, r3, #31
 8008082:	d4ed      	bmi.n	8008060 <I2C_RequestMemoryWrite+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008084:	f7ff f86a 	bl	800715c <HAL_GetTick>
 8008088:	eba0 0008 	sub.w	r0, r0, r8
 800808c:	4581      	cmp	r9, r0
 800808e:	d32e      	bcc.n	80080ee <I2C_RequestMemoryWrite+0xb6>
 8008090:	f1b9 0f00 	cmp.w	r9, #0
 8008094:	d02b      	beq.n	80080ee <I2C_RequestMemoryWrite+0xb6>
 8008096:	6820      	ldr	r0, [r4, #0]
 8008098:	e7dc      	b.n	8008054 <I2C_RequestMemoryWrite+0x1c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800809a:	6820      	ldr	r0, [r4, #0]
 800809c:	9501      	str	r5, [sp, #4]
 800809e:	6943      	ldr	r3, [r0, #20]
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	6983      	ldr	r3, [r0, #24]
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80080a8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80080ac:	d16b      	bne.n	8008186 <I2C_RequestMemoryWrite+0x14e>
 80080ae:	6943      	ldr	r3, [r0, #20]
 80080b0:	0619      	lsls	r1, r3, #24
 80080b2:	d435      	bmi.n	8008120 <I2C_RequestMemoryWrite+0xe8>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80080b4:	6943      	ldr	r3, [r0, #20]
 80080b6:	055a      	lsls	r2, r3, #21
 80080b8:	d5f9      	bpl.n	80080ae <I2C_RequestMemoryWrite+0x76>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80080ba:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80080bc:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080be:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80080c2:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80080c4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80080c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080ca:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080ce:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80080d4:	f043 0304 	orr.w	r3, r3, #4
 80080d8:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080dc:	2b04      	cmp	r3, #4
 80080de:	d1c9      	bne.n	8008074 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080e0:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 80080e2:	2501      	movs	r5, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080e4:	6813      	ldr	r3, [r2, #0]
 80080e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080ea:	6013      	str	r3, [r2, #0]
 80080ec:	e7c3      	b.n	8008076 <I2C_RequestMemoryWrite+0x3e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80080ee:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80080f0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80080f2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80080f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80080f8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80080fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080fe:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008100:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8008104:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008108:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800810a:	680b      	ldr	r3, [r1, #0]
 800810c:	05d8      	lsls	r0, r3, #23
 800810e:	d50f      	bpl.n	8008130 <I2C_RequestMemoryWrite+0xf8>
    return HAL_TIMEOUT;
 8008110:	2503      	movs	r5, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008112:	f44f 7300 	mov.w	r3, #512	; 0x200
}
 8008116:	4628      	mov	r0, r5
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008118:	6423      	str	r3, [r4, #64]	; 0x40
}
 800811a:	b003      	add	sp, #12
 800811c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008120:	2f01      	cmp	r7, #1
 8008122:	d10a      	bne.n	800813a <I2C_RequestMemoryWrite+0x102>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008124:	b2f6      	uxtb	r6, r6
 8008126:	6106      	str	r6, [r0, #16]
}
 8008128:	4628      	mov	r0, r5
 800812a:	b003      	add	sp, #12
 800812c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_TIMEOUT;
 8008130:	2503      	movs	r5, #3
}
 8008132:	4628      	mov	r0, r5
 8008134:	b003      	add	sp, #12
 8008136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800813a:	0a33      	lsrs	r3, r6, #8
 800813c:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800813e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008142:	d131      	bne.n	80081a8 <I2C_RequestMemoryWrite+0x170>
 8008144:	6943      	ldr	r3, [r0, #20]
 8008146:	0619      	lsls	r1, r3, #24
 8008148:	d4ec      	bmi.n	8008124 <I2C_RequestMemoryWrite+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800814a:	6943      	ldr	r3, [r0, #20]
 800814c:	055a      	lsls	r2, r3, #21
 800814e:	d5f9      	bpl.n	8008144 <I2C_RequestMemoryWrite+0x10c>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008150:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8008152:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008154:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8008158:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 800815a:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800815c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008160:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008164:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8008166:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800816a:	f043 0304 	orr.w	r3, r3, #4
 800816e:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008172:	2b04      	cmp	r3, #4
 8008174:	f47f af7e 	bne.w	8008074 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008178:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 800817a:	2501      	movs	r5, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800817c:	6813      	ldr	r3, [r2, #0]
 800817e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	e777      	b.n	8008076 <I2C_RequestMemoryWrite+0x3e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008186:	6943      	ldr	r3, [r0, #20]
 8008188:	061b      	lsls	r3, r3, #24
 800818a:	d4c9      	bmi.n	8008120 <I2C_RequestMemoryWrite+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800818c:	6943      	ldr	r3, [r0, #20]
 800818e:	055b      	lsls	r3, r3, #21
 8008190:	d493      	bmi.n	80080ba <I2C_RequestMemoryWrite+0x82>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008192:	f7fe ffe3 	bl	800715c <HAL_GetTick>
 8008196:	eba0 0008 	sub.w	r0, r0, r8
 800819a:	4581      	cmp	r9, r0
 800819c:	d315      	bcc.n	80081ca <I2C_RequestMemoryWrite+0x192>
 800819e:	f1b9 0f00 	cmp.w	r9, #0
 80081a2:	d012      	beq.n	80081ca <I2C_RequestMemoryWrite+0x192>
 80081a4:	6820      	ldr	r0, [r4, #0]
 80081a6:	e77f      	b.n	80080a8 <I2C_RequestMemoryWrite+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081a8:	6943      	ldr	r3, [r0, #20]
 80081aa:	061b      	lsls	r3, r3, #24
 80081ac:	d4ba      	bmi.n	8008124 <I2C_RequestMemoryWrite+0xec>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081ae:	6943      	ldr	r3, [r0, #20]
 80081b0:	055f      	lsls	r7, r3, #21
 80081b2:	d4cd      	bmi.n	8008150 <I2C_RequestMemoryWrite+0x118>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081b4:	f7fe ffd2 	bl	800715c <HAL_GetTick>
 80081b8:	eba0 0308 	sub.w	r3, r0, r8
 80081bc:	4599      	cmp	r9, r3
 80081be:	d312      	bcc.n	80081e6 <I2C_RequestMemoryWrite+0x1ae>
 80081c0:	f1b9 0f00 	cmp.w	r9, #0
 80081c4:	d00f      	beq.n	80081e6 <I2C_RequestMemoryWrite+0x1ae>
 80081c6:	6820      	ldr	r0, [r4, #0]
 80081c8:	e7b9      	b.n	800813e <I2C_RequestMemoryWrite+0x106>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081ca:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80081cc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081ce:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80081d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081d4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80081da:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081de:	f043 0320 	orr.w	r3, r3, #32
 80081e2:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80081e4:	e779      	b.n	80080da <I2C_RequestMemoryWrite+0xa2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081e6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80081e8:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80081ea:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80081ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80081f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80081f6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80081fa:	f043 0320 	orr.w	r3, r3, #32
 80081fe:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8008200:	e7b6      	b.n	8008170 <I2C_RequestMemoryWrite+0x138>
 8008202:	bf00      	nop

08008204 <I2C_RequestMemoryRead>:
{
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	4698      	mov	r8, r3
 800820a:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800820c:	6800      	ldr	r0, [r0, #0]
{
 800820e:	468a      	mov	sl, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008210:	6801      	ldr	r1, [r0, #0]
{
 8008212:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008214:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008218:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800821a:	6802      	ldr	r2, [r0, #0]
{
 800821c:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800821e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008222:	6002      	str	r2, [r0, #0]
{
 8008224:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 8008228:	1c75      	adds	r5, r6, #1
 800822a:	d111      	bne.n	8008250 <I2C_RequestMemoryRead+0x4c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800822c:	6943      	ldr	r3, [r0, #20]
 800822e:	07d9      	lsls	r1, r3, #31
 8008230:	d5fc      	bpl.n	800822c <I2C_RequestMemoryRead+0x28>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008232:	f00a 03fe 	and.w	r3, sl, #254	; 0xfe
 8008236:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008238:	464a      	mov	r2, r9
 800823a:	4631      	mov	r1, r6
 800823c:	4620      	mov	r0, r4
 800823e:	f7ff feb5 	bl	8007fac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008242:	fa5f fa8a 	uxtb.w	sl, sl
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008246:	b180      	cbz	r0, 800826a <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8008248:	2001      	movs	r0, #1
}
 800824a:	b002      	add	sp, #8
 800824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008250:	6943      	ldr	r3, [r0, #20]
 8008252:	07da      	lsls	r2, r3, #31
 8008254:	d4ed      	bmi.n	8008232 <I2C_RequestMemoryRead+0x2e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008256:	f7fe ff81 	bl	800715c <HAL_GetTick>
 800825a:	eba0 0009 	sub.w	r0, r0, r9
 800825e:	4286      	cmp	r6, r0
 8008260:	d32c      	bcc.n	80082bc <I2C_RequestMemoryRead+0xb8>
 8008262:	2e00      	cmp	r6, #0
 8008264:	d02a      	beq.n	80082bc <I2C_RequestMemoryRead+0xb8>
 8008266:	6820      	ldr	r0, [r4, #0]
 8008268:	e7de      	b.n	8008228 <I2C_RequestMemoryRead+0x24>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800826a:	6825      	ldr	r5, [r4, #0]
 800826c:	9001      	str	r0, [sp, #4]
 800826e:	696b      	ldr	r3, [r5, #20]
 8008270:	9301      	str	r3, [sp, #4]
 8008272:	69ab      	ldr	r3, [r5, #24]
 8008274:	9301      	str	r3, [sp, #4]
 8008276:	9b01      	ldr	r3, [sp, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008278:	1c70      	adds	r0, r6, #1
 800827a:	d176      	bne.n	800836a <I2C_RequestMemoryRead+0x166>
 800827c:	696b      	ldr	r3, [r5, #20]
 800827e:	0619      	lsls	r1, r3, #24
 8008280:	d434      	bmi.n	80082ec <I2C_RequestMemoryRead+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008282:	696b      	ldr	r3, [r5, #20]
 8008284:	055a      	lsls	r2, r3, #21
 8008286:	d5f9      	bpl.n	800827c <I2C_RequestMemoryRead+0x78>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008288:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 800828a:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800828c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8008290:	6169      	str	r1, [r5, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008292:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008298:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800829c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800829e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082a2:	f043 0304 	orr.w	r3, r3, #4
 80082a6:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082aa:	2b04      	cmp	r3, #4
 80082ac:	d1cc      	bne.n	8008248 <I2C_RequestMemoryRead+0x44>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ae:	6822      	ldr	r2, [r4, #0]
    return HAL_ERROR;
 80082b0:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b2:	6813      	ldr	r3, [r2, #0]
 80082b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e7c6      	b.n	800824a <I2C_RequestMemoryRead+0x46>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082bc:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80082be:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082c0:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082c6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082cc:	6821      	ldr	r1, [r4, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082ce:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80082d2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082d6:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80082d8:	680b      	ldr	r3, [r1, #0]
 80082da:	05de      	lsls	r6, r3, #23
 80082dc:	d514      	bpl.n	8008308 <I2C_RequestMemoryRead+0x104>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082de:	f44f 7300 	mov.w	r3, #512	; 0x200
    return HAL_TIMEOUT;
 80082e2:	2003      	movs	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082e4:	6423      	str	r3, [r4, #64]	; 0x40
}
 80082e6:	b002      	add	sp, #8
 80082e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082ec:	f1b8 0f01 	cmp.w	r8, #1
 80082f0:	d10e      	bne.n	8008310 <I2C_RequestMemoryRead+0x10c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082f2:	b2ff      	uxtb	r7, r7
 80082f4:	612f      	str	r7, [r5, #16]
 80082f6:	1c72      	adds	r2, r6, #1
 80082f8:	d146      	bne.n	8008388 <I2C_RequestMemoryRead+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80082fa:	696b      	ldr	r3, [r5, #20]
 80082fc:	061b      	lsls	r3, r3, #24
 80082fe:	d412      	bmi.n	8008326 <I2C_RequestMemoryRead+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008300:	696b      	ldr	r3, [r5, #20]
 8008302:	055f      	lsls	r7, r3, #21
 8008304:	d5f9      	bpl.n	80082fa <I2C_RequestMemoryRead+0xf6>
 8008306:	e7bf      	b.n	8008288 <I2C_RequestMemoryRead+0x84>
    return HAL_TIMEOUT;
 8008308:	2003      	movs	r0, #3
}
 800830a:	b002      	add	sp, #8
 800830c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008310:	0a3b      	lsrs	r3, r7, #8
 8008312:	612b      	str	r3, [r5, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008314:	1c71      	adds	r1, r6, #1
 8008316:	d147      	bne.n	80083a8 <I2C_RequestMemoryRead+0x1a4>
 8008318:	696b      	ldr	r3, [r5, #20]
 800831a:	061a      	lsls	r2, r3, #24
 800831c:	d4e9      	bmi.n	80082f2 <I2C_RequestMemoryRead+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800831e:	696b      	ldr	r3, [r5, #20]
 8008320:	055b      	lsls	r3, r3, #21
 8008322:	d5f9      	bpl.n	8008318 <I2C_RequestMemoryRead+0x114>
 8008324:	e7b0      	b.n	8008288 <I2C_RequestMemoryRead+0x84>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008326:	682b      	ldr	r3, [r5, #0]
 8008328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800832c:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800832e:	1c71      	adds	r1, r6, #1
 8008330:	d10e      	bne.n	8008350 <I2C_RequestMemoryRead+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008332:	696b      	ldr	r3, [r5, #20]
 8008334:	07da      	lsls	r2, r3, #31
 8008336:	d5fc      	bpl.n	8008332 <I2C_RequestMemoryRead+0x12e>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008338:	f04a 0101 	orr.w	r1, sl, #1
 800833c:	6129      	str	r1, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800833e:	464a      	mov	r2, r9
 8008340:	4631      	mov	r1, r6
 8008342:	4620      	mov	r0, r4
 8008344:	f7ff fe32 	bl	8007fac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
    return HAL_TIMEOUT;
 8008348:	3800      	subs	r0, #0
 800834a:	bf18      	it	ne
 800834c:	2001      	movne	r0, #1
 800834e:	e77c      	b.n	800824a <I2C_RequestMemoryRead+0x46>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008350:	696b      	ldr	r3, [r5, #20]
 8008352:	07db      	lsls	r3, r3, #31
 8008354:	d4f0      	bmi.n	8008338 <I2C_RequestMemoryRead+0x134>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008356:	f7fe ff01 	bl	800715c <HAL_GetTick>
 800835a:	eba0 0009 	sub.w	r0, r0, r9
 800835e:	4286      	cmp	r6, r0
 8008360:	d3ac      	bcc.n	80082bc <I2C_RequestMemoryRead+0xb8>
 8008362:	2e00      	cmp	r6, #0
 8008364:	d0aa      	beq.n	80082bc <I2C_RequestMemoryRead+0xb8>
 8008366:	6825      	ldr	r5, [r4, #0]
 8008368:	e7e1      	b.n	800832e <I2C_RequestMemoryRead+0x12a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800836a:	696b      	ldr	r3, [r5, #20]
 800836c:	061b      	lsls	r3, r3, #24
 800836e:	d4bd      	bmi.n	80082ec <I2C_RequestMemoryRead+0xe8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008370:	696b      	ldr	r3, [r5, #20]
 8008372:	055b      	lsls	r3, r3, #21
 8008374:	d488      	bmi.n	8008288 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008376:	f7fe fef1 	bl	800715c <HAL_GetTick>
 800837a:	eba0 0009 	sub.w	r0, r0, r9
 800837e:	4286      	cmp	r6, r0
 8008380:	d322      	bcc.n	80083c8 <I2C_RequestMemoryRead+0x1c4>
 8008382:	b30e      	cbz	r6, 80083c8 <I2C_RequestMemoryRead+0x1c4>
 8008384:	6825      	ldr	r5, [r4, #0]
 8008386:	e777      	b.n	8008278 <I2C_RequestMemoryRead+0x74>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008388:	696b      	ldr	r3, [r5, #20]
 800838a:	0618      	lsls	r0, r3, #24
 800838c:	d4cb      	bmi.n	8008326 <I2C_RequestMemoryRead+0x122>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800838e:	696b      	ldr	r3, [r5, #20]
 8008390:	0559      	lsls	r1, r3, #21
 8008392:	f53f af79 	bmi.w	8008288 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008396:	f7fe fee1 	bl	800715c <HAL_GetTick>
 800839a:	eba0 0309 	sub.w	r3, r0, r9
 800839e:	429e      	cmp	r6, r3
 80083a0:	d312      	bcc.n	80083c8 <I2C_RequestMemoryRead+0x1c4>
 80083a2:	b18e      	cbz	r6, 80083c8 <I2C_RequestMemoryRead+0x1c4>
 80083a4:	6825      	ldr	r5, [r4, #0]
 80083a6:	e7a6      	b.n	80082f6 <I2C_RequestMemoryRead+0xf2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80083a8:	696b      	ldr	r3, [r5, #20]
 80083aa:	0618      	lsls	r0, r3, #24
 80083ac:	d4a1      	bmi.n	80082f2 <I2C_RequestMemoryRead+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80083ae:	696b      	ldr	r3, [r5, #20]
 80083b0:	0558      	lsls	r0, r3, #21
 80083b2:	f53f af69 	bmi.w	8008288 <I2C_RequestMemoryRead+0x84>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083b6:	f7fe fed1 	bl	800715c <HAL_GetTick>
 80083ba:	eba0 0309 	sub.w	r3, r0, r9
 80083be:	429e      	cmp	r6, r3
 80083c0:	d302      	bcc.n	80083c8 <I2C_RequestMemoryRead+0x1c4>
 80083c2:	b10e      	cbz	r6, 80083c8 <I2C_RequestMemoryRead+0x1c4>
 80083c4:	6825      	ldr	r5, [r4, #0]
 80083c6:	e7a5      	b.n	8008314 <I2C_RequestMemoryRead+0x110>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083c8:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80083ca:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083cc:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80083ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083d2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80083d8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083dc:	f043 0320 	orr.w	r3, r3, #32
 80083e0:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80083e2:	e761      	b.n	80082a8 <I2C_RequestMemoryRead+0xa4>

080083e4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f000 80b5 	beq.w	8008554 <HAL_I2C_Init+0x170>
{
 80083ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80083ec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80083f0:	4604      	mov	r4, r0
 80083f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 8094 	beq.w	8008524 <HAL_I2C_Init+0x140>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80083fc:	2224      	movs	r2, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80083fe:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008400:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	f022 0201 	bic.w	r2, r2, #1
 800840a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008412:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800841a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800841c:	f000 fe98 	bl	8009150 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008420:	6865      	ldr	r5, [r4, #4]
 8008422:	4b4d      	ldr	r3, [pc, #308]	; (8008558 <HAL_I2C_Init+0x174>)
 8008424:	429d      	cmp	r5, r3
 8008426:	d84c      	bhi.n	80084c2 <HAL_I2C_Init+0xde>
 8008428:	4b4c      	ldr	r3, [pc, #304]	; (800855c <HAL_I2C_Init+0x178>)
 800842a:	4298      	cmp	r0, r3
 800842c:	d978      	bls.n	8008520 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800842e:	1e42      	subs	r2, r0, #1
 8008430:	006d      	lsls	r5, r5, #1
 8008432:	fbb2 f2f5 	udiv	r2, r2, r5
 8008436:	f640 76fc 	movw	r6, #4092	; 0xffc
  freqrange = I2C_FREQRANGE(pclk1);
 800843a:	4949      	ldr	r1, [pc, #292]	; (8008560 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800843c:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800843e:	fba1 1000 	umull	r1, r0, r1, r0
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008442:	6859      	ldr	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008444:	3201      	adds	r2, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008446:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800844a:	ea41 4190 	orr.w	r1, r1, r0, lsr #18
 800844e:	6059      	str	r1, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008450:	6a19      	ldr	r1, [r3, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8008452:	0c80      	lsrs	r0, r0, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008454:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8008458:	3001      	adds	r0, #1
 800845a:	4308      	orrs	r0, r1
 800845c:	6218      	str	r0, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800845e:	69d9      	ldr	r1, [r3, #28]
 8008460:	4232      	tst	r2, r6
 8008462:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008466:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800846a:	d160      	bne.n	800852e <HAL_I2C_Init+0x14a>
 800846c:	2204      	movs	r2, #4
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800846e:	2500      	movs	r5, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8008470:	2620      	movs	r6, #32
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008472:	430a      	orrs	r2, r1
 8008474:	61da      	str	r2, [r3, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008476:	6819      	ldr	r1, [r3, #0]
 8008478:	e9d4 2007 	ldrd	r2, r0, [r4, #28]
 800847c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8008480:	4302      	orrs	r2, r0
 8008482:	430a      	orrs	r2, r1
 8008484:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008486:	6899      	ldr	r1, [r3, #8]
 8008488:	e9d4 0203 	ldrd	r0, r2, [r4, #12]
 800848c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8008490:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008494:	4302      	orrs	r2, r0
 8008496:	430a      	orrs	r2, r1
 8008498:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800849a:	68d9      	ldr	r1, [r3, #12]
 800849c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
 80084a0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80084a4:	4302      	orrs	r2, r0
 80084a6:	430a      	orrs	r2, r1
 80084a8:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 80084aa:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80084ac:	4628      	mov	r0, r5
  __HAL_I2C_ENABLE(hi2c);
 80084ae:	f042 0201 	orr.w	r2, r2, #1
 80084b2:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084b4:	6425      	str	r5, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80084b6:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084ba:	6325      	str	r5, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084bc:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 80084c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80084c2:	4b28      	ldr	r3, [pc, #160]	; (8008564 <HAL_I2C_Init+0x180>)
 80084c4:	4298      	cmp	r0, r3
 80084c6:	d92b      	bls.n	8008520 <HAL_I2C_Init+0x13c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084c8:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 80084cc:	4e24      	ldr	r6, [pc, #144]	; (8008560 <HAL_I2C_Init+0x17c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084ce:	6823      	ldr	r3, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80084d0:	fba6 2600 	umull	r2, r6, r6, r0
 80084d4:	0cb2      	lsrs	r2, r6, #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084d6:	fb01 f102 	mul.w	r1, r1, r2
 80084da:	4f23      	ldr	r7, [pc, #140]	; (8008568 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084dc:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084de:	fba7 7101 	umull	r7, r1, r7, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80084e2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80084e6:	ea42 4296 	orr.w	r2, r2, r6, lsr #18
 80084ea:	605a      	str	r2, [r3, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80084ec:	6a1a      	ldr	r2, [r3, #32]
 80084ee:	0989      	lsrs	r1, r1, #6
 80084f0:	3101      	adds	r1, #1
 80084f2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80084f6:	4311      	orrs	r1, r2
 80084f8:	6219      	str	r1, [r3, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80084fa:	69d9      	ldr	r1, [r3, #28]
 80084fc:	68a6      	ldr	r6, [r4, #8]
 80084fe:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8008502:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8008506:	b9ae      	cbnz	r6, 8008534 <HAL_I2C_Init+0x150>
 8008508:	3801      	subs	r0, #1
 800850a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800850e:	fbb0 f2f2 	udiv	r2, r0, r2
 8008512:	3201      	adds	r2, #1
 8008514:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008518:	b1d2      	cbz	r2, 8008550 <HAL_I2C_Init+0x16c>
 800851a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800851e:	e7a6      	b.n	800846e <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8008520:	2001      	movs	r0, #1
}
 8008522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8008524:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008528:	f7fd fa62 	bl	80059f0 <HAL_I2C_MspInit>
 800852c:	e766      	b.n	80083fc <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800852e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008532:	e79c      	b.n	800846e <HAL_I2C_Init+0x8a>
 8008534:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8008538:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 800853c:	1e42      	subs	r2, r0, #1
 800853e:	fbb2 f2f5 	udiv	r2, r2, r5
 8008542:	3201      	adds	r2, #1
 8008544:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008548:	b112      	cbz	r2, 8008550 <HAL_I2C_Init+0x16c>
 800854a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800854e:	e78e      	b.n	800846e <HAL_I2C_Init+0x8a>
 8008550:	2201      	movs	r2, #1
 8008552:	e78c      	b.n	800846e <HAL_I2C_Init+0x8a>
    return HAL_ERROR;
 8008554:	2001      	movs	r0, #1
}
 8008556:	4770      	bx	lr
 8008558:	000186a0 	.word	0x000186a0
 800855c:	001e847f 	.word	0x001e847f
 8008560:	431bde83 	.word	0x431bde83
 8008564:	003d08ff 	.word	0x003d08ff
 8008568:	10624dd3 	.word	0x10624dd3

0800856c <HAL_I2C_Mem_Write>:
{
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	4604      	mov	r4, r0
 8008572:	b083      	sub	sp, #12
 8008574:	4699      	mov	r9, r3
 8008576:	460f      	mov	r7, r1
 8008578:	4690      	mov	r8, r2
 800857a:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800857e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8008580:	f7fe fdec 	bl	800715c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008584:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008588:	2b20      	cmp	r3, #32
 800858a:	d004      	beq.n	8008596 <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 800858c:	2702      	movs	r7, #2
}
 800858e:	4638      	mov	r0, r7
 8008590:	b003      	add	sp, #12
 8008592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008596:	4605      	mov	r5, r0
 8008598:	e005      	b.n	80085a6 <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800859a:	f7fe fddf 	bl	800715c <HAL_GetTick>
 800859e:	1b40      	subs	r0, r0, r5
 80085a0:	2819      	cmp	r0, #25
 80085a2:	f200 80c3 	bhi.w	800872c <HAL_I2C_Mem_Write+0x1c0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085a6:	6822      	ldr	r2, [r4, #0]
 80085a8:	6990      	ldr	r0, [r2, #24]
 80085aa:	43c0      	mvns	r0, r0
 80085ac:	f010 0b02 	ands.w	fp, r0, #2
 80085b0:	d0f3      	beq.n	800859a <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80085b2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d0e8      	beq.n	800858c <HAL_I2C_Mem_Write+0x20>
 80085ba:	2301      	movs	r3, #1
 80085bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085c0:	6813      	ldr	r3, [r2, #0]
 80085c2:	07d8      	lsls	r0, r3, #31
 80085c4:	f140 8092 	bpl.w	80086ec <HAL_I2C_Mem_Write+0x180>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085c8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085cc:	f04f 0c40 	mov.w	ip, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085d0:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085d2:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085d4:	464b      	mov	r3, r9
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085d6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80085da:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085dc:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80085e0:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085e4:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80085e6:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80085ea:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085ee:	4639      	mov	r1, r7
    hi2c->pBuffPtr    = pData;
 80085f0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085f2:	f5a0 3080 	sub.w	r0, r0, #65536	; 0x10000
    hi2c->pBuffPtr    = pData;
 80085f6:	6267      	str	r7, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80085f8:	4642      	mov	r2, r8
 80085fa:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80085fe:	62e0      	str	r0, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008600:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008604:	4620      	mov	r0, r4
 8008606:	f7ff fd17 	bl	8008038 <I2C_RequestMemoryWrite>
 800860a:	4607      	mov	r7, r0
 800860c:	bb00      	cbnz	r0, 8008650 <HAL_I2C_Mem_Write+0xe4>
    while (hi2c->XferSize > 0U)
 800860e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008610:	2b00      	cmp	r3, #0
 8008612:	f000 80b9 	beq.w	8008788 <HAL_I2C_Mem_Write+0x21c>
 8008616:	6823      	ldr	r3, [r4, #0]
 8008618:	1c72      	adds	r2, r6, #1
 800861a:	d16c      	bne.n	80086f6 <HAL_I2C_Mem_Write+0x18a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800861c:	695a      	ldr	r2, [r3, #20]
 800861e:	0610      	lsls	r0, r2, #24
 8008620:	d41b      	bmi.n	800865a <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008622:	695a      	ldr	r2, [r3, #20]
 8008624:	0551      	lsls	r1, r2, #21
 8008626:	d5f9      	bpl.n	800861c <HAL_I2C_Mem_Write+0xb0>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008628:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800862a:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800862e:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008630:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008632:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008634:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008638:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800863c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800863e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008642:	f043 0304 	orr.w	r3, r3, #4
 8008646:	6423      	str	r3, [r4, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800864a:	2b04      	cmp	r3, #4
 800864c:	f000 8089 	beq.w	8008762 <HAL_I2C_Mem_Write+0x1f6>
      return HAL_ERROR;
 8008650:	2701      	movs	r7, #1
}
 8008652:	4638      	mov	r0, r7
 8008654:	b003      	add	sp, #12
 8008656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800865a:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800865e:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008662:	46f4      	mov	ip, lr
 8008664:	f81c 2b01 	ldrb.w	r2, [ip], #1
      hi2c->XferSize--;
 8008668:	f108 31ff 	add.w	r1, r8, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800866c:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800866e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8008670:	b289      	uxth	r1, r1
      hi2c->XferCount--;
 8008672:	3a01      	subs	r2, #1
 8008674:	b292      	uxth	r2, r2
 8008676:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008678:	6958      	ldr	r0, [r3, #20]
      hi2c->pBuffPtr++;
 800867a:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800867e:	0740      	lsls	r0, r0, #29
      hi2c->XferSize--;
 8008680:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008682:	d530      	bpl.n	80086e6 <HAL_I2C_Mem_Write+0x17a>
 8008684:	bb09      	cbnz	r1, 80086ca <HAL_I2C_Mem_Write+0x15e>
 8008686:	1c72      	adds	r2, r6, #1
 8008688:	d172      	bne.n	8008770 <HAL_I2C_Mem_Write+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800868a:	695a      	ldr	r2, [r3, #20]
 800868c:	0750      	lsls	r0, r2, #29
 800868e:	d45b      	bmi.n	8008748 <HAL_I2C_Mem_Write+0x1dc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008690:	695a      	ldr	r2, [r3, #20]
 8008692:	0551      	lsls	r1, r2, #21
 8008694:	d5f9      	bpl.n	800868a <HAL_I2C_Mem_Write+0x11e>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8008696:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008698:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 800869c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800869e:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80086a0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80086a2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086a6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80086ac:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086b0:	f043 0304 	orr.w	r3, r3, #4
 80086b4:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d1c9      	bne.n	8008650 <HAL_I2C_Mem_Write+0xe4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086bc:	6822      	ldr	r2, [r4, #0]
      return HAL_ERROR;
 80086be:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086c0:	6813      	ldr	r3, [r2, #0]
 80086c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	e761      	b.n	800858e <HAL_I2C_Mem_Write+0x22>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086ca:	f89e 2001 	ldrb.w	r2, [lr, #1]
        hi2c->XferSize--;
 80086ce:	f1a8 0102 	sub.w	r1, r8, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80086d2:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 80086d4:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80086d6:	b289      	uxth	r1, r1
        hi2c->XferCount--;
 80086d8:	3801      	subs	r0, #1
        hi2c->pBuffPtr++;
 80086da:	f10e 0202 	add.w	r2, lr, #2
        hi2c->XferCount--;
 80086de:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 80086e0:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 80086e2:	6262      	str	r2, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80086e4:	8560      	strh	r0, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80086e6:	2900      	cmp	r1, #0
 80086e8:	d196      	bne.n	8008618 <HAL_I2C_Mem_Write+0xac>
 80086ea:	e7cc      	b.n	8008686 <HAL_I2C_Mem_Write+0x11a>
      __HAL_I2C_ENABLE(hi2c);
 80086ec:	6813      	ldr	r3, [r2, #0]
 80086ee:	f043 0301 	orr.w	r3, r3, #1
 80086f2:	6013      	str	r3, [r2, #0]
 80086f4:	e768      	b.n	80085c8 <HAL_I2C_Mem_Write+0x5c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80086f6:	695a      	ldr	r2, [r3, #20]
 80086f8:	0612      	lsls	r2, r2, #24
 80086fa:	d4ae      	bmi.n	800865a <HAL_I2C_Mem_Write+0xee>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086fc:	695a      	ldr	r2, [r3, #20]
 80086fe:	0551      	lsls	r1, r2, #21
 8008700:	d492      	bmi.n	8008628 <HAL_I2C_Mem_Write+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008702:	f7fe fd2b 	bl	800715c <HAL_GetTick>
 8008706:	1b40      	subs	r0, r0, r5
 8008708:	4286      	cmp	r6, r0
 800870a:	d301      	bcc.n	8008710 <HAL_I2C_Mem_Write+0x1a4>
 800870c:	2e00      	cmp	r6, #0
 800870e:	d182      	bne.n	8008616 <HAL_I2C_Mem_Write+0xaa>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008710:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008712:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008714:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008716:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800871a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800871e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008720:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008724:	f043 0320 	orr.w	r3, r3, #32
 8008728:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800872a:	e78d      	b.n	8008648 <HAL_I2C_Mem_Write+0xdc>
        hi2c->State             = HAL_I2C_STATE_READY;
 800872c:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800872e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008732:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008736:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800873a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800873c:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008740:	f043 0320 	orr.w	r3, r3, #32
 8008744:	6423      	str	r3, [r4, #64]	; 0x40
 8008746:	e721      	b.n	800858c <HAL_I2C_Mem_Write+0x20>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008748:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800874a:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008752:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008754:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008758:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800875c:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 8008760:	e715      	b.n	800858e <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008762:	6822      	ldr	r2, [r4, #0]
        return HAL_ERROR;
 8008764:	2701      	movs	r7, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008766:	6813      	ldr	r3, [r2, #0]
 8008768:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800876c:	6013      	str	r3, [r2, #0]
 800876e:	e70e      	b.n	800858e <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008770:	695a      	ldr	r2, [r3, #20]
 8008772:	0752      	lsls	r2, r2, #29
 8008774:	d4e8      	bmi.n	8008748 <HAL_I2C_Mem_Write+0x1dc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	0551      	lsls	r1, r2, #21
 800877a:	d48c      	bmi.n	8008696 <HAL_I2C_Mem_Write+0x12a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800877c:	f7fe fcee 	bl	800715c <HAL_GetTick>
 8008780:	1b43      	subs	r3, r0, r5
 8008782:	429e      	cmp	r6, r3
 8008784:	d302      	bcc.n	800878c <HAL_I2C_Mem_Write+0x220>
 8008786:	b10e      	cbz	r6, 800878c <HAL_I2C_Mem_Write+0x220>
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	e77c      	b.n	8008686 <HAL_I2C_Mem_Write+0x11a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800878c:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800878e:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008790:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008796:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800879a:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800879c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087a0:	f043 0320 	orr.w	r3, r3, #32
 80087a4:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80087a6:	e786      	b.n	80086b6 <HAL_I2C_Mem_Write+0x14a>

080087a8 <HAL_I2C_Mem_Read>:
{
 80087a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80087ae:	2500      	movs	r5, #0
{
 80087b0:	b089      	sub	sp, #36	; 0x24
 80087b2:	469a      	mov	sl, r3
 80087b4:	4688      	mov	r8, r1
 80087b6:	4691      	mov	r9, r2
 80087b8:	f8bd b04c 	ldrh.w	fp, [sp, #76]	; 0x4c
 80087bc:	9f14      	ldr	r7, [sp, #80]	; 0x50
  __IO uint32_t count = 0U;
 80087be:	9503      	str	r5, [sp, #12]
  uint32_t tickstart = HAL_GetTick();
 80087c0:	f7fe fccc 	bl	800715c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80087c4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80087c8:	2b20      	cmp	r3, #32
 80087ca:	d004      	beq.n	80087d6 <HAL_I2C_Mem_Read+0x2e>
      return HAL_BUSY;
 80087cc:	2502      	movs	r5, #2
}
 80087ce:	4628      	mov	r0, r5
 80087d0:	b009      	add	sp, #36	; 0x24
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	4606      	mov	r6, r0
 80087d8:	e005      	b.n	80087e6 <HAL_I2C_Mem_Read+0x3e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087da:	f7fe fcbf 	bl	800715c <HAL_GetTick>
 80087de:	1b80      	subs	r0, r0, r6
 80087e0:	2819      	cmp	r0, #25
 80087e2:	f200 80ca 	bhi.w	800897a <HAL_I2C_Mem_Read+0x1d2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	6995      	ldr	r5, [r2, #24]
 80087ea:	43ed      	mvns	r5, r5
 80087ec:	f015 0502 	ands.w	r5, r5, #2
 80087f0:	d0f3      	beq.n	80087da <HAL_I2C_Mem_Read+0x32>
    __HAL_LOCK(hi2c);
 80087f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	d0e8      	beq.n	80087cc <HAL_I2C_Mem_Read+0x24>
 80087fa:	2301      	movs	r3, #1
 80087fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008800:	6813      	ldr	r3, [r2, #0]
 8008802:	07d9      	lsls	r1, r3, #31
 8008804:	d538      	bpl.n	8008878 <HAL_I2C_Mem_Read+0xd0>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008806:	f04f 0c22 	mov.w	ip, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800880a:	2540      	movs	r5, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800880c:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800880e:	6811      	ldr	r1, [r2, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008810:	4653      	mov	r3, sl
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008812:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8008816:	6011      	str	r1, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008818:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800881c:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008820:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8008822:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008826:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8008828:	9812      	ldr	r0, [sp, #72]	; 0x48
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800882a:	f8df c320 	ldr.w	ip, [pc, #800]	; 8008b4c <HAL_I2C_Mem_Read+0x3a4>
    hi2c->pBuffPtr    = pData;
 800882e:	6260      	str	r0, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008830:	464a      	mov	r2, r9
 8008832:	e9cd 7600 	strd	r7, r6, [sp]
 8008836:	4641      	mov	r1, r8
    hi2c->XferSize    = hi2c->XferCount;
 8008838:	8525      	strh	r5, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800883a:	4620      	mov	r0, r4
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800883c:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008840:	f7ff fce0 	bl	8008204 <I2C_RequestMemoryRead>
 8008844:	4605      	mov	r5, r0
 8008846:	2800      	cmp	r0, #0
 8008848:	f040 80a4 	bne.w	8008994 <HAL_I2C_Mem_Read+0x1ec>
    if (hi2c->XferSize == 0U)
 800884c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800884e:	b9c2      	cbnz	r2, 8008882 <HAL_I2C_Mem_Read+0xda>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	9004      	str	r0, [sp, #16]
 8008854:	695a      	ldr	r2, [r3, #20]
 8008856:	9204      	str	r2, [sp, #16]
 8008858:	699a      	ldr	r2, [r3, #24]
 800885a:	9204      	str	r2, [sp, #16]
 800885c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008864:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008866:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8008868:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800886a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800886e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008872:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008876:	e7aa      	b.n	80087ce <HAL_I2C_Mem_Read+0x26>
      __HAL_I2C_ENABLE(hi2c);
 8008878:	6813      	ldr	r3, [r2, #0]
 800887a:	f043 0301 	orr.w	r3, r3, #1
 800887e:	6013      	str	r3, [r2, #0]
 8008880:	e7c1      	b.n	8008806 <HAL_I2C_Mem_Read+0x5e>
    else if (hi2c->XferSize == 1U)
 8008882:	2a01      	cmp	r2, #1
 8008884:	f000 814f 	beq.w	8008b26 <HAL_I2C_Mem_Read+0x37e>
    else if (hi2c->XferSize == 2U)
 8008888:	2a02      	cmp	r2, #2
 800888a:	f000 80d3 	beq.w	8008a34 <HAL_I2C_Mem_Read+0x28c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	6819      	ldr	r1, [r3, #0]
 8008892:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008896:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008898:	9007      	str	r0, [sp, #28]
 800889a:	6959      	ldr	r1, [r3, #20]
 800889c:	9107      	str	r1, [sp, #28]
 800889e:	6999      	ldr	r1, [r3, #24]
 80088a0:	9107      	str	r1, [sp, #28]
 80088a2:	9907      	ldr	r1, [sp, #28]
      if (hi2c->XferSize <= 3U)
 80088a4:	2a03      	cmp	r2, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80088a6:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 8008b50 <HAL_I2C_Mem_Read+0x3a8>
 80088aa:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 8008b54 <HAL_I2C_Mem_Read+0x3ac>
      if (hi2c->XferSize <= 3U)
 80088ae:	d832      	bhi.n	8008916 <HAL_I2C_Mem_Read+0x16e>
        if (hi2c->XferSize == 1U)
 80088b0:	2a01      	cmp	r2, #1
 80088b2:	f000 80fe 	beq.w	8008ab2 <HAL_I2C_Mem_Read+0x30a>
        else if (hi2c->XferSize == 2U)
 80088b6:	2a02      	cmp	r2, #2
 80088b8:	d17c      	bne.n	80089b4 <HAL_I2C_Mem_Read+0x20c>
 80088ba:	1c79      	adds	r1, r7, #1
 80088bc:	f040 80d2 	bne.w	8008a64 <HAL_I2C_Mem_Read+0x2bc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088c0:	695a      	ldr	r2, [r3, #20]
 80088c2:	0752      	lsls	r2, r2, #29
 80088c4:	d5fc      	bpl.n	80088c0 <HAL_I2C_Mem_Read+0x118>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80088c6:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088c8:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088d2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80088d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80088da:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80088dc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80088de:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80088e0:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80088e2:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80088e4:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80088e6:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80088e8:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80088ea:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80088ec:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088f2:	6912      	ldr	r2, [r2, #16]
 80088f4:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80088f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80088f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80088fa:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 80088fc:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80088fe:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8008900:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8008902:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8008904:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8008906:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8008908:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800890a:	8522      	strh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800890c:	2a00      	cmp	r2, #0
 800890e:	d0aa      	beq.n	8008866 <HAL_I2C_Mem_Read+0xbe>
      if (hi2c->XferSize <= 3U)
 8008910:	2a03      	cmp	r2, #3
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	d9cc      	bls.n	80088b0 <HAL_I2C_Mem_Read+0x108>
 8008916:	b95f      	cbnz	r7, 8008930 <HAL_I2C_Mem_Read+0x188>
 8008918:	e0b0      	b.n	8008a7c <HAL_I2C_Mem_Read+0x2d4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800891a:	695a      	ldr	r2, [r3, #20]
 800891c:	06d0      	lsls	r0, r2, #27
 800891e:	f100 80da 	bmi.w	8008ad6 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008922:	f7fe fc1b 	bl	800715c <HAL_GetTick>
 8008926:	1b80      	subs	r0, r0, r6
 8008928:	4287      	cmp	r7, r0
 800892a:	f0c0 80b0 	bcc.w	8008a8e <HAL_I2C_Mem_Read+0x2e6>
 800892e:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008930:	695a      	ldr	r2, [r3, #20]
 8008932:	0652      	lsls	r2, r2, #25
 8008934:	d5f1      	bpl.n	800891a <HAL_I2C_Mem_Read+0x172>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800893a:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 800893c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800893e:	6821      	ldr	r1, [r4, #0]
        hi2c->XferCount--;
 8008940:	3b01      	subs	r3, #1
 8008942:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008944:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8008946:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008948:	6948      	ldr	r0, [r1, #20]
        hi2c->pBuffPtr++;
 800894a:	6a63      	ldr	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 800894c:	3a01      	subs	r2, #1
 800894e:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8008950:	f103 0c01 	add.w	ip, r3, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008954:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8008956:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8008958:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800895c:	d5d6      	bpl.n	800890c <HAL_I2C_Mem_Read+0x164>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800895e:	690a      	ldr	r2, [r1, #16]
 8008960:	705a      	strb	r2, [r3, #1]
          hi2c->XferSize--;
 8008962:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008964:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8008966:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008968:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800896a:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 800896c:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800896e:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8008970:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8008972:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008974:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8008976:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferCount--;
 8008978:	e7c8      	b.n	800890c <HAL_I2C_Mem_Read+0x164>
        hi2c->State             = HAL_I2C_STATE_READY;
 800897a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800897c:	6325      	str	r5, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800897e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008982:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008986:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008988:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800898c:	f043 0320 	orr.w	r3, r3, #32
 8008990:	6423      	str	r3, [r4, #64]	; 0x40
 8008992:	e71b      	b.n	80087cc <HAL_I2C_Mem_Read+0x24>
      return HAL_ERROR;
 8008994:	2501      	movs	r5, #1
}
 8008996:	4628      	mov	r0, r5
 8008998:	b009      	add	sp, #36	; 0x24
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800899e:	695a      	ldr	r2, [r3, #20]
 80089a0:	0752      	lsls	r2, r2, #29
 80089a2:	d40c      	bmi.n	80089be <HAL_I2C_Mem_Read+0x216>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a4:	f7fe fbda 	bl	800715c <HAL_GetTick>
 80089a8:	1b80      	subs	r0, r0, r6
 80089aa:	4287      	cmp	r7, r0
 80089ac:	d36f      	bcc.n	8008a8e <HAL_I2C_Mem_Read+0x2e6>
 80089ae:	2f00      	cmp	r7, #0
 80089b0:	d06d      	beq.n	8008a8e <HAL_I2C_Mem_Read+0x2e6>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	1c78      	adds	r0, r7, #1
 80089b6:	d1f2      	bne.n	800899e <HAL_I2C_Mem_Read+0x1f6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089b8:	695a      	ldr	r2, [r3, #20]
 80089ba:	0751      	lsls	r1, r2, #29
 80089bc:	d5fc      	bpl.n	80089b8 <HAL_I2C_Mem_Read+0x210>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80089c6:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089cc:	6912      	ldr	r2, [r2, #16]
 80089ce:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80089d0:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->XferCount--;
 80089d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80089d6:	08db      	lsrs	r3, r3, #3
 80089d8:	fba8 1303 	umull	r1, r3, r8, r3
          hi2c->XferSize--;
 80089dc:	8d20      	ldrh	r0, [r4, #40]	; 0x28
          hi2c->pBuffPtr++;
 80089de:	6a61      	ldr	r1, [r4, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80089e0:	0a1b      	lsrs	r3, r3, #8
          hi2c->XferCount--;
 80089e2:	3a01      	subs	r2, #1
 80089e4:	b292      	uxth	r2, r2
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80089e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 80089ea:	8562      	strh	r2, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 80089ec:	3801      	subs	r0, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80089ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->pBuffPtr++;
 80089f2:	1c4a      	adds	r2, r1, #1
 80089f4:	6262      	str	r2, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80089f6:	8520      	strh	r0, [r4, #40]	; 0x28
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	e003      	b.n	8008a04 <HAL_I2C_Mem_Read+0x25c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	695a      	ldr	r2, [r3, #20]
 8008a00:	0750      	lsls	r0, r2, #29
 8008a02:	d47b      	bmi.n	8008afc <HAL_I2C_Mem_Read+0x354>
            count--;
 8008a04:	9b03      	ldr	r3, [sp, #12]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1f5      	bne.n	80089fc <HAL_I2C_Mem_Read+0x254>
              hi2c->State               = HAL_I2C_STATE_READY;
 8008a10:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8008a12:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8008a14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008a1e:	f042 0220 	orr.w	r2, r2, #32
 8008a22:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8008a24:	b662      	cpsie	i
              return HAL_ERROR;
 8008a26:	2501      	movs	r5, #1
}
 8008a28:	4628      	mov	r0, r5
              __HAL_UNLOCK(hi2c);
 8008a2a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8008a2e:	b009      	add	sp, #36	; 0x24
 8008a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a34:	6822      	ldr	r2, [r4, #0]
 8008a36:	6813      	ldr	r3, [r2, #0]
 8008a38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a3c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a3e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	9006      	str	r0, [sp, #24]
 8008a44:	695a      	ldr	r2, [r3, #20]
 8008a46:	9206      	str	r2, [sp, #24]
 8008a48:	699a      	ldr	r2, [r3, #24]
 8008a4a:	9206      	str	r2, [sp, #24]
 8008a4c:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008a56:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 8008a58:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008a5a:	2a00      	cmp	r2, #0
 8008a5c:	f43f af03 	beq.w	8008866 <HAL_I2C_Mem_Read+0xbe>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	e71f      	b.n	80088a4 <HAL_I2C_Mem_Read+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	075b      	lsls	r3, r3, #29
 8008a68:	f53f af2d 	bmi.w	80088c6 <HAL_I2C_Mem_Read+0x11e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a6c:	f7fe fb76 	bl	800715c <HAL_GetTick>
 8008a70:	1b80      	subs	r0, r0, r6
 8008a72:	4287      	cmp	r7, r0
 8008a74:	d30b      	bcc.n	8008a8e <HAL_I2C_Mem_Read+0x2e6>
 8008a76:	b157      	cbz	r7, 8008a8e <HAL_I2C_Mem_Read+0x2e6>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	e71e      	b.n	80088ba <HAL_I2C_Mem_Read+0x112>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	0652      	lsls	r2, r2, #25
 8008a80:	f53f af59 	bmi.w	8008936 <HAL_I2C_Mem_Read+0x18e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	06d1      	lsls	r1, r2, #27
 8008a88:	d425      	bmi.n	8008ad6 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a8a:	f7fe fb67 	bl	800715c <HAL_GetTick>
          return HAL_ERROR;
 8008a8e:	2501      	movs	r5, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a90:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a92:	2320      	movs	r3, #32
}
 8008a94:	4628      	mov	r0, r5
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008a96:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008a98:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008a9c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008aa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8008aa2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008aa6:	f043 0320 	orr.w	r3, r3, #32
 8008aaa:	6423      	str	r3, [r4, #64]	; 0x40
}
 8008aac:	b009      	add	sp, #36	; 0x24
 8008aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab2:	b94f      	cbnz	r7, 8008ac8 <HAL_I2C_Mem_Read+0x320>
 8008ab4:	e033      	b.n	8008b1e <HAL_I2C_Mem_Read+0x376>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008ab6:	695a      	ldr	r2, [r3, #20]
 8008ab8:	06d2      	lsls	r2, r2, #27
 8008aba:	d40c      	bmi.n	8008ad6 <HAL_I2C_Mem_Read+0x32e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008abc:	f7fe fb4e 	bl	800715c <HAL_GetTick>
 8008ac0:	1b80      	subs	r0, r0, r6
 8008ac2:	4287      	cmp	r7, r0
 8008ac4:	d3e3      	bcc.n	8008a8e <HAL_I2C_Mem_Read+0x2e6>
 8008ac6:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ac8:	695a      	ldr	r2, [r3, #20]
 8008aca:	0651      	lsls	r1, r2, #25
 8008acc:	d5f3      	bpl.n	8008ab6 <HAL_I2C_Mem_Read+0x30e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ace:	691a      	ldr	r2, [r3, #16]
 8008ad0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8008ad4:	e745      	b.n	8008962 <HAL_I2C_Mem_Read+0x1ba>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ad6:	f06f 0010 	mvn.w	r0, #16
          return HAL_ERROR;
 8008ada:	2501      	movs	r5, #1
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008adc:	2200      	movs	r2, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ade:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ae0:	6158      	str	r0, [r3, #20]
}
 8008ae2:	4628      	mov	r0, r5
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae4:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ae6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aea:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8008af0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008af4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8008af6:	b009      	add	sp, #36	; 0x24
 8008af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b02:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	704b      	strb	r3, [r1, #1]
          hi2c->XferCount--;
 8008b08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8008b0a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008b0c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8008b0e:	3b01      	subs	r3, #1
 8008b10:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8008b12:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8008b14:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8008b16:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8008b18:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8008b1a:	8522      	strh	r2, [r4, #40]	; 0x28
 8008b1c:	e6e6      	b.n	80088ec <HAL_I2C_Mem_Read+0x144>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b1e:	695a      	ldr	r2, [r3, #20]
 8008b20:	0650      	lsls	r0, r2, #25
 8008b22:	d5af      	bpl.n	8008a84 <HAL_I2C_Mem_Read+0x2dc>
 8008b24:	e7d3      	b.n	8008ace <HAL_I2C_Mem_Read+0x326>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b26:	6822      	ldr	r2, [r4, #0]
 8008b28:	6813      	ldr	r3, [r2, #0]
 8008b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b2e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8008b30:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	9005      	str	r0, [sp, #20]
 8008b36:	695a      	ldr	r2, [r3, #20]
 8008b38:	9205      	str	r2, [sp, #20]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	9205      	str	r2, [sp, #20]
 8008b3e:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b46:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008b48:	b662      	cpsie	i
}
 8008b4a:	e785      	b.n	8008a58 <HAL_I2C_Mem_Read+0x2b0>
 8008b4c:	ffff0000 	.word	0xffff0000
 8008b50:	2000001c 	.word	0x2000001c
 8008b54:	14f8b589 	.word	0x14f8b589

08008b58 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8008b58:	b318      	cbz	r0, 8008ba2 <HAL_IWDG_Init+0x4a>
{
 8008b5a:	b538      	push	{r3, r4, r5, lr}
 8008b5c:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8008b5e:	f64c 45cc 	movw	r5, #52428	; 0xcccc
  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008b62:	e9d4 3100 	ldrd	r3, r1, [r4]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008b66:	f245 5055 	movw	r0, #21845	; 0x5555
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008b6a:	68a2      	ldr	r2, [r4, #8]
  __HAL_IWDG_START(hiwdg);
 8008b6c:	601d      	str	r5, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8008b6e:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8008b70:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8008b72:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8008b74:	f7fe faf2 	bl	800715c <HAL_GetTick>
 8008b78:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	0791      	lsls	r1, r2, #30
 8008b80:	d00a      	beq.n	8008b98 <HAL_IWDG_Init+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008b82:	f7fe faeb 	bl	800715c <HAL_GetTick>
 8008b86:	1b40      	subs	r0, r0, r5
 8008b88:	2827      	cmp	r0, #39	; 0x27
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008b8a:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8008b8c:	d9f6      	bls.n	8008b7c <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	0792      	lsls	r2, r2, #30
 8008b92:	d0f3      	beq.n	8008b7c <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 8008b94:	2003      	movs	r0, #3
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);

  /* Return function status */
  return HAL_OK;
}
 8008b96:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008b98:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 8008b9c:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008b9e:	601a      	str	r2, [r3, #0]
}
 8008ba0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008ba2:	2001      	movs	r0, #1
}
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop

08008ba8 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008ba8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008bac:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8008bae:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bb4:	2800      	cmp	r0, #0
 8008bb6:	f000 81c3 	beq.w	8008f40 <HAL_RCC_OscConfig+0x38c>
{
 8008bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bbe:	6803      	ldr	r3, [r0, #0]
 8008bc0:	4604      	mov	r4, r0
 8008bc2:	07dd      	lsls	r5, r3, #31
{
 8008bc4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bc6:	d535      	bpl.n	8008c34 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008bc8:	49a6      	ldr	r1, [pc, #664]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008bca:	684a      	ldr	r2, [r1, #4]
 8008bcc:	f002 020c 	and.w	r2, r2, #12
 8008bd0:	2a04      	cmp	r2, #4
 8008bd2:	f000 80ef 	beq.w	8008db4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008bd6:	684a      	ldr	r2, [r1, #4]
 8008bd8:	f002 020c 	and.w	r2, r2, #12
 8008bdc:	2a08      	cmp	r2, #8
 8008bde:	f000 80e5 	beq.w	8008dac <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008be2:	6863      	ldr	r3, [r4, #4]
 8008be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008be8:	d010      	beq.n	8008c0c <HAL_RCC_OscConfig+0x58>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 810d 	beq.w	8008e0a <HAL_RCC_OscConfig+0x256>
 8008bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008bf4:	f000 818f 	beq.w	8008f16 <HAL_RCC_OscConfig+0x362>
 8008bf8:	4b9a      	ldr	r3, [pc, #616]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c00:	601a      	str	r2, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e004      	b.n	8008c16 <HAL_RCC_OscConfig+0x62>
 8008c0c:	4a95      	ldr	r2, [pc, #596]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008c0e:	6813      	ldr	r3, [r2, #0]
 8008c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c14:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c16:	f7fe faa1 	bl	800715c <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c1a:	4e92      	ldr	r6, [pc, #584]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8008c1c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c1e:	e005      	b.n	8008c2c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c20:	f7fe fa9c 	bl	800715c <HAL_GetTick>
 8008c24:	1b40      	subs	r0, r0, r5
 8008c26:	2864      	cmp	r0, #100	; 0x64
 8008c28:	f200 80eb 	bhi.w	8008e02 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c2c:	6833      	ldr	r3, [r6, #0]
 8008c2e:	039a      	lsls	r2, r3, #14
 8008c30:	d5f6      	bpl.n	8008c20 <HAL_RCC_OscConfig+0x6c>
 8008c32:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c34:	079f      	lsls	r7, r3, #30
 8008c36:	d528      	bpl.n	8008c8a <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008c38:	4a8a      	ldr	r2, [pc, #552]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008c3a:	6851      	ldr	r1, [r2, #4]
 8008c3c:	f011 0f0c 	tst.w	r1, #12
 8008c40:	f000 808e 	beq.w	8008d60 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008c44:	6851      	ldr	r1, [r2, #4]
 8008c46:	f001 010c 	and.w	r1, r1, #12
 8008c4a:	2908      	cmp	r1, #8
 8008c4c:	f000 8084 	beq.w	8008d58 <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f000 8125 	beq.w	8008ea2 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c58:	2201      	movs	r2, #1
 8008c5a:	4b83      	ldr	r3, [pc, #524]	; (8008e68 <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c5c:	4e81      	ldr	r6, [pc, #516]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 8008c5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008c60:	f7fe fa7c 	bl	800715c <HAL_GetTick>
 8008c64:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c66:	e005      	b.n	8008c74 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c68:	f7fe fa78 	bl	800715c <HAL_GetTick>
 8008c6c:	1b40      	subs	r0, r0, r5
 8008c6e:	2802      	cmp	r0, #2
 8008c70:	f200 80c7 	bhi.w	8008e02 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c74:	6833      	ldr	r3, [r6, #0]
 8008c76:	0798      	lsls	r0, r3, #30
 8008c78:	d5f6      	bpl.n	8008c68 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c7a:	6833      	ldr	r3, [r6, #0]
 8008c7c:	6962      	ldr	r2, [r4, #20]
 8008c7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008c82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008c86:	6033      	str	r3, [r6, #0]
 8008c88:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c8a:	071a      	lsls	r2, r3, #28
 8008c8c:	d41f      	bmi.n	8008cce <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c8e:	075d      	lsls	r5, r3, #29
 8008c90:	d541      	bpl.n	8008d16 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c92:	4b74      	ldr	r3, [pc, #464]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008c94:	69da      	ldr	r2, [r3, #28]
 8008c96:	00d0      	lsls	r0, r2, #3
 8008c98:	d57d      	bpl.n	8008d96 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 8008c9a:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c9c:	4b73      	ldr	r3, [pc, #460]	; (8008e6c <HAL_RCC_OscConfig+0x2b8>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	05d1      	lsls	r1, r2, #23
 8008ca2:	f140 809d 	bpl.w	8008de0 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ca6:	68e3      	ldr	r3, [r4, #12]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	f000 810b 	beq.w	8008ec4 <HAL_RCC_OscConfig+0x310>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80c5 	beq.w	8008e3e <HAL_RCC_OscConfig+0x28a>
 8008cb4:	2b05      	cmp	r3, #5
 8008cb6:	4b6b      	ldr	r3, [pc, #428]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008cb8:	6a1a      	ldr	r2, [r3, #32]
 8008cba:	f000 8139 	beq.w	8008f30 <HAL_RCC_OscConfig+0x37c>
 8008cbe:	f022 0201 	bic.w	r2, r2, #1
 8008cc2:	621a      	str	r2, [r3, #32]
 8008cc4:	6a1a      	ldr	r2, [r3, #32]
 8008cc6:	f022 0204 	bic.w	r2, r2, #4
 8008cca:	621a      	str	r2, [r3, #32]
 8008ccc:	e0ff      	b.n	8008ece <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cce:	69a3      	ldr	r3, [r4, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d050      	beq.n	8008d76 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	4b66      	ldr	r3, [pc, #408]	; (8008e70 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cd8:	4e62      	ldr	r6, [pc, #392]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 8008cda:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008cdc:	f7fe fa3e 	bl	800715c <HAL_GetTick>
 8008ce0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ce2:	e005      	b.n	8008cf0 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ce4:	f7fe fa3a 	bl	800715c <HAL_GetTick>
 8008ce8:	1b40      	subs	r0, r0, r5
 8008cea:	2802      	cmp	r0, #2
 8008cec:	f200 8089 	bhi.w	8008e02 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008cf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008cf2:	079b      	lsls	r3, r3, #30
 8008cf4:	d5f6      	bpl.n	8008ce4 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008cf6:	4b5f      	ldr	r3, [pc, #380]	; (8008e74 <HAL_RCC_OscConfig+0x2c0>)
 8008cf8:	4a5f      	ldr	r2, [pc, #380]	; (8008e78 <HAL_RCC_OscConfig+0x2c4>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008d00:	0a5b      	lsrs	r3, r3, #9
 8008d02:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8008d04:	bf00      	nop
  }
  while (Delay --);
 8008d06:	9b01      	ldr	r3, [sp, #4]
 8008d08:	1e5a      	subs	r2, r3, #1
 8008d0a:	9201      	str	r2, [sp, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1f9      	bne.n	8008d04 <HAL_RCC_OscConfig+0x150>
 8008d10:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d12:	075d      	lsls	r5, r3, #29
 8008d14:	d4bd      	bmi.n	8008c92 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d16:	69e0      	ldr	r0, [r4, #28]
 8008d18:	b1d0      	cbz	r0, 8008d50 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d1a:	4d52      	ldr	r5, [pc, #328]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008d1c:	686a      	ldr	r2, [r5, #4]
 8008d1e:	f002 020c 	and.w	r2, r2, #12
 8008d22:	2a08      	cmp	r2, #8
 8008d24:	f000 80e6 	beq.w	8008ef4 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d28:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8008d2a:	f04f 0100 	mov.w	r1, #0
 8008d2e:	4a53      	ldr	r2, [pc, #332]	; (8008e7c <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d30:	f000 8108 	beq.w	8008f44 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 8008d34:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8008d36:	f7fe fa11 	bl	800715c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d3a:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8008d3c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d3e:	e004      	b.n	8008d4a <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d40:	f7fe fa0c 	bl	800715c <HAL_GetTick>
 8008d44:	1b40      	subs	r0, r0, r5
 8008d46:	2802      	cmp	r0, #2
 8008d48:	d85b      	bhi.n	8008e02 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008d4a:	6823      	ldr	r3, [r4, #0]
 8008d4c:	019b      	lsls	r3, r3, #6
 8008d4e:	d4f7      	bmi.n	8008d40 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8008d50:	2000      	movs	r0, #0
}
 8008d52:	b002      	add	sp, #8
 8008d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008d58:	6852      	ldr	r2, [r2, #4]
 8008d5a:	03d6      	lsls	r6, r2, #15
 8008d5c:	f53f af78 	bmi.w	8008c50 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d60:	4a40      	ldr	r2, [pc, #256]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008d62:	6812      	ldr	r2, [r2, #0]
 8008d64:	0795      	lsls	r5, r2, #30
 8008d66:	d52f      	bpl.n	8008dc8 <HAL_RCC_OscConfig+0x214>
 8008d68:	6922      	ldr	r2, [r4, #16]
 8008d6a:	2a01      	cmp	r2, #1
 8008d6c:	d02c      	beq.n	8008dc8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 8008d6e:	2001      	movs	r0, #1
}
 8008d70:	b002      	add	sp, #8
 8008d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8008d76:	4a3e      	ldr	r2, [pc, #248]	; (8008e70 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d78:	4e3a      	ldr	r6, [pc, #232]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 8008d7a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8008d7c:	f7fe f9ee 	bl	800715c <HAL_GetTick>
 8008d80:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d82:	e004      	b.n	8008d8e <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d84:	f7fe f9ea 	bl	800715c <HAL_GetTick>
 8008d88:	1b40      	subs	r0, r0, r5
 8008d8a:	2802      	cmp	r0, #2
 8008d8c:	d839      	bhi.n	8008e02 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008d90:	079f      	lsls	r7, r3, #30
 8008d92:	d4f7      	bmi.n	8008d84 <HAL_RCC_OscConfig+0x1d0>
 8008d94:	e7bc      	b.n	8008d10 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d96:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8008d98:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d9e:	61da      	str	r2, [r3, #28]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8008daa:	e777      	b.n	8008c9c <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008dac:	684a      	ldr	r2, [r1, #4]
 8008dae:	03d0      	lsls	r0, r2, #15
 8008db0:	f57f af17 	bpl.w	8008be2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008db4:	4a2b      	ldr	r2, [pc, #172]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008db6:	6812      	ldr	r2, [r2, #0]
 8008db8:	0391      	lsls	r1, r2, #14
 8008dba:	f57f af3b 	bpl.w	8008c34 <HAL_RCC_OscConfig+0x80>
 8008dbe:	6862      	ldr	r2, [r4, #4]
 8008dc0:	2a00      	cmp	r2, #0
 8008dc2:	f47f af37 	bne.w	8008c34 <HAL_RCC_OscConfig+0x80>
 8008dc6:	e7d2      	b.n	8008d6e <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dc8:	4926      	ldr	r1, [pc, #152]	; (8008e64 <HAL_RCC_OscConfig+0x2b0>)
 8008dca:	6960      	ldr	r0, [r4, #20]
 8008dcc:	680a      	ldr	r2, [r1, #0]
 8008dce:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008dd2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8008dd6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008dd8:	071a      	lsls	r2, r3, #28
 8008dda:	f57f af58 	bpl.w	8008c8e <HAL_RCC_OscConfig+0xda>
 8008dde:	e776      	b.n	8008cce <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008de0:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008de2:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008de4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008de8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008dea:	f7fe f9b7 	bl	800715c <HAL_GetTick>
 8008dee:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	05da      	lsls	r2, r3, #23
 8008df4:	f53f af57 	bmi.w	8008ca6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008df8:	f7fe f9b0 	bl	800715c <HAL_GetTick>
 8008dfc:	1b80      	subs	r0, r0, r6
 8008dfe:	2864      	cmp	r0, #100	; 0x64
 8008e00:	d9f6      	bls.n	8008df0 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 8008e02:	2003      	movs	r0, #3
}
 8008e04:	b002      	add	sp, #8
 8008e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e0e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008e12:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e14:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e16:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008e22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008e24:	f7fe f99a 	bl	800715c <HAL_GetTick>
 8008e28:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e2a:	e004      	b.n	8008e36 <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e2c:	f7fe f996 	bl	800715c <HAL_GetTick>
 8008e30:	1b40      	subs	r0, r0, r5
 8008e32:	2864      	cmp	r0, #100	; 0x64
 8008e34:	d8e5      	bhi.n	8008e02 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e36:	6833      	ldr	r3, [r6, #0]
 8008e38:	039b      	lsls	r3, r3, #14
 8008e3a:	d4f7      	bmi.n	8008e2c <HAL_RCC_OscConfig+0x278>
 8008e3c:	e6f9      	b.n	8008c32 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e42:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8008e46:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e48:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e4a:	f022 0201 	bic.w	r2, r2, #1
 8008e4e:	621a      	str	r2, [r3, #32]
 8008e50:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e52:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e56:	f022 0204 	bic.w	r2, r2, #4
 8008e5a:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 8008e5c:	f7fe f97e 	bl	800715c <HAL_GetTick>
 8008e60:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e62:	e012      	b.n	8008e8a <HAL_RCC_OscConfig+0x2d6>
 8008e64:	40021000 	.word	0x40021000
 8008e68:	42420000 	.word	0x42420000
 8008e6c:	40007000 	.word	0x40007000
 8008e70:	42420480 	.word	0x42420480
 8008e74:	2000001c 	.word	0x2000001c
 8008e78:	10624dd3 	.word	0x10624dd3
 8008e7c:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e80:	f7fe f96c 	bl	800715c <HAL_GetTick>
 8008e84:	1b80      	subs	r0, r0, r6
 8008e86:	4540      	cmp	r0, r8
 8008e88:	d8bb      	bhi.n	8008e02 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	0798      	lsls	r0, r3, #30
 8008e8e:	d4f7      	bmi.n	8008e80 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 8008e90:	2d00      	cmp	r5, #0
 8008e92:	f43f af40 	beq.w	8008d16 <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e96:	4a44      	ldr	r2, [pc, #272]	; (8008fa8 <HAL_RCC_OscConfig+0x3f4>)
 8008e98:	69d3      	ldr	r3, [r2, #28]
 8008e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e9e:	61d3      	str	r3, [r2, #28]
 8008ea0:	e739      	b.n	8008d16 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8008ea2:	4a42      	ldr	r2, [pc, #264]	; (8008fac <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ea4:	4e40      	ldr	r6, [pc, #256]	; (8008fa8 <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 8008ea6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008ea8:	f7fe f958 	bl	800715c <HAL_GetTick>
 8008eac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eae:	e004      	b.n	8008eba <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eb0:	f7fe f954 	bl	800715c <HAL_GetTick>
 8008eb4:	1b40      	subs	r0, r0, r5
 8008eb6:	2802      	cmp	r0, #2
 8008eb8:	d8a3      	bhi.n	8008e02 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008eba:	6833      	ldr	r3, [r6, #0]
 8008ebc:	0799      	lsls	r1, r3, #30
 8008ebe:	d4f7      	bmi.n	8008eb0 <HAL_RCC_OscConfig+0x2fc>
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	e6e2      	b.n	8008c8a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ec4:	4a38      	ldr	r2, [pc, #224]	; (8008fa8 <HAL_RCC_OscConfig+0x3f4>)
 8008ec6:	6a13      	ldr	r3, [r2, #32]
 8008ec8:	f043 0301 	orr.w	r3, r3, #1
 8008ecc:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8008ece:	f7fe f945 	bl	800715c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ed2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008ed6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed8:	4f33      	ldr	r7, [pc, #204]	; (8008fa8 <HAL_RCC_OscConfig+0x3f4>)
 8008eda:	e004      	b.n	8008ee6 <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008edc:	f7fe f93e 	bl	800715c <HAL_GetTick>
 8008ee0:	1b80      	subs	r0, r0, r6
 8008ee2:	4540      	cmp	r0, r8
 8008ee4:	d88d      	bhi.n	8008e02 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	079b      	lsls	r3, r3, #30
 8008eea:	d5f7      	bpl.n	8008edc <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 8008eec:	2d00      	cmp	r5, #0
 8008eee:	f43f af12 	beq.w	8008d16 <HAL_RCC_OscConfig+0x162>
 8008ef2:	e7d0      	b.n	8008e96 <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ef4:	2801      	cmp	r0, #1
 8008ef6:	f43f af2c 	beq.w	8008d52 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 8008efa:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008efc:	6a22      	ldr	r2, [r4, #32]
 8008efe:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8008f02:	4291      	cmp	r1, r2
 8008f04:	f47f af33 	bne.w	8008d6e <HAL_RCC_OscConfig+0x1ba>
 8008f08:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008f0a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8008f0e:	1a18      	subs	r0, r3, r0
 8008f10:	bf18      	it	ne
 8008f12:	2001      	movne	r0, #1
 8008f14:	e71d      	b.n	8008d52 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f1a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8008f24:	601a      	str	r2, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	e672      	b.n	8008c16 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f30:	f042 0204 	orr.w	r2, r2, #4
 8008f34:	621a      	str	r2, [r3, #32]
 8008f36:	6a1a      	ldr	r2, [r3, #32]
 8008f38:	f042 0201 	orr.w	r2, r2, #1
 8008f3c:	621a      	str	r2, [r3, #32]
 8008f3e:	e7c6      	b.n	8008ece <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 8008f40:	2001      	movs	r0, #1
}
 8008f42:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 8008f44:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 8008f46:	f7fe f909 	bl	800715c <HAL_GetTick>
 8008f4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f4c:	e005      	b.n	8008f5a <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f4e:	f7fe f905 	bl	800715c <HAL_GetTick>
 8008f52:	1b80      	subs	r0, r0, r6
 8008f54:	2802      	cmp	r0, #2
 8008f56:	f63f af54 	bhi.w	8008e02 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008f5a:	682b      	ldr	r3, [r5, #0]
 8008f5c:	0199      	lsls	r1, r3, #6
 8008f5e:	d4f6      	bmi.n	8008f4e <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008f60:	6a23      	ldr	r3, [r4, #32]
 8008f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f66:	d105      	bne.n	8008f74 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008f68:	686a      	ldr	r2, [r5, #4]
 8008f6a:	68a1      	ldr	r1, [r4, #8]
 8008f6c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8008f70:	430a      	orrs	r2, r1
 8008f72:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008f74:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f76:	4d0c      	ldr	r5, [pc, #48]	; (8008fa8 <HAL_RCC_OscConfig+0x3f4>)
 8008f78:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008f7a:	686a      	ldr	r2, [r5, #4]
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8008f82:	490b      	ldr	r1, [pc, #44]	; (8008fb0 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f84:	4313      	orrs	r3, r2
 8008f86:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008f88:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 8008f8a:	f7fe f8e7 	bl	800715c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f8e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8008f90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008f92:	e005      	b.n	8008fa0 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f94:	f7fe f8e2 	bl	800715c <HAL_GetTick>
 8008f98:	1b40      	subs	r0, r0, r5
 8008f9a:	2802      	cmp	r0, #2
 8008f9c:	f63f af31 	bhi.w	8008e02 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	019a      	lsls	r2, r3, #6
 8008fa4:	d5f6      	bpl.n	8008f94 <HAL_RCC_OscConfig+0x3e0>
 8008fa6:	e6d3      	b.n	8008d50 <HAL_RCC_OscConfig+0x19c>
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	42420000 	.word	0x42420000
 8008fb0:	42420060 	.word	0x42420060

08008fb4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f000 80af 	beq.w	8009118 <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fba:	4a5d      	ldr	r2, [pc, #372]	; (8009130 <HAL_RCC_ClockConfig+0x17c>)
{
 8008fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fc0:	6813      	ldr	r3, [r2, #0]
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	f003 0307 	and.w	r3, r3, #7
 8008fc8:	428b      	cmp	r3, r1
 8008fca:	460d      	mov	r5, r1
{
 8008fcc:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fce:	d20d      	bcs.n	8008fec <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fd0:	6813      	ldr	r3, [r2, #0]
 8008fd2:	f023 0307 	bic.w	r3, r3, #7
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	d003      	beq.n	8008fec <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8008fe4:	2001      	movs	r0, #1
}
 8008fe6:	b006      	add	sp, #24
 8008fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	0798      	lsls	r0, r3, #30
 8008ff0:	d514      	bpl.n	800901c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ff2:	0759      	lsls	r1, r3, #29
 8008ff4:	d504      	bpl.n	8009000 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ff6:	494f      	ldr	r1, [pc, #316]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
 8008ff8:	684a      	ldr	r2, [r1, #4]
 8008ffa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8008ffe:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009000:	071a      	lsls	r2, r3, #28
 8009002:	d504      	bpl.n	800900e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009004:	494b      	ldr	r1, [pc, #300]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
 8009006:	684a      	ldr	r2, [r1, #4]
 8009008:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800900c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800900e:	4949      	ldr	r1, [pc, #292]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
 8009010:	68a0      	ldr	r0, [r4, #8]
 8009012:	684a      	ldr	r2, [r1, #4]
 8009014:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009018:	4302      	orrs	r2, r0
 800901a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800901c:	07db      	lsls	r3, r3, #31
 800901e:	d520      	bpl.n	8009062 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009020:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009022:	4b44      	ldr	r3, [pc, #272]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009024:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009026:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009028:	d078      	beq.n	800911c <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800902a:	2a02      	cmp	r2, #2
 800902c:	d071      	beq.n	8009112 <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800902e:	0798      	lsls	r0, r3, #30
 8009030:	d5d8      	bpl.n	8008fe4 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009032:	4e40      	ldr	r6, [pc, #256]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009034:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009038:	6873      	ldr	r3, [r6, #4]
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	4313      	orrs	r3, r2
 8009040:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8009042:	f7fe f88b 	bl	800715c <HAL_GetTick>
 8009046:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009048:	e004      	b.n	8009054 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800904a:	f7fe f887 	bl	800715c <HAL_GetTick>
 800904e:	1bc0      	subs	r0, r0, r7
 8009050:	4540      	cmp	r0, r8
 8009052:	d866      	bhi.n	8009122 <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009054:	6873      	ldr	r3, [r6, #4]
 8009056:	6862      	ldr	r2, [r4, #4]
 8009058:	f003 030c 	and.w	r3, r3, #12
 800905c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8009060:	d1f3      	bne.n	800904a <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009062:	4a33      	ldr	r2, [pc, #204]	; (8009130 <HAL_RCC_ClockConfig+0x17c>)
 8009064:	6813      	ldr	r3, [r2, #0]
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	42ab      	cmp	r3, r5
 800906c:	d909      	bls.n	8009082 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800906e:	6813      	ldr	r3, [r2, #0]
 8009070:	f023 0307 	bic.w	r3, r3, #7
 8009074:	432b      	orrs	r3, r5
 8009076:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009078:	6813      	ldr	r3, [r2, #0]
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	42ab      	cmp	r3, r5
 8009080:	d1b0      	bne.n	8008fe4 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	0759      	lsls	r1, r3, #29
 8009086:	d506      	bpl.n	8009096 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009088:	492a      	ldr	r1, [pc, #168]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
 800908a:	68e0      	ldr	r0, [r4, #12]
 800908c:	684a      	ldr	r2, [r1, #4]
 800908e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009092:	4302      	orrs	r2, r0
 8009094:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009096:	071a      	lsls	r2, r3, #28
 8009098:	d507      	bpl.n	80090aa <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800909a:	4a26      	ldr	r2, [pc, #152]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
 800909c:	6921      	ldr	r1, [r4, #16]
 800909e:	6853      	ldr	r3, [r2, #4]
 80090a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80090a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80090a8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80090aa:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80090ae:	4b22      	ldr	r3, [pc, #136]	; (8009138 <HAL_RCC_ClockConfig+0x184>)
 80090b0:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80090b2:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80090b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090b8:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 80090bc:	491d      	ldr	r1, [pc, #116]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
 80090be:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80090c0:	f002 030c 	and.w	r3, r2, #12
 80090c4:	2b08      	cmp	r3, #8
 80090c6:	d011      	beq.n	80090ec <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 80090c8:	4b1c      	ldr	r3, [pc, #112]	; (800913c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090ca:	4a1a      	ldr	r2, [pc, #104]	; (8009134 <HAL_RCC_ClockConfig+0x180>)
 80090cc:	481c      	ldr	r0, [pc, #112]	; (8009140 <HAL_RCC_ClockConfig+0x18c>)
 80090ce:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80090d0:	491c      	ldr	r1, [pc, #112]	; (8009144 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090d2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80090d6:	5c80      	ldrb	r0, [r0, r2]
 80090d8:	4a1b      	ldr	r2, [pc, #108]	; (8009148 <HAL_RCC_ClockConfig+0x194>)
 80090da:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80090dc:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090de:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80090e0:	f7fd fffa 	bl	80070d8 <HAL_InitTick>
  return HAL_OK;
 80090e4:	2000      	movs	r0, #0
}
 80090e6:	b006      	add	sp, #24
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80090ec:	f3c2 4383 	ubfx	r3, r2, #18, #4
 80090f0:	4423      	add	r3, r4
 80090f2:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80090f6:	03d3      	lsls	r3, r2, #15
 80090f8:	d515      	bpl.n	8009126 <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090fa:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80090fc:	4b0f      	ldr	r3, [pc, #60]	; (800913c <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80090fe:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8009102:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009106:	4422      	add	r2, r4
 8009108:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800910c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009110:	e7db      	b.n	80090ca <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009112:	019e      	lsls	r6, r3, #6
 8009114:	d48d      	bmi.n	8009032 <HAL_RCC_ClockConfig+0x7e>
 8009116:	e765      	b.n	8008fe4 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8009118:	2001      	movs	r0, #1
}
 800911a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800911c:	039f      	lsls	r7, r3, #14
 800911e:	d488      	bmi.n	8009032 <HAL_RCC_ClockConfig+0x7e>
 8009120:	e760      	b.n	8008fe4 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8009122:	2003      	movs	r0, #3
 8009124:	e75f      	b.n	8008fe6 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009126:	4b09      	ldr	r3, [pc, #36]	; (800914c <HAL_RCC_ClockConfig+0x198>)
 8009128:	fb03 f300 	mul.w	r3, r3, r0
 800912c:	e7cd      	b.n	80090ca <HAL_RCC_ClockConfig+0x116>
 800912e:	bf00      	nop
 8009130:	40022000 	.word	0x40022000
 8009134:	40021000 	.word	0x40021000
 8009138:	0800bd88 	.word	0x0800bd88
 800913c:	007a1200 	.word	0x007a1200
 8009140:	0800bcdc 	.word	0x0800bcdc
 8009144:	20000024 	.word	0x20000024
 8009148:	2000001c 	.word	0x2000001c
 800914c:	003d0900 	.word	0x003d0900

08009150 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009150:	4b04      	ldr	r3, [pc, #16]	; (8009164 <HAL_RCC_GetPCLK1Freq+0x14>)
 8009152:	4905      	ldr	r1, [pc, #20]	; (8009168 <HAL_RCC_GetPCLK1Freq+0x18>)
 8009154:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8009156:	4a05      	ldr	r2, [pc, #20]	; (800916c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009158:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800915c:	5ccb      	ldrb	r3, [r1, r3]
 800915e:	6810      	ldr	r0, [r2, #0]
}
 8009160:	40d8      	lsrs	r0, r3
 8009162:	4770      	bx	lr
 8009164:	40021000 	.word	0x40021000
 8009168:	0800bcec 	.word	0x0800bcec
 800916c:	2000001c 	.word	0x2000001c

08009170 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <HAL_RCC_GetPCLK2Freq+0x14>)
 8009172:	4905      	ldr	r1, [pc, #20]	; (8009188 <HAL_RCC_GetPCLK2Freq+0x18>)
 8009174:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 8009176:	4a05      	ldr	r2, [pc, #20]	; (800918c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009178:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800917c:	5ccb      	ldrb	r3, [r1, r3]
 800917e:	6810      	ldr	r0, [r2, #0]
}
 8009180:	40d8      	lsrs	r0, r3
 8009182:	4770      	bx	lr
 8009184:	40021000 	.word	0x40021000
 8009188:	0800bcec 	.word	0x0800bcec
 800918c:	2000001c 	.word	0x2000001c

08009190 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009194:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009196:	6800      	ldr	r0, [r0, #0]
{
 8009198:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800919a:	07c3      	lsls	r3, r0, #31
 800919c:	d52a      	bpl.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800919e:	4b39      	ldr	r3, [pc, #228]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80091a0:	69da      	ldr	r2, [r3, #28]
 80091a2:	00d7      	lsls	r7, r2, #3
 80091a4:	d53d      	bpl.n	8009222 <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091a6:	4b38      	ldr	r3, [pc, #224]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 80091a8:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	05d6      	lsls	r6, r2, #23
 80091ae:	d546      	bpl.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80091b0:	4e34      	ldr	r6, [pc, #208]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80091b2:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80091b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80091b8:	d00f      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80091ba:	6861      	ldr	r1, [r4, #4]
 80091bc:	f401 7240 	and.w	r2, r1, #768	; 0x300
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d00b      	beq.n	80091dc <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091c4:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091c6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091c8:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80091ca:	4a30      	ldr	r2, [pc, #192]	; (800928c <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80091d0:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091d2:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80091d4:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80091d6:	07d9      	lsls	r1, r3, #31
 80091d8:	d445      	bmi.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 80091da:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80091dc:	4a29      	ldr	r2, [pc, #164]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80091de:	6a13      	ldr	r3, [r2, #32]
 80091e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e4:	430b      	orrs	r3, r1
 80091e6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80091e8:	b11d      	cbz	r5, 80091f2 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091ea:	69d3      	ldr	r3, [r2, #28]
 80091ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091f0:	61d3      	str	r3, [r2, #28]
 80091f2:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091f4:	0783      	lsls	r3, r0, #30
 80091f6:	d506      	bpl.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80091f8:	4922      	ldr	r1, [pc, #136]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 80091fa:	68a3      	ldr	r3, [r4, #8]
 80091fc:	684a      	ldr	r2, [r1, #4]
 80091fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009202:	431a      	orrs	r2, r3
 8009204:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009206:	f010 0010 	ands.w	r0, r0, #16
 800920a:	d007      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800920c:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800920e:	4a1d      	ldr	r2, [pc, #116]	; (8009284 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8009210:	68e1      	ldr	r1, [r4, #12]
 8009212:	6853      	ldr	r3, [r2, #4]
 8009214:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009218:	430b      	orrs	r3, r1
 800921a:	6053      	str	r3, [r2, #4]
}
 800921c:	b002      	add	sp, #8
 800921e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8009222:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 8009224:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8009226:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800922a:	61da      	str	r2, [r3, #28]
 800922c:	69db      	ldr	r3, [r3, #28]
 800922e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009232:	9301      	str	r3, [sp, #4]
 8009234:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009236:	4b14      	ldr	r3, [pc, #80]	; (8009288 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	05d6      	lsls	r6, r2, #23
 800923c:	d4b8      	bmi.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800923e:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009240:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009246:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8009248:	f7fd ff88 	bl	800715c <HAL_GetTick>
 800924c:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	05d8      	lsls	r0, r3, #23
 8009252:	d4ad      	bmi.n	80091b0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009254:	f7fd ff82 	bl	800715c <HAL_GetTick>
 8009258:	1b83      	subs	r3, r0, r6
 800925a:	2b64      	cmp	r3, #100	; 0x64
 800925c:	d9f7      	bls.n	800924e <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800925e:	2003      	movs	r0, #3
}
 8009260:	b002      	add	sp, #8
 8009262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8009266:	f7fd ff79 	bl	800715c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800926a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800926e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009270:	e004      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009272:	f7fd ff73 	bl	800715c <HAL_GetTick>
 8009276:	1bc0      	subs	r0, r0, r7
 8009278:	4540      	cmp	r0, r8
 800927a:	d8f0      	bhi.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800927c:	6a33      	ldr	r3, [r6, #32]
 800927e:	079a      	lsls	r2, r3, #30
 8009280:	d5f7      	bpl.n	8009272 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8009282:	e7aa      	b.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8009284:	40021000 	.word	0x40021000
 8009288:	40007000 	.word	0x40007000
 800928c:	42420440 	.word	0x42420440

08009290 <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8009290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009294:	461d      	mov	r5, r3
 8009296:	4616      	mov	r6, r2
 8009298:	b082      	sub	sp, #8
 800929a:	460c      	mov	r4, r1
 800929c:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800929e:	f7fd ff5d 	bl	800715c <HAL_GetTick>
 80092a2:	4435      	add	r5, r6
 80092a4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80092a6:	f7fd ff59 	bl	800715c <HAL_GetTick>
 80092aa:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80092ac:	4b27      	ldr	r3, [pc, #156]	; (800934c <SPI_WaitFlagStateUntilTimeout.constprop.1+0xbc>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80092b4:	fb05 f303 	mul.w	r3, r5, r3
 80092b8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092ba:	1c73      	adds	r3, r6, #1
 80092bc:	6839      	ldr	r1, [r7, #0]
 80092be:	d107      	bne.n	80092d0 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x40>
 80092c0:	688b      	ldr	r3, [r1, #8]
 80092c2:	ea34 0303 	bics.w	r3, r4, r3
 80092c6:	d0fb      	beq.n	80092c0 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 80092c8:	2000      	movs	r0, #0
}
 80092ca:	b002      	add	sp, #8
 80092cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80092d0:	688b      	ldr	r3, [r1, #8]
 80092d2:	ea34 0303 	bics.w	r3, r4, r3
 80092d6:	d1f7      	bne.n	80092c8 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80092d8:	f7fd ff40 	bl	800715c <HAL_GetTick>
 80092dc:	eba0 0008 	sub.w	r0, r0, r8
 80092e0:	42a8      	cmp	r0, r5
 80092e2:	d208      	bcs.n	80092f6 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x66>
      if(count == 0U)
 80092e4:	9a01      	ldr	r2, [sp, #4]
      count--;
 80092e6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80092e8:	2a00      	cmp	r2, #0
      count--;
 80092ea:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80092ee:	bf08      	it	eq
 80092f0:	2500      	moveq	r5, #0
      count--;
 80092f2:	9301      	str	r3, [sp, #4]
 80092f4:	e7e1      	b.n	80092ba <SPI_WaitFlagStateUntilTimeout.constprop.1+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092f6:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80092fa:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80092fc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009304:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009306:	d014      	beq.n	8009332 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800930a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800930e:	d007      	beq.n	8009320 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x90>
        hspi->State = HAL_SPI_STATE_READY;
 8009310:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8009312:	2300      	movs	r3, #0
 8009314:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8009316:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800931a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 800931e:	e7d4      	b.n	80092ca <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
          SPI_RESET_CRC(hspi);
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009326:	601a      	str	r2, [r3, #0]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	e7ee      	b.n	8009310 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x80>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8009338:	d002      	beq.n	8009340 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800933a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800933e:	d1e3      	bne.n	8009308 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x78>
          __HAL_SPI_DISABLE(hspi);
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	e7de      	b.n	8009308 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x78>
 800934a:	bf00      	nop
 800934c:	2000001c 	.word	0x2000001c

08009350 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009350:	2800      	cmp	r0, #0
 8009352:	d055      	beq.n	8009400 <HAL_SPI_Init+0xb0>
{
 8009354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009356:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009358:	4604      	mov	r4, r0
 800935a:	2b00      	cmp	r3, #0
 800935c:	d041      	beq.n	80093e2 <HAL_SPI_Init+0x92>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800935e:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009360:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009364:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009366:	f894 1051 	ldrb.w	r1, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800936a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800936c:	f001 02ff 	and.w	r2, r1, #255	; 0xff
 8009370:	2900      	cmp	r1, #0
 8009372:	d03c      	beq.n	80093ee <HAL_SPI_Init+0x9e>
 8009374:	461a      	mov	r2, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009376:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 800937a:	2702      	movs	r7, #2
  hspi->State     = HAL_SPI_STATE_READY;
 800937c:	2601      	movs	r6, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800937e:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009380:	68e1      	ldr	r1, [r4, #12]
 8009382:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8009386:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800938a:	4303      	orrs	r3, r0
 800938c:	6920      	ldr	r0, [r4, #16]
 800938e:	f401 6100 	and.w	r1, r1, #2048	; 0x800
 8009392:	4038      	ands	r0, r7
 8009394:	430b      	orrs	r3, r1
 8009396:	6961      	ldr	r1, [r4, #20]
 8009398:	4303      	orrs	r3, r0
 800939a:	69a0      	ldr	r0, [r4, #24]
 800939c:	4031      	ands	r1, r6
 800939e:	430b      	orrs	r3, r1
 80093a0:	f400 7100 	and.w	r1, r0, #512	; 0x200
 80093a4:	430b      	orrs	r3, r1
 80093a6:	69e1      	ldr	r1, [r4, #28]
  hspi->State = HAL_SPI_STATE_BUSY;
 80093a8:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093ac:	6a27      	ldr	r7, [r4, #32]
 80093ae:	f001 0138 	and.w	r1, r1, #56	; 0x38
 80093b2:	430b      	orrs	r3, r1
 80093b4:	f007 0780 	and.w	r7, r7, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 80093b8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093ba:	433b      	orrs	r3, r7
 80093bc:	4313      	orrs	r3, r2
  __HAL_SPI_DISABLE(hspi);
 80093be:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80093c0:	0c00      	lsrs	r0, r0, #16
 80093c2:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 80093c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ca:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80093cc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80093ce:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093d0:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 80093d2:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093d8:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093da:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80093dc:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
}
 80093e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80093e2:	6842      	ldr	r2, [r0, #4]
 80093e4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80093e8:	d0bc      	beq.n	8009364 <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80093ea:	61c3      	str	r3, [r0, #28]
 80093ec:	e7ba      	b.n	8009364 <HAL_SPI_Init+0x14>
    hspi->Lock = HAL_UNLOCKED;
 80093ee:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80093f2:	4620      	mov	r0, r4
 80093f4:	f7fc fb2e 	bl	8005a54 <HAL_SPI_MspInit>
 80093f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80093fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80093fe:	e7ba      	b.n	8009376 <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8009400:	2001      	movs	r0, #1
}
 8009402:	4770      	bx	lr

08009404 <HAL_SPI_Transmit>:
{
 8009404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009408:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800940a:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 800940e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8009410:	2801      	cmp	r0, #1
 8009412:	d071      	beq.n	80094f8 <HAL_SPI_Transmit+0xf4>
 8009414:	461d      	mov	r5, r3
 8009416:	2301      	movs	r3, #1
 8009418:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800941c:	4688      	mov	r8, r1
 800941e:	4617      	mov	r7, r2
 8009420:	f7fd fe9c 	bl	800715c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8009424:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8009428:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800942a:	2b01      	cmp	r3, #1
 800942c:	b2d8      	uxtb	r0, r3
 800942e:	d009      	beq.n	8009444 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8009430:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009432:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8009434:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8009436:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800943a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800943e:	b002      	add	sp, #8
 8009440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8009444:	f1b8 0f00 	cmp.w	r8, #0
 8009448:	d0f3      	beq.n	8009432 <HAL_SPI_Transmit+0x2e>
 800944a:	2f00      	cmp	r7, #0
 800944c:	d0f1      	beq.n	8009432 <HAL_SPI_Transmit+0x2e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800944e:	2203      	movs	r2, #3
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009450:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009452:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009456:	68a2      	ldr	r2, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8009458:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800945a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800945e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8009460:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009464:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009466:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009468:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800946a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->RxXferCount = 0U;
 800946e:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009470:	86a7      	strh	r7, [r4, #52]	; 0x34
    __HAL_SPI_DISABLE(hspi);
 8009472:	4603      	mov	r3, r0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009474:	d071      	beq.n	800955a <HAL_SPI_Transmit+0x156>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009476:	6802      	ldr	r2, [r0, #0]
 8009478:	0652      	lsls	r2, r2, #25
 800947a:	d403      	bmi.n	8009484 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800947c:	6802      	ldr	r2, [r0, #0]
 800947e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009482:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009484:	68e2      	ldr	r2, [r4, #12]
 8009486:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800948a:	d039      	beq.n	8009500 <HAL_SPI_Transmit+0xfc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800948c:	6863      	ldr	r3, [r4, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 8085 	beq.w	800959e <HAL_SPI_Transmit+0x19a>
 8009494:	2f01      	cmp	r7, #1
 8009496:	f000 8082 	beq.w	800959e <HAL_SPI_Transmit+0x19a>
    while (hspi->TxXferCount > 0U)
 800949a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800949c:	b29b      	uxth	r3, r3
 800949e:	b1a3      	cbz	r3, 80094ca <HAL_SPI_Transmit+0xc6>
 80094a0:	1c68      	adds	r0, r5, #1
 80094a2:	d171      	bne.n	8009588 <HAL_SPI_Transmit+0x184>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	0791      	lsls	r1, r2, #30
 80094aa:	f140 8083 	bpl.w	80095b4 <HAL_SPI_Transmit+0x1b0>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094ae:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80094b0:	7812      	ldrb	r2, [r2, #0]
 80094b2:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80094b4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80094b8:	3a01      	subs	r2, #1
 80094ba:	b292      	uxth	r2, r2
 80094bc:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80094be:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094c0:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80094c2:	b292      	uxth	r2, r2
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80094c4:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	d1ec      	bne.n	80094a4 <HAL_SPI_Transmit+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094ca:	4633      	mov	r3, r6
 80094cc:	462a      	mov	r2, r5
 80094ce:	2180      	movs	r1, #128	; 0x80
 80094d0:	4620      	mov	r0, r4
 80094d2:	f7ff fedd 	bl	8009290 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f040 808f 	bne.w	80095fa <HAL_SPI_Transmit+0x1f6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094dc:	68a3      	ldr	r3, [r4, #8]
 80094de:	b933      	cbnz	r3, 80094ee <HAL_SPI_Transmit+0xea>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094e0:	6822      	ldr	r2, [r4, #0]
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	68d3      	ldr	r3, [r2, #12]
 80094e6:	9301      	str	r3, [sp, #4]
 80094e8:	6893      	ldr	r3, [r2, #8]
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80094f0:	3800      	subs	r0, #0
 80094f2:	bf18      	it	ne
 80094f4:	2001      	movne	r0, #1
error:
 80094f6:	e79c      	b.n	8009432 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 80094f8:	2002      	movs	r0, #2
}
 80094fa:	b002      	add	sp, #8
 80094fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009500:	6862      	ldr	r2, [r4, #4]
 8009502:	2a00      	cmp	r2, #0
 8009504:	d176      	bne.n	80095f4 <HAL_SPI_Transmit+0x1f0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009506:	4641      	mov	r1, r8
 8009508:	f831 2b02 	ldrh.w	r2, [r1], #2
 800950c:	60c2      	str	r2, [r0, #12]
      hspi->TxXferCount--;
 800950e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009510:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8009512:	3a01      	subs	r2, #1
 8009514:	b292      	uxth	r2, r2
 8009516:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8009518:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800951a:	b292      	uxth	r2, r2
 800951c:	2a00      	cmp	r2, #0
 800951e:	d0d4      	beq.n	80094ca <HAL_SPI_Transmit+0xc6>
 8009520:	1c6a      	adds	r2, r5, #1
 8009522:	d15e      	bne.n	80095e2 <HAL_SPI_Transmit+0x1de>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009524:	6883      	ldr	r3, [r0, #8]
 8009526:	079f      	lsls	r7, r3, #30
 8009528:	d50f      	bpl.n	800954a <HAL_SPI_Transmit+0x146>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800952a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800952c:	f832 3b02 	ldrh.w	r3, [r2], #2
 8009530:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8009532:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009534:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009536:	3b01      	subs	r3, #1
 8009538:	b29b      	uxth	r3, r3
 800953a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800953c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d0c2      	beq.n	80094ca <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009544:	6883      	ldr	r3, [r0, #8]
 8009546:	079f      	lsls	r7, r3, #30
 8009548:	d4ef      	bmi.n	800952a <HAL_SPI_Transmit+0x126>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800954a:	f7fd fe07 	bl	800715c <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 800954e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009550:	b29b      	uxth	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0b9      	beq.n	80094ca <HAL_SPI_Transmit+0xc6>
 8009556:	6820      	ldr	r0, [r4, #0]
 8009558:	e7e4      	b.n	8009524 <HAL_SPI_Transmit+0x120>
    __HAL_SPI_DISABLE(hspi);
 800955a:	6802      	ldr	r2, [r0, #0]
 800955c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009560:	6002      	str	r2, [r0, #0]
    SPI_1LINE_TX(hspi);
 8009562:	6802      	ldr	r2, [r0, #0]
 8009564:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009568:	6002      	str	r2, [r0, #0]
 800956a:	e784      	b.n	8009476 <HAL_SPI_Transmit+0x72>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800956c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800956e:	7812      	ldrb	r2, [r2, #0]
 8009570:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8009572:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009574:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009576:	3b01      	subs	r3, #1
 8009578:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800957a:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800957c:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800957e:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 8009580:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009582:	b29b      	uxth	r3, r3
 8009584:	2b00      	cmp	r3, #0
 8009586:	d0a0      	beq.n	80094ca <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009588:	6823      	ldr	r3, [r4, #0]
 800958a:	689a      	ldr	r2, [r3, #8]
 800958c:	0792      	lsls	r2, r2, #30
 800958e:	d4ed      	bmi.n	800956c <HAL_SPI_Transmit+0x168>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009590:	f7fd fde4 	bl	800715c <HAL_GetTick>
 8009594:	1b80      	subs	r0, r0, r6
 8009596:	42a8      	cmp	r0, r5
 8009598:	d3f2      	bcc.n	8009580 <HAL_SPI_Transmit+0x17c>
          errorcode = HAL_TIMEOUT;
 800959a:	2003      	movs	r0, #3
 800959c:	e749      	b.n	8009432 <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800959e:	f898 3000 	ldrb.w	r3, [r8]
 80095a2:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80095a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80095a8:	3b01      	subs	r3, #1
 80095aa:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095ac:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80095ae:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095b0:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80095b2:	e772      	b.n	800949a <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095b4:	f7fd fdd2 	bl	800715c <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80095b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f47f af71 	bne.w	80094a4 <HAL_SPI_Transmit+0xa0>
 80095c2:	e782      	b.n	80094ca <HAL_SPI_Transmit+0xc6>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80095c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80095c6:	f832 1b02 	ldrh.w	r1, [r2], #2
 80095ca:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80095cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80095ce:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80095d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80095d8:	b29b      	uxth	r3, r3
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f43f af75 	beq.w	80094ca <HAL_SPI_Transmit+0xc6>
 80095e0:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80095e2:	689a      	ldr	r2, [r3, #8]
 80095e4:	0791      	lsls	r1, r2, #30
 80095e6:	d4ed      	bmi.n	80095c4 <HAL_SPI_Transmit+0x1c0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095e8:	f7fd fdb8 	bl	800715c <HAL_GetTick>
 80095ec:	1b80      	subs	r0, r0, r6
 80095ee:	42a8      	cmp	r0, r5
 80095f0:	d3f1      	bcc.n	80095d6 <HAL_SPI_Transmit+0x1d2>
 80095f2:	e7d2      	b.n	800959a <HAL_SPI_Transmit+0x196>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095f4:	2f01      	cmp	r7, #1
 80095f6:	d18f      	bne.n	8009518 <HAL_SPI_Transmit+0x114>
 80095f8:	e785      	b.n	8009506 <HAL_SPI_Transmit+0x102>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095fa:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095fc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80095fe:	4313      	orrs	r3, r2
 8009600:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009602:	6562      	str	r2, [r4, #84]	; 0x54
 8009604:	e76a      	b.n	80094dc <HAL_SPI_Transmit+0xd8>
 8009606:	bf00      	nop

08009608 <HAL_SPI_TransmitReceive>:
{
 8009608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800960c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800960e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 8009612:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8009614:	2801      	cmp	r0, #1
 8009616:	f000 8096 	beq.w	8009746 <HAL_SPI_TransmitReceive+0x13e>
 800961a:	461f      	mov	r7, r3
 800961c:	2301      	movs	r3, #1
 800961e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009622:	4691      	mov	r9, r2
 8009624:	4688      	mov	r8, r1
 8009626:	f7fd fd99 	bl	800715c <HAL_GetTick>
  tmp_state           = hspi->State;
 800962a:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 800962e:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009630:	2e01      	cmp	r6, #1
  tmp_mode            = hspi->Init.Mode;
 8009632:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 8009634:	b2f2      	uxtb	r2, r6
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009636:	d011      	beq.n	800965c <HAL_SPI_TransmitReceive+0x54>
 8009638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800963c:	d009      	beq.n	8009652 <HAL_SPI_TransmitReceive+0x4a>
    errorcode = HAL_BUSY;
 800963e:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8009640:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8009642:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8009644:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009648:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800964c:	b003      	add	sp, #12
 800964e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009652:	68a1      	ldr	r1, [r4, #8]
 8009654:	2900      	cmp	r1, #0
 8009656:	d1f2      	bne.n	800963e <HAL_SPI_TransmitReceive+0x36>
 8009658:	2a04      	cmp	r2, #4
 800965a:	d1f0      	bne.n	800963e <HAL_SPI_TransmitReceive+0x36>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800965c:	f1b8 0f00 	cmp.w	r8, #0
 8009660:	d075      	beq.n	800974e <HAL_SPI_TransmitReceive+0x146>
 8009662:	f1b9 0f00 	cmp.w	r9, #0
 8009666:	d072      	beq.n	800974e <HAL_SPI_TransmitReceive+0x146>
 8009668:	2f00      	cmp	r7, #0
 800966a:	d070      	beq.n	800974e <HAL_SPI_TransmitReceive+0x146>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800966c:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009670:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009672:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009674:	bf1c      	itt	ne
 8009676:	2205      	movne	r2, #5
 8009678:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800967c:	2200      	movs	r2, #0
 800967e:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 8009680:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8009682:	86e7      	strh	r7, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009684:	6801      	ldr	r1, [r0, #0]
  hspi->TxISR       = NULL;
 8009686:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800968a:	064a      	lsls	r2, r1, #25
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800968c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009690:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009692:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009696:	86a7      	strh	r7, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009698:	d403      	bmi.n	80096a2 <HAL_SPI_TransmitReceive+0x9a>
    __HAL_SPI_ENABLE(hspi);
 800969a:	6802      	ldr	r2, [r0, #0]
 800969c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096a0:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096a2:	68e2      	ldr	r2, [r4, #12]
 80096a4:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80096a8:	f000 8089 	beq.w	80097be <HAL_SPI_TransmitReceive+0x1b6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d07b      	beq.n	80097a8 <HAL_SPI_TransmitReceive+0x1a0>
 80096b0:	2f01      	cmp	r7, #1
 80096b2:	d079      	beq.n	80097a8 <HAL_SPI_TransmitReceive+0x1a0>
 80096b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        txallowed = 1U;
 80096b6:	2601      	movs	r6, #1
 80096b8:	3301      	adds	r3, #1
 80096ba:	d028      	beq.n	800970e <HAL_SPI_TransmitReceive+0x106>
 80096bc:	e049      	b.n	8009752 <HAL_SPI_TransmitReceive+0x14a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096be:	6822      	ldr	r2, [r4, #0]
 80096c0:	6893      	ldr	r3, [r2, #8]
 80096c2:	0799      	lsls	r1, r3, #30
 80096c4:	d50f      	bpl.n	80096e6 <HAL_SPI_TransmitReceive+0xde>
 80096c6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	b163      	cbz	r3, 80096e6 <HAL_SPI_TransmitReceive+0xde>
 80096cc:	b15e      	cbz	r6, 80096e6 <HAL_SPI_TransmitReceive+0xde>
        txallowed = 0U;
 80096ce:	2600      	movs	r6, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 80096d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80096d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80096da:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80096dc:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 80096de:	b29b      	uxth	r3, r3
 80096e0:	6822      	ldr	r2, [r4, #0]
 80096e2:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 80096e4:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096e6:	6893      	ldr	r3, [r2, #8]
 80096e8:	f013 0301 	ands.w	r3, r3, #1
 80096ec:	d00d      	beq.n	800970a <HAL_SPI_TransmitReceive+0x102>
 80096ee:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80096f0:	b289      	uxth	r1, r1
 80096f2:	b151      	cbz	r1, 800970a <HAL_SPI_TransmitReceive+0x102>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096f4:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 80096f6:	461e      	mov	r6, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80096f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80096fa:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80096fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 80096fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009700:	3b01      	subs	r3, #1
 8009702:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 8009704:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8009706:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8009708:	63a2      	str	r2, [r4, #56]	; 0x38
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800970a:	f7fd fd27 	bl	800715c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800970e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009710:	b29b      	uxth	r3, r3
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1d3      	bne.n	80096be <HAL_SPI_TransmitReceive+0xb6>
 8009716:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d1cf      	bne.n	80096be <HAL_SPI_TransmitReceive+0xb6>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800971e:	462b      	mov	r3, r5
 8009720:	2180      	movs	r1, #128	; 0x80
 8009722:	4620      	mov	r0, r4
 8009724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009726:	f7ff fdb3 	bl	8009290 <SPI_WaitFlagStateUntilTimeout.constprop.1>
 800972a:	2800      	cmp	r0, #0
 800972c:	f040 80c6 	bne.w	80098bc <HAL_SPI_TransmitReceive+0x2b4>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009730:	68a3      	ldr	r3, [r4, #8]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d184      	bne.n	8009640 <HAL_SPI_TransmitReceive+0x38>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	9001      	str	r0, [sp, #4]
 800973a:	68da      	ldr	r2, [r3, #12]
 800973c:	9201      	str	r2, [sp, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	e77c      	b.n	8009640 <HAL_SPI_TransmitReceive+0x38>
  __HAL_LOCK(hspi);
 8009746:	2002      	movs	r0, #2
}
 8009748:	b003      	add	sp, #12
 800974a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_ERROR;
 800974e:	2001      	movs	r0, #1
 8009750:	e776      	b.n	8009640 <HAL_SPI_TransmitReceive+0x38>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009752:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009754:	b29b      	uxth	r3, r3
 8009756:	b91b      	cbnz	r3, 8009760 <HAL_SPI_TransmitReceive+0x158>
 8009758:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800975a:	b29b      	uxth	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d0de      	beq.n	800971e <HAL_SPI_TransmitReceive+0x116>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009760:	6822      	ldr	r2, [r4, #0]
 8009762:	6893      	ldr	r3, [r2, #8]
 8009764:	079b      	lsls	r3, r3, #30
 8009766:	d50f      	bpl.n	8009788 <HAL_SPI_TransmitReceive+0x180>
 8009768:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800976a:	b29b      	uxth	r3, r3
 800976c:	b163      	cbz	r3, 8009788 <HAL_SPI_TransmitReceive+0x180>
 800976e:	b15e      	cbz	r6, 8009788 <HAL_SPI_TransmitReceive+0x180>
        txallowed = 0U;
 8009770:	2600      	movs	r6, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009772:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009774:	781b      	ldrb	r3, [r3, #0]
 8009776:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 8009778:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 800977a:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800977c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800977e:	1c51      	adds	r1, r2, #1
        hspi->TxXferCount--;
 8009780:	b29b      	uxth	r3, r3
 8009782:	6822      	ldr	r2, [r4, #0]
 8009784:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8009786:	6321      	str	r1, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009788:	6893      	ldr	r3, [r2, #8]
 800978a:	f013 0301 	ands.w	r3, r3, #1
 800978e:	d003      	beq.n	8009798 <HAL_SPI_TransmitReceive+0x190>
 8009790:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8009792:	b289      	uxth	r1, r1
 8009794:	2900      	cmp	r1, #0
 8009796:	d150      	bne.n	800983a <HAL_SPI_TransmitReceive+0x232>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009798:	f7fd fce0 	bl	800715c <HAL_GetTick>
 800979c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979e:	1b40      	subs	r0, r0, r5
 80097a0:	4298      	cmp	r0, r3
 80097a2:	d3d6      	bcc.n	8009752 <HAL_SPI_TransmitReceive+0x14a>
        errorcode = HAL_TIMEOUT;
 80097a4:	2003      	movs	r0, #3
 80097a6:	e74b      	b.n	8009640 <HAL_SPI_TransmitReceive+0x38>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097a8:	f898 3000 	ldrb.w	r3, [r8]
 80097ac:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80097ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097b6:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80097b8:	86e3      	strh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ba:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80097bc:	e77a      	b.n	80096b4 <HAL_SPI_TransmitReceive+0xac>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d147      	bne.n	8009852 <HAL_SPI_TransmitReceive+0x24a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097c2:	4641      	mov	r1, r8
 80097c4:	f831 3b02 	ldrh.w	r3, [r1], #2
 80097c8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80097ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80097cc:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80097ce:	3b01      	subs	r3, #1
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80097d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
{
 80097d6:	2601      	movs	r6, #1
 80097d8:	3301      	adds	r3, #1
 80097da:	d025      	beq.n	8009828 <HAL_SPI_TransmitReceive+0x220>
 80097dc:	e03c      	b.n	8009858 <HAL_SPI_TransmitReceive+0x250>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097de:	6822      	ldr	r2, [r4, #0]
 80097e0:	6893      	ldr	r3, [r2, #8]
 80097e2:	079f      	lsls	r7, r3, #30
 80097e4:	d50d      	bpl.n	8009802 <HAL_SPI_TransmitReceive+0x1fa>
 80097e6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	b153      	cbz	r3, 8009802 <HAL_SPI_TransmitReceive+0x1fa>
 80097ec:	b14e      	cbz	r6, 8009802 <HAL_SPI_TransmitReceive+0x1fa>
        txallowed = 0U;
 80097ee:	2600      	movs	r6, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80097f2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80097f6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80097f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097fa:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80097fc:	3b01      	subs	r3, #1
 80097fe:	b29b      	uxth	r3, r3
 8009800:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009802:	6893      	ldr	r3, [r2, #8]
 8009804:	f013 0301 	ands.w	r3, r3, #1
 8009808:	d00c      	beq.n	8009824 <HAL_SPI_TransmitReceive+0x21c>
 800980a:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800980c:	b289      	uxth	r1, r1
 800980e:	b149      	cbz	r1, 8009824 <HAL_SPI_TransmitReceive+0x21c>
        txallowed = 1U;
 8009810:	461e      	mov	r6, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009812:	68d3      	ldr	r3, [r2, #12]
 8009814:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009816:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800981a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800981c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800981e:	3b01      	subs	r3, #1
 8009820:	b29b      	uxth	r3, r3
 8009822:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009824:	f7fd fc9a 	bl	800715c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009828:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800982a:	b29b      	uxth	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d1d6      	bne.n	80097de <HAL_SPI_TransmitReceive+0x1d6>
 8009830:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009832:	b29b      	uxth	r3, r3
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1d2      	bne.n	80097de <HAL_SPI_TransmitReceive+0x1d6>
 8009838:	e771      	b.n	800971e <HAL_SPI_TransmitReceive+0x116>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800983a:	68d2      	ldr	r2, [r2, #12]
        txallowed = 1U;
 800983c:	461e      	mov	r6, r3
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800983e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009840:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8009842:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 8009844:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8009846:	3b01      	subs	r3, #1
 8009848:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr++;
 800984a:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800984c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr++;
 800984e:	63a2      	str	r2, [r4, #56]	; 0x38
        txallowed = 1U;
 8009850:	e7a2      	b.n	8009798 <HAL_SPI_TransmitReceive+0x190>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009852:	2f01      	cmp	r7, #1
 8009854:	d1be      	bne.n	80097d4 <HAL_SPI_TransmitReceive+0x1cc>
 8009856:	e7b4      	b.n	80097c2 <HAL_SPI_TransmitReceive+0x1ba>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009858:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800985a:	b29b      	uxth	r3, r3
 800985c:	b923      	cbnz	r3, 8009868 <HAL_SPI_TransmitReceive+0x260>
 800985e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009860:	b29b      	uxth	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	f43f af5b 	beq.w	800971e <HAL_SPI_TransmitReceive+0x116>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009868:	6822      	ldr	r2, [r4, #0]
 800986a:	6893      	ldr	r3, [r2, #8]
 800986c:	0798      	lsls	r0, r3, #30
 800986e:	d50d      	bpl.n	800988c <HAL_SPI_TransmitReceive+0x284>
 8009870:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009872:	b29b      	uxth	r3, r3
 8009874:	b153      	cbz	r3, 800988c <HAL_SPI_TransmitReceive+0x284>
 8009876:	b14e      	cbz	r6, 800988c <HAL_SPI_TransmitReceive+0x284>
        txallowed = 0U;
 8009878:	2600      	movs	r6, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800987a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800987c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8009880:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8009882:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009884:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8009886:	3b01      	subs	r3, #1
 8009888:	b29b      	uxth	r3, r3
 800988a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800988c:	6893      	ldr	r3, [r2, #8]
 800988e:	f013 0301 	ands.w	r3, r3, #1
 8009892:	d00c      	beq.n	80098ae <HAL_SPI_TransmitReceive+0x2a6>
 8009894:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8009896:	b289      	uxth	r1, r1
 8009898:	b149      	cbz	r1, 80098ae <HAL_SPI_TransmitReceive+0x2a6>
        txallowed = 1U;
 800989a:	461e      	mov	r6, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800989c:	68d3      	ldr	r3, [r2, #12]
 800989e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80098a0:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80098a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098a6:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80098a8:	3b01      	subs	r3, #1
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098ae:	f7fd fc55 	bl	800715c <HAL_GetTick>
 80098b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098b4:	1b40      	subs	r0, r0, r5
 80098b6:	4298      	cmp	r0, r3
 80098b8:	d3ce      	bcc.n	8009858 <HAL_SPI_TransmitReceive+0x250>
 80098ba:	e773      	b.n	80097a4 <HAL_SPI_TransmitReceive+0x19c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098bc:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098be:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80098c0:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098c2:	4313      	orrs	r3, r2
 80098c4:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098c6:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 80098c8:	e6ba      	b.n	8009640 <HAL_SPI_TransmitReceive+0x38>
 80098ca:	bf00      	nop

080098cc <HAL_SPI_ErrorCallback>:
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop

080098d0 <HAL_SPI_IRQHandler>:
{
 80098d0:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 80098d2:	6802      	ldr	r2, [r0, #0]
{
 80098d4:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 80098d6:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80098d8:	6893      	ldr	r3, [r2, #8]
{
 80098da:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80098dc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80098e0:	f3c3 1580 	ubfx	r5, r3, #6, #1
 80098e4:	d105      	bne.n	80098f2 <HAL_SPI_IRQHandler+0x22>
 80098e6:	f013 0f01 	tst.w	r3, #1
 80098ea:	d002      	beq.n	80098f2 <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80098ec:	f011 0f40 	tst.w	r1, #64	; 0x40
 80098f0:	d159      	bne.n	80099a6 <HAL_SPI_IRQHandler+0xd6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80098f2:	0798      	lsls	r0, r3, #30
 80098f4:	d501      	bpl.n	80098fa <HAL_SPI_IRQHandler+0x2a>
 80098f6:	0608      	lsls	r0, r1, #24
 80098f8:	d44f      	bmi.n	800999a <HAL_SPI_IRQHandler+0xca>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80098fa:	f3c3 1040 	ubfx	r0, r3, #5, #1
 80098fe:	069b      	lsls	r3, r3, #26
 8009900:	d510      	bpl.n	8009924 <HAL_SPI_IRQHandler+0x54>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009902:	0688      	lsls	r0, r1, #26
 8009904:	d50c      	bpl.n	8009920 <HAL_SPI_IRQHandler+0x50>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009906:	2d00      	cmp	r5, #0
 8009908:	d05a      	beq.n	80099c0 <HAL_SPI_IRQHandler+0xf0>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800990a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800990e:	2b03      	cmp	r3, #3
 8009910:	d14b      	bne.n	80099aa <HAL_SPI_IRQHandler+0xda>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009912:	2300      	movs	r3, #0
 8009914:	9302      	str	r3, [sp, #8]
 8009916:	68d3      	ldr	r3, [r2, #12]
 8009918:	9302      	str	r3, [sp, #8]
 800991a:	6893      	ldr	r3, [r2, #8]
 800991c:	9302      	str	r3, [sp, #8]
 800991e:	9b02      	ldr	r3, [sp, #8]
}
 8009920:	b005      	add	sp, #20
 8009922:	bd30      	pop	{r4, r5, pc}
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8009924:	2d00      	cmp	r5, #0
 8009926:	d0fb      	beq.n	8009920 <HAL_SPI_IRQHandler+0x50>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8009928:	068b      	lsls	r3, r1, #26
 800992a:	d5f9      	bpl.n	8009920 <HAL_SPI_IRQHandler+0x50>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800992c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8009930:	2b03      	cmp	r3, #3
 8009932:	d0ee      	beq.n	8009912 <HAL_SPI_IRQHandler+0x42>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009934:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009936:	f043 0304 	orr.w	r3, r3, #4
 800993a:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800993c:	9001      	str	r0, [sp, #4]
 800993e:	68d3      	ldr	r3, [r2, #12]
 8009940:	9301      	str	r3, [sp, #4]
 8009942:	6893      	ldr	r3, [r2, #8]
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	9b01      	ldr	r3, [sp, #4]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009948:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0e8      	beq.n	8009920 <HAL_SPI_IRQHandler+0x50>
      hspi->State = HAL_SPI_STATE_READY;
 800994e:	2001      	movs	r0, #1
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009950:	6853      	ldr	r3, [r2, #4]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009952:	0789      	lsls	r1, r1, #30
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009954:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8009958:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 800995a:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800995e:	d03d      	beq.n	80099dc <HAL_SPI_IRQHandler+0x10c>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009960:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8009962:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8009964:	f023 0303 	bic.w	r3, r3, #3
 8009968:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800996a:	b140      	cbz	r0, 800997e <HAL_SPI_IRQHandler+0xae>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800996c:	4b1d      	ldr	r3, [pc, #116]	; (80099e4 <HAL_SPI_IRQHandler+0x114>)
 800996e:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009970:	f7fd ff68 	bl	8007844 <HAL_DMA_Abort_IT>
 8009974:	b118      	cbz	r0, 800997e <HAL_SPI_IRQHandler+0xae>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009976:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997c:	6563      	str	r3, [r4, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800997e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8009980:	2800      	cmp	r0, #0
 8009982:	d0cd      	beq.n	8009920 <HAL_SPI_IRQHandler+0x50>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009984:	4b17      	ldr	r3, [pc, #92]	; (80099e4 <HAL_SPI_IRQHandler+0x114>)
 8009986:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009988:	f7fd ff5c 	bl	8007844 <HAL_DMA_Abort_IT>
 800998c:	2800      	cmp	r0, #0
 800998e:	d0c7      	beq.n	8009920 <HAL_SPI_IRQHandler+0x50>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009990:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009996:	6563      	str	r3, [r4, #84]	; 0x54
 8009998:	e7c2      	b.n	8009920 <HAL_SPI_IRQHandler+0x50>
    hspi->TxISR(hspi);
 800999a:	4620      	mov	r0, r4
 800999c:	6c63      	ldr	r3, [r4, #68]	; 0x44
}
 800999e:	b005      	add	sp, #20
 80099a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    hspi->TxISR(hspi);
 80099a4:	4718      	bx	r3
    hspi->RxISR(hspi);
 80099a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80099a8:	e7f9      	b.n	800999e <HAL_SPI_IRQHandler+0xce>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099aa:	2000      	movs	r0, #0
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80099ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80099ae:	f043 0304 	orr.w	r3, r3, #4
 80099b2:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099b4:	9001      	str	r0, [sp, #4]
 80099b6:	68d3      	ldr	r3, [r2, #12]
 80099b8:	9301      	str	r3, [sp, #4]
 80099ba:	6893      	ldr	r3, [r2, #8]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	9b01      	ldr	r3, [sp, #4]
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099c0:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80099c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80099c4:	f043 0301 	orr.w	r3, r3, #1
 80099c8:	6563      	str	r3, [r4, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80099ca:	9003      	str	r0, [sp, #12]
 80099cc:	6893      	ldr	r3, [r2, #8]
 80099ce:	9303      	str	r3, [sp, #12]
 80099d0:	6813      	ldr	r3, [r2, #0]
 80099d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099d6:	6013      	str	r3, [r2, #0]
 80099d8:	9b03      	ldr	r3, [sp, #12]
 80099da:	e7b5      	b.n	8009948 <HAL_SPI_IRQHandler+0x78>
        HAL_SPI_ErrorCallback(hspi);
 80099dc:	4620      	mov	r0, r4
 80099de:	f7ff ff75 	bl	80098cc <HAL_SPI_ErrorCallback>
 80099e2:	e79d      	b.n	8009920 <HAL_SPI_IRQHandler+0x50>
 80099e4:	080099e9 	.word	0x080099e9

080099e8 <SPI_DMAAbortOnError>:
{
 80099e8:	b508      	push	{r3, lr}
  hspi->RxXferCount = 0U;
 80099ea:	2300      	movs	r3, #0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80099ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80099ee:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80099f0:	86c3      	strh	r3, [r0, #54]	; 0x36
  HAL_SPI_ErrorCallback(hspi);
 80099f2:	f7ff ff6b 	bl	80098cc <HAL_SPI_ErrorCallback>
}
 80099f6:	bd08      	pop	{r3, pc}

080099f8 <HAL_SPI_GetState>:
  return hspi->State;
 80099f8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop

08009a00 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a00:	2800      	cmp	r0, #0
 8009a02:	d05d      	beq.n	8009ac0 <HAL_TIM_PWM_Init+0xc0>
{
 8009a04:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a06:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009a0a:	4604      	mov	r4, r0
 8009a0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d03c      	beq.n	8009a8e <HAL_TIM_PWM_Init+0x8e>
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a14:	2302      	movs	r3, #2

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a16:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a18:	492a      	ldr	r1, [pc, #168]	; (8009ac4 <HAL_TIM_PWM_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8009a1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a1e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8009a20:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a22:	d039      	beq.n	8009a98 <HAL_TIM_PWM_Init+0x98>
 8009a24:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8009a28:	d028      	beq.n	8009a7c <HAL_TIM_PWM_Init+0x7c>
 8009a2a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8009a2e:	428a      	cmp	r2, r1
 8009a30:	d024      	beq.n	8009a7c <HAL_TIM_PWM_Init+0x7c>
 8009a32:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009a36:	428a      	cmp	r2, r1
 8009a38:	d020      	beq.n	8009a7c <HAL_TIM_PWM_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a3a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a3c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a3e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a44:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009a46:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a48:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009a4a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a50:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009a58:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009a5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009a60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009a70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8009a74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009a78:	2000      	movs	r0, #0
}
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8009a7c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009a82:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a84:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a8a:	430b      	orrs	r3, r1
 8009a8c:	e7d5      	b.n	8009a3a <HAL_TIM_PWM_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 8009a8e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8009a92:	f7fc f849 	bl	8005b28 <HAL_TIM_PWM_MspInit>
 8009a96:	e7bd      	b.n	8009a14 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8009a98:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009a9e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aa0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009aa6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009aa8:	69a1      	ldr	r1, [r4, #24]
 8009aaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009aae:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8009ab0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ab2:	68e3      	ldr	r3, [r4, #12]
 8009ab4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009ab6:	6863      	ldr	r3, [r4, #4]
 8009ab8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8009aba:	6963      	ldr	r3, [r4, #20]
 8009abc:	6313      	str	r3, [r2, #48]	; 0x30
 8009abe:	e7c5      	b.n	8009a4c <HAL_TIM_PWM_Init+0x4c>
    return HAL_ERROR;
 8009ac0:	2001      	movs	r0, #1
}
 8009ac2:	4770      	bx	lr
 8009ac4:	40012c00 	.word	0x40012c00

08009ac8 <HAL_TIM_PWM_Start_DMA>:
 8009ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aca:	4605      	mov	r5, r0
 8009acc:	460c      	mov	r4, r1
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	d14c      	bne.n	8009b6c <HAL_TIM_PWM_Start_DMA+0xa4>
 8009ad2:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
 8009ad6:	2902      	cmp	r1, #2
 8009ad8:	b2c8      	uxtb	r0, r1
 8009ada:	d046      	beq.n	8009b6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8009adc:	f895 003e 	ldrb.w	r0, [r5, #62]	; 0x3e
 8009ae0:	f1a0 0001 	sub.w	r0, r0, #1
 8009ae4:	fab0 f080 	clz	r0, r0
 8009ae8:	0940      	lsrs	r0, r0, #5
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d050      	beq.n	8009b90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009aee:	2a00      	cmp	r2, #0
 8009af0:	f000 8083 	beq.w	8009bfa <HAL_TIM_PWM_Start_DMA+0x132>
 8009af4:	2c00      	cmp	r4, #0
 8009af6:	d14d      	bne.n	8009b94 <HAL_TIM_PWM_Start_DMA+0xcc>
 8009af8:	2102      	movs	r1, #2
 8009afa:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
 8009afe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8009b00:	4e6e      	ldr	r6, [pc, #440]	; (8009cbc <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8009b02:	4611      	mov	r1, r2
 8009b04:	4f6e      	ldr	r7, [pc, #440]	; (8009cc0 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 8009b06:	682a      	ldr	r2, [r5, #0]
 8009b08:	6286      	str	r6, [r0, #40]	; 0x28
 8009b0a:	4e6e      	ldr	r6, [pc, #440]	; (8009cc4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8009b0c:	62c7      	str	r7, [r0, #44]	; 0x2c
 8009b0e:	6306      	str	r6, [r0, #48]	; 0x30
 8009b10:	3234      	adds	r2, #52	; 0x34
 8009b12:	f7fd fe33 	bl	800777c <HAL_DMA_Start_IT>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d13a      	bne.n	8009b90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009b1a:	682b      	ldr	r3, [r5, #0]
 8009b1c:	68da      	ldr	r2, [r3, #12]
 8009b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b22:	60da      	str	r2, [r3, #12]
 8009b24:	e000      	b.n	8009b28 <HAL_TIM_PWM_Start_DMA+0x60>
 8009b26:	682b      	ldr	r3, [r5, #0]
 8009b28:	2101      	movs	r1, #1
 8009b2a:	6a1a      	ldr	r2, [r3, #32]
 8009b2c:	f004 041f 	and.w	r4, r4, #31
 8009b30:	fa01 f404 	lsl.w	r4, r1, r4
 8009b34:	ea22 0204 	bic.w	r2, r2, r4
 8009b38:	621a      	str	r2, [r3, #32]
 8009b3a:	6a19      	ldr	r1, [r3, #32]
 8009b3c:	4a62      	ldr	r2, [pc, #392]	; (8009cc8 <HAL_TIM_PWM_Start_DMA+0x200>)
 8009b3e:	430c      	orrs	r4, r1
 8009b40:	4293      	cmp	r3, r2
 8009b42:	621c      	str	r4, [r3, #32]
 8009b44:	f000 8088 	beq.w	8009c58 <HAL_TIM_PWM_Start_DMA+0x190>
 8009b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b4c:	f000 8088 	beq.w	8009c60 <HAL_TIM_PWM_Start_DMA+0x198>
 8009b50:	4a5e      	ldr	r2, [pc, #376]	; (8009ccc <HAL_TIM_PWM_Start_DMA+0x204>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	f000 8084 	beq.w	8009c60 <HAL_TIM_PWM_Start_DMA+0x198>
 8009b58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d07f      	beq.n	8009c60 <HAL_TIM_PWM_Start_DMA+0x198>
 8009b60:	2000      	movs	r0, #0
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	f042 0201 	orr.w	r2, r2, #1
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b6c:	2904      	cmp	r1, #4
 8009b6e:	d037      	beq.n	8009be0 <HAL_TIM_PWM_Start_DMA+0x118>
 8009b70:	2908      	cmp	r1, #8
 8009b72:	d07d      	beq.n	8009c70 <HAL_TIM_PWM_Start_DMA+0x1a8>
 8009b74:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8009b78:	2902      	cmp	r1, #2
 8009b7a:	b2c8      	uxtb	r0, r1
 8009b7c:	d0f5      	beq.n	8009b6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8009b7e:	f895 0041 	ldrb.w	r0, [r5, #65]	; 0x41
 8009b82:	f1a0 0001 	sub.w	r0, r0, #1
 8009b86:	fab0 f080 	clz	r0, r0
 8009b8a:	0940      	lsrs	r0, r0, #5
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	d1ae      	bne.n	8009aee <HAL_TIM_PWM_Start_DMA+0x26>
 8009b90:	2001      	movs	r0, #1
 8009b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b94:	2c04      	cmp	r4, #4
 8009b96:	d034      	beq.n	8009c02 <HAL_TIM_PWM_Start_DMA+0x13a>
 8009b98:	2c08      	cmp	r4, #8
 8009b9a:	d077      	beq.n	8009c8c <HAL_TIM_PWM_Start_DMA+0x1c4>
 8009b9c:	2102      	movs	r1, #2
 8009b9e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
 8009ba2:	2c0c      	cmp	r4, #12
 8009ba4:	d8bf      	bhi.n	8009b26 <HAL_TIM_PWM_Start_DMA+0x5e>
 8009ba6:	a101      	add	r1, pc, #4	; (adr r1, 8009bac <HAL_TIM_PWM_Start_DMA+0xe4>)
 8009ba8:	f851 f024 	ldr.w	pc, [r1, r4, lsl #2]
 8009bac:	08009aff 	.word	0x08009aff
 8009bb0:	08009b27 	.word	0x08009b27
 8009bb4:	08009b27 	.word	0x08009b27
 8009bb8:	08009b27 	.word	0x08009b27
 8009bbc:	08009c09 	.word	0x08009c09
 8009bc0:	08009b27 	.word	0x08009b27
 8009bc4:	08009b27 	.word	0x08009b27
 8009bc8:	08009b27 	.word	0x08009b27
 8009bcc:	08009b27 	.word	0x08009b27
 8009bd0:	08009b27 	.word	0x08009b27
 8009bd4:	08009b27 	.word	0x08009b27
 8009bd8:	08009b27 	.word	0x08009b27
 8009bdc:	08009c31 	.word	0x08009c31
 8009be0:	f890 103f 	ldrb.w	r1, [r0, #63]	; 0x3f
 8009be4:	2902      	cmp	r1, #2
 8009be6:	b2c8      	uxtb	r0, r1
 8009be8:	d0bf      	beq.n	8009b6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8009bea:	f895 003f 	ldrb.w	r0, [r5, #63]	; 0x3f
 8009bee:	f1a0 0001 	sub.w	r0, r0, #1
 8009bf2:	fab0 f080 	clz	r0, r0
 8009bf6:	0940      	lsrs	r0, r0, #5
 8009bf8:	e777      	b.n	8009aea <HAL_TIM_PWM_Start_DMA+0x22>
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f43f af7a 	beq.w	8009af4 <HAL_TIM_PWM_Start_DMA+0x2c>
 8009c00:	e7c6      	b.n	8009b90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009c02:	2102      	movs	r1, #2
 8009c04:	f885 103f 	strb.w	r1, [r5, #63]	; 0x3f
 8009c08:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8009c0a:	4e2c      	ldr	r6, [pc, #176]	; (8009cbc <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	4f2c      	ldr	r7, [pc, #176]	; (8009cc0 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 8009c10:	682a      	ldr	r2, [r5, #0]
 8009c12:	6286      	str	r6, [r0, #40]	; 0x28
 8009c14:	4e2b      	ldr	r6, [pc, #172]	; (8009cc4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8009c16:	62c7      	str	r7, [r0, #44]	; 0x2c
 8009c18:	6306      	str	r6, [r0, #48]	; 0x30
 8009c1a:	3238      	adds	r2, #56	; 0x38
 8009c1c:	f7fd fdae 	bl	800777c <HAL_DMA_Start_IT>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d1b5      	bne.n	8009b90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c2c:	60da      	str	r2, [r3, #12]
 8009c2e:	e77b      	b.n	8009b28 <HAL_TIM_PWM_Start_DMA+0x60>
 8009c30:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8009c32:	4e22      	ldr	r6, [pc, #136]	; (8009cbc <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8009c34:	4611      	mov	r1, r2
 8009c36:	4f22      	ldr	r7, [pc, #136]	; (8009cc0 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 8009c38:	682a      	ldr	r2, [r5, #0]
 8009c3a:	6286      	str	r6, [r0, #40]	; 0x28
 8009c3c:	4e21      	ldr	r6, [pc, #132]	; (8009cc4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8009c3e:	62c7      	str	r7, [r0, #44]	; 0x2c
 8009c40:	6306      	str	r6, [r0, #48]	; 0x30
 8009c42:	3240      	adds	r2, #64	; 0x40
 8009c44:	f7fd fd9a 	bl	800777c <HAL_DMA_Start_IT>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d1a1      	bne.n	8009b90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009c4c:	682b      	ldr	r3, [r5, #0]
 8009c4e:	68da      	ldr	r2, [r3, #12]
 8009c50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	e767      	b.n	8009b28 <HAL_TIM_PWM_Start_DMA+0x60>
 8009c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c5e:	645a      	str	r2, [r3, #68]	; 0x44
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	f002 0207 	and.w	r2, r2, #7
 8009c66:	2a06      	cmp	r2, #6
 8009c68:	f47f af7a 	bne.w	8009b60 <HAL_TIM_PWM_Start_DMA+0x98>
 8009c6c:	2000      	movs	r0, #0
 8009c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c70:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
 8009c74:	2902      	cmp	r1, #2
 8009c76:	b2c8      	uxtb	r0, r1
 8009c78:	f43f af77 	beq.w	8009b6a <HAL_TIM_PWM_Start_DMA+0xa2>
 8009c7c:	f895 0040 	ldrb.w	r0, [r5, #64]	; 0x40
 8009c80:	f1a0 0001 	sub.w	r0, r0, #1
 8009c84:	fab0 f080 	clz	r0, r0
 8009c88:	0940      	lsrs	r0, r0, #5
 8009c8a:	e72e      	b.n	8009aea <HAL_TIM_PWM_Start_DMA+0x22>
 8009c8c:	2702      	movs	r7, #2
 8009c8e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8009c90:	4e0a      	ldr	r6, [pc, #40]	; (8009cbc <HAL_TIM_PWM_Start_DMA+0x1f4>)
 8009c92:	4611      	mov	r1, r2
 8009c94:	4a0a      	ldr	r2, [pc, #40]	; (8009cc0 <HAL_TIM_PWM_Start_DMA+0x1f8>)
 8009c96:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
 8009c9a:	6286      	str	r6, [r0, #40]	; 0x28
 8009c9c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8009c9e:	4e09      	ldr	r6, [pc, #36]	; (8009cc4 <HAL_TIM_PWM_Start_DMA+0x1fc>)
 8009ca0:	682a      	ldr	r2, [r5, #0]
 8009ca2:	6306      	str	r6, [r0, #48]	; 0x30
 8009ca4:	323c      	adds	r2, #60	; 0x3c
 8009ca6:	f7fd fd69 	bl	800777c <HAL_DMA_Start_IT>
 8009caa:	2800      	cmp	r0, #0
 8009cac:	f47f af70 	bne.w	8009b90 <HAL_TIM_PWM_Start_DMA+0xc8>
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	68da      	ldr	r2, [r3, #12]
 8009cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cb8:	60da      	str	r2, [r3, #12]
 8009cba:	e735      	b.n	8009b28 <HAL_TIM_PWM_Start_DMA+0x60>
 8009cbc:	08009ee1 	.word	0x08009ee1
 8009cc0:	08009f69 	.word	0x08009f69
 8009cc4:	08009fcd 	.word	0x08009fcd
 8009cc8:	40012c00 	.word	0x40012c00
 8009ccc:	40000400 	.word	0x40000400

08009cd0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8009cd0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	f000 80cb 	beq.w	8009e70 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 8009cda:	2301      	movs	r3, #1
{
 8009cdc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8009cde:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8009ce2:	2a0c      	cmp	r2, #12
 8009ce4:	d831      	bhi.n	8009d4a <HAL_TIM_PWM_ConfigChannel+0x7a>
 8009ce6:	e8df f002 	tbb	[pc, r2]
 8009cea:	3007      	.short	0x3007
 8009cec:	30663030 	.word	0x30663030
 8009cf0:	30953030 	.word	0x30953030
 8009cf4:	3030      	.short	0x3030
 8009cf6:	36          	.byte	0x36
 8009cf7:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cf8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009cfa:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cfc:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8009cfe:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d00:	f025 0501 	bic.w	r5, r5, #1
 8009d04:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8009d06:	6a1a      	ldr	r2, [r3, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d08:	4d73      	ldr	r5, [pc, #460]	; (8009ed8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8009d0a:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8009d0e:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8009d10:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d14:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d18:	42ab      	cmp	r3, r5
  tmpccer |= OC_Config->OCPolarity;
 8009d1a:	ea42 0207 	orr.w	r2, r2, r7
  tmpccmrx |= OC_Config->OCMode;
 8009d1e:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d22:	f000 80a7 	beq.w	8009e74 <HAL_TIM_PWM_ConfigChannel+0x1a4>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009d26:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009d28:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009d2c:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8009d2e:	635d      	str	r5, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d30:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d32:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d34:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d36:	f044 0408 	orr.w	r4, r4, #8
 8009d3a:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d3c:	6999      	ldr	r1, [r3, #24]
 8009d3e:	f021 0104 	bic.w	r1, r1, #4
 8009d42:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	432a      	orrs	r2, r5
 8009d48:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8009d50:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8009d52:	4618      	mov	r0, r3
}
 8009d54:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d56:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d58:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d5a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d5c:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d5e:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8009d62:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8009d64:	6a1a      	ldr	r2, [r3, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d66:	4d5c      	ldr	r5, [pc, #368]	; (8009ed8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8009d68:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8009d6c:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8009d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d72:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d76:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d78:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d7c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d80:	f000 8095 	beq.w	8009eae <HAL_TIM_PWM_ConfigChannel+0x1de>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d84:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009d86:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009d8a:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8009d8c:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d8e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d90:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009d92:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009d94:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8009d98:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009d9a:	69d9      	ldr	r1, [r3, #28]
 8009d9c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009da0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009da2:	69da      	ldr	r2, [r3, #28]
 8009da4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009da8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8009daa:	2300      	movs	r3, #0
 8009dac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8009db0:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8009db2:	4618      	mov	r0, r3
}
 8009db4:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009db6:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009db8:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dba:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009dbc:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dbe:	f025 0510 	bic.w	r5, r5, #16
 8009dc2:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8009dc4:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009dc6:	4d44      	ldr	r5, [pc, #272]	; (8009ed8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8009dc8:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8009dcc:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8009dce:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009dd2:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009dd6:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009dd8:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ddc:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009de0:	d056      	beq.n	8009e90 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CCR2 = OC_Config->Pulse;
 8009de2:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009de4:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009de8:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009dea:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009dec:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dee:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009df0:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009df2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8009df6:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009df8:	6999      	ldr	r1, [r3, #24]
 8009dfa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8009dfe:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e00:	699a      	ldr	r2, [r3, #24]
 8009e02:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8009e06:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8009e0e:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8009e10:	4618      	mov	r0, r3
}
 8009e12:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e14:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e16:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e18:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8009e1a:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e1c:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8009e20:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8009e22:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e24:	4d2c      	ldr	r5, [pc, #176]	; (8009ed8 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 8009e26:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8009e2a:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8009e2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e30:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e34:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e36:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8009e3a:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e3e:	d03c      	beq.n	8009eba <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR3 = OC_Config->Pulse;
 8009e40:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8009e42:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009e46:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8009e48:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8009e4a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e4c:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e4e:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e50:	f044 0408 	orr.w	r4, r4, #8
 8009e54:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e56:	69d9      	ldr	r1, [r3, #28]
 8009e58:	f021 0104 	bic.w	r1, r1, #4
 8009e5c:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	432a      	orrs	r2, r5
 8009e62:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8009e64:	2300      	movs	r3, #0
 8009e66:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8009e6a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8009e6c:	4618      	mov	r0, r3
}
 8009e6e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009e70:	2002      	movs	r0, #2
}
 8009e72:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8009e74:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e76:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e7a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 8009e7e:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e80:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8009e84:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e86:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e8a:	ea45 0c0c 	orr.w	ip, r5, ip
 8009e8e:	e74a      	b.n	8009d26 <HAL_TIM_PWM_ConfigChannel+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e90:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009e96:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009e9a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009e9e:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 8009ea2:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009ea8:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 8009eac:	e799      	b.n	8009de2 <HAL_TIM_PWM_ConfigChannel+0x112>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009eae:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009eb0:	f42c 4c80 	bic.w	ip, ip, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009eb4:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 8009eb8:	e764      	b.n	8009d84 <HAL_TIM_PWM_ConfigChannel+0xb4>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009eba:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ebc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ec0:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ec4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ec8:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 8009ecc:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ed2:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 8009ed6:	e7b3      	b.n	8009e40 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009ed8:	40012c00 	.word	0x40012c00

08009edc <HAL_TIM_PWM_PulseFinishedCallback>:
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop

08009ee0 <TIM_DMADelayPulseCplt>:
{
 8009ee0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ee2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009ee4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ee6:	4283      	cmp	r3, r0
 8009ee8:	d01c      	beq.n	8009f24 <TIM_DMADelayPulseCplt+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009eea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009eec:	4283      	cmp	r3, r0
 8009eee:	d00b      	beq.n	8009f08 <TIM_DMADelayPulseCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009ef0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009ef2:	4283      	cmp	r3, r0
 8009ef4:	d023      	beq.n	8009f3e <TIM_DMADelayPulseCplt+0x5e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ef8:	4283      	cmp	r3, r0
 8009efa:	d029      	beq.n	8009f50 <TIM_DMADelayPulseCplt+0x70>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009efc:	4620      	mov	r0, r4
 8009efe:	f7ff ffed 	bl	8009edc <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f02:	2300      	movs	r3, #0
 8009f04:	7723      	strb	r3, [r4, #28]
}
 8009f06:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f08:	2202      	movs	r2, #2
 8009f0a:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8009f0c:	699b      	ldr	r3, [r3, #24]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d1f4      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f12:	2301      	movs	r3, #1
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f14:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f16:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f1a:	f7ff ffdf 	bl	8009edc <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	7723      	strb	r3, [r4, #28]
}
 8009f22:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f24:	2201      	movs	r2, #1
 8009f26:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1e6      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x1c>
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f2e:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f30:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f34:	f7ff ffd2 	bl	8009edc <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	7723      	strb	r3, [r4, #28]
}
 8009f3c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f3e:	2204      	movs	r2, #4
 8009f40:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1d9      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009f48:	2301      	movs	r3, #1
 8009f4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009f4e:	e7d5      	b.n	8009efc <TIM_DMADelayPulseCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f50:	2208      	movs	r2, #8
 8009f52:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8009f54:	699b      	ldr	r3, [r3, #24]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d1d0      	bne.n	8009efc <TIM_DMADelayPulseCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009f60:	e7cc      	b.n	8009efc <TIM_DMADelayPulseCplt+0x1c>
 8009f62:	bf00      	nop

08009f64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop

08009f68 <TIM_DMADelayPulseHalfCplt>:
{
 8009f68:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009f6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009f6e:	4282      	cmp	r2, r0
 8009f70:	d01a      	beq.n	8009fa8 <TIM_DMADelayPulseHalfCplt+0x40>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009f72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009f74:	4603      	mov	r3, r0
 8009f76:	4282      	cmp	r2, r0
 8009f78:	d00e      	beq.n	8009f98 <TIM_DMADelayPulseHalfCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009f7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009f7c:	4282      	cmp	r2, r0
 8009f7e:	d01b      	beq.n	8009fb8 <TIM_DMADelayPulseHalfCplt+0x50>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009f80:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8009f82:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f84:	bf08      	it	eq
 8009f86:	2308      	moveq	r3, #8
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009f88:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f8a:	bf08      	it	eq
 8009f8c:	7723      	strbeq	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009f8e:	f7ff ffe9 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f92:	2300      	movs	r3, #0
 8009f94:	7723      	strb	r3, [r4, #28]
}
 8009f96:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f98:	2302      	movs	r3, #2
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009f9a:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f9c:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009f9e:	f7ff ffe1 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	7723      	strb	r3, [r4, #28]
}
 8009fa6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fa8:	2301      	movs	r3, #1
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009faa:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fac:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009fae:	f7ff ffd9 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	7723      	strb	r3, [r4, #28]
}
 8009fb6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fb8:	2304      	movs	r3, #4
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009fba:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fbc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009fbe:	f7ff ffd1 	bl	8009f64 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	7723      	strb	r3, [r4, #28]
}
 8009fc6:	bd10      	pop	{r4, pc}

08009fc8 <HAL_TIM_ErrorCallback>:
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop

08009fcc <TIM_DMAError>:
{
 8009fcc:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fce:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fd2:	4283      	cmp	r3, r0
 8009fd4:	d01c      	beq.n	800a010 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009fd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fd8:	4283      	cmp	r3, r0
 8009fda:	d00e      	beq.n	8009ffa <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009fdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009fde:	4283      	cmp	r3, r0
 8009fe0:	d020      	beq.n	800a024 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009fe2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009fe4:	4283      	cmp	r3, r0
 8009fe6:	d028      	beq.n	800a03a <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8009fe8:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 8009fea:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 8009fec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 8009ff0:	f7ff ffea 	bl	8009fc8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	7723      	strb	r3, [r4, #28]
}
 8009ff8:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ffa:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009ffc:	2202      	movs	r2, #2
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ffe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  HAL_TIM_ErrorCallback(htim);
 800a002:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a004:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800a006:	f7ff ffdf 	bl	8009fc8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a00a:	2300      	movs	r3, #0
 800a00c:	7723      	strb	r3, [r4, #28]
}
 800a00e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a010:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800a012:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a014:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a016:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800a01a:	f7ff ffd5 	bl	8009fc8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01e:	2300      	movs	r3, #0
 800a020:	7723      	strb	r3, [r4, #28]
}
 800a022:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a024:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a026:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800a028:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_TIM_ErrorCallback(htim);
 800a02c:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a02e:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800a030:	f7ff ffca 	bl	8009fc8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a034:	2300      	movs	r3, #0
 800a036:	7723      	strb	r3, [r4, #28]
}
 800a038:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a03a:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a03c:	2208      	movs	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800a03e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  HAL_TIM_ErrorCallback(htim);
 800a042:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a044:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800a046:	f7ff ffbf 	bl	8009fc8 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04a:	2300      	movs	r3, #0
 800a04c:	7723      	strb	r3, [r4, #28]
}
 800a04e:	bd10      	pop	{r4, pc}

0800a050 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a050:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a054:	2b01      	cmp	r3, #1
 800a056:	d026      	beq.n	800a0a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a058:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a05a:	6803      	ldr	r3, [r0, #0]
{
 800a05c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800a05e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800a062:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a064:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a066:	4d11      	ldr	r5, [pc, #68]	; (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800a068:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a06c:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a06e:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 800a070:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800a072:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a074:	d009      	beq.n	800a08a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800a076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a07a:	d006      	beq.n	800a08a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800a07c:	4a0c      	ldr	r2, [pc, #48]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d003      	beq.n	800a08a <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800a082:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a086:	4293      	cmp	r3, r2
 800a088:	d104      	bne.n	800a094 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a08a:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a08c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a090:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a092:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800a094:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800a096:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800a098:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800a09c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 800a0a0:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800a0a2:	4618      	mov	r0, r3
}
 800a0a4:	4770      	bx	lr
  __HAL_LOCK(htim);
 800a0a6:	2002      	movs	r0, #2
}
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	40012c00 	.word	0x40012c00
 800a0b0:	40000400 	.word	0x40000400

0800a0b4 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0b4:	2800      	cmp	r0, #0
 800a0b6:	d061      	beq.n	800a17c <HAL_UART_Init+0xc8>
{
 800a0b8:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a0be:	4604      	mov	r4, r0
 800a0c0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d051      	beq.n	800a16c <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0c8:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0ca:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a0cc:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800a0d0:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0d2:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 800a0d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a0d8:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0da:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a0dc:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0de:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800a0e2:	4301      	orrs	r1, r0
 800a0e4:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800a0e6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a0e8:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 800a0ec:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a0f0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800a0f2:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800a0f6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a0fc:	695a      	ldr	r2, [r3, #20]
 800a0fe:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 800a100:	491f      	ldr	r1, [pc, #124]	; (800a180 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a102:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a106:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 800a108:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a10a:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800a10c:	d033      	beq.n	800a176 <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a10e:	f7ff f81f 	bl	8009150 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a112:	6863      	ldr	r3, [r4, #4]
 800a114:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a118:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a122:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a124:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 800a126:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a128:	4816      	ldr	r0, [pc, #88]	; (800a184 <HAL_UART_Init+0xd0>)
 800a12a:	fba0 c103 	umull	ip, r1, r0, r3
 800a12e:	0949      	lsrs	r1, r1, #5
 800a130:	fb02 3311 	mls	r3, r2, r1, r3
 800a134:	011b      	lsls	r3, r3, #4
 800a136:	3332      	adds	r3, #50	; 0x32
 800a138:	fba0 2303 	umull	r2, r3, r0, r3
 800a13c:	0109      	lsls	r1, r1, #4
 800a13e:	6822      	ldr	r2, [r4, #0]
 800a140:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800a144:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a146:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800a148:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a14a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800a14e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a150:	6953      	ldr	r3, [r2, #20]
 800a152:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800a156:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800a158:	68d3      	ldr	r3, [r2, #12]
 800a15a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a15e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a160:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a162:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a166:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800a16a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800a16c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800a170:	f7fb fd40 	bl	8005bf4 <HAL_UART_MspInit>
 800a174:	e7a8      	b.n	800a0c8 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800a176:	f7fe fffb 	bl	8009170 <HAL_RCC_GetPCLK2Freq>
 800a17a:	e7ca      	b.n	800a112 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 800a17c:	2001      	movs	r0, #1
}
 800a17e:	4770      	bx	lr
 800a180:	40013800 	.word	0x40013800
 800a184:	51eb851f 	.word	0x51eb851f

0800a188 <HAL_UART_Transmit>:
{
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800a18e:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800a192:	2820      	cmp	r0, #32
 800a194:	d168      	bne.n	800a268 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 800a196:	4688      	mov	r8, r1
 800a198:	2900      	cmp	r1, #0
 800a19a:	d040      	beq.n	800a21e <HAL_UART_Transmit+0x96>
 800a19c:	4617      	mov	r7, r2
 800a19e:	2a00      	cmp	r2, #0
 800a1a0:	d03d      	beq.n	800a21e <HAL_UART_Transmit+0x96>
 800a1a2:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 800a1a4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d05d      	beq.n	800a268 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1ac:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 800a1ae:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b0:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 800a1b4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800a1c0:	f7fc ffcc 	bl	800715c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800a1c6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 800a1cc:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800a1ce:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1d0:	d04d      	beq.n	800a26e <HAL_UART_Transmit+0xe6>
    __HAL_UNLOCK(huart);
 800a1d2:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800a1d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    __HAL_UNLOCK(huart);
 800a1d6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d058      	beq.n	800a292 <HAL_UART_Transmit+0x10a>
 800a1e0:	6822      	ldr	r2, [r4, #0]
 800a1e2:	1c69      	adds	r1, r5, #1
 800a1e4:	d11e      	bne.n	800a224 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e6:	6813      	ldr	r3, [r2, #0]
 800a1e8:	061b      	lsls	r3, r3, #24
 800a1ea:	d5fc      	bpl.n	800a1e6 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 800a1ec:	f1b8 0f00 	cmp.w	r8, #0
 800a1f0:	d035      	beq.n	800a25e <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a1f2:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1f6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800a1f8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	84e3      	strh	r3, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a200:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a202:	b29b      	uxth	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d1ec      	bne.n	800a1e2 <HAL_UART_Transmit+0x5a>
 800a208:	1c68      	adds	r0, r5, #1
 800a20a:	d136      	bne.n	800a27a <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a20c:	6813      	ldr	r3, [r2, #0]
 800a20e:	0659      	lsls	r1, r3, #25
 800a210:	d5fc      	bpl.n	800a20c <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800a212:	2320      	movs	r3, #32
 800a214:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800a218:	2000      	movs	r0, #0
}
 800a21a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 800a21e:	2001      	movs	r0, #1
}
 800a220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a224:	6813      	ldr	r3, [r2, #0]
 800a226:	061f      	lsls	r7, r3, #24
 800a228:	d4e0      	bmi.n	800a1ec <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a22a:	b12d      	cbz	r5, 800a238 <HAL_UART_Transmit+0xb0>
 800a22c:	f7fc ff96 	bl	800715c <HAL_GetTick>
 800a230:	1b80      	subs	r0, r0, r6
 800a232:	4285      	cmp	r5, r0
 800a234:	6822      	ldr	r2, [r4, #0]
 800a236:	d2d4      	bcs.n	800a1e2 <HAL_UART_Transmit+0x5a>
        huart->gState  = HAL_UART_STATE_READY;
 800a238:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 800a23a:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a23c:	68d3      	ldr	r3, [r2, #12]
      return HAL_TIMEOUT;
 800a23e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a240:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a244:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a246:	6953      	ldr	r3, [r2, #20]
 800a248:	f023 0301 	bic.w	r3, r3, #1
 800a24c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800a24e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 800a252:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 800a256:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 800a25a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a25e:	f839 3b02 	ldrh.w	r3, [r9], #2
 800a262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a266:	e7c6      	b.n	800a1f6 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 800a268:	2002      	movs	r0, #2
}
 800a26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a26e:	6923      	ldr	r3, [r4, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1ae      	bne.n	800a1d2 <HAL_UART_Transmit+0x4a>
 800a274:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 800a276:	4698      	mov	r8, r3
 800a278:	e7ab      	b.n	800a1d2 <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27a:	6813      	ldr	r3, [r2, #0]
 800a27c:	065b      	lsls	r3, r3, #25
 800a27e:	d4c8      	bmi.n	800a212 <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a280:	2d00      	cmp	r5, #0
 800a282:	d0d9      	beq.n	800a238 <HAL_UART_Transmit+0xb0>
 800a284:	f7fc ff6a 	bl	800715c <HAL_GetTick>
 800a288:	1b80      	subs	r0, r0, r6
 800a28a:	4285      	cmp	r5, r0
 800a28c:	6822      	ldr	r2, [r4, #0]
 800a28e:	d2bb      	bcs.n	800a208 <HAL_UART_Transmit+0x80>
 800a290:	e7d2      	b.n	800a238 <HAL_UART_Transmit+0xb0>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	e7b8      	b.n	800a208 <HAL_UART_Transmit+0x80>
 800a296:	bf00      	nop

0800a298 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800a298:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a29c:	2b20      	cmp	r3, #32
 800a29e:	d123      	bne.n	800a2e8 <HAL_UART_Receive_IT+0x50>
    if ((pData == NULL) || (Size == 0U))
 800a2a0:	b301      	cbz	r1, 800a2e4 <HAL_UART_Receive_IT+0x4c>
 800a2a2:	b1fa      	cbz	r2, 800a2e4 <HAL_UART_Receive_IT+0x4c>
    __HAL_LOCK(huart);
 800a2a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d01d      	beq.n	800a2e8 <HAL_UART_Receive_IT+0x50>
{
 800a2ac:	b430      	push	{r4, r5}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ae:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2b0:	2522      	movs	r5, #34	; 0x22
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a2b2:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2b4:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 800a2b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 800a2ba:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2bc:	6403      	str	r3, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2be:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a2c2:	68e5      	ldr	r5, [r4, #12]
  huart->RxXferSize = Size;
 800a2c4:	8582      	strh	r2, [r0, #44]	; 0x2c
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a2c6:	f445 7580 	orr.w	r5, r5, #256	; 0x100
  huart->pRxBuffPtr = pData;
 800a2ca:	6281      	str	r1, [r0, #40]	; 0x28
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a2cc:	60e5      	str	r5, [r4, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a2ce:	6962      	ldr	r2, [r4, #20]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800a2d0:	4618      	mov	r0, r3
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a2d2:	f042 0201 	orr.w	r2, r2, #1
 800a2d6:	6162      	str	r2, [r4, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a2d8:	68e3      	ldr	r3, [r4, #12]
 800a2da:	f043 0320 	orr.w	r3, r3, #32
 800a2de:	60e3      	str	r3, [r4, #12]
}
 800a2e0:	bc30      	pop	{r4, r5}
 800a2e2:	4770      	bx	lr
      return HAL_ERROR;
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	4770      	bx	lr
    return HAL_BUSY;
 800a2e8:	2002      	movs	r0, #2
}
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UART_TxCpltCallback>:
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop

0800a2f0 <HAL_UART_ErrorCallback>:
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop

0800a2f4 <UART_DMAAbortOnError>:
{
 800a2f4:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800a2f6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a2f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800a2fa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a2fc:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800a2fe:	f7ff fff7 	bl	800a2f0 <HAL_UART_ErrorCallback>
}
 800a302:	bd08      	pop	{r3, pc}

0800a304 <HAL_UARTEx_RxEventCallback>:
}
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop

0800a308 <UART_Receive_IT.part.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a308:	6883      	ldr	r3, [r0, #8]
 800a30a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a30e:	d03b      	beq.n	800a388 <UART_Receive_IT.part.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a310:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a312:	2b00      	cmp	r3, #0
 800a314:	d02f      	beq.n	800a376 <UART_Receive_IT.part.0+0x6e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a316:	6803      	ldr	r3, [r0, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a31e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800a320:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a322:	3301      	adds	r3, #1
 800a324:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800a326:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800a328:	3b01      	subs	r3, #1
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800a32e:	bb4b      	cbnz	r3, 800a384 <UART_Receive_IT.part.0+0x7c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a330:	b510      	push	{r4, lr}
      huart->RxState = HAL_UART_STATE_READY;
 800a332:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a334:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800a336:	b082      	sub	sp, #8
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a338:	68d1      	ldr	r1, [r2, #12]
 800a33a:	f021 0120 	bic.w	r1, r1, #32
 800a33e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a340:	68d1      	ldr	r1, [r2, #12]
 800a342:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a346:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a348:	6951      	ldr	r1, [r2, #20]
 800a34a:	f021 0101 	bic.w	r1, r1, #1
 800a34e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800a350:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a354:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800a356:	2901      	cmp	r1, #1
 800a358:	d121      	bne.n	800a39e <UART_Receive_IT.part.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a35a:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a35c:	68d1      	ldr	r1, [r2, #12]
 800a35e:	f021 0110 	bic.w	r1, r1, #16
 800a362:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a364:	6811      	ldr	r1, [r2, #0]
 800a366:	06c9      	lsls	r1, r1, #27
 800a368:	d423      	bmi.n	800a3b2 <UART_Receive_IT.part.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a36a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800a36c:	f7ff ffca 	bl	800a304 <HAL_UARTEx_RxEventCallback>
}
 800a370:	2000      	movs	r0, #0
 800a372:	b002      	add	sp, #8
 800a374:	bd10      	pop	{r4, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a376:	6903      	ldr	r3, [r0, #16]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1cc      	bne.n	800a316 <UART_Receive_IT.part.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a37c:	6803      	ldr	r3, [r0, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	7013      	strb	r3, [r2, #0]
 800a382:	e7cd      	b.n	800a320 <UART_Receive_IT.part.0+0x18>
}
 800a384:	2000      	movs	r0, #0
 800a386:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a388:	6903      	ldr	r3, [r0, #16]
 800a38a:	b96b      	cbnz	r3, 800a3a8 <UART_Receive_IT.part.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a38c:	6802      	ldr	r2, [r0, #0]
 800a38e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800a390:	6852      	ldr	r2, [r2, #4]
 800a392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a396:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 800a39a:	6283      	str	r3, [r0, #40]	; 0x28
 800a39c:	e7c3      	b.n	800a326 <UART_Receive_IT.part.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 800a39e:	f7f6 feab 	bl	80010f8 <HAL_UART_RxCpltCallback>
}
 800a3a2:	2000      	movs	r0, #0
 800a3a4:	b002      	add	sp, #8
 800a3a6:	bd10      	pop	{r4, pc}
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3a8:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a3aa:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	7013      	strb	r3, [r2, #0]
 800a3b0:	e7b6      	b.n	800a320 <UART_Receive_IT.part.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a3b2:	9301      	str	r3, [sp, #4]
 800a3b4:	6813      	ldr	r3, [r2, #0]
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	6853      	ldr	r3, [r2, #4]
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	9b01      	ldr	r3, [sp, #4]
 800a3be:	e7d4      	b.n	800a36a <UART_Receive_IT.part.0+0x62>

0800a3c0 <HAL_UART_IRQHandler>:
{
 800a3c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3c2:	6803      	ldr	r3, [r0, #0]
{
 800a3c4:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3c6:	681a      	ldr	r2, [r3, #0]
{
 800a3c8:	b082      	sub	sp, #8
  if (errorflags == RESET)
 800a3ca:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3cc:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3ce:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800a3d0:	d14e      	bne.n	800a470 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a3d2:	0696      	lsls	r6, r2, #26
 800a3d4:	d502      	bpl.n	800a3dc <HAL_UART_IRQHandler+0x1c>
 800a3d6:	068d      	lsls	r5, r1, #26
 800a3d8:	f100 8090 	bmi.w	800a4fc <HAL_UART_IRQHandler+0x13c>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800a3de:	2801      	cmp	r0, #1
 800a3e0:	d00b      	beq.n	800a3fa <HAL_UART_IRQHandler+0x3a>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a3e2:	0616      	lsls	r6, r2, #24
 800a3e4:	d502      	bpl.n	800a3ec <HAL_UART_IRQHandler+0x2c>
 800a3e6:	060d      	lsls	r5, r1, #24
 800a3e8:	f100 8092 	bmi.w	800a510 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a3ec:	0650      	lsls	r0, r2, #25
 800a3ee:	d502      	bpl.n	800a3f6 <HAL_UART_IRQHandler+0x36>
 800a3f0:	064a      	lsls	r2, r1, #25
 800a3f2:	f100 80ab 	bmi.w	800a54c <HAL_UART_IRQHandler+0x18c>
}
 800a3f6:	b002      	add	sp, #8
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 800a3fa:	06d5      	lsls	r5, r2, #27
 800a3fc:	d5f1      	bpl.n	800a3e2 <HAL_UART_IRQHandler+0x22>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800a3fe:	06c8      	lsls	r0, r1, #27
 800a400:	d5ef      	bpl.n	800a3e2 <HAL_UART_IRQHandler+0x22>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a402:	2100      	movs	r1, #0
 800a404:	9101      	str	r1, [sp, #4]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	9201      	str	r2, [sp, #4]
 800a40a:	685a      	ldr	r2, [r3, #4]
 800a40c:	9201      	str	r2, [sp, #4]
 800a40e:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a410:	695a      	ldr	r2, [r3, #20]
 800a412:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800a416:	f000 80d2 	beq.w	800a5be <HAL_UART_IRQHandler+0x1fe>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a41a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a41c:	6802      	ldr	r2, [r0, #0]
 800a41e:	6852      	ldr	r2, [r2, #4]
 800a420:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 800a422:	2a00      	cmp	r2, #0
 800a424:	d0e7      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x36>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800a426:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 800a428:	4295      	cmp	r5, r2
 800a42a:	d9e4      	bls.n	800a3f6 <HAL_UART_IRQHandler+0x36>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a42c:	6986      	ldr	r6, [r0, #24]
        huart->RxXferCount = nb_remaining_rx_data;
 800a42e:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a430:	2e20      	cmp	r6, #32
 800a432:	d016      	beq.n	800a462 <HAL_UART_IRQHandler+0xa2>
          huart->RxState = HAL_UART_STATE_READY;
 800a434:	2520      	movs	r5, #32
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a436:	68da      	ldr	r2, [r3, #12]
 800a438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a43c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43e:	695a      	ldr	r2, [r3, #20]
 800a440:	f022 0201 	bic.w	r2, r2, #1
 800a444:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a446:	695a      	ldr	r2, [r3, #20]
 800a448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a44c:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800a44e:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a452:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a454:	68da      	ldr	r2, [r3, #12]
 800a456:	f022 0210 	bic.w	r2, r2, #16
 800a45a:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a45c:	f7fd f9d0 	bl	8007800 <HAL_DMA_Abort>
 800a460:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a462:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800a464:	4620      	mov	r0, r4
 800a466:	1a69      	subs	r1, r5, r1
 800a468:	b289      	uxth	r1, r1
 800a46a:	f7ff ff4b 	bl	800a304 <HAL_UARTEx_RxEventCallback>
 800a46e:	e7c2      	b.n	800a3f6 <HAL_UART_IRQHandler+0x36>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a470:	f005 0501 	and.w	r5, r5, #1
 800a474:	f401 7090 	and.w	r0, r1, #288	; 0x120
 800a478:	4328      	orrs	r0, r5
 800a47a:	d0af      	beq.n	800a3dc <HAL_UART_IRQHandler+0x1c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a47c:	07d0      	lsls	r0, r2, #31
 800a47e:	d505      	bpl.n	800a48c <HAL_UART_IRQHandler+0xcc>
 800a480:	05ce      	lsls	r6, r1, #23
 800a482:	d503      	bpl.n	800a48c <HAL_UART_IRQHandler+0xcc>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a484:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a486:	f040 0001 	orr.w	r0, r0, #1
 800a48a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a48c:	0750      	lsls	r0, r2, #29
 800a48e:	d52c      	bpl.n	800a4ea <HAL_UART_IRQHandler+0x12a>
 800a490:	b12d      	cbz	r5, 800a49e <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a492:	6c20      	ldr	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a494:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a496:	f040 0002 	orr.w	r0, r0, #2
 800a49a:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a49c:	d429      	bmi.n	800a4f2 <HAL_UART_IRQHandler+0x132>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800a49e:	0716      	lsls	r6, r2, #28
 800a4a0:	d507      	bpl.n	800a4b2 <HAL_UART_IRQHandler+0xf2>
 800a4a2:	f001 0020 	and.w	r0, r1, #32
 800a4a6:	4328      	orrs	r0, r5
 800a4a8:	d003      	beq.n	800a4b2 <HAL_UART_IRQHandler+0xf2>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4aa:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a4ac:	f040 0008 	orr.w	r0, r0, #8
 800a4b0:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4b2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d09e      	beq.n	800a3f6 <HAL_UART_IRQHandler+0x36>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a4b8:	0690      	lsls	r0, r2, #26
 800a4ba:	d509      	bpl.n	800a4d0 <HAL_UART_IRQHandler+0x110>
 800a4bc:	068a      	lsls	r2, r1, #26
 800a4be:	d507      	bpl.n	800a4d0 <HAL_UART_IRQHandler+0x110>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4c0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800a4c4:	2a22      	cmp	r2, #34	; 0x22
 800a4c6:	d103      	bne.n	800a4d0 <HAL_UART_IRQHandler+0x110>
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	f7ff ff1d 	bl	800a308 <UART_Receive_IT.part.0>
 800a4ce:	6823      	ldr	r3, [r4, #0]
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4d0:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a4d2:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4d4:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a4d8:	f005 0508 	and.w	r5, r5, #8
 800a4dc:	4315      	orrs	r5, r2
 800a4de:	d140      	bne.n	800a562 <HAL_UART_IRQHandler+0x1a2>
        HAL_UART_ErrorCallback(huart);
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f7ff ff05 	bl	800a2f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e6:	6425      	str	r5, [r4, #64]	; 0x40
 800a4e8:	e785      	b.n	800a3f6 <HAL_UART_IRQHandler+0x36>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4ea:	0790      	lsls	r0, r2, #30
 800a4ec:	d5d7      	bpl.n	800a49e <HAL_UART_IRQHandler+0xde>
 800a4ee:	2d00      	cmp	r5, #0
 800a4f0:	d0d5      	beq.n	800a49e <HAL_UART_IRQHandler+0xde>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a4f4:	f040 0004 	orr.w	r0, r0, #4
 800a4f8:	6420      	str	r0, [r4, #64]	; 0x40
 800a4fa:	e7d0      	b.n	800a49e <HAL_UART_IRQHandler+0xde>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a4fc:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800a500:	2b22      	cmp	r3, #34	; 0x22
 800a502:	f47f af78 	bne.w	800a3f6 <HAL_UART_IRQHandler+0x36>
}
 800a506:	b002      	add	sp, #8
 800a508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a50c:	f7ff befc 	b.w	800a308 <UART_Receive_IT.part.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a510:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800a514:	2a21      	cmp	r2, #33	; 0x21
 800a516:	f47f af6e 	bne.w	800a3f6 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a51a:	68a2      	ldr	r2, [r4, #8]
 800a51c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800a520:	d06e      	beq.n	800a600 <HAL_UART_IRQHandler+0x240>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a522:	6a22      	ldr	r2, [r4, #32]
 800a524:	1c51      	adds	r1, r2, #1
 800a526:	6221      	str	r1, [r4, #32]
 800a528:	7812      	ldrb	r2, [r2, #0]
 800a52a:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800a52c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800a52e:	3a01      	subs	r2, #1
 800a530:	b292      	uxth	r2, r2
 800a532:	84e2      	strh	r2, [r4, #38]	; 0x26
 800a534:	2a00      	cmp	r2, #0
 800a536:	f47f af5e 	bne.w	800a3f6 <HAL_UART_IRQHandler+0x36>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a53a:	68da      	ldr	r2, [r3, #12]
 800a53c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a540:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a548:	60da      	str	r2, [r3, #12]
 800a54a:	e754      	b.n	800a3f6 <HAL_UART_IRQHandler+0x36>
  huart->gState = HAL_UART_STATE_READY;
 800a54c:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a54e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800a550:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a556:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800a558:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800a55c:	f7ff fec6 	bl	800a2ec <HAL_UART_TxCpltCallback>
    return;
 800a560:	e749      	b.n	800a3f6 <HAL_UART_IRQHandler+0x36>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a562:	68da      	ldr	r2, [r3, #12]
 800a564:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800a568:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a56a:	695a      	ldr	r2, [r3, #20]
 800a56c:	f022 0201 	bic.w	r2, r2, #1
 800a570:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a572:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a574:	2a01      	cmp	r2, #1
 800a576:	d103      	bne.n	800a580 <HAL_UART_IRQHandler+0x1c0>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a578:	68da      	ldr	r2, [r3, #12]
 800a57a:	f022 0210 	bic.w	r2, r2, #16
 800a57e:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a580:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a582:	2120      	movs	r1, #32
 800a584:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a588:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a58a:	695a      	ldr	r2, [r3, #20]
 800a58c:	0656      	lsls	r6, r2, #25
 800a58e:	d512      	bpl.n	800a5b6 <HAL_UART_IRQHandler+0x1f6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a590:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a592:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a598:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800a59a:	b160      	cbz	r0, 800a5b6 <HAL_UART_IRQHandler+0x1f6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a59c:	4b1e      	ldr	r3, [pc, #120]	; (800a618 <HAL_UART_IRQHandler+0x258>)
 800a59e:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5a0:	f7fd f950 	bl	8007844 <HAL_DMA_Abort_IT>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	f43f af26 	beq.w	800a3f6 <HAL_UART_IRQHandler+0x36>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a5ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800a5ae:	b002      	add	sp, #8
 800a5b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5b4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800a5b6:	4620      	mov	r0, r4
 800a5b8:	f7ff fe9a 	bl	800a2f0 <HAL_UART_ErrorCallback>
 800a5bc:	e71b      	b.n	800a3f6 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5be:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 800a5c0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5c2:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 800a5c4:	b289      	uxth	r1, r1
 800a5c6:	2900      	cmp	r1, #0
 800a5c8:	f43f af15 	beq.w	800a3f6 <HAL_UART_IRQHandler+0x36>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a5cc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800a5ce:	1a08      	subs	r0, r1, r0
 800a5d0:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	f43f af0f 	beq.w	800a3f6 <HAL_UART_IRQHandler+0x36>
        huart->RxState = HAL_UART_STATE_READY;
 800a5d8:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a5da:	68d8      	ldr	r0, [r3, #12]
 800a5dc:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800a5e0:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5e2:	6958      	ldr	r0, [r3, #20]
 800a5e4:	f020 0001 	bic.w	r0, r0, #1
 800a5e8:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 800a5ea:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5ee:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f0:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5f2:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f4:	f022 0210 	bic.w	r2, r2, #16
 800a5f8:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a5fa:	f7ff fe83 	bl	800a304 <HAL_UARTEx_RxEventCallback>
 800a5fe:	e6fa      	b.n	800a3f6 <HAL_UART_IRQHandler+0x36>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a600:	6922      	ldr	r2, [r4, #16]
 800a602:	2a00      	cmp	r2, #0
 800a604:	d18d      	bne.n	800a522 <HAL_UART_IRQHandler+0x162>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a606:	6a22      	ldr	r2, [r4, #32]
 800a608:	f832 1b02 	ldrh.w	r1, [r2], #2
 800a60c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800a610:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a612:	6222      	str	r2, [r4, #32]
 800a614:	e78a      	b.n	800a52c <HAL_UART_IRQHandler+0x16c>
 800a616:	bf00      	nop
 800a618:	0800a2f5 	.word	0x0800a2f5

0800a61c <__errno>:
 800a61c:	4b01      	ldr	r3, [pc, #4]	; (800a624 <__errno+0x8>)
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	4770      	bx	lr
 800a622:	bf00      	nop
 800a624:	20000028 	.word	0x20000028

0800a628 <__libc_init_array>:
 800a628:	b570      	push	{r4, r5, r6, lr}
 800a62a:	2600      	movs	r6, #0
 800a62c:	4d0c      	ldr	r5, [pc, #48]	; (800a660 <__libc_init_array+0x38>)
 800a62e:	4c0d      	ldr	r4, [pc, #52]	; (800a664 <__libc_init_array+0x3c>)
 800a630:	1b64      	subs	r4, r4, r5
 800a632:	10a4      	asrs	r4, r4, #2
 800a634:	42a6      	cmp	r6, r4
 800a636:	d109      	bne.n	800a64c <__libc_init_array+0x24>
 800a638:	f000 fc64 	bl	800af04 <_init>
 800a63c:	2600      	movs	r6, #0
 800a63e:	4d0a      	ldr	r5, [pc, #40]	; (800a668 <__libc_init_array+0x40>)
 800a640:	4c0a      	ldr	r4, [pc, #40]	; (800a66c <__libc_init_array+0x44>)
 800a642:	1b64      	subs	r4, r4, r5
 800a644:	10a4      	asrs	r4, r4, #2
 800a646:	42a6      	cmp	r6, r4
 800a648:	d105      	bne.n	800a656 <__libc_init_array+0x2e>
 800a64a:	bd70      	pop	{r4, r5, r6, pc}
 800a64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a650:	4798      	blx	r3
 800a652:	3601      	adds	r6, #1
 800a654:	e7ee      	b.n	800a634 <__libc_init_array+0xc>
 800a656:	f855 3b04 	ldr.w	r3, [r5], #4
 800a65a:	4798      	blx	r3
 800a65c:	3601      	adds	r6, #1
 800a65e:	e7f2      	b.n	800a646 <__libc_init_array+0x1e>
 800a660:	0800bdcc 	.word	0x0800bdcc
 800a664:	0800bdcc 	.word	0x0800bdcc
 800a668:	0800bdcc 	.word	0x0800bdcc
 800a66c:	0800bdd0 	.word	0x0800bdd0

0800a670 <memcpy>:
 800a670:	440a      	add	r2, r1
 800a672:	4291      	cmp	r1, r2
 800a674:	f100 33ff 	add.w	r3, r0, #4294967295
 800a678:	d100      	bne.n	800a67c <memcpy+0xc>
 800a67a:	4770      	bx	lr
 800a67c:	b510      	push	{r4, lr}
 800a67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a682:	4291      	cmp	r1, r2
 800a684:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a688:	d1f9      	bne.n	800a67e <memcpy+0xe>
 800a68a:	bd10      	pop	{r4, pc}

0800a68c <memmove>:
 800a68c:	4288      	cmp	r0, r1
 800a68e:	b510      	push	{r4, lr}
 800a690:	eb01 0402 	add.w	r4, r1, r2
 800a694:	d902      	bls.n	800a69c <memmove+0x10>
 800a696:	4284      	cmp	r4, r0
 800a698:	4623      	mov	r3, r4
 800a69a:	d807      	bhi.n	800a6ac <memmove+0x20>
 800a69c:	1e43      	subs	r3, r0, #1
 800a69e:	42a1      	cmp	r1, r4
 800a6a0:	d008      	beq.n	800a6b4 <memmove+0x28>
 800a6a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6aa:	e7f8      	b.n	800a69e <memmove+0x12>
 800a6ac:	4601      	mov	r1, r0
 800a6ae:	4402      	add	r2, r0
 800a6b0:	428a      	cmp	r2, r1
 800a6b2:	d100      	bne.n	800a6b6 <memmove+0x2a>
 800a6b4:	bd10      	pop	{r4, pc}
 800a6b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6be:	e7f7      	b.n	800a6b0 <memmove+0x24>

0800a6c0 <memset>:
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	4402      	add	r2, r0
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d100      	bne.n	800a6ca <memset+0xa>
 800a6c8:	4770      	bx	lr
 800a6ca:	f803 1b01 	strb.w	r1, [r3], #1
 800a6ce:	e7f9      	b.n	800a6c4 <memset+0x4>

0800a6d0 <siprintf>:
 800a6d0:	b40e      	push	{r1, r2, r3}
 800a6d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6d6:	b500      	push	{lr}
 800a6d8:	b09c      	sub	sp, #112	; 0x70
 800a6da:	ab1d      	add	r3, sp, #116	; 0x74
 800a6dc:	9002      	str	r0, [sp, #8]
 800a6de:	9006      	str	r0, [sp, #24]
 800a6e0:	9107      	str	r1, [sp, #28]
 800a6e2:	9104      	str	r1, [sp, #16]
 800a6e4:	4808      	ldr	r0, [pc, #32]	; (800a708 <siprintf+0x38>)
 800a6e6:	4909      	ldr	r1, [pc, #36]	; (800a70c <siprintf+0x3c>)
 800a6e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ec:	9105      	str	r1, [sp, #20]
 800a6ee:	6800      	ldr	r0, [r0, #0]
 800a6f0:	a902      	add	r1, sp, #8
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	f000 f870 	bl	800a7d8 <_svfiprintf_r>
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	9b02      	ldr	r3, [sp, #8]
 800a6fc:	701a      	strb	r2, [r3, #0]
 800a6fe:	b01c      	add	sp, #112	; 0x70
 800a700:	f85d eb04 	ldr.w	lr, [sp], #4
 800a704:	b003      	add	sp, #12
 800a706:	4770      	bx	lr
 800a708:	20000028 	.word	0x20000028
 800a70c:	ffff0208 	.word	0xffff0208

0800a710 <strcpy>:
 800a710:	4603      	mov	r3, r0
 800a712:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a716:	f803 2b01 	strb.w	r2, [r3], #1
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d1f9      	bne.n	800a712 <strcpy+0x2>
 800a71e:	4770      	bx	lr

0800a720 <__ssputs_r>:
 800a720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a724:	688e      	ldr	r6, [r1, #8]
 800a726:	4682      	mov	sl, r0
 800a728:	429e      	cmp	r6, r3
 800a72a:	460c      	mov	r4, r1
 800a72c:	4690      	mov	r8, r2
 800a72e:	461f      	mov	r7, r3
 800a730:	d838      	bhi.n	800a7a4 <__ssputs_r+0x84>
 800a732:	898a      	ldrh	r2, [r1, #12]
 800a734:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a738:	d032      	beq.n	800a7a0 <__ssputs_r+0x80>
 800a73a:	6825      	ldr	r5, [r4, #0]
 800a73c:	6909      	ldr	r1, [r1, #16]
 800a73e:	3301      	adds	r3, #1
 800a740:	eba5 0901 	sub.w	r9, r5, r1
 800a744:	6965      	ldr	r5, [r4, #20]
 800a746:	444b      	add	r3, r9
 800a748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a74c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a750:	106d      	asrs	r5, r5, #1
 800a752:	429d      	cmp	r5, r3
 800a754:	bf38      	it	cc
 800a756:	461d      	movcc	r5, r3
 800a758:	0553      	lsls	r3, r2, #21
 800a75a:	d531      	bpl.n	800a7c0 <__ssputs_r+0xa0>
 800a75c:	4629      	mov	r1, r5
 800a75e:	f000 fb2b 	bl	800adb8 <_malloc_r>
 800a762:	4606      	mov	r6, r0
 800a764:	b950      	cbnz	r0, 800a77c <__ssputs_r+0x5c>
 800a766:	230c      	movs	r3, #12
 800a768:	f04f 30ff 	mov.w	r0, #4294967295
 800a76c:	f8ca 3000 	str.w	r3, [sl]
 800a770:	89a3      	ldrh	r3, [r4, #12]
 800a772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a776:	81a3      	strh	r3, [r4, #12]
 800a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a77c:	464a      	mov	r2, r9
 800a77e:	6921      	ldr	r1, [r4, #16]
 800a780:	f7ff ff76 	bl	800a670 <memcpy>
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a78a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	6126      	str	r6, [r4, #16]
 800a792:	444e      	add	r6, r9
 800a794:	6026      	str	r6, [r4, #0]
 800a796:	463e      	mov	r6, r7
 800a798:	6165      	str	r5, [r4, #20]
 800a79a:	eba5 0509 	sub.w	r5, r5, r9
 800a79e:	60a5      	str	r5, [r4, #8]
 800a7a0:	42be      	cmp	r6, r7
 800a7a2:	d900      	bls.n	800a7a6 <__ssputs_r+0x86>
 800a7a4:	463e      	mov	r6, r7
 800a7a6:	4632      	mov	r2, r6
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	6820      	ldr	r0, [r4, #0]
 800a7ac:	f7ff ff6e 	bl	800a68c <memmove>
 800a7b0:	68a3      	ldr	r3, [r4, #8]
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	1b9b      	subs	r3, r3, r6
 800a7b6:	4432      	add	r2, r6
 800a7b8:	2000      	movs	r0, #0
 800a7ba:	60a3      	str	r3, [r4, #8]
 800a7bc:	6022      	str	r2, [r4, #0]
 800a7be:	e7db      	b.n	800a778 <__ssputs_r+0x58>
 800a7c0:	462a      	mov	r2, r5
 800a7c2:	f000 fb53 	bl	800ae6c <_realloc_r>
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d1e1      	bne.n	800a790 <__ssputs_r+0x70>
 800a7cc:	4650      	mov	r0, sl
 800a7ce:	6921      	ldr	r1, [r4, #16]
 800a7d0:	f000 faa6 	bl	800ad20 <_free_r>
 800a7d4:	e7c7      	b.n	800a766 <__ssputs_r+0x46>
	...

0800a7d8 <_svfiprintf_r>:
 800a7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7dc:	4698      	mov	r8, r3
 800a7de:	898b      	ldrh	r3, [r1, #12]
 800a7e0:	4607      	mov	r7, r0
 800a7e2:	061b      	lsls	r3, r3, #24
 800a7e4:	460d      	mov	r5, r1
 800a7e6:	4614      	mov	r4, r2
 800a7e8:	b09d      	sub	sp, #116	; 0x74
 800a7ea:	d50e      	bpl.n	800a80a <_svfiprintf_r+0x32>
 800a7ec:	690b      	ldr	r3, [r1, #16]
 800a7ee:	b963      	cbnz	r3, 800a80a <_svfiprintf_r+0x32>
 800a7f0:	2140      	movs	r1, #64	; 0x40
 800a7f2:	f000 fae1 	bl	800adb8 <_malloc_r>
 800a7f6:	6028      	str	r0, [r5, #0]
 800a7f8:	6128      	str	r0, [r5, #16]
 800a7fa:	b920      	cbnz	r0, 800a806 <_svfiprintf_r+0x2e>
 800a7fc:	230c      	movs	r3, #12
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	e0d1      	b.n	800a9aa <_svfiprintf_r+0x1d2>
 800a806:	2340      	movs	r3, #64	; 0x40
 800a808:	616b      	str	r3, [r5, #20]
 800a80a:	2300      	movs	r3, #0
 800a80c:	9309      	str	r3, [sp, #36]	; 0x24
 800a80e:	2320      	movs	r3, #32
 800a810:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a814:	2330      	movs	r3, #48	; 0x30
 800a816:	f04f 0901 	mov.w	r9, #1
 800a81a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a81e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a9c4 <_svfiprintf_r+0x1ec>
 800a822:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a826:	4623      	mov	r3, r4
 800a828:	469a      	mov	sl, r3
 800a82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a82e:	b10a      	cbz	r2, 800a834 <_svfiprintf_r+0x5c>
 800a830:	2a25      	cmp	r2, #37	; 0x25
 800a832:	d1f9      	bne.n	800a828 <_svfiprintf_r+0x50>
 800a834:	ebba 0b04 	subs.w	fp, sl, r4
 800a838:	d00b      	beq.n	800a852 <_svfiprintf_r+0x7a>
 800a83a:	465b      	mov	r3, fp
 800a83c:	4622      	mov	r2, r4
 800a83e:	4629      	mov	r1, r5
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff ff6d 	bl	800a720 <__ssputs_r>
 800a846:	3001      	adds	r0, #1
 800a848:	f000 80aa 	beq.w	800a9a0 <_svfiprintf_r+0x1c8>
 800a84c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a84e:	445a      	add	r2, fp
 800a850:	9209      	str	r2, [sp, #36]	; 0x24
 800a852:	f89a 3000 	ldrb.w	r3, [sl]
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80a2 	beq.w	800a9a0 <_svfiprintf_r+0x1c8>
 800a85c:	2300      	movs	r3, #0
 800a85e:	f04f 32ff 	mov.w	r2, #4294967295
 800a862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a866:	f10a 0a01 	add.w	sl, sl, #1
 800a86a:	9304      	str	r3, [sp, #16]
 800a86c:	9307      	str	r3, [sp, #28]
 800a86e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a872:	931a      	str	r3, [sp, #104]	; 0x68
 800a874:	4654      	mov	r4, sl
 800a876:	2205      	movs	r2, #5
 800a878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87c:	4851      	ldr	r0, [pc, #324]	; (800a9c4 <_svfiprintf_r+0x1ec>)
 800a87e:	f000 fa41 	bl	800ad04 <memchr>
 800a882:	9a04      	ldr	r2, [sp, #16]
 800a884:	b9d8      	cbnz	r0, 800a8be <_svfiprintf_r+0xe6>
 800a886:	06d0      	lsls	r0, r2, #27
 800a888:	bf44      	itt	mi
 800a88a:	2320      	movmi	r3, #32
 800a88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a890:	0711      	lsls	r1, r2, #28
 800a892:	bf44      	itt	mi
 800a894:	232b      	movmi	r3, #43	; 0x2b
 800a896:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a89a:	f89a 3000 	ldrb.w	r3, [sl]
 800a89e:	2b2a      	cmp	r3, #42	; 0x2a
 800a8a0:	d015      	beq.n	800a8ce <_svfiprintf_r+0xf6>
 800a8a2:	4654      	mov	r4, sl
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	f04f 0c0a 	mov.w	ip, #10
 800a8aa:	9a07      	ldr	r2, [sp, #28]
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8b2:	3b30      	subs	r3, #48	; 0x30
 800a8b4:	2b09      	cmp	r3, #9
 800a8b6:	d94e      	bls.n	800a956 <_svfiprintf_r+0x17e>
 800a8b8:	b1b0      	cbz	r0, 800a8e8 <_svfiprintf_r+0x110>
 800a8ba:	9207      	str	r2, [sp, #28]
 800a8bc:	e014      	b.n	800a8e8 <_svfiprintf_r+0x110>
 800a8be:	eba0 0308 	sub.w	r3, r0, r8
 800a8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	46a2      	mov	sl, r4
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	e7d2      	b.n	800a874 <_svfiprintf_r+0x9c>
 800a8ce:	9b03      	ldr	r3, [sp, #12]
 800a8d0:	1d19      	adds	r1, r3, #4
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	9103      	str	r1, [sp, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	bfbb      	ittet	lt
 800a8da:	425b      	neglt	r3, r3
 800a8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a8e0:	9307      	strge	r3, [sp, #28]
 800a8e2:	9307      	strlt	r3, [sp, #28]
 800a8e4:	bfb8      	it	lt
 800a8e6:	9204      	strlt	r2, [sp, #16]
 800a8e8:	7823      	ldrb	r3, [r4, #0]
 800a8ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ec:	d10c      	bne.n	800a908 <_svfiprintf_r+0x130>
 800a8ee:	7863      	ldrb	r3, [r4, #1]
 800a8f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f2:	d135      	bne.n	800a960 <_svfiprintf_r+0x188>
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	3402      	adds	r4, #2
 800a8f8:	1d1a      	adds	r2, r3, #4
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	9203      	str	r2, [sp, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfb8      	it	lt
 800a902:	f04f 33ff 	movlt.w	r3, #4294967295
 800a906:	9305      	str	r3, [sp, #20]
 800a908:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a9d4 <_svfiprintf_r+0x1fc>
 800a90c:	2203      	movs	r2, #3
 800a90e:	4650      	mov	r0, sl
 800a910:	7821      	ldrb	r1, [r4, #0]
 800a912:	f000 f9f7 	bl	800ad04 <memchr>
 800a916:	b140      	cbz	r0, 800a92a <_svfiprintf_r+0x152>
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	eba0 000a 	sub.w	r0, r0, sl
 800a91e:	fa03 f000 	lsl.w	r0, r3, r0
 800a922:	9b04      	ldr	r3, [sp, #16]
 800a924:	3401      	adds	r4, #1
 800a926:	4303      	orrs	r3, r0
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92e:	2206      	movs	r2, #6
 800a930:	4825      	ldr	r0, [pc, #148]	; (800a9c8 <_svfiprintf_r+0x1f0>)
 800a932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a936:	f000 f9e5 	bl	800ad04 <memchr>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d038      	beq.n	800a9b0 <_svfiprintf_r+0x1d8>
 800a93e:	4b23      	ldr	r3, [pc, #140]	; (800a9cc <_svfiprintf_r+0x1f4>)
 800a940:	bb1b      	cbnz	r3, 800a98a <_svfiprintf_r+0x1b2>
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	3307      	adds	r3, #7
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	3308      	adds	r3, #8
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a950:	4433      	add	r3, r6
 800a952:	9309      	str	r3, [sp, #36]	; 0x24
 800a954:	e767      	b.n	800a826 <_svfiprintf_r+0x4e>
 800a956:	460c      	mov	r4, r1
 800a958:	2001      	movs	r0, #1
 800a95a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a95e:	e7a5      	b.n	800a8ac <_svfiprintf_r+0xd4>
 800a960:	2300      	movs	r3, #0
 800a962:	f04f 0c0a 	mov.w	ip, #10
 800a966:	4619      	mov	r1, r3
 800a968:	3401      	adds	r4, #1
 800a96a:	9305      	str	r3, [sp, #20]
 800a96c:	4620      	mov	r0, r4
 800a96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a972:	3a30      	subs	r2, #48	; 0x30
 800a974:	2a09      	cmp	r2, #9
 800a976:	d903      	bls.n	800a980 <_svfiprintf_r+0x1a8>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0c5      	beq.n	800a908 <_svfiprintf_r+0x130>
 800a97c:	9105      	str	r1, [sp, #20]
 800a97e:	e7c3      	b.n	800a908 <_svfiprintf_r+0x130>
 800a980:	4604      	mov	r4, r0
 800a982:	2301      	movs	r3, #1
 800a984:	fb0c 2101 	mla	r1, ip, r1, r2
 800a988:	e7f0      	b.n	800a96c <_svfiprintf_r+0x194>
 800a98a:	ab03      	add	r3, sp, #12
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	462a      	mov	r2, r5
 800a990:	4638      	mov	r0, r7
 800a992:	4b0f      	ldr	r3, [pc, #60]	; (800a9d0 <_svfiprintf_r+0x1f8>)
 800a994:	a904      	add	r1, sp, #16
 800a996:	f3af 8000 	nop.w
 800a99a:	1c42      	adds	r2, r0, #1
 800a99c:	4606      	mov	r6, r0
 800a99e:	d1d6      	bne.n	800a94e <_svfiprintf_r+0x176>
 800a9a0:	89ab      	ldrh	r3, [r5, #12]
 800a9a2:	065b      	lsls	r3, r3, #25
 800a9a4:	f53f af2c 	bmi.w	800a800 <_svfiprintf_r+0x28>
 800a9a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9aa:	b01d      	add	sp, #116	; 0x74
 800a9ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b0:	ab03      	add	r3, sp, #12
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	462a      	mov	r2, r5
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <_svfiprintf_r+0x1f8>)
 800a9ba:	a904      	add	r1, sp, #16
 800a9bc:	f000 f87c 	bl	800aab8 <_printf_i>
 800a9c0:	e7eb      	b.n	800a99a <_svfiprintf_r+0x1c2>
 800a9c2:	bf00      	nop
 800a9c4:	0800bd99 	.word	0x0800bd99
 800a9c8:	0800bda3 	.word	0x0800bda3
 800a9cc:	00000000 	.word	0x00000000
 800a9d0:	0800a721 	.word	0x0800a721
 800a9d4:	0800bd9f 	.word	0x0800bd9f

0800a9d8 <_printf_common>:
 800a9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9dc:	4616      	mov	r6, r2
 800a9de:	4699      	mov	r9, r3
 800a9e0:	688a      	ldr	r2, [r1, #8]
 800a9e2:	690b      	ldr	r3, [r1, #16]
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	bfb8      	it	lt
 800a9ea:	4613      	movlt	r3, r2
 800a9ec:	6033      	str	r3, [r6, #0]
 800a9ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9f8:	b10a      	cbz	r2, 800a9fe <_printf_common+0x26>
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	6823      	ldr	r3, [r4, #0]
 800aa00:	0699      	lsls	r1, r3, #26
 800aa02:	bf42      	ittt	mi
 800aa04:	6833      	ldrmi	r3, [r6, #0]
 800aa06:	3302      	addmi	r3, #2
 800aa08:	6033      	strmi	r3, [r6, #0]
 800aa0a:	6825      	ldr	r5, [r4, #0]
 800aa0c:	f015 0506 	ands.w	r5, r5, #6
 800aa10:	d106      	bne.n	800aa20 <_printf_common+0x48>
 800aa12:	f104 0a19 	add.w	sl, r4, #25
 800aa16:	68e3      	ldr	r3, [r4, #12]
 800aa18:	6832      	ldr	r2, [r6, #0]
 800aa1a:	1a9b      	subs	r3, r3, r2
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dc28      	bgt.n	800aa72 <_printf_common+0x9a>
 800aa20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa24:	1e13      	subs	r3, r2, #0
 800aa26:	6822      	ldr	r2, [r4, #0]
 800aa28:	bf18      	it	ne
 800aa2a:	2301      	movne	r3, #1
 800aa2c:	0692      	lsls	r2, r2, #26
 800aa2e:	d42d      	bmi.n	800aa8c <_printf_common+0xb4>
 800aa30:	4649      	mov	r1, r9
 800aa32:	4638      	mov	r0, r7
 800aa34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa38:	47c0      	blx	r8
 800aa3a:	3001      	adds	r0, #1
 800aa3c:	d020      	beq.n	800aa80 <_printf_common+0xa8>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	68e5      	ldr	r5, [r4, #12]
 800aa42:	f003 0306 	and.w	r3, r3, #6
 800aa46:	2b04      	cmp	r3, #4
 800aa48:	bf18      	it	ne
 800aa4a:	2500      	movne	r5, #0
 800aa4c:	6832      	ldr	r2, [r6, #0]
 800aa4e:	f04f 0600 	mov.w	r6, #0
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	bf08      	it	eq
 800aa56:	1aad      	subeq	r5, r5, r2
 800aa58:	6922      	ldr	r2, [r4, #16]
 800aa5a:	bf08      	it	eq
 800aa5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa60:	4293      	cmp	r3, r2
 800aa62:	bfc4      	itt	gt
 800aa64:	1a9b      	subgt	r3, r3, r2
 800aa66:	18ed      	addgt	r5, r5, r3
 800aa68:	341a      	adds	r4, #26
 800aa6a:	42b5      	cmp	r5, r6
 800aa6c:	d11a      	bne.n	800aaa4 <_printf_common+0xcc>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	e008      	b.n	800aa84 <_printf_common+0xac>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4652      	mov	r2, sl
 800aa76:	4649      	mov	r1, r9
 800aa78:	4638      	mov	r0, r7
 800aa7a:	47c0      	blx	r8
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d103      	bne.n	800aa88 <_printf_common+0xb0>
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295
 800aa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa88:	3501      	adds	r5, #1
 800aa8a:	e7c4      	b.n	800aa16 <_printf_common+0x3e>
 800aa8c:	2030      	movs	r0, #48	; 0x30
 800aa8e:	18e1      	adds	r1, r4, r3
 800aa90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa9a:	4422      	add	r2, r4
 800aa9c:	3302      	adds	r3, #2
 800aa9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaa2:	e7c5      	b.n	800aa30 <_printf_common+0x58>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	4638      	mov	r0, r7
 800aaac:	47c0      	blx	r8
 800aaae:	3001      	adds	r0, #1
 800aab0:	d0e6      	beq.n	800aa80 <_printf_common+0xa8>
 800aab2:	3601      	adds	r6, #1
 800aab4:	e7d9      	b.n	800aa6a <_printf_common+0x92>
	...

0800aab8 <_printf_i>:
 800aab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aabc:	460c      	mov	r4, r1
 800aabe:	7e27      	ldrb	r7, [r4, #24]
 800aac0:	4691      	mov	r9, r2
 800aac2:	2f78      	cmp	r7, #120	; 0x78
 800aac4:	4680      	mov	r8, r0
 800aac6:	469a      	mov	sl, r3
 800aac8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aaca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aace:	d807      	bhi.n	800aae0 <_printf_i+0x28>
 800aad0:	2f62      	cmp	r7, #98	; 0x62
 800aad2:	d80a      	bhi.n	800aaea <_printf_i+0x32>
 800aad4:	2f00      	cmp	r7, #0
 800aad6:	f000 80d9 	beq.w	800ac8c <_printf_i+0x1d4>
 800aada:	2f58      	cmp	r7, #88	; 0x58
 800aadc:	f000 80a4 	beq.w	800ac28 <_printf_i+0x170>
 800aae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aae8:	e03a      	b.n	800ab60 <_printf_i+0xa8>
 800aaea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaee:	2b15      	cmp	r3, #21
 800aaf0:	d8f6      	bhi.n	800aae0 <_printf_i+0x28>
 800aaf2:	a001      	add	r0, pc, #4	; (adr r0, 800aaf8 <_printf_i+0x40>)
 800aaf4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aaf8:	0800ab51 	.word	0x0800ab51
 800aafc:	0800ab65 	.word	0x0800ab65
 800ab00:	0800aae1 	.word	0x0800aae1
 800ab04:	0800aae1 	.word	0x0800aae1
 800ab08:	0800aae1 	.word	0x0800aae1
 800ab0c:	0800aae1 	.word	0x0800aae1
 800ab10:	0800ab65 	.word	0x0800ab65
 800ab14:	0800aae1 	.word	0x0800aae1
 800ab18:	0800aae1 	.word	0x0800aae1
 800ab1c:	0800aae1 	.word	0x0800aae1
 800ab20:	0800aae1 	.word	0x0800aae1
 800ab24:	0800ac73 	.word	0x0800ac73
 800ab28:	0800ab95 	.word	0x0800ab95
 800ab2c:	0800ac55 	.word	0x0800ac55
 800ab30:	0800aae1 	.word	0x0800aae1
 800ab34:	0800aae1 	.word	0x0800aae1
 800ab38:	0800ac95 	.word	0x0800ac95
 800ab3c:	0800aae1 	.word	0x0800aae1
 800ab40:	0800ab95 	.word	0x0800ab95
 800ab44:	0800aae1 	.word	0x0800aae1
 800ab48:	0800aae1 	.word	0x0800aae1
 800ab4c:	0800ac5d 	.word	0x0800ac5d
 800ab50:	680b      	ldr	r3, [r1, #0]
 800ab52:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab56:	1d1a      	adds	r2, r3, #4
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	600a      	str	r2, [r1, #0]
 800ab5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab60:	2301      	movs	r3, #1
 800ab62:	e0a4      	b.n	800acae <_printf_i+0x1f6>
 800ab64:	6825      	ldr	r5, [r4, #0]
 800ab66:	6808      	ldr	r0, [r1, #0]
 800ab68:	062e      	lsls	r6, r5, #24
 800ab6a:	f100 0304 	add.w	r3, r0, #4
 800ab6e:	d50a      	bpl.n	800ab86 <_printf_i+0xce>
 800ab70:	6805      	ldr	r5, [r0, #0]
 800ab72:	600b      	str	r3, [r1, #0]
 800ab74:	2d00      	cmp	r5, #0
 800ab76:	da03      	bge.n	800ab80 <_printf_i+0xc8>
 800ab78:	232d      	movs	r3, #45	; 0x2d
 800ab7a:	426d      	negs	r5, r5
 800ab7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab80:	230a      	movs	r3, #10
 800ab82:	485e      	ldr	r0, [pc, #376]	; (800acfc <_printf_i+0x244>)
 800ab84:	e019      	b.n	800abba <_printf_i+0x102>
 800ab86:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab8a:	6805      	ldr	r5, [r0, #0]
 800ab8c:	600b      	str	r3, [r1, #0]
 800ab8e:	bf18      	it	ne
 800ab90:	b22d      	sxthne	r5, r5
 800ab92:	e7ef      	b.n	800ab74 <_printf_i+0xbc>
 800ab94:	680b      	ldr	r3, [r1, #0]
 800ab96:	6825      	ldr	r5, [r4, #0]
 800ab98:	1d18      	adds	r0, r3, #4
 800ab9a:	6008      	str	r0, [r1, #0]
 800ab9c:	0628      	lsls	r0, r5, #24
 800ab9e:	d501      	bpl.n	800aba4 <_printf_i+0xec>
 800aba0:	681d      	ldr	r5, [r3, #0]
 800aba2:	e002      	b.n	800abaa <_printf_i+0xf2>
 800aba4:	0669      	lsls	r1, r5, #25
 800aba6:	d5fb      	bpl.n	800aba0 <_printf_i+0xe8>
 800aba8:	881d      	ldrh	r5, [r3, #0]
 800abaa:	2f6f      	cmp	r7, #111	; 0x6f
 800abac:	bf0c      	ite	eq
 800abae:	2308      	moveq	r3, #8
 800abb0:	230a      	movne	r3, #10
 800abb2:	4852      	ldr	r0, [pc, #328]	; (800acfc <_printf_i+0x244>)
 800abb4:	2100      	movs	r1, #0
 800abb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abba:	6866      	ldr	r6, [r4, #4]
 800abbc:	2e00      	cmp	r6, #0
 800abbe:	bfa8      	it	ge
 800abc0:	6821      	ldrge	r1, [r4, #0]
 800abc2:	60a6      	str	r6, [r4, #8]
 800abc4:	bfa4      	itt	ge
 800abc6:	f021 0104 	bicge.w	r1, r1, #4
 800abca:	6021      	strge	r1, [r4, #0]
 800abcc:	b90d      	cbnz	r5, 800abd2 <_printf_i+0x11a>
 800abce:	2e00      	cmp	r6, #0
 800abd0:	d04d      	beq.n	800ac6e <_printf_i+0x1b6>
 800abd2:	4616      	mov	r6, r2
 800abd4:	fbb5 f1f3 	udiv	r1, r5, r3
 800abd8:	fb03 5711 	mls	r7, r3, r1, r5
 800abdc:	5dc7      	ldrb	r7, [r0, r7]
 800abde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abe2:	462f      	mov	r7, r5
 800abe4:	42bb      	cmp	r3, r7
 800abe6:	460d      	mov	r5, r1
 800abe8:	d9f4      	bls.n	800abd4 <_printf_i+0x11c>
 800abea:	2b08      	cmp	r3, #8
 800abec:	d10b      	bne.n	800ac06 <_printf_i+0x14e>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	07df      	lsls	r7, r3, #31
 800abf2:	d508      	bpl.n	800ac06 <_printf_i+0x14e>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	6861      	ldr	r1, [r4, #4]
 800abf8:	4299      	cmp	r1, r3
 800abfa:	bfde      	ittt	le
 800abfc:	2330      	movle	r3, #48	; 0x30
 800abfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac02:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac06:	1b92      	subs	r2, r2, r6
 800ac08:	6122      	str	r2, [r4, #16]
 800ac0a:	464b      	mov	r3, r9
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	4640      	mov	r0, r8
 800ac10:	f8cd a000 	str.w	sl, [sp]
 800ac14:	aa03      	add	r2, sp, #12
 800ac16:	f7ff fedf 	bl	800a9d8 <_printf_common>
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d14c      	bne.n	800acb8 <_printf_i+0x200>
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac22:	b004      	add	sp, #16
 800ac24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac28:	4834      	ldr	r0, [pc, #208]	; (800acfc <_printf_i+0x244>)
 800ac2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac2e:	680e      	ldr	r6, [r1, #0]
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac36:	061f      	lsls	r7, r3, #24
 800ac38:	600e      	str	r6, [r1, #0]
 800ac3a:	d514      	bpl.n	800ac66 <_printf_i+0x1ae>
 800ac3c:	07d9      	lsls	r1, r3, #31
 800ac3e:	bf44      	itt	mi
 800ac40:	f043 0320 	orrmi.w	r3, r3, #32
 800ac44:	6023      	strmi	r3, [r4, #0]
 800ac46:	b91d      	cbnz	r5, 800ac50 <_printf_i+0x198>
 800ac48:	6823      	ldr	r3, [r4, #0]
 800ac4a:	f023 0320 	bic.w	r3, r3, #32
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	2310      	movs	r3, #16
 800ac52:	e7af      	b.n	800abb4 <_printf_i+0xfc>
 800ac54:	6823      	ldr	r3, [r4, #0]
 800ac56:	f043 0320 	orr.w	r3, r3, #32
 800ac5a:	6023      	str	r3, [r4, #0]
 800ac5c:	2378      	movs	r3, #120	; 0x78
 800ac5e:	4828      	ldr	r0, [pc, #160]	; (800ad00 <_printf_i+0x248>)
 800ac60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac64:	e7e3      	b.n	800ac2e <_printf_i+0x176>
 800ac66:	065e      	lsls	r6, r3, #25
 800ac68:	bf48      	it	mi
 800ac6a:	b2ad      	uxthmi	r5, r5
 800ac6c:	e7e6      	b.n	800ac3c <_printf_i+0x184>
 800ac6e:	4616      	mov	r6, r2
 800ac70:	e7bb      	b.n	800abea <_printf_i+0x132>
 800ac72:	680b      	ldr	r3, [r1, #0]
 800ac74:	6826      	ldr	r6, [r4, #0]
 800ac76:	1d1d      	adds	r5, r3, #4
 800ac78:	6960      	ldr	r0, [r4, #20]
 800ac7a:	600d      	str	r5, [r1, #0]
 800ac7c:	0635      	lsls	r5, r6, #24
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	d501      	bpl.n	800ac86 <_printf_i+0x1ce>
 800ac82:	6018      	str	r0, [r3, #0]
 800ac84:	e002      	b.n	800ac8c <_printf_i+0x1d4>
 800ac86:	0671      	lsls	r1, r6, #25
 800ac88:	d5fb      	bpl.n	800ac82 <_printf_i+0x1ca>
 800ac8a:	8018      	strh	r0, [r3, #0]
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	4616      	mov	r6, r2
 800ac90:	6123      	str	r3, [r4, #16]
 800ac92:	e7ba      	b.n	800ac0a <_printf_i+0x152>
 800ac94:	680b      	ldr	r3, [r1, #0]
 800ac96:	1d1a      	adds	r2, r3, #4
 800ac98:	600a      	str	r2, [r1, #0]
 800ac9a:	681e      	ldr	r6, [r3, #0]
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	4630      	mov	r0, r6
 800aca0:	6862      	ldr	r2, [r4, #4]
 800aca2:	f000 f82f 	bl	800ad04 <memchr>
 800aca6:	b108      	cbz	r0, 800acac <_printf_i+0x1f4>
 800aca8:	1b80      	subs	r0, r0, r6
 800acaa:	6060      	str	r0, [r4, #4]
 800acac:	6863      	ldr	r3, [r4, #4]
 800acae:	6123      	str	r3, [r4, #16]
 800acb0:	2300      	movs	r3, #0
 800acb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb6:	e7a8      	b.n	800ac0a <_printf_i+0x152>
 800acb8:	4632      	mov	r2, r6
 800acba:	4649      	mov	r1, r9
 800acbc:	4640      	mov	r0, r8
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	47d0      	blx	sl
 800acc2:	3001      	adds	r0, #1
 800acc4:	d0ab      	beq.n	800ac1e <_printf_i+0x166>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	079b      	lsls	r3, r3, #30
 800acca:	d413      	bmi.n	800acf4 <_printf_i+0x23c>
 800accc:	68e0      	ldr	r0, [r4, #12]
 800acce:	9b03      	ldr	r3, [sp, #12]
 800acd0:	4298      	cmp	r0, r3
 800acd2:	bfb8      	it	lt
 800acd4:	4618      	movlt	r0, r3
 800acd6:	e7a4      	b.n	800ac22 <_printf_i+0x16a>
 800acd8:	2301      	movs	r3, #1
 800acda:	4632      	mov	r2, r6
 800acdc:	4649      	mov	r1, r9
 800acde:	4640      	mov	r0, r8
 800ace0:	47d0      	blx	sl
 800ace2:	3001      	adds	r0, #1
 800ace4:	d09b      	beq.n	800ac1e <_printf_i+0x166>
 800ace6:	3501      	adds	r5, #1
 800ace8:	68e3      	ldr	r3, [r4, #12]
 800acea:	9903      	ldr	r1, [sp, #12]
 800acec:	1a5b      	subs	r3, r3, r1
 800acee:	42ab      	cmp	r3, r5
 800acf0:	dcf2      	bgt.n	800acd8 <_printf_i+0x220>
 800acf2:	e7eb      	b.n	800accc <_printf_i+0x214>
 800acf4:	2500      	movs	r5, #0
 800acf6:	f104 0619 	add.w	r6, r4, #25
 800acfa:	e7f5      	b.n	800ace8 <_printf_i+0x230>
 800acfc:	0800bdaa 	.word	0x0800bdaa
 800ad00:	0800bdbb 	.word	0x0800bdbb

0800ad04 <memchr>:
 800ad04:	4603      	mov	r3, r0
 800ad06:	b510      	push	{r4, lr}
 800ad08:	b2c9      	uxtb	r1, r1
 800ad0a:	4402      	add	r2, r0
 800ad0c:	4293      	cmp	r3, r2
 800ad0e:	4618      	mov	r0, r3
 800ad10:	d101      	bne.n	800ad16 <memchr+0x12>
 800ad12:	2000      	movs	r0, #0
 800ad14:	e003      	b.n	800ad1e <memchr+0x1a>
 800ad16:	7804      	ldrb	r4, [r0, #0]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	428c      	cmp	r4, r1
 800ad1c:	d1f6      	bne.n	800ad0c <memchr+0x8>
 800ad1e:	bd10      	pop	{r4, pc}

0800ad20 <_free_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4605      	mov	r5, r0
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d043      	beq.n	800adb0 <_free_r+0x90>
 800ad28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad2c:	1f0c      	subs	r4, r1, #4
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	bfb8      	it	lt
 800ad32:	18e4      	addlt	r4, r4, r3
 800ad34:	f000 f8d0 	bl	800aed8 <__malloc_lock>
 800ad38:	4a1e      	ldr	r2, [pc, #120]	; (800adb4 <_free_r+0x94>)
 800ad3a:	6813      	ldr	r3, [r2, #0]
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	b933      	cbnz	r3, 800ad4e <_free_r+0x2e>
 800ad40:	6063      	str	r3, [r4, #4]
 800ad42:	6014      	str	r4, [r2, #0]
 800ad44:	4628      	mov	r0, r5
 800ad46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad4a:	f000 b8cb 	b.w	800aee4 <__malloc_unlock>
 800ad4e:	42a3      	cmp	r3, r4
 800ad50:	d90a      	bls.n	800ad68 <_free_r+0x48>
 800ad52:	6821      	ldr	r1, [r4, #0]
 800ad54:	1862      	adds	r2, r4, r1
 800ad56:	4293      	cmp	r3, r2
 800ad58:	bf01      	itttt	eq
 800ad5a:	681a      	ldreq	r2, [r3, #0]
 800ad5c:	685b      	ldreq	r3, [r3, #4]
 800ad5e:	1852      	addeq	r2, r2, r1
 800ad60:	6022      	streq	r2, [r4, #0]
 800ad62:	6063      	str	r3, [r4, #4]
 800ad64:	6004      	str	r4, [r0, #0]
 800ad66:	e7ed      	b.n	800ad44 <_free_r+0x24>
 800ad68:	461a      	mov	r2, r3
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	b10b      	cbz	r3, 800ad72 <_free_r+0x52>
 800ad6e:	42a3      	cmp	r3, r4
 800ad70:	d9fa      	bls.n	800ad68 <_free_r+0x48>
 800ad72:	6811      	ldr	r1, [r2, #0]
 800ad74:	1850      	adds	r0, r2, r1
 800ad76:	42a0      	cmp	r0, r4
 800ad78:	d10b      	bne.n	800ad92 <_free_r+0x72>
 800ad7a:	6820      	ldr	r0, [r4, #0]
 800ad7c:	4401      	add	r1, r0
 800ad7e:	1850      	adds	r0, r2, r1
 800ad80:	4283      	cmp	r3, r0
 800ad82:	6011      	str	r1, [r2, #0]
 800ad84:	d1de      	bne.n	800ad44 <_free_r+0x24>
 800ad86:	6818      	ldr	r0, [r3, #0]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	4401      	add	r1, r0
 800ad8c:	6011      	str	r1, [r2, #0]
 800ad8e:	6053      	str	r3, [r2, #4]
 800ad90:	e7d8      	b.n	800ad44 <_free_r+0x24>
 800ad92:	d902      	bls.n	800ad9a <_free_r+0x7a>
 800ad94:	230c      	movs	r3, #12
 800ad96:	602b      	str	r3, [r5, #0]
 800ad98:	e7d4      	b.n	800ad44 <_free_r+0x24>
 800ad9a:	6820      	ldr	r0, [r4, #0]
 800ad9c:	1821      	adds	r1, r4, r0
 800ad9e:	428b      	cmp	r3, r1
 800ada0:	bf01      	itttt	eq
 800ada2:	6819      	ldreq	r1, [r3, #0]
 800ada4:	685b      	ldreq	r3, [r3, #4]
 800ada6:	1809      	addeq	r1, r1, r0
 800ada8:	6021      	streq	r1, [r4, #0]
 800adaa:	6063      	str	r3, [r4, #4]
 800adac:	6054      	str	r4, [r2, #4]
 800adae:	e7c9      	b.n	800ad44 <_free_r+0x24>
 800adb0:	bd38      	pop	{r3, r4, r5, pc}
 800adb2:	bf00      	nop
 800adb4:	20000304 	.word	0x20000304

0800adb8 <_malloc_r>:
 800adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adba:	1ccd      	adds	r5, r1, #3
 800adbc:	f025 0503 	bic.w	r5, r5, #3
 800adc0:	3508      	adds	r5, #8
 800adc2:	2d0c      	cmp	r5, #12
 800adc4:	bf38      	it	cc
 800adc6:	250c      	movcc	r5, #12
 800adc8:	2d00      	cmp	r5, #0
 800adca:	4606      	mov	r6, r0
 800adcc:	db01      	blt.n	800add2 <_malloc_r+0x1a>
 800adce:	42a9      	cmp	r1, r5
 800add0:	d903      	bls.n	800adda <_malloc_r+0x22>
 800add2:	230c      	movs	r3, #12
 800add4:	6033      	str	r3, [r6, #0]
 800add6:	2000      	movs	r0, #0
 800add8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adda:	f000 f87d 	bl	800aed8 <__malloc_lock>
 800adde:	4921      	ldr	r1, [pc, #132]	; (800ae64 <_malloc_r+0xac>)
 800ade0:	680a      	ldr	r2, [r1, #0]
 800ade2:	4614      	mov	r4, r2
 800ade4:	b99c      	cbnz	r4, 800ae0e <_malloc_r+0x56>
 800ade6:	4f20      	ldr	r7, [pc, #128]	; (800ae68 <_malloc_r+0xb0>)
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	b923      	cbnz	r3, 800adf6 <_malloc_r+0x3e>
 800adec:	4621      	mov	r1, r4
 800adee:	4630      	mov	r0, r6
 800adf0:	f000 f862 	bl	800aeb8 <_sbrk_r>
 800adf4:	6038      	str	r0, [r7, #0]
 800adf6:	4629      	mov	r1, r5
 800adf8:	4630      	mov	r0, r6
 800adfa:	f000 f85d 	bl	800aeb8 <_sbrk_r>
 800adfe:	1c43      	adds	r3, r0, #1
 800ae00:	d123      	bne.n	800ae4a <_malloc_r+0x92>
 800ae02:	230c      	movs	r3, #12
 800ae04:	4630      	mov	r0, r6
 800ae06:	6033      	str	r3, [r6, #0]
 800ae08:	f000 f86c 	bl	800aee4 <__malloc_unlock>
 800ae0c:	e7e3      	b.n	800add6 <_malloc_r+0x1e>
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	1b5b      	subs	r3, r3, r5
 800ae12:	d417      	bmi.n	800ae44 <_malloc_r+0x8c>
 800ae14:	2b0b      	cmp	r3, #11
 800ae16:	d903      	bls.n	800ae20 <_malloc_r+0x68>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	441c      	add	r4, r3
 800ae1c:	6025      	str	r5, [r4, #0]
 800ae1e:	e004      	b.n	800ae2a <_malloc_r+0x72>
 800ae20:	6863      	ldr	r3, [r4, #4]
 800ae22:	42a2      	cmp	r2, r4
 800ae24:	bf0c      	ite	eq
 800ae26:	600b      	streq	r3, [r1, #0]
 800ae28:	6053      	strne	r3, [r2, #4]
 800ae2a:	4630      	mov	r0, r6
 800ae2c:	f000 f85a 	bl	800aee4 <__malloc_unlock>
 800ae30:	f104 000b 	add.w	r0, r4, #11
 800ae34:	1d23      	adds	r3, r4, #4
 800ae36:	f020 0007 	bic.w	r0, r0, #7
 800ae3a:	1ac2      	subs	r2, r0, r3
 800ae3c:	d0cc      	beq.n	800add8 <_malloc_r+0x20>
 800ae3e:	1a1b      	subs	r3, r3, r0
 800ae40:	50a3      	str	r3, [r4, r2]
 800ae42:	e7c9      	b.n	800add8 <_malloc_r+0x20>
 800ae44:	4622      	mov	r2, r4
 800ae46:	6864      	ldr	r4, [r4, #4]
 800ae48:	e7cc      	b.n	800ade4 <_malloc_r+0x2c>
 800ae4a:	1cc4      	adds	r4, r0, #3
 800ae4c:	f024 0403 	bic.w	r4, r4, #3
 800ae50:	42a0      	cmp	r0, r4
 800ae52:	d0e3      	beq.n	800ae1c <_malloc_r+0x64>
 800ae54:	1a21      	subs	r1, r4, r0
 800ae56:	4630      	mov	r0, r6
 800ae58:	f000 f82e 	bl	800aeb8 <_sbrk_r>
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d1dd      	bne.n	800ae1c <_malloc_r+0x64>
 800ae60:	e7cf      	b.n	800ae02 <_malloc_r+0x4a>
 800ae62:	bf00      	nop
 800ae64:	20000304 	.word	0x20000304
 800ae68:	20000308 	.word	0x20000308

0800ae6c <_realloc_r>:
 800ae6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6e:	4607      	mov	r7, r0
 800ae70:	4614      	mov	r4, r2
 800ae72:	460e      	mov	r6, r1
 800ae74:	b921      	cbnz	r1, 800ae80 <_realloc_r+0x14>
 800ae76:	4611      	mov	r1, r2
 800ae78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ae7c:	f7ff bf9c 	b.w	800adb8 <_malloc_r>
 800ae80:	b922      	cbnz	r2, 800ae8c <_realloc_r+0x20>
 800ae82:	f7ff ff4d 	bl	800ad20 <_free_r>
 800ae86:	4625      	mov	r5, r4
 800ae88:	4628      	mov	r0, r5
 800ae8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae8c:	f000 f830 	bl	800aef0 <_malloc_usable_size_r>
 800ae90:	42a0      	cmp	r0, r4
 800ae92:	d20f      	bcs.n	800aeb4 <_realloc_r+0x48>
 800ae94:	4621      	mov	r1, r4
 800ae96:	4638      	mov	r0, r7
 800ae98:	f7ff ff8e 	bl	800adb8 <_malloc_r>
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	d0f2      	beq.n	800ae88 <_realloc_r+0x1c>
 800aea2:	4631      	mov	r1, r6
 800aea4:	4622      	mov	r2, r4
 800aea6:	f7ff fbe3 	bl	800a670 <memcpy>
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4638      	mov	r0, r7
 800aeae:	f7ff ff37 	bl	800ad20 <_free_r>
 800aeb2:	e7e9      	b.n	800ae88 <_realloc_r+0x1c>
 800aeb4:	4635      	mov	r5, r6
 800aeb6:	e7e7      	b.n	800ae88 <_realloc_r+0x1c>

0800aeb8 <_sbrk_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	2300      	movs	r3, #0
 800aebc:	4d05      	ldr	r5, [pc, #20]	; (800aed4 <_sbrk_r+0x1c>)
 800aebe:	4604      	mov	r4, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	602b      	str	r3, [r5, #0]
 800aec4:	f7fb fbda 	bl	800667c <_sbrk>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_sbrk_r+0x1a>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_sbrk_r+0x1a>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20001998 	.word	0x20001998

0800aed8 <__malloc_lock>:
 800aed8:	4801      	ldr	r0, [pc, #4]	; (800aee0 <__malloc_lock+0x8>)
 800aeda:	f000 b811 	b.w	800af00 <__retarget_lock_acquire_recursive>
 800aede:	bf00      	nop
 800aee0:	200019a0 	.word	0x200019a0

0800aee4 <__malloc_unlock>:
 800aee4:	4801      	ldr	r0, [pc, #4]	; (800aeec <__malloc_unlock+0x8>)
 800aee6:	f000 b80c 	b.w	800af02 <__retarget_lock_release_recursive>
 800aeea:	bf00      	nop
 800aeec:	200019a0 	.word	0x200019a0

0800aef0 <_malloc_usable_size_r>:
 800aef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aef4:	1f18      	subs	r0, r3, #4
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	bfbc      	itt	lt
 800aefa:	580b      	ldrlt	r3, [r1, r0]
 800aefc:	18c0      	addlt	r0, r0, r3
 800aefe:	4770      	bx	lr

0800af00 <__retarget_lock_acquire_recursive>:
 800af00:	4770      	bx	lr

0800af02 <__retarget_lock_release_recursive>:
 800af02:	4770      	bx	lr

0800af04 <_init>:
 800af04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af06:	bf00      	nop
 800af08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af0a:	bc08      	pop	{r3}
 800af0c:	469e      	mov	lr, r3
 800af0e:	4770      	bx	lr

0800af10 <_fini>:
 800af10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af12:	bf00      	nop
 800af14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af16:	bc08      	pop	{r3}
 800af18:	469e      	mov	lr, r3
 800af1a:	4770      	bx	lr
