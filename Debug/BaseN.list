
BaseN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000092cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012f8  080093d8  080093d8  000193d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6d0  0800a6d0  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a6d0  0800a6d0  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a6d0  0800a6d0  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a6d0  0800a6d0  0001a6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a6d4  0800a6d4  0001a6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800a6d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020a4  200000b8  0800a790  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000215c  0800a790  0002215c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029beb  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005252  00000000  00000000  00049ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0004ef20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001cc31  00000000  00000000  000503e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000250e8  00000000  00000000  0006d011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000987f3  00000000  00000000  000920f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0012a8ec  2**0
                  CONTENTS, READONLY
 19 .debug_loc    00012ad8  00000000  00000000  0012a93f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00001e20  00000000  00000000  0013d418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004ca0  00000000  00000000  0013f238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080093c0 	.word	0x080093c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	080093c0 	.word	0x080093c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <__aeabi_f2uiz>:
 8000750:	0042      	lsls	r2, r0, #1
 8000752:	d20e      	bcs.n	8000772 <__aeabi_f2uiz+0x22>
 8000754:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000758:	d30b      	bcc.n	8000772 <__aeabi_f2uiz+0x22>
 800075a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800075e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000762:	d409      	bmi.n	8000778 <__aeabi_f2uiz+0x28>
 8000764:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076c:	fa23 f002 	lsr.w	r0, r3, r2
 8000770:	4770      	bx	lr
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	4770      	bx	lr
 8000778:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800077c:	d101      	bne.n	8000782 <__aeabi_f2uiz+0x32>
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	d102      	bne.n	8000788 <__aeabi_f2uiz+0x38>
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <SendCommand>:
extern NetHandler_t netHandler;

uint32_t lastStatusCheck = 0;

void SendCommand (char com, char *data)
{
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	4604      	mov	r4, r0
 8000794:	460d      	mov	r5, r1
	char tmpStr[256] = { 0, };
 8000796:	2100      	movs	r1, #0
{
 8000798:	b0c1      	sub	sp, #260	; 0x104
	char tmpStr[256] = { 0, };
 800079a:	22fc      	movs	r2, #252	; 0xfc
 800079c:	a801      	add	r0, sp, #4
 800079e:	9100      	str	r1, [sp, #0]
 80007a0:	f007 fc64 	bl	800806c <memset>
	uint8_t len;
	sprintf (tmpStr, "<%c%s", com, data);
 80007a4:	462b      	mov	r3, r5
 80007a6:	4622      	mov	r2, r4
 80007a8:	4909      	ldr	r1, [pc, #36]	; (80007d0 <SendCommand+0x40>)
 80007aa:	4668      	mov	r0, sp
 80007ac:	f007 fcf4 	bl	8008198 <siprintf>
	len = strlen (tmpStr);
 80007b0:	4668      	mov	r0, sp
 80007b2:	f7ff fccb 	bl	800014c <strlen>
	tmpStr[len] = '>';
 80007b6:	233e      	movs	r3, #62	; 0x3e
 80007b8:	f80d 3000 	strb.w	r3, [sp, r0]
	HAL_UART_Transmit (&huart1, (uint8_t*) tmpStr, len + 1, 1000);
 80007bc:	3001      	adds	r0, #1
 80007be:	b282      	uxth	r2, r0
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	4669      	mov	r1, sp
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <SendCommand+0x44>)
 80007c8:	f007 fa34 	bl	8007c34 <HAL_UART_Transmit>
}
 80007cc:	b041      	add	sp, #260	; 0x104
 80007ce:	bd30      	pop	{r4, r5, pc}
 80007d0:	080099d8 	.word	0x080099d8
 80007d4:	20000c38 	.word	0x20000c38

080007d8 <NetInitialise>:


}

void NetInitialise (NetHandler_t *h)
{
 80007d8:	b538      	push	{r3, r4, r5, lr}
	SendCommand (UARTW_SSID, settings.SSID);
 80007da:	4d08      	ldr	r5, [pc, #32]	; (80007fc <NetInitialise+0x24>)
{
 80007dc:	4604      	mov	r4, r0
	SendCommand (UARTW_SSID, settings.SSID);
 80007de:	4629      	mov	r1, r5
 80007e0:	205a      	movs	r0, #90	; 0x5a
 80007e2:	f7ff ffd5 	bl	8000790 <SendCommand>
	HAL_Delay (100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f004 ff50 	bl	800568c <HAL_Delay>
	SendCommand (UARTW_WIFIPASS, settings.WiFiPass);
 80007ec:	2058      	movs	r0, #88	; 0x58
 80007ee:	f105 0110 	add.w	r1, r5, #16
 80007f2:	f7ff ffcd 	bl	8000790 <SendCommand>
	h->initialised = true;
 80007f6:	2301      	movs	r3, #1
 80007f8:	7063      	strb	r3, [r4, #1]
}
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
 80007fc:	20000a93 	.word	0x20000a93

08000800 <NetSendAsync>:
{
	SendCommand (UARTW_DEBUGOFF, "0");
}

void NetSendAsync (NetHandler_t *h, char *ptr)
{
 8000800:	b570      	push	{r4, r5, r6, lr}
	if (h->nMessages < 7)
 8000802:	f890 5630 	ldrb.w	r5, [r0, #1584]	; 0x630
{
 8000806:	4604      	mov	r4, r0
	if (h->nMessages < 7)
 8000808:	2d06      	cmp	r5, #6
{
 800080a:	460e      	mov	r6, r1
	if (h->nMessages < 7)
 800080c:	d80f      	bhi.n	800082e <NetSendAsync+0x2e>
		{
			memcpy (h->messages[h->nMessages], ptr, strlen (ptr));
 800080e:	4608      	mov	r0, r1
 8000810:	f7ff fc9c 	bl	800014c <strlen>
 8000814:	eb04 15c5 	add.w	r5, r4, r5, lsl #7
 8000818:	4602      	mov	r2, r0
 800081a:	4631      	mov	r1, r6
 800081c:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000820:	f007 fc16 	bl	8008050 <memcpy>
			h->nMessages++;
 8000824:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8000828:	3301      	adds	r3, #1
 800082a:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
		}
}
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <NetStatusCheck>:

}

void NetStatusCheck ()
{
	SendCommand (UARTW_STATUS, "");
 8000830:	2074      	movs	r0, #116	; 0x74
 8000832:	4901      	ldr	r1, [pc, #4]	; (8000838 <NetStatusCheck+0x8>)
 8000834:	f7ff bfac 	b.w	8000790 <SendCommand>
 8000838:	0800a5ca 	.word	0x0800a5ca

0800083c <NetRoutine>:
{
 800083c:	b538      	push	{r3, r4, r5, lr}
	if (h->TX && HAL_GetTick()-h->lastTransmit>3000)
 800083e:	7943      	ldrb	r3, [r0, #5]
{
 8000840:	4604      	mov	r4, r0
	if (h->TX && HAL_GetTick()-h->lastTransmit>3000)
 8000842:	b14b      	cbz	r3, 8000858 <NetRoutine+0x1c>
 8000844:	f004 ff1c 	bl	8005680 <HAL_GetTick>
 8000848:	68e3      	ldr	r3, [r4, #12]
 800084a:	1ac0      	subs	r0, r0, r3
 800084c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000850:	4298      	cmp	r0, r3
		h->TX=false;
 8000852:	bf84      	itt	hi
 8000854:	2300      	movhi	r3, #0
 8000856:	7163      	strbhi	r3, [r4, #5]
	if (HAL_GetTick () - h->lastStatusCheck > 10000)
 8000858:	f004 ff12 	bl	8005680 <HAL_GetTick>
 800085c:	6923      	ldr	r3, [r4, #16]
 800085e:	1ac0      	subs	r0, r0, r3
 8000860:	f242 7310 	movw	r3, #10000	; 0x2710
 8000864:	4298      	cmp	r0, r3
 8000866:	d904      	bls.n	8000872 <NetRoutine+0x36>
			h->lastStatusCheck = HAL_GetTick ();
 8000868:	f004 ff0a 	bl	8005680 <HAL_GetTick>
 800086c:	6120      	str	r0, [r4, #16]
			NetStatusCheck ();
 800086e:	f7ff ffdf 	bl	8000830 <NetStatusCheck>
	if (!h->plugged)
 8000872:	7823      	ldrb	r3, [r4, #0]
 8000874:	b373      	cbz	r3, 80008d4 <NetRoutine+0x98>
	if (!h->initialised && settings.SSID[0] != 0 && settings.WiFiPass[0] != 0)
 8000876:	7863      	ldrb	r3, [r4, #1]
 8000878:	b943      	cbnz	r3, 800088c <NetRoutine+0x50>
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <NetRoutine+0x9c>)
 800087c:	7cda      	ldrb	r2, [r3, #19]
 800087e:	b12a      	cbz	r2, 800088c <NetRoutine+0x50>
 8000880:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000884:	b113      	cbz	r3, 800088c <NetRoutine+0x50>
			NetInitialise (h);
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff ffa6 	bl	80007d8 <NetInitialise>
	if (h->online && !h->TX)
 800088c:	78e3      	ldrb	r3, [r4, #3]
 800088e:	b30b      	cbz	r3, 80008d4 <NetRoutine+0x98>
 8000890:	7965      	ldrb	r5, [r4, #5]
 8000892:	b9fd      	cbnz	r5, 80008d4 <NetRoutine+0x98>
			if (h->nMessages)
 8000894:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8000898:	b1e3      	cbz	r3, 80008d4 <NetRoutine+0x98>
					h->TX = true;
 800089a:	2301      	movs	r3, #1
 800089c:	7163      	strb	r3, [r4, #5]
					h->lastTransmit=HAL_GetTick();
 800089e:	f004 feef 	bl	8005680 <HAL_GetTick>
					SendCommand (UARTW_GETSTRING, h->messages[h->nMessages - 1]);
 80008a2:	f894 1630 	ldrb.w	r1, [r4, #1584]	; 0x630
					h->lastTransmit=HAL_GetTick();
 80008a6:	60e0      	str	r0, [r4, #12]
					SendCommand (UARTW_GETSTRING, h->messages[h->nMessages - 1]);
 80008a8:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
 80008ac:	2046      	movs	r0, #70	; 0x46
 80008ae:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 80008b2:	f7ff ff6d 	bl	8000790 <SendCommand>
					memset(h->messages[h->nMessages - 1],0,sizeof(h->messages[h->nMessages - 1]));
 80008b6:	f894 0630 	ldrb.w	r0, [r4, #1584]	; 0x630
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	eb04 10c0 	add.w	r0, r4, r0, lsl #7
 80008c0:	4629      	mov	r1, r5
 80008c2:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 80008c6:	f007 fbd1 	bl	800806c <memset>
					h->nMessages--;
 80008ca:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
}
 80008d4:	bd38      	pop	{r3, r4, r5, pc}
 80008d6:	bf00      	nop
 80008d8:	20000a80 	.word	0x20000a80

080008dc <NetRefreshNetworkList>:
}

void NetRefreshNetworkList (NetHandler_t *h)
{
 80008dc:	b508      	push	{r3, lr}
	h->netRefreshDone = false;
	h->netRefreshInProgress=true;
 80008de:	2301      	movs	r3, #1
	memset (h->nets, 0, sizeof(h->nets));
 80008e0:	2100      	movs	r1, #0
	h->netRefreshInProgress=true;
 80008e2:	80c3      	strh	r3, [r0, #6]
	memset (h->nets, 0, sizeof(h->nets));
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	3030      	adds	r0, #48	; 0x30
 80008ea:	f007 fbbf 	bl	800806c <memset>
	SendCommand (UARTW_WIFIREFRESH, "");
}
 80008ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SendCommand (UARTW_WIFIREFRESH, "");
 80008f2:	2057      	movs	r0, #87	; 0x57
 80008f4:	4901      	ldr	r1, [pc, #4]	; (80008fc <NetRefreshNetworkList+0x20>)
 80008f6:	f7ff bf4b 	b.w	8000790 <SendCommand>
 80008fa:	bf00      	nop
 80008fc:	0800a5ca 	.word	0x0800a5ca

08000900 <sendCommand>:
GPIO_TypeDef * rstPort;
uint16_t rstPin;
uint8_t biasRatio=0x88;

void sendCommand (uint8_t com)
{
 8000900:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000902:	4d0f      	ldr	r5, [pc, #60]	; (8000940 <sendCommand+0x40>)
 8000904:	4c0f      	ldr	r4, [pc, #60]	; (8000944 <sendCommand+0x44>)
 8000906:	8829      	ldrh	r1, [r5, #0]
{
 8000908:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin (csPort, csPin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	6820      	ldr	r0, [r4, #0]
 8000910:	f005 fbac 	bl	800606c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <sendCommand+0x48>)
 8000916:	2200      	movs	r2, #0
 8000918:	8819      	ldrh	r1, [r3, #0]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <sendCommand+0x4c>)
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	f005 fba5 	bl	800606c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <sendCommand+0x50>)
 8000924:	230a      	movs	r3, #10
 8000926:	f10d 0107 	add.w	r1, sp, #7
 800092a:	2201      	movs	r2, #1
 800092c:	6800      	ldr	r0, [r0, #0]
 800092e:	f006 fc69 	bl	8007204 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	8829      	ldrh	r1, [r5, #0]
 8000936:	6820      	ldr	r0, [r4, #0]
 8000938:	f005 fb98 	bl	800606c <HAL_GPIO_WritePin>
}
 800093c:	b003      	add	sp, #12
 800093e:	bd30      	pop	{r4, r5, pc}
 8000940:	20000388 	.word	0x20000388
 8000944:	20000998 	.word	0x20000998
 8000948:	20000992 	.word	0x20000992
 800094c:	2000038c 	.word	0x2000038c
 8000950:	2000099c 	.word	0x2000099c

08000954 <UC1609_SoftwareReset>:

void UC1609_SoftwareReset()
{
 8000954:	b508      	push	{r3, lr}
sendCommand(0b11100010);
 8000956:	20e2      	movs	r0, #226	; 0xe2
 8000958:	f7ff ffd2 	bl	8000900 <sendCommand>
HAL_Delay (20);
}
 800095c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_Delay (20);
 8000960:	2014      	movs	r0, #20
 8000962:	f004 be93 	b.w	800568c <HAL_Delay>
	...

08000968 <UC1609_HardwareReset>:

void UC1609_HardwareReset()
{
 8000968:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin (rstPort, rstPin, 0);
 800096a:	4d0a      	ldr	r5, [pc, #40]	; (8000994 <UC1609_HardwareReset+0x2c>)
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <UC1609_HardwareReset+0x30>)
 800096e:	8829      	ldrh	r1, [r5, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	6820      	ldr	r0, [r4, #0]
 8000974:	f005 fb7a 	bl	800606c <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000978:	2001      	movs	r0, #1
 800097a:	f004 fe87 	bl	800568c <HAL_Delay>
	HAL_GPIO_WritePin (rstPort, rstPin, 1);
 800097e:	6820      	ldr	r0, [r4, #0]
 8000980:	8829      	ldrh	r1, [r5, #0]
 8000982:	2201      	movs	r2, #1
 8000984:	f005 fb72 	bl	800606c <HAL_GPIO_WritePin>
	HAL_Delay (5);
}
 8000988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay (5);
 800098c:	2005      	movs	r0, #5
 800098e:	f004 be7d 	b.w	800568c <HAL_Delay>
 8000992:	bf00      	nop
 8000994:	20000390 	.word	0x20000390
 8000998:	20000994 	.word	0x20000994

0800099c <UC1609_Init>:
									uint16_t csGpioPin,
									GPIO_TypeDef* cdGpioPort,
									uint16_t cdGpioPin,
									GPIO_TypeDef* rstGpioPort,
									uint16_t rstGpioPin)
{
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	hspi = spiHandler;
 800099e:	4f15      	ldr	r7, [pc, #84]	; (80009f4 <UC1609_Init+0x58>)
{
 80009a0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	hspi = spiHandler;
 80009a4:	6038      	str	r0, [r7, #0]
	csPort=csGpioPort;
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <UC1609_Init+0x5c>)
{
 80009a8:	9c07      	ldr	r4, [sp, #28]
	csPort=csGpioPort;
 80009aa:	6001      	str	r1, [r0, #0]
	csPin=csGpioPin;
 80009ac:	4913      	ldr	r1, [pc, #76]	; (80009fc <UC1609_Init+0x60>)
{
 80009ae:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	csPin=csGpioPin;
 80009b2:	800a      	strh	r2, [r1, #0]
	cdPort=cdGpioPort;
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <UC1609_Init+0x64>)
 80009b6:	6013      	str	r3, [r2, #0]
	cdPin=cdGpioPin;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <UC1609_Init+0x68>)
 80009ba:	801e      	strh	r6, [r3, #0]
	rstPort=rstGpioPort;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <UC1609_Init+0x6c>)
 80009be:	601c      	str	r4, [r3, #0]
	rstPin=rstGpioPin;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <UC1609_Init+0x70>)
 80009c2:	801d      	strh	r5, [r3, #0]
if (rstPin==0 || rstPort==0)
 80009c4:	b105      	cbz	r5, 80009c8 <UC1609_Init+0x2c>
 80009c6:	b994      	cbnz	r4, 80009ee <UC1609_Init+0x52>
	{
	UC1609_SoftwareReset();
 80009c8:	f7ff ffc4 	bl	8000954 <UC1609_SoftwareReset>
	}
else
	{
	UC1609_HardwareReset();
	}
	sendCommand (UC1609_CMD_MAPPING | MIRROR_X);
 80009cc:	20c4      	movs	r0, #196	; 0xc4
 80009ce:	f7ff ff97 	bl	8000900 <sendCommand>
	sendCommand (UC1609_CMD_SET_BIAS_RATIO|DEFAULT_BIAS_RATIO);
 80009d2:	20eb      	movs	r0, #235	; 0xeb
 80009d4:	f7ff ff94 	bl	8000900 <sendCommand>
	sendCommand (UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 80009d8:	2081      	movs	r0, #129	; 0x81
 80009da:	f7ff ff91 	bl	8000900 <sendCommand>
	sendCommand (IMHO_BEST_LOOKING_BIAS_RATIO);
 80009de:	2083      	movs	r0, #131	; 0x83
 80009e0:	f7ff ff8e 	bl	8000900 <sendCommand>
	UC1609_Scroll(0);
}
 80009e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

void UC1609_Scroll (uint8_t lines)
{
lines%=64;
sendCommand(UC1609_CMD_SCROLL|lines);
 80009e8:	2040      	movs	r0, #64	; 0x40
 80009ea:	f7ff bf89 	b.w	8000900 <sendCommand>
	UC1609_HardwareReset();
 80009ee:	f7ff ffbb 	bl	8000968 <UC1609_HardwareReset>
 80009f2:	e7eb      	b.n	80009cc <UC1609_Init+0x30>
 80009f4:	2000099c 	.word	0x2000099c
 80009f8:	20000998 	.word	0x20000998
 80009fc:	20000388 	.word	0x20000388
 8000a00:	2000038c 	.word	0x2000038c
 8000a04:	20000992 	.word	0x20000992
 8000a08:	20000994 	.word	0x20000994
 8000a0c:	20000390 	.word	0x20000390

08000a10 <UC1609_SetXY>:
{
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4604      	mov	r4, r0
 8000a14:	460d      	mov	r5, r1
	sendCommand (0b00000000 | (x & 0xF));
 8000a16:	f000 000f 	and.w	r0, r0, #15
 8000a1a:	f7ff ff71 	bl	8000900 <sendCommand>
	sendCommand (0b00010000 | ((x >> 4) & 0xF));
 8000a1e:	0920      	lsrs	r0, r4, #4
 8000a20:	f040 0010 	orr.w	r0, r0, #16
 8000a24:	f7ff ff6c 	bl	8000900 <sendCommand>
	sendCommand (0b10110000 | y);
 8000a28:	f045 00b0 	orr.w	r0, r5, #176	; 0xb0
}
 8000a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sendCommand (0b10110000 | y);
 8000a30:	f7ff bf66 	b.w	8000900 <sendCommand>

08000a34 <UC1609_SetPos>:
	cursor = x * 6 + UC1609_WIDTH * y;
 8000a34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <UC1609_SetPos+0x14>)
 8000a3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000a3e:	0189      	lsls	r1, r1, #6
 8000a40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8000a44:	8019      	strh	r1, [r3, #0]
}
 8000a46:	4770      	bx	lr
 8000a48:	20000378 	.word	0x20000378

08000a4c <UC1609_UpdateScreen>:
	UC1609_SetXY (0, 0);
 8000a4c:	2100      	movs	r1, #0
{
 8000a4e:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000a50:	4d11      	ldr	r5, [pc, #68]	; (8000a98 <UC1609_UpdateScreen+0x4c>)
 8000a52:	4c12      	ldr	r4, [pc, #72]	; (8000a9c <UC1609_UpdateScreen+0x50>)
	UC1609_SetXY (0, 0);
 8000a54:	4608      	mov	r0, r1
 8000a56:	f7ff ffdb 	bl	8000a10 <UC1609_SetXY>
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000a5a:	8829      	ldrh	r1, [r5, #0]
 8000a5c:	6820      	ldr	r0, [r4, #0]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f005 fb04 	bl	800606c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 1);
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <UC1609_UpdateScreen+0x54>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	8819      	ldrh	r1, [r3, #0]
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <UC1609_UpdateScreen+0x58>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	f005 fafd 	bl	800606c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, buffer, UC1609_BUFFER_SIZE, 1000);
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <UC1609_UpdateScreen+0x5c>)
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a7c:	490b      	ldr	r1, [pc, #44]	; (8000aac <UC1609_UpdateScreen+0x60>)
 8000a7e:	6800      	ldr	r0, [r0, #0]
 8000a80:	f006 fbc0 	bl	8007204 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000a84:	6820      	ldr	r0, [r4, #0]
 8000a86:	8829      	ldrh	r1, [r5, #0]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f005 faef 	bl	800606c <HAL_GPIO_WritePin>
}
 8000a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sendCommand (UC1609_CMD_ENABLE);
 8000a92:	20af      	movs	r0, #175	; 0xaf
 8000a94:	f7ff bf34 	b.w	8000900 <sendCommand>
 8000a98:	20000388 	.word	0x20000388
 8000a9c:	20000998 	.word	0x20000998
 8000aa0:	20000992 	.word	0x20000992
 8000aa4:	2000038c 	.word	0x2000038c
 8000aa8:	2000099c 	.word	0x2000099c
 8000aac:	20000392 	.word	0x20000392

08000ab0 <UC1609_Clean>:
{
 8000ab0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		buffer[i] = 0;
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <UC1609_Clean+0x18>)
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f802 1b01 	strb.w	r1, [r2], #1
	for (uint16_t i = 0; i < UC1609_BUFFER_SIZE; ++i)
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f9      	bne.n	8000ab8 <UC1609_Clean+0x8>
}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	20000392 	.word	0x20000392

08000acc <UC1609_PutRuC>:
{
 8000acc:	b570      	push	{r4, r5, r6, lr}
	if (*c == 0xD0)
 8000ace:	7803      	ldrb	r3, [r0, #0]
 8000ad0:	2bd0      	cmp	r3, #208	; 0xd0
 8000ad2:	d111      	bne.n	8000af8 <UC1609_PutRuC+0x2c>
		pos = *(c + 1) - 144 + 101;
 8000ad4:	7843      	ldrb	r3, [r0, #1]
 8000ad6:	3b2b      	subs	r3, #43	; 0x2b
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000ad8:	490a      	ldr	r1, [pc, #40]	; (8000b04 <UC1609_PutRuC+0x38>)
 8000ada:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <UC1609_PutRuC+0x3c>)
		pos = *(c + 1) - 128 + 149;
 8000adc:	b2db      	uxtb	r3, r3
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000ade:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ae2:	880a      	ldrh	r2, [r1, #0]
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <UC1609_PutRuC+0x40>)
 8000ae6:	191e      	adds	r6, r3, r4
 8000ae8:	58e3      	ldr	r3, [r4, r3]
 8000aea:	1815      	adds	r5, r2, r0
 8000aec:	5013      	str	r3, [r2, r0]
 8000aee:	7933      	ldrb	r3, [r6, #4]
	cursor += 5;
 8000af0:	3205      	adds	r2, #5
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000af2:	712b      	strb	r3, [r5, #4]
	cursor += 5;
 8000af4:	800a      	strh	r2, [r1, #0]
}
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
	else if (*c == 0xD1)
 8000af8:	2bd1      	cmp	r3, #209	; 0xd1
 8000afa:	d1fc      	bne.n	8000af6 <UC1609_PutRuC+0x2a>
		pos = *(c + 1) - 128 + 149;
 8000afc:	7843      	ldrb	r3, [r0, #1]
 8000afe:	3315      	adds	r3, #21
 8000b00:	e7ea      	b.n	8000ad8 <UC1609_PutRuC+0xc>
 8000b02:	bf00      	nop
 8000b04:	20000378 	.word	0x20000378
 8000b08:	0800a248 	.word	0x0800a248
 8000b0c:	20000392 	.word	0x20000392

08000b10 <UC1609_Put>:
{
 8000b10:	b570      	push	{r4, r5, r6, lr}
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <UC1609_Put+0x24>)
 8000b14:	4c08      	ldr	r4, [pc, #32]	; (8000b38 <UC1609_Put+0x28>)
 8000b16:	3820      	subs	r0, #32
 8000b18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000b1c:	8813      	ldrh	r3, [r2, #0]
 8000b1e:	4907      	ldr	r1, [pc, #28]	; (8000b3c <UC1609_Put+0x2c>)
 8000b20:	1906      	adds	r6, r0, r4
 8000b22:	5820      	ldr	r0, [r4, r0]
 8000b24:	185d      	adds	r5, r3, r1
 8000b26:	5058      	str	r0, [r3, r1]
 8000b28:	7931      	ldrb	r1, [r6, #4]
	cursor += 5;
 8000b2a:	3305      	adds	r3, #5
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b2c:	7129      	strb	r1, [r5, #4]
	cursor += 5;
 8000b2e:	8013      	strh	r3, [r2, #0]
}
 8000b30:	bd70      	pop	{r4, r5, r6, pc}
 8000b32:	bf00      	nop
 8000b34:	20000378 	.word	0x20000378
 8000b38:	0800a248 	.word	0x0800a248
 8000b3c:	20000392 	.word	0x20000392

08000b40 <UC1609_PutString>:
{
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4604      	mov	r4, r0
			cursor %= UC1609_BUFFER_SIZE;
 8000b44:	f44f 66c0 	mov.w	r6, #1536	; 0x600
 8000b48:	4d0d      	ldr	r5, [pc, #52]	; (8000b80 <UC1609_PutString+0x40>)
	while (*c)
 8000b4a:	7823      	ldrb	r3, [r4, #0]
 8000b4c:	b903      	cbnz	r3, 8000b50 <UC1609_PutString+0x10>
}
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}
			cursor %= UC1609_BUFFER_SIZE;
 8000b50:	882a      	ldrh	r2, [r5, #0]
 8000b52:	fbb2 f3f6 	udiv	r3, r2, r6
 8000b56:	fb06 2313 	mls	r3, r6, r3, r2
 8000b5a:	802b      	strh	r3, [r5, #0]
			if (*c == 0xD0 || *c == 0xD1)
 8000b5c:	7820      	ldrb	r0, [r4, #0]
 8000b5e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d807      	bhi.n	8000b78 <UC1609_PutString+0x38>
					UC1609_PutRuC (c);
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff ffaf 	bl	8000acc <UC1609_PutRuC>
					c += 2;
 8000b6e:	3402      	adds	r4, #2
			cursor++;
 8000b70:	882b      	ldrh	r3, [r5, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	802b      	strh	r3, [r5, #0]
 8000b76:	e7e8      	b.n	8000b4a <UC1609_PutString+0xa>
				UC1609_Put (*c++);
 8000b78:	3401      	adds	r4, #1
 8000b7a:	f7ff ffc9 	bl	8000b10 <UC1609_Put>
 8000b7e:	e7f7      	b.n	8000b70 <UC1609_PutString+0x30>
 8000b80:	20000378 	.word	0x20000378

08000b84 <UC1609_DrawBitmap>:
}

void UC1609_DrawBitmap(uint8_t *buf) {
 8000b84:	b508      	push	{r3, lr}
 8000b86:	4601      	mov	r1, r0
	memcpy(buffer, buf, sizeof(buffer));
 8000b88:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000b8c:	4801      	ldr	r0, [pc, #4]	; (8000b94 <UC1609_DrawBitmap+0x10>)
 8000b8e:	f007 fa5f 	bl	8008050 <memcpy>
}
 8000b92:	bd08      	pop	{r3, pc}
 8000b94:	20000392 	.word	0x20000392

08000b98 <UC1609_PutPixel>:

void UC1609_PutPixel(uint8_t x, uint8_t y) {
	buffer[(x + (y/8)*UC1609_WIDTH)%UC1609_BUFFER_SIZE] |= 1 << (y % 8);
 8000b98:	22c0      	movs	r2, #192	; 0xc0
 8000b9a:	08cb      	lsrs	r3, r1, #3
 8000b9c:	fb02 0303 	mla	r3, r2, r3, r0
 8000ba0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ba4:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ba8:	fb02 3010 	mls	r0, r2, r0, r3
 8000bac:	2301      	movs	r3, #1
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <UC1609_PutPixel+0x28>)
 8000bb0:	f001 0107 	and.w	r1, r1, #7
 8000bb4:	fa03 f101 	lsl.w	r1, r3, r1
 8000bb8:	5c13      	ldrb	r3, [r2, r0]
 8000bba:	4319      	orrs	r1, r3
 8000bbc:	5411      	strb	r1, [r2, r0]
}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000392 	.word	0x20000392

08000bc4 <UC1609_DrawLine>:

void UC1609_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
	if (x2==x1 && y2==y1)
 8000bc4:	4282      	cmp	r2, r0
void UC1609_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8000bc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bca:	4605      	mov	r5, r0
 8000bcc:	460c      	mov	r4, r1
 8000bce:	4692      	mov	sl, r2
 8000bd0:	461e      	mov	r6, r3
	if (x2==x1 && y2==y1)
 8000bd2:	d105      	bne.n	8000be0 <UC1609_DrawLine+0x1c>
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	d107      	bne.n	8000be8 <UC1609_DrawLine+0x24>
	} else {
		for (uint8_t i = y1; i < y2 + 1; ++i) {
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
		}
	}
}
 8000bd8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UC1609_PutPixel(x1, y1);
 8000bdc:	f7ff bfdc 	b.w	8000b98 <UC1609_PutPixel>
	if(x2<x1)
 8000be0:	bf3e      	ittt	cc
 8000be2:	4603      	movcc	r3, r0
 8000be4:	4615      	movcc	r5, r2
 8000be6:	469a      	movcc	sl, r3
	if(y2<y1)
 8000be8:	42a6      	cmp	r6, r4
 8000bea:	bf3e      	ittt	cc
 8000bec:	4623      	movcc	r3, r4
 8000bee:	4634      	movcc	r4, r6
 8000bf0:	461e      	movcc	r6, r3
	if (x2 - x1 > y2 - y1) {
 8000bf2:	ebaa 0705 	sub.w	r7, sl, r5
 8000bf6:	eba6 0804 	sub.w	r8, r6, r4
 8000bfa:	4547      	cmp	r7, r8
 8000bfc:	46ab      	mov	fp, r5
 8000bfe:	46a1      	mov	r9, r4
 8000c00:	dc1b      	bgt.n	8000c3a <UC1609_DrawLine+0x76>
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 8000c02:	42a6      	cmp	r6, r4
 8000c04:	d31b      	bcc.n	8000c3e <UC1609_DrawLine+0x7a>
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8000c06:	eba4 0009 	sub.w	r0, r4, r9
 8000c0a:	4378      	muls	r0, r7
 8000c0c:	fb90 f0f8 	sdiv	r0, r0, r8
 8000c10:	4428      	add	r0, r5
 8000c12:	4621      	mov	r1, r4
 8000c14:	b2c0      	uxtb	r0, r0
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 8000c16:	3401      	adds	r4, #1
			UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8000c18:	f7ff ffbe 	bl	8000b98 <UC1609_PutPixel>
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 8000c1c:	b2e4      	uxtb	r4, r4
 8000c1e:	e7f0      	b.n	8000c02 <UC1609_DrawLine+0x3e>
			UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8000c20:	eba5 010b 	sub.w	r1, r5, fp
 8000c24:	fb08 f101 	mul.w	r1, r8, r1
 8000c28:	fb91 f1f7 	sdiv	r1, r1, r7
 8000c2c:	4421      	add	r1, r4
 8000c2e:	4628      	mov	r0, r5
 8000c30:	b2c9      	uxtb	r1, r1
 8000c32:	f7ff ffb1 	bl	8000b98 <UC1609_PutPixel>
		for (uint8_t i = x1; i < x2 + 1; ++i) {
 8000c36:	3501      	adds	r5, #1
 8000c38:	b2ed      	uxtb	r5, r5
 8000c3a:	45aa      	cmp	sl, r5
 8000c3c:	d2f0      	bcs.n	8000c20 <UC1609_DrawLine+0x5c>
}
 8000c3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c42 <UC1609_DrawDottedLine>:

void UC1609_DrawDottedLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
	if (x2==x1 && y2==y1)
 8000c42:	4282      	cmp	r2, r0
void UC1609_DrawDottedLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8000c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c48:	4605      	mov	r5, r0
 8000c4a:	460c      	mov	r4, r1
 8000c4c:	4692      	mov	sl, r2
 8000c4e:	4698      	mov	r8, r3
	if (x2==x1 && y2==y1)
 8000c50:	d105      	bne.n	8000c5e <UC1609_DrawDottedLine+0x1c>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d103      	bne.n	8000c5e <UC1609_DrawDottedLine+0x1c>
		} else {
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
				UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
			}
		}
}
 8000c56:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UC1609_PutPixel(x1, y1);
 8000c5a:	f7ff bf9d 	b.w	8000b98 <UC1609_PutPixel>
	if (x2 - x1 > y2 - y1) {
 8000c5e:	ebaa 0605 	sub.w	r6, sl, r5
 8000c62:	eba8 0704 	sub.w	r7, r8, r4
 8000c66:	42be      	cmp	r6, r7
 8000c68:	46ab      	mov	fp, r5
 8000c6a:	46a1      	mov	r9, r4
 8000c6c:	dc1a      	bgt.n	8000ca4 <UC1609_DrawDottedLine+0x62>
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
 8000c6e:	4544      	cmp	r4, r8
 8000c70:	d81a      	bhi.n	8000ca8 <UC1609_DrawDottedLine+0x66>
				UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8000c72:	eba4 0009 	sub.w	r0, r4, r9
 8000c76:	4370      	muls	r0, r6
 8000c78:	fb90 f0f7 	sdiv	r0, r0, r7
 8000c7c:	4428      	add	r0, r5
 8000c7e:	4621      	mov	r1, r4
 8000c80:	b2c0      	uxtb	r0, r0
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
 8000c82:	3402      	adds	r4, #2
				UC1609_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8000c84:	f7ff ff88 	bl	8000b98 <UC1609_PutPixel>
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
 8000c88:	b2e4      	uxtb	r4, r4
 8000c8a:	e7f0      	b.n	8000c6e <UC1609_DrawDottedLine+0x2c>
				UC1609_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8000c8c:	eba5 010b 	sub.w	r1, r5, fp
 8000c90:	4379      	muls	r1, r7
 8000c92:	fb91 f1f6 	sdiv	r1, r1, r6
 8000c96:	4421      	add	r1, r4
 8000c98:	4628      	mov	r0, r5
 8000c9a:	b2c9      	uxtb	r1, r1
 8000c9c:	f7ff ff7c 	bl	8000b98 <UC1609_PutPixel>
			for (uint8_t i = x1; i < x2 + 1; i+=2) {
 8000ca0:	3502      	adds	r5, #2
 8000ca2:	b2ed      	uxtb	r5, r5
 8000ca4:	4555      	cmp	r5, sl
 8000ca6:	d9f1      	bls.n	8000c8c <UC1609_DrawDottedLine+0x4a>
}
 8000ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000cac <pow10_>:
	while(pos<255 && str[pos]!=sym)
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
 8000cac:	4603      	mov	r3, r0
 8000cae:	220a      	movs	r2, #10
 8000cb0:	2001      	movs	r0, #1
  if (value>0)
 8000cb2:	b11b      	cbz	r3, 8000cbc <pow10_+0x10>
  	return 10*pow10_(value-1);
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	4350      	muls	r0, r2
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	e7fa      	b.n	8000cb2 <pow10_+0x6>
  else
  	return 1;
}
 8000cbc:	4770      	bx	lr
	...

08000cc0 <floatToString2>:
{
	return 1<<(value*4);
}

char* floatToString2(float arg)
{
 8000cc0:	b538      	push	{r3, r4, r5, lr}
static char resString[32];
int32_t leftPart = (int32_t) arg;
int16_t rightPart = abs((int16_t)(arg*100))%100;
 8000cc2:	490e      	ldr	r1, [pc, #56]	; (8000cfc <floatToString2+0x3c>)
{
 8000cc4:	4605      	mov	r5, r0
int16_t rightPart = abs((int16_t)(arg*100))%100;
 8000cc6:	f7ff fb57 	bl	8000378 <__aeabi_fmul>
 8000cca:	f7ff fd1b 	bl	8000704 <__aeabi_f2iz>
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	b202      	sxth	r2, r0
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	bfb8      	it	lt
 8000cd6:	4252      	neglt	r2, r2
 8000cd8:	b292      	uxth	r2, r2
 8000cda:	fbb2 f4f3 	udiv	r4, r2, r3
int32_t leftPart = (int32_t) arg;
 8000cde:	4628      	mov	r0, r5
int16_t rightPart = abs((int16_t)(arg*100))%100;
 8000ce0:	fb03 2414 	mls	r4, r3, r4, r2
int32_t leftPart = (int32_t) arg;
 8000ce4:	f7ff fd0e 	bl	8000704 <__aeabi_f2iz>
sprintf(resString,"%li.%02d",leftPart,rightPart);
 8000ce8:	4d05      	ldr	r5, [pc, #20]	; (8000d00 <floatToString2+0x40>)
int32_t leftPart = (int32_t) arg;
 8000cea:	4602      	mov	r2, r0
sprintf(resString,"%li.%02d",leftPart,rightPart);
 8000cec:	4623      	mov	r3, r4
 8000cee:	4628      	mov	r0, r5
 8000cf0:	4904      	ldr	r1, [pc, #16]	; (8000d04 <floatToString2+0x44>)
 8000cf2:	f007 fa51 	bl	8008198 <siprintf>
return resString;
}
 8000cf6:	4628      	mov	r0, r5
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
 8000cfa:	bf00      	nop
 8000cfc:	42c80000 	.word	0x42c80000
 8000d00:	200000d4 	.word	0x200000d4
 8000d04:	080099de 	.word	0x080099de

08000d08 <floatToString1>:

char* floatToString1(float arg)
{
 8000d08:	b538      	push	{r3, r4, r5, lr}
static char resString[32];
int32_t leftPart = (int32_t) arg;
int16_t rightPart = abs((int16_t)(arg*10))%10;
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <floatToString1+0x3c>)
{
 8000d0c:	4605      	mov	r5, r0
int16_t rightPart = abs((int16_t)(arg*10))%10;
 8000d0e:	f7ff fb33 	bl	8000378 <__aeabi_fmul>
 8000d12:	f7ff fcf7 	bl	8000704 <__aeabi_f2iz>
 8000d16:	230a      	movs	r3, #10
 8000d18:	b202      	sxth	r2, r0
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	bfb8      	it	lt
 8000d1e:	4252      	neglt	r2, r2
 8000d20:	b292      	uxth	r2, r2
 8000d22:	fbb2 f4f3 	udiv	r4, r2, r3
int32_t leftPart = (int32_t) arg;
 8000d26:	4628      	mov	r0, r5
int16_t rightPart = abs((int16_t)(arg*10))%10;
 8000d28:	fb03 2414 	mls	r4, r3, r4, r2
int32_t leftPart = (int32_t) arg;
 8000d2c:	f7ff fcea 	bl	8000704 <__aeabi_f2iz>
sprintf(resString,"%li.%d",leftPart,rightPart);
 8000d30:	4d05      	ldr	r5, [pc, #20]	; (8000d48 <floatToString1+0x40>)
int32_t leftPart = (int32_t) arg;
 8000d32:	4602      	mov	r2, r0
sprintf(resString,"%li.%d",leftPart,rightPart);
 8000d34:	4623      	mov	r3, r4
 8000d36:	4628      	mov	r0, r5
 8000d38:	4904      	ldr	r1, [pc, #16]	; (8000d4c <floatToString1+0x44>)
 8000d3a:	f007 fa2d 	bl	8008198 <siprintf>
return resString;
}
 8000d3e:	4628      	mov	r0, r5
 8000d40:	bd38      	pop	{r3, r4, r5, pc}
 8000d42:	bf00      	nop
 8000d44:	41200000 	.word	0x41200000
 8000d48:	200000f4 	.word	0x200000f4
 8000d4c:	080099e7 	.word	0x080099e7

08000d50 <DecToInt>:

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
 8000d50:	b570      	push	{r4, r5, r6, lr}
	uint32_t value=0;
 8000d52:	2400      	movs	r4, #0
 8000d54:	1e45      	subs	r5, r0, #1
	uint8_t i=0;
	for(i=0;i<len;i++)
 8000d56:	b189      	cbz	r1, 8000d7c <DecToInt+0x2c>
	if (string[i]>='0' && string[i]<='9')
 8000d58:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000d5c:	3901      	subs	r1, #1
 8000d5e:	3e30      	subs	r6, #48	; 0x30
 8000d60:	b2f3      	uxtb	r3, r6
 8000d62:	2b09      	cmp	r3, #9
 8000d64:	b2c9      	uxtb	r1, r1
 8000d66:	d805      	bhi.n	8000d74 <DecToInt+0x24>
	value+=(string[i]-'0')*pow10_(len-i-1);
 8000d68:	4608      	mov	r0, r1
 8000d6a:	f7ff ff9f 	bl	8000cac <pow10_>
 8000d6e:	fb00 4406 	mla	r4, r0, r6, r4
	for(i=0;i<len;i++)
 8000d72:	e7f0      	b.n	8000d56 <DecToInt+0x6>
	else
	{
		Error_Handler();
 8000d74:	f003 fa50 	bl	8004218 <Error_Handler>
		return 0xFFFFFFFF;
 8000d78:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return value;
}
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}

08000d80 <HexToInt>:
{
	uint32_t value=0;
	uint32_t tmp=0;
	uint8_t i=0;

	for(i=0;i<len;i++)
 8000d80:	1e42      	subs	r2, r0, #1
	uint32_t value=0;
 8000d82:	2000      	movs	r0, #0
{
 8000d84:	b510      	push	{r4, lr}
 8000d86:	3901      	subs	r1, #1
 8000d88:	b2c9      	uxtb	r1, r1
	for(i=0;i<len;i++)
 8000d8a:	29ff      	cmp	r1, #255	; 0xff
 8000d8c:	d047      	beq.n	8000e1e <HexToInt+0x9e>
	{
		switch (string[i])
 8000d8e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8000d92:	3b30      	subs	r3, #48	; 0x30
 8000d94:	2b36      	cmp	r3, #54	; 0x36
 8000d96:	d83e      	bhi.n	8000e16 <HexToInt+0x96>
 8000d98:	e8df f003 	tbb	[pc, r3]
 8000d9c:	23441c42 	.word	0x23441c42
 8000da0:	2b292725 	.word	0x2b292725
 8000da4:	3d3d2f2d 	.word	0x3d3d2f2d
 8000da8:	3d3d3d3d 	.word	0x3d3d3d3d
 8000dac:	3533313d 	.word	0x3533313d
 8000db0:	3d3b3937 	.word	0x3d3b3937
 8000db4:	3d3d3d3d 	.word	0x3d3d3d3d
 8000db8:	3d3d3d3d 	.word	0x3d3d3d3d
 8000dbc:	3d3d3d3d 	.word	0x3d3d3d3d
 8000dc0:	3d3d3d3d 	.word	0x3d3d3d3d
 8000dc4:	3d3d3d3d 	.word	0x3d3d3d3d
 8000dc8:	3d3d3d3d 	.word	0x3d3d3d3d
 8000dcc:	3533313d 	.word	0x3533313d
 8000dd0:	3937      	.short	0x3937
 8000dd2:	3b          	.byte	0x3b
 8000dd3:	00          	.byte	0x00
 8000dd4:	2301      	movs	r3, #1
	return 1<<(value*4);
 8000dd6:	008c      	lsls	r4, r1, #2
		case 'f': tmp=15; break;
		default:
			Error_Handler();
			return 0xFFFFFFFF;
		}
		value+=tmp*pow16(len-i-1);
 8000dd8:	40a3      	lsls	r3, r4
 8000dda:	3901      	subs	r1, #1
 8000ddc:	4418      	add	r0, r3
	for(i=0;i<len;i++)
 8000dde:	b2c9      	uxtb	r1, r1
 8000de0:	e7d3      	b.n	8000d8a <HexToInt+0xa>
		case '3': tmp=3; break;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e7f7      	b.n	8000dd6 <HexToInt+0x56>
		case '4': tmp=4; break;
 8000de6:	2304      	movs	r3, #4
 8000de8:	e7f5      	b.n	8000dd6 <HexToInt+0x56>
		case '5': tmp=5; break;
 8000dea:	2305      	movs	r3, #5
 8000dec:	e7f3      	b.n	8000dd6 <HexToInt+0x56>
		case '6': tmp=6; break;
 8000dee:	2306      	movs	r3, #6
 8000df0:	e7f1      	b.n	8000dd6 <HexToInt+0x56>
		case '7': tmp=7; break;
 8000df2:	2307      	movs	r3, #7
 8000df4:	e7ef      	b.n	8000dd6 <HexToInt+0x56>
		case '8': tmp=8; break;
 8000df6:	2308      	movs	r3, #8
 8000df8:	e7ed      	b.n	8000dd6 <HexToInt+0x56>
		case '9': tmp=9; break;
 8000dfa:	2309      	movs	r3, #9
 8000dfc:	e7eb      	b.n	8000dd6 <HexToInt+0x56>
		case 'a': tmp=10; break;
 8000dfe:	230a      	movs	r3, #10
 8000e00:	e7e9      	b.n	8000dd6 <HexToInt+0x56>
		case 'b': tmp=11; break;
 8000e02:	230b      	movs	r3, #11
 8000e04:	e7e7      	b.n	8000dd6 <HexToInt+0x56>
		case 'c': tmp=12; break;
 8000e06:	230c      	movs	r3, #12
 8000e08:	e7e5      	b.n	8000dd6 <HexToInt+0x56>
		case 'd': tmp=13; break;
 8000e0a:	230d      	movs	r3, #13
 8000e0c:	e7e3      	b.n	8000dd6 <HexToInt+0x56>
		case 'e': tmp=14; break;
 8000e0e:	230e      	movs	r3, #14
 8000e10:	e7e1      	b.n	8000dd6 <HexToInt+0x56>
		case 'f': tmp=15; break;
 8000e12:	230f      	movs	r3, #15
 8000e14:	e7df      	b.n	8000dd6 <HexToInt+0x56>
			Error_Handler();
 8000e16:	f003 f9ff 	bl	8004218 <Error_Handler>
			return 0xFFFFFFFF;
 8000e1a:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return value;
}
 8000e1e:	bd10      	pop	{r4, pc}
		case '0': tmp=0; break;
 8000e20:	2300      	movs	r3, #0
 8000e22:	e7d8      	b.n	8000dd6 <HexToInt+0x56>
		case '2': tmp=2; break;
 8000e24:	2302      	movs	r3, #2
 8000e26:	e7d6      	b.n	8000dd6 <HexToInt+0x56>

08000e28 <delayMicro>:
* @retval None
*/

int delayMicro(uint32_t micros)
{
	  volatile uint32_t tick = 0;
 8000e28:	2300      	movs	r3, #0
{
 8000e2a:	b082      	sub	sp, #8

	  while (micros--)
 8000e2c:	3801      	subs	r0, #1
	  {
	    while (tick < 6)
	    {
	      tick++;
	    }
	    tick = 0;
 8000e2e:	9301      	str	r3, [sp, #4]
	  while (micros--)
 8000e30:	d205      	bcs.n	8000e3e <delayMicro+0x16>
	  }
	  return tick;
 8000e32:	9801      	ldr	r0, [sp, #4]
}
 8000e34:	b002      	add	sp, #8
 8000e36:	4770      	bx	lr
	      tick++;
 8000e38:	9a01      	ldr	r2, [sp, #4]
 8000e3a:	3201      	adds	r2, #1
 8000e3c:	9201      	str	r2, [sp, #4]
	    while (tick < 6)
 8000e3e:	9a01      	ldr	r2, [sp, #4]
 8000e40:	2a05      	cmp	r2, #5
 8000e42:	d9f9      	bls.n	8000e38 <delayMicro+0x10>
 8000e44:	e7f2      	b.n	8000e2c <delayMicro+0x4>

08000e46 <writeToFram>:

    return crc;
}

void writeToFram(uint16_t to, uint8_t* from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
 8000e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e4a:	469a      	mov	sl, r3
	uint8_t part;
	uint16_t shift=0;
	if (to%16!=0)
 8000e4c:	0703      	lsls	r3, r0, #28
{
 8000e4e:	4606      	mov	r6, r0
 8000e50:	4689      	mov	r9, r1
 8000e52:	4614      	mov	r4, r2
 8000e54:	b085      	sub	sp, #20
	if (to%16!=0)
 8000e56:	d001      	beq.n	8000e5c <writeToFram+0x16>
		Error_Handler();
 8000e58:	f003 f9de 	bl	8004218 <Error_Handler>
{
 8000e5c:	2500      	movs	r5, #0
	while(size)
	{
		uint8_t pageAdress = (to+shift)/256<<1;
		part=(size>16)?16:size;
		HAL_I2C_Mem_Write(hi2c, 0xA0|pageAdress, (to+shift)%256, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000e5e:	f04f 0b32 	mov.w	fp, #50	; 0x32
	while(size)
 8000e62:	b914      	cbnz	r4, 8000e6a <writeToFram+0x24>
		size-=part;
		shift+=part;
	}
}
 8000e64:	b005      	add	sp, #20
 8000e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		part=(size>16)?16:size;
 8000e6a:	2c10      	cmp	r4, #16
 8000e6c:	46a0      	mov	r8, r4
 8000e6e:	bf28      	it	cs
 8000e70:	f04f 0810 	movcs.w	r8, #16
		HAL_I2C_Mem_Write(hi2c, 0xA0|pageAdress, (to+shift)%256, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000e74:	19aa      	adds	r2, r5, r6
		uint8_t pageAdress = (to+shift)/256<<1;
 8000e76:	1211      	asrs	r1, r2, #8
 8000e78:	0049      	lsls	r1, r1, #1
		HAL_I2C_Mem_Write(hi2c, 0xA0|pageAdress, (to+shift)%256, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000e7a:	eb09 0305 	add.w	r3, r9, r5
 8000e7e:	fa1f f788 	uxth.w	r7, r8
 8000e82:	f061 015f 	orn	r1, r1, #95	; 0x5f
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	4650      	mov	r0, sl
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		size-=part;
 8000e96:	eba4 0408 	sub.w	r4, r4, r8
		shift+=part;
 8000e9a:	443d      	add	r5, r7
		HAL_I2C_Mem_Write(hi2c, 0xA0|pageAdress, (to+shift)%256, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000e9c:	f005 fb7c 	bl	8006598 <HAL_I2C_Mem_Write>
		size-=part;
 8000ea0:	b2e4      	uxtb	r4, r4
		shift+=part;
 8000ea2:	b2ad      	uxth	r5, r5
 8000ea4:	e7dd      	b.n	8000e62 <writeToFram+0x1c>

08000ea6 <readFromFram>:
* @param None
* @retval None
*/

void readFromFram(uint8_t* to, uint16_t from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
 8000ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eaa:	469a      	mov	sl, r3
	uint8_t part;
	uint16_t shift=0;
	if (from%16!=0)
 8000eac:	070b      	lsls	r3, r1, #28
{
 8000eae:	4681      	mov	r9, r0
 8000eb0:	460e      	mov	r6, r1
 8000eb2:	4614      	mov	r4, r2
 8000eb4:	b085      	sub	sp, #20
	if (from%16!=0)
 8000eb6:	d001      	beq.n	8000ebc <readFromFram+0x16>
		Error_Handler();
 8000eb8:	f003 f9ae 	bl	8004218 <Error_Handler>
{
 8000ebc:	2500      	movs	r5, #0
	while(size)
	{
		uint8_t pageAdress = (from+shift)/256<<1;
		part=(size>16)?16:size;
		HAL_I2C_Mem_Read(hi2c, 0xA0|pageAdress, (from+shift)%256, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000ebe:	f04f 0b32 	mov.w	fp, #50	; 0x32
	while(size)
 8000ec2:	b914      	cbnz	r4, 8000eca <readFromFram+0x24>
		size-=part;
		shift+=part;
	}
}
 8000ec4:	b005      	add	sp, #20
 8000ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		part=(size>16)?16:size;
 8000eca:	2c10      	cmp	r4, #16
 8000ecc:	46a0      	mov	r8, r4
 8000ece:	bf28      	it	cs
 8000ed0:	f04f 0810 	movcs.w	r8, #16
		HAL_I2C_Mem_Read(hi2c, 0xA0|pageAdress, (from+shift)%256, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000ed4:	19aa      	adds	r2, r5, r6
		uint8_t pageAdress = (from+shift)/256<<1;
 8000ed6:	1211      	asrs	r1, r2, #8
 8000ed8:	0049      	lsls	r1, r1, #1
		HAL_I2C_Mem_Read(hi2c, 0xA0|pageAdress, (from+shift)%256, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000eda:	eb09 0305 	add.w	r3, r9, r5
 8000ede:	fa1f f788 	uxth.w	r7, r8
 8000ee2:	f061 015f 	orn	r1, r1, #95	; 0x5f
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	4650      	mov	r0, sl
 8000eea:	2301      	movs	r3, #1
 8000eec:	e9cd 7b01 	strd	r7, fp, [sp, #4]
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
		size-=part;
 8000ef6:	eba4 0408 	sub.w	r4, r4, r8
		shift+=part;
 8000efa:	443d      	add	r5, r7
		HAL_I2C_Mem_Read(hi2c, 0xA0|pageAdress, (from+shift)%256, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000efc:	f005 fbdc 	bl	80066b8 <HAL_I2C_Mem_Read>
		size-=part;
 8000f00:	b2e4      	uxtb	r4, r4
		shift+=part;
 8000f02:	b2ad      	uxth	r5, r5
 8000f04:	e7dd      	b.n	8000ec2 <readFromFram+0x1c>
	...

08000f08 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write (int fd, char *ptr, int len)
{
 8000f08:	b510      	push	{r4, lr}
 8000f0a:	4614      	mov	r4, r2
	HAL_UART_Transmit (&huart1, (uint8_t*) ptr, len, 1000);
 8000f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f10:	b292      	uxth	r2, r2
 8000f12:	4802      	ldr	r0, [pc, #8]	; (8000f1c <_write+0x14>)
 8000f14:	f006 fe8e 	bl	8007c34 <HAL_UART_Transmit>
	return len;
}
 8000f18:	4620      	mov	r0, r4
 8000f1a:	bd10      	pop	{r4, pc}
 8000f1c:	20000c38 	.word	0x20000c38

08000f20 <eraseNodeData>:
	return ch;
}

void eraseNodeData ()
{
	for (int i = 0; i < MAX_NODES; ++i)
 8000f20:	2200      	movs	r2, #0
 8000f22:	4906      	ldr	r1, [pc, #24]	; (8000f3c <eraseNodeData+0x1c>)
		{
			nodeData[i].disarmRequest = 0;
			nodeData[i].disarmed = 0;
			nodeData[i].masked = 0;
 8000f24:	5c53      	ldrb	r3, [r2, r1]
 8000f26:	f023 030f 	bic.w	r3, r3, #15
 8000f2a:	5453      	strb	r3, [r2, r1]
	for (int i = 0; i < MAX_NODES; ++i)
 8000f2c:	3201      	adds	r2, #1
 8000f2e:	2a20      	cmp	r2, #32
 8000f30:	d1f8      	bne.n	8000f24 <eraseNodeData+0x4>
		}
	writeToFram (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000f32:	2000      	movs	r0, #0
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <eraseNodeData+0x20>)
 8000f36:	4901      	ldr	r1, [pc, #4]	; (8000f3c <eraseNodeData+0x1c>)
 8000f38:	f7ff bf85 	b.w	8000e46 <writeToFram>
 8000f3c:	200010a0 	.word	0x200010a0
 8000f40:	20000b18 	.word	0x20000b18

08000f44 <saveNodeData>:
}

void saveNodeData ()
{
	for (int i = 0; i < MAX_NODES; ++i)
 8000f44:	2200      	movs	r2, #0
{
 8000f46:	b410      	push	{r4}
 8000f48:	490e      	ldr	r1, [pc, #56]	; (8000f84 <saveNodeData+0x40>)
 8000f4a:	4c0f      	ldr	r4, [pc, #60]	; (8000f88 <saveNodeData+0x44>)
		{
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
			nodeData[i].disarmed = nodes[i].disarmed;
			nodeData[i].masked = nodes[i].masked;
 8000f4c:	7b4b      	ldrb	r3, [r1, #13]
 8000f4e:	7b08      	ldrb	r0, [r1, #12]
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	f000 0003 	and.w	r0, r0, #3
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	4303      	orrs	r3, r0
 8000f5c:	7b88      	ldrb	r0, [r1, #14]
 8000f5e:	3120      	adds	r1, #32
 8000f60:	00c0      	lsls	r0, r0, #3
 8000f62:	f000 0008 	and.w	r0, r0, #8
 8000f66:	4303      	orrs	r3, r0
 8000f68:	5d10      	ldrb	r0, [r2, r4]
 8000f6a:	f020 000f 	bic.w	r0, r0, #15
 8000f6e:	4303      	orrs	r3, r0
 8000f70:	5513      	strb	r3, [r2, r4]
	for (int i = 0; i < MAX_NODES; ++i)
 8000f72:	3201      	adds	r2, #1
 8000f74:	2a20      	cmp	r2, #32
 8000f76:	d1e9      	bne.n	8000f4c <saveNodeData+0x8>
		}
	writeToFram (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <saveNodeData+0x48>)
 8000f7c:	4902      	ldr	r1, [pc, #8]	; (8000f88 <saveNodeData+0x44>)
}
 8000f7e:	bc10      	pop	{r4}
	writeToFram (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000f80:	f7ff bf61 	b.w	8000e46 <writeToFram>
 8000f84:	20000ca0 	.word	0x20000ca0
 8000f88:	200010a0 	.word	0x200010a0
 8000f8c:	20000b18 	.word	0x20000b18

08000f90 <loadNodeData>:

void loadNodeData ()
{
	readFromFram ((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 8000f90:	2100      	movs	r1, #0
{
 8000f92:	b510      	push	{r4, lr}
	readFromFram ((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <loadNodeData+0x34>)
 8000f96:	2220      	movs	r2, #32
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <loadNodeData+0x38>)
 8000f9a:	f7ff ff84 	bl	8000ea6 <readFromFram>
	for (int i = 0; i < MAX_NODES; ++i)
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <loadNodeData+0x3c>)
		{
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8000fa2:	4c09      	ldr	r4, [pc, #36]	; (8000fc8 <loadNodeData+0x38>)
 8000fa4:	5c62      	ldrb	r2, [r4, r1]
	for (int i = 0; i < MAX_NODES; ++i)
 8000fa6:	3101      	adds	r1, #1
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8000fa8:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8000fac:	7398      	strb	r0, [r3, #14]
	for (int i = 0; i < MAX_NODES; ++i)
 8000fae:	2920      	cmp	r1, #32
			nodes[i].disarmed = nodeData[i].disarmed;
 8000fb0:	f3c2 0080 	ubfx	r0, r2, #2, #1
			nodes[i].masked = nodeData[i].masked;
 8000fb4:	f3c2 0201 	ubfx	r2, r2, #0, #2
			nodes[i].disarmed = nodeData[i].disarmed;
 8000fb8:	7358      	strb	r0, [r3, #13]
			nodes[i].masked = nodeData[i].masked;
 8000fba:	731a      	strb	r2, [r3, #12]
	for (int i = 0; i < MAX_NODES; ++i)
 8000fbc:	f103 0320 	add.w	r3, r3, #32
 8000fc0:	d1f0      	bne.n	8000fa4 <loadNodeData+0x14>
		}

}
 8000fc2:	bd10      	pop	{r4, pc}
 8000fc4:	20000b18 	.word	0x20000b18
 8000fc8:	200010a0 	.word	0x200010a0
 8000fcc:	20000ca0 	.word	0x20000ca0

08000fd0 <HAL_UART_RxCpltCallback>:
 * @brief Callback for UART interrupt
 * @param  *huart - uart handler
 * @retval None
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000fd0:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4905      	ldr	r1, [pc, #20]	; (8000fec <HAL_UART_RxCpltCallback+0x1c>)
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <HAL_UART_RxCpltCallback+0x20>)
 8000fd8:	f006 fff7 	bl	8007fca <HAL_UART_Receive_IT>
	lastUartConnect = HAL_GetTick ();
 8000fdc:	f004 fb50 	bl	8005680 <HAL_GetTick>
 8000fe0:	4b04      	ldr	r3, [pc, #16]	; (8000ff4 <HAL_UART_RxCpltCallback+0x24>)
 8000fe2:	6018      	str	r0, [r3, #0]
	readByte ();
}
 8000fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	readByte ();
 8000fe8:	f003 bf7a 	b.w	8004ee0 <readByte>
 8000fec:	20000bd0 	.word	0x20000bd0
 8000ff0:	20000c38 	.word	0x20000c38
 8000ff4:	20001898 	.word	0x20001898

08000ff8 <defaultSettings>:
 * @brief sets settings to default values
 * @param None
 * @retval None
 */
void defaultSettings ()
{
 8000ff8:	b538      	push	{r3, r4, r5, lr}
	settings.power = SX127X_POWER_20DBM;
	settings.sf = SX127X_LORA_SF_12;
	settings.preamble = 5;
	settings.superWarningDelay = SUPER_WARNING_DELAY;
	settings.syncWord = 0x1;
	settings.warningDelay = WARNING_DELAY;
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <defaultSettings+0x60>)
	settings.realFrequency = DEF_FREQUENCY;
 8000ffc:	4c17      	ldr	r4, [pc, #92]	; (800105c <defaultSettings+0x64>)
	settings.warningDelay = WARNING_DELAY;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <defaultSettings+0x68>)
	settings.realFrequency = DEF_FREQUENCY;
	settings.baseID = 1;
	nodeSettings.workInterval = 600;
 8001000:	f44f 7116 	mov.w	r1, #600	; 0x258
	settings.warningDelay = WARNING_DELAY;
 8001004:	e9c4 2300 	strd	r2, r3, [r4]
	settings.superWarningDelay = SUPER_WARNING_DELAY;
 8001008:	f503 2312 	add.w	r3, r3, #598016	; 0x92000
 800100c:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8001010:	60a3      	str	r3, [r4, #8]
	settings.preamble = 5;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <defaultSettings+0x6c>)
	settings.baseID = 1;
 8001014:	2201      	movs	r2, #1
	settings.preamble = 5;
 8001016:	60e3      	str	r3, [r4, #12]
	settings.cr = SX127X_CR_4_8;
 8001018:	f44f 7382 	mov.w	r3, #260	; 0x104
 800101c:	8223      	strh	r3, [r4, #16]
	settings.power = SX127X_POWER_20DBM;
 800101e:	2314      	movs	r3, #20
 8001020:	74a3      	strb	r3, [r4, #18]
	nodeSettings.workInterval = 600;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <defaultSettings+0x70>)
	nodeSettings.useLed = 1;
	sprintf (settings.SSID, "EXEcutor");
	sprintf (settings.WiFiPass, "executor");
	sprintf (settings.ServerPass, "12345");
 8001024:	4d11      	ldr	r5, [pc, #68]	; (800106c <defaultSettings+0x74>)
	nodeSettings.workInterval = 600;
 8001026:	6059      	str	r1, [r3, #4]
	sprintf (settings.SSID, "EXEcutor");
 8001028:	f104 0013 	add.w	r0, r4, #19
 800102c:	4910      	ldr	r1, [pc, #64]	; (8001070 <defaultSettings+0x78>)
	settings.baseID = 1;
 800102e:	6662      	str	r2, [r4, #100]	; 0x64
	nodeSettings.useLed = 1;
 8001030:	741a      	strb	r2, [r3, #16]
	sprintf (settings.SSID, "EXEcutor");
 8001032:	f007 f8d1 	bl	80081d8 <strcpy>
	sprintf (settings.WiFiPass, "executor");
 8001036:	490f      	ldr	r1, [pc, #60]	; (8001074 <defaultSettings+0x7c>)
 8001038:	f104 0023 	add.w	r0, r4, #35	; 0x23
	sprintf (settings.ServerPass, "12345");
 800103c:	3433      	adds	r4, #51	; 0x33
	sprintf (settings.WiFiPass, "executor");
 800103e:	f007 f8cb 	bl	80081d8 <strcpy>
	sprintf (settings.ServerPass, "12345");
 8001042:	4629      	mov	r1, r5
 8001044:	4620      	mov	r0, r4
 8001046:	f007 f8c7 	bl	80081d8 <strcpy>
	sprintf (settings.ServerPass, "12345");
 800104a:	4629      	mov	r1, r5
 800104c:	4620      	mov	r0, r4

}
 800104e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sprintf (settings.ServerPass, "12345");
 8001052:	f007 b8c1 	b.w	80081d8 <strcpy>
 8001056:	bf00      	nop
 8001058:	33c8d600 	.word	0x33c8d600
 800105c:	20000a80 	.word	0x20000a80
 8001060:	0009eb10 	.word	0x0009eb10
 8001064:	070c0005 	.word	0x070c0005
 8001068:	20000c7c 	.word	0x20000c7c
 800106c:	08009a00 	.word	0x08009a00
 8001070:	080099ee 	.word	0x080099ee
 8001074:	080099f7 	.word	0x080099f7

08001078 <clearStrings>:
 * @param None
 * @retval None
 */
void clearStrings ()
{
	memset (string, 0, sizeof(string));
 8001078:	f44f 7200 	mov.w	r2, #512	; 0x200
 800107c:	2100      	movs	r1, #0
 800107e:	4801      	ldr	r0, [pc, #4]	; (8001084 <clearStrings+0xc>)
 8001080:	f006 bff4 	b.w	800806c <memset>
 8001084:	20000170 	.word	0x20000170

08001088 <setCursor>:
}

void setCursor (char *string, int8_t pos)
{
	for (int i = 0; i < pos; i++)
 8001088:	2300      	movs	r3, #0
		string[i] = ' ';
 800108a:	2220      	movs	r2, #32
	for (int i = 0; i < pos; i++)
 800108c:	4299      	cmp	r1, r3
 800108e:	dc02      	bgt.n	8001096 <setCursor+0xe>
	string[pos] = '^';
 8001090:	235e      	movs	r3, #94	; 0x5e
 8001092:	5443      	strb	r3, [r0, r1]
}
 8001094:	4770      	bx	lr
		string[i] = ' ';
 8001096:	54c2      	strb	r2, [r0, r3]
	for (int i = 0; i < pos; i++)
 8001098:	3301      	adds	r3, #1
 800109a:	e7f7      	b.n	800108c <setCursor+0x4>

0800109c <updateLcd>:
 * @brief Writes string[0]..string[3] to all screens
 * @param None
 * @retval None
 */
void updateLcd ()
{
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	4d13      	ldr	r5, [pc, #76]	; (80010ec <updateLcd+0x50>)
	ssd1306_Clean ();
 80010a0:	f003 f986 	bl	80043b0 <ssd1306_Clean>
 80010a4:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 80010a6:	2400      	movs	r4, #0
		{
			ssd1306_GotoXY (0, i);
 80010a8:	4621      	mov	r1, r4
 80010aa:	2000      	movs	r0, #0
 80010ac:	f003 f924 	bl	80042f8 <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 80010b0:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 80010b2:	4630      	mov	r0, r6
 80010b4:	f003 f962 	bl	800437c <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 80010b8:	2c08      	cmp	r4, #8
 80010ba:	f106 0640 	add.w	r6, r6, #64	; 0x40
 80010be:	d1f3      	bne.n	80010a8 <updateLcd+0xc>
		}

	ssd1306_Update ();
 80010c0:	f003 f984 	bl	80043cc <ssd1306_Update>

	 UC1609_Clean ();

	 for (int i = 0; i < 8; i++)
 80010c4:	2400      	movs	r4, #0
	 UC1609_Clean ();
 80010c6:	f7ff fcf3 	bl	8000ab0 <UC1609_Clean>
	 {
	 UC1609_SetPos (0, i);
 80010ca:	b2e1      	uxtb	r1, r4
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fcb1 	bl	8000a34 <UC1609_SetPos>
	 for (int i = 0; i < 8; i++)
 80010d2:	3401      	adds	r4, #1
	 UC1609_PutString (string[i]);
 80010d4:	4628      	mov	r0, r5
 80010d6:	f7ff fd33 	bl	8000b40 <UC1609_PutString>
	 for (int i = 0; i < 8; i++)
 80010da:	2c08      	cmp	r4, #8
 80010dc:	f105 0540 	add.w	r5, r5, #64	; 0x40
 80010e0:	d1f3      	bne.n	80010ca <updateLcd+0x2e>
	 }
	 UC1609_UpdateScreen ();

}
 80010e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 UC1609_UpdateScreen ();
 80010e6:	f7ff bcb1 	b.w	8000a4c <UC1609_UpdateScreen>
 80010ea:	bf00      	nop
 80010ec:	20000170 	.word	0x20000170

080010f0 <settingsInitiate>:
 * @brief Initiates settings from settings structure to radio structure
 * @param None
 * @retval None
 */
void settingsInitiate ()
{
 80010f0:	b538      	push	{r3, r4, r5, lr}
	myRadio.sf = settings.sf;
 80010f2:	4d0c      	ldr	r5, [pc, #48]	; (8001124 <settingsInitiate+0x34>)
 80010f4:	4c0c      	ldr	r4, [pc, #48]	; (8001128 <settingsInitiate+0x38>)
 80010f6:	7bab      	ldrb	r3, [r5, #14]
	myRadio.bw = settings.bw;
	myRadio.cr = settings.cr;
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 80010f8:	6828      	ldr	r0, [r5, #0]
	myRadio.sf = settings.sf;
 80010fa:	7163      	strb	r3, [r4, #5]
	myRadio.bw = settings.bw;
 80010fc:	7beb      	ldrb	r3, [r5, #15]
 80010fe:	71a3      	strb	r3, [r4, #6]
	myRadio.cr = settings.cr;
 8001100:	7c2b      	ldrb	r3, [r5, #16]
 8001102:	71e3      	strb	r3, [r4, #7]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8001104:	f7ff f8e0 	bl	80002c8 <__aeabi_ui2f>
 8001108:	4908      	ldr	r1, [pc, #32]	; (800112c <settingsInitiate+0x3c>)
 800110a:	f7ff f9e9 	bl	80004e0 <__aeabi_fdiv>
 800110e:	f7ff fb1f 	bl	8000750 <__aeabi_f2uiz>
	myRadio.preamble = settings.preamble;
 8001112:	89ab      	ldrh	r3, [r5, #12]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8001114:	6020      	str	r0, [r4, #0]
	myRadio.preamble = settings.preamble;
 8001116:	81a3      	strh	r3, [r4, #12]
	myRadio.power = settings.power;
 8001118:	7cab      	ldrb	r3, [r5, #18]
 800111a:	7123      	strb	r3, [r4, #4]
	myRadio.syncWord = settings.syncWord;
 800111c:	7c6b      	ldrb	r3, [r5, #17]
 800111e:	73a3      	strb	r3, [r4, #14]
	myRadio.preamble = settings.preamble;
}
 8001120:	bd38      	pop	{r3, r4, r5, pc}
 8001122:	bf00      	nop
 8001124:	20000a80 	.word	0x20000a80
 8001128:	200009a0 	.word	0x200009a0
 800112c:	427423d7 	.word	0x427423d7

08001130 <isBaseSettingsValid>:

_Bool isBaseSettingsValid (baseSettings_t *s)
{
	if (s->realFrequency >= MIN_FREQUENCY && s->realFrequency <= MAX_FREQUENCY)
 8001130:	6801      	ldr	r1, [r0, #0]
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <isBaseSettingsValid+0x84>)
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <isBaseSettingsValid+0x88>)
 8001136:	440b      	add	r3, r1
 8001138:	4293      	cmp	r3, r2
{
 800113a:	b530      	push	{r4, r5, lr}
	if (s->realFrequency >= MIN_FREQUENCY && s->realFrequency <= MAX_FREQUENCY)
 800113c:	d838      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
		if (s->sf > 6 && s->sf < 13)
 800113e:	7b83      	ldrb	r3, [r0, #14]
 8001140:	3b07      	subs	r3, #7
 8001142:	2b05      	cmp	r3, #5
 8001144:	d834      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
			if (s->bw < 10)
 8001146:	7bc3      	ldrb	r3, [r0, #15]
 8001148:	2b09      	cmp	r3, #9
 800114a:	d831      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
				if (s->cr >= 1 && s->cr <= 4)
 800114c:	7c03      	ldrb	r3, [r0, #16]
 800114e:	3b01      	subs	r3, #1
 8001150:	2b03      	cmp	r3, #3
 8001152:	d82d      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
					if (s->preamble > 1 && s->preamble < 65535)
 8001154:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8001158:	8983      	ldrh	r3, [r0, #12]
 800115a:	3b02      	subs	r3, #2
 800115c:	b29b      	uxth	r3, r3
 800115e:	4293      	cmp	r3, r2
 8001160:	d826      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
						if (s->realFrequency > MIN_FREQUENCY && s->realFrequency < MAX_FREQUENCY)
 8001162:	4a16      	ldr	r2, [pc, #88]	; (80011bc <isBaseSettingsValid+0x8c>)
 8001164:	440a      	add	r2, r1
 8001166:	4916      	ldr	r1, [pc, #88]	; (80011c0 <isBaseSettingsValid+0x90>)
 8001168:	428a      	cmp	r2, r1
 800116a:	d221      	bcs.n	80011b0 <isBaseSettingsValid+0x80>
							if (s->syncWord != 0x34 && s->syncWord != 0x55 && s->syncWord != 0xAA)
 800116c:	7c42      	ldrb	r2, [r0, #17]
 800116e:	2a34      	cmp	r2, #52	; 0x34
 8001170:	d01e      	beq.n	80011b0 <isBaseSettingsValid+0x80>
 8001172:	2a55      	cmp	r2, #85	; 0x55
 8001174:	d01c      	beq.n	80011b0 <isBaseSettingsValid+0x80>
 8001176:	2aaa      	cmp	r2, #170	; 0xaa
 8001178:	d01a      	beq.n	80011b0 <isBaseSettingsValid+0x80>
								if (s->power <= 20 || s->power >= 10)
									if (s->warningDelay > MIN_WARNING_DELAY && s->warningDelay < MAX_WARNING_DELAY)
 800117a:	6845      	ldr	r5, [r0, #4]
 800117c:	4a11      	ldr	r2, [pc, #68]	; (80011c4 <isBaseSettingsValid+0x94>)
 800117e:	f5a5 416a 	sub.w	r1, r5, #59904	; 0xea00
 8001182:	3961      	subs	r1, #97	; 0x61
 8001184:	4291      	cmp	r1, r2
 8001186:	d813      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
										if (s->superWarningDelay > MIN_WARNING_DELAY && s->superWarningDelay < MAX_WARNING_DELAY)
 8001188:	6884      	ldr	r4, [r0, #8]
 800118a:	f5a4 416a 	sub.w	r1, r4, #59904	; 0xea00
 800118e:	3961      	subs	r1, #97	; 0x61
 8001190:	4291      	cmp	r1, r2
 8001192:	d80d      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
											if (s->superWarningDelay > s->warningDelay)
 8001194:	42a5      	cmp	r5, r4
 8001196:	d20b      	bcs.n	80011b0 <isBaseSettingsValid+0x80>
												if (s->preamble >= MIN_PREAMBLE && s->preamble <= MAX_PREAMBLE)
 8001198:	f240 32e6 	movw	r2, #998	; 0x3e6
 800119c:	4293      	cmp	r3, r2
 800119e:	d807      	bhi.n	80011b0 <isBaseSettingsValid+0x80>
													if (s->baseID > 0 && s->baseID < MAX_BASEID)
 80011a0:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <isBaseSettingsValid+0x98>)
 80011a4:	3801      	subs	r0, #1
 80011a6:	4298      	cmp	r0, r3
 80011a8:	bf8c      	ite	hi
 80011aa:	2000      	movhi	r0, #0
 80011ac:	2001      	movls	r0, #1
														return true;

	return false;
}
 80011ae:	bd30      	pop	{r4, r5, pc}
	return false;
 80011b0:	2000      	movs	r0, #0
 80011b2:	e7fc      	b.n	80011ae <isBaseSettingsValid+0x7e>
 80011b4:	f7c64980 	.word	0xf7c64980
 80011b8:	3351d140 	.word	0x3351d140
 80011bc:	f7c6497f 	.word	0xf7c6497f
 80011c0:	3351d13f 	.word	0x3351d13f
 80011c4:	0292439e 	.word	0x0292439e
 80011c8:	0098967d 	.word	0x0098967d

080011cc <isNodeSettingsValid>:

_Bool isNodeSettingsValid (nodeSettings_t *s)
{
	if (s->workInterval >= MIN_WORK_INTERVAL && s->workInterval <= MAX_WORK_INTERVAL)
 80011cc:	6843      	ldr	r3, [r0, #4]
		return true;

	return false;
}
 80011ce:	f64a 0084 	movw	r0, #43140	; 0xa884
	if (s->workInterval >= MIN_WORK_INTERVAL && s->workInterval <= MAX_WORK_INTERVAL)
 80011d2:	3b3c      	subs	r3, #60	; 0x3c
}
 80011d4:	4283      	cmp	r3, r0
 80011d6:	bf8c      	ite	hi
 80011d8:	2000      	movhi	r0, #0
 80011da:	2001      	movls	r0, #1
 80011dc:	4770      	bx	lr
	...

080011e0 <tryLoadSettings>:
 * @brief tries to load settings from page 63 flash memory
 * @param None
 * @retval 1 - success 0 - fail
 */
bool tryLoadSettings ()
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	b0a2      	sub	sp, #136	; 0x88
	bool ret = true;
	baseSettings_t loadedBaseSettings;
	nodeSettings_t loadedNodeSettings;
	readFromFram ((uint8_t*) &loadedBaseSettings, BASE_SETTINGS_SHIFT, sizeof(baseSettings_t), &hi2c1);
 80011e4:	2268      	movs	r2, #104	; 0x68
 80011e6:	2180      	movs	r1, #128	; 0x80
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <tryLoadSettings+0x58>)
 80011ea:	a808      	add	r0, sp, #32
 80011ec:	f7ff fe5b 	bl	8000ea6 <readFromFram>
	readFromFram ((uint8_t*) &loadedNodeSettings, NODE_SETTINGS_SHIFT, sizeof(nodeSettings_t), &hi2c1);
 80011f0:	221c      	movs	r2, #28
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <tryLoadSettings+0x58>)
 80011f8:	a801      	add	r0, sp, #4
 80011fa:	f7ff fe54 	bl	8000ea6 <readFromFram>
	if (isBaseSettingsValid (&loadedBaseSettings))
 80011fe:	a808      	add	r0, sp, #32
 8001200:	f7ff ff96 	bl	8001130 <isBaseSettingsValid>
 8001204:	4606      	mov	r6, r0
 8001206:	b120      	cbz	r0, 8001212 <tryLoadSettings+0x32>
		settings = loadedBaseSettings;
 8001208:	2268      	movs	r2, #104	; 0x68
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <tryLoadSettings+0x5c>)
 800120c:	a908      	add	r1, sp, #32
 800120e:	f006 ff1f 	bl	8008050 <memcpy>
	else
		ret = 0;
	if (isNodeSettingsValid (&loadedNodeSettings))
 8001212:	a801      	add	r0, sp, #4
 8001214:	f7ff ffda 	bl	80011cc <isNodeSettingsValid>
 8001218:	4604      	mov	r4, r0
 800121a:	b140      	cbz	r0, 800122e <tryLoadSettings+0x4e>
		nodeSettings = loadedNodeSettings;
 800121c:	4d08      	ldr	r5, [pc, #32]	; (8001240 <tryLoadSettings+0x60>)
 800121e:	ac01      	add	r4, sp, #4
 8001220:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001222:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001224:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001228:	4634      	mov	r4, r6
 800122a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	else
		ret = 0;
	settingsInitiate ();
 800122e:	f7ff ff5f 	bl	80010f0 <settingsInitiate>
	return ret;
}
 8001232:	4620      	mov	r0, r4
 8001234:	b022      	add	sp, #136	; 0x88
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	20000b18 	.word	0x20000b18
 800123c:	20000a80 	.word	0x20000a80
 8001240:	20000c7c 	.word	0x20000c7c

08001244 <saveSettings>:
 * @brief Saves current device settings from RAM to page 63 of internal flash
 * @param None
 * @retval None
 */
void saveSettings ()
{
 8001244:	b510      	push	{r4, lr}
	writeToFram (BASE_SETTINGS_SHIFT, (uint8_t*) &settings, sizeof(settings), &hi2c1);
 8001246:	4c09      	ldr	r4, [pc, #36]	; (800126c <saveSettings+0x28>)
 8001248:	2268      	movs	r2, #104	; 0x68
 800124a:	4623      	mov	r3, r4
 800124c:	2080      	movs	r0, #128	; 0x80
 800124e:	4908      	ldr	r1, [pc, #32]	; (8001270 <saveSettings+0x2c>)
 8001250:	f7ff fdf9 	bl	8000e46 <writeToFram>
	writeToFram (NODE_SETTINGS_SHIFT, (uint8_t*) &nodeSettings, sizeof(nodeSettings), &hi2c1);
 8001254:	4623      	mov	r3, r4
 8001256:	221c      	movs	r2, #28
 8001258:	f44f 7080 	mov.w	r0, #256	; 0x100
 800125c:	4905      	ldr	r1, [pc, #20]	; (8001274 <saveSettings+0x30>)
 800125e:	f7ff fdf2 	bl	8000e46 <writeToFram>
	settingsInitiate ();
}
 8001262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	settingsInitiate ();
 8001266:	f7ff bf43 	b.w	80010f0 <settingsInitiate>
 800126a:	bf00      	nop
 800126c:	20000b18 	.word	0x20000b18
 8001270:	20000a80 	.word	0x20000a80
 8001274:	20000c7c 	.word	0x20000c7c

08001278 <encoderPinChanged>:
	static uint8_t right;
	static uint8_t left;
	static uint16_t lastStatus;
	static uint8_t r = 0;
	static uint8_t l = 0;
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 8001278:	4b32      	ldr	r3, [pc, #200]	; (8001344 <encoderPinChanged+0xcc>)
{
 800127a:	b530      	push	{r4, r5, lr}
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a32      	ldr	r2, [pc, #200]	; (8001348 <encoderPinChanged+0xd0>)
 8001280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00

	switch (status)
 8001284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001288:	d04d      	beq.n	8001326 <encoderPinChanged+0xae>
 800128a:	d806      	bhi.n	800129a <encoderPinChanged+0x22>
 800128c:	2b00      	cmp	r3, #0
 800128e:	d03c      	beq.n	800130a <encoderPinChanged+0x92>
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d020      	beq.n	80012d8 <encoderPinChanged+0x60>
					left++;
					l = 1;
					r = 0;
				}
	}
	lastStatus = status;
 8001296:	8013      	strh	r3, [r2, #0]
}
 8001298:	bd30      	pop	{r4, r5, pc}
	switch (status)
 800129a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800129e:	d1fa      	bne.n	8001296 <encoderPinChanged+0x1e>
			if (right > 2)
 80012a0:	4c2a      	ldr	r4, [pc, #168]	; (800134c <encoderPinChanged+0xd4>)
 80012a2:	7820      	ldrb	r0, [r4, #0]
 80012a4:	2802      	cmp	r0, #2
				flag.encDec = 1;
 80012a6:	bf81      	itttt	hi
 80012a8:	4829      	ldrhi	r0, [pc, #164]	; (8001350 <encoderPinChanged+0xd8>)
 80012aa:	7801      	ldrbhi	r1, [r0, #0]
 80012ac:	f041 0102 	orrhi.w	r1, r1, #2
 80012b0:	7001      	strbhi	r1, [r0, #0]
			if (left > 2)
 80012b2:	4928      	ldr	r1, [pc, #160]	; (8001354 <encoderPinChanged+0xdc>)
 80012b4:	7808      	ldrb	r0, [r1, #0]
 80012b6:	2802      	cmp	r0, #2
				flag.encInc = 1;
 80012b8:	bf88      	it	hi
 80012ba:	4d25      	ldrhi	r5, [pc, #148]	; (8001350 <encoderPinChanged+0xd8>)
 80012bc:	4608      	mov	r0, r1
 80012be:	bf82      	ittt	hi
 80012c0:	7829      	ldrbhi	r1, [r5, #0]
 80012c2:	f041 0101 	orrhi.w	r1, r1, #1
 80012c6:	7029      	strbhi	r1, [r5, #0]
			right = 0;
 80012c8:	2100      	movs	r1, #0
			left = 0;
 80012ca:	7001      	strb	r1, [r0, #0]
			r = 0;
 80012cc:	4822      	ldr	r0, [pc, #136]	; (8001358 <encoderPinChanged+0xe0>)
			right = 0;
 80012ce:	7021      	strb	r1, [r4, #0]
			r = 0;
 80012d0:	7001      	strb	r1, [r0, #0]
			l = 0;
 80012d2:	4822      	ldr	r0, [pc, #136]	; (800135c <encoderPinChanged+0xe4>)
				right++;
 80012d4:	7001      	strb	r1, [r0, #0]
 80012d6:	e7de      	b.n	8001296 <encoderPinChanged+0x1e>
			if (lastStatus == 0xC00)
 80012d8:	8811      	ldrh	r1, [r2, #0]
 80012da:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 80012de:	d10a      	bne.n	80012f6 <encoderPinChanged+0x7e>
					right++;
 80012e0:	481a      	ldr	r0, [pc, #104]	; (800134c <encoderPinChanged+0xd4>)
 80012e2:	7801      	ldrb	r1, [r0, #0]
 80012e4:	3101      	adds	r1, #1
 80012e6:	7001      	strb	r1, [r0, #0]
					r = 1;
 80012e8:	2001      	movs	r0, #1
 80012ea:	491b      	ldr	r1, [pc, #108]	; (8001358 <encoderPinChanged+0xe0>)
 80012ec:	7008      	strb	r0, [r1, #0]
					l = 0;
 80012ee:	491b      	ldr	r1, [pc, #108]	; (800135c <encoderPinChanged+0xe4>)
					r = 0;
 80012f0:	2000      	movs	r0, #0
 80012f2:	7008      	strb	r0, [r1, #0]
 80012f4:	e7cf      	b.n	8001296 <encoderPinChanged+0x1e>
			if (lastStatus == 0 && l)
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d1cd      	bne.n	8001296 <encoderPinChanged+0x1e>
 80012fa:	4918      	ldr	r1, [pc, #96]	; (800135c <encoderPinChanged+0xe4>)
 80012fc:	7809      	ldrb	r1, [r1, #0]
 80012fe:	2900      	cmp	r1, #0
 8001300:	d0c9      	beq.n	8001296 <encoderPinChanged+0x1e>
				left++;
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <encoderPinChanged+0xdc>)
				right++;
 8001304:	7801      	ldrb	r1, [r0, #0]
 8001306:	3101      	adds	r1, #1
 8001308:	e7e4      	b.n	80012d4 <encoderPinChanged+0x5c>
			if (lastStatus == 0x400 && r)
 800130a:	8811      	ldrh	r1, [r2, #0]
 800130c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001310:	d105      	bne.n	800131e <encoderPinChanged+0xa6>
 8001312:	4911      	ldr	r1, [pc, #68]	; (8001358 <encoderPinChanged+0xe0>)
 8001314:	7809      	ldrb	r1, [r1, #0]
 8001316:	2900      	cmp	r1, #0
 8001318:	d0bd      	beq.n	8001296 <encoderPinChanged+0x1e>
				right++;
 800131a:	480c      	ldr	r0, [pc, #48]	; (800134c <encoderPinChanged+0xd4>)
 800131c:	e7f2      	b.n	8001304 <encoderPinChanged+0x8c>
			if (lastStatus == 0x800 && l)
 800131e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001322:	d0ea      	beq.n	80012fa <encoderPinChanged+0x82>
 8001324:	e7b7      	b.n	8001296 <encoderPinChanged+0x1e>
			if ((lastStatus == 0x000) && r)
 8001326:	8811      	ldrh	r1, [r2, #0]
 8001328:	2900      	cmp	r1, #0
 800132a:	d0f2      	beq.n	8001312 <encoderPinChanged+0x9a>
			if (lastStatus == 0xC00)
 800132c:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8001330:	d1b1      	bne.n	8001296 <encoderPinChanged+0x1e>
					left++;
 8001332:	4808      	ldr	r0, [pc, #32]	; (8001354 <encoderPinChanged+0xdc>)
 8001334:	7801      	ldrb	r1, [r0, #0]
 8001336:	3101      	adds	r1, #1
 8001338:	7001      	strb	r1, [r0, #0]
					l = 1;
 800133a:	2001      	movs	r0, #1
 800133c:	4907      	ldr	r1, [pc, #28]	; (800135c <encoderPinChanged+0xe4>)
 800133e:	7008      	strb	r0, [r1, #0]
					r = 0;
 8001340:	4905      	ldr	r1, [pc, #20]	; (8001358 <encoderPinChanged+0xe0>)
 8001342:	e7d5      	b.n	80012f0 <encoderPinChanged+0x78>
 8001344:	40010c08 	.word	0x40010c08
 8001348:	20000134 	.word	0x20000134
 800134c:	20000169 	.word	0x20000169
 8001350:	20000b84 	.word	0x20000b84
 8001354:	2000014e 	.word	0x2000014e
 8001358:	20000157 	.word	0x20000157
 800135c:	20000126 	.word	0x20000126

08001360 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin)
 8001360:	2804      	cmp	r0, #4
{
 8001362:	b510      	push	{r4, lr}
 8001364:	4604      	mov	r4, r0
	switch (GPIO_Pin)
 8001366:	d01d      	beq.n	80013a4 <HAL_GPIO_EXTI_Callback+0x44>
 8001368:	d802      	bhi.n	8001370 <HAL_GPIO_EXTI_Callback+0x10>
 800136a:	2802      	cmp	r0, #2
 800136c:	d00a      	beq.n	8001384 <HAL_GPIO_EXTI_Callback+0x24>
}
 800136e:	bd10      	pop	{r4, pc}
	switch (GPIO_Pin)
 8001370:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8001374:	d002      	beq.n	800137c <HAL_GPIO_EXTI_Callback+0x1c>
 8001376:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800137a:	d1f8      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0xe>
}
 800137c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			encoderPinChanged ();
 8001380:	f7ff bf7a 	b.w	8001278 <encoderPinChanged>
			delayMicro (20000);
 8001384:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001388:	f7ff fd4e 	bl	8000e28 <delayMicro>
			if (HAL_GPIO_ReadPin (B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 800138c:	4621      	mov	r1, r4
 800138e:	480d      	ldr	r0, [pc, #52]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x64>)
 8001390:	f004 fe66 	bl	8006060 <HAL_GPIO_ReadPin>
 8001394:	2800      	cmp	r0, #0
 8001396:	d1ea      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0xe>
				flag.encOk = 1;
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x68>)
 800139a:	7813      	ldrb	r3, [r2, #0]
 800139c:	f043 0304 	orr.w	r3, r3, #4
				flag.back = 1;
 80013a0:	7013      	strb	r3, [r2, #0]
 80013a2:	e7e4      	b.n	800136e <HAL_GPIO_EXTI_Callback+0xe>
			delayMicro (20000);
 80013a4:	f644 6020 	movw	r0, #20000	; 0x4e20
 80013a8:	f7ff fd3e 	bl	8000e28 <delayMicro>
			if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80013ac:	4621      	mov	r1, r4
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <HAL_GPIO_EXTI_Callback+0x64>)
 80013b0:	f004 fe56 	bl	8006060 <HAL_GPIO_ReadPin>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d1da      	bne.n	800136e <HAL_GPIO_EXTI_Callback+0xe>
				flag.back = 1;
 80013b8:	4a03      	ldr	r2, [pc, #12]	; (80013c8 <HAL_GPIO_EXTI_Callback+0x68>)
 80013ba:	7813      	ldrb	r3, [r2, #0]
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	e7ee      	b.n	80013a0 <HAL_GPIO_EXTI_Callback+0x40>
 80013c2:	bf00      	nop
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	20000b84 	.word	0x20000b84

080013cc <nextNodeAwaited>:

uint8_t nextNodeAwaited ()
{
 80013cc:	b538      	push	{r3, r4, r5, lr}
	uint8_t ret = 255;
	int32_t minDelay = 0x40000000;
	uint32_t tick = HAL_GetTick ();
 80013ce:	f004 f957 	bl	8005680 <HAL_GetTick>
	int32_t minDelay = 0x40000000;
 80013d2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
	uint32_t tick = HAL_GetTick ();
 80013d6:	4604      	mov	r4, r0
	for (int i = 0; i < MAX_NODES; i++)
 80013d8:	2300      	movs	r3, #0
	uint8_t ret = 255;
 80013da:	20ff      	movs	r0, #255	; 0xff
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <nextNodeAwaited+0x30>)
		{
			if (nodes[i].activated && ((long) nodes[i].NextMessageTick - (long) tick) < minDelay)
 80013de:	7c51      	ldrb	r1, [r2, #17]
 80013e0:	b129      	cbz	r1, 80013ee <nextNodeAwaited+0x22>
 80013e2:	6851      	ldr	r1, [r2, #4]
 80013e4:	1b09      	subs	r1, r1, r4
 80013e6:	42a9      	cmp	r1, r5
				{
					ret = i;
 80013e8:	bfbc      	itt	lt
 80013ea:	460d      	movlt	r5, r1
 80013ec:	b2d8      	uxtblt	r0, r3
	for (int i = 0; i < MAX_NODES; i++)
 80013ee:	3301      	adds	r3, #1
 80013f0:	2b20      	cmp	r3, #32
 80013f2:	f102 0220 	add.w	r2, r2, #32
 80013f6:	d1f2      	bne.n	80013de <nextNodeAwaited+0x12>
					minDelay = nodes[i].NextMessageTick - tick;
				}
		}
	return ret;
}
 80013f8:	bd38      	pop	{r3, r4, r5, pc}
 80013fa:	bf00      	nop
 80013fc:	20000ca0 	.word	0x20000ca0

08001400 <calcDelay>:

void calcDelay (uint8_t nodeNum)
{
 8001400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001402:	4606      	mov	r6, r0
	uint32_t maxDelay = 0;

	uint16_t delay = 0;

	uint32_t tick = HAL_GetTick ();
 8001404:	f004 f93c 	bl	8005680 <HAL_GetTick>

	for (int i = 0; i < MAX_NODES; i++)
 8001408:	2300      	movs	r3, #0
 800140a:	4918      	ldr	r1, [pc, #96]	; (800146c <calcDelay+0x6c>)
	uint32_t maxDelay = 0;
 800140c:	461a      	mov	r2, r3
 800140e:	460d      	mov	r5, r1
		{
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 8001410:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 8001414:	7c4c      	ldrb	r4, [r1, #17]
 8001416:	b164      	cbz	r4, 8001432 <calcDelay+0x32>
 8001418:	fb07 fc02 	mul.w	ip, r7, r2
 800141c:	684c      	ldr	r4, [r1, #4]
 800141e:	1a24      	subs	r4, r4, r0
 8001420:	4564      	cmp	r4, ip
 8001422:	d906      	bls.n	8001432 <calcDelay+0x32>
 8001424:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8001428:	d203      	bcs.n	8001432 <calcDelay+0x32>
					&& (i != nodeNum))
 800142a:	429e      	cmp	r6, r3
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 800142c:	bf18      	it	ne
 800142e:	fbb4 f2f7 	udivne	r2, r4, r7
	for (int i = 0; i < MAX_NODES; i++)
 8001432:	3301      	adds	r3, #1
 8001434:	2b20      	cmp	r3, #32
 8001436:	f101 0120 	add.w	r1, r1, #32
 800143a:	d1eb      	bne.n	8001414 <calcDelay+0x14>
		}

	if (maxDelay > (nodeSettings.workInterval - SAFE_INTERVAL))
 800143c:	4b0c      	ldr	r3, [pc, #48]	; (8001470 <calcDelay+0x70>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f1a3 0108 	sub.w	r1, r3, #8
 8001444:	4291      	cmp	r1, r2
		delay = maxDelay + SAFE_INTERVAL;
	else
		delay = nodeSettings.workInterval;
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 8001446:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		delay = maxDelay + SAFE_INTERVAL;
 800144a:	bf38      	it	cc
 800144c:	f102 0308 	addcc.w	r3, r2, #8
		delay = nodeSettings.workInterval;
 8001450:	b29b      	uxth	r3, r3
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 8001452:	fb01 0003 	mla	r0, r1, r3, r0
 8001456:	eb05 1246 	add.w	r2, r5, r6, lsl #5
 800145a:	6050      	str	r0, [r2, #4]
	nodes[nodeNum].delay = delay;
 800145c:	8113      	strh	r3, [r2, #8]
	absoluteMaxDelay = absoluteMaxDelay < delay ? delay : absoluteMaxDelay;
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <calcDelay+0x74>)
 8001460:	6811      	ldr	r1, [r2, #0]
 8001462:	4299      	cmp	r1, r3
 8001464:	bf2c      	ite	cs
 8001466:	6011      	strcs	r1, [r2, #0]
 8001468:	6013      	strcc	r3, [r2, #0]

}
 800146a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800146c:	20000ca0 	.word	0x20000ca0
 8001470:	20000c7c 	.word	0x20000c7c
 8001474:	20000114 	.word	0x20000114

08001478 <handleMessage>:
 * @brief Received radio message handler
 * @param message length
 * @retval None
 */
void handleMessage (uint8_t len)
{
 8001478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t nodeNum = rxMes->adr;
 800147c:	4c90      	ldr	r4, [pc, #576]	; (80016c0 <handleMessage+0x248>)
	receivedMesCnt++;
 800147e:	4a91      	ldr	r2, [pc, #580]	; (80016c4 <handleMessage+0x24c>)
	uint8_t nodeNum = rxMes->adr;
 8001480:	6823      	ldr	r3, [r4, #0]
{
 8001482:	b0df      	sub	sp, #380	; 0x17c
	uint8_t nodeNum = rxMes->adr;
 8001484:	781d      	ldrb	r5, [r3, #0]
	receivedMesCnt++;
 8001486:	6813      	ldr	r3, [r2, #0]
	uint8_t nodeNum = rxMes->adr;
 8001488:	f3c5 08c4 	ubfx	r8, r5, #3, #5
	receivedMesCnt++;
 800148c:	3301      	adds	r3, #1
 800148e:	6013      	str	r3, [r2, #0]
	clearStrings ();
 8001490:	f7ff fdf2 	bl	8001078 <clearStrings>
	if (rxMes->uplink == 0)
 8001494:	6823      	ldr	r3, [r4, #0]
 8001496:	46a2      	mov	sl, r4
 8001498:	781b      	ldrb	r3, [r3, #0]
	uint8_t nodeNum = rxMes->adr;
 800149a:	08ed      	lsrs	r5, r5, #3
	if (rxMes->uplink == 0)
 800149c:	f013 0f01 	tst.w	r3, #1
 80014a0:	d105      	bne.n	80014ae <handleMessage+0x36>
		{
			printf ("Received downlink message!\n");
 80014a2:	4889      	ldr	r0, [pc, #548]	; (80016c8 <handleMessage+0x250>)
			return;
		}
	if (myRadio.badCrc == 1)
		{
			printf ("Bad CRC in received message!\n");
 80014a4:	f006 fe70 	bl	8008188 <puts>
			nodes[nodeNum].NetAlarm = ALARM_OFF;
		}

	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));

}
 80014a8:	b05f      	add	sp, #380	; 0x17c
 80014aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (myRadio.badCrc == 1)
 80014ae:	4b87      	ldr	r3, [pc, #540]	; (80016cc <handleMessage+0x254>)
 80014b0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80014b4:	b10b      	cbz	r3, 80014ba <handleMessage+0x42>
			printf ("Bad CRC in received message!\n");
 80014b6:	4886      	ldr	r0, [pc, #536]	; (80016d0 <handleMessage+0x258>)
 80014b8:	e7f4      	b.n	80014a4 <handleMessage+0x2c>
	receivedMesCntSuc++;
 80014ba:	4a86      	ldr	r2, [pc, #536]	; (80016d4 <handleMessage+0x25c>)
	if (nodes[nodeNum].activated == 0)
 80014bc:	4c86      	ldr	r4, [pc, #536]	; (80016d8 <handleMessage+0x260>)
	receivedMesCntSuc++;
 80014be:	6813      	ldr	r3, [r2, #0]
	if (nodes[nodeNum].activated == 0)
 80014c0:	016f      	lsls	r7, r5, #5
	receivedMesCntSuc++;
 80014c2:	3301      	adds	r3, #1
 80014c4:	6013      	str	r3, [r2, #0]
	if (nodes[nodeNum].activated == 0)
 80014c6:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 80014ca:	7c5a      	ldrb	r2, [r3, #17]
 80014cc:	b91a      	cbnz	r2, 80014d6 <handleMessage+0x5e>
			nodes[nodeNum].activated = 1;
 80014ce:	2201      	movs	r2, #1
 80014d0:	745a      	strb	r2, [r3, #17]
			saveNodeData ();
 80014d2:	f7ff fd37 	bl	8000f44 <saveNodeData>
	nodes[nodeNum].disarmed = rxMes->disarm;
 80014d6:	f8da 3000 	ldr.w	r3, [sl]
 80014da:	19e6      	adds	r6, r4, r7
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014e2:	7373      	strb	r3, [r6, #13]
	nodes[nodeNum].lastContact = HAL_GetTick ();
 80014e4:	f004 f8cc 	bl	8005680 <HAL_GetTick>
	nodes[nodeNum].opened = rxMes->opened;
 80014e8:	f8da 9000 	ldr.w	r9, [sl]
	nodes[nodeNum].lastContact = HAL_GetTick ();
 80014ec:	51e0      	str	r0, [r4, r7]
	nodes[nodeNum].opened = rxMes->opened;
 80014ee:	f899 3001 	ldrb.w	r3, [r9, #1]
 80014f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80014f6:	73f3      	strb	r3, [r6, #15]
	nodes[nodeNum].powered = rxMes->powered;
 80014f8:	f899 3001 	ldrb.w	r3, [r9, #1]
 80014fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001500:	7433      	strb	r3, [r6, #16]
	nodes[nodeNum].voltage = 1.9F + rxMes->codedVoltage / 10.0F;
 8001502:	f899 0001 	ldrb.w	r0, [r9, #1]
 8001506:	08c0      	lsrs	r0, r0, #3
 8001508:	f7fe fee2 	bl	80002d0 <__aeabi_i2f>
 800150c:	4973      	ldr	r1, [pc, #460]	; (80016dc <handleMessage+0x264>)
 800150e:	f7fe ffe7 	bl	80004e0 <__aeabi_fdiv>
 8001512:	4973      	ldr	r1, [pc, #460]	; (80016e0 <handleMessage+0x268>)
 8001514:	f7fe fe28 	bl	8000168 <__addsf3>
 8001518:	6170      	str	r0, [r6, #20]
	nodes[nodeNum].temperature = rxMes->codedTemperature / 2.0F - 40.0F;
 800151a:	f899 0002 	ldrb.w	r0, [r9, #2]
 800151e:	f7fe fed7 	bl	80002d0 <__aeabi_i2f>
 8001522:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001526:	f7fe ff27 	bl	8000378 <__aeabi_fmul>
 800152a:	496e      	ldr	r1, [pc, #440]	; (80016e4 <handleMessage+0x26c>)
 800152c:	f7fe fe1a 	bl	8000164 <__aeabi_fsub>
 8001530:	61f0      	str	r0, [r6, #28]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack (&myRadio);
 8001532:	4866      	ldr	r0, [pc, #408]	; (80016cc <handleMessage+0x254>)
 8001534:	f003 fbec 	bl	8004d10 <SX127X_RSSI_Pack>
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 8001538:	7b31      	ldrb	r1, [r6, #12]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack (&myRadio);
 800153a:	8170      	strh	r0, [r6, #10]
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 800153c:	07ca      	lsls	r2, r1, #31
 800153e:	d40a      	bmi.n	8001556 <handleMessage+0xde>
 8001540:	7bf3      	ldrb	r3, [r6, #15]
 8001542:	b143      	cbz	r3, 8001556 <handleMessage+0xde>
			nodes[nodeNum].NetAlarm |= ALARM_DOOR;
 8001544:	f107 0210 	add.w	r2, r7, #16
 8001548:	4422      	add	r2, r4
			nodes[nodeNum].alarm |= ALARM_DOOR;
 800154a:	8853      	ldrh	r3, [r2, #2]
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	8053      	strh	r3, [r2, #2]
	if ((nodes[nodeNum].masked & MASK_POWER) == 0 && !nodes[nodeNum].powered)
 8001556:	078b      	lsls	r3, r1, #30
 8001558:	d40b      	bmi.n	8001572 <handleMessage+0xfa>
 800155a:	19e3      	adds	r3, r4, r7
 800155c:	7c1b      	ldrb	r3, [r3, #16]
 800155e:	b943      	cbnz	r3, 8001572 <handleMessage+0xfa>
			nodes[nodeNum].NetAlarm |= ALARM_POWER;
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	4422      	add	r2, r4
			nodes[nodeNum].alarm |= ALARM_POWER;
 8001566:	8853      	ldrh	r3, [r2, #2]
 8001568:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156c:	f043 0302 	orr.w	r3, r3, #2
 8001570:	8053      	strh	r3, [r2, #2]
	flag.lcdRefreshRequest = 1;
 8001572:	4a5d      	ldr	r2, [pc, #372]	; (80016e8 <handleMessage+0x270>)
	lastMessageFrom = nodeNum;
 8001574:	4b5d      	ldr	r3, [pc, #372]	; (80016ec <handleMessage+0x274>)
	calcDelay (nodeNum);
 8001576:	4628      	mov	r0, r5
	lastMessageFrom = nodeNum;
 8001578:	f883 8000 	strb.w	r8, [r3]
	flag.lcdRefreshRequest = 1;
 800157c:	7853      	ldrb	r3, [r2, #1]
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 800157e:	443c      	add	r4, r7
	flag.lcdRefreshRequest = 1;
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	7053      	strb	r3, [r2, #1]
	calcDelay (nodeNum);
 8001586:	f7ff ff3b 	bl	8001400 <calcDelay>
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 800158a:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <handleMessage+0x278>)
 800158c:	8922      	ldrh	r2, [r4, #8]
 800158e:	6819      	ldr	r1, [r3, #0]
	txMes->uplink = 0;
 8001590:	00ed      	lsls	r5, r5, #3
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 8001592:	708a      	strb	r2, [r1, #2]
	txMes->disarm = nodes[nodeNum].disarmRequest;
 8001594:	7ba3      	ldrb	r3, [r4, #14]
	txMes->codedDelayMSB = (nodes[nodeNum].delay >> 8) & 0x7F;
 8001596:	0a12      	lsrs	r2, r2, #8
	txMes->disarm = nodes[nodeNum].disarmRequest;
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80015a0:	704b      	strb	r3, [r1, #1]
	txMes->uplink = 0;
 80015a2:	700d      	strb	r5, [r1, #0]
	HAL_Delay (2);
 80015a4:	2002      	movs	r0, #2
	if (netHandler.online)
 80015a6:	4d53      	ldr	r5, [pc, #332]	; (80016f4 <handleMessage+0x27c>)
	HAL_Delay (2);
 80015a8:	f004 f870 	bl	800568c <HAL_Delay>
	SX127X_transmitAsync (&myRadio, 3);
 80015ac:	2103      	movs	r1, #3
 80015ae:	4847      	ldr	r0, [pc, #284]	; (80016cc <handleMessage+0x254>)
 80015b0:	f003 fb90 	bl	8004cd4 <SX127X_transmitAsync>
	if (netHandler.online)
 80015b4:	78eb      	ldrb	r3, [r5, #3]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d07a      	beq.n	80016b0 <handleMessage+0x238>
			sprintf (DAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_DOOR ? "&DA=true" : "");
 80015ba:	7ce7      	ldrb	r7, [r4, #19]
 80015bc:	4e4e      	ldr	r6, [pc, #312]	; (80016f8 <handleMessage+0x280>)
 80015be:	f017 0f01 	tst.w	r7, #1
 80015c2:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 80015c6:	494d      	ldr	r1, [pc, #308]	; (80016fc <handleMessage+0x284>)
 80015c8:	4640      	mov	r0, r8
 80015ca:	bf08      	it	eq
 80015cc:	4631      	moveq	r1, r6
 80015ce:	f006 fe03 	bl	80081d8 <strcpy>
			sprintf (PAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_POWER ? "&PA=true" : "");
 80015d2:	f017 0f02 	tst.w	r7, #2
			sprintf (Vstr, "&V=%d.%d", (19 + rxMes->codedVoltage) / 10, (19 + rxMes->codedVoltage) % 10);
 80015d6:	f04f 070a 	mov.w	r7, #10
			sprintf (PAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_POWER ? "&PA=true" : "");
 80015da:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 80015de:	4948      	ldr	r1, [pc, #288]	; (8001700 <handleMessage+0x288>)
 80015e0:	4648      	mov	r0, r9
 80015e2:	bf08      	it	eq
 80015e4:	4631      	moveq	r1, r6
 80015e6:	f006 fdf7 	bl	80081d8 <strcpy>
			sprintf (Vstr, "&V=%d.%d", (19 + rxMes->codedVoltage) / 10, (19 + rxMes->codedVoltage) % 10);
 80015ea:	f8da 3000 	ldr.w	r3, [sl]
 80015ee:	ae0e      	add	r6, sp, #56	; 0x38
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	4944      	ldr	r1, [pc, #272]	; (8001704 <handleMessage+0x28c>)
 80015f4:	08db      	lsrs	r3, r3, #3
 80015f6:	3313      	adds	r3, #19
 80015f8:	fbb3 f2f7 	udiv	r2, r3, r7
 80015fc:	4630      	mov	r0, r6
 80015fe:	fb07 3312 	mls	r3, r7, r2, r3
 8001602:	f006 fdc9 	bl	8008198 <siprintf>
			sprintf (Tstr, "&T=%d.%d", (int) nodes[nodeNum].temperature, ((int) (nodes[nodeNum].temperature * 10.0f)) % 10);
 8001606:	69e2      	ldr	r2, [r4, #28]
 8001608:	4934      	ldr	r1, [pc, #208]	; (80016dc <handleMessage+0x264>)
 800160a:	4610      	mov	r0, r2
 800160c:	920d      	str	r2, [sp, #52]	; 0x34
 800160e:	f7fe feb3 	bl	8000378 <__aeabi_fmul>
 8001612:	f7ff f877 	bl	8000704 <__aeabi_f2iz>
 8001616:	fb90 fbf7 	sdiv	fp, r0, r7
 800161a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800161c:	fb0b 0b17 	mls	fp, fp, r7, r0
 8001620:	4610      	mov	r0, r2
 8001622:	f7ff f86f 	bl	8000704 <__aeabi_f2iz>
 8001626:	af12      	add	r7, sp, #72	; 0x48
 8001628:	465b      	mov	r3, fp
 800162a:	4602      	mov	r2, r0
 800162c:	4936      	ldr	r1, [pc, #216]	; (8001708 <handleMessage+0x290>)
 800162e:	4638      	mov	r0, r7
 8001630:	f006 fdb2 	bl	8008198 <siprintf>
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 8001634:	f8da 1000 	ldr.w	r1, [sl]
 8001638:	4834      	ldr	r0, [pc, #208]	; (800170c <handleMessage+0x294>)
								settings.ServerPass, rxMes->opened ? "true" : "false", rxMes->powered ? "true" : "false", rxMes->disarm ? "true" : "false",
 800163a:	f891 c001 	ldrb.w	ip, [r1, #1]
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 800163e:	780b      	ldrb	r3, [r1, #0]
 8001640:	4933      	ldr	r1, [pc, #204]	; (8001710 <handleMessage+0x298>)
 8001642:	f01c 0f02 	tst.w	ip, #2
 8001646:	930d      	str	r3, [sp, #52]	; 0x34
 8001648:	bf14      	ite	ne
 800164a:	460b      	movne	r3, r1
 800164c:	4603      	moveq	r3, r0
 800164e:	f01c 0f04 	tst.w	ip, #4
 8001652:	bf14      	ite	ne
 8001654:	468e      	movne	lr, r1
 8001656:	4686      	moveq	lr, r0
 8001658:	f01c 0f01 	tst.w	ip, #1
								nodes[nodeNum].masked & MASK_DOOR ? "true" : "false", nodes[nodeNum].masked & MASK_POWER ? "true" : "false", Vstr, Tstr, DAstr,
 800165c:	f894 c00c 	ldrb.w	ip, [r4, #12]
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 8001660:	bf14      	ite	ne
 8001662:	468a      	movne	sl, r1
 8001664:	4682      	moveq	sl, r0
 8001666:	f01c 0f01 	tst.w	ip, #1
 800166a:	bf14      	ite	ne
 800166c:	468b      	movne	fp, r1
 800166e:	4683      	moveq	fp, r0
 8001670:	f01c 0f02 	tst.w	ip, #2
 8001674:	bf08      	it	eq
 8001676:	4601      	moveq	r1, r0
 8001678:	4a26      	ldr	r2, [pc, #152]	; (8001714 <handleMessage+0x29c>)
 800167a:	e9cd b105 	strd	fp, r1, [sp, #20]
 800167e:	e9cd ea03 	strd	lr, sl, [sp, #12]
 8001682:	e9cd 8909 	strd	r8, r9, [sp, #36]	; 0x24
 8001686:	e9cd 6707 	strd	r6, r7, [sp, #28]
 800168a:	f102 0133 	add.w	r1, r2, #51	; 0x33
 800168e:	9101      	str	r1, [sp, #4]
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8001694:	4920      	ldr	r1, [pc, #128]	; (8001718 <handleMessage+0x2a0>)
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800169a:	3243      	adds	r2, #67	; 0x43
 800169c:	08db      	lsrs	r3, r3, #3
 800169e:	a81e      	add	r0, sp, #120	; 0x78
 80016a0:	f006 fd7a 	bl	8008198 <siprintf>
			NetSendAsync (&netHandler, message);
 80016a4:	4628      	mov	r0, r5
 80016a6:	a91e      	add	r1, sp, #120	; 0x78
 80016a8:	f7ff f8aa 	bl	8000800 <NetSendAsync>
			nodes[nodeNum].NetAlarm = ALARM_OFF;
 80016ac:	2300      	movs	r3, #0
 80016ae:	74e3      	strb	r3, [r4, #19]
	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 80016b0:	2220      	movs	r2, #32
 80016b2:	2100      	movs	r1, #0
 80016b4:	4819      	ldr	r0, [pc, #100]	; (800171c <handleMessage+0x2a4>)
}
 80016b6:	b05f      	add	sp, #380	; 0x17c
 80016b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 80016bc:	f006 bcd6 	b.w	800806c <memset>
 80016c0:	20000040 	.word	0x20000040
 80016c4:	2000015c 	.word	0x2000015c
 80016c8:	08009a1e 	.word	0x08009a1e
 80016cc:	200009a0 	.word	0x200009a0
 80016d0:	08009a39 	.word	0x08009a39
 80016d4:	20000160 	.word	0x20000160
 80016d8:	20000ca0 	.word	0x20000ca0
 80016dc:	41200000 	.word	0x41200000
 80016e0:	3ff33333 	.word	0x3ff33333
 80016e4:	42200000 	.word	0x42200000
 80016e8:	20000b84 	.word	0x20000b84
 80016ec:	20000028 	.word	0x20000028
 80016f0:	20000044 	.word	0x20000044
 80016f4:	20001164 	.word	0x20001164
 80016f8:	0800a5ca 	.word	0x0800a5ca
 80016fc:	08009a06 	.word	0x08009a06
 8001700:	08009a0f 	.word	0x08009a0f
 8001704:	08009a56 	.word	0x08009a56
 8001708:	08009a5f 	.word	0x08009a5f
 800170c:	08009a18 	.word	0x08009a18
 8001710:	08009a0a 	.word	0x08009a0a
 8001714:	20000a80 	.word	0x20000a80
 8001718:	08009a68 	.word	0x08009a68
 800171c:	200009bd 	.word	0x200009bd

08001720 <analogRoutine>:

void analogRoutine ()
{
 8001720:	b510      	push	{r4, lr}
	static _Bool pressed[4];
	static uint16_t counters[4] = { 0, };
	uint16_t adc = HAL_ADC_GetValue (&hadc2);
 8001722:	483f      	ldr	r0, [pc, #252]	; (8001820 <analogRoutine+0x100>)
 8001724:	f003 ffc4 	bl	80056b0 <HAL_ADC_GetValue>
 8001728:	b280      	uxth	r0, r0

	if (adc < 500)
 800172a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800172e:	d236      	bcs.n	800179e <analogRoutine+0x7e>
 8001730:	4a3c      	ldr	r2, [pc, #240]	; (8001824 <analogRoutine+0x104>)
 8001732:	2304      	movs	r3, #4
 8001734:	4614      	mov	r4, r2
		{

			for (uint8_t i = 0; i < 4; ++i)
				if (counters[i])
 8001736:	f834 1b02 	ldrh.w	r1, [r4], #2
 800173a:	b111      	cbz	r1, 8001742 <analogRoutine+0x22>
					counters[i]--;
 800173c:	3901      	subs	r1, #1
 800173e:	f824 1c02 	strh.w	r1, [r4, #-2]
			for (uint8_t i = 0; i < 4; ++i)
 8001742:	3b01      	subs	r3, #1
 8001744:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001748:	d1f5      	bne.n	8001736 <analogRoutine+0x16>
 800174a:	2304      	movs	r3, #4
 800174c:	4936      	ldr	r1, [pc, #216]	; (8001828 <analogRoutine+0x108>)
			for (uint8_t i = 0; i < 4; ++i)
				if (pressed[i] && !counters[i])
 800174e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001752:	b11c      	cbz	r4, 800175c <analogRoutine+0x3c>
 8001754:	8814      	ldrh	r4, [r2, #0]
 8001756:	b90c      	cbnz	r4, 800175c <analogRoutine+0x3c>
					pressed[i] = 0;
 8001758:	f801 4c01 	strb.w	r4, [r1, #-1]
			for (uint8_t i = 0; i < 4; ++i)
 800175c:	3b01      	subs	r3, #1
 800175e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001762:	f102 0202 	add.w	r2, r2, #2
 8001766:	d1f2      	bne.n	800174e <analogRoutine+0x2e>
					pressed[2] = true;
					flag.analog2 = 1;
				}
		}

	if (adc < 1500 && adc > 1200 && pressed[1] == 0)
 8001768:	f46f 6396 	mvn.w	r3, #1200	; 0x4b0
 800176c:	18c3      	adds	r3, r0, r3
 800176e:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8001772:	d942      	bls.n	80017fa <analogRoutine+0xda>
				{
					pressed[1] = true;
					flag.analog1 = 1;
				}
		}
	if (adc > 1500 && pressed[0] == 0)
 8001774:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001778:	4298      	cmp	r0, r3
 800177a:	d927      	bls.n	80017cc <analogRoutine+0xac>
 800177c:	4a2a      	ldr	r2, [pc, #168]	; (8001828 <analogRoutine+0x108>)
 800177e:	7813      	ldrb	r3, [r2, #0]
 8001780:	bb23      	cbnz	r3, 80017cc <analogRoutine+0xac>
		{
			counters[0]++;
 8001782:	4928      	ldr	r1, [pc, #160]	; (8001824 <analogRoutine+0x104>)
 8001784:	880b      	ldrh	r3, [r1, #0]
 8001786:	3301      	adds	r3, #1
 8001788:	b29b      	uxth	r3, r3
			if (counters[0] > 100 && pressed[0] == 0)
 800178a:	2b64      	cmp	r3, #100	; 0x64
			counters[0]++;
 800178c:	800b      	strh	r3, [r1, #0]
			if (counters[0] > 100 && pressed[0] == 0)
 800178e:	d91d      	bls.n	80017cc <analogRoutine+0xac>
				{
					pressed[0] = true;
 8001790:	2301      	movs	r3, #1
 8001792:	7013      	strb	r3, [r2, #0]
					flag.analog0 = 1;
 8001794:	4a25      	ldr	r2, [pc, #148]	; (800182c <analogRoutine+0x10c>)
 8001796:	7813      	ldrb	r3, [r2, #0]
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	e015      	b.n	80017ca <analogRoutine+0xaa>
	if (adc < 950 && adc > 600 && pressed[3] == 0)
 800179e:	f46f 7216 	mvn.w	r2, #600	; 0x258
 80017a2:	1883      	adds	r3, r0, r2
 80017a4:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80017a8:	d811      	bhi.n	80017ce <analogRoutine+0xae>
 80017aa:	4a1f      	ldr	r2, [pc, #124]	; (8001828 <analogRoutine+0x108>)
 80017ac:	78d3      	ldrb	r3, [r2, #3]
 80017ae:	b96b      	cbnz	r3, 80017cc <analogRoutine+0xac>
			counters[3]++;
 80017b0:	491c      	ldr	r1, [pc, #112]	; (8001824 <analogRoutine+0x104>)
 80017b2:	88cb      	ldrh	r3, [r1, #6]
 80017b4:	3301      	adds	r3, #1
 80017b6:	b29b      	uxth	r3, r3
			if (counters[3] > 100)
 80017b8:	2b64      	cmp	r3, #100	; 0x64
			counters[3]++;
 80017ba:	80cb      	strh	r3, [r1, #6]
			if (counters[3] > 100)
 80017bc:	d906      	bls.n	80017cc <analogRoutine+0xac>
					pressed[3] = true;
 80017be:	2301      	movs	r3, #1
 80017c0:	70d3      	strb	r3, [r2, #3]
					flag.analog3 = 1;
 80017c2:	4a1a      	ldr	r2, [pc, #104]	; (800182c <analogRoutine+0x10c>)
 80017c4:	7813      	ldrb	r3, [r2, #0]
 80017c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
					flag.analog0 = 1;
 80017ca:	7013      	strb	r3, [r2, #0]
				}
		}

}
 80017cc:	bd10      	pop	{r4, pc}
	if (adc < 1100 && adc > 950 && pressed[2] == 0)
 80017ce:	f2a0 33b7 	subw	r3, r0, #951	; 0x3b7
 80017d2:	2b94      	cmp	r3, #148	; 0x94
 80017d4:	d8c8      	bhi.n	8001768 <analogRoutine+0x48>
 80017d6:	4a14      	ldr	r2, [pc, #80]	; (8001828 <analogRoutine+0x108>)
 80017d8:	7893      	ldrb	r3, [r2, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f6      	bne.n	80017cc <analogRoutine+0xac>
			counters[2]++;
 80017de:	4911      	ldr	r1, [pc, #68]	; (8001824 <analogRoutine+0x104>)
 80017e0:	888b      	ldrh	r3, [r1, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b29b      	uxth	r3, r3
			if (counters[2] > 100)
 80017e6:	2b64      	cmp	r3, #100	; 0x64
			counters[2]++;
 80017e8:	808b      	strh	r3, [r1, #4]
			if (counters[2] > 100)
 80017ea:	d9ef      	bls.n	80017cc <analogRoutine+0xac>
					pressed[2] = true;
 80017ec:	2301      	movs	r3, #1
 80017ee:	7093      	strb	r3, [r2, #2]
					flag.analog2 = 1;
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <analogRoutine+0x10c>)
 80017f2:	7813      	ldrb	r3, [r2, #0]
 80017f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017f8:	e7e7      	b.n	80017ca <analogRoutine+0xaa>
	if (adc < 1500 && adc > 1200 && pressed[1] == 0)
 80017fa:	4a0b      	ldr	r2, [pc, #44]	; (8001828 <analogRoutine+0x108>)
 80017fc:	7853      	ldrb	r3, [r2, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1e4      	bne.n	80017cc <analogRoutine+0xac>
			counters[1]++;
 8001802:	4908      	ldr	r1, [pc, #32]	; (8001824 <analogRoutine+0x104>)
 8001804:	884b      	ldrh	r3, [r1, #2]
 8001806:	3301      	adds	r3, #1
 8001808:	b29b      	uxth	r3, r3
			if (counters[1] > 100)
 800180a:	2b64      	cmp	r3, #100	; 0x64
			counters[1]++;
 800180c:	804b      	strh	r3, [r1, #2]
			if (counters[1] > 100)
 800180e:	d9dd      	bls.n	80017cc <analogRoutine+0xac>
					pressed[1] = true;
 8001810:	2301      	movs	r3, #1
 8001812:	7053      	strb	r3, [r2, #1]
					flag.analog1 = 1;
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <analogRoutine+0x10c>)
 8001816:	7813      	ldrb	r3, [r2, #0]
 8001818:	f043 0320 	orr.w	r3, r3, #32
 800181c:	e7d5      	b.n	80017ca <analogRoutine+0xaa>
 800181e:	bf00      	nop
 8001820:	20000ae8 	.word	0x20000ae8
 8001824:	2000011a 	.word	0x2000011a
 8001828:	20000153 	.word	0x20000153
 800182c:	20000b84 	.word	0x20000b84

08001830 <alarmRoutine>:
 * @brief Handles alarm situations
 * @param None
 * @retval None
 */
void alarmRoutine ()
{
 8001830:	b510      	push	{r4, lr}
 8001832:	2400      	movs	r4, #0
	uint16_t i;
	uint8_t gotAlarm = 0;
 8001834:	4622      	mov	r2, r4
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <alarmRoutine+0x64>)
	for (i = 0; i < MAX_NODES; i++)
		if (nodes[i].alarm)
 8001838:	7c99      	ldrb	r1, [r3, #18]
 800183a:	3401      	adds	r4, #1
			gotAlarm = true;
 800183c:	2900      	cmp	r1, #0
 800183e:	bf18      	it	ne
 8001840:	2201      	movne	r2, #1
	for (i = 0; i < MAX_NODES; i++)
 8001842:	2c20      	cmp	r4, #32
 8001844:	f103 0320 	add.w	r3, r3, #32
 8001848:	d1f6      	bne.n	8001838 <alarmRoutine+0x8>

	if (gotAlarm)
 800184a:	b1ea      	cbz	r2, 8001888 <alarmRoutine+0x58>
		{
			uint8_t tact = (HAL_GetTick () / 80) % 12;
 800184c:	f003 ff18 	bl	8005680 <HAL_GetTick>
 8001850:	2350      	movs	r3, #80	; 0x50
 8001852:	220c      	movs	r2, #12
 8001854:	fbb0 f3f3 	udiv	r3, r0, r3
 8001858:	fbb3 f0f2 	udiv	r0, r3, r2
 800185c:	fb02 3010 	mls	r0, r2, r0, r3
			if (tact % 2 && tact < 9)
 8001860:	07c2      	lsls	r2, r0, #31
			uint8_t tact = (HAL_GetTick () / 80) % 12;
 8001862:	b2c3      	uxtb	r3, r0
			if (tact % 2 && tact < 9)
 8001864:	d50e      	bpl.n	8001884 <alarmRoutine+0x54>
 8001866:	2b08      	cmp	r3, #8
 8001868:	d80c      	bhi.n	8001884 <alarmRoutine+0x54>
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 1);
 800186a:	2201      	movs	r2, #1
			else
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 800186c:	2120      	movs	r1, #32
 800186e:	480a      	ldr	r0, [pc, #40]	; (8001898 <alarmRoutine+0x68>)
 8001870:	f004 fbfc 	bl	800606c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 0);
 8001874:	2200      	movs	r2, #0
	else
		{
			HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
		}
}
 8001876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
 800187a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187e:	4807      	ldr	r0, [pc, #28]	; (800189c <alarmRoutine+0x6c>)
 8001880:	f004 bbf4 	b.w	800606c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	e7f1      	b.n	800186c <alarmRoutine+0x3c>
			HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8001888:	4621      	mov	r1, r4
 800188a:	4803      	ldr	r0, [pc, #12]	; (8001898 <alarmRoutine+0x68>)
 800188c:	f004 fbee 	bl	800606c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
 8001890:	2201      	movs	r2, #1
 8001892:	e7f0      	b.n	8001876 <alarmRoutine+0x46>
 8001894:	20000ca0 	.word	0x20000ca0
 8001898:	40010c00 	.word	0x40010c00
 800189c:	40010800 	.word	0x40010800

080018a0 <alarmOff>:
 * @brief Turns alarm indication off and alarm flag for every node
 * @param None
 * @retval None
 */
void alarmOff ()
{
 80018a0:	2300      	movs	r3, #0
	uint16_t i;
	for (i = 0; i < MAX_NODES; i++)
		nodes[i].alarm = 0;
 80018a2:	4619      	mov	r1, r3
 80018a4:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <alarmOff+0x14>)
 80018a6:	3301      	adds	r3, #1
	for (i = 0; i < MAX_NODES; i++)
 80018a8:	2b20      	cmp	r3, #32
		nodes[i].alarm = 0;
 80018aa:	7491      	strb	r1, [r2, #18]
	for (i = 0; i < MAX_NODES; i++)
 80018ac:	f102 0220 	add.w	r2, r2, #32
 80018b0:	d1f9      	bne.n	80018a6 <alarmOff+0x6>
}
 80018b2:	4770      	bx	lr
 80018b4:	20000ca0 	.word	0x20000ca0

080018b8 <ledNodeStatusIndication>:

void ledNodeStatusIndication ()
{
 80018b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	for (i = 0; i < MAX_NODES; i++)
 80018bc:	f04f 0a00 	mov.w	sl, #0
				{
#if RECEIVE_ANIMATION == WAVE
					float fTemp;
					uint32_t temp = (HAL_GetTick () - nodes[i].lastContact) % 1000;
					if (temp < 500)
						fTemp = 1.0f + (float) temp / 250.0f;
 80018c0:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 80018c4:	4c73      	ldr	r4, [pc, #460]	; (8001a94 <ledNodeStatusIndication+0x1dc>)
					else
						fTemp = 5.0f - (float) temp / 250.0f;
 80018c6:	4f74      	ldr	r7, [pc, #464]	; (8001a98 <ledNodeStatusIndication+0x1e0>)
 80018c8:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8001aa8 <ledNodeStatusIndication+0x1f0>
			wsSetColor (i + 1, GREEN);
 80018cc:	2300      	movs	r3, #0
 80018ce:	f10a 0601 	add.w	r6, sl, #1
 80018d2:	b2f5      	uxtb	r5, r6
 80018d4:	4619      	mov	r1, r3
 80018d6:	2210      	movs	r2, #16
 80018d8:	4628      	mov	r0, r5
 80018da:	f003 fdfb 	bl	80054d4 <wsSetColor>
			if (nodes[i].powered == 0)
 80018de:	7c21      	ldrb	r1, [r4, #16]
 80018e0:	b921      	cbnz	r1, 80018ec <ledNodeStatusIndication+0x34>
				wsSetColor (i + 1, CYAN);
 80018e2:	2310      	movs	r3, #16
 80018e4:	4628      	mov	r0, r5
 80018e6:	461a      	mov	r2, r3
 80018e8:	f003 fdf4 	bl	80054d4 <wsSetColor>
			if (nodes[i].voltage < nodes[i].voltageTrashold)
 80018ec:	69a1      	ldr	r1, [r4, #24]
 80018ee:	6960      	ldr	r0, [r4, #20]
 80018f0:	f7fe fee0 	bl	80006b4 <__aeabi_fcmplt>
 80018f4:	b150      	cbz	r0, 800190c <ledNodeStatusIndication+0x54>
				blinkProvider ? wsSetColor (i + 1, CYAN) : wsSetColor (i + 1, BLACK);
 80018f6:	4b69      	ldr	r3, [pc, #420]	; (8001a9c <ledNodeStatusIndication+0x1e4>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80aa 	beq.w	8001a54 <ledNodeStatusIndication+0x19c>
 8001900:	2310      	movs	r3, #16
 8001902:	2100      	movs	r1, #0
 8001904:	461a      	mov	r2, r3
 8001906:	4628      	mov	r0, r5
 8001908:	f003 fde4 	bl	80054d4 <wsSetColor>
			if (nodes[i].masked & MASK_DOOR)
 800190c:	7b23      	ldrb	r3, [r4, #12]
 800190e:	07db      	lsls	r3, r3, #31
 8001910:	d50e      	bpl.n	8001930 <ledNodeStatusIndication+0x78>
				(nodes[i].opened && blinkProvider) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, BLUE); // Blinking - opened
 8001912:	7be3      	ldrb	r3, [r4, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80a0 	beq.w	8001a5a <ledNodeStatusIndication+0x1a2>
 800191a:	4b60      	ldr	r3, [pc, #384]	; (8001a9c <ledNodeStatusIndication+0x1e4>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 809b 	beq.w	8001a5a <ledNodeStatusIndication+0x1a2>
 8001924:	2300      	movs	r3, #0
 8001926:	461a      	mov	r2, r3
 8001928:	4619      	mov	r1, r3
 800192a:	4628      	mov	r0, r5
 800192c:	f003 fdd2 	bl	80054d4 <wsSetColor>
			if (nodes[i].alarm)
 8001930:	7ca3      	ldrb	r3, [r4, #18]
 8001932:	b16b      	cbz	r3, 8001950 <ledNodeStatusIndication+0x98>
				(blinkProvider && nodes[i].alarm == ALARM_DOOR) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001934:	4a59      	ldr	r2, [pc, #356]	; (8001a9c <ledNodeStatusIndication+0x1e4>)
 8001936:	7812      	ldrb	r2, [r2, #0]
 8001938:	2a00      	cmp	r2, #0
 800193a:	f000 8092 	beq.w	8001a62 <ledNodeStatusIndication+0x1aa>
 800193e:	2b01      	cmp	r3, #1
 8001940:	f040 808f 	bne.w	8001a62 <ledNodeStatusIndication+0x1aa>
 8001944:	2300      	movs	r3, #0
 8001946:	461a      	mov	r2, r3
 8001948:	4619      	mov	r1, r3
 800194a:	4628      	mov	r0, r5
 800194c:	f003 fdc2 	bl	80054d4 <wsSetColor>
			if (HAL_GetTick () - nodes[i].lastContact > settings.warningDelay && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 8001950:	f003 fe96 	bl	8005680 <HAL_GetTick>
 8001954:	f8df b154 	ldr.w	fp, [pc, #340]	; 8001aac <ledNodeStatusIndication+0x1f4>
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	1ac0      	subs	r0, r0, r3
 800195c:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001960:	4298      	cmp	r0, r3
 8001962:	d90d      	bls.n	8001980 <ledNodeStatusIndication+0xc8>
 8001964:	f003 fe8c 	bl	8005680 <HAL_GetTick>
 8001968:	6863      	ldr	r3, [r4, #4]
 800196a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800196e:	3310      	adds	r3, #16
 8001970:	4298      	cmp	r0, r3
 8001972:	d905      	bls.n	8001980 <ledNodeStatusIndication+0xc8>
				wsSetColor (i + 1, YELLOW);
 8001974:	2210      	movs	r2, #16
 8001976:	2300      	movs	r3, #0
 8001978:	4611      	mov	r1, r2
 800197a:	4628      	mov	r0, r5
 800197c:	f003 fdaa 	bl	80054d4 <wsSetColor>
			if (HAL_GetTick () - nodes[i].lastContact > settings.superWarningDelay && blinkProvider && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 8001980:	f003 fe7e 	bl	8005680 <HAL_GetTick>
 8001984:	6823      	ldr	r3, [r4, #0]
 8001986:	1ac0      	subs	r0, r0, r3
 8001988:	f8db 3008 	ldr.w	r3, [fp, #8]
 800198c:	4298      	cmp	r0, r3
 800198e:	d910      	bls.n	80019b2 <ledNodeStatusIndication+0xfa>
 8001990:	4b42      	ldr	r3, [pc, #264]	; (8001a9c <ledNodeStatusIndication+0x1e4>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b16b      	cbz	r3, 80019b2 <ledNodeStatusIndication+0xfa>
 8001996:	f003 fe73 	bl	8005680 <HAL_GetTick>
 800199a:	6863      	ldr	r3, [r4, #4]
 800199c:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80019a0:	3310      	adds	r3, #16
 80019a2:	4298      	cmp	r0, r3
 80019a4:	d905      	bls.n	80019b2 <ledNodeStatusIndication+0xfa>
				wsSetColor (i + 1, BLACK);
 80019a6:	2300      	movs	r3, #0
 80019a8:	4628      	mov	r0, r5
 80019aa:	461a      	mov	r2, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	f003 fd91 	bl	80054d4 <wsSetColor>
			if (nodes[i].disarmed && nodes[i].disarmRequest)
 80019b2:	7b63      	ldrb	r3, [r4, #13]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05e      	beq.n	8001a76 <ledNodeStatusIndication+0x1be>
 80019b8:	7ba3      	ldrb	r3, [r4, #14]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d155      	bne.n	8001a6a <ledNodeStatusIndication+0x1b2>
				wsSetColor (i + 1, MAGENTA);
 80019be:	2310      	movs	r3, #16
 80019c0:	2200      	movs	r2, #0
 80019c2:	4619      	mov	r1, r3
 80019c4:	4628      	mov	r0, r5
 80019c6:	f003 fd85 	bl	80054d4 <wsSetColor>
			if (nodes[i].activated == 0)
 80019ca:	7c63      	ldrb	r3, [r4, #17]
 80019cc:	b92b      	cbnz	r3, 80019da <ledNodeStatusIndication+0x122>
				wsSetColor (i + 1, WHITE);
 80019ce:	2303      	movs	r3, #3
 80019d0:	4628      	mov	r0, r5
 80019d2:	461a      	mov	r2, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	f003 fd7d 	bl	80054d4 <wsSetColor>
			if (selectedNode == i && HAL_GetTick () - lastNodeChangeTick < DELAY_SELECTED_MARK && lastNodeChangeTick)
 80019da:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <ledNodeStatusIndication+0x1e8>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	4553      	cmp	r3, sl
 80019e2:	d10c      	bne.n	80019fe <ledNodeStatusIndication+0x146>
 80019e4:	f003 fe4c 	bl	8005680 <HAL_GetTick>
 80019e8:	f241 3287 	movw	r2, #4999	; 0x1387
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <ledNodeStatusIndication+0x1ec>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	1ac0      	subs	r0, r0, r3
 80019f2:	4290      	cmp	r0, r2
 80019f4:	d803      	bhi.n	80019fe <ledNodeStatusIndication+0x146>
 80019f6:	b113      	cbz	r3, 80019fe <ledNodeStatusIndication+0x146>
				wsDoubleBright (i + 1);
 80019f8:	4628      	mov	r0, r5
 80019fa:	f003 fd77 	bl	80054ec <wsDoubleBright>
			if (HAL_GetTick () - nodes[i].lastContact < DELAY_SHOW_CONTACT && nodes[i].activated)
 80019fe:	f003 fe3f 	bl	8005680 <HAL_GetTick>
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	1ac0      	subs	r0, r0, r3
 8001a06:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001a0a:	4298      	cmp	r0, r3
 8001a0c:	d81a      	bhi.n	8001a44 <ledNodeStatusIndication+0x18c>
 8001a0e:	7c63      	ldrb	r3, [r4, #17]
 8001a10:	b1c3      	cbz	r3, 8001a44 <ledNodeStatusIndication+0x18c>
					uint32_t temp = (HAL_GetTick () - nodes[i].lastContact) % 1000;
 8001a12:	f003 fe35 	bl	8005680 <HAL_GetTick>
 8001a16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	1ac3      	subs	r3, r0, r3
 8001a1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8001a22:	fb02 3010 	mls	r0, r2, r0, r3
					if (temp < 500)
 8001a26:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001a2a:	d229      	bcs.n	8001a80 <ledNodeStatusIndication+0x1c8>
						fTemp = 1.0f + (float) temp / 250.0f;
 8001a2c:	f7fe fc4c 	bl	80002c8 <__aeabi_ui2f>
 8001a30:	4639      	mov	r1, r7
 8001a32:	f7fe fd55 	bl	80004e0 <__aeabi_fdiv>
 8001a36:	4649      	mov	r1, r9
 8001a38:	f7fe fb96 	bl	8000168 <__addsf3>
						fTemp = 5.0f - (float) temp / 250.0f;
 8001a3c:	4601      	mov	r1, r0

					wsMultiply (i + 1, fTemp);
 8001a3e:	4628      	mov	r0, r5
 8001a40:	f003 fd64 	bl	800550c <wsMultiply>
	for (i = 0; i < MAX_NODES; i++)
 8001a44:	2e20      	cmp	r6, #32
 8001a46:	46b2      	mov	sl, r6
 8001a48:	f104 0420 	add.w	r4, r4, #32
 8001a4c:	f47f af3e 	bne.w	80018cc <ledNodeStatusIndication+0x14>
					if (fastBlinkProvider)
						wsDoubleBright (i + 1);
#endif
				}
		}
}
 8001a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				blinkProvider ? wsSetColor (i + 1, CYAN) : wsSetColor (i + 1, BLACK);
 8001a54:	461a      	mov	r2, r3
 8001a56:	4619      	mov	r1, r3
 8001a58:	e755      	b.n	8001906 <ledNodeStatusIndication+0x4e>
				(nodes[i].opened && blinkProvider) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, BLUE); // Blinking - opened
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	4611      	mov	r1, r2
 8001a60:	e763      	b.n	800192a <ledNodeStatusIndication+0x72>
				(blinkProvider && nodes[i].alarm == ALARM_DOOR) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001a62:	2300      	movs	r3, #0
 8001a64:	2110      	movs	r1, #16
 8001a66:	461a      	mov	r2, r3
 8001a68:	e76f      	b.n	800194a <ledNodeStatusIndication+0x92>
				wsSetColor (i + 1, ORANGE);
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	2120      	movs	r1, #32
 8001a70:	4628      	mov	r0, r5
 8001a72:	f003 fd2f 	bl	80054d4 <wsSetColor>
			if (nodes[i].disarmRequest != nodes[i].disarmed)
 8001a76:	7ba2      	ldrb	r2, [r4, #14]
 8001a78:	7b63      	ldrb	r3, [r4, #13]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d0a5      	beq.n	80019ca <ledNodeStatusIndication+0x112>
 8001a7e:	e79e      	b.n	80019be <ledNodeStatusIndication+0x106>
						fTemp = 5.0f - (float) temp / 250.0f;
 8001a80:	f7fe fc22 	bl	80002c8 <__aeabi_ui2f>
 8001a84:	4639      	mov	r1, r7
 8001a86:	f7fe fd2b 	bl	80004e0 <__aeabi_fdiv>
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	4640      	mov	r0, r8
 8001a8e:	f7fe fb69 	bl	8000164 <__aeabi_fsub>
 8001a92:	e7d3      	b.n	8001a3c <ledNodeStatusIndication+0x184>
 8001a94:	20000ca0 	.word	0x20000ca0
 8001a98:	437a0000 	.word	0x437a0000
 8001a9c:	200010c0 	.word	0x200010c0
 8001aa0:	2000016e 	.word	0x2000016e
 8001aa4:	2000012c 	.word	0x2000012c
 8001aa8:	40a00000 	.word	0x40a00000
 8001aac:	20000a80 	.word	0x20000a80

08001ab0 <ledFillBlack>:

void ledFillBlack ()
{
 8001ab0:	b510      	push	{r4, lr}
	int i;
	for (i = 0; i < MAX_NODES + 1; i++)
 8001ab2:	2400      	movs	r4, #0
		wsSetColor (i, BLACK);
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	b2e0      	uxtb	r0, r4
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4619      	mov	r1, r3
	for (i = 0; i < MAX_NODES + 1; i++)
 8001abc:	3401      	adds	r4, #1
		wsSetColor (i, BLACK);
 8001abe:	f003 fd09 	bl	80054d4 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 8001ac2:	2c21      	cmp	r4, #33	; 0x21
 8001ac4:	d1f6      	bne.n	8001ab4 <ledFillBlack+0x4>
}
 8001ac6:	bd10      	pop	{r4, pc}

08001ac8 <ledRoutine>:
 */
void ledRoutine ()
{
	uint8_t i = 0;

	wsSetColor (0, BLACK);
 8001ac8:	2300      	movs	r3, #0
{
 8001aca:	b510      	push	{r4, lr}

	if (myRadio.status == TX)
 8001acc:	4c2a      	ldr	r4, [pc, #168]	; (8001b78 <ledRoutine+0xb0>)
	wsSetColor (0, BLACK);
 8001ace:	461a      	mov	r2, r3
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fcfe 	bl	80054d4 <wsSetColor>
	if (myRadio.status == TX)
 8001ad8:	7c22      	ldrb	r2, [r4, #16]
 8001ada:	2a03      	cmp	r2, #3
 8001adc:	d105      	bne.n	8001aea <ledRoutine+0x22>
		wsSetColor (0, PINK);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	f003 fcf5 	bl	80054d4 <wsSetColor>
	if (myRadio.signalDetected == 1)
 8001aea:	7f23      	ldrb	r3, [r4, #28]
 8001aec:	b12b      	cbz	r3, 8001afa <ledRoutine+0x32>
		wsSetColor (0, LGREEN);
 8001aee:	2100      	movs	r1, #0
 8001af0:	2310      	movs	r3, #16
 8001af2:	2220      	movs	r2, #32
 8001af4:	4608      	mov	r0, r1
 8001af6:	f003 fced 	bl	80054d4 <wsSetColor>
	if (HAL_GetTick () - lastUartConnect < 200)
 8001afa:	f003 fdc1 	bl	8005680 <HAL_GetTick>
 8001afe:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <ledRoutine+0xb4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	1ac0      	subs	r0, r0, r3
 8001b04:	28c7      	cmp	r0, #199	; 0xc7
 8001b06:	d805      	bhi.n	8001b14 <ledRoutine+0x4c>
		wsSetColor (0, YELLOW);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2210      	movs	r2, #16
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4611      	mov	r1, r2
 8001b10:	f003 fce0 	bl	80054d4 <wsSetColor>

	if (screenMode == smRegular || screenMode == smGraph)
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <ledRoutine+0xb8>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b10b      	cbz	r3, 8001b1e <ledRoutine+0x56>
 8001b1a:	2b1c      	cmp	r3, #28
 8001b1c:	d105      	bne.n	8001b2a <ledRoutine+0x62>
		{
			ledNodeStatusIndication ();
 8001b1e:	f7ff fecb 	bl	80018b8 <ledNodeStatusIndication>
					wsSetColor (i, BLACK);
				}

		}
	wsPrepareArray ();
}
 8001b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wsPrepareArray ();
 8001b26:	f003 bd15 	b.w	8005554 <wsPrepareArray>
	else if (screenMode == smSaveConfig)
 8001b2a:	2b18      	cmp	r3, #24
 8001b2c:	d102      	bne.n	8001b34 <ledRoutine+0x6c>
			ledFillBlack ();
 8001b2e:	f7ff ffbf 	bl	8001ab0 <ledFillBlack>
 8001b32:	e7f6      	b.n	8001b22 <ledRoutine+0x5a>
	else if (screenMode == smNodeAction)
 8001b34:	2b1d      	cmp	r3, #29
 8001b36:	f04f 0400 	mov.w	r4, #0
 8001b3a:	d112      	bne.n	8001b62 <ledRoutine+0x9a>
					wsSetColor (i, BLACK);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	b2e0      	uxtb	r0, r4
 8001b40:	461a      	mov	r2, r3
 8001b42:	4619      	mov	r1, r3
 8001b44:	3401      	adds	r4, #1
 8001b46:	f003 fcc5 	bl	80054d4 <wsSetColor>
			for (i = 0; i < MAX_NODES + 1; i++)
 8001b4a:	2c21      	cmp	r4, #33	; 0x21
 8001b4c:	d1f6      	bne.n	8001b3c <ledRoutine+0x74>
			wsSetColor (selectedNode + 1, WHITE);
 8001b4e:	4b0d      	ldr	r3, [pc, #52]	; (8001b84 <ledRoutine+0xbc>)
 8001b50:	7818      	ldrb	r0, [r3, #0]
 8001b52:	2303      	movs	r3, #3
 8001b54:	3001      	adds	r0, #1
 8001b56:	461a      	mov	r2, r3
 8001b58:	4619      	mov	r1, r3
 8001b5a:	b2c0      	uxtb	r0, r0
 8001b5c:	f003 fcba 	bl	80054d4 <wsSetColor>
 8001b60:	e7df      	b.n	8001b22 <ledRoutine+0x5a>
					wsSetColor (i, BLACK);
 8001b62:	2300      	movs	r3, #0
 8001b64:	b2e0      	uxtb	r0, r4
 8001b66:	461a      	mov	r2, r3
 8001b68:	4619      	mov	r1, r3
 8001b6a:	3401      	adds	r4, #1
 8001b6c:	f003 fcb2 	bl	80054d4 <wsSetColor>
			for (i = 0; i < MAX_NODES + 1; i++)
 8001b70:	2c21      	cmp	r4, #33	; 0x21
 8001b72:	d1f6      	bne.n	8001b62 <ledRoutine+0x9a>
 8001b74:	e7d5      	b.n	8001b22 <ledRoutine+0x5a>
 8001b76:	bf00      	nop
 8001b78:	200009a0 	.word	0x200009a0
 8001b7c:	20001898 	.word	0x20001898
 8001b80:	2000016a 	.word	0x2000016a
 8001b84:	2000016e 	.word	0x2000016e

08001b88 <ShowLogo>:
 * @brief Handles turn on logo
 * @param None
 * @retval None
 */
void ShowLogo ()
{
 8001b88:	b510      	push	{r4, lr}
	int i = 0;
	UC1609_DrawBitmap(Logo);
 8001b8a:	4818      	ldr	r0, [pc, #96]	; (8001bec <ShowLogo+0x64>)
 8001b8c:	f7fe fffa 	bl	8000b84 <UC1609_DrawBitmap>
	UC1609_UpdateScreen();
 8001b90:	f7fe ff5c 	bl	8000a4c <UC1609_UpdateScreen>
	HAL_Delay(1000);
 8001b94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b98:	f003 fd78 	bl	800568c <HAL_Delay>
	for (i = 0; i < MAX_NODES + 1; i++)
 8001b9c:	2400      	movs	r4, #0
		{
			wsSetColor (i, WHITE);
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	b2e0      	uxtb	r0, r4
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f003 fc95 	bl	80054d4 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 8001baa:	3401      	adds	r4, #1
			wsPrepareArray ();
 8001bac:	f003 fcd2 	bl	8005554 <wsPrepareArray>
			HAL_Delay (20);
 8001bb0:	2014      	movs	r0, #20
 8001bb2:	f003 fd6b 	bl	800568c <HAL_Delay>
	for (i = 0; i < MAX_NODES + 1; i++)
 8001bb6:	2c21      	cmp	r4, #33	; 0x21
 8001bb8:	d1f1      	bne.n	8001b9e <ShowLogo+0x16>
		}
	clearStrings ();
 8001bba:	f7ff fa5d 	bl	8001078 <clearStrings>
	sprintf (string[0], "SX127* is OK ");
 8001bbe:	490c      	ldr	r1, [pc, #48]	; (8001bf0 <ShowLogo+0x68>)
 8001bc0:	480c      	ldr	r0, [pc, #48]	; (8001bf4 <ShowLogo+0x6c>)
 8001bc2:	f006 fb09 	bl	80081d8 <strcpy>
	sprintf (string[1], "Module Firmware:");
 8001bc6:	490c      	ldr	r1, [pc, #48]	; (8001bf8 <ShowLogo+0x70>)
 8001bc8:	480c      	ldr	r0, [pc, #48]	; (8001bfc <ShowLogo+0x74>)
 8001bca:	f006 fb05 	bl	80081d8 <strcpy>
	sprintf (string[2], "0x%X", myRadio.revision);
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <ShowLogo+0x78>)
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <ShowLogo+0x7c>)
 8001bd2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 8001bd6:	480c      	ldr	r0, [pc, #48]	; (8001c08 <ShowLogo+0x80>)
 8001bd8:	f006 fade 	bl	8008198 <siprintf>
	updateLcd ();
 8001bdc:	f7ff fa5e 	bl	800109c <updateLcd>
	HAL_Delay (300);
}
 8001be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay (300);
 8001be4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001be8:	f003 bd50 	b.w	800568c <HAL_Delay>
 8001bec:	080093d8 	.word	0x080093d8
 8001bf0:	08009ab3 	.word	0x08009ab3
 8001bf4:	20000170 	.word	0x20000170
 8001bf8:	08009ac1 	.word	0x08009ac1
 8001bfc:	200001b0 	.word	0x200001b0
 8001c00:	200009a0 	.word	0x200009a0
 8001c04:	08009ad2 	.word	0x08009ad2
 8001c08:	200001f0 	.word	0x200001f0

08001c0c <changeDisarmNode>:
 * @param  selectedNode obvious
 * @retval None
 */
void changeDisarmNode (int16_t selectedNode)
{
	if (nodes[selectedNode].powered)
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <changeDisarmNode+0x34>)
 8001c0e:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 8001c12:	7b93      	ldrb	r3, [r2, #14]
 8001c14:	7c11      	ldrb	r1, [r2, #16]
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	095b      	lsrs	r3, r3, #5
		{
			nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 8001c1c:	7393      	strb	r3, [r2, #14]
	if (nodes[selectedNode].powered)
 8001c1e:	b169      	cbz	r1, 8001c3c <changeDisarmNode+0x30>
			txMes->adr = selectedNode;
 8001c20:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <changeDisarmNode+0x38>)
			txMes->disarm = nodes[selectedNode].disarmRequest;
			txMes->message = MSG_DOWN_REQUEST;
			txMes->uplink = 0;
 8001c22:	00c0      	lsls	r0, r0, #3
			txMes->adr = selectedNode;
 8001c24:	6812      	ldr	r2, [r2, #0]
			txMes->uplink = 0;
 8001c26:	f040 0002 	orr.w	r0, r0, #2
			txMes->disarm = nodes[selectedNode].disarmRequest;
 8001c2a:	7851      	ldrb	r1, [r2, #1]
			txMes->uplink = 0;
 8001c2c:	7010      	strb	r0, [r2, #0]
			txMes->disarm = nodes[selectedNode].disarmRequest;
 8001c2e:	f363 0100 	bfi	r1, r3, #0, #1
 8001c32:	7051      	strb	r1, [r2, #1]
			SX127X_transmitAsync (&myRadio, 3);
 8001c34:	4804      	ldr	r0, [pc, #16]	; (8001c48 <changeDisarmNode+0x3c>)
 8001c36:	2103      	movs	r1, #3
 8001c38:	f003 b84c 	b.w	8004cd4 <SX127X_transmitAsync>
		}
	else
		nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;

}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000ca0 	.word	0x20000ca0
 8001c44:	20000044 	.word	0x20000044
 8001c48:	200009a0 	.word	0x200009a0

08001c4c <pingNode>:
 * @param  None
 * @retval None
 */
void pingNode (int16_t selectedNode)
{
	txMes->adr = selectedNode;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <pingNode+0x24>)
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8001c4e:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <pingNode+0x28>)
	txMes->adr = selectedNode;
 8001c50:	681b      	ldr	r3, [r3, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8001c52:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 8001c56:	7b91      	ldrb	r1, [r2, #14]
 8001c58:	785a      	ldrb	r2, [r3, #1]
	txMes->message = MSG_DOWN_REQUEST;
	txMes->uplink = 0;
 8001c5a:	00c0      	lsls	r0, r0, #3
 8001c5c:	f040 0002 	orr.w	r0, r0, #2
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8001c60:	f361 0200 	bfi	r2, r1, #0, #1
	txMes->uplink = 0;
 8001c64:	7018      	strb	r0, [r3, #0]
	SX127X_transmitAsync (&myRadio, 3);
 8001c66:	2103      	movs	r1, #3
 8001c68:	4803      	ldr	r0, [pc, #12]	; (8001c78 <pingNode+0x2c>)
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8001c6a:	705a      	strb	r2, [r3, #1]
	SX127X_transmitAsync (&myRadio, 3);
 8001c6c:	f003 b832 	b.w	8004cd4 <SX127X_transmitAsync>
 8001c70:	20000044 	.word	0x20000044
 8001c74:	20000ca0 	.word	0x20000ca0
 8001c78:	200009a0 	.word	0x200009a0

08001c7c <button_back>:
 * @brief Called when back button pressed
 * @param  None
 * @retval None
 */
void button_back ()
{
 8001c7c:	b530      	push	{r4, r5, lr}
 8001c7e:	b085      	sub	sp, #20
	ssd1306_Init ();
 8001c80:	f002 fae0 	bl	8004244 <ssd1306_Init>
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 8001c84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c88:	2400      	movs	r4, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <button_back+0x9c>)
 8001c8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c92:	4619      	mov	r1, r3
 8001c94:	4821      	ldr	r0, [pc, #132]	; (8001d1c <button_back+0xa0>)
 8001c96:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001c9a:	f7fe fe7f 	bl	800099c <UC1609_Init>
	menuPosition = 0;
 8001c9e:	4820      	ldr	r0, [pc, #128]	; (8001d20 <button_back+0xa4>)
 8001ca0:	7004      	strb	r4, [r0, #0]
	alarmOff ();
 8001ca2:	f7ff fdfd 	bl	80018a0 <alarmOff>
	switch (screenMode)
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	; (8001d24 <button_back+0xa8>)
 8001ca8:	4622      	mov	r2, r4
 8001caa:	781d      	ldrb	r5, [r3, #0]
 8001cac:	4601      	mov	r1, r0
 8001cae:	2d1e      	cmp	r5, #30
 8001cb0:	d82f      	bhi.n	8001d12 <button_back+0x96>
 8001cb2:	e8df f005 	tbb	[pc, r5]
 8001cb6:	1213      	.short	0x1213
 8001cb8:	10101010 	.word	0x10101010
 8001cbc:	1a1a1a1a 	.word	0x1a1a1a1a
 8001cc0:	1d1a1a1a 	.word	0x1d1a1a1a
 8001cc4:	2020201d 	.word	0x2020201d
 8001cc8:	26262323 	.word	0x26262323
 8001ccc:	10102626 	.word	0x10102626
 8001cd0:	122e1010 	.word	0x122e1010
 8001cd4:	13          	.byte	0x13
 8001cd5:	00          	.byte	0x00
		case smBaseMenu:
		case smNodeMenu:
		case smNetworkMenu:

			menuPosition = 0;
			screenMode = smMainMenu;
 8001cd6:	2201      	movs	r2, #1
			menuPosition = 0;
 8001cd8:	700c      	strb	r4, [r1, #0]
			screenMode = smMainMenu;
 8001cda:	701a      	strb	r2, [r3, #0]

		default:
			screenMode--;
	}

	flag.lcdRefreshRequest = 1;
 8001cdc:	4a12      	ldr	r2, [pc, #72]	; (8001d28 <button_back+0xac>)
 8001cde:	7853      	ldrb	r3, [r2, #1]
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	7053      	strb	r3, [r2, #1]
}
 8001ce6:	b005      	add	sp, #20
 8001ce8:	bd30      	pop	{r4, r5, pc}
			screenMode = smRadioMenu;
 8001cea:	2202      	movs	r2, #2
			menuPosition = 0;
 8001cec:	700c      	strb	r4, [r1, #0]
			screenMode = smRadioMenu;
 8001cee:	e7f4      	b.n	8001cda <button_back+0x5e>
			screenMode = smBaseMenu;
 8001cf0:	2203      	movs	r2, #3
			menuPosition = 0;
 8001cf2:	700c      	strb	r4, [r1, #0]
			screenMode = smBaseMenu;
 8001cf4:	e7f1      	b.n	8001cda <button_back+0x5e>
			screenMode = smNodeMenu;
 8001cf6:	2204      	movs	r2, #4
			menuPosition = 0;
 8001cf8:	700c      	strb	r4, [r1, #0]
			screenMode = smNodeMenu;
 8001cfa:	e7ee      	b.n	8001cda <button_back+0x5e>
			menuPosition = 0;
 8001cfc:	700c      	strb	r4, [r1, #0]
				screenMode = smNetworkMenu;
 8001cfe:	2205      	movs	r2, #5
 8001d00:	e7eb      	b.n	8001cda <button_back+0x5e>
			if (cursorPos)
 8001d02:	490a      	ldr	r1, [pc, #40]	; (8001d2c <button_back+0xb0>)
 8001d04:	f991 2000 	ldrsb.w	r2, [r1]
 8001d08:	2a00      	cmp	r2, #0
 8001d0a:	d0f8      	beq.n	8001cfe <button_back+0x82>
				cursorPos--;
 8001d0c:	3a01      	subs	r2, #1
 8001d0e:	700a      	strb	r2, [r1, #0]
 8001d10:	e7e4      	b.n	8001cdc <button_back+0x60>
			screenMode--;
 8001d12:	3d01      	subs	r5, #1
 8001d14:	701d      	strb	r5, [r3, #0]
 8001d16:	e7e1      	b.n	8001cdc <button_back+0x60>
 8001d18:	40010c00 	.word	0x40010c00
 8001d1c:	20000a24 	.word	0x20000a24
 8001d20:	20000152 	.word	0x20000152
 8001d24:	2000016a 	.word	0x2000016a
 8001d28:	20000b84 	.word	0x20000b84
 8001d2c:	20000123 	.word	0x20000123

08001d30 <button0>:

void button0 ()
{
	pingNode (selectedNode);
 8001d30:	4b02      	ldr	r3, [pc, #8]	; (8001d3c <button0+0xc>)
 8001d32:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001d36:	f7ff bf89 	b.w	8001c4c <pingNode>
 8001d3a:	bf00      	nop
 8001d3c:	2000016e 	.word	0x2000016e

08001d40 <button1>:
}

void button1 ()
{
 8001d40:	b508      	push	{r3, lr}
	lastNodeChangeTick = HAL_GetTick ();
 8001d42:	f003 fc9d 	bl	8005680 <HAL_GetTick>
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <button1+0x38>)
	nodes[selectedNode].masked = (nodes[selectedNode].masked == 3) ? 0 : nodes[selectedNode].masked + 1;
 8001d48:	4a0c      	ldr	r2, [pc, #48]	; (8001d7c <button1+0x3c>)
	lastNodeChangeTick = HAL_GetTick ();
 8001d4a:	6018      	str	r0, [r3, #0]
	nodes[selectedNode].masked = (nodes[selectedNode].masked == 3) ? 0 : nodes[selectedNode].masked + 1;
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <button1+0x40>)
 8001d4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d52:	0159      	lsls	r1, r3, #5
 8001d54:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8001d58:	7b1b      	ldrb	r3, [r3, #12]
 8001d5a:	440a      	add	r2, r1
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	bf0e      	itee	eq
 8001d60:	2300      	moveq	r3, #0
 8001d62:	3301      	addne	r3, #1
 8001d64:	b2db      	uxtbne	r3, r3
 8001d66:	7313      	strb	r3, [r2, #12]
	saveNodeData ();
 8001d68:	f7ff f8ec 	bl	8000f44 <saveNodeData>
	flag.lcdRefreshRequest = 1;
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <button1+0x44>)
 8001d6e:	7853      	ldrb	r3, [r2, #1]
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	7053      	strb	r3, [r2, #1]
}
 8001d76:	bd08      	pop	{r3, pc}
 8001d78:	2000012c 	.word	0x2000012c
 8001d7c:	20000ca0 	.word	0x20000ca0
 8001d80:	2000016e 	.word	0x2000016e
 8001d84:	20000b84 	.word	0x20000b84

08001d88 <button2>:

void button2 ()
{
 8001d88:	b508      	push	{r3, lr}
	lastNodeChangeTick = HAL_GetTick ();
 8001d8a:	f003 fc79 	bl	8005680 <HAL_GetTick>
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <button2+0x24>)
 8001d90:	6018      	str	r0, [r3, #0]
	changeDisarmNode (selectedNode);
 8001d92:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <button2+0x28>)
 8001d94:	f9b3 0000 	ldrsh.w	r0, [r3]
 8001d98:	f7ff ff38 	bl	8001c0c <changeDisarmNode>
	saveNodeData ();
 8001d9c:	f7ff f8d2 	bl	8000f44 <saveNodeData>
	flag.lcdRefreshRequest = 1;
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <button2+0x2c>)
 8001da2:	7853      	ldrb	r3, [r2, #1]
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	7053      	strb	r3, [r2, #1]

}
 8001daa:	bd08      	pop	{r3, pc}
 8001dac:	2000012c 	.word	0x2000012c
 8001db0:	2000016e 	.word	0x2000016e
 8001db4:	20000b84 	.word	0x20000b84

08001db8 <button3>:

void button3 ()
{
 8001db8:	b508      	push	{r3, lr}
lastNodeChangeTick=HAL_GetTick()-NODE_INFO_HOLD_TIME;
 8001dba:	f003 fc61 	bl	8005680 <HAL_GetTick>
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <button3+0x20>)
idleMode=!idleMode;
 8001dc0:	4a06      	ldr	r2, [pc, #24]	; (8001ddc <button3+0x24>)
lastNodeChangeTick=HAL_GetTick()-NODE_INFO_HOLD_TIME;
 8001dc2:	f5a0 506a 	sub.w	r0, r0, #14976	; 0x3a80
 8001dc6:	3818      	subs	r0, #24
 8001dc8:	6018      	str	r0, [r3, #0]
idleMode=!idleMode;
 8001dca:	7813      	ldrb	r3, [r2, #0]
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	7013      	strb	r3, [r2, #0]
}
 8001dd4:	bd08      	pop	{r3, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000012c 	.word	0x2000012c
 8001ddc:	20000125 	.word	0x20000125

08001de0 <drawGraph>:

void drawGraph()
{
 8001de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ssd1306_Clean ();
 8001de4:	f002 fae4 	bl	80043b0 <ssd1306_Clean>
								UC1609_DrawFilledRectangle (27, i * 8 + 3, 27 + length, i * 8 + 5);

							}
					}
#else
				ssd1306_Clean ();
 8001de8:	f002 fae2 	bl	80043b0 <ssd1306_Clean>
				ssd1306_DrawLine (6, 0, 6, 63);
 8001dec:	2206      	movs	r2, #6
 8001dee:	233f      	movs	r3, #63	; 0x3f
 8001df0:	4610      	mov	r0, r2
 8001df2:	2100      	movs	r1, #0
 8001df4:	f002 fb22 	bl	800443c <ssd1306_DrawLine>
				ssd1306_DrawDottedLine (106, 0, 106, 63);
 8001df8:	226a      	movs	r2, #106	; 0x6a
 8001dfa:	4d41      	ldr	r5, [pc, #260]	; (8001f00 <drawGraph+0x120>)
 8001dfc:	233f      	movs	r3, #63	; 0x3f
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4610      	mov	r0, r2
 8001e02:	f002 fb5a 	bl	80044ba <ssd1306_DrawDottedLine>
 8001e06:	462f      	mov	r7, r5
				for (int i = 0; i < MAX_NODES; i++)
 8001e08:	2600      	movs	r6, #0
					{
						int16_t delay = ((long) nodes[i].NextMessageTick - (long) HAL_GetTick ()) / 1000;
 8001e0a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8

						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
							{
								int16_t length = delay * 100 / (int)nodeSettings.workInterval;
 8001e0e:	f04f 0a64 	mov.w	sl, #100	; 0x64
						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
 8001e12:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8001f04 <drawGraph+0x124>
						int16_t delay = ((long) nodes[i].NextMessageTick - (long) HAL_GetTick ()) / 1000;
 8001e16:	687c      	ldr	r4, [r7, #4]
 8001e18:	f003 fc32 	bl	8005680 <HAL_GetTick>
						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
 8001e1c:	7c7b      	ldrb	r3, [r7, #17]
 8001e1e:	b313      	cbz	r3, 8001e66 <drawGraph+0x86>
						int16_t delay = ((long) nodes[i].NextMessageTick - (long) HAL_GetTick ()) / 1000;
 8001e20:	1a23      	subs	r3, r4, r0
 8001e22:	fb93 f3f8 	sdiv	r3, r3, r8
 8001e26:	b21b      	sxth	r3, r3
						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
 8001e28:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001e2c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8001e30:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001e34:	b289      	uxth	r1, r1
 8001e36:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8001e3a:	d214      	bcs.n	8001e66 <drawGraph+0x86>
								int16_t length = delay * 100 / (int)nodeSettings.workInterval;
 8001e3c:	fb0a f203 	mul.w	r2, sl, r3
 8001e40:	fb92 f2f0 	sdiv	r2, r2, r0
 8001e44:	b212      	sxth	r2, r2
 8001e46:	2a78      	cmp	r2, #120	; 0x78
								if (length < -5)
									length = -5;
								if (length > 120)
									length = 120;
								ssd1306_DrawLine (6, i * 2, 6 + length, i * 2);
 8001e48:	f06f 0104 	mvn.w	r1, #4
 8001e4c:	bfa8      	it	ge
 8001e4e:	2278      	movge	r2, #120	; 0x78
 8001e50:	428a      	cmp	r2, r1
 8001e52:	bfb8      	it	lt
 8001e54:	460a      	movlt	r2, r1
 8001e56:	0073      	lsls	r3, r6, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	3206      	adds	r2, #6
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	2006      	movs	r0, #6
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	f002 faeb 	bl	800443c <ssd1306_DrawLine>
				for (int i = 0; i < MAX_NODES; i++)
 8001e66:	3601      	adds	r6, #1
 8001e68:	2e20      	cmp	r6, #32
 8001e6a:	f107 0720 	add.w	r7, r7, #32
 8001e6e:	d1d2      	bne.n	8001e16 <drawGraph+0x36>
							}
					}



				UC1609_Clean();
 8001e70:	f7fe fe1e 	bl	8000ab0 <UC1609_Clean>
				UC1609_DrawLine (26, 0, 26, 63);
 8001e74:	221a      	movs	r2, #26
 8001e76:	233f      	movs	r3, #63	; 0x3f
 8001e78:	4610      	mov	r0, r2
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	f7fe fea2 	bl	8000bc4 <UC1609_DrawLine>
				UC1609_DrawDottedLine (146, 0, 146, 63);
 8001e80:	2292      	movs	r2, #146	; 0x92
 8001e82:	233f      	movs	r3, #63	; 0x3f
 8001e84:	2100      	movs	r1, #0
 8001e86:	4610      	mov	r0, r2
 8001e88:	f7fe fedb 	bl	8000c42 <UC1609_DrawDottedLine>
				for (int i = 0; i < MAX_NODES; i++)
 8001e8c:	2600      	movs	r6, #0
					{
						int16_t delay = ((long) nodes[i].NextMessageTick - (long) HAL_GetTick ()) / 1000;
 8001e8e:	f44f 777a 	mov.w	r7, #1000	; 0x3e8

						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
							{
								int16_t length = delay * 120 / (int)nodeSettings.workInterval;
 8001e92:	f04f 0978 	mov.w	r9, #120	; 0x78
						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
 8001e96:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8001f04 <drawGraph+0x124>
						int16_t delay = ((long) nodes[i].NextMessageTick - (long) HAL_GetTick ()) / 1000;
 8001e9a:	686c      	ldr	r4, [r5, #4]
 8001e9c:	f003 fbf0 	bl	8005680 <HAL_GetTick>
						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
 8001ea0:	7c6b      	ldrb	r3, [r5, #17]
 8001ea2:	b313      	cbz	r3, 8001eea <drawGraph+0x10a>
						int16_t delay = ((long) nodes[i].NextMessageTick - (long) HAL_GetTick ()) / 1000;
 8001ea4:	1a23      	subs	r3, r4, r0
 8001ea6:	fb93 f3f7 	sdiv	r3, r3, r7
 8001eaa:	b21b      	sxth	r3, r3
						if (nodes[i].activated && abs (delay) < nodeSettings.workInterval * 2)
 8001eac:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8001eb0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001eb4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001eb8:	b289      	uxth	r1, r1
 8001eba:	ebb1 0f40 	cmp.w	r1, r0, lsl #1
 8001ebe:	d214      	bcs.n	8001eea <drawGraph+0x10a>
								int16_t length = delay * 120 / (int)nodeSettings.workInterval;
 8001ec0:	fb09 f203 	mul.w	r2, r9, r3
 8001ec4:	fb92 f2f0 	sdiv	r2, r2, r0
 8001ec8:	b212      	sxth	r2, r2
 8001eca:	2aa5      	cmp	r2, #165	; 0xa5
								if (length < -25)
									length = -25;
								if (length > 165)
									length = 165;
								UC1609_DrawLine (26, i * 2, 26 + length, i * 2);
 8001ecc:	f06f 0118 	mvn.w	r1, #24
 8001ed0:	bfa8      	it	ge
 8001ed2:	22a5      	movge	r2, #165	; 0xa5
 8001ed4:	428a      	cmp	r2, r1
 8001ed6:	bfb8      	it	lt
 8001ed8:	460a      	movlt	r2, r1
 8001eda:	0073      	lsls	r3, r6, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	321a      	adds	r2, #26
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	201a      	movs	r0, #26
 8001ee4:	b2d2      	uxtb	r2, r2
 8001ee6:	f7fe fe6d 	bl	8000bc4 <UC1609_DrawLine>
				for (int i = 0; i < MAX_NODES; i++)
 8001eea:	3601      	adds	r6, #1
 8001eec:	2e20      	cmp	r6, #32
 8001eee:	f105 0520 	add.w	r5, r5, #32
 8001ef2:	d1d2      	bne.n	8001e9a <drawGraph+0xba>
							}
					}
#endif
				ssd1306_Update ();
 8001ef4:	f002 fa6a 	bl	80043cc <ssd1306_Update>
				UC1609_UpdateScreen();
}
 8001ef8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
				UC1609_UpdateScreen();
 8001efc:	f7fe bda6 	b.w	8000a4c <UC1609_UpdateScreen>
 8001f00:	20000ca0 	.word	0x20000ca0
 8001f04:	20000c7c 	.word	0x20000c7c

08001f08 <lcdRoutine>:
 * @brief Forms and updates information on LCD, depends by selected screen mode
 * @param None
 * @retval None
 */
void lcdRoutine ()
{
 8001f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	_Bool graphMode=false;
	clearStrings ();
 8001f0a:	f7ff f8b5 	bl	8001078 <clearStrings>
	switch (screenMode)
 8001f0e:	4bb0      	ldr	r3, [pc, #704]	; (80021d0 <lcdRoutine+0x2c8>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b1e      	cmp	r3, #30
 8001f14:	d87d      	bhi.n	8002012 <lcdRoutine+0x10a>
 8001f16:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001f1a:	001f      	.short	0x001f
 8001f1c:	01290107 	.word	0x01290107
 8001f20:	01dd01cf 	.word	0x01dd01cf
 8001f24:	021001f0 	.word	0x021001f0
 8001f28:	02560249 	.word	0x02560249
 8001f2c:	026c0263 	.word	0x026c0263
 8001f30:	027d0275 	.word	0x027d0275
 8001f34:	02ae029e 	.word	0x02ae029e
 8001f38:	02c102b9 	.word	0x02c102b9
 8001f3c:	02d302cd 	.word	0x02d302cd
 8001f40:	02fd02ea 	.word	0x02fd02ea
 8001f44:	03b4039f 	.word	0x03b4039f
 8001f48:	03da03c9 	.word	0x03da03c9
 8001f4c:	03eb03f2 	.word	0x03eb03f2
 8001f50:	010203e0 	.word	0x010203e0
 8001f54:	0464043a 	.word	0x0464043a
	{
		case smRegular:

			if (HAL_GetTick () - lastNodeChangeTick < NODE_INFO_HOLD_TIME)
 8001f58:	f003 fb92 	bl	8005680 <HAL_GetTick>
 8001f5c:	4b9d      	ldr	r3, [pc, #628]	; (80021d4 <lcdRoutine+0x2cc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	1ac0      	subs	r0, r0, r3
 8001f62:	f643 2397 	movw	r3, #14999	; 0x3a97
 8001f66:	4298      	cmp	r0, r3
 8001f68:	d85f      	bhi.n	800202a <lcdRoutine+0x122>
				{
					if (nodes[selectedNode].activated)
 8001f6a:	4d9b      	ldr	r5, [pc, #620]	; (80021d8 <lcdRoutine+0x2d0>)
 8001f6c:	4c9b      	ldr	r4, [pc, #620]	; (80021dc <lcdRoutine+0x2d4>)
 8001f6e:	f9b5 2000 	ldrsh.w	r2, [r5]
 8001f72:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8001f76:	7c59      	ldrb	r1, [r3, #17]
 8001f78:	2900      	cmp	r1, #0
 8001f7a:	d053      	beq.n	8002024 <lcdRoutine+0x11c>
						{
							sprintf (string[0], "Node %d RSSI:%ddB", selectedNode, nodes[selectedNode].rssi);
 8001f7c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001f80:	4997      	ldr	r1, [pc, #604]	; (80021e0 <lcdRoutine+0x2d8>)
 8001f82:	4898      	ldr	r0, [pc, #608]	; (80021e4 <lcdRoutine+0x2dc>)
 8001f84:	f006 f908 	bl	8008198 <siprintf>
							if (nodes[selectedNode].opened)
 8001f88:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001f8c:	015e      	lsls	r6, r3, #5
 8001f8e:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001f92:	7bdb      	ldrb	r3, [r3, #15]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d041      	beq.n	800201c <lcdRoutine+0x114>
								sprintf (string[1], "Door: Opened");
 8001f98:	4993      	ldr	r1, [pc, #588]	; (80021e8 <lcdRoutine+0x2e0>)
							else
								sprintf (string[1], "Door: Closed");
 8001f9a:	4894      	ldr	r0, [pc, #592]	; (80021ec <lcdRoutine+0x2e4>)
 8001f9c:	f006 f91c 	bl	80081d8 <strcpy>
							if (nodes[selectedNode].powered)
 8001fa0:	19a3      	adds	r3, r4, r6
 8001fa2:	7c1b      	ldrb	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d03b      	beq.n	8002020 <lcdRoutine+0x118>
								sprintf (string[2], "Powered by PS");
 8001fa8:	4991      	ldr	r1, [pc, #580]	; (80021f0 <lcdRoutine+0x2e8>)
							else
								sprintf (string[2], "Powered by battery");
							sprintf (string[3], "Voltage:%s V", floatToString2 (nodes[selectedNode].voltage));
 8001faa:	4426      	add	r6, r4
								sprintf (string[2], "Powered by battery");
 8001fac:	4891      	ldr	r0, [pc, #580]	; (80021f4 <lcdRoutine+0x2ec>)
 8001fae:	f006 f913 	bl	80081d8 <strcpy>
							sprintf (string[3], "Voltage:%s V", floatToString2 (nodes[selectedNode].voltage));
 8001fb2:	6970      	ldr	r0, [r6, #20]
 8001fb4:	f7fe fe84 	bl	8000cc0 <floatToString2>
 8001fb8:	498f      	ldr	r1, [pc, #572]	; (80021f8 <lcdRoutine+0x2f0>)
 8001fba:	4602      	mov	r2, r0
 8001fbc:	488f      	ldr	r0, [pc, #572]	; (80021fc <lcdRoutine+0x2f4>)
 8001fbe:	f006 f8eb 	bl	8008198 <siprintf>
							sprintf (string[4], "Temperature:%s C", floatToString1 (nodes[selectedNode].temperature));
 8001fc2:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001fc6:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001fca:	69d8      	ldr	r0, [r3, #28]
 8001fcc:	f7fe fe9c 	bl	8000d08 <floatToString1>
 8001fd0:	498b      	ldr	r1, [pc, #556]	; (8002200 <lcdRoutine+0x2f8>)
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	488b      	ldr	r0, [pc, #556]	; (8002204 <lcdRoutine+0x2fc>)
 8001fd6:	f006 f8df 	bl	8008198 <siprintf>
							sprintf (string[5], "Next msg in %li", ((long) nodes[selectedNode].NextMessageTick - (long) HAL_GetTick ()) / 1000);
 8001fda:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001fde:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001fe2:	685e      	ldr	r6, [r3, #4]
 8001fe4:	f003 fb4c 	bl	8005680 <HAL_GetTick>
 8001fe8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fec:	1a36      	subs	r6, r6, r0
 8001fee:	fb96 f2f2 	sdiv	r2, r6, r2
 8001ff2:	4985      	ldr	r1, [pc, #532]	; (8002208 <lcdRoutine+0x300>)
 8001ff4:	4885      	ldr	r0, [pc, #532]	; (800220c <lcdRoutine+0x304>)
 8001ff6:	f006 f8cf 	bl	8008198 <siprintf>
							sprintf (string[6], "Alarm: %s", maskNames[nodes[selectedNode].masked]);
 8001ffa:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001ffe:	4984      	ldr	r1, [pc, #528]	; (8002210 <lcdRoutine+0x308>)
 8002000:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8002004:	7b22      	ldrb	r2, [r4, #12]
 8002006:	4b83      	ldr	r3, [pc, #524]	; (8002214 <lcdRoutine+0x30c>)
 8002008:	4883      	ldr	r0, [pc, #524]	; (8002218 <lcdRoutine+0x310>)
 800200a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]

							sprintf (string[4], "Last message from %d", lastMessageFrom);
							sprintf (string[5], "%s, %s", nodes[lastMessageFrom].opened ? "Door opened" : "Door closed",
												nodes[lastMessageFrom].powered ? "PS" : "Battery");
							sprintf (string[6], "T:%d, V:%s", (int) nodes[lastMessageFrom].temperature, floatToString1 (nodes[lastMessageFrom].voltage));
							sprintf (string[7], "Delay:%d", nodes[lastMessageFrom].delay);
 800200e:	f006 f8c3 	bl	8008198 <siprintf>

			break;
	}
	if (!graphMode)
		updateLcd ();
}
 8002012:	b003      	add	sp, #12
 8002014:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		updateLcd ();
 8002018:	f7ff b840 	b.w	800109c <updateLcd>
								sprintf (string[1], "Door: Closed");
 800201c:	497f      	ldr	r1, [pc, #508]	; (800221c <lcdRoutine+0x314>)
 800201e:	e7bc      	b.n	8001f9a <lcdRoutine+0x92>
								sprintf (string[2], "Powered by battery");
 8002020:	497f      	ldr	r1, [pc, #508]	; (8002220 <lcdRoutine+0x318>)
 8002022:	e7c2      	b.n	8001faa <lcdRoutine+0xa2>
						sprintf (string[0], "Node %d not activated", selectedNode);
 8002024:	497f      	ldr	r1, [pc, #508]	; (8002224 <lcdRoutine+0x31c>)
 8002026:	486f      	ldr	r0, [pc, #444]	; (80021e4 <lcdRoutine+0x2dc>)
 8002028:	e7f1      	b.n	800200e <lcdRoutine+0x106>
			else if(idleMode==0)
 800202a:	4b7f      	ldr	r3, [pc, #508]	; (8002228 <lcdRoutine+0x320>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d172      	bne.n	8002118 <lcdRoutine+0x210>
					sprintf (string[0], "Up:%lu d & %lu:%02lu:%02lu ", upTime / 86400, upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002032:	203c      	movs	r0, #60	; 0x3c
 8002034:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002038:	4b7c      	ldr	r3, [pc, #496]	; (800222c <lcdRoutine+0x324>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2318      	movs	r3, #24
 800203e:	fbb2 f5f0 	udiv	r5, r2, r0
 8002042:	fbb2 f1f1 	udiv	r1, r2, r1
 8002046:	fb00 2415 	mls	r4, r0, r5, r2
 800204a:	9401      	str	r4, [sp, #4]
 800204c:	fbb5 f4f0 	udiv	r4, r5, r0
 8002050:	fbb1 f6f3 	udiv	r6, r1, r3
 8002054:	fb00 5014 	mls	r0, r0, r4, r5
 8002058:	fb03 1316 	mls	r3, r3, r6, r1
 800205c:	4974      	ldr	r1, [pc, #464]	; (8002230 <lcdRoutine+0x328>)
 800205e:	9000      	str	r0, [sp, #0]
 8002060:	fbb2 f2f1 	udiv	r2, r2, r1
 8002064:	485f      	ldr	r0, [pc, #380]	; (80021e4 <lcdRoutine+0x2dc>)
 8002066:	4973      	ldr	r1, [pc, #460]	; (8002234 <lcdRoutine+0x32c>)
 8002068:	f006 f896 	bl	8008198 <siprintf>
					sprintf (string[1], "Msg:%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 800206c:	4b72      	ldr	r3, [pc, #456]	; (8002238 <lcdRoutine+0x330>)
 800206e:	4a73      	ldr	r2, [pc, #460]	; (800223c <lcdRoutine+0x334>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	6812      	ldr	r2, [r2, #0]
 8002074:	4972      	ldr	r1, [pc, #456]	; (8002240 <lcdRoutine+0x338>)
 8002076:	485d      	ldr	r0, [pc, #372]	; (80021ec <lcdRoutine+0x2e4>)
 8002078:	f006 f88e 	bl	8008198 <siprintf>
					sprintf (string[2], "Max delay: %lu", absoluteMaxDelay);
 800207c:	4b71      	ldr	r3, [pc, #452]	; (8002244 <lcdRoutine+0x33c>)
					if (lastMessageFrom != 255)
 800207e:	4c72      	ldr	r4, [pc, #456]	; (8002248 <lcdRoutine+0x340>)
					sprintf (string[2], "Max delay: %lu", absoluteMaxDelay);
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4972      	ldr	r1, [pc, #456]	; (800224c <lcdRoutine+0x344>)
 8002084:	485b      	ldr	r0, [pc, #364]	; (80021f4 <lcdRoutine+0x2ec>)
 8002086:	f006 f887 	bl	8008198 <siprintf>
					if (lastMessageFrom != 255)
 800208a:	7823      	ldrb	r3, [r4, #0]
 800208c:	2bff      	cmp	r3, #255	; 0xff
 800208e:	d0c0      	beq.n	8002012 <lcdRoutine+0x10a>
							uint8_t next = nextNodeAwaited ();
 8002090:	f7ff f99c 	bl	80013cc <nextNodeAwaited>
							if (next != 255)
 8002094:	28ff      	cmp	r0, #255	; 0xff
							uint8_t next = nextNodeAwaited ();
 8002096:	4606      	mov	r6, r0
							if (next != 255)
 8002098:	4d50      	ldr	r5, [pc, #320]	; (80021dc <lcdRoutine+0x2d4>)
 800209a:	d00e      	beq.n	80020ba <lcdRoutine+0x1b2>
								sprintf (string[3], "Next %d in %li", next, ((long) nodes[next].NextMessageTick - (long) HAL_GetTick ()) / 1000);
 800209c:	eb05 1340 	add.w	r3, r5, r0, lsl #5
 80020a0:	685f      	ldr	r7, [r3, #4]
 80020a2:	f003 faed 	bl	8005680 <HAL_GetTick>
 80020a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020aa:	1a3f      	subs	r7, r7, r0
 80020ac:	fb97 f3f3 	sdiv	r3, r7, r3
 80020b0:	4632      	mov	r2, r6
 80020b2:	4967      	ldr	r1, [pc, #412]	; (8002250 <lcdRoutine+0x348>)
 80020b4:	4851      	ldr	r0, [pc, #324]	; (80021fc <lcdRoutine+0x2f4>)
 80020b6:	f006 f86f 	bl	8008198 <siprintf>
							sprintf (string[4], "Last message from %d", lastMessageFrom);
 80020ba:	7822      	ldrb	r2, [r4, #0]
 80020bc:	4965      	ldr	r1, [pc, #404]	; (8002254 <lcdRoutine+0x34c>)
 80020be:	4851      	ldr	r0, [pc, #324]	; (8002204 <lcdRoutine+0x2fc>)
 80020c0:	f006 f86a 	bl	8008198 <siprintf>
							sprintf (string[5], "%s, %s", nodes[lastMessageFrom].opened ? "Door opened" : "Door closed",
 80020c4:	7823      	ldrb	r3, [r4, #0]
 80020c6:	4a64      	ldr	r2, [pc, #400]	; (8002258 <lcdRoutine+0x350>)
 80020c8:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 80020cc:	7bd8      	ldrb	r0, [r3, #15]
 80020ce:	7c19      	ldrb	r1, [r3, #16]
 80020d0:	4b62      	ldr	r3, [pc, #392]	; (800225c <lcdRoutine+0x354>)
 80020d2:	2900      	cmp	r1, #0
 80020d4:	bf08      	it	eq
 80020d6:	4613      	moveq	r3, r2
 80020d8:	4961      	ldr	r1, [pc, #388]	; (8002260 <lcdRoutine+0x358>)
 80020da:	4a62      	ldr	r2, [pc, #392]	; (8002264 <lcdRoutine+0x35c>)
 80020dc:	2800      	cmp	r0, #0
 80020de:	bf08      	it	eq
 80020e0:	460a      	moveq	r2, r1
 80020e2:	4961      	ldr	r1, [pc, #388]	; (8002268 <lcdRoutine+0x360>)
 80020e4:	4849      	ldr	r0, [pc, #292]	; (800220c <lcdRoutine+0x304>)
 80020e6:	f006 f857 	bl	8008198 <siprintf>
							sprintf (string[6], "T:%d, V:%s", (int) nodes[lastMessageFrom].temperature, floatToString1 (nodes[lastMessageFrom].voltage));
 80020ea:	7826      	ldrb	r6, [r4, #0]
 80020ec:	eb05 1646 	add.w	r6, r5, r6, lsl #5
 80020f0:	69f0      	ldr	r0, [r6, #28]
 80020f2:	f7fe fb07 	bl	8000704 <__aeabi_f2iz>
 80020f6:	4607      	mov	r7, r0
 80020f8:	6970      	ldr	r0, [r6, #20]
 80020fa:	f7fe fe05 	bl	8000d08 <floatToString1>
 80020fe:	463a      	mov	r2, r7
 8002100:	4603      	mov	r3, r0
 8002102:	495a      	ldr	r1, [pc, #360]	; (800226c <lcdRoutine+0x364>)
 8002104:	4844      	ldr	r0, [pc, #272]	; (8002218 <lcdRoutine+0x310>)
 8002106:	f006 f847 	bl	8008198 <siprintf>
							sprintf (string[7], "Delay:%d", nodes[lastMessageFrom].delay);
 800210a:	7823      	ldrb	r3, [r4, #0]
 800210c:	4958      	ldr	r1, [pc, #352]	; (8002270 <lcdRoutine+0x368>)
 800210e:	eb05 1543 	add.w	r5, r5, r3, lsl #5
 8002112:	892a      	ldrh	r2, [r5, #8]
 8002114:	4857      	ldr	r0, [pc, #348]	; (8002274 <lcdRoutine+0x36c>)
 8002116:	e77a      	b.n	800200e <lcdRoutine+0x106>
			else if (idleMode==1)
 8002118:	2b01      	cmp	r3, #1
 800211a:	f47f af7a 	bne.w	8002012 <lcdRoutine+0x10a>
}
 800211e:	b003      	add	sp, #12
 8002120:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
drawGraph();
 8002124:	f7ff be5c 	b.w	8001de0 <drawGraph>
			sprintf (string[0], "Main Menu");
 8002128:	4c2e      	ldr	r4, [pc, #184]	; (80021e4 <lcdRoutine+0x2dc>)
 800212a:	4953      	ldr	r1, [pc, #332]	; (8002278 <lcdRoutine+0x370>)
 800212c:	4620      	mov	r0, r4
 800212e:	f006 f853 	bl	80081d8 <strcpy>
			sprintf (string[1], " Radio Settings");
 8002132:	4952      	ldr	r1, [pc, #328]	; (800227c <lcdRoutine+0x374>)
 8002134:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002138:	f006 f84e 	bl	80081d8 <strcpy>
			sprintf (string[2], " Base Settings");
 800213c:	4950      	ldr	r1, [pc, #320]	; (8002280 <lcdRoutine+0x378>)
 800213e:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002142:	f006 f849 	bl	80081d8 <strcpy>
			sprintf (string[3], " Node Settings");
 8002146:	494f      	ldr	r1, [pc, #316]	; (8002284 <lcdRoutine+0x37c>)
 8002148:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 800214c:	f006 f844 	bl	80081d8 <strcpy>
			sprintf (string[4], " Network Settings");
 8002150:	494d      	ldr	r1, [pc, #308]	; (8002288 <lcdRoutine+0x380>)
 8002152:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002156:	f006 f83f 	bl	80081d8 <strcpy>
			sprintf (string[5], " Save Settings");
 800215a:	494c      	ldr	r1, [pc, #304]	; (800228c <lcdRoutine+0x384>)
 800215c:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8002160:	f006 f83a 	bl	80081d8 <strcpy>
			sprintf (string[6], " Info");
 8002164:	494a      	ldr	r1, [pc, #296]	; (8002290 <lcdRoutine+0x388>)
			sprintf (string[6], " Set Host");
 8002166:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 800216a:	e025      	b.n	80021b8 <lcdRoutine+0x2b0>
			sprintf (string[0], "Radio settings");
 800216c:	4c1d      	ldr	r4, [pc, #116]	; (80021e4 <lcdRoutine+0x2dc>)
 800216e:	4949      	ldr	r1, [pc, #292]	; (8002294 <lcdRoutine+0x38c>)
 8002170:	4620      	mov	r0, r4
 8002172:	f006 f831 	bl	80081d8 <strcpy>
			sprintf (string[1], " Frequency");
 8002176:	4948      	ldr	r1, [pc, #288]	; (8002298 <lcdRoutine+0x390>)
 8002178:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800217c:	f006 f82c 	bl	80081d8 <strcpy>
			sprintf (string[2], " Bandwidth");
 8002180:	4946      	ldr	r1, [pc, #280]	; (800229c <lcdRoutine+0x394>)
 8002182:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002186:	f006 f827 	bl	80081d8 <strcpy>
			sprintf (string[3], " Spreading Factor");
 800218a:	4945      	ldr	r1, [pc, #276]	; (80022a0 <lcdRoutine+0x398>)
 800218c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002190:	f006 f822 	bl	80081d8 <strcpy>
			sprintf (string[4], " SyncWord");
 8002194:	4943      	ldr	r1, [pc, #268]	; (80022a4 <lcdRoutine+0x39c>)
 8002196:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800219a:	f006 f81d 	bl	80081d8 <strcpy>
			sprintf (string[5], " Coding rate");
 800219e:	4942      	ldr	r1, [pc, #264]	; (80022a8 <lcdRoutine+0x3a0>)
 80021a0:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 80021a4:	f006 f818 	bl	80081d8 <strcpy>
			sprintf (string[6], " Preamble");
 80021a8:	4940      	ldr	r1, [pc, #256]	; (80022ac <lcdRoutine+0x3a4>)
 80021aa:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 80021ae:	f006 f813 	bl	80081d8 <strcpy>
			sprintf (string[7], " Power");
 80021b2:	493f      	ldr	r1, [pc, #252]	; (80022b0 <lcdRoutine+0x3a8>)
 80021b4:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
			sprintf (string[2], " Warning Delay 2");
 80021b8:	f006 f80e 	bl	80081d8 <strcpy>
			string[1 + menuPosition][0] = 0x83;
 80021bc:	4b3d      	ldr	r3, [pc, #244]	; (80022b4 <lcdRoutine+0x3ac>)
 80021be:	f993 3000 	ldrsb.w	r3, [r3]
 80021c2:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 80021c6:	2383      	movs	r3, #131	; 0x83
 80021c8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	if (!graphMode)
 80021cc:	e721      	b.n	8002012 <lcdRoutine+0x10a>
 80021ce:	bf00      	nop
 80021d0:	2000016a 	.word	0x2000016a
 80021d4:	2000012c 	.word	0x2000012c
 80021d8:	2000016e 	.word	0x2000016e
 80021dc:	20000ca0 	.word	0x20000ca0
 80021e0:	08009b08 	.word	0x08009b08
 80021e4:	20000170 	.word	0x20000170
 80021e8:	08009b1a 	.word	0x08009b1a
 80021ec:	200001b0 	.word	0x200001b0
 80021f0:	08009b34 	.word	0x08009b34
 80021f4:	200001f0 	.word	0x200001f0
 80021f8:	08009b55 	.word	0x08009b55
 80021fc:	20000230 	.word	0x20000230
 8002200:	08009b62 	.word	0x08009b62
 8002204:	20000270 	.word	0x20000270
 8002208:	08009b73 	.word	0x08009b73
 800220c:	200002b0 	.word	0x200002b0
 8002210:	0800a002 	.word	0x0800a002
 8002214:	2000002c 	.word	0x2000002c
 8002218:	200002f0 	.word	0x200002f0
 800221c:	08009b27 	.word	0x08009b27
 8002220:	08009b42 	.word	0x08009b42
 8002224:	08009b83 	.word	0x08009b83
 8002228:	20000125 	.word	0x20000125
 800222c:	20000b78 	.word	0x20000b78
 8002230:	00015180 	.word	0x00015180
 8002234:	08009b99 	.word	0x08009b99
 8002238:	2000015c 	.word	0x2000015c
 800223c:	20000160 	.word	0x20000160
 8002240:	08009bb5 	.word	0x08009bb5
 8002244:	20000114 	.word	0x20000114
 8002248:	20000028 	.word	0x20000028
 800224c:	08009bc1 	.word	0x08009bc1
 8002250:	08009bd0 	.word	0x08009bd0
 8002254:	08009bdf 	.word	0x08009bdf
 8002258:	08009aef 	.word	0x08009aef
 800225c:	08009b3f 	.word	0x08009b3f
 8002260:	08009ae3 	.word	0x08009ae3
 8002264:	08009ad7 	.word	0x08009ad7
 8002268:	08009bf4 	.word	0x08009bf4
 800226c:	08009bfb 	.word	0x08009bfb
 8002270:	08009c06 	.word	0x08009c06
 8002274:	20000330 	.word	0x20000330
 8002278:	08009c0f 	.word	0x08009c0f
 800227c:	08009c19 	.word	0x08009c19
 8002280:	08009c29 	.word	0x08009c29
 8002284:	08009c38 	.word	0x08009c38
 8002288:	08009c47 	.word	0x08009c47
 800228c:	08009c59 	.word	0x08009c59
 8002290:	08009c68 	.word	0x08009c68
 8002294:	08009c6e 	.word	0x08009c6e
 8002298:	08009c7d 	.word	0x08009c7d
 800229c:	08009c88 	.word	0x08009c88
 80022a0:	08009c93 	.word	0x08009c93
 80022a4:	08009ca5 	.word	0x08009ca5
 80022a8:	08009caf 	.word	0x08009caf
 80022ac:	08009cbc 	.word	0x08009cbc
 80022b0:	08009cc6 	.word	0x08009cc6
 80022b4:	20000152 	.word	0x20000152
			sprintf (string[0], "Base settings");
 80022b8:	4ca3      	ldr	r4, [pc, #652]	; (8002548 <lcdRoutine+0x640>)
 80022ba:	49a4      	ldr	r1, [pc, #656]	; (800254c <lcdRoutine+0x644>)
 80022bc:	4620      	mov	r0, r4
 80022be:	f005 ff8b 	bl	80081d8 <strcpy>
			sprintf (string[1], " Warning Delay 1");
 80022c2:	49a3      	ldr	r1, [pc, #652]	; (8002550 <lcdRoutine+0x648>)
 80022c4:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80022c8:	f005 ff86 	bl	80081d8 <strcpy>
			sprintf (string[2], " Warning Delay 2");
 80022cc:	49a1      	ldr	r1, [pc, #644]	; (8002554 <lcdRoutine+0x64c>)
 80022ce:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80022d2:	e771      	b.n	80021b8 <lcdRoutine+0x2b0>
			sprintf (string[0], "Node settings");
 80022d4:	4c9c      	ldr	r4, [pc, #624]	; (8002548 <lcdRoutine+0x640>)
 80022d6:	49a0      	ldr	r1, [pc, #640]	; (8002558 <lcdRoutine+0x650>)
 80022d8:	4620      	mov	r0, r4
 80022da:	f005 ff7d 	bl	80081d8 <strcpy>
			sprintf (string[1], " Working Interval");
 80022de:	499f      	ldr	r1, [pc, #636]	; (800255c <lcdRoutine+0x654>)
 80022e0:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80022e4:	f005 ff78 	bl	80081d8 <strcpy>
			sprintf (string[2], " Use LED");
 80022e8:	499d      	ldr	r1, [pc, #628]	; (8002560 <lcdRoutine+0x658>)
 80022ea:	f104 0080 	add.w	r0, r4, #128	; 0x80
 80022ee:	f005 ff73 	bl	80081d8 <strcpy>
			sprintf (string[3], " Clean saved data");
 80022f2:	499c      	ldr	r1, [pc, #624]	; (8002564 <lcdRoutine+0x65c>)
 80022f4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80022f8:	e75e      	b.n	80021b8 <lcdRoutine+0x2b0>
			sprintf (string[0], "Network settings");
 80022fa:	4c93      	ldr	r4, [pc, #588]	; (8002548 <lcdRoutine+0x640>)
 80022fc:	499a      	ldr	r1, [pc, #616]	; (8002568 <lcdRoutine+0x660>)
 80022fe:	4620      	mov	r0, r4
 8002300:	f005 ff6a 	bl	80081d8 <strcpy>
			sprintf (string[1], " Refresh Network List");
 8002304:	4999      	ldr	r1, [pc, #612]	; (800256c <lcdRoutine+0x664>)
 8002306:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800230a:	f005 ff65 	bl	80081d8 <strcpy>
			sprintf (string[2], " Select Network");
 800230e:	4998      	ldr	r1, [pc, #608]	; (8002570 <lcdRoutine+0x668>)
 8002310:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002314:	f005 ff60 	bl	80081d8 <strcpy>
			sprintf (string[3], " Set WiFi Password");
 8002318:	4996      	ldr	r1, [pc, #600]	; (8002574 <lcdRoutine+0x66c>)
 800231a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 800231e:	f005 ff5b 	bl	80081d8 <strcpy>
			sprintf (string[4], " Set Server Password");
 8002322:	4995      	ldr	r1, [pc, #596]	; (8002578 <lcdRoutine+0x670>)
 8002324:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002328:	f005 ff56 	bl	80081d8 <strcpy>
			sprintf (string[5], " Set BaseID");
 800232c:	4993      	ldr	r1, [pc, #588]	; (800257c <lcdRoutine+0x674>)
 800232e:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8002332:	f005 ff51 	bl	80081d8 <strcpy>
			sprintf (string[6], " Set Host");
 8002336:	4992      	ldr	r1, [pc, #584]	; (8002580 <lcdRoutine+0x678>)
 8002338:	e715      	b.n	8002166 <lcdRoutine+0x25e>
			sprintf (string[0], "Frequency");
 800233a:	4992      	ldr	r1, [pc, #584]	; (8002584 <lcdRoutine+0x67c>)
 800233c:	4882      	ldr	r0, [pc, #520]	; (8002548 <lcdRoutine+0x640>)
 800233e:	f005 ff4b 	bl	80081d8 <strcpy>
			sprintf (string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000, (settings.realFrequency / 10000) % 100);
 8002342:	f242 7110 	movw	r1, #10000	; 0x2710
 8002346:	4b90      	ldr	r3, [pc, #576]	; (8002588 <lcdRoutine+0x680>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2364      	movs	r3, #100	; 0x64
 800234c:	fbb2 f1f1 	udiv	r1, r2, r1
 8002350:	fbb1 f0f3 	udiv	r0, r1, r3
 8002354:	fb03 1310 	mls	r3, r3, r0, r1
 8002358:	498c      	ldr	r1, [pc, #560]	; (800258c <lcdRoutine+0x684>)
 800235a:	488d      	ldr	r0, [pc, #564]	; (8002590 <lcdRoutine+0x688>)
 800235c:	fbb2 f2f1 	udiv	r2, r2, r1
 8002360:	498c      	ldr	r1, [pc, #560]	; (8002594 <lcdRoutine+0x68c>)
 8002362:	f005 ff19 	bl	8008198 <siprintf>
			if (currentInterval != BAD_INTERVAL)
 8002366:	4e8c      	ldr	r6, [pc, #560]	; (8002598 <lcdRoutine+0x690>)
 8002368:	f996 3000 	ldrsb.w	r3, [r6]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	d018      	beq.n	80023a2 <lcdRoutine+0x49a>
					sprintf (string[2], "Power:%u dB", legalFreq.interval[currentInterval].maxPower);
 8002370:	250c      	movs	r5, #12
 8002372:	4c8a      	ldr	r4, [pc, #552]	; (800259c <lcdRoutine+0x694>)
 8002374:	498a      	ldr	r1, [pc, #552]	; (80025a0 <lcdRoutine+0x698>)
 8002376:	fb05 4303 	mla	r3, r5, r3, r4
 800237a:	488a      	ldr	r0, [pc, #552]	; (80025a4 <lcdRoutine+0x69c>)
 800237c:	7b1a      	ldrb	r2, [r3, #12]
 800237e:	f005 ff0b 	bl	8008198 <siprintf>
					sprintf (string[3], "Air use.%u.%u%%", legalFreq.interval[currentInterval].maxAirUse / 10,
 8002382:	f996 3000 	ldrsb.w	r3, [r6]
 8002386:	4888      	ldr	r0, [pc, #544]	; (80025a8 <lcdRoutine+0x6a0>)
 8002388:	fb05 4303 	mla	r3, r5, r3, r4
 800238c:	89d9      	ldrh	r1, [r3, #14]
 800238e:	230a      	movs	r3, #10
 8002390:	fbb1 f2f3 	udiv	r2, r1, r3
 8002394:	fb03 1312 	mls	r3, r3, r2, r1
 8002398:	4984      	ldr	r1, [pc, #528]	; (80025ac <lcdRoutine+0x6a4>)
 800239a:	b29b      	uxth	r3, r3
			sprintf (string[1], "%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 800239c:	f005 fefc 	bl	8008198 <siprintf>
	if (!graphMode)
 80023a0:	e637      	b.n	8002012 <lcdRoutine+0x10a>
					sprintf (string[3], "Not within ISM Band!");
 80023a2:	4983      	ldr	r1, [pc, #524]	; (80025b0 <lcdRoutine+0x6a8>)
					sprintf (string[3], "Not within ISM band");
 80023a4:	4880      	ldr	r0, [pc, #512]	; (80025a8 <lcdRoutine+0x6a0>)
			sprintf (string[1], "OK:Yes BACK:No");
 80023a6:	f005 ff17 	bl	80081d8 <strcpy>
	if (!graphMode)
 80023aa:	e632      	b.n	8002012 <lcdRoutine+0x10a>
			sprintf (string[0], "Spreading");
 80023ac:	4981      	ldr	r1, [pc, #516]	; (80025b4 <lcdRoutine+0x6ac>)
 80023ae:	4866      	ldr	r0, [pc, #408]	; (8002548 <lcdRoutine+0x640>)
 80023b0:	f005 ff12 	bl	80081d8 <strcpy>
			sprintf (string[1], "factor");
 80023b4:	4980      	ldr	r1, [pc, #512]	; (80025b8 <lcdRoutine+0x6b0>)
 80023b6:	4876      	ldr	r0, [pc, #472]	; (8002590 <lcdRoutine+0x688>)
 80023b8:	f005 ff0e 	bl	80081d8 <strcpy>
			sprintf (string[2], "%d", settings.sf);
 80023bc:	4b72      	ldr	r3, [pc, #456]	; (8002588 <lcdRoutine+0x680>)
 80023be:	497f      	ldr	r1, [pc, #508]	; (80025bc <lcdRoutine+0x6b4>)
 80023c0:	7b9a      	ldrb	r2, [r3, #14]
			sprintf (string[2], "%lu s", settings.warningDelay / 1000);
 80023c2:	4878      	ldr	r0, [pc, #480]	; (80025a4 <lcdRoutine+0x69c>)
 80023c4:	e623      	b.n	800200e <lcdRoutine+0x106>
			sprintf (string[0], "Bandwidth");
 80023c6:	497e      	ldr	r1, [pc, #504]	; (80025c0 <lcdRoutine+0x6b8>)
 80023c8:	485f      	ldr	r0, [pc, #380]	; (8002548 <lcdRoutine+0x640>)
 80023ca:	f005 ff05 	bl	80081d8 <strcpy>
			sprintf (string[1], "%s", bandwidthNames[settings.bw]);
 80023ce:	4b6e      	ldr	r3, [pc, #440]	; (8002588 <lcdRoutine+0x680>)
 80023d0:	486f      	ldr	r0, [pc, #444]	; (8002590 <lcdRoutine+0x688>)
 80023d2:	7bda      	ldrb	r2, [r3, #15]
 80023d4:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <lcdRoutine+0x6bc>)
 80023d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80023da:	f005 fefd 	bl	80081d8 <strcpy>
 80023de:	e7c2      	b.n	8002366 <lcdRoutine+0x45e>
			sprintf (string[0], "SyncWord");
 80023e0:	4979      	ldr	r1, [pc, #484]	; (80025c8 <lcdRoutine+0x6c0>)
 80023e2:	4859      	ldr	r0, [pc, #356]	; (8002548 <lcdRoutine+0x640>)
 80023e4:	f005 fef8 	bl	80081d8 <strcpy>
			sprintf (string[1], "0x%X", settings.syncWord);
 80023e8:	4b67      	ldr	r3, [pc, #412]	; (8002588 <lcdRoutine+0x680>)
 80023ea:	4978      	ldr	r1, [pc, #480]	; (80025cc <lcdRoutine+0x6c4>)
 80023ec:	7c5a      	ldrb	r2, [r3, #17]
			sprintf (string[1], "4/%d", settings.cr + 4);
 80023ee:	4868      	ldr	r0, [pc, #416]	; (8002590 <lcdRoutine+0x688>)
 80023f0:	e60d      	b.n	800200e <lcdRoutine+0x106>
			sprintf (string[0], "Coding rate");
 80023f2:	4977      	ldr	r1, [pc, #476]	; (80025d0 <lcdRoutine+0x6c8>)
 80023f4:	4854      	ldr	r0, [pc, #336]	; (8002548 <lcdRoutine+0x640>)
 80023f6:	f005 feef 	bl	80081d8 <strcpy>
			sprintf (string[1], "4/%d", settings.cr + 4);
 80023fa:	4b63      	ldr	r3, [pc, #396]	; (8002588 <lcdRoutine+0x680>)
 80023fc:	4975      	ldr	r1, [pc, #468]	; (80025d4 <lcdRoutine+0x6cc>)
 80023fe:	7c1a      	ldrb	r2, [r3, #16]
 8002400:	3204      	adds	r2, #4
 8002402:	e7f4      	b.n	80023ee <lcdRoutine+0x4e6>
			sprintf (string[0], "Preamble");
 8002404:	4974      	ldr	r1, [pc, #464]	; (80025d8 <lcdRoutine+0x6d0>)
 8002406:	4850      	ldr	r0, [pc, #320]	; (8002548 <lcdRoutine+0x640>)
 8002408:	f005 fee6 	bl	80081d8 <strcpy>
			sprintf (string[1], "%d sym", settings.preamble);
 800240c:	4b5e      	ldr	r3, [pc, #376]	; (8002588 <lcdRoutine+0x680>)
 800240e:	4973      	ldr	r1, [pc, #460]	; (80025dc <lcdRoutine+0x6d4>)
 8002410:	899a      	ldrh	r2, [r3, #12]
 8002412:	e7ec      	b.n	80023ee <lcdRoutine+0x4e6>
			sprintf (string[0], "Transmission power");
 8002414:	4972      	ldr	r1, [pc, #456]	; (80025e0 <lcdRoutine+0x6d8>)
 8002416:	484c      	ldr	r0, [pc, #304]	; (8002548 <lcdRoutine+0x640>)
 8002418:	f005 fede 	bl	80081d8 <strcpy>
			sprintf (string[1], "%d dBm (%d mW)", settings.power, mW[settings.power - 10]);
 800241c:	4b5a      	ldr	r3, [pc, #360]	; (8002588 <lcdRoutine+0x680>)
 800241e:	4971      	ldr	r1, [pc, #452]	; (80025e4 <lcdRoutine+0x6dc>)
 8002420:	7c9a      	ldrb	r2, [r3, #18]
 8002422:	4b71      	ldr	r3, [pc, #452]	; (80025e8 <lcdRoutine+0x6e0>)
 8002424:	485a      	ldr	r0, [pc, #360]	; (8002590 <lcdRoutine+0x688>)
 8002426:	4413      	add	r3, r2
 8002428:	f813 3c0a 	ldrb.w	r3, [r3, #-10]
 800242c:	f005 feb4 	bl	8008198 <siprintf>
			if (currentInterval != BAD_INTERVAL)
 8002430:	4b59      	ldr	r3, [pc, #356]	; (8002598 <lcdRoutine+0x690>)
 8002432:	f993 4000 	ldrsb.w	r4, [r3]
 8002436:	1c63      	adds	r3, r4, #1
 8002438:	d00b      	beq.n	8002452 <lcdRoutine+0x54a>
					sprintf (string[2], "For this frequency");
 800243a:	496c      	ldr	r1, [pc, #432]	; (80025ec <lcdRoutine+0x6e4>)
 800243c:	4859      	ldr	r0, [pc, #356]	; (80025a4 <lcdRoutine+0x69c>)
 800243e:	f005 fecb 	bl	80081d8 <strcpy>
					sprintf (string[3], "Max:%d dBm", legalFreq.interval[currentInterval].maxPower);
 8002442:	220c      	movs	r2, #12
 8002444:	4b55      	ldr	r3, [pc, #340]	; (800259c <lcdRoutine+0x694>)
 8002446:	496a      	ldr	r1, [pc, #424]	; (80025f0 <lcdRoutine+0x6e8>)
 8002448:	fb02 3404 	mla	r4, r2, r4, r3
 800244c:	7b22      	ldrb	r2, [r4, #12]
				sprintf (string[3], "Found %d Nets", netHandler.netCount);
 800244e:	4856      	ldr	r0, [pc, #344]	; (80025a8 <lcdRoutine+0x6a0>)
 8002450:	e5dd      	b.n	800200e <lcdRoutine+0x106>
					sprintf (string[3], "Not within ISM band");
 8002452:	4968      	ldr	r1, [pc, #416]	; (80025f4 <lcdRoutine+0x6ec>)
 8002454:	e7a6      	b.n	80023a4 <lcdRoutine+0x49c>
			sprintf (string[0], "Level 1");
 8002456:	4968      	ldr	r1, [pc, #416]	; (80025f8 <lcdRoutine+0x6f0>)
 8002458:	483b      	ldr	r0, [pc, #236]	; (8002548 <lcdRoutine+0x640>)
 800245a:	f005 febd 	bl	80081d8 <strcpy>
			sprintf (string[1], "Silence Alarm");
 800245e:	4967      	ldr	r1, [pc, #412]	; (80025fc <lcdRoutine+0x6f4>)
 8002460:	484b      	ldr	r0, [pc, #300]	; (8002590 <lcdRoutine+0x688>)
 8002462:	f005 feb9 	bl	80081d8 <strcpy>
			sprintf (string[2], "%lu s", settings.warningDelay / 1000);
 8002466:	4b48      	ldr	r3, [pc, #288]	; (8002588 <lcdRoutine+0x680>)
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800246e:	4964      	ldr	r1, [pc, #400]	; (8002600 <lcdRoutine+0x6f8>)
 8002470:	fbb2 f2f3 	udiv	r2, r2, r3
 8002474:	e7a5      	b.n	80023c2 <lcdRoutine+0x4ba>
			sprintf (string[0], "Level 2");
 8002476:	4963      	ldr	r1, [pc, #396]	; (8002604 <lcdRoutine+0x6fc>)
 8002478:	4833      	ldr	r0, [pc, #204]	; (8002548 <lcdRoutine+0x640>)
 800247a:	f005 fead 	bl	80081d8 <strcpy>
			sprintf (string[1], "Silence alarm");
 800247e:	4962      	ldr	r1, [pc, #392]	; (8002608 <lcdRoutine+0x700>)
 8002480:	4843      	ldr	r0, [pc, #268]	; (8002590 <lcdRoutine+0x688>)
 8002482:	f005 fea9 	bl	80081d8 <strcpy>
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8002486:	4b40      	ldr	r3, [pc, #256]	; (8002588 <lcdRoutine+0x680>)
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	e7ee      	b.n	800246a <lcdRoutine+0x562>
			sprintf (string[0], "Send status every");
 800248c:	495f      	ldr	r1, [pc, #380]	; (800260c <lcdRoutine+0x704>)
 800248e:	482e      	ldr	r0, [pc, #184]	; (8002548 <lcdRoutine+0x640>)
 8002490:	f005 fea2 	bl	80081d8 <strcpy>
			sprintf (string[1], "%lu s", nodeSettings.workInterval);
 8002494:	4b5e      	ldr	r3, [pc, #376]	; (8002610 <lcdRoutine+0x708>)
 8002496:	495a      	ldr	r1, [pc, #360]	; (8002600 <lcdRoutine+0x6f8>)
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	e7a8      	b.n	80023ee <lcdRoutine+0x4e6>
			sprintf (string[0], "Node LED use");
 800249c:	495d      	ldr	r1, [pc, #372]	; (8002614 <lcdRoutine+0x70c>)
 800249e:	482a      	ldr	r0, [pc, #168]	; (8002548 <lcdRoutine+0x640>)
 80024a0:	f005 fe9a 	bl	80081d8 <strcpy>
			if (nodeSettings.useLed)
 80024a4:	4b5a      	ldr	r3, [pc, #360]	; (8002610 <lcdRoutine+0x708>)
 80024a6:	7c1b      	ldrb	r3, [r3, #16]
 80024a8:	b113      	cbz	r3, 80024b0 <lcdRoutine+0x5a8>
				sprintf (string[1], "On");
 80024aa:	495b      	ldr	r1, [pc, #364]	; (8002618 <lcdRoutine+0x710>)
			sprintf (string[1], "OK:Yes BACK:No");
 80024ac:	4838      	ldr	r0, [pc, #224]	; (8002590 <lcdRoutine+0x688>)
 80024ae:	e77a      	b.n	80023a6 <lcdRoutine+0x49e>
				sprintf (string[1], "Off");
 80024b0:	495a      	ldr	r1, [pc, #360]	; (800261c <lcdRoutine+0x714>)
 80024b2:	e7fb      	b.n	80024ac <lcdRoutine+0x5a4>
			sprintf (string[0], "Clean saved");
 80024b4:	495a      	ldr	r1, [pc, #360]	; (8002620 <lcdRoutine+0x718>)
 80024b6:	4824      	ldr	r0, [pc, #144]	; (8002548 <lcdRoutine+0x640>)
 80024b8:	f005 fe8e 	bl	80081d8 <strcpy>
			sprintf (string[1], "Node data");
 80024bc:	4959      	ldr	r1, [pc, #356]	; (8002624 <lcdRoutine+0x71c>)
 80024be:	e7f5      	b.n	80024ac <lcdRoutine+0x5a4>
			sprintf (string[0], "Refresh Network");
 80024c0:	4959      	ldr	r1, [pc, #356]	; (8002628 <lcdRoutine+0x720>)
 80024c2:	4821      	ldr	r0, [pc, #132]	; (8002548 <lcdRoutine+0x640>)
			if (netHandler.netRefreshInProgress)
 80024c4:	4c59      	ldr	r4, [pc, #356]	; (800262c <lcdRoutine+0x724>)
			sprintf (string[0], "Refresh Network");
 80024c6:	f005 fe87 	bl	80081d8 <strcpy>
			sprintf (string[1], "List");
 80024ca:	4959      	ldr	r1, [pc, #356]	; (8002630 <lcdRoutine+0x728>)
 80024cc:	4830      	ldr	r0, [pc, #192]	; (8002590 <lcdRoutine+0x688>)
 80024ce:	f005 fe83 	bl	80081d8 <strcpy>
			if (netHandler.netRefreshInProgress)
 80024d2:	79a3      	ldrb	r3, [r4, #6]
 80024d4:	b11b      	cbz	r3, 80024de <lcdRoutine+0x5d6>
				sprintf (string[2], "In progress...");
 80024d6:	4957      	ldr	r1, [pc, #348]	; (8002634 <lcdRoutine+0x72c>)
 80024d8:	4832      	ldr	r0, [pc, #200]	; (80025a4 <lcdRoutine+0x69c>)
 80024da:	f005 fe7d 	bl	80081d8 <strcpy>
			if (netHandler.netRefreshDone)
 80024de:	79e3      	ldrb	r3, [r4, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f43f ad96 	beq.w	8002012 <lcdRoutine+0x10a>
				sprintf (string[3], "Found %d Nets", netHandler.netCount);
 80024e6:	f894 2631 	ldrb.w	r2, [r4, #1585]	; 0x631
 80024ea:	4953      	ldr	r1, [pc, #332]	; (8002638 <lcdRoutine+0x730>)
 80024ec:	e7af      	b.n	800244e <lcdRoutine+0x546>
			sprintf (string[0], "Select WLAN");
 80024ee:	4953      	ldr	r1, [pc, #332]	; (800263c <lcdRoutine+0x734>)
 80024f0:	4815      	ldr	r0, [pc, #84]	; (8002548 <lcdRoutine+0x640>)
 80024f2:	f005 fe71 	bl	80081d8 <strcpy>
			if (netHandler.nets[selectedNetwork][0] == 0)
 80024f6:	4b52      	ldr	r3, [pc, #328]	; (8002640 <lcdRoutine+0x738>)
 80024f8:	494c      	ldr	r1, [pc, #304]	; (800262c <lcdRoutine+0x724>)
 80024fa:	f993 2000 	ldrsb.w	r2, [r3]
 80024fe:	eb01 1042 	add.w	r0, r1, r2, lsl #5
 8002502:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 8002506:	0153      	lsls	r3, r2, #5
 8002508:	b908      	cbnz	r0, 800250e <lcdRoutine+0x606>
				sprintf (string[1], "Slot %d is empty", selectedNetwork);
 800250a:	494e      	ldr	r1, [pc, #312]	; (8002644 <lcdRoutine+0x73c>)
 800250c:	e76f      	b.n	80023ee <lcdRoutine+0x4e6>
				sprintf (string[1], "%s", netHandler.nets[selectedNetwork]);
 800250e:	3330      	adds	r3, #48	; 0x30
 8002510:	4419      	add	r1, r3
 8002512:	e7cb      	b.n	80024ac <lcdRoutine+0x5a4>
			sprintf (string[0], "Set WiFi password");
 8002514:	494c      	ldr	r1, [pc, #304]	; (8002648 <lcdRoutine+0x740>)
			setCursor (string[2], cursorPos);
 8002516:	4c4d      	ldr	r4, [pc, #308]	; (800264c <lcdRoutine+0x744>)
			sprintf (string[0], "Set WiFi password");
 8002518:	480b      	ldr	r0, [pc, #44]	; (8002548 <lcdRoutine+0x640>)
 800251a:	f005 fe5d 	bl	80081d8 <strcpy>
			sprintf (string[1], settings.WiFiPass);
 800251e:	494c      	ldr	r1, [pc, #304]	; (8002650 <lcdRoutine+0x748>)
 8002520:	481b      	ldr	r0, [pc, #108]	; (8002590 <lcdRoutine+0x688>)
 8002522:	f005 fe39 	bl	8008198 <siprintf>
			setCursor (string[2], cursorPos);
 8002526:	f994 1000 	ldrsb.w	r1, [r4]
 800252a:	481e      	ldr	r0, [pc, #120]	; (80025a4 <lcdRoutine+0x69c>)
 800252c:	f7fe fdac 	bl	8001088 <setCursor>
			if (settings.WiFiPass[cursorPos] == ' ' || settings.WiFiPass[cursorPos] == '\0')
 8002530:	f994 2000 	ldrsb.w	r2, [r4]
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <lcdRoutine+0x680>)
 8002536:	4413      	add	r3, r2
 8002538:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800253c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8002540:	f47f ad67 	bne.w	8002012 <lcdRoutine+0x10a>
				sprintf (string[3], "Done");
 8002544:	4943      	ldr	r1, [pc, #268]	; (8002654 <lcdRoutine+0x74c>)
 8002546:	e72d      	b.n	80023a4 <lcdRoutine+0x49c>
 8002548:	20000170 	.word	0x20000170
 800254c:	08009ccd 	.word	0x08009ccd
 8002550:	08009cdb 	.word	0x08009cdb
 8002554:	08009cec 	.word	0x08009cec
 8002558:	08009cfd 	.word	0x08009cfd
 800255c:	08009d0b 	.word	0x08009d0b
 8002560:	08009d1d 	.word	0x08009d1d
 8002564:	08009d26 	.word	0x08009d26
 8002568:	08009d38 	.word	0x08009d38
 800256c:	08009d49 	.word	0x08009d49
 8002570:	08009d5f 	.word	0x08009d5f
 8002574:	08009d6f 	.word	0x08009d6f
 8002578:	08009d82 	.word	0x08009d82
 800257c:	08009d97 	.word	0x08009d97
 8002580:	08009da3 	.word	0x08009da3
 8002584:	08009c7e 	.word	0x08009c7e
 8002588:	20000a80 	.word	0x20000a80
 800258c:	000f4240 	.word	0x000f4240
 8002590:	200001b0 	.word	0x200001b0
 8002594:	08009dad 	.word	0x08009dad
 8002598:	200018a0 	.word	0x200018a0
 800259c:	20000bd4 	.word	0x20000bd4
 80025a0:	08009dbd 	.word	0x08009dbd
 80025a4:	200001f0 	.word	0x200001f0
 80025a8:	20000230 	.word	0x20000230
 80025ac:	08009dc9 	.word	0x08009dc9
 80025b0:	08009dd9 	.word	0x08009dd9
 80025b4:	08009dee 	.word	0x08009dee
 80025b8:	08009df8 	.word	0x08009df8
 80025bc:	08009bf1 	.word	0x08009bf1
 80025c0:	08009c89 	.word	0x08009c89
 80025c4:	20000000 	.word	0x20000000
 80025c8:	08009ca6 	.word	0x08009ca6
 80025cc:	08009ad2 	.word	0x08009ad2
 80025d0:	08009cb0 	.word	0x08009cb0
 80025d4:	08009dff 	.word	0x08009dff
 80025d8:	08009cbd 	.word	0x08009cbd
 80025dc:	08009e04 	.word	0x08009e04
 80025e0:	08009e0b 	.word	0x08009e0b
 80025e4:	08009e1e 	.word	0x08009e1e
 80025e8:	0800a238 	.word	0x0800a238
 80025ec:	08009e2d 	.word	0x08009e2d
 80025f0:	08009e40 	.word	0x08009e40
 80025f4:	08009e4b 	.word	0x08009e4b
 80025f8:	08009e5f 	.word	0x08009e5f
 80025fc:	08009e67 	.word	0x08009e67
 8002600:	08009e75 	.word	0x08009e75
 8002604:	08009e7b 	.word	0x08009e7b
 8002608:	08009e83 	.word	0x08009e83
 800260c:	08009e91 	.word	0x08009e91
 8002610:	20000c7c 	.word	0x20000c7c
 8002614:	08009ea3 	.word	0x08009ea3
 8002618:	08009eb0 	.word	0x08009eb0
 800261c:	08009eb3 	.word	0x08009eb3
 8002620:	08009eb7 	.word	0x08009eb7
 8002624:	08009ec3 	.word	0x08009ec3
 8002628:	08009ecd 	.word	0x08009ecd
 800262c:	20001164 	.word	0x20001164
 8002630:	08009d5a 	.word	0x08009d5a
 8002634:	08009edd 	.word	0x08009edd
 8002638:	08009eec 	.word	0x08009eec
 800263c:	08009efa 	.word	0x08009efa
 8002640:	2000016c 	.word	0x2000016c
 8002644:	08009f06 	.word	0x08009f06
 8002648:	08009f17 	.word	0x08009f17
 800264c:	20000123 	.word	0x20000123
 8002650:	20000aa3 	.word	0x20000aa3
 8002654:	08009f29 	.word	0x08009f29
			sprintf (string[0], "Set Server password");
 8002658:	4975      	ldr	r1, [pc, #468]	; (8002830 <lcdRoutine+0x928>)
			setCursor (string[2], cursorPos);
 800265a:	4c76      	ldr	r4, [pc, #472]	; (8002834 <lcdRoutine+0x92c>)
			sprintf (string[0], "Set Server password");
 800265c:	4876      	ldr	r0, [pc, #472]	; (8002838 <lcdRoutine+0x930>)
 800265e:	f005 fdbb 	bl	80081d8 <strcpy>
			sprintf (string[1], settings.ServerPass);
 8002662:	4976      	ldr	r1, [pc, #472]	; (800283c <lcdRoutine+0x934>)
 8002664:	4876      	ldr	r0, [pc, #472]	; (8002840 <lcdRoutine+0x938>)
 8002666:	f005 fd97 	bl	8008198 <siprintf>
			setCursor (string[2], cursorPos);
 800266a:	f994 1000 	ldrsb.w	r1, [r4]
 800266e:	4875      	ldr	r0, [pc, #468]	; (8002844 <lcdRoutine+0x93c>)
 8002670:	f7fe fd0a 	bl	8001088 <setCursor>
			if (settings.ServerPass[cursorPos] == ' ' || settings.ServerPass[cursorPos] == '\0')
 8002674:	f994 2000 	ldrsb.w	r2, [r4]
 8002678:	4b73      	ldr	r3, [pc, #460]	; (8002848 <lcdRoutine+0x940>)
 800267a:	4413      	add	r3, r2
 800267c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002680:	e75c      	b.n	800253c <lcdRoutine+0x634>
			sprintf (string[0], "Set Host");
 8002682:	4972      	ldr	r1, [pc, #456]	; (800284c <lcdRoutine+0x944>)
			setCursor (string[2], cursorPos);
 8002684:	4c6b      	ldr	r4, [pc, #428]	; (8002834 <lcdRoutine+0x92c>)
			sprintf (string[0], "Set Host");
 8002686:	486c      	ldr	r0, [pc, #432]	; (8002838 <lcdRoutine+0x930>)
 8002688:	f005 fda6 	bl	80081d8 <strcpy>
			sprintf (string[1], settings.host);
 800268c:	4970      	ldr	r1, [pc, #448]	; (8002850 <lcdRoutine+0x948>)
 800268e:	486c      	ldr	r0, [pc, #432]	; (8002840 <lcdRoutine+0x938>)
 8002690:	f005 fd82 	bl	8008198 <siprintf>
			setCursor (string[2], cursorPos);
 8002694:	f994 1000 	ldrsb.w	r1, [r4]
 8002698:	486a      	ldr	r0, [pc, #424]	; (8002844 <lcdRoutine+0x93c>)
 800269a:	f7fe fcf5 	bl	8001088 <setCursor>
			if (settings.host[cursorPos] == ' ' || settings.host[cursorPos] == '\0')
 800269e:	f994 2000 	ldrsb.w	r2, [r4]
 80026a2:	4b69      	ldr	r3, [pc, #420]	; (8002848 <lcdRoutine+0x940>)
 80026a4:	4413      	add	r3, r2
 80026a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80026aa:	e747      	b.n	800253c <lcdRoutine+0x634>
			sprintf (string[0], "Set Base ID");
 80026ac:	4969      	ldr	r1, [pc, #420]	; (8002854 <lcdRoutine+0x94c>)
 80026ae:	4862      	ldr	r0, [pc, #392]	; (8002838 <lcdRoutine+0x930>)
 80026b0:	f005 fd92 	bl	80081d8 <strcpy>
			sprintf (string[1], "%07lu", settings.baseID);
 80026b4:	4b64      	ldr	r3, [pc, #400]	; (8002848 <lcdRoutine+0x940>)
 80026b6:	4968      	ldr	r1, [pc, #416]	; (8002858 <lcdRoutine+0x950>)
 80026b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026ba:	4861      	ldr	r0, [pc, #388]	; (8002840 <lcdRoutine+0x938>)
 80026bc:	f005 fd6c 	bl	8008198 <siprintf>
			setCursor (string[2], cursorPos);
 80026c0:	4b5c      	ldr	r3, [pc, #368]	; (8002834 <lcdRoutine+0x92c>)
 80026c2:	4860      	ldr	r0, [pc, #384]	; (8002844 <lcdRoutine+0x93c>)
 80026c4:	f993 1000 	ldrsb.w	r1, [r3]
 80026c8:	f7fe fcde 	bl	8001088 <setCursor>
	if (!graphMode)
 80026cc:	e4a1      	b.n	8002012 <lcdRoutine+0x10a>
			sprintf (string[0], "Refresh setings?");
 80026ce:	4963      	ldr	r1, [pc, #396]	; (800285c <lcdRoutine+0x954>)
 80026d0:	4859      	ldr	r0, [pc, #356]	; (8002838 <lcdRoutine+0x930>)
 80026d2:	f005 fd81 	bl	80081d8 <strcpy>
			sprintf (string[1], "OK:Yes BACK:No");
 80026d6:	4962      	ldr	r1, [pc, #392]	; (8002860 <lcdRoutine+0x958>)
 80026d8:	e6e8      	b.n	80024ac <lcdRoutine+0x5a4>
			sprintf (string[0], "Total received:");
 80026da:	4962      	ldr	r1, [pc, #392]	; (8002864 <lcdRoutine+0x95c>)
 80026dc:	4856      	ldr	r0, [pc, #344]	; (8002838 <lcdRoutine+0x930>)
 80026de:	f005 fd7b 	bl	80081d8 <strcpy>
			sprintf (string[1], "%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 80026e2:	4b61      	ldr	r3, [pc, #388]	; (8002868 <lcdRoutine+0x960>)
 80026e4:	4a61      	ldr	r2, [pc, #388]	; (800286c <lcdRoutine+0x964>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	4961      	ldr	r1, [pc, #388]	; (8002870 <lcdRoutine+0x968>)
 80026ec:	4854      	ldr	r0, [pc, #336]	; (8002840 <lcdRoutine+0x938>)
 80026ee:	e655      	b.n	800239c <lcdRoutine+0x494>
			sprintf (string[0], "Firmware: ");
 80026f0:	4960      	ldr	r1, [pc, #384]	; (8002874 <lcdRoutine+0x96c>)
 80026f2:	4851      	ldr	r0, [pc, #324]	; (8002838 <lcdRoutine+0x930>)
 80026f4:	f005 fd70 	bl	80081d8 <strcpy>
			sprintf (string[1], "release %lx", version);
 80026f8:	4a5f      	ldr	r2, [pc, #380]	; (8002878 <lcdRoutine+0x970>)
 80026fa:	4960      	ldr	r1, [pc, #384]	; (800287c <lcdRoutine+0x974>)
 80026fc:	e677      	b.n	80023ee <lcdRoutine+0x4e6>
				sprintf (string[0], "Uptime:");
 80026fe:	4960      	ldr	r1, [pc, #384]	; (8002880 <lcdRoutine+0x978>)
 8002700:	484d      	ldr	r0, [pc, #308]	; (8002838 <lcdRoutine+0x930>)
 8002702:	f005 fd69 	bl	80081d8 <strcpy>
				sprintf (string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400, upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002706:	203c      	movs	r0, #60	; 0x3c
 8002708:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800270c:	4b5d      	ldr	r3, [pc, #372]	; (8002884 <lcdRoutine+0x97c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2318      	movs	r3, #24
 8002712:	fbb2 f5f0 	udiv	r5, r2, r0
 8002716:	fbb2 f1f1 	udiv	r1, r2, r1
 800271a:	fb00 2415 	mls	r4, r0, r5, r2
 800271e:	9401      	str	r4, [sp, #4]
 8002720:	fbb5 f4f0 	udiv	r4, r5, r0
 8002724:	fbb1 f6f3 	udiv	r6, r1, r3
 8002728:	fb00 5014 	mls	r0, r0, r4, r5
 800272c:	fb03 1316 	mls	r3, r3, r6, r1
 8002730:	4955      	ldr	r1, [pc, #340]	; (8002888 <lcdRoutine+0x980>)
 8002732:	9000      	str	r0, [sp, #0]
 8002734:	fbb2 f2f1 	udiv	r2, r2, r1
 8002738:	4841      	ldr	r0, [pc, #260]	; (8002840 <lcdRoutine+0x938>)
 800273a:	4954      	ldr	r1, [pc, #336]	; (800288c <lcdRoutine+0x984>)
 800273c:	f005 fd2c 	bl	8008198 <siprintf>
				sprintf (string[2], "RX use: %s", floatToString2 (airUseForRx));
 8002740:	4b53      	ldr	r3, [pc, #332]	; (8002890 <lcdRoutine+0x988>)
				sprintf (string[4], "WiFI:%d,Connected:%d", netHandler.plugged, netHandler.connected);
 8002742:	4c54      	ldr	r4, [pc, #336]	; (8002894 <lcdRoutine+0x98c>)
				sprintf (string[2], "RX use: %s", floatToString2 (airUseForRx));
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	f7fe fabb 	bl	8000cc0 <floatToString2>
 800274a:	4953      	ldr	r1, [pc, #332]	; (8002898 <lcdRoutine+0x990>)
 800274c:	4602      	mov	r2, r0
 800274e:	483d      	ldr	r0, [pc, #244]	; (8002844 <lcdRoutine+0x93c>)
 8002750:	f005 fd22 	bl	8008198 <siprintf>
				sprintf (string[3], "TX use: %s", floatToString2 (airUseForTx));
 8002754:	4b51      	ldr	r3, [pc, #324]	; (800289c <lcdRoutine+0x994>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f7fe fab2 	bl	8000cc0 <floatToString2>
 800275c:	4950      	ldr	r1, [pc, #320]	; (80028a0 <lcdRoutine+0x998>)
 800275e:	4602      	mov	r2, r0
 8002760:	4850      	ldr	r0, [pc, #320]	; (80028a4 <lcdRoutine+0x99c>)
 8002762:	f005 fd19 	bl	8008198 <siprintf>
				sprintf (string[4], "WiFI:%d,Connected:%d", netHandler.plugged, netHandler.connected);
 8002766:	78a3      	ldrb	r3, [r4, #2]
 8002768:	7822      	ldrb	r2, [r4, #0]
 800276a:	494f      	ldr	r1, [pc, #316]	; (80028a8 <lcdRoutine+0x9a0>)
 800276c:	484f      	ldr	r0, [pc, #316]	; (80028ac <lcdRoutine+0x9a4>)
 800276e:	f005 fd13 	bl	8008198 <siprintf>
				sprintf (string[5], "Local IP:%s", netHandler.ip);
 8002772:	494f      	ldr	r1, [pc, #316]	; (80028b0 <lcdRoutine+0x9a8>)
 8002774:	f104 0214 	add.w	r2, r4, #20
 8002778:	484e      	ldr	r0, [pc, #312]	; (80028b4 <lcdRoutine+0x9ac>)
 800277a:	f005 fd0d 	bl	8008198 <siprintf>
				sprintf (string[6], "Online:%d", netHandler.online);
 800277e:	78e2      	ldrb	r2, [r4, #3]
 8002780:	494d      	ldr	r1, [pc, #308]	; (80028b8 <lcdRoutine+0x9b0>)
 8002782:	484e      	ldr	r0, [pc, #312]	; (80028bc <lcdRoutine+0x9b4>)
 8002784:	f005 fd08 	bl	8008198 <siprintf>
				sprintf (string[7], "TX:%d", netHandler.TX);
 8002788:	7962      	ldrb	r2, [r4, #5]
 800278a:	494d      	ldr	r1, [pc, #308]	; (80028c0 <lcdRoutine+0x9b8>)
 800278c:	e4c2      	b.n	8002114 <lcdRoutine+0x20c>
			sprintf (string[0], "   Node Actions:");
 800278e:	494d      	ldr	r1, [pc, #308]	; (80028c4 <lcdRoutine+0x9bc>)
			sprintf (string[2], " Alarm: %s", maskNames[nodes[selectedNode].masked]);
 8002790:	4d4d      	ldr	r5, [pc, #308]	; (80028c8 <lcdRoutine+0x9c0>)
			sprintf (string[0], "   Node Actions:");
 8002792:	4829      	ldr	r0, [pc, #164]	; (8002838 <lcdRoutine+0x930>)
 8002794:	f005 fd20 	bl	80081d8 <strcpy>
			sprintf (string[1], " Ping");
 8002798:	494c      	ldr	r1, [pc, #304]	; (80028cc <lcdRoutine+0x9c4>)
 800279a:	4829      	ldr	r0, [pc, #164]	; (8002840 <lcdRoutine+0x938>)
 800279c:	f005 fd1c 	bl	80081d8 <strcpy>
			sprintf (string[2], " Alarm: %s", maskNames[nodes[selectedNode].masked]);
 80027a0:	4c4b      	ldr	r4, [pc, #300]	; (80028d0 <lcdRoutine+0x9c8>)
 80027a2:	f9b5 3000 	ldrsh.w	r3, [r5]
 80027a6:	494b      	ldr	r1, [pc, #300]	; (80028d4 <lcdRoutine+0x9cc>)
 80027a8:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80027ac:	7b1a      	ldrb	r2, [r3, #12]
 80027ae:	4b4a      	ldr	r3, [pc, #296]	; (80028d8 <lcdRoutine+0x9d0>)
 80027b0:	4824      	ldr	r0, [pc, #144]	; (8002844 <lcdRoutine+0x93c>)
 80027b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027b6:	f005 fcef 	bl	8008198 <siprintf>
			sprintf (string[3], nodes[selectedNode].disarmRequest ? " Disarmed" : " Armed");
 80027ba:	f9b5 3000 	ldrsh.w	r3, [r5]
 80027be:	4a47      	ldr	r2, [pc, #284]	; (80028dc <lcdRoutine+0x9d4>)
 80027c0:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 80027c4:	7ba1      	ldrb	r1, [r4, #14]
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <lcdRoutine+0x9d8>)
 80027c8:	4c1b      	ldr	r4, [pc, #108]	; (8002838 <lcdRoutine+0x930>)
 80027ca:	2900      	cmp	r1, #0
 80027cc:	bf14      	ite	ne
 80027ce:	4611      	movne	r1, r2
 80027d0:	4619      	moveq	r1, r3
 80027d2:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80027d6:	f005 fcdf 	bl	8008198 <siprintf>
			sprintf (string[4], " Config Node");
 80027da:	4942      	ldr	r1, [pc, #264]	; (80028e4 <lcdRoutine+0x9dc>)
 80027dc:	f504 7080 	add.w	r0, r4, #256	; 0x100
 80027e0:	e4ea      	b.n	80021b8 <lcdRoutine+0x2b0>
			sprintf (string[0], " Work");
 80027e2:	4c15      	ldr	r4, [pc, #84]	; (8002838 <lcdRoutine+0x930>)
			clearStrings ();
 80027e4:	f7fe fc48 	bl	8001078 <clearStrings>
			sprintf (string[0], " Work");
 80027e8:	493f      	ldr	r1, [pc, #252]	; (80028e8 <lcdRoutine+0x9e0>)
 80027ea:	4620      	mov	r0, r4
 80027ec:	f005 fcf4 	bl	80081d8 <strcpy>
			sprintf (string[1], " Color test");
 80027f0:	493e      	ldr	r1, [pc, #248]	; (80028ec <lcdRoutine+0x9e4>)
 80027f2:	f104 0040 	add.w	r0, r4, #64	; 0x40
 80027f6:	f005 fcef 	bl	80081d8 <strcpy>
			sprintf (string[2], " Transmitter test");
 80027fa:	493d      	ldr	r1, [pc, #244]	; (80028f0 <lcdRoutine+0x9e8>)
 80027fc:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8002800:	f005 fcea 	bl	80081d8 <strcpy>
			sprintf (string[3], " Receiver Test");
 8002804:	493b      	ldr	r1, [pc, #236]	; (80028f4 <lcdRoutine+0x9ec>)
 8002806:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 800280a:	f005 fce5 	bl	80081d8 <strcpy>
			sprintf (string[4], " Ping test");
 800280e:	493a      	ldr	r1, [pc, #232]	; (80028f8 <lcdRoutine+0x9f0>)
 8002810:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002814:	f005 fce0 	bl	80081d8 <strcpy>
			sprintf (string[5], " RSSI Indicator");
 8002818:	4938      	ldr	r1, [pc, #224]	; (80028fc <lcdRoutine+0x9f4>)
 800281a:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800281e:	f005 fcdb 	bl	80081d8 <strcpy>
			string[selectedMode][0] = 0x83;
 8002822:	2283      	movs	r2, #131	; 0x83
 8002824:	4b36      	ldr	r3, [pc, #216]	; (8002900 <lcdRoutine+0x9f8>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	019b      	lsls	r3, r3, #6
 800282a:	54e2      	strb	r2, [r4, r3]
	if (!graphMode)
 800282c:	f7ff bbf1 	b.w	8002012 <lcdRoutine+0x10a>
 8002830:	08009f2e 	.word	0x08009f2e
 8002834:	20000123 	.word	0x20000123
 8002838:	20000170 	.word	0x20000170
 800283c:	20000ab3 	.word	0x20000ab3
 8002840:	200001b0 	.word	0x200001b0
 8002844:	200001f0 	.word	0x200001f0
 8002848:	20000a80 	.word	0x20000a80
 800284c:	08009da4 	.word	0x08009da4
 8002850:	20000ac3 	.word	0x20000ac3
 8002854:	08009f42 	.word	0x08009f42
 8002858:	08009f4e 	.word	0x08009f4e
 800285c:	08009f54 	.word	0x08009f54
 8002860:	08009f65 	.word	0x08009f65
 8002864:	08009f74 	.word	0x08009f74
 8002868:	2000015c 	.word	0x2000015c
 800286c:	20000160 	.word	0x20000160
 8002870:	08009bb9 	.word	0x08009bb9
 8002874:	08009f84 	.word	0x08009f84
 8002878:	08082021 	.word	0x08082021
 800287c:	08009f8f 	.word	0x08009f8f
 8002880:	08009f9b 	.word	0x08009f9b
 8002884:	20000b78 	.word	0x20000b78
 8002888:	00015180 	.word	0x00015180
 800288c:	08009b9c 	.word	0x08009b9c
 8002890:	20000bcc 	.word	0x20000bcc
 8002894:	20001164 	.word	0x20001164
 8002898:	08009fa3 	.word	0x08009fa3
 800289c:	20000b7c 	.word	0x20000b7c
 80028a0:	08009fae 	.word	0x08009fae
 80028a4:	20000230 	.word	0x20000230
 80028a8:	08009fb9 	.word	0x08009fb9
 80028ac:	20000270 	.word	0x20000270
 80028b0:	08009fce 	.word	0x08009fce
 80028b4:	200002b0 	.word	0x200002b0
 80028b8:	08009fda 	.word	0x08009fda
 80028bc:	200002f0 	.word	0x200002f0
 80028c0:	08009fe4 	.word	0x08009fe4
 80028c4:	08009fea 	.word	0x08009fea
 80028c8:	2000016e 	.word	0x2000016e
 80028cc:	08009ffb 	.word	0x08009ffb
 80028d0:	20000ca0 	.word	0x20000ca0
 80028d4:	0800a001 	.word	0x0800a001
 80028d8:	2000002c 	.word	0x2000002c
 80028dc:	08009af7 	.word	0x08009af7
 80028e0:	08009b01 	.word	0x08009b01
 80028e4:	0800a00c 	.word	0x0800a00c
 80028e8:	0800a019 	.word	0x0800a019
 80028ec:	0800a01f 	.word	0x0800a01f
 80028f0:	0800a02b 	.word	0x0800a02b
 80028f4:	0800a03d 	.word	0x0800a03d
 80028f8:	0800a04c 	.word	0x0800a04c
 80028fc:	0800a057 	.word	0x0800a057
 8002900:	2000016b 	.word	0x2000016b

08002904 <colorTest>:
 * @param  None
 * @retval None
 */
void colorTest ()
{
	flag.lcdRefreshRequest = 1;
 8002904:	4c45      	ldr	r4, [pc, #276]	; (8002a1c <colorTest+0x118>)
{
 8002906:	b580      	push	{r7, lr}
	flag.lcdRefreshRequest = 1;
 8002908:	7863      	ldrb	r3, [r4, #1]
 800290a:	4d45      	ldr	r5, [pc, #276]	; (8002a20 <colorTest+0x11c>)
 800290c:	f043 0304 	orr.w	r3, r3, #4
			static uint8_t currentCol = 0;

			if (flag.encInc)
				{
					flag.encInc = 0;
					switch (currentCol)
 8002910:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8002a3c <colorTest+0x138>
	flag.lcdRefreshRequest = 1;
 8002914:	7063      	strb	r3, [r4, #1]
			if (flag.encInc)
 8002916:	7823      	ldrb	r3, [r4, #0]
 8002918:	4f42      	ldr	r7, [pc, #264]	; (8002a24 <colorTest+0x120>)
 800291a:	f013 0f01 	tst.w	r3, #1
 800291e:	4e42      	ldr	r6, [pc, #264]	; (8002a28 <colorTest+0x124>)
 8002920:	d010      	beq.n	8002944 <colorTest+0x40>
					flag.encInc = 0;
 8002922:	f36f 0300 	bfc	r3, #0, #1
 8002926:	7023      	strb	r3, [r4, #0]
					switch (currentCol)
 8002928:	f898 3000 	ldrb.w	r3, [r8]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d069      	beq.n	8002a04 <colorTest+0x100>
 8002930:	2b02      	cmp	r3, #2
 8002932:	d063      	beq.n	80029fc <colorTest+0xf8>
 8002934:	b913      	cbnz	r3, 800293c <colorTest+0x38>
					{
						case 0:
							red++;
 8002936:	782b      	ldrb	r3, [r5, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	702b      	strb	r3, [r5, #0]
							break;
						case 1:
							green++;
							break;
					}
					flag.lcdRefreshRequest = 1;
 800293c:	7863      	ldrb	r3, [r4, #1]
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	7063      	strb	r3, [r4, #1]
				}

			if (flag.encDec)
 8002944:	7823      	ldrb	r3, [r4, #0]
 8002946:	0798      	lsls	r0, r3, #30
 8002948:	d510      	bpl.n	800296c <colorTest+0x68>
				{
					flag.encDec = 0;
 800294a:	f36f 0341 	bfc	r3, #1, #1
 800294e:	7023      	strb	r3, [r4, #0]
					switch (currentCol)
 8002950:	f898 3000 	ldrb.w	r3, [r8]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d05d      	beq.n	8002a14 <colorTest+0x110>
 8002958:	2b02      	cmp	r3, #2
 800295a:	d057      	beq.n	8002a0c <colorTest+0x108>
 800295c:	b913      	cbnz	r3, 8002964 <colorTest+0x60>
					{
						case 0:
							red--;
 800295e:	782b      	ldrb	r3, [r5, #0]
 8002960:	3b01      	subs	r3, #1
 8002962:	702b      	strb	r3, [r5, #0]
							break;
						case 1:
							green--;
							break;
					}
					flag.lcdRefreshRequest = 1;
 8002964:	7863      	ldrb	r3, [r4, #1]
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	7063      	strb	r3, [r4, #1]
				}

			if (flag.encOk)
 800296c:	7823      	ldrb	r3, [r4, #0]
 800296e:	0759      	lsls	r1, r3, #29
 8002970:	d50f      	bpl.n	8002992 <colorTest+0x8e>
				{
					flag.encOk = 0;
 8002972:	f36f 0382 	bfc	r3, #2, #1
 8002976:	7023      	strb	r3, [r4, #0]
					currentCol = (++currentCol > 2) ? 0 : currentCol;
 8002978:	f898 3000 	ldrb.w	r3, [r8]
 800297c:	3301      	adds	r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b03      	cmp	r3, #3
 8002982:	bf28      	it	cs
 8002984:	2300      	movcs	r3, #0
 8002986:	f888 3000 	strb.w	r3, [r8]
					flag.lcdRefreshRequest = 1;
 800298a:	7863      	ldrb	r3, [r4, #1]
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	7063      	strb	r3, [r4, #1]
				}

			if (flag.lcdRefreshRequest == 1)
 8002992:	7863      	ldrb	r3, [r4, #1]
 8002994:	075a      	lsls	r2, r3, #29
 8002996:	d528      	bpl.n	80029ea <colorTest+0xe6>
				{
					flag.lcdRefreshRequest = 0;
					clearStrings ();
					sprintf (string[0], "Color test");
 8002998:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002a40 <colorTest+0x13c>
					flag.lcdRefreshRequest = 0;
 800299c:	f36f 0382 	bfc	r3, #2, #1
 80029a0:	7063      	strb	r3, [r4, #1]
					clearStrings ();
 80029a2:	f7fe fb69 	bl	8001078 <clearStrings>
					sprintf (string[0], "Color test");
 80029a6:	4648      	mov	r0, r9
 80029a8:	4920      	ldr	r1, [pc, #128]	; (8002a2c <colorTest+0x128>)
 80029aa:	f005 fc15 	bl	80081d8 <strcpy>
					sprintf (string[1], " Red:  %3d %02X", red, red);
 80029ae:	782b      	ldrb	r3, [r5, #0]
 80029b0:	491f      	ldr	r1, [pc, #124]	; (8002a30 <colorTest+0x12c>)
 80029b2:	461a      	mov	r2, r3
 80029b4:	f109 0040 	add.w	r0, r9, #64	; 0x40
 80029b8:	f005 fbee 	bl	8008198 <siprintf>
					sprintf (string[2], " Green:%3d %02X", green, green);
 80029bc:	7833      	ldrb	r3, [r6, #0]
 80029be:	491d      	ldr	r1, [pc, #116]	; (8002a34 <colorTest+0x130>)
 80029c0:	461a      	mov	r2, r3
 80029c2:	f109 0080 	add.w	r0, r9, #128	; 0x80
 80029c6:	f005 fbe7 	bl	8008198 <siprintf>
					sprintf (string[3], " Blue: %3d %02X", blue, blue);
 80029ca:	783b      	ldrb	r3, [r7, #0]
 80029cc:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
 80029d0:	461a      	mov	r2, r3
 80029d2:	4919      	ldr	r1, [pc, #100]	; (8002a38 <colorTest+0x134>)
 80029d4:	f005 fbe0 	bl	8008198 <siprintf>
					string[currentCol + 1][0] = 0x83;
 80029d8:	f898 3000 	ldrb.w	r3, [r8]
 80029dc:	eb09 1983 	add.w	r9, r9, r3, lsl #6
 80029e0:	2383      	movs	r3, #131	; 0x83
 80029e2:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40

					updateLcd ();
 80029e6:	f7fe fb59 	bl	800109c <updateLcd>
				}
			wsSetColor (0, red, green, blue);
 80029ea:	2000      	movs	r0, #0
 80029ec:	783b      	ldrb	r3, [r7, #0]
 80029ee:	7832      	ldrb	r2, [r6, #0]
 80029f0:	7829      	ldrb	r1, [r5, #0]
 80029f2:	f002 fd6f 	bl	80054d4 <wsSetColor>
			wsPrepareArray ();
 80029f6:	f002 fdad 	bl	8005554 <wsPrepareArray>
		{
 80029fa:	e78c      	b.n	8002916 <colorTest+0x12>
							blue++;
 80029fc:	783b      	ldrb	r3, [r7, #0]
 80029fe:	3301      	adds	r3, #1
 8002a00:	703b      	strb	r3, [r7, #0]
							break;
 8002a02:	e79b      	b.n	800293c <colorTest+0x38>
							green++;
 8002a04:	7833      	ldrb	r3, [r6, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	7033      	strb	r3, [r6, #0]
							break;
 8002a0a:	e797      	b.n	800293c <colorTest+0x38>
							blue--;
 8002a0c:	783b      	ldrb	r3, [r7, #0]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	703b      	strb	r3, [r7, #0]
							break;
 8002a12:	e7a7      	b.n	8002964 <colorTest+0x60>
							green--;
 8002a14:	7833      	ldrb	r3, [r6, #0]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	7033      	strb	r3, [r6, #0]
							break;
 8002a1a:	e7a3      	b.n	8002964 <colorTest+0x60>
 8002a1c:	20000b84 	.word	0x20000b84
 8002a20:	20000168 	.word	0x20000168
 8002a24:	20000118 	.word	0x20000118
 8002a28:	20000124 	.word	0x20000124
 8002a2c:	0800a020 	.word	0x0800a020
 8002a30:	0800a067 	.word	0x0800a067
 8002a34:	0800a077 	.word	0x0800a077
 8002a38:	0800a087 	.word	0x0800a087
 8002a3c:	20000122 	.word	0x20000122
 8002a40:	20000170 	.word	0x20000170

08002a44 <radioTestTransmit>:
 * Transmittion power can be cyclic increased or static 20dbm
 * @param  None
 * @retval None
 */
void radioTestTransmit ()
{
 8002a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
					else
						wsSetColor (i, BLACK);
				}
			wsPrepareArray ();

			if (myRadio.status != TX)
 8002a48:	4f46      	ldr	r7, [pc, #280]	; (8002b64 <radioTestTransmit+0x120>)
	SX127X_defaultConfig (&myRadio);
 8002a4a:	4846      	ldr	r0, [pc, #280]	; (8002b64 <radioTestTransmit+0x120>)
 8002a4c:	463e      	mov	r6, r7
	flag.lcdRefreshRequest = 1;
 8002a4e:	4c46      	ldr	r4, [pc, #280]	; (8002b68 <radioTestTransmit+0x124>)
	SX127X_defaultConfig (&myRadio);
 8002a50:	f001 ffb6 	bl	80049c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 8002a54:	f7fe fbc4 	bl	80011e0 <tryLoadSettings>
	SX127X_config (&myRadio);
 8002a58:	4842      	ldr	r0, [pc, #264]	; (8002b64 <radioTestTransmit+0x120>)
 8002a5a:	f001 fffd 	bl	8004a58 <SX127X_config>
	flag.lcdRefreshRequest = 1;
 8002a5e:	7863      	ldrb	r3, [r4, #1]
					if (power - 12 == i)
 8002a60:	4d42      	ldr	r5, [pc, #264]	; (8002b6c <radioTestTransmit+0x128>)
	flag.lcdRefreshRequest = 1;
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	7063      	strb	r3, [r4, #1]
{
 8002a68:	f04f 0800 	mov.w	r8, #0
					if (power - 12 == i)
 8002a6c:	782b      	ldrb	r3, [r5, #0]
 8002a6e:	fa5f f088 	uxtb.w	r0, r8
 8002a72:	3b0c      	subs	r3, #12
 8002a74:	4543      	cmp	r3, r8
						wsSetColor (i, GREEN);
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2210      	moveq	r2, #16
						wsSetColor (i, BLACK);
 8002a7e:	461a      	movne	r2, r3
 8002a80:	4619      	mov	r1, r3
 8002a82:	f108 0801 	add.w	r8, r8, #1
 8002a86:	f002 fd25 	bl	80054d4 <wsSetColor>
			for (i = 0; i < 9; i++)
 8002a8a:	f1b8 0f09 	cmp.w	r8, #9
 8002a8e:	d1ed      	bne.n	8002a6c <radioTestTransmit+0x28>
			wsPrepareArray ();
 8002a90:	f002 fd60 	bl	8005554 <wsPrepareArray>
			if (myRadio.status != TX)
 8002a94:	7c3b      	ldrb	r3, [r7, #16]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d01b      	beq.n	8002ad2 <radioTestTransmit+0x8e>
				{
					if (radioTxTestMode == 0)
 8002a9a:	4b35      	ldr	r3, [pc, #212]	; (8002b70 <radioTestTransmit+0x12c>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d156      	bne.n	8002b50 <radioTestTransmit+0x10c>
						power = (power + 1 > 20) ? 10 : power + 1;
 8002aa2:	782b      	ldrb	r3, [r5, #0]
 8002aa4:	2b13      	cmp	r3, #19
 8002aa6:	bf8e      	itee	hi
 8002aa8:	230a      	movhi	r3, #10
 8002aaa:	3301      	addls	r3, #1
 8002aac:	b2db      	uxtbls	r3, r3
					else
						power = radioTxTestMode + 9;
 8002aae:	702b      	strb	r3, [r5, #0]
					myRadio.power = power;
 8002ab0:	782b      	ldrb	r3, [r5, #0]
					SX127X_config (&myRadio);
 8002ab2:	4630      	mov	r0, r6
					myRadio.power = power;
 8002ab4:	7133      	strb	r3, [r6, #4]
					SX127X_config (&myRadio);
 8002ab6:	f001 ffcf 	bl	8004a58 <SX127X_config>
					myRadio.txBuf[0] = 'a' + power - 10;
 8002aba:	782b      	ldrb	r3, [r5, #0]
					SX127X_transmitAsync (&myRadio, 3);
 8002abc:	2103      	movs	r1, #3
					myRadio.txBuf[0] = 'a' + power - 10;
 8002abe:	3357      	adds	r3, #87	; 0x57
					SX127X_transmitAsync (&myRadio, 3);
 8002ac0:	4630      	mov	r0, r6
					myRadio.txBuf[0] = 'a' + power - 10;
 8002ac2:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
					SX127X_transmitAsync (&myRadio, 3);
 8002ac6:	f002 f905 	bl	8004cd4 <SX127X_transmitAsync>
					flag.lcdRefreshRequest = 1;
 8002aca:	7863      	ldrb	r3, [r4, #1]
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	7063      	strb	r3, [r4, #1]
				}

			if (flag.encInc || flag.encDec)
 8002ad2:	7822      	ldrb	r2, [r4, #0]
 8002ad4:	0793      	lsls	r3, r2, #30
 8002ad6:	d019      	beq.n	8002b0c <radioTestTransmit+0xc8>
				{
					if (flag.encInc)
 8002ad8:	07d0      	lsls	r0, r2, #31
 8002ada:	d507      	bpl.n	8002aec <radioTestTransmit+0xa8>
						radioTxTestMode = (radioTxTestMode == 11) ? 0 : radioTxTestMode + 1;
 8002adc:	4924      	ldr	r1, [pc, #144]	; (8002b70 <radioTestTransmit+0x12c>)
 8002ade:	780b      	ldrb	r3, [r1, #0]
 8002ae0:	2b0b      	cmp	r3, #11
 8002ae2:	bf0e      	itee	eq
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	3301      	addne	r3, #1
 8002ae8:	b2db      	uxtbne	r3, r3
 8002aea:	700b      	strb	r3, [r1, #0]
					if (flag.encDec)
 8002aec:	0791      	lsls	r1, r2, #30
 8002aee:	d505      	bpl.n	8002afc <radioTestTransmit+0xb8>
						radioTxTestMode = (radioTxTestMode == 0) ? 11 : radioTxTestMode - 1;
 8002af0:	4a1f      	ldr	r2, [pc, #124]	; (8002b70 <radioTestTransmit+0x12c>)
 8002af2:	7813      	ldrb	r3, [r2, #0]
 8002af4:	b373      	cbz	r3, 8002b54 <radioTestTransmit+0x110>
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	7013      	strb	r3, [r2, #0]
					flag.encInc = 0;
 8002afc:	8823      	ldrh	r3, [r4, #0]
 8002afe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b02:	f023 0303 	bic.w	r3, r3, #3
 8002b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b0a:	8023      	strh	r3, [r4, #0]
					flag.encDec = 0;
					flag.lcdRefreshRequest = 1;
				}

			SX127X_Routine (&myRadio);
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	f002 f92f 	bl	8004d70 <SX127X_Routine>
			if (flag.lcdRefreshRequest)
 8002b12:	7863      	ldrb	r3, [r4, #1]
 8002b14:	075a      	lsls	r2, r3, #29
 8002b16:	d5a7      	bpl.n	8002a68 <radioTestTransmit+0x24>
				{
					flag.lcdRefreshRequest = 0;
 8002b18:	f36f 0382 	bfc	r3, #2, #1
 8002b1c:	7063      	strb	r3, [r4, #1]

					clearStrings ();
 8002b1e:	f7fe faab 	bl	8001078 <clearStrings>
					sprintf (string[0], "Transmitter");
 8002b22:	4914      	ldr	r1, [pc, #80]	; (8002b74 <radioTestTransmit+0x130>)
 8002b24:	4814      	ldr	r0, [pc, #80]	; (8002b78 <radioTestTransmit+0x134>)
 8002b26:	f005 fb57 	bl	80081d8 <strcpy>
					sprintf (string[1], "Mode:");
 8002b2a:	4914      	ldr	r1, [pc, #80]	; (8002b7c <radioTestTransmit+0x138>)
 8002b2c:	4814      	ldr	r0, [pc, #80]	; (8002b80 <radioTestTransmit+0x13c>)
 8002b2e:	f005 fb53 	bl	80081d8 <strcpy>
					if (!radioTxTestMode)
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <radioTestTransmit+0x12c>)
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	b97a      	cbnz	r2, 8002b58 <radioTestTransmit+0x114>
						sprintf (string[3], "Cyclic");
 8002b38:	4912      	ldr	r1, [pc, #72]	; (8002b84 <radioTestTransmit+0x140>)
 8002b3a:	4813      	ldr	r0, [pc, #76]	; (8002b88 <radioTestTransmit+0x144>)
 8002b3c:	f005 fb4c 	bl	80081d8 <strcpy>
					else
						sprintf (string[3], "Constant %u mw", radioTxTestMode + 9);
					sprintf (string[2], "Pow:%d dBm", power);
 8002b40:	782a      	ldrb	r2, [r5, #0]
 8002b42:	4912      	ldr	r1, [pc, #72]	; (8002b8c <radioTestTransmit+0x148>)
 8002b44:	4812      	ldr	r0, [pc, #72]	; (8002b90 <radioTestTransmit+0x14c>)
 8002b46:	f005 fb27 	bl	8008198 <siprintf>
					updateLcd ();
 8002b4a:	f7fe faa7 	bl	800109c <updateLcd>
 8002b4e:	e78b      	b.n	8002a68 <radioTestTransmit+0x24>
						power = radioTxTestMode + 9;
 8002b50:	3309      	adds	r3, #9
 8002b52:	e7ac      	b.n	8002aae <radioTestTransmit+0x6a>
						radioTxTestMode = (radioTxTestMode == 0) ? 11 : radioTxTestMode - 1;
 8002b54:	230b      	movs	r3, #11
 8002b56:	e7d0      	b.n	8002afa <radioTestTransmit+0xb6>
						sprintf (string[3], "Constant %u mw", radioTxTestMode + 9);
 8002b58:	490e      	ldr	r1, [pc, #56]	; (8002b94 <radioTestTransmit+0x150>)
 8002b5a:	3209      	adds	r2, #9
 8002b5c:	480a      	ldr	r0, [pc, #40]	; (8002b88 <radioTestTransmit+0x144>)
 8002b5e:	f005 fb1b 	bl	8008198 <siprintf>
 8002b62:	e7ed      	b.n	8002b40 <radioTestTransmit+0xfc>
 8002b64:	200009a0 	.word	0x200009a0
 8002b68:	20000b84 	.word	0x20000b84
 8002b6c:	2000003c 	.word	0x2000003c
 8002b70:	20000158 	.word	0x20000158
 8002b74:	0800a097 	.word	0x0800a097
 8002b78:	20000170 	.word	0x20000170
 8002b7c:	0800a0a3 	.word	0x0800a0a3
 8002b80:	200001b0 	.word	0x200001b0
 8002b84:	0800a0a9 	.word	0x0800a0a9
 8002b88:	20000230 	.word	0x20000230
 8002b8c:	0800a0bf 	.word	0x0800a0bf
 8002b90:	200001f0 	.word	0x200001f0
 8002b94:	0800a0b0 	.word	0x0800a0b0

08002b98 <radioTestReceive>:
 * Transmission powerd displayed by LCD and led
 * @param  None
 * @retval None
 */
void radioTestReceive ()
{
 8002b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SX127X_defaultConfig (&myRadio);
 8002b9c:	4d62      	ldr	r5, [pc, #392]	; (8002d28 <radioTestReceive+0x190>)
{
 8002b9e:	b08b      	sub	sp, #44	; 0x2c
	SX127X_defaultConfig (&myRadio);
 8002ba0:	4628      	mov	r0, r5
 8002ba2:	f001 ff0d 	bl	80049c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 8002ba6:	f7fe fb1b 	bl	80011e0 <tryLoadSettings>
	SX127X_config (&myRadio);
 8002baa:	4628      	mov	r0, r5
 8002bac:	f001 ff54 	bl	8004a58 <SX127X_config>
	myRadio.alwaysRX = 1;
 8002bb0:	2301      	movs	r3, #1
			static uint16_t ledPower[9];
			uint8_t i;
			uint32_t lastMessageReceived = 0;
			char message[20] = { 0, };

			SX127X_Routine (&myRadio);
 8002bb2:	462f      	mov	r7, r5
	flag.lcdRefreshRequest = 1;
 8002bb4:	4e5d      	ldr	r6, [pc, #372]	; (8002d2c <radioTestReceive+0x194>)
	myRadio.alwaysRX = 1;
 8002bb6:	73eb      	strb	r3, [r5, #15]
	flag.lcdRefreshRequest = 1;
 8002bb8:	7873      	ldrb	r3, [r6, #1]
			else
				wsSetColor (1, 0, 0, 0);

			for (i = 2; i < 9; i++)
				{
					wsSetColor (i, 0, ledPower[i] / 256, 0);
 8002bba:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002d34 <radioTestReceive+0x19c>
	flag.lcdRefreshRequest = 1;
 8002bbe:	f043 0304 	orr.w	r3, r3, #4
			if (flag.lcdRefreshRequest)
				{
					flag.lcdRefreshRequest = 0;

					clearStrings ();
					sprintf (string[0], "Receiver RSSI:%d dB", SX127X_RSSI_Pack (&myRadio));
 8002bc2:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8002d4c <radioTestReceive+0x1b4>
	flag.lcdRefreshRequest = 1;
 8002bc6:	7073      	strb	r3, [r6, #1]
			char message[20] = { 0, };
 8002bc8:	2400      	movs	r4, #0
 8002bca:	2210      	movs	r2, #16
 8002bcc:	4621      	mov	r1, r4
 8002bce:	a806      	add	r0, sp, #24
 8002bd0:	9405      	str	r4, [sp, #20]
 8002bd2:	f005 fa4b 	bl	800806c <memset>
			SX127X_Routine (&myRadio);
 8002bd6:	4638      	mov	r0, r7
 8002bd8:	f002 f8ca 	bl	8004d70 <SX127X_Routine>
			if (flag.uartGotMessage)
 8002bdc:	7873      	ldrb	r3, [r6, #1]
 8002bde:	06d9      	lsls	r1, r3, #27
 8002be0:	d504      	bpl.n	8002bec <radioTestReceive+0x54>
					flag.uartGotMessage = 0;
 8002be2:	f364 1304 	bfi	r3, r4, #4, #1
 8002be6:	7073      	strb	r3, [r6, #1]
					uartReceiveHandler ();
 8002be8:	f002 f9a6 	bl	8004f38 <uartReceiveHandler>
			if (myRadio.readBytes)
 8002bec:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
 8002bf0:	2a00      	cmp	r2, #0
 8002bf2:	f000 8090 	beq.w	8002d16 <radioTestReceive+0x17e>
					if (myRadio.badCrc)
 8002bf6:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
 8002bfa:	b11c      	cbz	r4, 8002c04 <radioTestReceive+0x6c>
							myRadio.readBytes = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
							continue;
 8002c02:	e7e1      	b.n	8002bc8 <radioTestReceive+0x30>
					memcpy (message, myRadio.rxBuf, myRadio.readBytes);
 8002c04:	494a      	ldr	r1, [pc, #296]	; (8002d30 <radioTestReceive+0x198>)
 8002c06:	a805      	add	r0, sp, #20
 8002c08:	f005 fa22 	bl	8008050 <memcpy>
					ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8002c0c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002c10:	7f6b      	ldrb	r3, [r5, #29]
					myRadio.readBytes = 0;
 8002c12:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
					ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8002c16:	3b61      	subs	r3, #97	; 0x61
 8002c18:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
					lastMessageReceived = HAL_GetTick ();
 8002c1c:	f002 fd30 	bl	8005680 <HAL_GetTick>
 8002c20:	4604      	mov	r4, r0
					flag.lcdRefreshRequest = 1;
 8002c22:	7873      	ldrb	r3, [r6, #1]
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	7073      	strb	r3, [r6, #1]
			if (myRadio.signalDetected)
 8002c2a:	7f2b      	ldrb	r3, [r5, #28]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d074      	beq.n	8002d1a <radioTestReceive+0x182>
				wsSetColor (0, 0, 0, 20);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2314      	movs	r3, #20
 8002c34:	4611      	mov	r1, r2
 8002c36:	4610      	mov	r0, r2
				wsSetColor (0, 0, 0, 0);
 8002c38:	f002 fc4c 	bl	80054d4 <wsSetColor>
			if (HAL_GetTick () - lastMessageReceived < 1000)
 8002c3c:	f002 fd20 	bl	8005680 <HAL_GetTick>
 8002c40:	1b00      	subs	r0, r0, r4
 8002c42:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
				wsSetColor (1, 0, 20, 0);
 8002c46:	f04f 0300 	mov.w	r3, #0
			if (HAL_GetTick () - lastMessageReceived < 1000)
 8002c4a:	d26a      	bcs.n	8002d22 <radioTestReceive+0x18a>
				wsSetColor (1, 0, 20, 0);
 8002c4c:	2214      	movs	r2, #20
 8002c4e:	4619      	mov	r1, r3
 8002c50:	2001      	movs	r0, #1
 8002c52:	f002 fc3f 	bl	80054d4 <wsSetColor>
			uint32_t lastMessageReceived = 0;
 8002c56:	2402      	movs	r4, #2
					wsSetColor (i, 0, ledPower[i] / 256, 0);
 8002c58:	2300      	movs	r3, #0
 8002c5a:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 8002c5e:	b2e0      	uxtb	r0, r4
 8002c60:	4619      	mov	r1, r3
 8002c62:	0a12      	lsrs	r2, r2, #8
 8002c64:	3401      	adds	r4, #1
 8002c66:	f002 fc35 	bl	80054d4 <wsSetColor>
			for (i = 2; i < 9; i++)
 8002c6a:	2c09      	cmp	r4, #9
 8002c6c:	d1f4      	bne.n	8002c58 <radioTestReceive+0xc0>
			wsPrepareArray ();
 8002c6e:	f002 fc71 	bl	8005554 <wsPrepareArray>
			for (i = 0; i < 9; i++)
 8002c72:	4a30      	ldr	r2, [pc, #192]	; (8002d34 <radioTestReceive+0x19c>)
				ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 8002c74:	f832 3b02 	ldrh.w	r3, [r2], #2
 8002c78:	b10b      	cbz	r3, 8002c7e <radioTestReceive+0xe6>
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3c01      	subs	r4, #1
			for (i = 0; i < 9; i++)
 8002c80:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
				ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 8002c84:	f822 3c02 	strh.w	r3, [r2, #-2]
			for (i = 0; i < 9; i++)
 8002c88:	d1f4      	bne.n	8002c74 <radioTestReceive+0xdc>
			if (flag.lcdRefreshRequest)
 8002c8a:	7873      	ldrb	r3, [r6, #1]
 8002c8c:	075a      	lsls	r2, r3, #29
 8002c8e:	d59b      	bpl.n	8002bc8 <radioTestReceive+0x30>
					flag.lcdRefreshRequest = 0;
 8002c90:	f364 0382 	bfi	r3, r4, #2, #1
 8002c94:	7073      	strb	r3, [r6, #1]
					clearStrings ();
 8002c96:	f7fe f9ef 	bl	8001078 <clearStrings>
					sprintf (string[0], "Receiver RSSI:%d dB", SX127X_RSSI_Pack (&myRadio));
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f002 f838 	bl	8004d10 <SX127X_RSSI_Pack>
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	4824      	ldr	r0, [pc, #144]	; (8002d38 <radioTestReceive+0x1a0>)
 8002ca6:	f005 fa77 	bl	8008198 <siprintf>
					memcpy (string[1], message, 14);
 8002caa:	4b24      	ldr	r3, [pc, #144]	; (8002d3c <radioTestReceive+0x1a4>)
 8002cac:	aa05      	add	r2, sp, #20
 8002cae:	f10d 0c1c 	add.w	ip, sp, #28
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	cc03      	ldmia	r4!, {r0, r1}
 8002cb6:	4564      	cmp	r4, ip
 8002cb8:	6018      	str	r0, [r3, #0]
 8002cba:	6059      	str	r1, [r3, #4]
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	f103 0308 	add.w	r3, r3, #8
 8002cc2:	d1f6      	bne.n	8002cb2 <radioTestReceive+0x11a>
 8002cc4:	6820      	ldr	r0, [r4, #0]
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 8002cc6:	491e      	ldr	r1, [pc, #120]	; (8002d40 <radioTestReceive+0x1a8>)
					memcpy (string[1], message, 14);
 8002cc8:	6018      	str	r0, [r3, #0]
 8002cca:	88a2      	ldrh	r2, [r4, #4]
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 8002ccc:	481d      	ldr	r0, [pc, #116]	; (8002d44 <radioTestReceive+0x1ac>)
					memcpy (string[1], message, 14);
 8002cce:	809a      	strh	r2, [r3, #4]
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 8002cd0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002cd4:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002cd8:	9302      	str	r3, [sp, #8]
 8002cda:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8002cde:	9301      	str	r3, [sp, #4]
 8002ce0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002cea:	f005 fa55 	bl	8008198 <siprintf>
					sprintf (string[3], "%02x %02x %02x %02x %02x", message[5], message[6], message[7], message[8], message[9]);
 8002cee:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8002cf2:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8002cf6:	9302      	str	r3, [sp, #8]
 8002cf8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002cfc:	4910      	ldr	r1, [pc, #64]	; (8002d40 <radioTestReceive+0x1a8>)
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002d04:	4810      	ldr	r0, [pc, #64]	; (8002d48 <radioTestReceive+0x1b0>)
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002d0c:	f005 fa44 	bl	8008198 <siprintf>
					updateLcd ();
 8002d10:	f7fe f9c4 	bl	800109c <updateLcd>
 8002d14:	e758      	b.n	8002bc8 <radioTestReceive+0x30>
			uint32_t lastMessageReceived = 0;
 8002d16:	4614      	mov	r4, r2
 8002d18:	e787      	b.n	8002c2a <radioTestReceive+0x92>
				wsSetColor (0, 0, 0, 0);
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	e78a      	b.n	8002c38 <radioTestReceive+0xa0>
				wsSetColor (1, 0, 0, 0);
 8002d22:	461a      	mov	r2, r3
 8002d24:	e793      	b.n	8002c4e <radioTestReceive+0xb6>
 8002d26:	bf00      	nop
 8002d28:	200009a0 	.word	0x200009a0
 8002d2c:	20000b84 	.word	0x20000b84
 8002d30:	200009bd 	.word	0x200009bd
 8002d34:	2000013c 	.word	0x2000013c
 8002d38:	20000170 	.word	0x20000170
 8002d3c:	200001b0 	.word	0x200001b0
 8002d40:	0800a0de 	.word	0x0800a0de
 8002d44:	200001f0 	.word	0x200001f0
 8002d48:	20000230 	.word	0x20000230
 8002d4c:	0800a0ca 	.word	0x0800a0ca

08002d50 <radioTestPing>:
 * Pings Base in manual or automatic mode
 * @param  None
 * @retval None
 */
void radioTestPing ()
{
 8002d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSend = 0;
	uint32_t lastReceived = 0;
	uint32_t lastLcdUpdate = 0;
	uint8_t i;
	uint32_t sendCount = 0;
	uint32_t receivedCount = 0;
 8002d54:	2600      	movs	r6, #0
	SX127X_defaultConfig (&myRadio);
 8002d56:	4d84      	ldr	r5, [pc, #528]	; (8002f68 <radioTestPing+0x218>)
	uint32_t sendCount = 0;
 8002d58:	46b0      	mov	r8, r6
	SX127X_defaultConfig (&myRadio);
 8002d5a:	4628      	mov	r0, r5
 8002d5c:	f001 fe30 	bl	80049c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 8002d60:	f7fe fa3e 	bl	80011e0 <tryLoadSettings>
	SX127X_config (&myRadio);
 8002d64:	4628      	mov	r0, r5
 8002d66:	f001 fe77 	bl	8004a58 <SX127X_config>
	myRadio.alwaysRX = 1;
 8002d6a:	2301      	movs	r3, #1

	txMes->adr = 0;
	txMes->disarm = 0;
	txMes->uplink = 0;
 8002d6c:	2202      	movs	r2, #2
	uint32_t lastReceived = 0;
 8002d6e:	46b1      	mov	r9, r6
	uint32_t lastSend = 0;
 8002d70:	46b2      	mov	sl, r6
	uint8_t autoPing = 0;
 8002d72:	4637      	mov	r7, r6
	myRadio.alwaysRX = 1;
 8002d74:	73eb      	strb	r3, [r5, #15]
	txMes->adr = 0;
 8002d76:	4b7d      	ldr	r3, [pc, #500]	; (8002f6c <radioTestPing+0x21c>)
	uint32_t lastLcdUpdate = 0;
 8002d78:	9601      	str	r6, [sp, #4]
	txMes->adr = 0;
 8002d7a:	681b      	ldr	r3, [r3, #0]
	txMes->uplink = 0;
 8002d7c:	701a      	strb	r2, [r3, #0]
	txMes->disarm = 0;
 8002d7e:	785a      	ldrb	r2, [r3, #1]
 8002d80:	f36f 0200 	bfc	r2, #0, #1
 8002d84:	705a      	strb	r2, [r3, #1]

	while (1)
		{
			HAL_UART_Receive_IT (&huart1, &uartIn, 1);

			if (flag.encInc || flag.encDec)
 8002d86:	4c7a      	ldr	r4, [pc, #488]	; (8002f70 <radioTestPing+0x220>)
			HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 8002d88:	2201      	movs	r2, #1
 8002d8a:	497a      	ldr	r1, [pc, #488]	; (8002f74 <radioTestPing+0x224>)
 8002d8c:	487a      	ldr	r0, [pc, #488]	; (8002f78 <radioTestPing+0x228>)
 8002d8e:	f005 f91c 	bl	8007fca <HAL_UART_Receive_IT>
			if (flag.encInc || flag.encDec)
 8002d92:	7823      	ldrb	r3, [r4, #0]
 8002d94:	0798      	lsls	r0, r3, #30
 8002d96:	d009      	beq.n	8002dac <radioTestPing+0x5c>
				{
					flag.encInc = 0;
					flag.encDec = 0;
					autoPing = ~autoPing;
 8002d98:	43ff      	mvns	r7, r7
					flag.encInc = 0;
 8002d9a:	8823      	ldrh	r3, [r4, #0]
					autoPing = ~autoPing;
 8002d9c:	b2ff      	uxtb	r7, r7
					flag.encInc = 0;
 8002d9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002daa:	8023      	strh	r3, [r4, #0]
					flag.lcdRefreshRequest = 1;
				}

			if (myRadio.readBytes > 0)
 8002dac:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
 8002db0:	b173      	cbz	r3, 8002dd0 <radioTestPing+0x80>
				{
					if (myRadio.badCrc != 0)
 8002db2:	f895 b060 	ldrb.w	fp, [r5, #96]	; 0x60
 8002db6:	f1bb 0f00 	cmp.w	fp, #0
 8002dba:	d003      	beq.n	8002dc4 <radioTestPing+0x74>
						{
							myRadio.readBytes = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
							continue;
 8002dc2:	e7e0      	b.n	8002d86 <radioTestPing+0x36>
						}
					receivedCount++;
					lastReceived = HAL_GetTick ();
 8002dc4:	f002 fc5c 	bl	8005680 <HAL_GetTick>
 8002dc8:	4681      	mov	r9, r0
					receivedCount++;
 8002dca:	3601      	adds	r6, #1
					myRadio.readBytes = 0;
 8002dcc:	f885 b05d 	strb.w	fp, [r5, #93]	; 0x5d
				}

			if (HAL_GetTick () - lastSend > 2000 && (autoPing || flag.encOk))
 8002dd0:	f002 fc56 	bl	8005680 <HAL_GetTick>
 8002dd4:	eba0 000a 	sub.w	r0, r0, sl
 8002dd8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8002ddc:	d910      	bls.n	8002e00 <radioTestPing+0xb0>
 8002dde:	7823      	ldrb	r3, [r4, #0]
 8002de0:	f003 0204 	and.w	r2, r3, #4
 8002de4:	433a      	orrs	r2, r7
 8002de6:	d00b      	beq.n	8002e00 <radioTestPing+0xb0>
				{
					sendCount++;
					flag.encOk = 0;
 8002de8:	f36f 0382 	bfc	r3, #2, #1
					SX127X_transmitAsync (&myRadio, 3);
 8002dec:	2103      	movs	r1, #3
 8002dee:	485e      	ldr	r0, [pc, #376]	; (8002f68 <radioTestPing+0x218>)
					flag.encOk = 0;
 8002df0:	7023      	strb	r3, [r4, #0]
					SX127X_transmitAsync (&myRadio, 3);
 8002df2:	f001 ff6f 	bl	8004cd4 <SX127X_transmitAsync>
					lastSend = HAL_GetTick ();
 8002df6:	f002 fc43 	bl	8005680 <HAL_GetTick>
 8002dfa:	4682      	mov	sl, r0
					sendCount++;
 8002dfc:	f108 0801 	add.w	r8, r8, #1
				}

			SX127X_Routine (&myRadio);
 8002e00:	4859      	ldr	r0, [pc, #356]	; (8002f68 <radioTestPing+0x218>)
 8002e02:	f001 ffb5 	bl	8004d70 <SX127X_Routine>
 8002e06:	f04f 0b00 	mov.w	fp, #0

//Handle LED
			for (i = 0; i < 9; i++)
				wsSetColor (i, BLACK);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	fa5f f08b 	uxtb.w	r0, fp
 8002e10:	461a      	mov	r2, r3
 8002e12:	4619      	mov	r1, r3
 8002e14:	f10b 0b01 	add.w	fp, fp, #1
 8002e18:	f002 fb5c 	bl	80054d4 <wsSetColor>
			for (i = 0; i < 9; i++)
 8002e1c:	f1bb 0f09 	cmp.w	fp, #9
 8002e20:	d1f3      	bne.n	8002e0a <radioTestPing+0xba>
			if (myRadio.status == TX)
 8002e22:	f895 b010 	ldrb.w	fp, [r5, #16]
 8002e26:	f1bb 0f03 	cmp.w	fp, #3
 8002e2a:	d117      	bne.n	8002e5c <radioTestPing+0x10c>
				{
					wsSetColor (1, MAGENTA);
 8002e2c:	2310      	movs	r3, #16
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4619      	mov	r1, r3
 8002e32:	2001      	movs	r0, #1
 8002e34:	f002 fb4e 	bl	80054d4 <wsSetColor>
					wsSetColor (2, MAGENTA);
 8002e38:	2310      	movs	r3, #16
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	2002      	movs	r0, #2
 8002e40:	f002 fb48 	bl	80054d4 <wsSetColor>
					wsSetColor (3, MAGENTA);
 8002e44:	2310      	movs	r3, #16
 8002e46:	2200      	movs	r2, #0
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4658      	mov	r0, fp
 8002e4c:	f002 fb42 	bl	80054d4 <wsSetColor>
					wsSetColor (4, MAGENTA);
 8002e50:	2310      	movs	r3, #16
 8002e52:	2200      	movs	r2, #0
 8002e54:	4619      	mov	r1, r3
 8002e56:	2004      	movs	r0, #4
 8002e58:	f002 fb3c 	bl	80054d4 <wsSetColor>
				}
			if (HAL_GetTick () - lastReceived < 600 && lastReceived)
 8002e5c:	f002 fc10 	bl	8005680 <HAL_GetTick>
 8002e60:	eba0 0009 	sub.w	r0, r0, r9
 8002e64:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 8002e68:	d21a      	bcs.n	8002ea0 <radioTestPing+0x150>
 8002e6a:	f1b9 0f00 	cmp.w	r9, #0
 8002e6e:	d017      	beq.n	8002ea0 <radioTestPing+0x150>
				{
					wsSetColor (5, GREEN);
 8002e70:	2300      	movs	r3, #0
 8002e72:	2210      	movs	r2, #16
 8002e74:	4619      	mov	r1, r3
 8002e76:	2005      	movs	r0, #5
 8002e78:	f002 fb2c 	bl	80054d4 <wsSetColor>
					wsSetColor (6, GREEN);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	2210      	movs	r2, #16
 8002e80:	4619      	mov	r1, r3
 8002e82:	2006      	movs	r0, #6
 8002e84:	f002 fb26 	bl	80054d4 <wsSetColor>
					wsSetColor (7, GREEN);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	2007      	movs	r0, #7
 8002e90:	f002 fb20 	bl	80054d4 <wsSetColor>
					wsSetColor (8, GREEN);
 8002e94:	2300      	movs	r3, #0
 8002e96:	2210      	movs	r2, #16
 8002e98:	4619      	mov	r1, r3
 8002e9a:	2008      	movs	r0, #8
 8002e9c:	f002 fb1a 	bl	80054d4 <wsSetColor>
				}
			if (HAL_GetTick () - lastUartConnect < 200)
 8002ea0:	f002 fbee 	bl	8005680 <HAL_GetTick>
 8002ea4:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 8002fa4 <radioTestPing+0x254>
 8002ea8:	f8db 3000 	ldr.w	r3, [fp]
 8002eac:	1ac0      	subs	r0, r0, r3
 8002eae:	28c7      	cmp	r0, #199	; 0xc7
 8002eb0:	d805      	bhi.n	8002ebe <radioTestPing+0x16e>
				{
					wsSetColor (0, YELLOW);
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	2210      	movs	r2, #16
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4611      	mov	r1, r2
 8002eba:	f002 fb0b 	bl	80054d4 <wsSetColor>
				}
			wsPrepareArray ();
 8002ebe:	f002 fb49 	bl	8005554 <wsPrepareArray>

//Handle UART
			if (HAL_GetTick () - lastLcdUpdate > 300)
 8002ec2:	f002 fbdd 	bl	8005680 <HAL_GetTick>
 8002ec6:	9b01      	ldr	r3, [sp, #4]
 8002ec8:	1ac0      	subs	r0, r0, r3
 8002eca:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
				flag.lcdRefreshRequest = 1;
 8002ece:	bf82      	ittt	hi
 8002ed0:	7863      	ldrbhi	r3, [r4, #1]
 8002ed2:	f043 0304 	orrhi.w	r3, r3, #4
 8002ed6:	7063      	strbhi	r3, [r4, #1]

			if (flag.uartGotMessage)
 8002ed8:	7863      	ldrb	r3, [r4, #1]
 8002eda:	06d9      	lsls	r1, r3, #27
 8002edc:	d508      	bpl.n	8002ef0 <radioTestPing+0x1a0>
				{
					flag.uartGotMessage = 0;
 8002ede:	f36f 1304 	bfc	r3, #4, #1
 8002ee2:	7063      	strb	r3, [r4, #1]
					lastUartConnect = HAL_GetTick ();
 8002ee4:	f002 fbcc 	bl	8005680 <HAL_GetTick>
 8002ee8:	f8cb 0000 	str.w	r0, [fp]

					uartReceiveHandler ();
 8002eec:	f002 f824 	bl	8004f38 <uartReceiveHandler>
				}

//Handle LCD
			if (flag.lcdRefreshRequest)
 8002ef0:	7863      	ldrb	r3, [r4, #1]
 8002ef2:	075a      	lsls	r2, r3, #29
 8002ef4:	f57f af47 	bpl.w	8002d86 <radioTestPing+0x36>
				{
					flag.lcdRefreshRequest = 0;
 8002ef8:	f36f 0382 	bfc	r3, #2, #1
 8002efc:	7063      	strb	r3, [r4, #1]

					float sucess;
					if (sendCount != 0)
 8002efe:	f1b8 0f00 	cmp.w	r8, #0
 8002f02:	d02d      	beq.n	8002f60 <radioTestPing+0x210>
						sucess = (float) receivedCount / (float) sendCount;
 8002f04:	4630      	mov	r0, r6
 8002f06:	f7fd f9df 	bl	80002c8 <__aeabi_ui2f>
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	f7fd f9db 	bl	80002c8 <__aeabi_ui2f>
 8002f12:	4601      	mov	r1, r0
 8002f14:	4620      	mov	r0, r4
 8002f16:	f7fd fae3 	bl	80004e0 <__aeabi_fdiv>
 8002f1a:	4604      	mov	r4, r0
					else
						sucess = 0;

					lastLcdUpdate = HAL_GetTick ();
 8002f1c:	f002 fbb0 	bl	8005680 <HAL_GetTick>
 8002f20:	9001      	str	r0, [sp, #4]
					clearStrings ();
 8002f22:	f7fe f8a9 	bl	8001078 <clearStrings>

					if (autoPing)
 8002f26:	b1ef      	cbz	r7, 8002f64 <radioTestPing+0x214>
						sprintf (string[0], "Ping auto");
 8002f28:	4914      	ldr	r1, [pc, #80]	; (8002f7c <radioTestPing+0x22c>)
					else
						sprintf (string[0], "Ping manual");
 8002f2a:	4815      	ldr	r0, [pc, #84]	; (8002f80 <radioTestPing+0x230>)
 8002f2c:	f005 f954 	bl	80081d8 <strcpy>
					sprintf (string[1], "send %lu", sendCount);
 8002f30:	4642      	mov	r2, r8
 8002f32:	4914      	ldr	r1, [pc, #80]	; (8002f84 <radioTestPing+0x234>)
 8002f34:	4814      	ldr	r0, [pc, #80]	; (8002f88 <radioTestPing+0x238>)
 8002f36:	f005 f92f 	bl	8008198 <siprintf>
					sprintf (string[2], "received %lu", receivedCount);
 8002f3a:	4632      	mov	r2, r6
 8002f3c:	4913      	ldr	r1, [pc, #76]	; (8002f8c <radioTestPing+0x23c>)
 8002f3e:	4814      	ldr	r0, [pc, #80]	; (8002f90 <radioTestPing+0x240>)
 8002f40:	f005 f92a 	bl	8008198 <siprintf>
					sprintf (string[3], "%d%% sucess", (int) (sucess * 100));
 8002f44:	4913      	ldr	r1, [pc, #76]	; (8002f94 <radioTestPing+0x244>)
 8002f46:	4620      	mov	r0, r4
 8002f48:	f7fd fa16 	bl	8000378 <__aeabi_fmul>
 8002f4c:	f7fd fbda 	bl	8000704 <__aeabi_f2iz>
 8002f50:	4911      	ldr	r1, [pc, #68]	; (8002f98 <radioTestPing+0x248>)
 8002f52:	4602      	mov	r2, r0
 8002f54:	4811      	ldr	r0, [pc, #68]	; (8002f9c <radioTestPing+0x24c>)
 8002f56:	f005 f91f 	bl	8008198 <siprintf>
					updateLcd ();
 8002f5a:	f7fe f89f 	bl	800109c <updateLcd>
 8002f5e:	e712      	b.n	8002d86 <radioTestPing+0x36>
						sucess = 0;
 8002f60:	2400      	movs	r4, #0
 8002f62:	e7db      	b.n	8002f1c <radioTestPing+0x1cc>
						sprintf (string[0], "Ping manual");
 8002f64:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <radioTestPing+0x250>)
 8002f66:	e7e0      	b.n	8002f2a <radioTestPing+0x1da>
 8002f68:	200009a0 	.word	0x200009a0
 8002f6c:	20000044 	.word	0x20000044
 8002f70:	20000b84 	.word	0x20000b84
 8002f74:	20000bd0 	.word	0x20000bd0
 8002f78:	20000c38 	.word	0x20000c38
 8002f7c:	0800a0f7 	.word	0x0800a0f7
 8002f80:	20000170 	.word	0x20000170
 8002f84:	0800a10d 	.word	0x0800a10d
 8002f88:	200001b0 	.word	0x200001b0
 8002f8c:	0800a116 	.word	0x0800a116
 8002f90:	200001f0 	.word	0x200001f0
 8002f94:	42c80000 	.word	0x42c80000
 8002f98:	0800a123 	.word	0x0800a123
 8002f9c:	20000230 	.word	0x20000230
 8002fa0:	0800a101 	.word	0x0800a101
 8002fa4:	20001898 	.word	0x20001898

08002fa8 <radioSignalIndicator>:
 * Shows current RSSI
 * @param  None
 * @retval None
 */
void radioSignalIndicator ()
{
 8002fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	int16_t rssi;
	int16_t scale;
	SX127X_defaultConfig (&myRadio);
 8002fac:	4829      	ldr	r0, [pc, #164]	; (8003054 <radioSignalIndicator+0xac>)
 8002fae:	f001 fd07 	bl	80049c0 <SX127X_defaultConfig>
	tryLoadSettings ();
 8002fb2:	f7fe f915 	bl	80011e0 <tryLoadSettings>
	SX127X_config (&myRadio);
 8002fb6:	4827      	ldr	r0, [pc, #156]	; (8003054 <radioSignalIndicator+0xac>)
 8002fb8:	f001 fd4e 	bl	8004a58 <SX127X_config>
	while (1)
		{
			rssi = SX127X_RSSI (&myRadio);
 8002fbc:	4e25      	ldr	r6, [pc, #148]	; (8003054 <radioSignalIndicator+0xac>)
			scale = (rssi > -120) ? 120 + rssi : 0;
			clearStrings ();
			sprintf (string[0], "RSSI Meter");
 8002fbe:	4f26      	ldr	r7, [pc, #152]	; (8003058 <radioSignalIndicator+0xb0>)
			rssi = SX127X_RSSI (&myRadio);
 8002fc0:	4630      	mov	r0, r6
 8002fc2:	f001 fe93 	bl	8004cec <SX127X_RSSI>
			scale = (rssi > -120) ? 120 + rssi : 0;
 8002fc6:	f110 0f77 	cmn.w	r0, #119	; 0x77
 8002fca:	bfb8      	it	lt
 8002fcc:	2400      	movlt	r4, #0
			rssi = SX127X_RSSI (&myRadio);
 8002fce:	4605      	mov	r5, r0
			scale = (rssi > -120) ? 120 + rssi : 0;
 8002fd0:	bfa4      	itt	ge
 8002fd2:	f100 0378 	addge.w	r3, r0, #120	; 0x78
 8002fd6:	b21c      	sxthge	r4, r3
			clearStrings ();
 8002fd8:	f7fe f84e 	bl	8001078 <clearStrings>
			sprintf (string[0], "RSSI Meter");
 8002fdc:	4639      	mov	r1, r7
 8002fde:	481f      	ldr	r0, [pc, #124]	; (800305c <radioSignalIndicator+0xb4>)
 8002fe0:	f005 f8fa 	bl	80081d8 <strcpy>
			sprintf (string[1], "RSSI:%4d C:%d", rssi, scale);
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	462a      	mov	r2, r5
 8002fe8:	491d      	ldr	r1, [pc, #116]	; (8003060 <radioSignalIndicator+0xb8>)
 8002fea:	481e      	ldr	r0, [pc, #120]	; (8003064 <radioSignalIndicator+0xbc>)
 8002fec:	f005 f8d4 	bl	8008198 <siprintf>
			SX127X_Routine (&myRadio);
 8002ff0:	4818      	ldr	r0, [pc, #96]	; (8003054 <radioSignalIndicator+0xac>)
 8002ff2:	f001 febd 	bl	8004d70 <SX127X_Routine>
			updateLcd ();
 8002ff6:	f7fe f851 	bl	800109c <updateLcd>
			wsSetColor (0, BLACK);
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4619      	mov	r1, r3
 8003000:	4618      	mov	r0, r3
 8003002:	f002 fa67 	bl	80054d4 <wsSetColor>
			if (myRadio.signalDetected)
 8003006:	7f33      	ldrb	r3, [r6, #28]
 8003008:	b12b      	cbz	r3, 8003016 <radioSignalIndicator+0x6e>
				wsSetColor (0, CYAN);
 800300a:	2310      	movs	r3, #16
 800300c:	2100      	movs	r1, #0
 800300e:	461a      	mov	r2, r3
 8003010:	4608      	mov	r0, r1
 8003012:	f002 fa5f 	bl	80054d4 <wsSetColor>
			for (i = 0; i < 8; i++)
				{
					if (scale / 10 > i)
 8003016:	220a      	movs	r2, #10
 8003018:	fb94 f3f2 	sdiv	r3, r4, r2
						wsSetColor (8 - i, 0, 10, 0);
					else if (scale / 10 < i)
						wsSetColor (8 - i, 0, 0, 0);
					else
						wsSetColor (8 - i, 0, scale % 10, 0);
 800301c:	2500      	movs	r5, #0
					if (scale / 10 > i)
 800301e:	fa0f f883 	sxth.w	r8, r3
						wsSetColor (8 - i, 0, scale % 10, 0);
 8003022:	fb02 4313 	mls	r3, r2, r3, r4
 8003026:	b2dc      	uxtb	r4, r3
					if (scale / 10 > i)
 8003028:	f1c5 0008 	rsb	r0, r5, #8
 800302c:	45a8      	cmp	r8, r5
						wsSetColor (8 - i, 0, 10, 0);
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	b2c0      	uxtb	r0, r0
					if (scale / 10 > i)
 8003034:	dd09      	ble.n	800304a <radioSignalIndicator+0xa2>
						wsSetColor (8 - i, 0, 10, 0);
 8003036:	220a      	movs	r2, #10
						wsSetColor (8 - i, 0, scale % 10, 0);
 8003038:	4619      	mov	r1, r3
 800303a:	3501      	adds	r5, #1
 800303c:	f002 fa4a 	bl	80054d4 <wsSetColor>
			for (i = 0; i < 8; i++)
 8003040:	2d08      	cmp	r5, #8
 8003042:	d1f1      	bne.n	8003028 <radioSignalIndicator+0x80>

				}
			wsPrepareArray ();
 8003044:	f002 fa86 	bl	8005554 <wsPrepareArray>
			rssi = SX127X_RSSI (&myRadio);
 8003048:	e7ba      	b.n	8002fc0 <radioSignalIndicator+0x18>
						wsSetColor (8 - i, 0, 0, 0);
 800304a:	bfb4      	ite	lt
 800304c:	461a      	movlt	r2, r3
						wsSetColor (8 - i, 0, scale % 10, 0);
 800304e:	4622      	movge	r2, r4
 8003050:	e7f2      	b.n	8003038 <radioSignalIndicator+0x90>
 8003052:	bf00      	nop
 8003054:	200009a0 	.word	0x200009a0
 8003058:	0800a12f 	.word	0x0800a12f
 800305c:	20000170 	.word	0x20000170
 8003060:	0800a13a 	.word	0x0800a13a
 8003064:	200001b0 	.word	0x200001b0

08003068 <button_ok>:
{
 8003068:	b538      	push	{r3, r4, r5, lr}
	if (screenMode == smModeSelect)
 800306a:	4aa0      	ldr	r2, [pc, #640]	; (80032ec <button_ok+0x284>)
 800306c:	7813      	ldrb	r3, [r2, #0]
 800306e:	4614      	mov	r4, r2
 8003070:	2b1e      	cmp	r3, #30
 8003072:	d116      	bne.n	80030a2 <button_ok+0x3a>
			switch (selectedMode)
 8003074:	4b9e      	ldr	r3, [pc, #632]	; (80032f0 <button_ok+0x288>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b05      	cmp	r3, #5
 800307a:	f200 8094 	bhi.w	80031a6 <button_ok+0x13e>
 800307e:	e8df f003 	tbb	[pc, r3]
 8003082:	0603      	.short	0x0603
 8003084:	0e0c0a08 	.word	0x0e0c0a08
					screenMode = smRegular;
 8003088:	2300      	movs	r3, #0
			screenMode = smRadioMenu;
 800308a:	7023      	strb	r3, [r4, #0]
 800308c:	e08b      	b.n	80031a6 <button_ok+0x13e>
					colorTest ();
 800308e:	f7ff fc39 	bl	8002904 <colorTest>
					radioTestTransmit ();
 8003092:	f7ff fcd7 	bl	8002a44 <radioTestTransmit>
					radioTestReceive ();
 8003096:	f7ff fd7f 	bl	8002b98 <radioTestReceive>
					radioTestPing ();
 800309a:	f7ff fe59 	bl	8002d50 <radioTestPing>
					radioSignalIndicator ();
 800309e:	f7ff ff83 	bl	8002fa8 <radioSignalIndicator>
	else if (screenMode == smRegular)
 80030a2:	b913      	cbnz	r3, 80030aa <button_ok+0x42>
			screenMode = smNodeAction;
 80030a4:	231d      	movs	r3, #29
				cursorPos++;
 80030a6:	7013      	strb	r3, [r2, #0]
 80030a8:	e07d      	b.n	80031a6 <button_ok+0x13e>
	else if (screenMode == smMainMenu)
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d116      	bne.n	80030dc <button_ok+0x74>
			switch (menuPosition)
 80030ae:	4b91      	ldr	r3, [pc, #580]	; (80032f4 <button_ok+0x28c>)
 80030b0:	f993 3000 	ldrsb.w	r3, [r3]
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d834      	bhi.n	8003122 <button_ok+0xba>
 80030b8:	e8df f003 	tbb	[pc, r3]
 80030bc:	0a080603 	.word	0x0a080603
 80030c0:	0e0c      	.short	0x0e0c
					screenMode = smRadioMenu;
 80030c2:	2302      	movs	r3, #2
			screenMode = smMainMenu;
 80030c4:	7023      	strb	r3, [r4, #0]
 80030c6:	e02c      	b.n	8003122 <button_ok+0xba>
					screenMode = smBaseMenu;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e7fb      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smNodeMenu;
 80030cc:	2304      	movs	r3, #4
 80030ce:	e7f9      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smNetworkMenu;
 80030d0:	2305      	movs	r3, #5
 80030d2:	e7f7      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSaveConfig;
 80030d4:	2318      	movs	r3, #24
 80030d6:	e7f5      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smStatus;
 80030d8:	2319      	movs	r3, #25
 80030da:	e7f3      	b.n	80030c4 <button_ok+0x5c>
	else if (screenMode == smRadioMenu)
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d118      	bne.n	8003112 <button_ok+0xaa>
			switch (menuPosition)
 80030e0:	4b84      	ldr	r3, [pc, #528]	; (80032f4 <button_ok+0x28c>)
 80030e2:	f993 3000 	ldrsb.w	r3, [r3]
 80030e6:	2b06      	cmp	r3, #6
 80030e8:	d81b      	bhi.n	8003122 <button_ok+0xba>
 80030ea:	e8df f003 	tbb	[pc, r3]
 80030ee:	0604      	.short	0x0604
 80030f0:	0e0c0a08 	.word	0x0e0c0a08
 80030f4:	10          	.byte	0x10
 80030f5:	00          	.byte	0x00
					screenMode = smFrequency;
 80030f6:	2306      	movs	r3, #6
 80030f8:	e7e4      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smBw;
 80030fa:	2308      	movs	r3, #8
 80030fc:	e7e2      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSf;
 80030fe:	2307      	movs	r3, #7
 8003100:	e7e0      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSw;
 8003102:	2309      	movs	r3, #9
 8003104:	e7de      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smCr;
 8003106:	230a      	movs	r3, #10
 8003108:	e7dc      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smPreamble;
 800310a:	230b      	movs	r3, #11
 800310c:	e7da      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smPower;
 800310e:	230c      	movs	r3, #12
 8003110:	e7d8      	b.n	80030c4 <button_ok+0x5c>
	else if (screenMode == smBaseMenu)
 8003112:	2b03      	cmp	r3, #3
 8003114:	d10c      	bne.n	8003130 <button_ok+0xc8>
			switch (menuPosition)
 8003116:	4b77      	ldr	r3, [pc, #476]	; (80032f4 <button_ok+0x28c>)
 8003118:	f993 3000 	ldrsb.w	r3, [r3]
 800311c:	b11b      	cbz	r3, 8003126 <button_ok+0xbe>
 800311e:	2b01      	cmp	r3, #1
 8003120:	d004      	beq.n	800312c <button_ok+0xc4>
			menuPosition = 0;
 8003122:	4b74      	ldr	r3, [pc, #464]	; (80032f4 <button_ok+0x28c>)
 8003124:	e084      	b.n	8003230 <button_ok+0x1c8>
					screenMode = smInterval1;
 8003126:	230d      	movs	r3, #13
					screenMode = smCleanNodeData;
 8003128:	7013      	strb	r3, [r2, #0]
					break;
 800312a:	e7fa      	b.n	8003122 <button_ok+0xba>
					screenMode = smInterval2;
 800312c:	230e      	movs	r3, #14
 800312e:	e7fb      	b.n	8003128 <button_ok+0xc0>
	else if (screenMode == smNodeMenu)
 8003130:	2b04      	cmp	r3, #4
 8003132:	d10e      	bne.n	8003152 <button_ok+0xea>
			switch (menuPosition)
 8003134:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <button_ok+0x28c>)
 8003136:	f993 3000 	ldrsb.w	r3, [r3]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d005      	beq.n	800314a <button_ok+0xe2>
 800313e:	2b02      	cmp	r3, #2
 8003140:	d005      	beq.n	800314e <button_ok+0xe6>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ed      	bne.n	8003122 <button_ok+0xba>
					screenMode = smWorkInterval;
 8003146:	230f      	movs	r3, #15
 8003148:	e7ee      	b.n	8003128 <button_ok+0xc0>
					screenMode = smLed;
 800314a:	2310      	movs	r3, #16
 800314c:	e7ec      	b.n	8003128 <button_ok+0xc0>
					screenMode = smCleanNodeData;
 800314e:	2311      	movs	r3, #17
 8003150:	e7ea      	b.n	8003128 <button_ok+0xc0>
	else if (screenMode == smNetworkMenu)
 8003152:	2b05      	cmp	r3, #5
 8003154:	d115      	bne.n	8003182 <button_ok+0x11a>
			switch (menuPosition)
 8003156:	4b67      	ldr	r3, [pc, #412]	; (80032f4 <button_ok+0x28c>)
 8003158:	f993 3000 	ldrsb.w	r3, [r3]
 800315c:	2b05      	cmp	r3, #5
 800315e:	d8e0      	bhi.n	8003122 <button_ok+0xba>
 8003160:	e8df f003 	tbb	[pc, r3]
 8003164:	09070503 	.word	0x09070503
 8003168:	0d0b      	.short	0x0d0b
					screenMode = smRefreshNetworks;
 800316a:	2312      	movs	r3, #18
 800316c:	e7aa      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSelectNet;
 800316e:	2313      	movs	r3, #19
 8003170:	e7a8      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSetWiFiPassword;
 8003172:	2314      	movs	r3, #20
 8003174:	e7a6      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSetServerPassword;
 8003176:	2315      	movs	r3, #21
 8003178:	e7a4      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSetBaseID;
 800317a:	2317      	movs	r3, #23
 800317c:	e7a2      	b.n	80030c4 <button_ok+0x5c>
					screenMode = smSetHost;
 800317e:	2316      	movs	r3, #22
 8003180:	e7a0      	b.n	80030c4 <button_ok+0x5c>
	else if (screenMode == smNodeAction)
 8003182:	2b1d      	cmp	r3, #29
 8003184:	d139      	bne.n	80031fa <button_ok+0x192>
			switch (menuPosition)
 8003186:	4b5b      	ldr	r3, [pc, #364]	; (80032f4 <button_ok+0x28c>)
 8003188:	f993 3000 	ldrsb.w	r3, [r3]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d80a      	bhi.n	80031a6 <button_ok+0x13e>
 8003190:	e8df f003 	tbb	[pc, r3]
 8003194:	27210f02 	.word	0x27210f02
					screenMode = smRegular;
 8003198:	2300      	movs	r3, #0
 800319a:	7023      	strb	r3, [r4, #0]
					pingNode (selectedNode);
 800319c:	4b56      	ldr	r3, [pc, #344]	; (80032f8 <button_ok+0x290>)
 800319e:	f9b3 0000 	ldrsh.w	r0, [r3]
 80031a2:	f7fe fd53 	bl	8001c4c <pingNode>
	flag.lcdRefreshRequest = 1;
 80031a6:	4a55      	ldr	r2, [pc, #340]	; (80032fc <button_ok+0x294>)
 80031a8:	7853      	ldrb	r3, [r2, #1]
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	7053      	strb	r3, [r2, #1]
}
 80031b0:	bd38      	pop	{r3, r4, r5, pc}
					nodes[selectedNode].masked = (nodes[selectedNode].masked == 3) ? 0 : nodes[selectedNode].masked + 1;
 80031b2:	4b51      	ldr	r3, [pc, #324]	; (80032f8 <button_ok+0x290>)
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <button_ok+0x298>)
 80031b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ba:	0159      	lsls	r1, r3, #5
 80031bc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 80031c0:	7b1b      	ldrb	r3, [r3, #12]
 80031c2:	440a      	add	r2, r1
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	bf0e      	itee	eq
 80031c8:	2300      	moveq	r3, #0
 80031ca:	3301      	addne	r3, #1
 80031cc:	b2db      	uxtbne	r3, r3
 80031ce:	7313      	strb	r3, [r2, #12]
					saveNodeData ();
 80031d0:	f7fd feb8 	bl	8000f44 <saveNodeData>
					break;
 80031d4:	e7e7      	b.n	80031a6 <button_ok+0x13e>
					changeDisarmNode (selectedNode);
 80031d6:	4b48      	ldr	r3, [pc, #288]	; (80032f8 <button_ok+0x290>)
 80031d8:	f9b3 0000 	ldrsh.w	r0, [r3]
 80031dc:	f7fe fd16 	bl	8001c0c <changeDisarmNode>
 80031e0:	e7f6      	b.n	80031d0 <button_ok+0x168>
					configNodeViaUart (selectedNode);
 80031e2:	4b45      	ldr	r3, [pc, #276]	; (80032f8 <button_ok+0x290>)
 80031e4:	7818      	ldrb	r0, [r3, #0]
 80031e6:	f002 f8f3 	bl	80053d0 <configNodeViaUart>
					configTime = HAL_GetTick ();
 80031ea:	f002 fa49 	bl	8005680 <HAL_GetTick>
					configStep = 1;
 80031ee:	2201      	movs	r2, #1
					configTime = HAL_GetTick ();
 80031f0:	4b44      	ldr	r3, [pc, #272]	; (8003304 <button_ok+0x29c>)
 80031f2:	6018      	str	r0, [r3, #0]
					configStep = 1;
 80031f4:	4b44      	ldr	r3, [pc, #272]	; (8003308 <button_ok+0x2a0>)
 80031f6:	701a      	strb	r2, [r3, #0]
					break;
 80031f8:	e7d5      	b.n	80031a6 <button_ok+0x13e>
	else if (screenMode == smSaveConfig)
 80031fa:	2b18      	cmp	r3, #24
 80031fc:	d104      	bne.n	8003208 <button_ok+0x1a0>
			screenMode = smMainMenu;
 80031fe:	2301      	movs	r3, #1
 8003200:	7013      	strb	r3, [r2, #0]
			saveSettings ();
 8003202:	f7fe f81f 	bl	8001244 <saveSettings>
 8003206:	e7ce      	b.n	80031a6 <button_ok+0x13e>
	else if (screenMode == smRefreshNetworks)
 8003208:	2b12      	cmp	r3, #18
 800320a:	d103      	bne.n	8003214 <button_ok+0x1ac>
			NetRefreshNetworkList (&netHandler);
 800320c:	483f      	ldr	r0, [pc, #252]	; (800330c <button_ok+0x2a4>)
 800320e:	f7fd fb65 	bl	80008dc <NetRefreshNetworkList>
 8003212:	e7c8      	b.n	80031a6 <button_ok+0x13e>
	else if (screenMode == smSelectNet)
 8003214:	2b13      	cmp	r3, #19
 8003216:	d10d      	bne.n	8003234 <button_ok+0x1cc>
			sprintf (settings.SSID, "%s", netHandler.nets[selectedNetwork]);
 8003218:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <button_ok+0x2a8>)
 800321a:	483e      	ldr	r0, [pc, #248]	; (8003314 <button_ok+0x2ac>)
 800321c:	f993 1000 	ldrsb.w	r1, [r3]
 8003220:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <button_ok+0x2b0>)
 8003222:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8003226:	f004 ffd7 	bl	80081d8 <strcpy>
			screenMode = smNetworkMenu;
 800322a:	2305      	movs	r3, #5
 800322c:	7023      	strb	r3, [r4, #0]
			cursorPos = 0;
 800322e:	4b3b      	ldr	r3, [pc, #236]	; (800331c <button_ok+0x2b4>)
			menuPosition = 0;
 8003230:	2200      	movs	r2, #0
 8003232:	e7e0      	b.n	80031f6 <button_ok+0x18e>
	else if (screenMode == smSetWiFiPassword)
 8003234:	2b14      	cmp	r3, #20
 8003236:	d117      	bne.n	8003268 <button_ok+0x200>
			if (cursorPos < 20 && settings.WiFiPass[cursorPos] != ' ' && settings.WiFiPass[cursorPos] != '\0')
 8003238:	4938      	ldr	r1, [pc, #224]	; (800331c <button_ok+0x2b4>)
 800323a:	4a39      	ldr	r2, [pc, #228]	; (8003320 <button_ok+0x2b8>)
 800323c:	f991 3000 	ldrsb.w	r3, [r1]
 8003240:	4608      	mov	r0, r1
 8003242:	2b13      	cmp	r3, #19
 8003244:	dc08      	bgt.n	8003258 <button_ok+0x1f0>
 8003246:	18d5      	adds	r5, r2, r3
 8003248:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 800324c:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8003250:	d002      	beq.n	8003258 <button_ok+0x1f0>
				cursorPos++;
 8003252:	3301      	adds	r3, #1
 8003254:	700b      	strb	r3, [r1, #0]
 8003256:	e7a6      	b.n	80031a6 <button_ok+0x13e>
					settings.WiFiPass[cursorPos] = 0;
 8003258:	4413      	add	r3, r2
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					screenMode = smNetworkMenu;
 8003260:	2305      	movs	r3, #5
					cursorPos = 0;
 8003262:	7002      	strb	r2, [r0, #0]
					screenMode = smNetworkMenu;
 8003264:	7023      	strb	r3, [r4, #0]
					cursorPos = 0;
 8003266:	e79e      	b.n	80031a6 <button_ok+0x13e>
	else if (screenMode == smSetHost)
 8003268:	2b16      	cmp	r3, #22
 800326a:	d111      	bne.n	8003290 <button_ok+0x228>
			if (cursorPos < 20 && settings.host[cursorPos] != ' ' && settings.host[cursorPos] != '\0')
 800326c:	492b      	ldr	r1, [pc, #172]	; (800331c <button_ok+0x2b4>)
 800326e:	4a2c      	ldr	r2, [pc, #176]	; (8003320 <button_ok+0x2b8>)
 8003270:	f991 3000 	ldrsb.w	r3, [r1]
 8003274:	4608      	mov	r0, r1
 8003276:	2b13      	cmp	r3, #19
 8003278:	dc05      	bgt.n	8003286 <button_ok+0x21e>
 800327a:	18d5      	adds	r5, r2, r3
 800327c:	f895 5043 	ldrb.w	r5, [r5, #67]	; 0x43
 8003280:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8003284:	d1e5      	bne.n	8003252 <button_ok+0x1ea>
					settings.host[cursorPos] = 0;
 8003286:	4413      	add	r3, r2
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
					screenMode = smNetworkMenu;
 800328e:	e7e7      	b.n	8003260 <button_ok+0x1f8>
	else if (screenMode == smSetServerPassword)
 8003290:	2b15      	cmp	r3, #21
 8003292:	d111      	bne.n	80032b8 <button_ok+0x250>
			if (cursorPos < 20 && settings.ServerPass[cursorPos] != ' ' && settings.ServerPass[cursorPos] != '\0')
 8003294:	4921      	ldr	r1, [pc, #132]	; (800331c <button_ok+0x2b4>)
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <button_ok+0x2b8>)
 8003298:	f991 3000 	ldrsb.w	r3, [r1]
 800329c:	4608      	mov	r0, r1
 800329e:	2b13      	cmp	r3, #19
 80032a0:	dc05      	bgt.n	80032ae <button_ok+0x246>
 80032a2:	18d5      	adds	r5, r2, r3
 80032a4:	f895 5033 	ldrb.w	r5, [r5, #51]	; 0x33
 80032a8:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 80032ac:	d1d1      	bne.n	8003252 <button_ok+0x1ea>
					settings.ServerPass[cursorPos] = 0;
 80032ae:	4413      	add	r3, r2
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80032b6:	e7d3      	b.n	8003260 <button_ok+0x1f8>
	else if (screenMode == smSetBaseID)
 80032b8:	2b17      	cmp	r3, #23
 80032ba:	d108      	bne.n	80032ce <button_ok+0x266>
			if (cursorPos < 7)
 80032bc:	4a17      	ldr	r2, [pc, #92]	; (800331c <button_ok+0x2b4>)
 80032be:	f992 3000 	ldrsb.w	r3, [r2]
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	dc01      	bgt.n	80032ca <button_ok+0x262>
				cursorPos++;
 80032c6:	3301      	adds	r3, #1
 80032c8:	e6ed      	b.n	80030a6 <button_ok+0x3e>
				screenMode = smNetworkMenu;
 80032ca:	2305      	movs	r3, #5
 80032cc:	e6dd      	b.n	800308a <button_ok+0x22>
	else if (screenMode == smMessageCounter)
 80032ce:	2b1b      	cmp	r3, #27
 80032d0:	d101      	bne.n	80032d6 <button_ok+0x26e>
			screenMode = smMainMenu;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e6f6      	b.n	80030c4 <button_ok+0x5c>
	else if (screenMode == smCleanNodeData)
 80032d6:	2b11      	cmp	r3, #17
 80032d8:	d102      	bne.n	80032e0 <button_ok+0x278>
			eraseNodeData ();
 80032da:	f7fd fe21 	bl	8000f20 <eraseNodeData>
 80032de:	e762      	b.n	80031a6 <button_ok+0x13e>
	else if (screenMode >= smFrequency && screenMode <= smPower)
 80032e0:	3b06      	subs	r3, #6
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	f63f af5f 	bhi.w	80031a6 <button_ok+0x13e>
			screenMode = smRadioMenu;
 80032e8:	2302      	movs	r3, #2
 80032ea:	e6ce      	b.n	800308a <button_ok+0x22>
 80032ec:	2000016a 	.word	0x2000016a
 80032f0:	2000016b 	.word	0x2000016b
 80032f4:	20000152 	.word	0x20000152
 80032f8:	2000016e 	.word	0x2000016e
 80032fc:	20000b84 	.word	0x20000b84
 8003300:	20000ca0 	.word	0x20000ca0
 8003304:	20000c9c 	.word	0x20000c9c
 8003308:	20000bd1 	.word	0x20000bd1
 800330c:	20001164 	.word	0x20001164
 8003310:	2000016c 	.word	0x2000016c
 8003314:	20000a93 	.word	0x20000a93
 8003318:	20001194 	.word	0x20001194
 800331c:	20000123 	.word	0x20000123
 8003320:	20000a80 	.word	0x20000a80

08003324 <defaultNodeSettings>:
void defaultNodeSettings ()
{
	nodeSettings.bw = SX127X_LORA_BW_125KHZ;
	nodeSettings.cr = SX127X_CR_4_8;
	nodeSettings.power = SX127X_POWER_20DBM;
	nodeSettings.preamble = 5;
 8003324:	2205      	movs	r2, #5
 8003326:	4b07      	ldr	r3, [pc, #28]	; (8003344 <defaultNodeSettings+0x20>)
 8003328:	811a      	strh	r2, [r3, #8]
	nodeSettings.realFrequency = DEF_FREQUENCY;
 800332a:	4a07      	ldr	r2, [pc, #28]	; (8003348 <defaultNodeSettings+0x24>)
 800332c:	601a      	str	r2, [r3, #0]
	nodeSettings.cr = SX127X_CR_4_8;
 800332e:	2204      	movs	r2, #4
 8003330:	72da      	strb	r2, [r3, #11]
	nodeSettings.sf = SX127X_LORA_SF_12;
 8003332:	4a06      	ldr	r2, [pc, #24]	; (800334c <defaultNodeSettings+0x28>)
 8003334:	60da      	str	r2, [r3, #12]
	nodeSettings.sw = 0x1;
	nodeSettings.useLed = true;
 8003336:	2201      	movs	r2, #1
 8003338:	741a      	strb	r2, [r3, #16]
	nodeSettings.voltageTreshold = 2.5f;
 800333a:	4a05      	ldr	r2, [pc, #20]	; (8003350 <defaultNodeSettings+0x2c>)
 800333c:	615a      	str	r2, [r3, #20]
	nodeSettings.workInterval = 60;
 800333e:	223c      	movs	r2, #60	; 0x3c
 8003340:	605a      	str	r2, [r3, #4]
}
 8003342:	4770      	bx	lr
 8003344:	20000c7c 	.word	0x20000c7c
 8003348:	33c8d600 	.word	0x33c8d600
 800334c:	1401070c 	.word	0x1401070c
 8003350:	40200000 	.word	0x40200000

08003354 <initLegalFreq>:
 * @param  None
 * @retval None
 */
void initLegalFreq ()
{
	legalFreq.intervalCount = 3;
 8003354:	2203      	movs	r2, #3
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <initLegalFreq+0x4c>)

	legalFreq.interval[0].minFreq = 864000000;
	legalFreq.interval[0].maxFreq = 865000000;
	legalFreq.interval[0].maxPower = 14; //25mW
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 8003358:	2101      	movs	r1, #1
	legalFreq.intervalCount = 3;
 800335a:	701a      	strb	r2, [r3, #0]
	legalFreq.interval[0].minFreq = 864000000;
 800335c:	4a11      	ldr	r2, [pc, #68]	; (80033a4 <initLegalFreq+0x50>)
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 800335e:	81d9      	strh	r1, [r3, #14]
	legalFreq.interval[0].minFreq = 864000000;
 8003360:	605a      	str	r2, [r3, #4]
	legalFreq.interval[0].maxFreq = 865000000;
 8003362:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
 8003366:	f502 7210 	add.w	r2, r2, #576	; 0x240
 800336a:	609a      	str	r2, [r3, #8]
	legalFreq.interval[0].maxPower = 14; //25mW
 800336c:	220e      	movs	r2, #14
 800336e:	731a      	strb	r2, [r3, #12]

	legalFreq.interval[1].minFreq = 866000000;
	legalFreq.interval[1].maxFreq = 868000000;
	legalFreq.interval[1].maxPower = 14;
 8003370:	761a      	strb	r2, [r3, #24]
	legalFreq.interval[1].maxAirUse = 10; //1%
 8003372:	220a      	movs	r2, #10
 8003374:	835a      	strh	r2, [r3, #26]

	legalFreq.interval[2].minFreq = 868700000;
 8003376:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <initLegalFreq+0x54>)
	legalFreq.interval[1].minFreq = 866000000;
 8003378:	490c      	ldr	r1, [pc, #48]	; (80033ac <initLegalFreq+0x58>)
	legalFreq.interval[2].minFreq = 868700000;
 800337a:	61da      	str	r2, [r3, #28]
	legalFreq.interval[2].maxFreq = 869200000;
 800337c:	f502 22f4 	add.w	r2, r2, #499712	; 0x7a000
 8003380:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8003384:	621a      	str	r2, [r3, #32]
	legalFreq.interval[2].maxPower = 20;
 8003386:	2214      	movs	r2, #20
 8003388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	legalFreq.interval[2].maxAirUse = 100; //10%
 800338c:	2264      	movs	r2, #100	; 0x64
	legalFreq.interval[1].minFreq = 866000000;
 800338e:	6119      	str	r1, [r3, #16]
	legalFreq.interval[1].maxFreq = 868000000;
 8003390:	f501 11f4 	add.w	r1, r1, #1998848	; 0x1e8000
 8003394:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8003398:	6159      	str	r1, [r3, #20]
	legalFreq.interval[2].maxAirUse = 100; //10%
 800339a:	84da      	strh	r2, [r3, #38]	; 0x26
}
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000bd4 	.word	0x20000bd4
 80033a4:	337f9800 	.word	0x337f9800
 80033a8:	33c74f60 	.word	0x33c74f60
 80033ac:	339e1c80 	.word	0x339e1c80

080033b0 <checkFreq>:
 * that the frequency is included in
 * @param  real frequency in Hz, bandwidth index
 * @retval returns interval
 */
uint8_t checkFreq (uint32_t frequency, uint8_t bw)
{
 80033b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b4:	4604      	mov	r4, r0
	uint8_t i;
	for (i = 0; i < legalFreq.intervalCount; i++)
 80033b6:	2600      	movs	r6, #0
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <checkFreq+0x48>)
		{
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 80033ba:	f8df 8040 	ldr.w	r8, [pc, #64]	; 80033fc <checkFreq+0x4c>
	for (i = 0; i < legalFreq.intervalCount; i++)
 80033be:	f893 e000 	ldrb.w	lr, [r3]
 80033c2:	b2f0      	uxtb	r0, r6
 80033c4:	4586      	cmp	lr, r0
 80033c6:	d802      	bhi.n	80033ce <checkFreq+0x1e>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
				{
					return i;
				}
		}
	return BAD_INTERVAL;
 80033c8:	20ff      	movs	r0, #255	; 0xff
}
 80033ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 80033ce:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 80033d2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80033d6:	0855      	lsrs	r5, r2, #1
 80033d8:	eba4 0252 	sub.w	r2, r4, r2, lsr #1
 80033dc:	4562      	cmp	r2, ip
 80033de:	d307      	bcc.n	80033f0 <checkFreq+0x40>
 80033e0:	689f      	ldr	r7, [r3, #8]
 80033e2:	42ba      	cmp	r2, r7
 80033e4:	d804      	bhi.n	80033f0 <checkFreq+0x40>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 80033e6:	192a      	adds	r2, r5, r4
 80033e8:	4594      	cmp	ip, r2
 80033ea:	d801      	bhi.n	80033f0 <checkFreq+0x40>
 80033ec:	4297      	cmp	r7, r2
 80033ee:	d2ec      	bcs.n	80033ca <checkFreq+0x1a>
	for (i = 0; i < legalFreq.intervalCount; i++)
 80033f0:	3601      	adds	r6, #1
 80033f2:	330c      	adds	r3, #12
 80033f4:	e7e5      	b.n	80033c2 <checkFreq+0x12>
 80033f6:	bf00      	nop
 80033f8:	20000bd4 	.word	0x20000bd4
 80033fc:	0800a210 	.word	0x0800a210

08003400 <button_right>:
{
 8003400:	b510      	push	{r4, lr}
	switch (screenMode)
 8003402:	4b9c      	ldr	r3, [pc, #624]	; (8003674 <button_right+0x274>)
 8003404:	781a      	ldrb	r2, [r3, #0]
 8003406:	2a1e      	cmp	r2, #30
 8003408:	d82c      	bhi.n	8003464 <button_right+0x64>
 800340a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800340e:	001f      	.short	0x001f
 8003410:	00310045 	.word	0x00310045
 8003414:	0040003b 	.word	0x0040003b
 8003418:	004f0045 	.word	0x004f0045
 800341c:	0072006b 	.word	0x0072006b
 8003420:	0088007f 	.word	0x0088007f
 8003424:	009a0090 	.word	0x009a0090
 8003428:	00bb00b1 	.word	0x00bb00b1
 800342c:	00d500c5 	.word	0x00d500c5
 8003430:	002b00db 	.word	0x002b00db
 8003434:	00e300de 	.word	0x00e300de
 8003438:	010300f3 	.word	0x010300f3
 800343c:	002b0113 	.word	0x002b0113
 8003440:	01240124 	.word	0x01240124
 8003444:	01270124 	.word	0x01270124
 8003448:	0129004a 	.word	0x0129004a
			lastNodeChangeTick = HAL_GetTick ();
 800344c:	f002 f918 	bl	8005680 <HAL_GetTick>
 8003450:	4b89      	ldr	r3, [pc, #548]	; (8003678 <button_right+0x278>)
			selectedNode++;
 8003452:	4a8a      	ldr	r2, [pc, #552]	; (800367c <button_right+0x27c>)
			lastNodeChangeTick = HAL_GetTick ();
 8003454:	6018      	str	r0, [r3, #0]
			selectedNode++;
 8003456:	8813      	ldrh	r3, [r2, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	b21b      	sxth	r3, r3
			if (selectedNode > MAX_NODES - 1)
 800345c:	2b1f      	cmp	r3, #31
				selectedNode = 0;
 800345e:	bfc8      	it	gt
 8003460:	2300      	movgt	r3, #0
 8003462:	8013      	strh	r3, [r2, #0]
	flag.lcdRefreshRequest = 1;
 8003464:	4a86      	ldr	r2, [pc, #536]	; (8003680 <button_right+0x280>)
 8003466:	7853      	ldrb	r3, [r2, #1]
 8003468:	f043 0304 	orr.w	r3, r3, #4
 800346c:	7053      	strb	r3, [r2, #1]
}
 800346e:	bd10      	pop	{r4, pc}
			menuPosition = (menuPosition > 5) ? 0 : menuPosition + 1;
 8003470:	4a84      	ldr	r2, [pc, #528]	; (8003684 <button_right+0x284>)
 8003472:	f992 3000 	ldrsb.w	r3, [r2]
 8003476:	2b05      	cmp	r3, #5
			selectedNetwork = (selectedNetwork > 14) ? 0 : selectedNetwork + 1;
 8003478:	f300 80f9 	bgt.w	800366e <button_right+0x26e>
 800347c:	3301      	adds	r3, #1
 800347e:	b25b      	sxtb	r3, r3
				selectedMode = 0;
 8003480:	7013      	strb	r3, [r2, #0]
 8003482:	e7ef      	b.n	8003464 <button_right+0x64>
			menuPosition = (menuPosition > 0) ? 0 : menuPosition + 1;
 8003484:	4a7f      	ldr	r2, [pc, #508]	; (8003684 <button_right+0x284>)
 8003486:	f992 3000 	ldrsb.w	r3, [r2]
 800348a:	2b00      	cmp	r3, #0
 800348c:	e7f4      	b.n	8003478 <button_right+0x78>
			menuPosition = (menuPosition > 1) ? 0 : menuPosition + 1;
 800348e:	4a7d      	ldr	r2, [pc, #500]	; (8003684 <button_right+0x284>)
 8003490:	f992 3000 	ldrsb.w	r3, [r2]
 8003494:	2b01      	cmp	r3, #1
 8003496:	e7ef      	b.n	8003478 <button_right+0x78>
			menuPosition = (menuPosition > 4) ? 0 : menuPosition + 1;
 8003498:	4a7a      	ldr	r2, [pc, #488]	; (8003684 <button_right+0x284>)
 800349a:	f992 3000 	ldrsb.w	r3, [r2]
 800349e:	2b04      	cmp	r3, #4
 80034a0:	e7ea      	b.n	8003478 <button_right+0x78>
			menuPosition = (menuPosition > 2) ? 0 : menuPosition + 1;
 80034a2:	4a78      	ldr	r2, [pc, #480]	; (8003684 <button_right+0x284>)
 80034a4:	f992 3000 	ldrsb.w	r3, [r2]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	e7e5      	b.n	8003478 <button_right+0x78>
			if (settings.realFrequency < MAX_FREQUENCY)
 80034ac:	4c76      	ldr	r4, [pc, #472]	; (8003688 <button_right+0x288>)
 80034ae:	4a77      	ldr	r2, [pc, #476]	; (800368c <button_right+0x28c>)
 80034b0:	6823      	ldr	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80034b2:	7be1      	ldrb	r1, [r4, #15]
			if (settings.realFrequency < MAX_FREQUENCY)
 80034b4:	4293      	cmp	r3, r2
				settings.realFrequency += 50000;
 80034b6:	bf9e      	ittt	ls
 80034b8:	f503 4343 	addls.w	r3, r3, #49920	; 0xc300
 80034bc:	3350      	addls	r3, #80	; 0x50
 80034be:	6023      	strls	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	f7ff ff75 	bl	80033b0 <checkFreq>
 80034c6:	4b72      	ldr	r3, [pc, #456]	; (8003690 <button_right+0x290>)
 80034c8:	b240      	sxtb	r0, r0
 80034ca:	7018      	strb	r0, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80034cc:	1c43      	adds	r3, r0, #1
 80034ce:	d0c9      	beq.n	8003464 <button_right+0x64>
 80034d0:	220c      	movs	r2, #12
 80034d2:	4b70      	ldr	r3, [pc, #448]	; (8003694 <button_right+0x294>)
 80034d4:	fb02 3000 	mla	r0, r2, r0, r3
 80034d8:	7ca2      	ldrb	r2, [r4, #18]
 80034da:	7b03      	ldrb	r3, [r0, #12]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d9c1      	bls.n	8003464 <button_right+0x64>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 80034e0:	74a3      	strb	r3, [r4, #18]
 80034e2:	e7bf      	b.n	8003464 <button_right+0x64>
			if (settings.sf < 12)
 80034e4:	4a68      	ldr	r2, [pc, #416]	; (8003688 <button_right+0x288>)
 80034e6:	7b93      	ldrb	r3, [r2, #14]
 80034e8:	2b0b      	cmp	r3, #11
 80034ea:	d8bb      	bhi.n	8003464 <button_right+0x64>
				settings.sf++;
 80034ec:	3301      	adds	r3, #1
 80034ee:	7393      	strb	r3, [r2, #14]
 80034f0:	e7b8      	b.n	8003464 <button_right+0x64>
			if (settings.bw < 9)
 80034f2:	4b65      	ldr	r3, [pc, #404]	; (8003688 <button_right+0x288>)
 80034f4:	7bda      	ldrb	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80034f6:	6818      	ldr	r0, [r3, #0]
			if (settings.bw < 9)
 80034f8:	2a08      	cmp	r2, #8
				settings.bw++;
 80034fa:	bf9c      	itt	ls
 80034fc:	3201      	addls	r2, #1
 80034fe:	73da      	strbls	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8003500:	7bd9      	ldrb	r1, [r3, #15]
 8003502:	f7ff ff55 	bl	80033b0 <checkFreq>
 8003506:	4b62      	ldr	r3, [pc, #392]	; (8003690 <button_right+0x290>)
 8003508:	7018      	strb	r0, [r3, #0]
			break;
 800350a:	e7ab      	b.n	8003464 <button_right+0x64>
			settings.syncWord++;
 800350c:	4a5e      	ldr	r2, [pc, #376]	; (8003688 <button_right+0x288>)
 800350e:	7c53      	ldrb	r3, [r2, #17]
 8003510:	3301      	adds	r3, #1
 8003512:	b2db      	uxtb	r3, r3
			if (settings.syncWord == 0x34)
 8003514:	2b34      	cmp	r3, #52	; 0x34
				settings.syncWord = 0x35;
 8003516:	bf08      	it	eq
 8003518:	2335      	moveq	r3, #53	; 0x35
 800351a:	7453      	strb	r3, [r2, #17]
 800351c:	e7a2      	b.n	8003464 <button_right+0x64>
			settings.cr = (settings.cr >= 4) ? 4 : settings.cr + 1;
 800351e:	4a5a      	ldr	r2, [pc, #360]	; (8003688 <button_right+0x288>)
 8003520:	7c13      	ldrb	r3, [r2, #16]
 8003522:	2b03      	cmp	r3, #3
 8003524:	bf28      	it	cs
 8003526:	2303      	movcs	r3, #3
 8003528:	3301      	adds	r3, #1
			nodeSettings.useLed = !nodeSettings.useLed;
 800352a:	7413      	strb	r3, [r2, #16]
			break;
 800352c:	e79a      	b.n	8003464 <button_right+0x64>
			settings.preamble = (settings.preamble >= MAX_PREAMBLE) ?
 800352e:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003532:	4a55      	ldr	r2, [pc, #340]	; (8003688 <button_right+0x288>)
 8003534:	8993      	ldrh	r3, [r2, #12]
 8003536:	428b      	cmp	r3, r1
 8003538:	bf28      	it	cs
 800353a:	460b      	movcs	r3, r1
 800353c:	3301      	adds	r3, #1
 800353e:	8193      	strh	r3, [r2, #12]
			break;
 8003540:	e790      	b.n	8003464 <button_right+0x64>
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8003542:	4951      	ldr	r1, [pc, #324]	; (8003688 <button_right+0x288>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003544:	4a52      	ldr	r2, [pc, #328]	; (8003690 <button_right+0x290>)
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8003546:	7c8b      	ldrb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003548:	f992 2000 	ldrsb.w	r2, [r2]
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 800354c:	2b13      	cmp	r3, #19
 800354e:	bf28      	it	cs
 8003550:	2313      	movcs	r3, #19
 8003552:	3301      	adds	r3, #1
 8003554:	b2db      	uxtb	r3, r3
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003556:	1c50      	adds	r0, r2, #1
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8003558:	748b      	strb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800355a:	d083      	beq.n	8003464 <button_right+0x64>
 800355c:	240c      	movs	r4, #12
 800355e:	484d      	ldr	r0, [pc, #308]	; (8003694 <button_right+0x294>)
 8003560:	fb04 0202 	mla	r2, r4, r2, r0
 8003564:	7b12      	ldrb	r2, [r2, #12]
 8003566:	4293      	cmp	r3, r2
 8003568:	f67f af7c 	bls.w	8003464 <button_right+0x64>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 800356c:	748a      	strb	r2, [r1, #18]
 800356e:	e779      	b.n	8003464 <button_right+0x64>
			settings.warningDelay = (settings.warningDelay >= MAX_WARNING_DELAY) ?
 8003570:	4a45      	ldr	r2, [pc, #276]	; (8003688 <button_right+0x288>)
			MAX_WARNING_DELAY :
 8003572:	4b49      	ldr	r3, [pc, #292]	; (8003698 <button_right+0x298>)
			settings.warningDelay = (settings.warningDelay >= MAX_WARNING_DELAY) ?
 8003574:	6851      	ldr	r1, [r2, #4]
			MAX_WARNING_DELAY :
 8003576:	4299      	cmp	r1, r3
 8003578:	bf3c      	itt	cc
 800357a:	f501 531c 	addcc.w	r3, r1, #9984	; 0x2700
 800357e:	3310      	addcc	r3, #16
			settings.warningDelay = (settings.warningDelay >= MAX_WARNING_DELAY) ?
 8003580:	6053      	str	r3, [r2, #4]
			break;
 8003582:	e76f      	b.n	8003464 <button_right+0x64>
			settings.superWarningDelay = (settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 8003584:	4a40      	ldr	r2, [pc, #256]	; (8003688 <button_right+0x288>)
			MAX_WARNING_DELAY :
 8003586:	4b44      	ldr	r3, [pc, #272]	; (8003698 <button_right+0x298>)
			settings.superWarningDelay = (settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 8003588:	6891      	ldr	r1, [r2, #8]
			MAX_WARNING_DELAY :
 800358a:	4299      	cmp	r1, r3
 800358c:	bf3c      	itt	cc
 800358e:	f501 531c 	addcc.w	r3, r1, #9984	; 0x2700
 8003592:	3310      	addcc	r3, #16
			settings.superWarningDelay = (settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 8003594:	6093      	str	r3, [r2, #8]
			break;
 8003596:	e765      	b.n	8003464 <button_right+0x64>
			if (nodeSettings.workInterval < 600)
 8003598:	4a40      	ldr	r2, [pc, #256]	; (800369c <button_right+0x29c>)
 800359a:	6853      	ldr	r3, [r2, #4]
 800359c:	4610      	mov	r0, r2
 800359e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80035a2:	d202      	bcs.n	80035aa <button_right+0x1aa>
				nodeSettings.workInterval += 10;
 80035a4:	330a      	adds	r3, #10
			if (nodeSettings.workInterval > MAX_WORK_INTERVAL)
 80035a6:	6043      	str	r3, [r0, #4]
			if (nodeSettings.workInterval > MAX_WORK_INTERVAL)
 80035a8:	e75c      	b.n	8003464 <button_right+0x64>
			if (nodeSettings.workInterval > MAX_WORK_INTERVAL)
 80035aa:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
				nodeSettings.workInterval += 100;
 80035ae:	3364      	adds	r3, #100	; 0x64
			if (nodeSettings.workInterval > MAX_WORK_INTERVAL)
 80035b0:	428b      	cmp	r3, r1
 80035b2:	d9f8      	bls.n	80035a6 <button_right+0x1a6>
				nodeSettings.workInterval = MAX_WORK_INTERVAL;
 80035b4:	6051      	str	r1, [r2, #4]
 80035b6:	e755      	b.n	8003464 <button_right+0x64>
			nodeSettings.useLed = !nodeSettings.useLed;
 80035b8:	4a38      	ldr	r2, [pc, #224]	; (800369c <button_right+0x29c>)
 80035ba:	7c13      	ldrb	r3, [r2, #16]
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	e7b2      	b.n	800352a <button_right+0x12a>
			eraseNodeData ();
 80035c4:	f7fd fcac 	bl	8000f20 <eraseNodeData>
			break;
 80035c8:	e74c      	b.n	8003464 <button_right+0x64>
			selectedNetwork = (selectedNetwork > 14) ? 0 : selectedNetwork + 1;
 80035ca:	4a35      	ldr	r2, [pc, #212]	; (80036a0 <button_right+0x2a0>)
 80035cc:	f992 3000 	ldrsb.w	r3, [r2]
 80035d0:	2b0e      	cmp	r3, #14
 80035d2:	e751      	b.n	8003478 <button_right+0x78>
			settings.WiFiPass[cursorPos] = (settings.WiFiPass[cursorPos] >= 'z') ? ' ' : settings.WiFiPass[cursorPos] + 1;
 80035d4:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <button_right+0x2a4>)
 80035d6:	4a2c      	ldr	r2, [pc, #176]	; (8003688 <button_right+0x288>)
 80035d8:	f993 1000 	ldrsb.w	r1, [r3]
 80035dc:	1853      	adds	r3, r2, r1
 80035de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80035e2:	440a      	add	r2, r1
 80035e4:	2b79      	cmp	r3, #121	; 0x79
 80035e6:	bf8e      	itee	hi
 80035e8:	2320      	movhi	r3, #32
 80035ea:	3301      	addls	r3, #1
 80035ec:	b2db      	uxtbls	r3, r3
 80035ee:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
			break;
 80035f2:	e737      	b.n	8003464 <button_right+0x64>
			settings.ServerPass[cursorPos] = (settings.ServerPass[cursorPos] >= 'z') ? ' ' : settings.ServerPass[cursorPos] + 1;
 80035f4:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <button_right+0x2a4>)
 80035f6:	4a24      	ldr	r2, [pc, #144]	; (8003688 <button_right+0x288>)
 80035f8:	f993 1000 	ldrsb.w	r1, [r3]
 80035fc:	1853      	adds	r3, r2, r1
 80035fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003602:	440a      	add	r2, r1
 8003604:	2b79      	cmp	r3, #121	; 0x79
 8003606:	bf8e      	itee	hi
 8003608:	2320      	movhi	r3, #32
 800360a:	3301      	addls	r3, #1
 800360c:	b2db      	uxtbls	r3, r3
 800360e:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
			break;
 8003612:	e727      	b.n	8003464 <button_right+0x64>
			settings.host[cursorPos] = (settings.host[cursorPos] >= 'z') ? ' ' : settings.host[cursorPos] + 1;
 8003614:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <button_right+0x2a4>)
 8003616:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <button_right+0x288>)
 8003618:	f993 1000 	ldrsb.w	r1, [r3]
 800361c:	1853      	adds	r3, r2, r1
 800361e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003622:	440a      	add	r2, r1
 8003624:	2b79      	cmp	r3, #121	; 0x79
 8003626:	bf8e      	itee	hi
 8003628:	2320      	movhi	r3, #32
 800362a:	3301      	addls	r3, #1
 800362c:	b2db      	uxtbls	r3, r3
 800362e:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
			break;
 8003632:	e717      	b.n	8003464 <button_right+0x64>
			settings.baseID += pow10_ (6 - cursorPos);
 8003634:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <button_right+0x2a4>)
 8003636:	7818      	ldrb	r0, [r3, #0]
 8003638:	f1c0 0006 	rsb	r0, r0, #6
 800363c:	b2c0      	uxtb	r0, r0
 800363e:	f7fd fb35 	bl	8000cac <pow10_>
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <button_right+0x288>)
 8003644:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003646:	4410      	add	r0, r2
			if (settings.baseID > MAX_BASEID)
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <button_right+0x2a8>)
 800364a:	4290      	cmp	r0, r2
				settings.baseID = MAX_BASEID;
 800364c:	bfaa      	itet	ge
 800364e:	4a17      	ldrge	r2, [pc, #92]	; (80036ac <button_right+0x2ac>)
			settings.baseID += pow10_ (6 - cursorPos);
 8003650:	6658      	strlt	r0, [r3, #100]	; 0x64
				settings.baseID = MAX_BASEID;
 8003652:	665a      	strge	r2, [r3, #100]	; 0x64
 8003654:	e706      	b.n	8003464 <button_right+0x64>
			screenMode++;
 8003656:	3201      	adds	r2, #1
			screenMode = smStatus;
 8003658:	701a      	strb	r2, [r3, #0]
			break;
 800365a:	e703      	b.n	8003464 <button_right+0x64>
			screenMode = smStatus;
 800365c:	2219      	movs	r2, #25
 800365e:	e7fb      	b.n	8003658 <button_right+0x258>
			selectedMode++;
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <button_right+0x2b0>)
 8003662:	7813      	ldrb	r3, [r2, #0]
 8003664:	3301      	adds	r3, #1
 8003666:	b2db      	uxtb	r3, r3
			if (selectedMode > testSignal)
 8003668:	2b05      	cmp	r3, #5
 800366a:	f67f af09 	bls.w	8003480 <button_right+0x80>
				selectedMode = 0;
 800366e:	2300      	movs	r3, #0
 8003670:	e706      	b.n	8003480 <button_right+0x80>
 8003672:	bf00      	nop
 8003674:	2000016a 	.word	0x2000016a
 8003678:	2000012c 	.word	0x2000012c
 800367c:	2000016e 	.word	0x2000016e
 8003680:	20000b84 	.word	0x20000b84
 8003684:	20000152 	.word	0x20000152
 8003688:	20000a80 	.word	0x20000a80
 800368c:	3b8b87bf 	.word	0x3b8b87bf
 8003690:	200018a0 	.word	0x200018a0
 8003694:	20000bd4 	.word	0x20000bd4
 8003698:	02932e00 	.word	0x02932e00
 800369c:	20000c7c 	.word	0x20000c7c
 80036a0:	2000016c 	.word	0x2000016c
 80036a4:	20000123 	.word	0x20000123
 80036a8:	00989680 	.word	0x00989680
 80036ac:	0098967f 	.word	0x0098967f
 80036b0:	2000016b 	.word	0x2000016b

080036b4 <button_left>:
{
 80036b4:	b510      	push	{r4, lr}
	switch (screenMode)
 80036b6:	4ba1      	ldr	r3, [pc, #644]	; (800393c <button_left+0x288>)
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	2a1e      	cmp	r2, #30
 80036bc:	d82c      	bhi.n	8003718 <button_left+0x64>
 80036be:	e8df f012 	tbh	[pc, r2, lsl #1]
 80036c2:	001f      	.short	0x001f
 80036c4:	0031004a 	.word	0x0031004a
 80036c8:	0043003c 	.word	0x0043003c
 80036cc:	0058004a 	.word	0x0058004a
 80036d0:	007b0074 	.word	0x007b0074
 80036d4:	00920089 	.word	0x00920089
 80036d8:	00a2009a 	.word	0x00a2009a
 80036dc:	00c500ba 	.word	0x00c500ba
 80036e0:	00de00d0 	.word	0x00de00d0
 80036e4:	002b002b 	.word	0x002b002b
 80036e8:	00ec00e4 	.word	0x00ec00e4
 80036ec:	010e00fd 	.word	0x010e00fd
 80036f0:	002b011f 	.word	0x002b011f
 80036f4:	0132012f 	.word	0x0132012f
 80036f8:	01320132 	.word	0x01320132
 80036fc:	01340051 	.word	0x01340051
			lastNodeChangeTick = HAL_GetTick ();
 8003700:	f001 ffbe 	bl	8005680 <HAL_GetTick>
 8003704:	4b8e      	ldr	r3, [pc, #568]	; (8003940 <button_left+0x28c>)
			selectedNode--;
 8003706:	4a8f      	ldr	r2, [pc, #572]	; (8003944 <button_left+0x290>)
			lastNodeChangeTick = HAL_GetTick ();
 8003708:	6018      	str	r0, [r3, #0]
			selectedNode--;
 800370a:	8813      	ldrh	r3, [r2, #0]
 800370c:	3b01      	subs	r3, #1
 800370e:	b21b      	sxth	r3, r3
			if (selectedNode < 0)
 8003710:	2b00      	cmp	r3, #0
				selectedNode = MAX_NODES - 1;
 8003712:	bfb8      	it	lt
 8003714:	231f      	movlt	r3, #31
 8003716:	8013      	strh	r3, [r2, #0]
	flag.lcdRefreshRequest = 1;
 8003718:	4a8b      	ldr	r2, [pc, #556]	; (8003948 <button_left+0x294>)
 800371a:	7853      	ldrb	r3, [r2, #1]
 800371c:	f043 0304 	orr.w	r3, r3, #4
 8003720:	7053      	strb	r3, [r2, #1]
}
 8003722:	bd10      	pop	{r4, pc}
			menuPosition = (menuPosition < 1) ? 6 : menuPosition - 1;
 8003724:	4a89      	ldr	r2, [pc, #548]	; (800394c <button_left+0x298>)
 8003726:	f992 3000 	ldrsb.w	r3, [r2]
 800372a:	2b00      	cmp	r3, #0
 800372c:	dd02      	ble.n	8003734 <button_left+0x80>
			selectedNetwork = (selectedNetwork < 1) ? 15 : selectedNetwork - 1;
 800372e:	3b01      	subs	r3, #1
 8003730:	b25b      	sxtb	r3, r3
 8003732:	e000      	b.n	8003736 <button_left+0x82>
			menuPosition = (menuPosition < 1) ? 6 : menuPosition - 1;
 8003734:	2306      	movs	r3, #6
				selectedMode = testSignal;
 8003736:	7013      	strb	r3, [r2, #0]
 8003738:	e7ee      	b.n	8003718 <button_left+0x64>
			menuPosition = (menuPosition < 1) ? 1 : menuPosition - 1;
 800373a:	4a84      	ldr	r2, [pc, #528]	; (800394c <button_left+0x298>)
 800373c:	f992 3000 	ldrsb.w	r3, [r2]
 8003740:	2b00      	cmp	r3, #0
 8003742:	dcf4      	bgt.n	800372e <button_left+0x7a>
 8003744:	2301      	movs	r3, #1
 8003746:	e7f6      	b.n	8003736 <button_left+0x82>
			menuPosition = (menuPosition < 1) ? 2 : menuPosition - 1;
 8003748:	4a80      	ldr	r2, [pc, #512]	; (800394c <button_left+0x298>)
 800374a:	f992 3000 	ldrsb.w	r3, [r2]
 800374e:	2b00      	cmp	r3, #0
 8003750:	dced      	bgt.n	800372e <button_left+0x7a>
 8003752:	2302      	movs	r3, #2
 8003754:	e7ef      	b.n	8003736 <button_left+0x82>
			menuPosition = (menuPosition < 1) ? 5 : menuPosition - 1;
 8003756:	4a7d      	ldr	r2, [pc, #500]	; (800394c <button_left+0x298>)
 8003758:	f992 3000 	ldrsb.w	r3, [r2]
 800375c:	2b00      	cmp	r3, #0
 800375e:	dce6      	bgt.n	800372e <button_left+0x7a>
				selectedMode = testSignal;
 8003760:	2305      	movs	r3, #5
 8003762:	e7e8      	b.n	8003736 <button_left+0x82>
			menuPosition = (menuPosition < 1) ? 3 : menuPosition - 1;
 8003764:	4a79      	ldr	r2, [pc, #484]	; (800394c <button_left+0x298>)
 8003766:	f992 3000 	ldrsb.w	r3, [r2]
 800376a:	2b00      	cmp	r3, #0
 800376c:	dcdf      	bgt.n	800372e <button_left+0x7a>
 800376e:	2303      	movs	r3, #3
 8003770:	e7e1      	b.n	8003736 <button_left+0x82>
			if (settings.realFrequency > MIN_FREQUENCY)
 8003772:	4c77      	ldr	r4, [pc, #476]	; (8003950 <button_left+0x29c>)
 8003774:	4a77      	ldr	r2, [pc, #476]	; (8003954 <button_left+0x2a0>)
 8003776:	6823      	ldr	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8003778:	7be1      	ldrb	r1, [r4, #15]
			if (settings.realFrequency > MIN_FREQUENCY)
 800377a:	4293      	cmp	r3, r2
				settings.realFrequency -= 50000;
 800377c:	bf82      	ittt	hi
 800377e:	f5a3 4343 	subhi.w	r3, r3, #49920	; 0xc300
 8003782:	3b50      	subhi	r3, #80	; 0x50
 8003784:	6023      	strhi	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8003786:	6820      	ldr	r0, [r4, #0]
 8003788:	f7ff fe12 	bl	80033b0 <checkFreq>
 800378c:	4b72      	ldr	r3, [pc, #456]	; (8003958 <button_left+0x2a4>)
 800378e:	b240      	sxtb	r0, r0
 8003790:	7018      	strb	r0, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003792:	1c43      	adds	r3, r0, #1
 8003794:	d0c0      	beq.n	8003718 <button_left+0x64>
 8003796:	220c      	movs	r2, #12
 8003798:	4b70      	ldr	r3, [pc, #448]	; (800395c <button_left+0x2a8>)
 800379a:	fb02 3000 	mla	r0, r2, r0, r3
 800379e:	7ca2      	ldrb	r2, [r4, #18]
 80037a0:	7b03      	ldrb	r3, [r0, #12]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d9b8      	bls.n	8003718 <button_left+0x64>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 80037a6:	74a3      	strb	r3, [r4, #18]
 80037a8:	e7b6      	b.n	8003718 <button_left+0x64>
			if (settings.sf > 7)
 80037aa:	4a69      	ldr	r2, [pc, #420]	; (8003950 <button_left+0x29c>)
 80037ac:	7b93      	ldrb	r3, [r2, #14]
 80037ae:	2b07      	cmp	r3, #7
 80037b0:	d9b2      	bls.n	8003718 <button_left+0x64>
				settings.sf--;
 80037b2:	3b01      	subs	r3, #1
 80037b4:	7393      	strb	r3, [r2, #14]
 80037b6:	e7af      	b.n	8003718 <button_left+0x64>
			if (settings.bw > 1)
 80037b8:	4b65      	ldr	r3, [pc, #404]	; (8003950 <button_left+0x29c>)
 80037ba:	7bda      	ldrb	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80037bc:	6818      	ldr	r0, [r3, #0]
			if (settings.bw > 1)
 80037be:	2a01      	cmp	r2, #1
				settings.bw--;
 80037c0:	bf84      	itt	hi
 80037c2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80037c6:	73da      	strbhi	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80037c8:	7bd9      	ldrb	r1, [r3, #15]
 80037ca:	f7ff fdf1 	bl	80033b0 <checkFreq>
 80037ce:	4b62      	ldr	r3, [pc, #392]	; (8003958 <button_left+0x2a4>)
 80037d0:	7018      	strb	r0, [r3, #0]
			break;
 80037d2:	e7a1      	b.n	8003718 <button_left+0x64>
			settings.syncWord--;
 80037d4:	4a5e      	ldr	r2, [pc, #376]	; (8003950 <button_left+0x29c>)
 80037d6:	7c53      	ldrb	r3, [r2, #17]
 80037d8:	3b01      	subs	r3, #1
 80037da:	b2db      	uxtb	r3, r3
			if (settings.syncWord == 0x34)
 80037dc:	2b34      	cmp	r3, #52	; 0x34
				settings.syncWord = 0x33;
 80037de:	bf08      	it	eq
 80037e0:	2333      	moveq	r3, #51	; 0x33
 80037e2:	7453      	strb	r3, [r2, #17]
 80037e4:	e798      	b.n	8003718 <button_left+0x64>
			settings.cr = (settings.cr <= 1) ? 1 : settings.cr - 1;
 80037e6:	4a5a      	ldr	r2, [pc, #360]	; (8003950 <button_left+0x29c>)
 80037e8:	7c13      	ldrb	r3, [r2, #16]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	bf38      	it	cc
 80037ee:	2302      	movcc	r3, #2
 80037f0:	3b01      	subs	r3, #1
			nodeSettings.useLed = !nodeSettings.useLed;
 80037f2:	7413      	strb	r3, [r2, #16]
			break;
 80037f4:	e790      	b.n	8003718 <button_left+0x64>
			settings.preamble = (settings.preamble <= MIN_PREAMBLE) ?
 80037f6:	4a56      	ldr	r2, [pc, #344]	; (8003950 <button_left+0x29c>)
 80037f8:	8993      	ldrh	r3, [r2, #12]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	bf38      	it	cc
 80037fe:	2303      	movcc	r3, #3
 8003800:	3b01      	subs	r3, #1
 8003802:	8193      	strh	r3, [r2, #12]
			break;
 8003804:	e788      	b.n	8003718 <button_left+0x64>
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003806:	4952      	ldr	r1, [pc, #328]	; (8003950 <button_left+0x29c>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003808:	4a53      	ldr	r2, [pc, #332]	; (8003958 <button_left+0x2a4>)
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 800380a:	7c8b      	ldrb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800380c:	f992 2000 	ldrsb.w	r2, [r2]
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003810:	2b0b      	cmp	r3, #11
 8003812:	bf38      	it	cc
 8003814:	230b      	movcc	r3, #11
 8003816:	3b01      	subs	r3, #1
 8003818:	b2db      	uxtb	r3, r3
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800381a:	1c50      	adds	r0, r2, #1
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 800381c:	748b      	strb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800381e:	f43f af7b 	beq.w	8003718 <button_left+0x64>
 8003822:	240c      	movs	r4, #12
 8003824:	484d      	ldr	r0, [pc, #308]	; (800395c <button_left+0x2a8>)
 8003826:	fb04 0202 	mla	r2, r4, r2, r0
 800382a:	7b12      	ldrb	r2, [r2, #12]
 800382c:	4293      	cmp	r3, r2
 800382e:	f67f af73 	bls.w	8003718 <button_left+0x64>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 8003832:	748a      	strb	r2, [r1, #18]
 8003834:	e770      	b.n	8003718 <button_left+0x64>
			MIN_WARNING_DELAY :
 8003836:	f64e 2360 	movw	r3, #60000	; 0xea60
			settings.warningDelay = (settings.warningDelay <= MIN_WARNING_DELAY) ?
 800383a:	4a45      	ldr	r2, [pc, #276]	; (8003950 <button_left+0x29c>)
 800383c:	6851      	ldr	r1, [r2, #4]
			MIN_WARNING_DELAY :
 800383e:	4299      	cmp	r1, r3
 8003840:	d902      	bls.n	8003848 <button_left+0x194>
 8003842:	f5a1 531c 	sub.w	r3, r1, #9984	; 0x2700
 8003846:	3b10      	subs	r3, #16
				nodeSettings.workInterval = MIN_WORK_INTERVAL;
 8003848:	6053      	str	r3, [r2, #4]
 800384a:	e765      	b.n	8003718 <button_left+0x64>
			MIN_WARNING_DELAY :
 800384c:	f64e 2360 	movw	r3, #60000	; 0xea60
			settings.superWarningDelay = (settings.superWarningDelay <= MIN_WARNING_DELAY) ?
 8003850:	4a3f      	ldr	r2, [pc, #252]	; (8003950 <button_left+0x29c>)
 8003852:	6891      	ldr	r1, [r2, #8]
			MIN_WARNING_DELAY :
 8003854:	4299      	cmp	r1, r3
 8003856:	bf84      	itt	hi
 8003858:	f5a1 531c 	subhi.w	r3, r1, #9984	; 0x2700
 800385c:	3b10      	subhi	r3, #16
			settings.superWarningDelay = (settings.superWarningDelay <= MIN_WARNING_DELAY) ?
 800385e:	6093      	str	r3, [r2, #8]
			break;
 8003860:	e75a      	b.n	8003718 <button_left+0x64>
			if (nodeSettings.workInterval >= 600)
 8003862:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <button_left+0x2ac>)
 8003864:	6853      	ldr	r3, [r2, #4]
 8003866:	4611      	mov	r1, r2
 8003868:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800386c:	d302      	bcc.n	8003874 <button_left+0x1c0>
				nodeSettings.workInterval -= 100;
 800386e:	3b64      	subs	r3, #100	; 0x64
			if (nodeSettings.workInterval < MIN_WORK_INTERVAL)
 8003870:	604b      	str	r3, [r1, #4]
 8003872:	e751      	b.n	8003718 <button_left+0x64>
				nodeSettings.workInterval -= 10;
 8003874:	3b0a      	subs	r3, #10
			if (nodeSettings.workInterval < MIN_WORK_INTERVAL)
 8003876:	2b3b      	cmp	r3, #59	; 0x3b
 8003878:	d8fa      	bhi.n	8003870 <button_left+0x1bc>
				nodeSettings.workInterval = MIN_WORK_INTERVAL;
 800387a:	233c      	movs	r3, #60	; 0x3c
 800387c:	e7e4      	b.n	8003848 <button_left+0x194>
			nodeSettings.useLed = !nodeSettings.useLed;
 800387e:	4a38      	ldr	r2, [pc, #224]	; (8003960 <button_left+0x2ac>)
 8003880:	7c13      	ldrb	r3, [r2, #16]
 8003882:	fab3 f383 	clz	r3, r3
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	e7b3      	b.n	80037f2 <button_left+0x13e>
			selectedNetwork = (selectedNetwork < 1) ? 15 : selectedNetwork - 1;
 800388a:	4a36      	ldr	r2, [pc, #216]	; (8003964 <button_left+0x2b0>)
 800388c:	f992 3000 	ldrsb.w	r3, [r2]
 8003890:	2b00      	cmp	r3, #0
 8003892:	f73f af4c 	bgt.w	800372e <button_left+0x7a>
 8003896:	230f      	movs	r3, #15
 8003898:	e74d      	b.n	8003736 <button_left+0x82>
			settings.WiFiPass[cursorPos] = (settings.WiFiPass[cursorPos] <= ' ') ? 'z' : settings.WiFiPass[cursorPos] - 1;
 800389a:	4b33      	ldr	r3, [pc, #204]	; (8003968 <button_left+0x2b4>)
 800389c:	4a2c      	ldr	r2, [pc, #176]	; (8003950 <button_left+0x29c>)
 800389e:	f993 1000 	ldrsb.w	r1, [r3]
 80038a2:	1853      	adds	r3, r2, r1
 80038a4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80038a8:	440a      	add	r2, r1
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	bf92      	itee	ls
 80038ae:	237a      	movls	r3, #122	; 0x7a
 80038b0:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80038b4:	b2db      	uxtbhi	r3, r3
 80038b6:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
			break;
 80038ba:	e72d      	b.n	8003718 <button_left+0x64>
			settings.ServerPass[cursorPos] = (settings.ServerPass[cursorPos] <= ' ') ? 'z' : settings.ServerPass[cursorPos] - 1;
 80038bc:	4b2a      	ldr	r3, [pc, #168]	; (8003968 <button_left+0x2b4>)
 80038be:	4a24      	ldr	r2, [pc, #144]	; (8003950 <button_left+0x29c>)
 80038c0:	f993 1000 	ldrsb.w	r1, [r3]
 80038c4:	1853      	adds	r3, r2, r1
 80038c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80038ca:	440a      	add	r2, r1
 80038cc:	2b20      	cmp	r3, #32
 80038ce:	bf92      	itee	ls
 80038d0:	237a      	movls	r3, #122	; 0x7a
 80038d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80038d6:	b2db      	uxtbhi	r3, r3
 80038d8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
			break;
 80038dc:	e71c      	b.n	8003718 <button_left+0x64>
			settings.host[cursorPos] = (settings.host[cursorPos] <= ' ') ? 'z' : settings.host[cursorPos] - 1;
 80038de:	4b22      	ldr	r3, [pc, #136]	; (8003968 <button_left+0x2b4>)
 80038e0:	4a1b      	ldr	r2, [pc, #108]	; (8003950 <button_left+0x29c>)
 80038e2:	f993 1000 	ldrsb.w	r1, [r3]
 80038e6:	1853      	adds	r3, r2, r1
 80038e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80038ec:	440a      	add	r2, r1
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	bf92      	itee	ls
 80038f2:	237a      	movls	r3, #122	; 0x7a
 80038f4:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80038f8:	b2db      	uxtbhi	r3, r3
 80038fa:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
			break;
 80038fe:	e70b      	b.n	8003718 <button_left+0x64>
			settings.baseID -= pow10_ (6 - cursorPos);
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <button_left+0x2b4>)
 8003902:	7818      	ldrb	r0, [r3, #0]
 8003904:	f1c0 0006 	rsb	r0, r0, #6
 8003908:	b2c0      	uxtb	r0, r0
 800390a:	f7fd f9cf 	bl	8000cac <pow10_>
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <button_left+0x29c>)
 8003910:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8003912:	1a18      	subs	r0, r3, r0
			if (settings.baseID <= 0)
 8003914:	2800      	cmp	r0, #0
				settings.baseID = 0;
 8003916:	bfd6      	itet	le
 8003918:	2300      	movle	r3, #0
			settings.baseID -= pow10_ (6 - cursorPos);
 800391a:	6650      	strgt	r0, [r2, #100]	; 0x64
				settings.baseID = 0;
 800391c:	6653      	strle	r3, [r2, #100]	; 0x64
 800391e:	e6fb      	b.n	8003718 <button_left+0x64>
			screenMode = smGraph;
 8003920:	221c      	movs	r2, #28
			screenMode--;
 8003922:	701a      	strb	r2, [r3, #0]
			break;
 8003924:	e6f8      	b.n	8003718 <button_left+0x64>
			screenMode--;
 8003926:	3a01      	subs	r2, #1
 8003928:	e7fb      	b.n	8003922 <button_left+0x26e>
			selectedMode--;
 800392a:	4a10      	ldr	r2, [pc, #64]	; (800396c <button_left+0x2b8>)
 800392c:	7813      	ldrb	r3, [r2, #0]
 800392e:	3b01      	subs	r3, #1
			if (selectedMode <= work)
 8003930:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003934:	f43f af14 	beq.w	8003760 <button_left+0xac>
 8003938:	e6fd      	b.n	8003736 <button_left+0x82>
 800393a:	bf00      	nop
 800393c:	2000016a 	.word	0x2000016a
 8003940:	2000012c 	.word	0x2000012c
 8003944:	2000016e 	.word	0x2000016e
 8003948:	20000b84 	.word	0x20000b84
 800394c:	20000152 	.word	0x20000152
 8003950:	20000a80 	.word	0x20000a80
 8003954:	0839b680 	.word	0x0839b680
 8003958:	200018a0 	.word	0x200018a0
 800395c:	20000bd4 	.word	0x20000bd4
 8003960:	20000c7c 	.word	0x20000c7c
 8003964:	2000016c 	.word	0x2000016c
 8003968:	20000123 	.word	0x20000123
 800396c:	2000016b 	.word	0x2000016b

08003970 <backButtonHoldRoutine>:

void backButtonHoldRoutine ()
{
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == false && screenMode == smRegular)
 8003970:	2104      	movs	r1, #4
{
 8003972:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == false && screenMode == smRegular)
 8003974:	480e      	ldr	r0, [pc, #56]	; (80039b0 <backButtonHoldRoutine+0x40>)
 8003976:	f002 fb73 	bl	8006060 <HAL_GPIO_ReadPin>
 800397a:	490e      	ldr	r1, [pc, #56]	; (80039b4 <backButtonHoldRoutine+0x44>)
 800397c:	4a0e      	ldr	r2, [pc, #56]	; (80039b8 <backButtonHoldRoutine+0x48>)
 800397e:	780b      	ldrb	r3, [r1, #0]
 8003980:	4318      	orrs	r0, r3
 8003982:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 8003986:	d107      	bne.n	8003998 <backButtonHoldRoutine+0x28>
		menuDelayCounter++;
 8003988:	8813      	ldrh	r3, [r2, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	b29b      	uxth	r3, r3
	else
		menuDelayCounter = 0;

	if (menuDelayCounter > 2000)
 800398e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003992:	d803      	bhi.n	800399c <backButtonHoldRoutine+0x2c>
 8003994:	8013      	strh	r3, [r2, #0]
			menuDelayCounter = 0;
			screenMode = smMainMenu;
			flag.lcdRefreshRequest = 1;
		}

}
 8003996:	bd08      	pop	{r3, pc}
		menuDelayCounter = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	e7fb      	b.n	8003994 <backButtonHoldRoutine+0x24>
			screenMode = smMainMenu;
 800399c:	2301      	movs	r3, #1
			menuDelayCounter = 0;
 800399e:	8010      	strh	r0, [r2, #0]
			flag.lcdRefreshRequest = 1;
 80039a0:	4a06      	ldr	r2, [pc, #24]	; (80039bc <backButtonHoldRoutine+0x4c>)
			screenMode = smMainMenu;
 80039a2:	700b      	strb	r3, [r1, #0]
			flag.lcdRefreshRequest = 1;
 80039a4:	7853      	ldrb	r3, [r2, #1]
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	7053      	strb	r3, [r2, #1]
}
 80039ac:	e7f3      	b.n	8003996 <backButtonHoldRoutine+0x26>
 80039ae:	bf00      	nop
 80039b0:	40010c00 	.word	0x40010c00
 80039b4:	2000016a 	.word	0x2000016a
 80039b8:	20000150 	.word	0x20000150
 80039bc:	20000b84 	.word	0x20000b84

080039c0 <halfSecondRoutine>:

void halfSecondRoutine ()
{
 80039c0:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastHalf = 0;
	if (lastHalf != HAL_GetTick () / 500 && ((screenMode >= smStatus && screenMode <= smMessageCounter)))
 80039c2:	f001 fe5d 	bl	8005680 <HAL_GetTick>
 80039c6:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 80039ca:	fbb0 f0f5 	udiv	r0, r0, r5
 80039ce:	4c0a      	ldr	r4, [pc, #40]	; (80039f8 <halfSecondRoutine+0x38>)
 80039d0:	6823      	ldr	r3, [r4, #0]
 80039d2:	4298      	cmp	r0, r3
 80039d4:	d00e      	beq.n	80039f4 <halfSecondRoutine+0x34>
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <halfSecondRoutine+0x3c>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	3b19      	subs	r3, #25
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d809      	bhi.n	80039f4 <halfSecondRoutine+0x34>
		{
			lastHalf = HAL_GetTick () / 500;
 80039e0:	f001 fe4e 	bl	8005680 <HAL_GetTick>
 80039e4:	fbb0 f0f5 	udiv	r0, r0, r5

			flag.lcdRefreshRequest = 1;
 80039e8:	4a05      	ldr	r2, [pc, #20]	; (8003a00 <halfSecondRoutine+0x40>)
			lastHalf = HAL_GetTick () / 500;
 80039ea:	6020      	str	r0, [r4, #0]
			flag.lcdRefreshRequest = 1;
 80039ec:	7853      	ldrb	r3, [r2, #1]
 80039ee:	f043 0304 	orr.w	r3, r3, #4
 80039f2:	7053      	strb	r3, [r2, #1]
		}
}
 80039f4:	bd38      	pop	{r3, r4, r5, pc}
 80039f6:	bf00      	nop
 80039f8:	20000128 	.word	0x20000128
 80039fc:	2000016a 	.word	0x2000016a
 8003a00:	20000b84 	.word	0x20000b84

08003a04 <secondRoutine>:

void secondRoutine ()
{
 8003a04:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastSecond = 0;
	if (HAL_GetTick () / 1000 != lastSecond)
 8003a06:	f001 fe3b 	bl	8005680 <HAL_GetTick>
 8003a0a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8003a0e:	fbb0 f0f5 	udiv	r0, r0, r5
 8003a12:	4c0a      	ldr	r4, [pc, #40]	; (8003a3c <secondRoutine+0x38>)
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	4298      	cmp	r0, r3
 8003a18:	d00e      	beq.n	8003a38 <secondRoutine+0x34>
		{
			lastSecond = HAL_GetTick () / 1000;
 8003a1a:	f001 fe31 	bl	8005680 <HAL_GetTick>
 8003a1e:	fbb0 f0f5 	udiv	r0, r0, r5
			if (screenMode == smRegular || screenMode == smGraph)
 8003a22:	4b07      	ldr	r3, [pc, #28]	; (8003a40 <secondRoutine+0x3c>)
			lastSecond = HAL_GetTick () / 1000;
 8003a24:	6020      	str	r0, [r4, #0]
			if (screenMode == smRegular || screenMode == smGraph)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	b10b      	cbz	r3, 8003a2e <secondRoutine+0x2a>
 8003a2a:	2b1c      	cmp	r3, #28
 8003a2c:	d104      	bne.n	8003a38 <secondRoutine+0x34>
				flag.lcdRefreshRequest = 1;
 8003a2e:	4a05      	ldr	r2, [pc, #20]	; (8003a44 <secondRoutine+0x40>)
 8003a30:	7853      	ldrb	r3, [r2, #1]
 8003a32:	f043 0304 	orr.w	r3, r3, #4
 8003a36:	7053      	strb	r3, [r2, #1]
		}
}
 8003a38:	bd38      	pop	{r3, r4, r5, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000130 	.word	0x20000130
 8003a40:	2000016a 	.word	0x2000016a
 8003a44:	20000b84 	.word	0x20000b84

08003a48 <checkNodeConfigure>:

uint8_t checkNodeConfigure ()
{
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr && settings.sf == nodeSettings.sf
 8003a48:	4a11      	ldr	r2, [pc, #68]	; (8003a90 <checkNodeConfigure+0x48>)
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <checkNodeConfigure+0x4c>)
			&& settings.realFrequency == nodeSettings.realFrequency && settings.preamble == nodeSettings.preamble && settings.syncWord == nodeSettings.sw
			&& selectedNode == nodeSettings.nodeNum);
 8003a4c:	7bd0      	ldrb	r0, [r2, #15]
 8003a4e:	7b59      	ldrb	r1, [r3, #13]
 8003a50:	4288      	cmp	r0, r1
 8003a52:	d11b      	bne.n	8003a8c <checkNodeConfigure+0x44>
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr && settings.sf == nodeSettings.sf
 8003a54:	7c10      	ldrb	r0, [r2, #16]
 8003a56:	7ad9      	ldrb	r1, [r3, #11]
 8003a58:	4288      	cmp	r0, r1
 8003a5a:	d117      	bne.n	8003a8c <checkNodeConfigure+0x44>
 8003a5c:	7b90      	ldrb	r0, [r2, #14]
 8003a5e:	7b19      	ldrb	r1, [r3, #12]
 8003a60:	4288      	cmp	r0, r1
 8003a62:	d113      	bne.n	8003a8c <checkNodeConfigure+0x44>
			&& settings.realFrequency == nodeSettings.realFrequency && settings.preamble == nodeSettings.preamble && settings.syncWord == nodeSettings.sw
 8003a64:	6810      	ldr	r0, [r2, #0]
 8003a66:	6819      	ldr	r1, [r3, #0]
 8003a68:	4288      	cmp	r0, r1
 8003a6a:	d10f      	bne.n	8003a8c <checkNodeConfigure+0x44>
 8003a6c:	8990      	ldrh	r0, [r2, #12]
 8003a6e:	8919      	ldrh	r1, [r3, #8]
 8003a70:	4288      	cmp	r0, r1
 8003a72:	d10b      	bne.n	8003a8c <checkNodeConfigure+0x44>
 8003a74:	7c51      	ldrb	r1, [r2, #17]
 8003a76:	7b9a      	ldrb	r2, [r3, #14]
 8003a78:	4291      	cmp	r1, r2
 8003a7a:	d107      	bne.n	8003a8c <checkNodeConfigure+0x44>
			&& selectedNode == nodeSettings.nodeNum);
 8003a7c:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <checkNodeConfigure+0x50>)
 8003a7e:	7a9b      	ldrb	r3, [r3, #10]
 8003a80:	f9b2 0000 	ldrsh.w	r0, [r2]
 8003a84:	1ac3      	subs	r3, r0, r3
 8003a86:	4258      	negs	r0, r3
 8003a88:	4158      	adcs	r0, r3
 8003a8a:	4770      	bx	lr
 8003a8c:	2000      	movs	r0, #0
}
 8003a8e:	4770      	bx	lr
 8003a90:	20000a80 	.word	0x20000a80
 8003a94:	20000c7c 	.word	0x20000c7c
 8003a98:	2000016e 	.word	0x2000016e

08003a9c <nodeConfigureRoutine>:

void nodeConfigureRoutine ()
{
 8003a9c:	b538      	push	{r3, r4, r5, lr}
	if (HAL_GetTick () - configTime > 500 && configStep == 1)
 8003a9e:	f001 fdef 	bl	8005680 <HAL_GetTick>
 8003aa2:	4c16      	ldr	r4, [pc, #88]	; (8003afc <nodeConfigureRoutine+0x60>)
 8003aa4:	6822      	ldr	r2, [r4, #0]
 8003aa6:	1a80      	subs	r0, r0, r2
 8003aa8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8003aac:	d910      	bls.n	8003ad0 <nodeConfigureRoutine+0x34>
 8003aae:	4d14      	ldr	r5, [pc, #80]	; (8003b00 <nodeConfigureRoutine+0x64>)
 8003ab0:	782a      	ldrb	r2, [r5, #0]
 8003ab2:	2a01      	cmp	r2, #1
 8003ab4:	d10c      	bne.n	8003ad0 <nodeConfigureRoutine+0x34>
		{
			clearStrings ();
 8003ab6:	f7fd fadf 	bl	8001078 <clearStrings>
			if (checkNodeConfigure ())
 8003aba:	f7ff ffc5 	bl	8003a48 <checkNodeConfigure>
 8003abe:	b1d8      	cbz	r0, 8003af8 <nodeConfigureRoutine+0x5c>
				{
					sprintf (string[0], "Sucess");
 8003ac0:	4910      	ldr	r1, [pc, #64]	; (8003b04 <nodeConfigureRoutine+0x68>)
				}
			else
				{
					sprintf (string[0], "Failure");
 8003ac2:	4811      	ldr	r0, [pc, #68]	; (8003b08 <nodeConfigureRoutine+0x6c>)
 8003ac4:	f004 fb88 	bl	80081d8 <strcpy>
				}
			updateLcd ();
 8003ac8:	f7fd fae8 	bl	800109c <updateLcd>
			configStep = 2;
 8003acc:	2302      	movs	r3, #2
 8003ace:	702b      	strb	r3, [r5, #0]
		}

	if (HAL_GetTick () - configTime > 1500 && configStep == 2)
 8003ad0:	f001 fdd6 	bl	8005680 <HAL_GetTick>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	1ac0      	subs	r0, r0, r3
 8003ad8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003adc:	4298      	cmp	r0, r3
 8003ade:	d90a      	bls.n	8003af6 <nodeConfigureRoutine+0x5a>
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <nodeConfigureRoutine+0x64>)
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	2a02      	cmp	r2, #2
 8003ae6:	d106      	bne.n	8003af6 <nodeConfigureRoutine+0x5a>
		{
			configStep = 0;
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
			flag.lcdRefreshRequest = 1;
 8003aec:	4a07      	ldr	r2, [pc, #28]	; (8003b0c <nodeConfigureRoutine+0x70>)
 8003aee:	7853      	ldrb	r3, [r2, #1]
 8003af0:	f043 0304 	orr.w	r3, r3, #4
 8003af4:	7053      	strb	r3, [r2, #1]
		}
}
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
					sprintf (string[0], "Failure");
 8003af8:	4905      	ldr	r1, [pc, #20]	; (8003b10 <nodeConfigureRoutine+0x74>)
 8003afa:	e7e2      	b.n	8003ac2 <nodeConfigureRoutine+0x26>
 8003afc:	20000c9c 	.word	0x20000c9c
 8003b00:	20000bd1 	.word	0x20000bd1
 8003b04:	0800a148 	.word	0x0800a148
 8003b08:	20000170 	.word	0x20000170
 8003b0c:	20000b84 	.word	0x20000b84
 8003b10:	0800a14f 	.word	0x0800a14f

08003b14 <RadioInit>:

void RadioInit ()
{
 8003b14:	b510      	push	{r4, lr}
	SX127X_dio_t nss;
	SX127X_dio_t reset;
	SX127X_defaultConfig (&myRadio);
 8003b16:	4c0c      	ldr	r4, [pc, #48]	; (8003b48 <RadioInit+0x34>)
{
 8003b18:	b086      	sub	sp, #24
	SX127X_defaultConfig (&myRadio);
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f000 ff50 	bl	80049c0 <SX127X_defaultConfig>

	nss.pin = NSS_Pin;
	nss.port = NSS_GPIO_Port;
	reset.pin = RESET_Pin;
 8003b20:	2208      	movs	r2, #8
	nss.port = NSS_GPIO_Port;
 8003b22:	4b0a      	ldr	r3, [pc, #40]	; (8003b4c <RadioInit+0x38>)
	reset.port = RESET_GPIO_Port;
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8003b24:	4620      	mov	r0, r4
	reset.port = RESET_GPIO_Port;
 8003b26:	e9cd 2304 	strd	r2, r3, [sp, #16]
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8003b2a:	4a09      	ldr	r2, [pc, #36]	; (8003b50 <RadioInit+0x3c>)
 8003b2c:	e9cd 3200 	strd	r3, r2, [sp]
 8003b30:	aa06      	add	r2, sp, #24
 8003b32:	2310      	movs	r3, #16
 8003b34:	e912 0006 	ldmdb	r2, {r1, r2}
 8003b38:	f000 ff54 	bl	80049e4 <SX127X_PortConfig>
	SX127X_init (&myRadio);
 8003b3c:	4620      	mov	r0, r4
}
 8003b3e:	b006      	add	sp, #24
 8003b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SX127X_init (&myRadio);
 8003b44:	f001 b976 	b.w	8004e34 <SX127X_init>
 8003b48:	200009a0 	.word	0x200009a0
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	200010c4 	.word	0x200010c4

08003b54 <airCounter>:

void airCounter ()
{
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint32_t upTimeMs;
	static uint32_t transmittingTimeMs;
	static uint32_t receivingTimeMs;
	static uint32_t lastTick;

	uint32_t delta = HAL_GetTick () - lastTick;
 8003b56:	f001 fd93 	bl	8005680 <HAL_GetTick>
 8003b5a:	4d31      	ldr	r5, [pc, #196]	; (8003c20 <airCounter+0xcc>)
	upTimeMs += delta;
 8003b5c:	4931      	ldr	r1, [pc, #196]	; (8003c24 <airCounter+0xd0>)
	uint32_t delta = HAL_GetTick () - lastTick;
 8003b5e:	682b      	ldr	r3, [r5, #0]
	upTimeMs += delta;
 8003b60:	680e      	ldr	r6, [r1, #0]
	uint32_t delta = HAL_GetTick () - lastTick;
 8003b62:	1ac0      	subs	r0, r0, r3
	if (myRadio.signalDetected)
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <airCounter+0xd4>)
 8003b66:	4a31      	ldr	r2, [pc, #196]	; (8003c2c <airCounter+0xd8>)
 8003b68:	7f1c      	ldrb	r4, [r3, #28]
	upTimeMs += delta;
 8003b6a:	1987      	adds	r7, r0, r6
	if (myRadio.signalDetected)
 8003b6c:	b114      	cbz	r4, 8003b74 <airCounter+0x20>
		receivingTimeMs += delta;
 8003b6e:	6814      	ldr	r4, [r2, #0]
 8003b70:	4404      	add	r4, r0
 8003b72:	6014      	str	r4, [r2, #0]
	if (myRadio.status == TX)
 8003b74:	7c1b      	ldrb	r3, [r3, #16]
		transmittingTimeMs += delta;
	upTime += upTimeMs / 1000;
 8003b76:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8003c44 <airCounter+0xf0>
	if (myRadio.status == TX)
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <airCounter+0xdc>)
		transmittingTimeMs += delta;
 8003b7e:	bf02      	ittt	eq
 8003b80:	681c      	ldreq	r4, [r3, #0]
 8003b82:	1900      	addeq	r0, r0, r4
 8003b84:	6018      	streq	r0, [r3, #0]
	upTime += upTimeMs / 1000;
 8003b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b8a:	fbb7 f6f0 	udiv	r6, r7, r0
 8003b8e:	f8dc 4000 	ldr.w	r4, [ip]
 8003b92:	4434      	add	r4, r6
	upTimeMs %= 1000;
 8003b94:	fb00 7616 	mls	r6, r0, r6, r7
	upTime += upTimeMs / 1000;
 8003b98:	f8cc 4000 	str.w	r4, [ip]
	if (receivingTimeMs > 1000)
 8003b9c:	f8d2 c000 	ldr.w	ip, [r2]
 8003ba0:	4f24      	ldr	r7, [pc, #144]	; (8003c34 <airCounter+0xe0>)
 8003ba2:	4584      	cmp	ip, r0
	upTimeMs %= 1000;
 8003ba4:	600e      	str	r6, [r1, #0]
	if (receivingTimeMs > 1000)
 8003ba6:	d907      	bls.n	8003bb8 <airCounter+0x64>
		{
			receivingTime += receivingTimeMs / 1000;
 8003ba8:	fbbc f1f0 	udiv	r1, ip, r0
 8003bac:	683e      	ldr	r6, [r7, #0]
 8003bae:	440e      	add	r6, r1
			receivingTimeMs %= 1000;
 8003bb0:	fb00 c111 	mls	r1, r0, r1, ip
			receivingTime += receivingTimeMs / 1000;
 8003bb4:	603e      	str	r6, [r7, #0]
			receivingTimeMs %= 1000;
 8003bb6:	6011      	str	r1, [r2, #0]
		}
	if (transmittingTimeMs > 1000)
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	4e1f      	ldr	r6, [pc, #124]	; (8003c38 <airCounter+0xe4>)
 8003bbc:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8003bc0:	d909      	bls.n	8003bd6 <airCounter+0x82>
		{
			transmittingTime += transmittingTimeMs / 1000;
 8003bc2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8003bc6:	fbb1 f2fc 	udiv	r2, r1, ip
 8003bca:	6830      	ldr	r0, [r6, #0]
 8003bcc:	4410      	add	r0, r2
			transmittingTimeMs %= 1000;
 8003bce:	fb0c 1212 	mls	r2, ip, r2, r1
			transmittingTime += transmittingTimeMs / 1000;
 8003bd2:	6030      	str	r0, [r6, #0]
			transmittingTimeMs %= 1000;
 8003bd4:	601a      	str	r2, [r3, #0]
		}
	airUseForRx = (receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	b1e8      	cbz	r0, 8003c16 <airCounter+0xc2>
 8003bda:	f7fc fb75 	bl	80002c8 <__aeabi_ui2f>
 8003bde:	4607      	mov	r7, r0
 8003be0:	4620      	mov	r0, r4
 8003be2:	f7fc fb71 	bl	80002c8 <__aeabi_ui2f>
 8003be6:	4601      	mov	r1, r0
 8003be8:	4638      	mov	r0, r7
 8003bea:	f7fc fc79 	bl	80004e0 <__aeabi_fdiv>
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <airCounter+0xe8>)
 8003bf0:	6018      	str	r0, [r3, #0]
	airUseForTx = (transmittingTime == 0) ? 0 : (float) transmittingTime / (float) upTime;
 8003bf2:	6830      	ldr	r0, [r6, #0]
 8003bf4:	b188      	cbz	r0, 8003c1a <airCounter+0xc6>
 8003bf6:	f7fc fb67 	bl	80002c8 <__aeabi_ui2f>
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f7fc fb63 	bl	80002c8 <__aeabi_ui2f>
 8003c02:	4601      	mov	r1, r0
 8003c04:	4630      	mov	r0, r6
 8003c06:	f7fc fc6b 	bl	80004e0 <__aeabi_fdiv>
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <airCounter+0xec>)
 8003c0c:	6018      	str	r0, [r3, #0]
	lastTick = HAL_GetTick ();
 8003c0e:	f001 fd37 	bl	8005680 <HAL_GetTick>
 8003c12:	6028      	str	r0, [r5, #0]

}
 8003c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	airUseForRx = (receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 8003c16:	2000      	movs	r0, #0
 8003c18:	e7e9      	b.n	8003bee <airCounter+0x9a>
	airUseForTx = (transmittingTime == 0) ? 0 : (float) transmittingTime / (float) upTime;
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	e7f5      	b.n	8003c0a <airCounter+0xb6>
 8003c1e:	bf00      	nop
 8003c20:	20000138 	.word	0x20000138
 8003c24:	20000374 	.word	0x20000374
 8003c28:	200009a0 	.word	0x200009a0
 8003c2c:	20000164 	.word	0x20000164
 8003c30:	20000370 	.word	0x20000370
 8003c34:	20000a7c 	.word	0x20000a7c
 8003c38:	2000189c 	.word	0x2000189c
 8003c3c:	20000bcc 	.word	0x20000bcc
 8003c40:	20000b7c 	.word	0x20000b7c
 8003c44:	20000b78 	.word	0x20000b78

08003c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c48:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c4a:	2214      	movs	r2, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c4c:	2400      	movs	r4, #0
{
 8003c4e:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c50:	4621      	mov	r1, r4
 8003c52:	eb0d 0002 	add.w	r0, sp, r2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c56:	940d      	str	r4, [sp, #52]	; 0x34
 8003c58:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c5a:	f004 fa07 	bl	800806c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c5e:	2210      	movs	r2, #16
 8003c60:	4621      	mov	r1, r4
 8003c62:	a801      	add	r0, sp, #4
 8003c64:	f004 fa02 	bl	800806c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c6c:	2209      	movs	r2, #9
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003c6e:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c70:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c72:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c76:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c7a:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c80:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c82:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003c84:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003c86:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c88:	f002 fe82 	bl	8006990 <HAL_RCC_OscConfig>
 8003c8c:	b100      	cbz	r0, 8003c90 <SystemClock_Config+0x48>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */

	while (1)
 8003c8e:	e7fe      	b.n	8003c8e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c90:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c92:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c9a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c9c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	a805      	add	r0, sp, #20
 8003ca4:	f003 f84a 	bl	8006d3c <HAL_RCC_ClockConfig>
 8003ca8:	b100      	cbz	r0, 8003cac <SystemClock_Config+0x64>
	while (1)
 8003caa:	e7fe      	b.n	8003caa <SystemClock_Config+0x62>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003cac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb0:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003cb2:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003cb4:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cb6:	f003 f8fd 	bl	8006eb4 <HAL_RCCEx_PeriphCLKConfig>
 8003cba:	b100      	cbz	r0, 8003cbe <SystemClock_Config+0x76>
	while (1)
 8003cbc:	e7fe      	b.n	8003cbc <SystemClock_Config+0x74>
}
 8003cbe:	b014      	add	sp, #80	; 0x50
 8003cc0:	bd10      	pop	{r4, pc}
	...

08003cc4 <main>:
{
 8003cc4:	b580      	push	{r7, lr}
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cc6:	4d9e      	ldr	r5, [pc, #632]	; (8003f40 <main+0x27c>)
{
 8003cc8:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8003cca:	f001 fcbb 	bl	8005644 <HAL_Init>
  SystemClock_Config();
 8003cce:	f7ff ffbb 	bl	8003c48 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	a80b      	add	r0, sp, #44	; 0x2c
 8003cd8:	f004 f9c8 	bl	800806c <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cdc:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 8003cde:	2200      	movs	r2, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ce0:	f043 0320 	orr.w	r3, r3, #32
 8003ce4:	61ab      	str	r3, [r5, #24]
 8003ce6:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 8003ce8:	2118      	movs	r1, #24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	9306      	str	r3, [sp, #24]
 8003cf0:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf2:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 8003cf4:	4893      	ldr	r0, [pc, #588]	; (8003f44 <main+0x280>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	61ab      	str	r3, [r5, #24]
 8003cfc:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cfe:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	9307      	str	r3, [sp, #28]
 8003d06:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d08:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0c:	f043 0308 	orr.w	r3, r3, #8
 8003d10:	61ab      	str	r3, [r5, #24]
 8003d12:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d14:	f04f 0903 	mov.w	r9, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d18:	f003 0308 	and.w	r3, r3, #8
 8003d1c:	9308      	str	r3, [sp, #32]
 8003d1e:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOA, RESET_Pin|NSS_Pin, GPIO_PIN_RESET);
 8003d20:	f002 f9a4 	bl	800606c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, CS_Pin|CD_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003d24:	2200      	movs	r2, #0
 8003d26:	f245 0120 	movw	r1, #20512	; 0x5020
 8003d2a:	4887      	ldr	r0, [pc, #540]	; (8003f48 <main+0x284>)
 8003d2c:	f002 f99e 	bl	800606c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 8003d30:	2201      	movs	r2, #1
 8003d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d36:	4883      	ldr	r0, [pc, #524]	; (8003f44 <main+0x280>)
 8003d38:	f002 f998 	bl	800606c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d3c:	2318      	movs	r3, #24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d3e:	f04f 0806 	mov.w	r8, #6
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d42:	f44f 6740 	mov.w	r7, #3072	; 0xc00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	487f      	ldr	r0, [pc, #508]	; (8003f44 <main+0x280>)
 8003d48:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d4a:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d4e:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	f002 f8a9 	bl	8005ea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d56:	4b7d      	ldr	r3, [pc, #500]	; (8003f4c <main+0x288>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d58:	487b      	ldr	r0, [pc, #492]	; (8003f48 <main+0x284>)
 8003d5a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d5c:	e9cd 830b 	strd	r8, r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d60:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d62:	f002 f8a1 	bl	8005ea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d66:	4b7a      	ldr	r3, [pc, #488]	; (8003f50 <main+0x28c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d68:	4877      	ldr	r0, [pc, #476]	; (8003f48 <main+0x284>)
 8003d6a:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003d6c:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d70:	960d      	str	r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d72:	f002 f899 	bl	8005ea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_Pin|CD_Pin|BUZZER_Pin;
 8003d76:	f245 0320 	movw	r3, #20512	; 0x5020
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d7a:	4873      	ldr	r0, [pc, #460]	; (8003f48 <main+0x284>)
 8003d7c:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7e:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d80:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d84:	e9cd 490d 	strd	r4, r9, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d88:	f002 f88e 	bl	8005ea8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RELAY_Pin;
 8003d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8003d90:	486c      	ldr	r0, [pc, #432]	; (8003f44 <main+0x280>)
 8003d92:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d94:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9a:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8003d9c:	f002 f884 	bl	8005ea8 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003da0:	4622      	mov	r2, r4
 8003da2:	4621      	mov	r1, r4
 8003da4:	2007      	movs	r0, #7
 8003da6:	f001 fec9 	bl	8005b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003daa:	2007      	movs	r0, #7
 8003dac:	f001 fef8 	bl	8005ba0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8003db0:	4622      	mov	r2, r4
 8003db2:	4621      	mov	r1, r4
 8003db4:	2008      	movs	r0, #8
 8003db6:	f001 fec1 	bl	8005b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003dba:	2008      	movs	r0, #8
 8003dbc:	f001 fef0 	bl	8005ba0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	2028      	movs	r0, #40	; 0x28
 8003dc6:	f001 feb9 	bl	8005b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003dca:	2028      	movs	r0, #40	; 0x28
 8003dcc:	f001 fee8 	bl	8005ba0 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dd0:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8003dd2:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003dd4:	4333      	orrs	r3, r6
 8003dd6:	616b      	str	r3, [r5, #20]
 8003dd8:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8003dda:	4639      	mov	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ddc:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8003dde:	2011      	movs	r0, #17
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003de0:	9305      	str	r3, [sp, #20]
 8003de2:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 2, 0);
 8003de4:	f001 feaa 	bl	8005b3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003de8:	2011      	movs	r0, #17
 8003dea:	f001 fed9 	bl	8005ba0 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8003dee:	4859      	ldr	r0, [pc, #356]	; (8003f54 <main+0x290>)
  hi2c1.Init.ClockSpeed = 400000;
 8003df0:	f8df c194 	ldr.w	ip, [pc, #404]	; 8003f88 <main+0x2c4>
 8003df4:	4b58      	ldr	r3, [pc, #352]	; (8003f58 <main+0x294>)
  hi2c1.Init.OwnAddress1 = 0;
 8003df6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 400000;
 8003dfa:	e9c0 c300 	strd	ip, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e02:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e06:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e0a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e0c:	f002 fb1c 	bl	8006448 <HAL_I2C_Init>
 8003e10:	4603      	mov	r3, r0
 8003e12:	b100      	cbz	r0, 8003e16 <main+0x152>
	while (1)
 8003e14:	e7fe      	b.n	8003e14 <main+0x150>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e16:	f44f 7982 	mov.w	r9, #260	; 0x104
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003e1a:	f44f 7500 	mov.w	r5, #512	; 0x200
 8003e1e:	2408      	movs	r4, #8
  hspi1.Init.CRCPolynomial = 10;
 8003e20:	f04f 0a0a 	mov.w	sl, #10
  hspi1.Instance = SPI1;
 8003e24:	484d      	ldr	r0, [pc, #308]	; (8003f5c <main+0x298>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e26:	4a4e      	ldr	r2, [pc, #312]	; (8003f60 <main+0x29c>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e28:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e2c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e30:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e34:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e36:	e9c0 2900 	strd	r2, r9, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003e3a:	e9c0 5406 	strd	r5, r4, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8003e3e:	f8c0 a02c 	str.w	sl, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e42:	f003 f987 	bl	8007154 <HAL_SPI_Init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	b100      	cbz	r0, 8003e4c <main+0x188>
	while (1)
 8003e4a:	e7fe      	b.n	8003e4a <main+0x186>
  hspi2.Instance = SPI2;
 8003e4c:	4845      	ldr	r0, [pc, #276]	; (8003f64 <main+0x2a0>)
 8003e4e:	4a46      	ldr	r2, [pc, #280]	; (8003f68 <main+0x2a4>)
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003e50:	e9c0 5406 	strd	r5, r4, [r0, #24]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e54:	e9c0 2900 	strd	r2, r9, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e58:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e5c:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e60:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.CRCPolynomial = 10;
 8003e64:	e9c0 3a0a 	strd	r3, sl, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003e68:	f003 f974 	bl	8007154 <HAL_SPI_Init>
 8003e6c:	4605      	mov	r5, r0
 8003e6e:	b100      	cbz	r0, 8003e72 <main+0x1ae>
	while (1)
 8003e70:	e7fe      	b.n	8003e70 <main+0x1ac>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e72:	4601      	mov	r1, r0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e74:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e78:	221c      	movs	r2, #28
 8003e7a:	a80b      	add	r0, sp, #44	; 0x2c
 8003e7c:	f004 f8f6 	bl	800806c <memset>
  htim2.Instance = TIM2;
 8003e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e84:	4c39      	ldr	r4, [pc, #228]	; (8003f6c <main+0x2a8>)
  htim2.Init.Prescaler = 0;
 8003e86:	e9c4 3500 	strd	r3, r5, [r4]
  htim2.Init.Period = 89;
 8003e8a:	2359      	movs	r3, #89	; 0x59
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e8c:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e8e:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e92:	60a5      	str	r5, [r4, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e94:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003e96:	f003 fc81 	bl	800779c <HAL_TIM_PWM_Init>
 8003e9a:	b100      	cbz	r0, 8003e9e <main+0x1da>
	while (1)
 8003e9c:	e7fe      	b.n	8003e9c <main+0x1d8>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e9e:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ea2:	a909      	add	r1, sp, #36	; 0x24
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f003 fdf1 	bl	8007a8c <HAL_TIMEx_MasterConfigSynchronization>
 8003eaa:	b100      	cbz	r0, 8003eae <main+0x1ea>
	while (1)
 8003eac:	e7fe      	b.n	8003eac <main+0x1e8>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003eae:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003eb0:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8003eb2:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eb6:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003eb8:	2204      	movs	r2, #4
 8003eba:	4620      	mov	r0, r4
 8003ebc:	a90b      	add	r1, sp, #44	; 0x2c
 8003ebe:	f003 fcc5 	bl	800784c <HAL_TIM_PWM_ConfigChannel>
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	b100      	cbz	r0, 8003ec8 <main+0x204>
	while (1)
 8003ec6:	e7fe      	b.n	8003ec6 <main+0x202>
  HAL_TIM_MspPostInit(&htim2);
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 fc43 	bl	8004754 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 8003ece:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8003ed2:	4827      	ldr	r0, [pc, #156]	; (8003f70 <main+0x2ac>)
  huart1.Init.BaudRate = 9600;
 8003ed4:	4c27      	ldr	r4, [pc, #156]	; (8003f74 <main+0x2b0>)
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ed6:	e9c0 5502 	strd	r5, r5, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8003eda:	e9c0 4300 	strd	r4, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ede:	230c      	movs	r3, #12
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ee0:	6105      	str	r5, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ee2:	e9c0 3505 	strd	r3, r5, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ee6:	61c5      	str	r5, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ee8:	f003 fe76 	bl	8007bd8 <HAL_UART_Init>
 8003eec:	b100      	cbz	r0, 8003ef0 <main+0x22c>
	while (1)
 8003eee:	e7fe      	b.n	8003eee <main+0x22a>
  hiwdg.Instance = IWDG;
 8003ef0:	4821      	ldr	r0, [pc, #132]	; (8003f78 <main+0x2b4>)
 8003ef2:	4b22      	ldr	r3, [pc, #136]	; (8003f7c <main+0x2b8>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003ef4:	e9c0 3800 	strd	r3, r8, [r0]
  hiwdg.Init.Reload = 4095;
 8003ef8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003efc:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003efe:	f002 fd19 	bl	8006934 <HAL_IWDG_Init>
 8003f02:	b100      	cbz	r0, 8003f06 <main+0x242>
	while (1)
 8003f04:	e7fe      	b.n	8003f04 <main+0x240>
  hadc2.Instance = ADC2;
 8003f06:	4c1e      	ldr	r4, [pc, #120]	; (8003f80 <main+0x2bc>)
 8003f08:	4b1e      	ldr	r3, [pc, #120]	; (8003f84 <main+0x2c0>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f0a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  hadc2.Instance = ADC2;
 8003f0e:	6023      	str	r3, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f10:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f14:	900d      	str	r0, [sp, #52]	; 0x34
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f16:	60a0      	str	r0, [r4, #8]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f18:	7520      	strb	r0, [r4, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f1a:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f1c:	4620      	mov	r0, r4
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003f1e:	7326      	strb	r6, [r4, #12]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f20:	61e3      	str	r3, [r4, #28]
  hadc2.Init.NbrOfConversion = 1;
 8003f22:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f24:	f001 fd0a 	bl	800593c <HAL_ADC_Init>
 8003f28:	b100      	cbz	r0, 8003f2c <main+0x268>
	while (1)
 8003f2a:	e7fe      	b.n	8003f2a <main+0x266>
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003f2c:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f2e:	4620      	mov	r0, r4
 8003f30:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f32:	e9cd 760b 	strd	r7, r6, [sp, #44]	; 0x2c
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003f36:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f38:	f001 fbbe 	bl	80056b8 <HAL_ADC_ConfigChannel>
 8003f3c:	b330      	cbz	r0, 8003f8c <main+0x2c8>
	while (1)
 8003f3e:	e7fe      	b.n	8003f3e <main+0x27a>
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40010800 	.word	0x40010800
 8003f48:	40010c00 	.word	0x40010c00
 8003f4c:	10210000 	.word	0x10210000
 8003f50:	10310000 	.word	0x10310000
 8003f54:	20000b18 	.word	0x20000b18
 8003f58:	00061a80 	.word	0x00061a80
 8003f5c:	200010c4 	.word	0x200010c4
 8003f60:	40013000 	.word	0x40013000
 8003f64:	20000a24 	.word	0x20000a24
 8003f68:	40003800 	.word	0x40003800
 8003f6c:	2000111c 	.word	0x2000111c
 8003f70:	20000c38 	.word	0x20000c38
 8003f74:	40013800 	.word	0x40013800
 8003f78:	20000b6c 	.word	0x20000b6c
 8003f7c:	40003000 	.word	0x40003000
 8003f80:	20000ae8 	.word	0x20000ae8
 8003f84:	40012800 	.word	0x40012800
 8003f88:	40005400 	.word	0x40005400
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 8003f8c:	4a8b      	ldr	r2, [pc, #556]	; (80041bc <main+0x4f8>)
	HAL_Delay (300);
 8003f8e:	f44f 7096 	mov.w	r0, #300	; 0x12c
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 8003f92:	6853      	ldr	r3, [r2, #4]
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 8003f94:	2400      	movs	r4, #0
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 8003f96:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003f9a:	6053      	str	r3, [r2, #4]
	HAL_Delay (300);
 8003f9c:	f001 fb76 	bl	800568c <HAL_Delay>
	ssd1306_Init ();
 8003fa0:	f000 f950 	bl	8004244 <ssd1306_Init>
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 8003fa4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <main+0x4fc>)
 8003fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4884      	ldr	r0, [pc, #528]	; (80041c4 <main+0x500>)
 8003fb4:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003fb8:	f7fc fcf0 	bl	800099c <UC1609_Init>
	wsInit (&htim2, TIM_CHANNEL_2);
 8003fbc:	2104      	movs	r1, #4
 8003fbe:	4882      	ldr	r0, [pc, #520]	; (80041c8 <main+0x504>)
 8003fc0:	f001 faee 	bl	80055a0 <wsInit>
	uartInit (&huart1);
 8003fc4:	4881      	ldr	r0, [pc, #516]	; (80041cc <main+0x508>)
 8003fc6:	f000 ff81 	bl	8004ecc <uartInit>
	HAL_ADCEx_Calibration_Start (&hadc2);
 8003fca:	4881      	ldr	r0, [pc, #516]	; (80041d0 <main+0x50c>)
 8003fcc:	f001 fd34 	bl	8005a38 <HAL_ADCEx_Calibration_Start>
	HAL_Delay (100);
 8003fd0:	2064      	movs	r0, #100	; 0x64
 8003fd2:	f001 fb5b 	bl	800568c <HAL_Delay>
	HAL_ADC_Start (&hadc2);
 8003fd6:	487e      	ldr	r0, [pc, #504]	; (80041d0 <main+0x50c>)
 8003fd8:	f001 fc28 	bl	800582c <HAL_ADC_Start>
	defaultSettings ();
 8003fdc:	f7fd f80c 	bl	8000ff8 <defaultSettings>
	RadioInit ();
 8003fe0:	f7ff fd98 	bl	8003b14 <RadioInit>
	initLegalFreq ();
 8003fe4:	f7ff f9b6 	bl	8003354 <initLegalFreq>
	memset (nodes, 0, sizeof(nodes));
 8003fe8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fec:	4621      	mov	r1, r4
 8003fee:	4879      	ldr	r0, [pc, #484]	; (80041d4 <main+0x510>)
 8003ff0:	f004 f83c 	bl	800806c <memset>
	loadNodeData ();
 8003ff4:	f7fc ffcc 	bl	8000f90 <loadNodeData>
	defaultNodeSettings ();
 8003ff8:	f7ff f994 	bl	8003324 <defaultNodeSettings>
	ShowLogo ();
 8003ffc:	f7fd fdc4 	bl	8001b88 <ShowLogo>
	clearStrings ();
 8004000:	f7fd f83a 	bl	8001078 <clearStrings>
	if (tryLoadSettings ())
 8004004:	f7fd f8ec 	bl	80011e0 <tryLoadSettings>
 8004008:	2800      	cmp	r0, #0
 800400a:	f000 80cb 	beq.w	80041a4 <main+0x4e0>
			sprintf (string[0], "Settings loaded");
 800400e:	4972      	ldr	r1, [pc, #456]	; (80041d8 <main+0x514>)
 8004010:	4872      	ldr	r0, [pc, #456]	; (80041dc <main+0x518>)
 8004012:	f004 f8e1 	bl	80081d8 <strcpy>
			sprintf (string[1], "from flash");
 8004016:	4972      	ldr	r1, [pc, #456]	; (80041e0 <main+0x51c>)
 8004018:	4872      	ldr	r0, [pc, #456]	; (80041e4 <main+0x520>)
	flag.lcdRefreshRequest = 1;
 800401a:	4c73      	ldr	r4, [pc, #460]	; (80041e8 <main+0x524>)
			sprintf (string[2], "Using defaults");
 800401c:	f004 f8dc 	bl	80081d8 <strcpy>
	updateLcd ();
 8004020:	f7fd f83c 	bl	800109c <updateLcd>
	HAL_Delay (1000);
 8004024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004028:	f001 fb30 	bl	800568c <HAL_Delay>
	flag.lcdRefreshRequest = 1;
 800402c:	7863      	ldrb	r3, [r4, #1]
	myRadio.alwaysRX = true;   //Always listen for AIR
 800402e:	4d6f      	ldr	r5, [pc, #444]	; (80041ec <main+0x528>)
	flag.lcdRefreshRequest = 1;
 8004030:	f043 0304 	orr.w	r3, r3, #4
 8004034:	7063      	strb	r3, [r4, #1]
	myRadio.alwaysRX = true;   //Always listen for AIR
 8004036:	2301      	movs	r3, #1
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 8004038:	2104      	movs	r1, #4
 800403a:	4861      	ldr	r0, [pc, #388]	; (80041c0 <main+0x4fc>)
	myRadio.alwaysRX = true;   //Always listen for AIR
 800403c:	73eb      	strb	r3, [r5, #15]
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 800403e:	f002 f80f 	bl	8006060 <HAL_GPIO_ReadPin>
 8004042:	4e6b      	ldr	r6, [pc, #428]	; (80041f0 <main+0x52c>)
 8004044:	b908      	cbnz	r0, 800404a <main+0x386>
		screenMode = smModeSelect;
 8004046:	231e      	movs	r3, #30
 8004048:	7033      	strb	r3, [r6, #0]
			HAL_IWDG_Refresh (&hiwdg);
 800404a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8004210 <main+0x54c>
			blinkProvider = HAL_GetTick () % 1000 > 500;
 800404e:	4f69      	ldr	r7, [pc, #420]	; (80041f4 <main+0x530>)
			fastBlinkProvider = HAL_GetTick () % 70 > 35;
 8004050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004214 <main+0x550>
			HAL_IWDG_Refresh (&hiwdg);
 8004054:	4648      	mov	r0, r9
 8004056:	f002 fc94 	bl	8006982 <HAL_IWDG_Refresh>
			blinkProvider = HAL_GetTick () % 1000 > 500;
 800405a:	f001 fb11 	bl	8005680 <HAL_GetTick>
 800405e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004062:	fbb0 f2f3 	udiv	r2, r0, r3
 8004066:	fb02 0313 	mls	r3, r2, r3, r0
 800406a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800406e:	bf94      	ite	ls
 8004070:	2300      	movls	r3, #0
 8004072:	2301      	movhi	r3, #1
 8004074:	703b      	strb	r3, [r7, #0]
			fastBlinkProvider = HAL_GetTick () % 70 > 35;
 8004076:	f001 fb03 	bl	8005680 <HAL_GetTick>
 800407a:	2346      	movs	r3, #70	; 0x46
 800407c:	fbb0 f2f3 	udiv	r2, r0, r3
 8004080:	fb02 0313 	mls	r3, r2, r3, r0
 8004084:	2b23      	cmp	r3, #35	; 0x23
 8004086:	bf94      	ite	ls
 8004088:	2300      	movls	r3, #0
 800408a:	2301      	movhi	r3, #1
 800408c:	f888 3000 	strb.w	r3, [r8]
			analogRoutine ();
 8004090:	f7fd fb46 	bl	8001720 <analogRoutine>
			backButtonHoldRoutine ();
 8004094:	f7ff fc6c 	bl	8003970 <backButtonHoldRoutine>
			halfSecondRoutine ();
 8004098:	f7ff fc92 	bl	80039c0 <halfSecondRoutine>
			secondRoutine ();
 800409c:	f7ff fcb2 	bl	8003a04 <secondRoutine>
			alarmRoutine ();
 80040a0:	f7fd fbc6 	bl	8001830 <alarmRoutine>
			ledRoutine ();
 80040a4:	f7fd fd10 	bl	8001ac8 <ledRoutine>
			airCounter ();
 80040a8:	f7ff fd54 	bl	8003b54 <airCounter>
			NetRoutine (&netHandler);
 80040ac:	4852      	ldr	r0, [pc, #328]	; (80041f8 <main+0x534>)
 80040ae:	f7fc fbc5 	bl	800083c <NetRoutine>
			SX127X_Routine (&myRadio);
 80040b2:	484e      	ldr	r0, [pc, #312]	; (80041ec <main+0x528>)
 80040b4:	f000 fe5c 	bl	8004d70 <SX127X_Routine>
			if (flag.lcdRefreshRequest)
 80040b8:	7863      	ldrb	r3, [r4, #1]
 80040ba:	0759      	lsls	r1, r3, #29
 80040bc:	d504      	bpl.n	80040c8 <main+0x404>
					flag.lcdRefreshRequest = 0;
 80040be:	f36f 0382 	bfc	r3, #2, #1
 80040c2:	7063      	strb	r3, [r4, #1]
					lcdRoutine ();
 80040c4:	f7fd ff20 	bl	8001f08 <lcdRoutine>
			if (myRadio.readBytes)
 80040c8:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
 80040cc:	b120      	cbz	r0, 80040d8 <main+0x414>
					handleMessage (myRadio.readBytes);
 80040ce:	f7fd f9d3 	bl	8001478 <handleMessage>
					myRadio.readBytes = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			if (flag.encDec)
 80040d8:	7823      	ldrb	r3, [r4, #0]
 80040da:	079a      	lsls	r2, r3, #30
 80040dc:	d504      	bpl.n	80040e8 <main+0x424>
					flag.encDec = 0;
 80040de:	f36f 0341 	bfc	r3, #1, #1
 80040e2:	7023      	strb	r3, [r4, #0]
					button_left ();
 80040e4:	f7ff fae6 	bl	80036b4 <button_left>
			if (flag.encInc)
 80040e8:	7823      	ldrb	r3, [r4, #0]
 80040ea:	07d8      	lsls	r0, r3, #31
 80040ec:	d504      	bpl.n	80040f8 <main+0x434>
					flag.encInc = 0;
 80040ee:	f36f 0300 	bfc	r3, #0, #1
 80040f2:	7023      	strb	r3, [r4, #0]
					button_right ();
 80040f4:	f7ff f984 	bl	8003400 <button_right>
			if (flag.encOk)
 80040f8:	7823      	ldrb	r3, [r4, #0]
 80040fa:	0759      	lsls	r1, r3, #29
 80040fc:	d504      	bpl.n	8004108 <main+0x444>
					flag.encOk = 0;
 80040fe:	f36f 0382 	bfc	r3, #2, #1
 8004102:	7023      	strb	r3, [r4, #0]
					button_ok ();
 8004104:	f7fe ffb0 	bl	8003068 <button_ok>
			if (flag.back == 1)
 8004108:	7823      	ldrb	r3, [r4, #0]
 800410a:	071a      	lsls	r2, r3, #28
 800410c:	d504      	bpl.n	8004118 <main+0x454>
					flag.back = 0;
 800410e:	f36f 03c3 	bfc	r3, #3, #1
 8004112:	7023      	strb	r3, [r4, #0]
					button_back ();
 8004114:	f7fd fdb2 	bl	8001c7c <button_back>
			if (flag.analog0 == 1)
 8004118:	7823      	ldrb	r3, [r4, #0]
 800411a:	06d8      	lsls	r0, r3, #27
 800411c:	d504      	bpl.n	8004128 <main+0x464>
					flag.analog0 = 0;
 800411e:	f36f 1304 	bfc	r3, #4, #1
 8004122:	7023      	strb	r3, [r4, #0]
					button0 ();
 8004124:	f7fd fe04 	bl	8001d30 <button0>
			if (flag.analog1 == 1)
 8004128:	7823      	ldrb	r3, [r4, #0]
 800412a:	0699      	lsls	r1, r3, #26
 800412c:	d504      	bpl.n	8004138 <main+0x474>
					flag.analog1 = 0;
 800412e:	f36f 1345 	bfc	r3, #5, #1
 8004132:	7023      	strb	r3, [r4, #0]
					button1 ();
 8004134:	f7fd fe04 	bl	8001d40 <button1>
			if (flag.analog2 == 1)
 8004138:	7823      	ldrb	r3, [r4, #0]
 800413a:	065a      	lsls	r2, r3, #25
 800413c:	d504      	bpl.n	8004148 <main+0x484>
					flag.analog2 = 0;
 800413e:	f36f 1386 	bfc	r3, #6, #1
 8004142:	7023      	strb	r3, [r4, #0]
					button2 ();
 8004144:	f7fd fe20 	bl	8001d88 <button2>
			if (flag.analog3 == 1)
 8004148:	f994 3000 	ldrsb.w	r3, [r4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	da05      	bge.n	800415c <main+0x498>
					flag.analog3 = 0;
 8004150:	7823      	ldrb	r3, [r4, #0]
 8004152:	f36f 13c7 	bfc	r3, #7, #1
 8004156:	7023      	strb	r3, [r4, #0]
					button3 ();
 8004158:	f7fd fe2e 	bl	8001db8 <button3>
			if (screenMode == smModeSelect)
 800415c:	7833      	ldrb	r3, [r6, #0]
 800415e:	2b1e      	cmp	r3, #30
 8004160:	f43f af78 	beq.w	8004054 <main+0x390>
			if (flag.uartGotMessage)
 8004164:	7863      	ldrb	r3, [r4, #1]
 8004166:	06d8      	lsls	r0, r3, #27
 8004168:	d504      	bpl.n	8004174 <main+0x4b0>
					flag.uartGotMessage = 0;
 800416a:	f36f 1304 	bfc	r3, #4, #1
 800416e:	7063      	strb	r3, [r4, #1]
					uartReceiveHandler ();
 8004170:	f000 fee2 	bl	8004f38 <uartReceiveHandler>
			if (flag.saveSettings)
 8004174:	7863      	ldrb	r3, [r4, #1]
 8004176:	07d9      	lsls	r1, r3, #31
 8004178:	d504      	bpl.n	8004184 <main+0x4c0>
					flag.saveSettings = 0;
 800417a:	f36f 0300 	bfc	r3, #0, #1
 800417e:	7063      	strb	r3, [r4, #1]
					saveSettings ();
 8004180:	f7fd f860 	bl	8001244 <saveSettings>
			if (flag.sendConfig)
 8004184:	7863      	ldrb	r3, [r4, #1]
 8004186:	079a      	lsls	r2, r3, #30
 8004188:	d504      	bpl.n	8004194 <main+0x4d0>
					flag.sendConfig = 0;
 800418a:	f36f 0341 	bfc	r3, #1, #1
 800418e:	7063      	strb	r3, [r4, #1]
					sendConfig ();
 8004190:	f001 f8c8 	bl	8005324 <sendConfig>
			if (configStep)
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <main+0x538>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f43f af5b 	beq.w	8004054 <main+0x390>
					nodeConfigureRoutine ();
 800419e:	f7ff fc7d 	bl	8003a9c <nodeConfigureRoutine>
 80041a2:	e757      	b.n	8004054 <main+0x390>
			sprintf (string[0], "Failed to load");
 80041a4:	4916      	ldr	r1, [pc, #88]	; (8004200 <main+0x53c>)
 80041a6:	480d      	ldr	r0, [pc, #52]	; (80041dc <main+0x518>)
 80041a8:	f004 f816 	bl	80081d8 <strcpy>
			sprintf (string[1], "settings from flash");
 80041ac:	4915      	ldr	r1, [pc, #84]	; (8004204 <main+0x540>)
 80041ae:	480d      	ldr	r0, [pc, #52]	; (80041e4 <main+0x520>)
 80041b0:	f004 f812 	bl	80081d8 <strcpy>
			sprintf (string[2], "Using defaults");
 80041b4:	4914      	ldr	r1, [pc, #80]	; (8004208 <main+0x544>)
 80041b6:	4815      	ldr	r0, [pc, #84]	; (800420c <main+0x548>)
 80041b8:	e72f      	b.n	800401a <main+0x356>
 80041ba:	bf00      	nop
 80041bc:	e0042000 	.word	0xe0042000
 80041c0:	40010c00 	.word	0x40010c00
 80041c4:	20000a24 	.word	0x20000a24
 80041c8:	2000111c 	.word	0x2000111c
 80041cc:	20000c38 	.word	0x20000c38
 80041d0:	20000ae8 	.word	0x20000ae8
 80041d4:	20000ca0 	.word	0x20000ca0
 80041d8:	0800a157 	.word	0x0800a157
 80041dc:	20000170 	.word	0x20000170
 80041e0:	0800a17f 	.word	0x0800a17f
 80041e4:	200001b0 	.word	0x200001b0
 80041e8:	20000b84 	.word	0x20000b84
 80041ec:	200009a0 	.word	0x200009a0
 80041f0:	2000016a 	.word	0x2000016a
 80041f4:	200010c0 	.word	0x200010c0
 80041f8:	20001164 	.word	0x20001164
 80041fc:	20000bd1 	.word	0x20000bd1
 8004200:	0800a167 	.word	0x0800a167
 8004204:	0800a176 	.word	0x0800a176
 8004208:	0800a18a 	.word	0x0800a18a
 800420c:	200001f0 	.word	0x200001f0
 8004210:	20000b6c 	.word	0x20000b6c
 8004214:	20000b80 	.word	0x20000b80

08004218 <Error_Handler>:
	while (1)
 8004218:	e7fe      	b.n	8004218 <Error_Handler>
	...

0800421c <ssd1306_WriteCommand>:
uint8_t buffer[SSD1306_HEIGHT * SSD1306_WIDTH / 8];
uint16_t cursor = 0;
//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command) {
 800421c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800421e:	2301      	movs	r3, #1
 8004220:	220a      	movs	r2, #10
 8004222:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004226:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t command) {
 800422a:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800422e:	9200      	str	r2, [sp, #0]
 8004230:	2178      	movs	r1, #120	; 0x78
 8004232:	2200      	movs	r2, #0
 8004234:	4802      	ldr	r0, [pc, #8]	; (8004240 <ssd1306_WriteCommand+0x24>)
 8004236:	f002 f9af 	bl	8006598 <HAL_I2C_Mem_Write>
}
 800423a:	b007      	add	sp, #28
 800423c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004240:	20000b18 	.word	0x20000b18

08004244 <ssd1306_Init>:

//
//	Initialize the oled screen
//
void ssd1306_Init(void) {
 8004244:	b508      	push	{r3, lr}

	// Wait for the screen to boot
	HAL_Delay(100);
 8004246:	2064      	movs	r0, #100	; 0x64
 8004248:	f001 fa20 	bl	800568c <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 800424c:	20ae      	movs	r0, #174	; 0xae
 800424e:	f7ff ffe5 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8004252:	2020      	movs	r0, #32
 8004254:	f7ff ffe2 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8004258:	2010      	movs	r0, #16
 800425a:	f7ff ffdf 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800425e:	20b0      	movs	r0, #176	; 0xb0
 8004260:	f7ff ffdc 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004264:	20c8      	movs	r0, #200	; 0xc8
 8004266:	f7ff ffd9 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 800426a:	2000      	movs	r0, #0
 800426c:	f7ff ffd6 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8004270:	2010      	movs	r0, #16
 8004272:	f7ff ffd3 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8004276:	2040      	movs	r0, #64	; 0x40
 8004278:	f7ff ffd0 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 800427c:	2081      	movs	r0, #129	; 0x81
 800427e:	f7ff ffcd 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8004282:	20ff      	movs	r0, #255	; 0xff
 8004284:	f7ff ffca 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8004288:	20a1      	movs	r0, #161	; 0xa1
 800428a:	f7ff ffc7 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 800428e:	20a6      	movs	r0, #166	; 0xa6
 8004290:	f7ff ffc4 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8004294:	20a8      	movs	r0, #168	; 0xa8
 8004296:	f7ff ffc1 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 800429a:	203f      	movs	r0, #63	; 0x3f
 800429c:	f7ff ffbe 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80042a0:	20a4      	movs	r0, #164	; 0xa4
 80042a2:	f7ff ffbb 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 80042a6:	20d3      	movs	r0, #211	; 0xd3
 80042a8:	f7ff ffb8 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7ff ffb5 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80042b2:	20d5      	movs	r0, #213	; 0xd5
 80042b4:	f7ff ffb2 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80042b8:	20f0      	movs	r0, #240	; 0xf0
 80042ba:	f7ff ffaf 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80042be:	20d9      	movs	r0, #217	; 0xd9
 80042c0:	f7ff ffac 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80042c4:	2022      	movs	r0, #34	; 0x22
 80042c6:	f7ff ffa9 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 80042ca:	20da      	movs	r0, #218	; 0xda
 80042cc:	f7ff ffa6 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 80042d0:	2012      	movs	r0, #18
 80042d2:	f7ff ffa3 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 80042d6:	20db      	movs	r0, #219	; 0xdb
 80042d8:	f7ff ffa0 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80042dc:	2020      	movs	r0, #32
 80042de:	f7ff ff9d 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80042e2:	208d      	movs	r0, #141	; 0x8d
 80042e4:	f7ff ff9a 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80042e8:	2014      	movs	r0, #20
 80042ea:	f7ff ff97 	bl	800421c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
}
 80042ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80042f2:	20af      	movs	r0, #175	; 0xaf
 80042f4:	f7ff bf92 	b.w	800421c <ssd1306_WriteCommand>

080042f8 <ssd1306_GotoXY>:

void ssd1306_GotoXY(int x, int y) {
	cursor = SSD1306_WIDTH * y + x;
 80042f8:	4b02      	ldr	r3, [pc, #8]	; (8004304 <ssd1306_GotoXY+0xc>)
 80042fa:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 80042fe:	8018      	strh	r0, [r3, #0]
}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000378 	.word	0x20000378

08004308 <ssd1306_PutRuC>:

void ssd1306_PutRuC(char *c) {
 8004308:	b570      	push	{r4, r5, r6, lr}

	uint8_t pos;
	if (*c == 0xD0)
 800430a:	7803      	ldrb	r3, [r0, #0]
 800430c:	2bd0      	cmp	r3, #208	; 0xd0
 800430e:	d111      	bne.n	8004334 <ssd1306_PutRuC+0x2c>
		pos = *(c + 1) - 144 + 101;
 8004310:	7843      	ldrb	r3, [r0, #1]
 8004312:	3b2b      	subs	r3, #43	; 0x2b
	else if (*c == 0xD1)
		pos = *(c + 1) - 128 + 149;
	else
		return;
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 8004314:	490a      	ldr	r1, [pc, #40]	; (8004340 <ssd1306_PutRuC+0x38>)
 8004316:	4c0b      	ldr	r4, [pc, #44]	; (8004344 <ssd1306_PutRuC+0x3c>)
		pos = *(c + 1) - 128 + 149;
 8004318:	b2db      	uxtb	r3, r3
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 800431a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800431e:	880a      	ldrh	r2, [r1, #0]
 8004320:	4809      	ldr	r0, [pc, #36]	; (8004348 <ssd1306_PutRuC+0x40>)
 8004322:	191e      	adds	r6, r3, r4
 8004324:	58e3      	ldr	r3, [r4, r3]
 8004326:	1815      	adds	r5, r2, r0
 8004328:	5013      	str	r3, [r2, r0]
 800432a:	7933      	ldrb	r3, [r6, #4]
	cursor += 5;
 800432c:	3205      	adds	r2, #5
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 800432e:	712b      	strb	r3, [r5, #4]
	cursor += 5;
 8004330:	800a      	strh	r2, [r1, #0]
}
 8004332:	bd70      	pop	{r4, r5, r6, pc}
	else if (*c == 0xD1)
 8004334:	2bd1      	cmp	r3, #209	; 0xd1
 8004336:	d1fc      	bne.n	8004332 <ssd1306_PutRuC+0x2a>
		pos = *(c + 1) - 128 + 149;
 8004338:	7843      	ldrb	r3, [r0, #1]
 800433a:	3315      	adds	r3, #21
 800433c:	e7ea      	b.n	8004314 <ssd1306_PutRuC+0xc>
 800433e:	bf00      	nop
 8004340:	20000378 	.word	0x20000378
 8004344:	0800a248 	.word	0x0800a248
 8004348:	20000392 	.word	0x20000392

0800434c <ssd1306_Put>:

void ssd1306_Put(char c) {
 800434c:	b570      	push	{r4, r5, r6, lr}
	memcpy(buffer + cursor, &myFont[c - 0x20][0], 5);
 800434e:	4a08      	ldr	r2, [pc, #32]	; (8004370 <ssd1306_Put+0x24>)
 8004350:	4c08      	ldr	r4, [pc, #32]	; (8004374 <ssd1306_Put+0x28>)
 8004352:	3820      	subs	r0, #32
 8004354:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004358:	8813      	ldrh	r3, [r2, #0]
 800435a:	4907      	ldr	r1, [pc, #28]	; (8004378 <ssd1306_Put+0x2c>)
 800435c:	1906      	adds	r6, r0, r4
 800435e:	5820      	ldr	r0, [r4, r0]
 8004360:	185d      	adds	r5, r3, r1
 8004362:	5058      	str	r0, [r3, r1]
 8004364:	7931      	ldrb	r1, [r6, #4]
	cursor += 5;
 8004366:	3305      	adds	r3, #5
	memcpy(buffer + cursor, &myFont[c - 0x20][0], 5);
 8004368:	7129      	strb	r1, [r5, #4]
	cursor += 5;
 800436a:	8013      	strh	r3, [r2, #0]
}
 800436c:	bd70      	pop	{r4, r5, r6, pc}
 800436e:	bf00      	nop
 8004370:	20000378 	.word	0x20000378
 8004374:	0800a248 	.word	0x0800a248
 8004378:	20000392 	.word	0x20000392

0800437c <ssd1306_PutString>:

void ssd1306_PutString(char *c) {
 800437c:	b538      	push	{r3, r4, r5, lr}
 800437e:	4604      	mov	r4, r0
		if (*c == 0xD0 || *c == 0xD1) {
			ssd1306_PutRuC(c);
			c += 2;
		} else
			ssd1306_Put(*c++);
		cursor++;
 8004380:	4d0a      	ldr	r5, [pc, #40]	; (80043ac <ssd1306_PutString+0x30>)
	while (*c) {
 8004382:	7820      	ldrb	r0, [r4, #0]
 8004384:	b900      	cbnz	r0, 8004388 <ssd1306_PutString+0xc>
	}
}
 8004386:	bd38      	pop	{r3, r4, r5, pc}
		if (*c == 0xD0 || *c == 0xD1) {
 8004388:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b01      	cmp	r3, #1
 8004390:	d807      	bhi.n	80043a2 <ssd1306_PutString+0x26>
			ssd1306_PutRuC(c);
 8004392:	4620      	mov	r0, r4
 8004394:	f7ff ffb8 	bl	8004308 <ssd1306_PutRuC>
			c += 2;
 8004398:	3402      	adds	r4, #2
		cursor++;
 800439a:	882b      	ldrh	r3, [r5, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	802b      	strh	r3, [r5, #0]
 80043a0:	e7ef      	b.n	8004382 <ssd1306_PutString+0x6>
			ssd1306_Put(*c++);
 80043a2:	3401      	adds	r4, #1
 80043a4:	f7ff ffd2 	bl	800434c <ssd1306_Put>
 80043a8:	e7f7      	b.n	800439a <ssd1306_PutString+0x1e>
 80043aa:	bf00      	nop
 80043ac:	20000378 	.word	0x20000378

080043b0 <ssd1306_Clean>:

void ssd1306_Clean(void) {
 80043b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
	uint16_t i;
	for (i = 0; i < SSD1306_HEIGHT * SSD1306_WIDTH / 8; i++)
		buffer[i] = 0;
 80043b4:	2100      	movs	r1, #0
 80043b6:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <ssd1306_Clean+0x18>)
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < SSD1306_HEIGHT * SSD1306_WIDTH / 8; i++)
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f9      	bne.n	80043b8 <ssd1306_Clean+0x8>
}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000392 	.word	0x20000392

080043cc <ssd1306_Update>:

void ssd1306_Update(void) {
 80043cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80043ce:	24b0      	movs	r4, #176	; 0xb0
 80043d0:	4d0f      	ldr	r5, [pc, #60]	; (8004410 <ssd1306_Update+0x44>)

	for (j = 0; j < 8; j++) {
		ssd1306_WriteCommand(0xB0 + j);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);
		HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer + j * 128,
 80043d2:	4e10      	ldr	r6, [pc, #64]	; (8004414 <ssd1306_Update+0x48>)
		ssd1306_WriteCommand(0xB0 + j);
 80043d4:	4620      	mov	r0, r4
 80043d6:	f7ff ff21 	bl	800421c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 80043da:	2000      	movs	r0, #0
 80043dc:	f7ff ff1e 	bl	800421c <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 80043e0:	2010      	movs	r0, #16
 80043e2:	f7ff ff1b 	bl	800421c <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer + j * 128,
 80043e6:	2380      	movs	r3, #128	; 0x80
 80043e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043ec:	3401      	adds	r4, #1
 80043ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80043f2:	9500      	str	r5, [sp, #0]
 80043f4:	2301      	movs	r3, #1
 80043f6:	2240      	movs	r2, #64	; 0x40
 80043f8:	2178      	movs	r1, #120	; 0x78
 80043fa:	4630      	mov	r0, r6
 80043fc:	b2e4      	uxtb	r4, r4
 80043fe:	f002 f8cb 	bl	8006598 <HAL_I2C_Mem_Write>
	for (j = 0; j < 8; j++) {
 8004402:	2cb8      	cmp	r4, #184	; 0xb8
 8004404:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8004408:	d1e4      	bne.n	80043d4 <ssd1306_Update+0x8>
				128, 1000);

	}
}
 800440a:	b004      	add	sp, #16
 800440c:	bd70      	pop	{r4, r5, r6, pc}
 800440e:	bf00      	nop
 8004410:	20000392 	.word	0x20000392
 8004414:	20000b18 	.word	0x20000b18

08004418 <ssd1306_PutPixel>:
void ssd1306_DrawBitmap(uint8_t *buf) {
	memcpy(buffer, buf, sizeof(buffer));
}

void ssd1306_PutPixel(uint8_t x, uint8_t y) {
	buffer[(x + (y/8)*SSD1306_WIDTH)%SSD1306_BUFFER_SIZE] |= 1 << (y % 8);
 8004418:	08cb      	lsrs	r3, r1, #3
 800441a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800441e:	2301      	movs	r3, #1
 8004420:	4a05      	ldr	r2, [pc, #20]	; (8004438 <ssd1306_PutPixel+0x20>)
 8004422:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004426:	f001 0107 	and.w	r1, r1, #7
 800442a:	fa03 f101 	lsl.w	r1, r3, r1
 800442e:	5c13      	ldrb	r3, [r2, r0]
 8004430:	4319      	orrs	r1, r3
 8004432:	5411      	strb	r1, [r2, r0]
}
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	20000392 	.word	0x20000392

0800443c <ssd1306_DrawLine>:

void ssd1306_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
	if (x2==x1 && y2==y1)
 800443c:	4282      	cmp	r2, r0
void ssd1306_DrawLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 800443e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004442:	4605      	mov	r5, r0
 8004444:	460c      	mov	r4, r1
 8004446:	4692      	mov	sl, r2
 8004448:	461e      	mov	r6, r3
	if (x2==x1 && y2==y1)
 800444a:	d105      	bne.n	8004458 <ssd1306_DrawLine+0x1c>
 800444c:	428b      	cmp	r3, r1
 800444e:	d107      	bne.n	8004460 <ssd1306_DrawLine+0x24>
	} else {
		for (uint8_t i = y1; i < y2 + 1; ++i) {
			ssd1306_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
		}
	}
}
 8004450:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ssd1306_PutPixel(x1, y1);
 8004454:	f7ff bfe0 	b.w	8004418 <ssd1306_PutPixel>
	if(x2<x1)
 8004458:	bf3e      	ittt	cc
 800445a:	4603      	movcc	r3, r0
 800445c:	4615      	movcc	r5, r2
 800445e:	469a      	movcc	sl, r3
	if(y2<y1)
 8004460:	42a6      	cmp	r6, r4
 8004462:	bf3e      	ittt	cc
 8004464:	4623      	movcc	r3, r4
 8004466:	4634      	movcc	r4, r6
 8004468:	461e      	movcc	r6, r3
	if (x2 - x1 > y2 - y1) {
 800446a:	ebaa 0705 	sub.w	r7, sl, r5
 800446e:	eba6 0804 	sub.w	r8, r6, r4
 8004472:	4547      	cmp	r7, r8
 8004474:	46ab      	mov	fp, r5
 8004476:	46a1      	mov	r9, r4
 8004478:	dc1b      	bgt.n	80044b2 <ssd1306_DrawLine+0x76>
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 800447a:	42a6      	cmp	r6, r4
 800447c:	d31b      	bcc.n	80044b6 <ssd1306_DrawLine+0x7a>
			ssd1306_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 800447e:	eba4 0009 	sub.w	r0, r4, r9
 8004482:	4378      	muls	r0, r7
 8004484:	fb90 f0f8 	sdiv	r0, r0, r8
 8004488:	4428      	add	r0, r5
 800448a:	4621      	mov	r1, r4
 800448c:	b2c0      	uxtb	r0, r0
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 800448e:	3401      	adds	r4, #1
			ssd1306_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 8004490:	f7ff ffc2 	bl	8004418 <ssd1306_PutPixel>
		for (uint8_t i = y1; i < y2 + 1; ++i) {
 8004494:	b2e4      	uxtb	r4, r4
 8004496:	e7f0      	b.n	800447a <ssd1306_DrawLine+0x3e>
			ssd1306_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8004498:	eba5 010b 	sub.w	r1, r5, fp
 800449c:	fb08 f101 	mul.w	r1, r8, r1
 80044a0:	fb91 f1f7 	sdiv	r1, r1, r7
 80044a4:	4421      	add	r1, r4
 80044a6:	4628      	mov	r0, r5
 80044a8:	b2c9      	uxtb	r1, r1
 80044aa:	f7ff ffb5 	bl	8004418 <ssd1306_PutPixel>
		for (uint8_t i = x1; i < x2 + 1; ++i) {
 80044ae:	3501      	adds	r5, #1
 80044b0:	b2ed      	uxtb	r5, r5
 80044b2:	45aa      	cmp	sl, r5
 80044b4:	d2f0      	bcs.n	8004498 <ssd1306_DrawLine+0x5c>
}
 80044b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080044ba <ssd1306_DrawDottedLine>:

void ssd1306_DrawDottedLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
	if (x2==x1 && y2==y1)
 80044ba:	4282      	cmp	r2, r0
void ssd1306_DrawDottedLine(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80044bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c0:	4605      	mov	r5, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	4692      	mov	sl, r2
 80044c6:	4698      	mov	r8, r3
	if (x2==x1 && y2==y1)
 80044c8:	d105      	bne.n	80044d6 <ssd1306_DrawDottedLine+0x1c>
 80044ca:	428b      	cmp	r3, r1
 80044cc:	d103      	bne.n	80044d6 <ssd1306_DrawDottedLine+0x1c>
		} else {
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
				ssd1306_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
			}
		}
}
 80044ce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ssd1306_PutPixel(x1, y1);
 80044d2:	f7ff bfa1 	b.w	8004418 <ssd1306_PutPixel>
	if (x2 - x1 > y2 - y1) {
 80044d6:	ebaa 0605 	sub.w	r6, sl, r5
 80044da:	eba8 0704 	sub.w	r7, r8, r4
 80044de:	42be      	cmp	r6, r7
 80044e0:	46ab      	mov	fp, r5
 80044e2:	46a1      	mov	r9, r4
 80044e4:	dc1a      	bgt.n	800451c <ssd1306_DrawDottedLine+0x62>
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
 80044e6:	4544      	cmp	r4, r8
 80044e8:	d81a      	bhi.n	8004520 <ssd1306_DrawDottedLine+0x66>
				ssd1306_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 80044ea:	eba4 0009 	sub.w	r0, r4, r9
 80044ee:	4370      	muls	r0, r6
 80044f0:	fb90 f0f7 	sdiv	r0, r0, r7
 80044f4:	4428      	add	r0, r5
 80044f6:	4621      	mov	r1, r4
 80044f8:	b2c0      	uxtb	r0, r0
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
 80044fa:	3402      	adds	r4, #2
				ssd1306_PutPixel(x1 + (x2 - x1) * (i - y1) / (y2 - y1), i);
 80044fc:	f7ff ff8c 	bl	8004418 <ssd1306_PutPixel>
			for (uint8_t i = y1; i < y2 + 1; i+=2) {
 8004500:	b2e4      	uxtb	r4, r4
 8004502:	e7f0      	b.n	80044e6 <ssd1306_DrawDottedLine+0x2c>
				ssd1306_PutPixel(i, y1 + (y2 - y1) * (i - x1) / (x2 - x1));
 8004504:	eba5 010b 	sub.w	r1, r5, fp
 8004508:	4379      	muls	r1, r7
 800450a:	fb91 f1f6 	sdiv	r1, r1, r6
 800450e:	4421      	add	r1, r4
 8004510:	4628      	mov	r0, r5
 8004512:	b2c9      	uxtb	r1, r1
 8004514:	f7ff ff80 	bl	8004418 <ssd1306_PutPixel>
			for (uint8_t i = x1; i < x2 + 1; i+=2) {
 8004518:	3502      	adds	r5, #2
 800451a:	b2ed      	uxtb	r5, r5
 800451c:	4555      	cmp	r5, sl
 800451e:	d9f1      	bls.n	8004504 <ssd1306_DrawDottedLine+0x4a>
}
 8004520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004524 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004524:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <HAL_MspInit+0x3c>)
{
 8004526:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	619a      	str	r2, [r3, #24]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	f002 0201 	and.w	r2, r2, #1
 8004536:	9200      	str	r2, [sp, #0]
 8004538:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800453a:	69da      	ldr	r2, [r3, #28]
 800453c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004540:	61da      	str	r2, [r3, #28]
 8004542:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004544:	4a07      	ldr	r2, [pc, #28]	; (8004564 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800454a:	9301      	str	r3, [sp, #4]
 800454c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800454e:	6853      	ldr	r3, [r2, #4]
 8004550:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800455a:	b002      	add	sp, #8
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40021000 	.word	0x40021000
 8004564:	40010000 	.word	0x40010000

08004568 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004568:	b510      	push	{r4, lr}
 800456a:	4604      	mov	r4, r0
 800456c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800456e:	2210      	movs	r2, #16
 8004570:	2100      	movs	r1, #0
 8004572:	a802      	add	r0, sp, #8
 8004574:	f003 fd7a 	bl	800806c <memset>
  if(hadc->Instance==ADC2)
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	4b10      	ldr	r3, [pc, #64]	; (80045bc <HAL_ADC_MspInit+0x54>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d11b      	bne.n	80045b8 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004580:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8004584:	699a      	ldr	r2, [r3, #24]
    /**ADC2 GPIO Configuration
    PA2     ------> ADC2_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004586:	480e      	ldr	r0, [pc, #56]	; (80045c0 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004588:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800458c:	619a      	str	r2, [r3, #24]
 800458e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004590:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004592:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004596:	9200      	str	r2, [sp, #0]
 8004598:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459a:	699a      	ldr	r2, [r3, #24]
 800459c:	f042 0204 	orr.w	r2, r2, #4
 80045a0:	619a      	str	r2, [r3, #24]
 80045a2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045a4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	9301      	str	r3, [sp, #4]
 80045ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b4:	f001 fc78 	bl	8005ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80045b8:	b006      	add	sp, #24
 80045ba:	bd10      	pop	{r4, pc}
 80045bc:	40012800 	.word	0x40012800
 80045c0:	40010800 	.word	0x40010800

080045c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045c4:	b510      	push	{r4, lr}
 80045c6:	4604      	mov	r4, r0
 80045c8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ca:	2210      	movs	r2, #16
 80045cc:	2100      	movs	r1, #0
 80045ce:	a802      	add	r0, sp, #8
 80045d0:	f003 fd4c 	bl	800806c <memset>
  if(hi2c->Instance==I2C1)
 80045d4:	6822      	ldr	r2, [r4, #0]
 80045d6:	4b11      	ldr	r3, [pc, #68]	; (800461c <HAL_I2C_MspInit+0x58>)
 80045d8:	429a      	cmp	r2, r3
 80045da:	d11c      	bne.n	8004616 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045dc:	4c10      	ldr	r4, [pc, #64]	; (8004620 <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045de:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e0:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e2:	4810      	ldr	r0, [pc, #64]	; (8004624 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045e4:	f043 0308 	orr.w	r3, r3, #8
 80045e8:	61a3      	str	r3, [r4, #24]
 80045ea:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ec:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045f6:	2312      	movs	r3, #18
 80045f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045fc:	2303      	movs	r3, #3
 80045fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004600:	f001 fc52 	bl	8005ea8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004604:	69e3      	ldr	r3, [r4, #28]
 8004606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800460a:	61e3      	str	r3, [r4, #28]
 800460c:	69e3      	ldr	r3, [r4, #28]
 800460e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004612:	9301      	str	r3, [sp, #4]
 8004614:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004616:	b006      	add	sp, #24
 8004618:	bd10      	pop	{r4, pc}
 800461a:	bf00      	nop
 800461c:	40005400 	.word	0x40005400
 8004620:	40021000 	.word	0x40021000
 8004624:	40010c00 	.word	0x40010c00

08004628 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004628:	2210      	movs	r2, #16
{
 800462a:	b510      	push	{r4, lr}
 800462c:	4604      	mov	r4, r0
 800462e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004630:	eb0d 0002 	add.w	r0, sp, r2
 8004634:	2100      	movs	r1, #0
 8004636:	f003 fd19 	bl	800806c <memset>
  if(hspi->Instance==SPI1)
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	4a25      	ldr	r2, [pc, #148]	; (80046d4 <HAL_SPI_MspInit+0xac>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d127      	bne.n	8004692 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004642:	4b25      	ldr	r3, [pc, #148]	; (80046d8 <HAL_SPI_MspInit+0xb0>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004644:	21a0      	movs	r1, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004646:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004648:	4824      	ldr	r0, [pc, #144]	; (80046dc <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800464a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800464e:	619a      	str	r2, [r3, #24]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004656:	9200      	str	r2, [sp, #0]
 8004658:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	f042 0204 	orr.w	r2, r2, #4
 8004660:	619a      	str	r2, [r3, #24]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 0304 	and.w	r3, r3, #4
 8004668:	9301      	str	r3, [sp, #4]
 800466a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800466c:	2302      	movs	r3, #2
 800466e:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004672:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004674:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004676:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004678:	f001 fc16 	bl	8005ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800467c:	2040      	movs	r0, #64	; 0x40
 800467e:	2300      	movs	r3, #0
 8004680:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004684:	4815      	ldr	r0, [pc, #84]	; (80046dc <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004686:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004688:	a904      	add	r1, sp, #16
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800468a:	f001 fc0d 	bl	8005ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800468e:	b008      	add	sp, #32
 8004690:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <HAL_SPI_MspInit+0xb8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d1fa      	bne.n	800468e <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469a:	4812      	ldr	r0, [pc, #72]	; (80046e4 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800469c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469e:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 80046a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046a4:	61da      	str	r2, [r3, #28]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80046ac:	9202      	str	r2, [sp, #8]
 80046ae:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046b0:	699a      	ldr	r2, [r3, #24]
 80046b2:	f042 0208 	orr.w	r2, r2, #8
 80046b6:	619a      	str	r2, [r3, #24]
 80046b8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ba:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	9303      	str	r3, [sp, #12]
 80046c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c6:	2302      	movs	r3, #2
 80046c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046cc:	2303      	movs	r3, #3
 80046ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046d0:	e7db      	b.n	800468a <HAL_SPI_MspInit+0x62>
 80046d2:	bf00      	nop
 80046d4:	40013000 	.word	0x40013000
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40010800 	.word	0x40010800
 80046e0:	40003800 	.word	0x40003800
 80046e4:	40010c00 	.word	0x40010c00

080046e8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80046e8:	6803      	ldr	r3, [r0, #0]
{
 80046ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_pwm->Instance==TIM2)
 80046ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80046f0:	4605      	mov	r5, r0
  if(htim_pwm->Instance==TIM2)
 80046f2:	d128      	bne.n	8004746 <HAL_TIM_PWM_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046f4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80046f8:	69da      	ldr	r2, [r3, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80046fa:	4c14      	ldr	r4, [pc, #80]	; (800474c <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046fc:	f042 0201 	orr.w	r2, r2, #1
 8004700:	61da      	str	r2, [r3, #28]
 8004702:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004704:	4a12      	ldr	r2, [pc, #72]	; (8004750 <HAL_TIM_PWM_MspInit+0x68>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800470e:	2310      	movs	r3, #16
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8004710:	2100      	movs	r1, #0
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004712:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8004716:	2380      	movs	r3, #128	; 0x80
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004718:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800471c:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004720:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8004724:	f04f 0c20 	mov.w	ip, #32
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004728:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 800472c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8004730:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8004732:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8004736:	f001 fa57 	bl	8005be8 <HAL_DMA_Init>
 800473a:	b108      	cbz	r0, 8004740 <HAL_TIM_PWM_MspInit+0x58>
    {
      Error_Handler();
 800473c:	f7ff fd6c 	bl	8004218 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8004740:	62ac      	str	r4, [r5, #40]	; 0x28
 8004742:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8004744:	632c      	str	r4, [r5, #48]	; 0x30
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004746:	b003      	add	sp, #12
 8004748:	bd30      	pop	{r4, r5, pc}
 800474a:	bf00      	nop
 800474c:	20000b88 	.word	0x20000b88
 8004750:	40020080 	.word	0x40020080

08004754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004754:	b510      	push	{r4, lr}
 8004756:	4604      	mov	r4, r0
 8004758:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475a:	2210      	movs	r2, #16
 800475c:	2100      	movs	r1, #0
 800475e:	a802      	add	r0, sp, #8
 8004760:	f003 fc84 	bl	800806c <memset>
  if(htim->Instance==TIM2)
 8004764:	6823      	ldr	r3, [r4, #0]
 8004766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476a:	d112      	bne.n	8004792 <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800476c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8004770:	699a      	ldr	r2, [r3, #24]
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004772:	4809      	ldr	r0, [pc, #36]	; (8004798 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004774:	f042 0204 	orr.w	r2, r2, #4
 8004778:	619a      	str	r2, [r3, #24]
 800477a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800477c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004786:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004788:	e9cd 3302 	strd	r3, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478e:	f001 fb8b 	bl	8005ea8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004792:	b006      	add	sp, #24
 8004794:	bd10      	pop	{r4, pc}
 8004796:	bf00      	nop
 8004798:	40010800 	.word	0x40010800

0800479c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800479c:	b530      	push	{r4, r5, lr}
 800479e:	4604      	mov	r4, r0
 80047a0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a2:	2210      	movs	r2, #16
 80047a4:	2100      	movs	r1, #0
 80047a6:	a802      	add	r0, sp, #8
 80047a8:	f003 fc60 	bl	800806c <memset>
  if(huart->Instance==USART1)
 80047ac:	6822      	ldr	r2, [r4, #0]
 80047ae:	4b1b      	ldr	r3, [pc, #108]	; (800481c <HAL_UART_MspInit+0x80>)
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d130      	bne.n	8004816 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047b4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80047b8:	699a      	ldr	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ba:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 80047bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c0:	619a      	str	r2, [r3, #24]
 80047c2:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047c4:	4816      	ldr	r0, [pc, #88]	; (8004820 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80047c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80047ca:	9200      	str	r2, [sp, #0]
 80047cc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ce:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	f042 0204 	orr.w	r2, r2, #4
 80047d6:	619a      	str	r2, [r3, #24]
 80047d8:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047da:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047e8:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ec:	2303      	movs	r3, #3
 80047ee:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f0:	f001 fb5a 	bl	8005ea8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f8:	4809      	ldr	r0, [pc, #36]	; (8004820 <HAL_UART_MspInit+0x84>)
 80047fa:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047fc:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004800:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004802:	f001 fb51 	bl	8005ea8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8004806:	2025      	movs	r0, #37	; 0x25
 8004808:	4622      	mov	r2, r4
 800480a:	4629      	mov	r1, r5
 800480c:	f001 f996 	bl	8005b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004810:	2025      	movs	r0, #37	; 0x25
 8004812:	f001 f9c5 	bl	8005ba0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004816:	b007      	add	sp, #28
 8004818:	bd30      	pop	{r4, r5, pc}
 800481a:	bf00      	nop
 800481c:	40013800 	.word	0x40013800
 8004820:	40010800 	.word	0x40010800

08004824 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004824:	e7fe      	b.n	8004824 <NMI_Handler>

08004826 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004826:	e7fe      	b.n	8004826 <HardFault_Handler>

08004828 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004828:	e7fe      	b.n	8004828 <MemManage_Handler>

0800482a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800482a:	e7fe      	b.n	800482a <BusFault_Handler>

0800482c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800482c:	e7fe      	b.n	800482c <UsageFault_Handler>

0800482e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800482e:	4770      	bx	lr

08004830 <DebugMon_Handler>:
 8004830:	4770      	bx	lr

08004832 <PendSV_Handler>:
 8004832:	4770      	bx	lr

08004834 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004834:	f000 bf18 	b.w	8005668 <HAL_IncTick>

08004838 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004838:	2002      	movs	r0, #2
 800483a:	f001 bc1d 	b.w	8006078 <HAL_GPIO_EXTI_IRQHandler>

0800483e <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800483e:	2004      	movs	r0, #4
 8004840:	f001 bc1a 	b.w	8006078 <HAL_GPIO_EXTI_IRQHandler>

08004844 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8004844:	4801      	ldr	r0, [pc, #4]	; (800484c <DMA1_Channel7_IRQHandler+0x8>)
 8004846:	f001 ba9d 	b.w	8005d84 <HAL_DMA_IRQHandler>
 800484a:	bf00      	nop
 800484c:	20000b88 	.word	0x20000b88

08004850 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004850:	4801      	ldr	r0, [pc, #4]	; (8004858 <USART1_IRQHandler+0x8>)
 8004852:	f003 baa1 	b.w	8007d98 <HAL_UART_IRQHandler>
 8004856:	bf00      	nop
 8004858:	20000c38 	.word	0x20000c38

0800485c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800485c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800485e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004862:	f001 fc09 	bl	8006078 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800486a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800486e:	f001 bc03 	b.w	8006078 <HAL_GPIO_EXTI_IRQHandler>

08004872 <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 8004872:	460a      	mov	r2, r1
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 8004874:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
 8004878:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800487a:	f001 bbf7 	b.w	800606c <HAL_GPIO_WritePin>

0800487e <SX127X_Reset>:
}

__weak void SX127X_Reset(SX127X_t *module)
{
 800487e:	b510      	push	{r4, lr}
 8004880:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 8004882:	2101      	movs	r1, #1
 8004884:	f7ff fff5 	bl	8004872 <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 8004888:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 800488c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800488e:	2200      	movs	r2, #0
 8004890:	f001 fbec 	bl	800606c <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8004894:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8004898:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800489a:	2201      	movs	r2, #1

	SX127X_delayMicro(6000);
}
 800489c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 80048a0:	f001 bbe4 	b.w	800606c <HAL_GPIO_WritePin>

080048a4 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 80048a4:	b513      	push	{r0, r1, r4, lr}
 80048a6:	4604      	mov	r4, r0
 80048a8:	f88d 1007 	strb.w	r1, [sp, #7]
	SX127X_SetNSS(module, 0);
 80048ac:	2100      	movs	r1, #0
 80048ae:	f7ff ffe0 	bl	8004872 <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 80048b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048b6:	2201      	movs	r2, #1
 80048b8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80048ba:	f10d 0107 	add.w	r1, sp, #7
 80048be:	f002 fca1 	bl	8007204 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 80048c2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80048c4:	f002 fe3a 	bl	800753c <HAL_SPI_GetState>
 80048c8:	2801      	cmp	r0, #1
 80048ca:	d1fa      	bne.n	80048c2 <SX127X_SPICommand+0x1e>
		;
}
 80048cc:	b002      	add	sp, #8
 80048ce:	bd10      	pop	{r4, pc}

080048d0 <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
 80048d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t txByte = 0x00;
 80048d2:	2100      	movs	r1, #0
{
 80048d4:	4604      	mov	r4, r0
	uint8_t txByte = 0x00;
 80048d6:	f88d 100e 	strb.w	r1, [sp, #14]
	uint8_t rxByte = 0x00;
 80048da:	f88d 100f 	strb.w	r1, [sp, #15]

	SX127X_SetNSS(module, 0);
 80048de:	f7ff ffc8 	bl	8004872 <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 80048e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048e6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	f10d 020f 	add.w	r2, sp, #15
 80048ee:	2301      	movs	r3, #1
 80048f0:	f10d 010e 	add.w	r1, sp, #14
 80048f4:	f002 fd33 	bl	800735e <HAL_SPI_TransmitReceive>
	return rxByte;
}
 80048f8:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80048fc:	b004      	add	sp, #16
 80048fe:	bd10      	pop	{r4, pc}

08004900 <SX127X_SPIRead>:
//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX127X_SPIRead(SX127X_t *module, uint8_t addr)
{
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	4604      	mov	r4, r0
	uint8_t tmp;
	SX127X_SPICommand(module, addr);
 8004904:	f7ff ffce 	bl	80048a4 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 8004908:	4620      	mov	r0, r4
 800490a:	f7ff ffe1 	bl	80048d0 <SX127X_SPIReadByte>
 800490e:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 8004910:	2101      	movs	r1, #1
 8004912:	4620      	mov	r0, r4
 8004914:	f7ff ffad 	bl	8004872 <SX127X_SetNSS>
	return tmp;
}
 8004918:	4628      	mov	r0, r5
 800491a:	bd38      	pop	{r3, r4, r5, pc}

0800491c <SX127X_SPIWrite>:

void SX127X_SPIWrite(SX127X_t *module, uint8_t addr, uint8_t cmd)
{
 800491c:	b570      	push	{r4, r5, r6, lr}
 800491e:	4604      	mov	r4, r0
 8004920:	460e      	mov	r6, r1
 8004922:	4615      	mov	r5, r2
	SX127X_SetNSS(module, 0);
 8004924:	2100      	movs	r1, #0
 8004926:	f7ff ffa4 	bl	8004872 <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 800492a:	4620      	mov	r0, r4
 800492c:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 8004930:	f7ff ffb8 	bl	80048a4 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 8004934:	4629      	mov	r1, r5
 8004936:	4620      	mov	r0, r4
 8004938:	f7ff ffb4 	bl	80048a4 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 800493c:	2101      	movs	r1, #1
 800493e:	4620      	mov	r0, r4
 8004940:	f7ff ff97 	bl	8004872 <SX127X_SetNSS>
}
 8004944:	bd70      	pop	{r4, r5, r6, pc}

08004946 <SX127X_SPIBurstRead>:

void SX127X_SPIBurstRead(SX127X_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length)
{
	uint8_t i;
	if (length <= 1)
 8004946:	2b01      	cmp	r3, #1
{
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	4606      	mov	r6, r0
 800494c:	460f      	mov	r7, r1
 800494e:	4615      	mov	r5, r2
 8004950:	461c      	mov	r4, r3
	if (length <= 1)
 8004952:	d915      	bls.n	8004980 <SX127X_SPIBurstRead+0x3a>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 8004954:	2100      	movs	r1, #0
 8004956:	f7ff ff8c 	bl	8004872 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 800495a:	4639      	mov	r1, r7
 800495c:	4630      	mov	r0, r6
 800495e:	f7ff ffa1 	bl	80048a4 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 8004962:	3c01      	subs	r4, #1
 8004964:	b2e4      	uxtb	r4, r4
 8004966:	1e6f      	subs	r7, r5, #1
 8004968:	442c      	add	r4, r5
		{
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 800496a:	4630      	mov	r0, r6
 800496c:	f7ff ffb0 	bl	80048d0 <SX127X_SPIReadByte>
 8004970:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++)
 8004974:	42a7      	cmp	r7, r4
 8004976:	d1f8      	bne.n	800496a <SX127X_SPIBurstRead+0x24>
		}
		SX127X_SetNSS(module, 1);
 8004978:	2101      	movs	r1, #1
 800497a:	4630      	mov	r0, r6
 800497c:	f7ff ff79 	bl	8004872 <SX127X_SetNSS>
	}
}
 8004980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004982 <SX127X_SPIBurstWrite>:

void SX127X_SPIBurstWrite(SX127X_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length)
{
	unsigned char i;
	if (length <= 1)
 8004982:	2b01      	cmp	r3, #1
{
 8004984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004986:	4606      	mov	r6, r0
 8004988:	460f      	mov	r7, r1
 800498a:	4615      	mov	r5, r2
 800498c:	461c      	mov	r4, r3
	if (length <= 1)
 800498e:	d916      	bls.n	80049be <SX127X_SPIBurstWrite+0x3c>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 8004990:	2100      	movs	r1, #0
 8004992:	f7ff ff6e 	bl	8004872 <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 8004996:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 800499a:	4630      	mov	r0, r6
 800499c:	f7ff ff82 	bl	80048a4 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 80049a0:	3c01      	subs	r4, #1
 80049a2:	b2e4      	uxtb	r4, r4
 80049a4:	1e6f      	subs	r7, r5, #1
 80049a6:	442c      	add	r4, r5
		{
			SX127X_SPICommand(module, *(txBuf + i));
 80049a8:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80049ac:	4630      	mov	r0, r6
 80049ae:	f7ff ff79 	bl	80048a4 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 80049b2:	42a7      	cmp	r7, r4
 80049b4:	d1f8      	bne.n	80049a8 <SX127X_SPIBurstWrite+0x26>
		}
		SX127X_SetNSS(module, 1);
 80049b6:	2101      	movs	r1, #1
 80049b8:	4630      	mov	r0, r6
 80049ba:	f7ff ff5a 	bl	8004872 <SX127X_SetNSS>
	}
}
 80049be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080049c0 <SX127X_defaultConfig>:
	module->cr = SX127X_CR_4_8;
	module->crcEnable = 1;
	module->frequency = SX127X_FREQ_DEFAULT;
	module->implicitHeader = 1;
	module->len = 3;
	module->power = SX127X_POWER_20DBM;
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <SX127X_defaultConfig+0x18>)
 80049c2:	4a06      	ldr	r2, [pc, #24]	; (80049dc <SX127X_defaultConfig+0x1c>)
 80049c4:	e9c0 2300 	strd	r2, r3, [r0]
	module->len = 3;
 80049c8:	f240 1303 	movw	r3, #259	; 0x103
 80049cc:	8103      	strh	r3, [r0, #8]
	module->implicitHeader = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	7283      	strb	r3, [r0, #10]
	module->preamble = 5;
 80049d2:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <SX127X_defaultConfig+0x20>)
 80049d4:	60c3      	str	r3, [r0, #12]
	module->sf = SX127X_LORA_SF_12;
	module->syncWord = 0x1;
	module->alwaysRX = 1;
}
 80049d6:	4770      	bx	lr
 80049d8:	04070c14 	.word	0x04070c14
 80049dc:	00d94024 	.word	0x00d94024
 80049e0:	01010005 	.word	0x01010005

080049e4 <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi)
{
 80049e4:	b082      	sub	sp, #8
 80049e6:	b513      	push	{r0, r1, r4, lr}
 80049e8:	4604      	mov	r4, r0
 80049ea:	4668      	mov	r0, sp
 80049ec:	e880 0006 	stmia.w	r0, {r1, r2}
 80049f0:	9305      	str	r3, [sp, #20]
	module->reset = reset;
 80049f2:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80049f6:	c803      	ldmia	r0, {r0, r1}
 80049f8:	e883 0005 	stmia.w	r3, {r0, r2}
	module->nss = nss;
 80049fc:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8004a00:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8004a04:	e883 0003 	stmia.w	r3, {r0, r1}
	module->spi = hspi;
 8004a08:	9b07      	ldr	r3, [sp, #28]
 8004a0a:	6763      	str	r3, [r4, #116]	; 0x74
}
 8004a0c:	b002      	add	sp, #8
 8004a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a12:	b002      	add	sp, #8
 8004a14:	4770      	bx	lr
	...

08004a18 <SX127X_standby>:

void SX127X_standby(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004a18:	6802      	ldr	r2, [r0, #0]
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <SX127X_standby+0x1c>)
{
 8004a1c:	b510      	push	{r4, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004a1e:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x89);
 8004a20:	bf94      	ite	ls
 8004a22:	2289      	movls	r2, #137	; 0x89
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8004a24:	2281      	movhi	r2, #129	; 0x81
 8004a26:	2101      	movs	r1, #1
{
 8004a28:	4604      	mov	r4, r0
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 8004a2a:	f7ff ff77 	bl	800491c <SX127X_SPIWrite>
	module->status = STANDBY;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	7423      	strb	r3, [r4, #16]
}
 8004a32:	bd10      	pop	{r4, pc}
 8004a34:	00834015 	.word	0x00834015

08004a38 <SX127X_sleep>:

void SX127X_sleep(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004a38:	6802      	ldr	r2, [r0, #0]
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <SX127X_sleep+0x1c>)
{
 8004a3c:	b510      	push	{r4, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004a3e:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
 8004a40:	bf94      	ite	ls
 8004a42:	2288      	movls	r2, #136	; 0x88
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004a44:	2280      	movhi	r2, #128	; 0x80
 8004a46:	2101      	movs	r1, #1
{
 8004a48:	4604      	mov	r4, r0
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004a4a:	f7ff ff67 	bl	800491c <SX127X_SPIWrite>
	module->status = SLEEP;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	7423      	strb	r3, [r4, #16]
}
 8004a52:	bd10      	pop	{r4, pc}
 8004a54:	00834015 	.word	0x00834015

08004a58 <SX127X_config>:
{
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	4604      	mov	r4, r0
	SX127X_sleep(module); //Change modem mode Must in Sleep mode
 8004a5c:	f7ff ffec 	bl	8004a38 <SX127X_sleep>
	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 8004a60:	2106      	movs	r1, #6
 8004a62:	4620      	mov	r0, r4
 8004a64:	78a2      	ldrb	r2, [r4, #2]
 8004a66:	f7ff ff59 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8004a6a:	2107      	movs	r1, #7
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	7862      	ldrb	r2, [r4, #1]
 8004a70:	f7ff ff54 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 8004a74:	2108      	movs	r1, #8
 8004a76:	4620      	mov	r0, r4
 8004a78:	7822      	ldrb	r2, [r4, #0]
 8004a7a:	f7ff ff4f 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 8004a7e:	7922      	ldrb	r2, [r4, #4]
 8004a80:	2109      	movs	r1, #9
 8004a82:	3a05      	subs	r2, #5
 8004a84:	f062 020f 	orn	r2, r2, #15
 8004a88:	4620      	mov	r0, r4
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	f7ff ff46 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 8004a90:	2232      	movs	r2, #50	; 0x32
 8004a92:	210b      	movs	r1, #11
 8004a94:	4620      	mov	r0, r4
 8004a96:	f7ff ff41 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 8004a9a:	2223      	movs	r2, #35	; 0x23
 8004a9c:	210c      	movs	r1, #12
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff ff3c 	bl	800491c <SX127X_SPIWrite>
			(module->cr << 1)) +         //Coding rate
 8004aa4:	79e2      	ldrb	r2, [r4, #7]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004aa6:	79a3      	ldrb	r3, [r4, #6]
			(module->cr << 1)) +         //Coding rate
 8004aa8:	0052      	lsls	r2, r2, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004aaa:	eb02 1203 	add.w	r2, r2, r3, lsl #4
			(module->implicitHeader & 1)); //Implicit header flag
 8004aae:	7aa3      	ldrb	r3, [r4, #10]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004ab0:	211d      	movs	r1, #29
			(module->implicitHeader & 1)); //Implicit header flag
 8004ab2:	f003 0301 	and.w	r3, r3, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004ab6:	441a      	add	r2, r3
 8004ab8:	4620      	mov	r0, r4
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	f7ff ff2e 	bl	800491c <SX127X_SPIWrite>
			(module->crcEnable << 2) +     //CRC enable flag
 8004ac0:	7a62      	ldrb	r2, [r4, #9]
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8004ac2:	7963      	ldrb	r3, [r4, #5]
			(module->crcEnable << 2) +     //CRC enable flag
 8004ac4:	0092      	lsls	r2, r2, #2
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8004ac6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004aca:	3203      	adds	r2, #3
 8004acc:	211e      	movs	r1, #30
 8004ace:	4620      	mov	r0, r4
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	f7ff ff23 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 8004ad6:	22ff      	movs	r2, #255	; 0xff
 8004ad8:	211f      	movs	r1, #31
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7ff ff1e 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 8004ae0:	89a2      	ldrh	r2, [r4, #12]
 8004ae2:	2120      	movs	r1, #32
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	0a12      	lsrs	r2, r2, #8
 8004ae8:	f7ff ff18 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 8004aec:	2121      	movs	r1, #33	; 0x21
 8004aee:	4620      	mov	r0, r4
 8004af0:	7b22      	ldrb	r2, [r4, #12]
 8004af2:	f7ff ff13 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 8004af6:	2122      	movs	r1, #34	; 0x22
 8004af8:	4620      	mov	r0, r4
 8004afa:	7a22      	ldrb	r2, [r4, #8]
 8004afc:	f7ff ff0e 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 8004b00:	2139      	movs	r1, #57	; 0x39
 8004b02:	4620      	mov	r0, r4
 8004b04:	7ba2      	ldrb	r2, [r4, #14]
 8004b06:	f7ff ff09 	bl	800491c <SX127X_SPIWrite>
	module->readBytes = 0;
 8004b0a:	2300      	movs	r3, #0
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004b0c:	2142      	movs	r1, #66	; 0x42
	module->readBytes = 0;
 8004b0e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004b12:	4620      	mov	r0, r4
 8004b14:	f7ff fef4 	bl	8004900 <SX127X_SPIRead>
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8004b18:	79a3      	ldrb	r3, [r4, #6]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004b1a:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	d123      	bne.n	8004b6a <SX127X_config+0x112>
 8004b22:	2812      	cmp	r0, #18
 8004b24:	d121      	bne.n	8004b6a <SX127X_config+0x112>
				&& module->frequency < SX127X_FREQ_1020MHZ)
 8004b26:	6823      	ldr	r3, [r4, #0]
		if (module->frequency > SX127X_FREQ_820MHZ
 8004b28:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <SX127X_config+0x11c>)
				&& module->frequency < SX127X_FREQ_1020MHZ)
 8004b2a:	f5a3 034d 	sub.w	r3, r3, #13434880	; 0xcd0000
 8004b2e:	3b23      	subs	r3, #35	; 0x23
		if (module->frequency > SX127X_FREQ_820MHZ
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d809      	bhi.n	8004b48 <SX127X_config+0xf0>
			SX127X_SPIWrite(module, 0x36, 0x2);
 8004b34:	2202      	movs	r2, #2
 8004b36:	2136      	movs	r1, #54	; 0x36
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f7ff feef 	bl	800491c <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x64);
 8004b3e:	2264      	movs	r2, #100	; 0x64
 8004b40:	213a      	movs	r1, #58	; 0x3a
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7ff feea 	bl	800491c <SX127X_SPIWrite>
				&& module->frequency < SX127X_FREQ_525MHZ)
 8004b48:	6823      	ldr	r3, [r4, #0]
		if (module->frequency > SX127X_FREQ_410MHZ
 8004b4a:	4a0b      	ldr	r2, [pc, #44]	; (8004b78 <SX127X_config+0x120>)
				&& module->frequency < SX127X_FREQ_525MHZ)
 8004b4c:	f5a3 03cd 	sub.w	r3, r3, #6717440	; 0x668000
 8004b50:	3b12      	subs	r3, #18
		if (module->frequency > SX127X_FREQ_410MHZ
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d809      	bhi.n	8004b6a <SX127X_config+0x112>
			SX127X_SPIWrite(module, 0x36, 0x3);
 8004b56:	2203      	movs	r2, #3
 8004b58:	2136      	movs	r1, #54	; 0x36
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f7ff fede 	bl	800491c <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x7F);
 8004b60:	227f      	movs	r2, #127	; 0x7f
 8004b62:	213a      	movs	r1, #58	; 0x3a
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7ff fed9 	bl	800491c <SX127X_SPIWrite>
	SX127X_standby(module); //Entry standby mode
 8004b6a:	4620      	mov	r0, r4
}
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SX127X_standby(module); //Entry standby mode
 8004b70:	f7ff bf52 	b.w	8004a18 <SX127X_standby>
 8004b74:	00320006 	.word	0x00320006
 8004b78:	001cc003 	.word	0x001cc003

08004b7c <SX127X_clearIrq>:

void SX127X_clearIrq(SX127X_t *module)
{
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8004b7c:	22ff      	movs	r2, #255	; 0xff
 8004b7e:	2112      	movs	r1, #18
 8004b80:	f7ff becc 	b.w	800491c <SX127X_SPIWrite>

08004b84 <SX127X_startRx>:
}

int SX127X_startRx(SX127X_t *module, uint32_t timeout)
{
 8004b84:	b538      	push	{r3, r4, r5, lr}
 8004b86:	4604      	mov	r4, r0
 8004b88:	460d      	mov	r5, r1
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8004b8a:	f7ff ff65 	bl	8004a58 <SX127X_config>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8004b8e:	2284      	movs	r2, #132	; 0x84
 8004b90:	214d      	movs	r1, #77	; 0x4d
 8004b92:	4620      	mov	r0, r4
 8004b94:	f7ff fec2 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2124      	movs	r1, #36	; 0x24
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7ff febd 	bl	800491c <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f7ff ffea 	bl	8004b7c <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8004ba8:	7a22      	ldrb	r2, [r4, #8]
 8004baa:	2122      	movs	r1, #34	; 0x22
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff feb5 	bl	800491c <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004bb2:	210f      	movs	r1, #15
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff fea3 	bl	8004900 <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004bba:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004bbc:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f7ff feac 	bl	800491c <SX127X_SPIWrite>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <SX127X_startRx+0x8c>)
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8004bc8:	2101      	movs	r1, #1
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004bca:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
 8004bcc:	bf94      	ite	ls
 8004bce:	228d      	movls	r2, #141	; 0x8d
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8004bd0:	2285      	movhi	r2, #133	; 0x85
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f7ff fea2 	bl	800491c <SX127X_SPIWrite>
	module->readBytes = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	while (1)
	{
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
 8004bde:	2118      	movs	r1, #24
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7ff fe8d 	bl	8004900 <SX127X_SPIRead>
		if (status & 0x04)
 8004be6:	0743      	lsls	r3, r0, #29
 8004be8:	d503      	bpl.n	8004bf2 <SX127X_startRx+0x6e>
		{	//Rx-on going RegModemStat
			module->status = RX;
 8004bea:	2304      	movs	r3, #4
			return 1;
 8004bec:	2001      	movs	r0, #1
			module->status = RX;
 8004bee:	7423      	strb	r3, [r4, #16]
			return 0;
		}

		HAL_Delay(1);
	}
}
 8004bf0:	bd38      	pop	{r3, r4, r5, pc}
		if (--timeout == 0)
 8004bf2:	3d01      	subs	r5, #1
 8004bf4:	d107      	bne.n	8004c06 <SX127X_startRx+0x82>
			SX127X_Reset(module);
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f7ff fe41 	bl	800487e <SX127X_Reset>
			SX127X_config(module);
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	f7ff ff2b 	bl	8004a58 <SX127X_config>
			return 0;
 8004c02:	4628      	mov	r0, r5
 8004c04:	e7f4      	b.n	8004bf0 <SX127X_startRx+0x6c>
		HAL_Delay(1);
 8004c06:	2001      	movs	r0, #1
 8004c08:	f000 fd40 	bl	800568c <HAL_Delay>
	{
 8004c0c:	e7e7      	b.n	8004bde <SX127X_startRx+0x5a>
 8004c0e:	bf00      	nop
 8004c10:	00834015 	.word	0x00834015

08004c14 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module)
{
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 8004c18:	f100 061d 	add.w	r6, r0, #29
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4630      	mov	r0, r6
 8004c22:	f003 fa23 	bl	800806c <memset>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8004c26:	2110      	movs	r1, #16
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7ff fe69 	bl	8004900 <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004c2e:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8004c30:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff fe72 	bl	800491c <SX127X_SPIWrite>
	if (module->sf == SX127X_LORA_SF_6)
 8004c38:	7963      	ldrb	r3, [r4, #5]
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d10a      	bne.n	8004c54 <SX127X_receive+0x40>
		packet_size = module->len;
 8004c3e:	7a25      	ldrb	r5, [r4, #8]
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 8004c40:	4620      	mov	r0, r4
 8004c42:	462b      	mov	r3, r5
 8004c44:	4632      	mov	r2, r6
 8004c46:	2100      	movs	r1, #0
 8004c48:	f7ff fe7d 	bl	8004946 <SX127X_SPIBurstRead>
	module->readBytes = packet_size;
	return module->readBytes;
}
 8004c4c:	4628      	mov	r0, r5
	module->readBytes = packet_size;
 8004c4e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
}
 8004c52:	bd70      	pop	{r4, r5, r6, pc}
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004c54:	2113      	movs	r1, #19
 8004c56:	4620      	mov	r0, r4
 8004c58:	f7ff fe52 	bl	8004900 <SX127X_SPIRead>
 8004c5c:	4605      	mov	r5, r0
 8004c5e:	e7ef      	b.n	8004c40 <SX127X_receive+0x2c>

08004c60 <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module)
{
 8004c60:	b510      	push	{r4, lr}
 8004c62:	4604      	mov	r4, r0
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8004c64:	f7ff fef8 	bl	8004a58 <SX127X_config>
	module->status = TX;
 8004c68:	2303      	movs	r3, #3
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004c6a:	2287      	movs	r2, #135	; 0x87
	module->status = TX;
 8004c6c:	7423      	strb	r3, [r4, #16]
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004c6e:	214d      	movs	r1, #77	; 0x4d
 8004c70:	4620      	mov	r0, r4
 8004c72:	f7ff fe53 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8004c76:	2200      	movs	r2, #0
 8004c78:	2124      	movs	r1, #36	; 0x24
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f7ff fe4e 	bl	800491c <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7ff ff7b 	bl	8004b7c <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8004c86:	7a22      	ldrb	r2, [r4, #8]
 8004c88:	2122      	movs	r1, #34	; 0x22
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f7ff fe46 	bl	800491c <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004c90:	210e      	movs	r1, #14
 8004c92:	4620      	mov	r0, r4
 8004c94:	f7ff fe34 	bl	8004900 <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004c98:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004c9a:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff fe3d 	bl	800491c <SX127X_SPIWrite>
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	7a23      	ldrb	r3, [r4, #8]
 8004ca6:	f104 023d 	add.w	r2, r4, #61	; 0x3d
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff fe69 	bl	8004982 <SX127X_SPIBurstWrite>
	module->lastTransTick = HAL_GetTick();
 8004cb0:	f000 fce6 	bl	8005680 <HAL_GetTick>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004cb4:	6822      	ldr	r2, [r4, #0]
 8004cb6:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <SX127X_startTransmission+0x70>)
	module->lastTransTick = HAL_GetTick();
 8004cb8:	6160      	str	r0, [r4, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004cba:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8004cbc:	bf94      	ite	ls
 8004cbe:	228b      	movls	r2, #139	; 0x8b
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 8004cc0:	2283      	movhi	r2, #131	; 0x83
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff fe29 	bl	800491c <SX127X_SPIWrite>
	module->TXrequest = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	7463      	strb	r3, [r4, #17]

}
 8004cce:	bd10      	pop	{r4, pc}
 8004cd0:	00834015 	.word	0x00834015

08004cd4 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght)
{
 8004cd4:	4603      	mov	r3, r0
	if (module->TXrequest == 0 && module->status != TX)
 8004cd6:	7c40      	ldrb	r0, [r0, #17]
 8004cd8:	b930      	cbnz	r0, 8004ce8 <SX127X_transmitAsync+0x14>
 8004cda:	7c1a      	ldrb	r2, [r3, #16]
 8004cdc:	2a03      	cmp	r2, #3
 8004cde:	d003      	beq.n	8004ce8 <SX127X_transmitAsync+0x14>
	{
		module->len = lenght;
		module->TXrequest = 1;
 8004ce0:	2201      	movs	r2, #1
		module->len = lenght;
 8004ce2:	7219      	strb	r1, [r3, #8]
		module->TXrequest = 1;
 8004ce4:	745a      	strb	r2, [r3, #17]

		return HAL_OK;
 8004ce6:	4770      	bx	lr
	}
	else
		return HAL_ERROR;
 8004ce8:	2001      	movs	r0, #1
}
 8004cea:	4770      	bx	lr

08004cec <SX127X_RSSI>:
		module->status = UNINITIALISED;
	}
}

int16_t SX127X_RSSI(SX127X_t *module)
{
 8004cec:	b508      	push	{r3, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004cee:	6802      	ldr	r2, [r0, #0]
 8004cf0:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <SX127X_RSSI+0x20>)
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 164;
 8004cf2:	211b      	movs	r1, #27
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d804      	bhi.n	8004d02 <SX127X_RSSI+0x16>
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 164;
 8004cf8:	f7ff fe02 	bl	8004900 <SX127X_SPIRead>
 8004cfc:	38a4      	subs	r0, #164	; 0xa4
	else
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 157;
 8004cfe:	b200      	sxth	r0, r0
}
 8004d00:	bd08      	pop	{r3, pc}
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 157;
 8004d02:	f7ff fdfd 	bl	8004900 <SX127X_SPIRead>
 8004d06:	389d      	subs	r0, #157	; 0x9d
 8004d08:	e7f9      	b.n	8004cfe <SX127X_RSSI+0x12>
 8004d0a:	bf00      	nop
 8004d0c:	00834015 	.word	0x00834015

08004d10 <SX127X_RSSI_Pack>:

int16_t SX127X_RSSI_Pack(SX127X_t *module)
{
 8004d10:	b508      	push	{r3, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004d12:	6802      	ldr	r2, [r0, #0]
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <SX127X_RSSI_Pack+0x20>)
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 164;
 8004d16:	211a      	movs	r1, #26
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d804      	bhi.n	8004d26 <SX127X_RSSI_Pack+0x16>
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 164;
 8004d1c:	f7ff fdf0 	bl	8004900 <SX127X_SPIRead>
 8004d20:	38a4      	subs	r0, #164	; 0xa4
	else
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 157;
 8004d22:	b200      	sxth	r0, r0
}
 8004d24:	bd08      	pop	{r3, pc}
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 157;
 8004d26:	f7ff fdeb 	bl	8004900 <SX127X_SPIRead>
 8004d2a:	389d      	subs	r0, #157	; 0x9d
 8004d2c:	e7f9      	b.n	8004d22 <SX127X_RSSI_Pack+0x12>
 8004d2e:	bf00      	nop
 8004d30:	00834015 	.word	0x00834015

08004d34 <SX127X_readStatus>:
	else
		return -ret;
}

void SX127X_readStatus(SX127X_t *module)
{
 8004d34:	b510      	push	{r4, lr}
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8004d36:	2118      	movs	r1, #24
{
 8004d38:	4604      	mov	r4, r0
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 8004d3a:	f7ff fde1 	bl	8004900 <SX127X_SPIRead>
 8004d3e:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 8004d42:	f010 0001 	ands.w	r0, r0, #1
 8004d46:	d008      	beq.n	8004d5a <SX127X_readStatus+0x26>
	{
		module->signalDetected = true;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	7723      	strb	r3, [r4, #28]
		module->lastSignalTick = HAL_GetTick();
 8004d4c:	f000 fc98 	bl	8005680 <HAL_GetTick>
 8004d50:	61a0      	str	r0, [r4, #24]
		module->watchdogTick = HAL_GetTick();
 8004d52:	f000 fc95 	bl	8005680 <HAL_GetTick>
 8004d56:	67e0      	str	r0, [r4, #124]	; 0x7c
	}
	else
		module->signalDetected = false;
}
 8004d58:	bd10      	pop	{r4, pc}
		module->signalDetected = false;
 8004d5a:	7720      	strb	r0, [r4, #28]
}
 8004d5c:	e7fc      	b.n	8004d58 <SX127X_readStatus+0x24>

08004d5e <SX127X_readIrq>:

void SX127X_readIrq(SX127X_t *module)
{
 8004d5e:	b510      	push	{r4, lr}
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8004d60:	2112      	movs	r1, #18
{
 8004d62:	4604      	mov	r4, r0
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8004d64:	f7ff fdcc 	bl	8004900 <SX127X_SPIRead>
 8004d68:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 8004d6c:	bd10      	pop	{r4, pc}
	...

08004d70 <SX127X_Routine>:
{
 8004d70:	b510      	push	{r4, lr}
 8004d72:	4604      	mov	r4, r0
	SX127X_readStatus(module);
 8004d74:	f7ff ffde 	bl	8004d34 <SX127X_readStatus>
	SX127X_readIrq(module);
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7ff fff0 	bl	8004d5e <SX127X_readIrq>
	if (module->status == UNINITIALISED)
 8004d7e:	7c23      	ldrb	r3, [r4, #16]
 8004d80:	b92b      	cbnz	r3, 8004d8e <SX127X_Routine+0x1e>
		SX127X_Reset(module);
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7ff fd7b 	bl	800487e <SX127X_Reset>
		SX127X_config(module);
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff fe65 	bl	8004a58 <SX127X_config>
	if ((module->status == SLEEP || module->status == STANDBY)
 8004d8e:	7c23      	ldrb	r3, [r4, #16]
 8004d90:	3b01      	subs	r3, #1
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d806      	bhi.n	8004da4 <SX127X_Routine+0x34>
			&& module->alwaysRX)
 8004d96:	7be3      	ldrb	r3, [r4, #15]
 8004d98:	b123      	cbz	r3, 8004da4 <SX127X_Routine+0x34>
		SX127X_startRx(module, 1000);
 8004d9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f7ff fef0 	bl	8004b84 <SX127X_startRx>
	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 8004da4:	7c63      	ldrb	r3, [r4, #17]
 8004da6:	b133      	cbz	r3, 8004db6 <SX127X_Routine+0x46>
 8004da8:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8004dac:	07d8      	lsls	r0, r3, #31
 8004dae:	d402      	bmi.n	8004db6 <SX127X_Routine+0x46>
		SX127X_startTransmission(module);
 8004db0:	4620      	mov	r0, r4
 8004db2:	f7ff ff55 	bl	8004c60 <SX127X_startTransmission>
	SX127X_readIrq(module);
 8004db6:	4620      	mov	r0, r4
 8004db8:	f7ff ffd1 	bl	8004d5e <SX127X_readIrq>
	if (module->irq & IRQ_TX_DONE)
 8004dbc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004dc0:	0719      	lsls	r1, r3, #28
 8004dc2:	d506      	bpl.n	8004dd2 <SX127X_Routine+0x62>
		SX127X_clearIrq(module);
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	f7ff fed9 	bl	8004b7c <SX127X_clearIrq>
		SX127X_startRx(module, 100);
 8004dca:	2164      	movs	r1, #100	; 0x64
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f7ff fed9 	bl	8004b84 <SX127X_startRx>
	if (module->irq & IRQ_RX_DONE)
 8004dd2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004dd6:	065a      	lsls	r2, r3, #25
 8004dd8:	d509      	bpl.n	8004dee <SX127X_Routine+0x7e>
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8004dda:	f3c3 1340 	ubfx	r3, r3, #5, #1
		SX127X_receive(module);
 8004dde:	4620      	mov	r0, r4
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8004de0:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		SX127X_receive(module);
 8004de4:	f7ff ff16 	bl	8004c14 <SX127X_receive>
		SX127X_clearIrq(module);
 8004de8:	4620      	mov	r0, r4
 8004dea:	f7ff fec7 	bl	8004b7c <SX127X_clearIrq>
	if (((SX127X_SPIRead(module, 0x1D)) != (module->bw << 4 | module->cr << 1 | module->implicitHeader))
 8004dee:	211d      	movs	r1, #29
 8004df0:	4620      	mov	r0, r4
 8004df2:	f7ff fd85 	bl	8004900 <SX127X_SPIRead>
 8004df6:	79e3      	ldrb	r3, [r4, #7]
 8004df8:	79a2      	ldrb	r2, [r4, #6]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004e00:	7aa2      	ldrb	r2, [r4, #10]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	4298      	cmp	r0, r3
 8004e06:	d00a      	beq.n	8004e1e <SX127X_Routine+0xae>
		module->wdCounter++;
 8004e08:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
		module->watchdogTick = HAL_GetTick();
 8004e12:	f000 fc35 	bl	8005680 <HAL_GetTick>
		module->status = UNINITIALISED;
 8004e16:	2300      	movs	r3, #0
		module->watchdogTick = HAL_GetTick();
 8004e18:	67e0      	str	r0, [r4, #124]	; 0x7c
		module->status = UNINITIALISED;
 8004e1a:	7423      	strb	r3, [r4, #16]
}
 8004e1c:	bd10      	pop	{r4, pc}
			|| (HAL_GetTick() - module->watchdogTick > 120000)) //Watchdog
 8004e1e:	f000 fc2f 	bl	8005680 <HAL_GetTick>
 8004e22:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8004e24:	1ac0      	subs	r0, r0, r3
 8004e26:	4b02      	ldr	r3, [pc, #8]	; (8004e30 <SX127X_Routine+0xc0>)
 8004e28:	4298      	cmp	r0, r3
 8004e2a:	d8ed      	bhi.n	8004e08 <SX127X_Routine+0x98>
 8004e2c:	e7f6      	b.n	8004e1c <SX127X_Routine+0xac>
 8004e2e:	bf00      	nop
 8004e30:	0001d4c0 	.word	0x0001d4c0

08004e34 <SX127X_init>:
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module)
{
 8004e34:	b510      	push	{r4, lr}
 8004e36:	4604      	mov	r4, r0
	SX127X_Reset(module);
 8004e38:	f7ff fd21 	bl	800487e <SX127X_Reset>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004e3c:	2142      	movs	r1, #66	; 0x42
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f7ff fd5e 	bl	8004900 <SX127X_SPIRead>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004e44:	2142      	movs	r1, #66	; 0x42
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004e46:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f7ff fd58 	bl	8004900 <SX127X_SPIRead>
 8004e50:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8004e54:	bd10      	pop	{r4, pc}

08004e56 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e56:	b570      	push	{r4, r5, r6, lr}
 8004e58:	460e      	mov	r6, r1
 8004e5a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e5c:	2500      	movs	r5, #0
 8004e5e:	42a5      	cmp	r5, r4
 8004e60:	db01      	blt.n	8004e66 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8004e62:	4620      	mov	r0, r4
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004e66:	f3af 8000 	nop.w
 8004e6a:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e6c:	3501      	adds	r5, #1
 8004e6e:	e7f6      	b.n	8004e5e <_read+0x8>

08004e70 <_close>:
}

int _close(int file)
{
	return -1;
}
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	4770      	bx	lr

08004e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004e7a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004e7c:	604b      	str	r3, [r1, #4]
}
 8004e7e:	4770      	bx	lr

08004e80 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004e80:	2001      	movs	r0, #1
 8004e82:	4770      	bx	lr

08004e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004e84:	2000      	movs	r0, #0
 8004e86:	4770      	bx	lr

08004e88 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <_sbrk+0x30>)
{
 8004e8a:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8004e8c:	6819      	ldr	r1, [r3, #0]
{
 8004e8e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8004e90:	b909      	cbnz	r1, 8004e96 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8004e92:	490a      	ldr	r1, [pc, #40]	; (8004ebc <_sbrk+0x34>)
 8004e94:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	4909      	ldr	r1, [pc, #36]	; (8004ec0 <_sbrk+0x38>)
 8004e9a:	4c0a      	ldr	r4, [pc, #40]	; (8004ec4 <_sbrk+0x3c>)
 8004e9c:	4402      	add	r2, r0
 8004e9e:	1b09      	subs	r1, r1, r4
 8004ea0:	428a      	cmp	r2, r1
 8004ea2:	d906      	bls.n	8004eb2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004ea4:	f003 f8aa 	bl	8007ffc <__errno>
 8004ea8:	230c      	movs	r3, #12
 8004eaa:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004eac:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8004eb0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8004eb2:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8004eb4:	e7fc      	b.n	8004eb0 <_sbrk+0x28>
 8004eb6:	bf00      	nop
 8004eb8:	2000037c 	.word	0x2000037c
 8004ebc:	20002160 	.word	0x20002160
 8004ec0:	20005000 	.word	0x20005000
 8004ec4:	00000400 	.word	0x00000400

08004ec8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ec8:	4770      	bx	lr
	...

08004ecc <uartInit>:
uint8_t uartPos;
uint8_t len;
uint8_t nodeNum;

void uartInit() {
	HAL_UART_Receive_IT(&huart1, &uartIn, 1);
 8004ecc:	2201      	movs	r2, #1
 8004ece:	4902      	ldr	r1, [pc, #8]	; (8004ed8 <uartInit+0xc>)
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <uartInit+0x10>)
 8004ed2:	f003 b87a 	b.w	8007fca <HAL_UART_Receive_IT>
 8004ed6:	bf00      	nop
 8004ed8:	20000bd0 	.word	0x20000bd0
 8004edc:	20000c38 	.word	0x20000c38

08004ee0 <readByte>:
}

void readByte(void) {
 8004ee0:	b510      	push	{r4, lr}
	switch (uartIn) {
 8004ee2:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <readByte+0x44>)
 8004ee4:	7819      	ldrb	r1, [r3, #0]
 8004ee6:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <readByte+0x48>)
 8004ee8:	293c      	cmp	r1, #60	; 0x3c
 8004eea:	d00b      	beq.n	8004f04 <readByte+0x24>
 8004eec:	293e      	cmp	r1, #62	; 0x3e
 8004eee:	4c0f      	ldr	r4, [pc, #60]	; (8004f2c <readByte+0x4c>)
 8004ef0:	d00b      	beq.n	8004f0a <readByte+0x2a>
		flag.uartGotMessage = 1;
		uartPos = 0;
		break;

	default:
		uartRx[uartPos++] = uartIn;
 8004ef2:	7818      	ldrb	r0, [r3, #0]
 8004ef4:	1c42      	adds	r2, r0, #1
 8004ef6:	b2d2      	uxtb	r2, r2
		break;
	}
	if (uartPos > 126)
 8004ef8:	2a7e      	cmp	r2, #126	; 0x7e
		uartRx[uartPos++] = uartIn;
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	5421      	strb	r1, [r4, r0]
	if (uartPos > 126)
 8004efe:	d90f      	bls.n	8004f20 <readByte+0x40>
		uartPos = 126;
 8004f00:	227e      	movs	r2, #126	; 0x7e
 8004f02:	e000      	b.n	8004f06 <readByte+0x26>
		uartPos = 0;
 8004f04:	2200      	movs	r2, #0
		uartPos = 126;
 8004f06:	701a      	strb	r2, [r3, #0]
}
 8004f08:	e00a      	b.n	8004f20 <readByte+0x40>
		len = uartPos;
 8004f0a:	781a      	ldrb	r2, [r3, #0]
 8004f0c:	4908      	ldr	r1, [pc, #32]	; (8004f30 <readByte+0x50>)
		flag.uartGotMessage = 1;
 8004f0e:	4809      	ldr	r0, [pc, #36]	; (8004f34 <readByte+0x54>)
		len = uartPos;
 8004f10:	700a      	strb	r2, [r1, #0]
		uartRx[uartPos] = 0;
 8004f12:	2100      	movs	r1, #0
 8004f14:	54a1      	strb	r1, [r4, r2]
		flag.uartGotMessage = 1;
 8004f16:	7842      	ldrb	r2, [r0, #1]
		uartPos = 0;
 8004f18:	7019      	strb	r1, [r3, #0]
		flag.uartGotMessage = 1;
 8004f1a:	f042 0210 	orr.w	r2, r2, #16
 8004f1e:	7042      	strb	r2, [r0, #1]
}
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	bf00      	nop
 8004f24:	20000bd0 	.word	0x20000bd0
 8004f28:	200018a1 	.word	0x200018a1
 8004f2c:	200018a3 	.word	0x200018a3
 8004f30:	20001923 	.word	0x20001923
 8004f34:	20000b84 	.word	0x20000b84

08004f38 <uartReceiveHandler>:

void uartReceiveHandler() {
 8004f38:	b530      	push	{r4, r5, lr}
	char tempString[20];

	uint8_t l = len - 1;
 8004f3a:	4bbc      	ldr	r3, [pc, #752]	; (800522c <uartReceiveHandler+0x2f4>)
void uartReceiveHandler() {
 8004f3c:	b087      	sub	sp, #28
	uint8_t l = len - 1;
 8004f3e:	781c      	ldrb	r4, [r3, #0]
	uint8_t *ptr = uartRx + 1;

	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 8004f40:	f000 fb9e 	bl	8005680 <HAL_GetTick>
 8004f44:	4bba      	ldr	r3, [pc, #744]	; (8005230 <uartReceiveHandler+0x2f8>)
 8004f46:	4dbb      	ldr	r5, [pc, #748]	; (8005234 <uartReceiveHandler+0x2fc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
	uint8_t l = len - 1;
 8004f4a:	3c01      	subs	r4, #1
	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 8004f4c:	1ac0      	subs	r0, r0, r3
 8004f4e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
		switch (uartRx[0]) {
 8004f52:	782b      	ldrb	r3, [r5, #0]
	uint8_t l = len - 1;
 8004f54:	b2e4      	uxtb	r4, r4
	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 8004f56:	f240 8183 	bls.w	8005260 <uartReceiveHandler+0x328>
		switch (uartRx[0]) {
 8004f5a:	2b5a      	cmp	r3, #90	; 0x5a
 8004f5c:	d860      	bhi.n	8005020 <uartReceiveHandler+0xe8>
 8004f5e:	2b30      	cmp	r3, #48	; 0x30
 8004f60:	d803      	bhi.n	8004f6a <uartReceiveHandler+0x32>
			netHandler.connected = true;
			flag.lcdRefreshRequest = true;
			break;

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) "//Bad Format", 10, 100);
 8004f62:	2364      	movs	r3, #100	; 0x64
 8004f64:	220a      	movs	r2, #10
 8004f66:	49b4      	ldr	r1, [pc, #720]	; (8005238 <uartReceiveHandler+0x300>)
 8004f68:	e0d9      	b.n	800511e <uartReceiveHandler+0x1e6>
 8004f6a:	3b31      	subs	r3, #49	; 0x31
 8004f6c:	2b29      	cmp	r3, #41	; 0x29
 8004f6e:	d8f8      	bhi.n	8004f62 <uartReceiveHandler+0x2a>
 8004f70:	a201      	add	r2, pc, #4	; (adr r2, 8004f78 <uartReceiveHandler+0x40>)
 8004f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f76:	bf00      	nop
 8004f78:	0800508d 	.word	0x0800508d
 8004f7c:	0800509b 	.word	0x0800509b
 8004f80:	080050a9 	.word	0x080050a9
 8004f84:	080050b7 	.word	0x080050b7
 8004f88:	080050e3 	.word	0x080050e3
 8004f8c:	08004f63 	.word	0x08004f63
 8004f90:	08004f63 	.word	0x08004f63
 8004f94:	080050c7 	.word	0x080050c7
 8004f98:	080050d5 	.word	0x080050d5
 8004f9c:	08004f63 	.word	0x08004f63
 8004fa0:	08004f63 	.word	0x08004f63
 8004fa4:	08004f63 	.word	0x08004f63
 8004fa8:	08004f63 	.word	0x08004f63
 8004fac:	08004f63 	.word	0x08004f63
 8004fb0:	08004f63 	.word	0x08004f63
 8004fb4:	08004f63 	.word	0x08004f63
 8004fb8:	08004f63 	.word	0x08004f63
 8004fbc:	08004f63 	.word	0x08004f63
 8004fc0:	08005107 	.word	0x08005107
 8004fc4:	080051fb 	.word	0x080051fb
 8004fc8:	08004f63 	.word	0x08004f63
 8004fcc:	08004f63 	.word	0x08004f63
 8004fd0:	08004f63 	.word	0x08004f63
 8004fd4:	08004f63 	.word	0x08004f63
 8004fd8:	08005215 	.word	0x08005215
 8004fdc:	08004f63 	.word	0x08004f63
 8004fe0:	080051fb 	.word	0x080051fb
 8004fe4:	08004f63 	.word	0x08004f63
 8004fe8:	08004f63 	.word	0x08004f63
 8004fec:	080051fb 	.word	0x080051fb
 8004ff0:	08004f63 	.word	0x08004f63
 8004ff4:	08004f63 	.word	0x08004f63
 8004ff8:	08004f63 	.word	0x08004f63
 8004ffc:	080050fd 	.word	0x080050fd
 8005000:	080050f1 	.word	0x080050f1
 8005004:	08004f63 	.word	0x08004f63
 8005008:	08004f63 	.word	0x08004f63
 800500c:	08004f63 	.word	0x08004f63
 8005010:	08004f63 	.word	0x08004f63
 8005014:	08005169 	.word	0x08005169
 8005018:	08004f63 	.word	0x08004f63
 800501c:	0800514f 	.word	0x0800514f
		switch (uartRx[0]) {
 8005020:	3b65      	subs	r3, #101	; 0x65
 8005022:	b2da      	uxtb	r2, r3
 8005024:	2a15      	cmp	r2, #21
 8005026:	d89c      	bhi.n	8004f62 <uartReceiveHandler+0x2a>
 8005028:	2b15      	cmp	r3, #21
 800502a:	d89a      	bhi.n	8004f62 <uartReceiveHandler+0x2a>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <uartReceiveHandler+0xfc>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	080051cb 	.word	0x080051cb
 8005038:	08004f63 	.word	0x08004f63
 800503c:	08004f63 	.word	0x08004f63
 8005040:	080051fb 	.word	0x080051fb
 8005044:	08004f63 	.word	0x08004f63
 8005048:	08004f63 	.word	0x08004f63
 800504c:	08004f63 	.word	0x08004f63
 8005050:	08004f63 	.word	0x08004f63
 8005054:	08004f63 	.word	0x08004f63
 8005058:	08004f63 	.word	0x08004f63
 800505c:	0800519b 	.word	0x0800519b
 8005060:	08004f63 	.word	0x08004f63
 8005064:	08005127 	.word	0x08005127
 8005068:	08004f63 	.word	0x08004f63
 800506c:	08004f63 	.word	0x08004f63
 8005070:	08004f63 	.word	0x08004f63
 8005074:	08005187 	.word	0x08005187
 8005078:	08004f63 	.word	0x08004f63
 800507c:	0800513b 	.word	0x0800513b
 8005080:	08004f63 	.word	0x08004f63
 8005084:	080051af 	.word	0x080051af
 8005088:	08005171 	.word	0x08005171
			settings.realFrequency = DecToInt(ptr, l);
 800508c:	4621      	mov	r1, r4
 800508e:	486b      	ldr	r0, [pc, #428]	; (800523c <uartReceiveHandler+0x304>)
 8005090:	f7fb fe5e 	bl	8000d50 <DecToInt>
 8005094:	4b6a      	ldr	r3, [pc, #424]	; (8005240 <uartReceiveHandler+0x308>)
			break;
		}
	else {
		switch (uartRx[0]) {
		case UART_FREQUENCY:
			nodeSettings.realFrequency = DecToInt(ptr, l);
 8005096:	6018      	str	r0, [r3, #0]
			break;
 8005098:	e013      	b.n	80050c2 <uartReceiveHandler+0x18a>
			settings.sf = DecToInt(ptr, l);
 800509a:	4621      	mov	r1, r4
 800509c:	4867      	ldr	r0, [pc, #412]	; (800523c <uartReceiveHandler+0x304>)
 800509e:	f7fb fe57 	bl	8000d50 <DecToInt>
 80050a2:	4b67      	ldr	r3, [pc, #412]	; (8005240 <uartReceiveHandler+0x308>)
		case UART_BW:
			nodeSettings.bw = DecToInt(ptr, l);
			break;

		case UART_SYNCWORD:
			nodeSettings.sw = HexToInt(ptr, l);
 80050a4:	7398      	strb	r0, [r3, #14]
			break;
 80050a6:	e00c      	b.n	80050c2 <uartReceiveHandler+0x18a>
			settings.bw = DecToInt(ptr, l);
 80050a8:	4621      	mov	r1, r4
 80050aa:	4864      	ldr	r0, [pc, #400]	; (800523c <uartReceiveHandler+0x304>)
 80050ac:	f7fb fe50 	bl	8000d50 <DecToInt>
 80050b0:	4b63      	ldr	r3, [pc, #396]	; (8005240 <uartReceiveHandler+0x308>)
		case UART_CR:
			nodeSettings.cr = DecToInt(ptr, l);
			break;

		case UART_POWER:
			nodeSettings.power = DecToInt(ptr, l);
 80050b2:	73d8      	strb	r0, [r3, #15]
			break;
 80050b4:	e005      	b.n	80050c2 <uartReceiveHandler+0x18a>
			settings.syncWord = HexToInt(ptr, l);
 80050b6:	4621      	mov	r1, r4
 80050b8:	4860      	ldr	r0, [pc, #384]	; (800523c <uartReceiveHandler+0x304>)
 80050ba:	f7fb fe61 	bl	8000d80 <HexToInt>
 80050be:	4b60      	ldr	r3, [pc, #384]	; (8005240 <uartReceiveHandler+0x308>)
 80050c0:	7458      	strb	r0, [r3, #17]
		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
			break;
		}
	}
}
 80050c2:	b007      	add	sp, #28
 80050c4:	bd30      	pop	{r4, r5, pc}
			settings.preamble = DecToInt(ptr, l);
 80050c6:	4621      	mov	r1, r4
 80050c8:	485c      	ldr	r0, [pc, #368]	; (800523c <uartReceiveHandler+0x304>)
 80050ca:	f7fb fe41 	bl	8000d50 <DecToInt>
 80050ce:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <uartReceiveHandler+0x308>)
 80050d0:	8198      	strh	r0, [r3, #12]
			break;
 80050d2:	e7f6      	b.n	80050c2 <uartReceiveHandler+0x18a>
			settings.cr = DecToInt(ptr, l);
 80050d4:	4621      	mov	r1, r4
 80050d6:	4859      	ldr	r0, [pc, #356]	; (800523c <uartReceiveHandler+0x304>)
 80050d8:	f7fb fe3a 	bl	8000d50 <DecToInt>
 80050dc:	4b58      	ldr	r3, [pc, #352]	; (8005240 <uartReceiveHandler+0x308>)
			nodeSettings.useLed = DecToInt(ptr, l);
 80050de:	7418      	strb	r0, [r3, #16]
			break;
 80050e0:	e7ef      	b.n	80050c2 <uartReceiveHandler+0x18a>
			settings.power = DecToInt(ptr, l);
 80050e2:	4621      	mov	r1, r4
 80050e4:	4855      	ldr	r0, [pc, #340]	; (800523c <uartReceiveHandler+0x304>)
 80050e6:	f7fb fe33 	bl	8000d50 <DecToInt>
 80050ea:	4b55      	ldr	r3, [pc, #340]	; (8005240 <uartReceiveHandler+0x308>)
 80050ec:	7498      	strb	r0, [r3, #18]
			break;
 80050ee:	e7e8      	b.n	80050c2 <uartReceiveHandler+0x18a>
			flag.saveSettings = 1;
 80050f0:	4a54      	ldr	r2, [pc, #336]	; (8005244 <uartReceiveHandler+0x30c>)
 80050f2:	7853      	ldrb	r3, [r2, #1]
 80050f4:	f043 0301 	orr.w	r3, r3, #1
			flag.sendConfig = 1;
 80050f8:	7053      	strb	r3, [r2, #1]
			break;
 80050fa:	e7e2      	b.n	80050c2 <uartReceiveHandler+0x18a>
			flag.sendConfig = 1;
 80050fc:	4a51      	ldr	r2, [pc, #324]	; (8005244 <uartReceiveHandler+0x30c>)
 80050fe:	7853      	ldrb	r3, [r2, #1]
 8005100:	f043 0302 	orr.w	r3, r3, #2
 8005104:	e7f8      	b.n	80050f8 <uartReceiveHandler+0x1c0>
			sprintf(tempString, "<aBv%d>", version);
 8005106:	4b50      	ldr	r3, [pc, #320]	; (8005248 <uartReceiveHandler+0x310>)
 8005108:	4950      	ldr	r1, [pc, #320]	; (800524c <uartReceiveHandler+0x314>)
 800510a:	881a      	ldrh	r2, [r3, #0]
 800510c:	a801      	add	r0, sp, #4
 800510e:	f003 f843 	bl	8008198 <siprintf>
					strlen(tempString), 100);
 8005112:	a801      	add	r0, sp, #4
 8005114:	f7fb f81a 	bl	800014c <strlen>
			HAL_UART_Transmit(&huart1, (uint8_t*) tempString,
 8005118:	2364      	movs	r3, #100	; 0x64
 800511a:	b282      	uxth	r2, r0
 800511c:	a901      	add	r1, sp, #4
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
 800511e:	484c      	ldr	r0, [pc, #304]	; (8005250 <uartReceiveHandler+0x318>)
 8005120:	f002 fd88 	bl	8007c34 <HAL_UART_Transmit>
}
 8005124:	e7cd      	b.n	80050c2 <uartReceiveHandler+0x18a>
			settings.warningDelay = 1000 * DecToInt(ptr, l);
 8005126:	4621      	mov	r1, r4
 8005128:	4844      	ldr	r0, [pc, #272]	; (800523c <uartReceiveHandler+0x304>)
 800512a:	f7fb fe11 	bl	8000d50 <DecToInt>
 800512e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005132:	4343      	muls	r3, r0
 8005134:	4a42      	ldr	r2, [pc, #264]	; (8005240 <uartReceiveHandler+0x308>)
 8005136:	6053      	str	r3, [r2, #4]
			break;
 8005138:	e7c3      	b.n	80050c2 <uartReceiveHandler+0x18a>
			settings.superWarningDelay = 1000 * DecToInt(ptr, l);
 800513a:	4621      	mov	r1, r4
 800513c:	483f      	ldr	r0, [pc, #252]	; (800523c <uartReceiveHandler+0x304>)
 800513e:	f7fb fe07 	bl	8000d50 <DecToInt>
 8005142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005146:	4343      	muls	r3, r0
 8005148:	4a3d      	ldr	r2, [pc, #244]	; (8005240 <uartReceiveHandler+0x308>)
 800514a:	6093      	str	r3, [r2, #8]
			break;
 800514c:	e7b9      	b.n	80050c2 <uartReceiveHandler+0x18a>
			memset(settings.SSID, 0, sizeof(settings.SSID));
 800514e:	2210      	movs	r2, #16
 8005150:	2100      	movs	r1, #0
 8005152:	4840      	ldr	r0, [pc, #256]	; (8005254 <uartReceiveHandler+0x31c>)
 8005154:	f002 ff8a 	bl	800806c <memset>
			memcpy(settings.SSID, ptr, l);
 8005158:	4622      	mov	r2, r4
 800515a:	4938      	ldr	r1, [pc, #224]	; (800523c <uartReceiveHandler+0x304>)
 800515c:	483d      	ldr	r0, [pc, #244]	; (8005254 <uartReceiveHandler+0x31c>)
}
 800515e:	b007      	add	sp, #28
 8005160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			memcpy(settings.WiFiPass, ptr, l);
 8005164:	f002 bf74 	b.w	8008050 <memcpy>
 8005168:	4622      	mov	r2, r4
 800516a:	4934      	ldr	r1, [pc, #208]	; (800523c <uartReceiveHandler+0x304>)
 800516c:	483a      	ldr	r0, [pc, #232]	; (8005258 <uartReceiveHandler+0x320>)
 800516e:	e7f6      	b.n	800515e <uartReceiveHandler+0x226>
			netHandler.lastStatusCheck = HAL_GetTick();
 8005170:	f000 fa86 	bl	8005680 <HAL_GetTick>
			netHandler.plugged = true;
 8005174:	2201      	movs	r2, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8005176:	4b39      	ldr	r3, [pc, #228]	; (800525c <uartReceiveHandler+0x324>)
 8005178:	6118      	str	r0, [r3, #16]
			netHandler.plugged = true;
 800517a:	701a      	strb	r2, [r3, #0]
			flag.lcdRefreshRequest = true;
 800517c:	4a31      	ldr	r2, [pc, #196]	; (8005244 <uartReceiveHandler+0x30c>)
 800517e:	7853      	ldrb	r3, [r2, #1]
 8005180:	f043 0304 	orr.w	r3, r3, #4
 8005184:	e7b8      	b.n	80050f8 <uartReceiveHandler+0x1c0>
			netHandler.lastStatusCheck = HAL_GetTick();
 8005186:	f000 fa7b 	bl	8005680 <HAL_GetTick>
			netHandler.connected = ptr[0];
 800518a:	786b      	ldrb	r3, [r5, #1]
			netHandler.lastStatusCheck = HAL_GetTick();
 800518c:	4a33      	ldr	r2, [pc, #204]	; (800525c <uartReceiveHandler+0x324>)
			netHandler.connected = ptr[0];
 800518e:	3b00      	subs	r3, #0
 8005190:	bf18      	it	ne
 8005192:	2301      	movne	r3, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8005194:	6110      	str	r0, [r2, #16]
			netHandler.connected = ptr[0];
 8005196:	7093      	strb	r3, [r2, #2]
 8005198:	e7f0      	b.n	800517c <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 800519a:	f000 fa71 	bl	8005680 <HAL_GetTick>
			netHandler.online = ptr[0];
 800519e:	786b      	ldrb	r3, [r5, #1]
			netHandler.lastStatusCheck = HAL_GetTick();
 80051a0:	4a2e      	ldr	r2, [pc, #184]	; (800525c <uartReceiveHandler+0x324>)
			netHandler.online = ptr[0];
 80051a2:	3b00      	subs	r3, #0
 80051a4:	bf18      	it	ne
 80051a6:	2301      	movne	r3, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 80051a8:	6110      	str	r0, [r2, #16]
			netHandler.online = ptr[0];
 80051aa:	70d3      	strb	r3, [r2, #3]
			flag.lcdRefreshRequest = true;
 80051ac:	e7e6      	b.n	800517c <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 80051ae:	f000 fa67 	bl	8005680 <HAL_GetTick>
 80051b2:	4d2a      	ldr	r5, [pc, #168]	; (800525c <uartReceiveHandler+0x324>)
			netHandler.netCount = DecToInt(ptr, l);
 80051b4:	4621      	mov	r1, r4
			netHandler.lastStatusCheck = HAL_GetTick();
 80051b6:	6128      	str	r0, [r5, #16]
			netHandler.netCount = DecToInt(ptr, l);
 80051b8:	4820      	ldr	r0, [pc, #128]	; (800523c <uartReceiveHandler+0x304>)
 80051ba:	f7fb fdc9 	bl	8000d50 <DecToInt>
			netHandler.netRefreshInProgress = false;
 80051be:	f44f 7380 	mov.w	r3, #256	; 0x100
			netHandler.netCount = DecToInt(ptr, l);
 80051c2:	f885 0631 	strb.w	r0, [r5, #1585]	; 0x631
			netHandler.netRefreshInProgress = false;
 80051c6:	80eb      	strh	r3, [r5, #6]
			flag.lcdRefreshRequest = 1;
 80051c8:	e7d8      	b.n	800517c <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 80051ca:	f000 fa59 	bl	8005680 <HAL_GetTick>
 80051ce:	4b23      	ldr	r3, [pc, #140]	; (800525c <uartReceiveHandler+0x324>)
 80051d0:	6118      	str	r0, [r3, #16]
				while (i < 16) {
 80051d2:	461a      	mov	r2, r3
				int i = 0;
 80051d4:	2000      	movs	r0, #0
					if (netHandler.nets[i][0] == 0) {
 80051d6:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80051da:	b941      	cbnz	r1, 80051ee <uartReceiveHandler+0x2b6>
						sprintf(netHandler.nets[i], "%s", ptr);
 80051dc:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 80051e0:	4916      	ldr	r1, [pc, #88]	; (800523c <uartReceiveHandler+0x304>)
 80051e2:	3030      	adds	r0, #48	; 0x30
}
 80051e4:	b007      	add	sp, #28
 80051e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						sprintf(netHandler.nets[i], "%s", ptr);
 80051ea:	f002 bff5 	b.w	80081d8 <strcpy>
						i++;
 80051ee:	3001      	adds	r0, #1
				while (i < 16) {
 80051f0:	2810      	cmp	r0, #16
 80051f2:	f103 0320 	add.w	r3, r3, #32
 80051f6:	d1ee      	bne.n	80051d6 <uartReceiveHandler+0x29e>
 80051f8:	e763      	b.n	80050c2 <uartReceiveHandler+0x18a>
			netHandler.TX = false;
 80051fa:	2500      	movs	r5, #0
 80051fc:	4c17      	ldr	r4, [pc, #92]	; (800525c <uartReceiveHandler+0x324>)
 80051fe:	7165      	strb	r5, [r4, #5]
			netHandler.lastStatusCheck = HAL_GetTick();
 8005200:	f000 fa3e 	bl	8005680 <HAL_GetTick>
			sprintf(netHandler.response, "%s", ptr);
 8005204:	490d      	ldr	r1, [pc, #52]	; (800523c <uartReceiveHandler+0x304>)
			netHandler.lastStatusCheck = HAL_GetTick();
 8005206:	6120      	str	r0, [r4, #16]
			sprintf(netHandler.response, "%s", ptr);
 8005208:	f204 6032 	addw	r0, r4, #1586	; 0x632
 800520c:	f002 ffe4 	bl	80081d8 <strcpy>
			netHandler.TX = false;
 8005210:	7165      	strb	r5, [r4, #5]
			flag.lcdRefreshRequest = true;
 8005212:	e7b3      	b.n	800517c <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 8005214:	f000 fa34 	bl	8005680 <HAL_GetTick>
 8005218:	4c10      	ldr	r4, [pc, #64]	; (800525c <uartReceiveHandler+0x324>)
			sprintf(netHandler.ip, "%s", ptr);
 800521a:	4908      	ldr	r1, [pc, #32]	; (800523c <uartReceiveHandler+0x304>)
			netHandler.lastStatusCheck = HAL_GetTick();
 800521c:	6120      	str	r0, [r4, #16]
			sprintf(netHandler.ip, "%s", ptr);
 800521e:	f104 0014 	add.w	r0, r4, #20
 8005222:	f002 ffd9 	bl	80081d8 <strcpy>
			netHandler.connected = true;
 8005226:	2301      	movs	r3, #1
 8005228:	70a3      	strb	r3, [r4, #2]
			flag.lcdRefreshRequest = true;
 800522a:	e7a7      	b.n	800517c <uartReceiveHandler+0x244>
 800522c:	20001923 	.word	0x20001923
 8005230:	20000c9c 	.word	0x20000c9c
 8005234:	200018a3 	.word	0x200018a3
 8005238:	0800a5a1 	.word	0x0800a5a1
 800523c:	200018a4 	.word	0x200018a4
 8005240:	20000a80 	.word	0x20000a80
 8005244:	20000b84 	.word	0x20000b84
 8005248:	0800a244 	.word	0x0800a244
 800524c:	0800a599 	.word	0x0800a599
 8005250:	20000c38 	.word	0x20000c38
 8005254:	20000a93 	.word	0x20000a93
 8005258:	20000aa3 	.word	0x20000aa3
 800525c:	20001164 	.word	0x20001164
		switch (uartRx[0]) {
 8005260:	2b39      	cmp	r3, #57	; 0x39
 8005262:	d80b      	bhi.n	800527c <uartReceiveHandler+0x344>
 8005264:	2b30      	cmp	r3, #48	; 0x30
 8005266:	d90f      	bls.n	8005288 <uartReceiveHandler+0x350>
 8005268:	3b31      	subs	r3, #49	; 0x31
 800526a:	2b08      	cmp	r3, #8
 800526c:	d80c      	bhi.n	8005288 <uartReceiveHandler+0x350>
 800526e:	e8df f003 	tbb	[pc, r3]
 8005272:	150f      	.short	0x150f
 8005274:	0b37231c 	.word	0x0b37231c
 8005278:	290b      	.short	0x290b
 800527a:	30          	.byte	0x30
 800527b:	00          	.byte	0x00
 800527c:	2b69      	cmp	r3, #105	; 0x69
 800527e:	d042      	beq.n	8005306 <uartReceiveHandler+0x3ce>
 8005280:	2b6e      	cmp	r3, #110	; 0x6e
 8005282:	d033      	beq.n	80052ec <uartReceiveHandler+0x3b4>
 8005284:	2b4c      	cmp	r3, #76	; 0x4c
 8005286:	d038      	beq.n	80052fa <uartReceiveHandler+0x3c2>
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
 8005288:	2364      	movs	r3, #100	; 0x64
 800528a:	220a      	movs	r2, #10
 800528c:	4921      	ldr	r1, [pc, #132]	; (8005314 <uartReceiveHandler+0x3dc>)
 800528e:	e746      	b.n	800511e <uartReceiveHandler+0x1e6>
			nodeSettings.realFrequency = DecToInt(ptr, l);
 8005290:	4621      	mov	r1, r4
 8005292:	4821      	ldr	r0, [pc, #132]	; (8005318 <uartReceiveHandler+0x3e0>)
 8005294:	f7fb fd5c 	bl	8000d50 <DecToInt>
 8005298:	4b20      	ldr	r3, [pc, #128]	; (800531c <uartReceiveHandler+0x3e4>)
 800529a:	e6fc      	b.n	8005096 <uartReceiveHandler+0x15e>
			nodeSettings.sf = DecToInt(ptr, l);
 800529c:	4621      	mov	r1, r4
 800529e:	481e      	ldr	r0, [pc, #120]	; (8005318 <uartReceiveHandler+0x3e0>)
 80052a0:	f7fb fd56 	bl	8000d50 <DecToInt>
 80052a4:	4b1d      	ldr	r3, [pc, #116]	; (800531c <uartReceiveHandler+0x3e4>)
 80052a6:	7318      	strb	r0, [r3, #12]
			break;
 80052a8:	e70b      	b.n	80050c2 <uartReceiveHandler+0x18a>
			nodeSettings.bw = DecToInt(ptr, l);
 80052aa:	4621      	mov	r1, r4
 80052ac:	481a      	ldr	r0, [pc, #104]	; (8005318 <uartReceiveHandler+0x3e0>)
 80052ae:	f7fb fd4f 	bl	8000d50 <DecToInt>
 80052b2:	4b1a      	ldr	r3, [pc, #104]	; (800531c <uartReceiveHandler+0x3e4>)
 80052b4:	7358      	strb	r0, [r3, #13]
			break;
 80052b6:	e704      	b.n	80050c2 <uartReceiveHandler+0x18a>
			nodeSettings.sw = HexToInt(ptr, l);
 80052b8:	4621      	mov	r1, r4
 80052ba:	4817      	ldr	r0, [pc, #92]	; (8005318 <uartReceiveHandler+0x3e0>)
 80052bc:	f7fb fd60 	bl	8000d80 <HexToInt>
 80052c0:	4b16      	ldr	r3, [pc, #88]	; (800531c <uartReceiveHandler+0x3e4>)
 80052c2:	e6ef      	b.n	80050a4 <uartReceiveHandler+0x16c>
			nodeSettings.preamble = DecToInt(ptr, l);
 80052c4:	4621      	mov	r1, r4
 80052c6:	4814      	ldr	r0, [pc, #80]	; (8005318 <uartReceiveHandler+0x3e0>)
 80052c8:	f7fb fd42 	bl	8000d50 <DecToInt>
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <uartReceiveHandler+0x3e4>)
 80052ce:	8118      	strh	r0, [r3, #8]
			break;
 80052d0:	e6f7      	b.n	80050c2 <uartReceiveHandler+0x18a>
			nodeSettings.cr = DecToInt(ptr, l);
 80052d2:	4621      	mov	r1, r4
 80052d4:	4810      	ldr	r0, [pc, #64]	; (8005318 <uartReceiveHandler+0x3e0>)
 80052d6:	f7fb fd3b 	bl	8000d50 <DecToInt>
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <uartReceiveHandler+0x3e4>)
 80052dc:	72d8      	strb	r0, [r3, #11]
			break;
 80052de:	e6f0      	b.n	80050c2 <uartReceiveHandler+0x18a>
			nodeSettings.power = DecToInt(ptr, l);
 80052e0:	4621      	mov	r1, r4
 80052e2:	480d      	ldr	r0, [pc, #52]	; (8005318 <uartReceiveHandler+0x3e0>)
 80052e4:	f7fb fd34 	bl	8000d50 <DecToInt>
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <uartReceiveHandler+0x3e4>)
 80052ea:	e6e2      	b.n	80050b2 <uartReceiveHandler+0x17a>
			nodeNum = DecToInt(ptr, l);
 80052ec:	4621      	mov	r1, r4
 80052ee:	1c68      	adds	r0, r5, #1
 80052f0:	f7fb fd2e 	bl	8000d50 <DecToInt>
 80052f4:	4b0a      	ldr	r3, [pc, #40]	; (8005320 <uartReceiveHandler+0x3e8>)
 80052f6:	7018      	strb	r0, [r3, #0]
			break;
 80052f8:	e6e3      	b.n	80050c2 <uartReceiveHandler+0x18a>
			nodeSettings.useLed = DecToInt(ptr, l);
 80052fa:	4621      	mov	r1, r4
 80052fc:	1c68      	adds	r0, r5, #1
 80052fe:	f7fb fd27 	bl	8000d50 <DecToInt>
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <uartReceiveHandler+0x3e4>)
 8005304:	e6eb      	b.n	80050de <uartReceiveHandler+0x1a6>
			nodeSettings.workInterval = DecToInt(ptr, l);
 8005306:	4621      	mov	r1, r4
 8005308:	1c68      	adds	r0, r5, #1
 800530a:	f7fb fd21 	bl	8000d50 <DecToInt>
 800530e:	4b03      	ldr	r3, [pc, #12]	; (800531c <uartReceiveHandler+0x3e4>)
 8005310:	6058      	str	r0, [r3, #4]
			break;
 8005312:	e6d6      	b.n	80050c2 <uartReceiveHandler+0x18a>
 8005314:	0800a5a3 	.word	0x0800a5a3
 8005318:	200018a4 	.word	0x200018a4
 800531c:	20000c7c 	.word	0x20000c7c
 8005320:	200018a2 	.word	0x200018a2

08005324 <sendConfig>:

void sendConfig(void) {
 8005324:	b538      	push	{r3, r4, r5, lr}
	lastUartConnect = HAL_GetTick();
 8005326:	f000 f9ab 	bl	8005680 <HAL_GetTick>
	printf("<3%u>\n", settings.bw);
	printf("<4%X>\n", settings.syncWord);
	printf("<5%u>\n", settings.power);
	printf("<8%u>\n", settings.preamble);
	printf("<9%u>\n", settings.cr);
	printf("<q%lu>\n", settings.warningDelay / 1000);
 800532a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	lastUartConnect = HAL_GetTick();
 800532e:	4b1b      	ldr	r3, [pc, #108]	; (800539c <sendConfig+0x78>)
	printf("<1%ld>\n", settings.realFrequency);
 8005330:	4c1b      	ldr	r4, [pc, #108]	; (80053a0 <sendConfig+0x7c>)
	lastUartConnect = HAL_GetTick();
 8005332:	6018      	str	r0, [r3, #0]
	printf("<1%ld>\n", settings.realFrequency);
 8005334:	6821      	ldr	r1, [r4, #0]
 8005336:	481b      	ldr	r0, [pc, #108]	; (80053a4 <sendConfig+0x80>)
 8005338:	f002 fea0 	bl	800807c <iprintf>
	printf("<2%u>\n", settings.sf);
 800533c:	7ba1      	ldrb	r1, [r4, #14]
 800533e:	481a      	ldr	r0, [pc, #104]	; (80053a8 <sendConfig+0x84>)
 8005340:	f002 fe9c 	bl	800807c <iprintf>
	printf("<3%u>\n", settings.bw);
 8005344:	7be1      	ldrb	r1, [r4, #15]
 8005346:	4819      	ldr	r0, [pc, #100]	; (80053ac <sendConfig+0x88>)
 8005348:	f002 fe98 	bl	800807c <iprintf>
	printf("<4%X>\n", settings.syncWord);
 800534c:	7c61      	ldrb	r1, [r4, #17]
 800534e:	4818      	ldr	r0, [pc, #96]	; (80053b0 <sendConfig+0x8c>)
 8005350:	f002 fe94 	bl	800807c <iprintf>
	printf("<5%u>\n", settings.power);
 8005354:	7ca1      	ldrb	r1, [r4, #18]
 8005356:	4817      	ldr	r0, [pc, #92]	; (80053b4 <sendConfig+0x90>)
 8005358:	f002 fe90 	bl	800807c <iprintf>
	printf("<8%u>\n", settings.preamble);
 800535c:	89a1      	ldrh	r1, [r4, #12]
 800535e:	4816      	ldr	r0, [pc, #88]	; (80053b8 <sendConfig+0x94>)
 8005360:	f002 fe8c 	bl	800807c <iprintf>
	printf("<9%u>\n", settings.cr);
 8005364:	7c21      	ldrb	r1, [r4, #16]
 8005366:	4815      	ldr	r0, [pc, #84]	; (80053bc <sendConfig+0x98>)
 8005368:	f002 fe88 	bl	800807c <iprintf>
	printf("<q%lu>\n", settings.warningDelay / 1000);
 800536c:	6861      	ldr	r1, [r4, #4]
 800536e:	4814      	ldr	r0, [pc, #80]	; (80053c0 <sendConfig+0x9c>)
 8005370:	fbb1 f1f5 	udiv	r1, r1, r5
 8005374:	f002 fe82 	bl	800807c <iprintf>
	printf("<w%lu>\n", settings.superWarningDelay / 1000);
 8005378:	68a1      	ldr	r1, [r4, #8]
 800537a:	4812      	ldr	r0, [pc, #72]	; (80053c4 <sendConfig+0xa0>)
 800537c:	fbb1 f1f5 	udiv	r1, r1, r5
 8005380:	f002 fe7c 	bl	800807c <iprintf>
	printf("<Z%s>\n", settings.SSID);
 8005384:	f104 0113 	add.w	r1, r4, #19
 8005388:	480f      	ldr	r0, [pc, #60]	; (80053c8 <sendConfig+0xa4>)
 800538a:	f002 fe77 	bl	800807c <iprintf>
	printf("<X%s>\n", settings.WiFiPass);
 800538e:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8005392:	480e      	ldr	r0, [pc, #56]	; (80053cc <sendConfig+0xa8>)
}
 8005394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("<X%s>\n", settings.WiFiPass);
 8005398:	f002 be70 	b.w	800807c <iprintf>
 800539c:	20001898 	.word	0x20001898
 80053a0:	20000a80 	.word	0x20000a80
 80053a4:	0800a5ae 	.word	0x0800a5ae
 80053a8:	0800a5b6 	.word	0x0800a5b6
 80053ac:	0800a5bd 	.word	0x0800a5bd
 80053b0:	0800a5c4 	.word	0x0800a5c4
 80053b4:	0800a5cb 	.word	0x0800a5cb
 80053b8:	0800a5d2 	.word	0x0800a5d2
 80053bc:	0800a5d9 	.word	0x0800a5d9
 80053c0:	0800a5e0 	.word	0x0800a5e0
 80053c4:	0800a5e8 	.word	0x0800a5e8
 80053c8:	0800a5f0 	.word	0x0800a5f0
 80053cc:	0800a5f7 	.word	0x0800a5f7

080053d0 <configNodeViaUart>:

void configNodeViaUart(uint8_t nodeNum) {
 80053d0:	b570      	push	{r4, r5, r6, lr}
 80053d2:	4606      	mov	r6, r0
	memset(&nodeSettings, 0, sizeof(nodeSettings_t));
 80053d4:	4d2f      	ldr	r5, [pc, #188]	; (8005494 <configNodeViaUart+0xc4>)
	printf("<1%ld\n>", settings.realFrequency);
 80053d6:	4c30      	ldr	r4, [pc, #192]	; (8005498 <configNodeViaUart+0xc8>)
	memset(&nodeSettings, 0, sizeof(nodeSettings_t));
 80053d8:	221c      	movs	r2, #28
 80053da:	2100      	movs	r1, #0
 80053dc:	4628      	mov	r0, r5
 80053de:	f002 fe45 	bl	800806c <memset>
	printf("<1%ld\n>", settings.realFrequency);
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	482d      	ldr	r0, [pc, #180]	; (800549c <configNodeViaUart+0xcc>)
 80053e6:	f002 fe49 	bl	800807c <iprintf>
	HAL_Delay(5);
 80053ea:	2005      	movs	r0, #5
 80053ec:	f000 f94e 	bl	800568c <HAL_Delay>
	printf("<2%u>\n", settings.sf);
 80053f0:	7ba1      	ldrb	r1, [r4, #14]
 80053f2:	482b      	ldr	r0, [pc, #172]	; (80054a0 <configNodeViaUart+0xd0>)
 80053f4:	f002 fe42 	bl	800807c <iprintf>
	HAL_Delay(5);
 80053f8:	2005      	movs	r0, #5
 80053fa:	f000 f947 	bl	800568c <HAL_Delay>
	printf("<3%u>\n", settings.bw);
 80053fe:	7be1      	ldrb	r1, [r4, #15]
 8005400:	4828      	ldr	r0, [pc, #160]	; (80054a4 <configNodeViaUart+0xd4>)
 8005402:	f002 fe3b 	bl	800807c <iprintf>
	HAL_Delay(5);
 8005406:	2005      	movs	r0, #5
 8005408:	f000 f940 	bl	800568c <HAL_Delay>
	printf("<4%X>\n", settings.syncWord);
 800540c:	7c61      	ldrb	r1, [r4, #17]
 800540e:	4826      	ldr	r0, [pc, #152]	; (80054a8 <configNodeViaUart+0xd8>)
 8005410:	f002 fe34 	bl	800807c <iprintf>
	HAL_Delay(5);
 8005414:	2005      	movs	r0, #5
 8005416:	f000 f939 	bl	800568c <HAL_Delay>
	printf("<5%u>\n", settings.power);
 800541a:	7ca1      	ldrb	r1, [r4, #18]
 800541c:	4823      	ldr	r0, [pc, #140]	; (80054ac <configNodeViaUart+0xdc>)
 800541e:	f002 fe2d 	bl	800807c <iprintf>
	HAL_Delay(5);
 8005422:	2005      	movs	r0, #5
 8005424:	f000 f932 	bl	800568c <HAL_Delay>
	printf("<8%u>\n", settings.preamble);
 8005428:	89a1      	ldrh	r1, [r4, #12]
 800542a:	4821      	ldr	r0, [pc, #132]	; (80054b0 <configNodeViaUart+0xe0>)
 800542c:	f002 fe26 	bl	800807c <iprintf>
	HAL_Delay(5);
 8005430:	2005      	movs	r0, #5
 8005432:	f000 f92b 	bl	800568c <HAL_Delay>
	printf("<9%u>\n", settings.cr);
 8005436:	7c21      	ldrb	r1, [r4, #16]
 8005438:	481e      	ldr	r0, [pc, #120]	; (80054b4 <configNodeViaUart+0xe4>)
 800543a:	f002 fe1f 	bl	800807c <iprintf>
	HAL_Delay(5);
 800543e:	2005      	movs	r0, #5
 8005440:	f000 f924 	bl	800568c <HAL_Delay>
	printf("<n%u>\n", nodeNum);
 8005444:	4631      	mov	r1, r6
 8005446:	481c      	ldr	r0, [pc, #112]	; (80054b8 <configNodeViaUart+0xe8>)
 8005448:	f002 fe18 	bl	800807c <iprintf>
	HAL_Delay(5);
 800544c:	2005      	movs	r0, #5
 800544e:	f000 f91d 	bl	800568c <HAL_Delay>
	printf("<i%lu>\n", nodeSettings.workInterval);
 8005452:	6869      	ldr	r1, [r5, #4]
 8005454:	4819      	ldr	r0, [pc, #100]	; (80054bc <configNodeViaUart+0xec>)
 8005456:	f002 fe11 	bl	800807c <iprintf>
	HAL_Delay(5);
 800545a:	2005      	movs	r0, #5
 800545c:	f000 f916 	bl	800568c <HAL_Delay>
	printf("<L%u>\n", nodeSettings.useLed);
 8005460:	7c29      	ldrb	r1, [r5, #16]
 8005462:	4817      	ldr	r0, [pc, #92]	; (80054c0 <configNodeViaUart+0xf0>)
 8005464:	f002 fe0a 	bl	800807c <iprintf>
	HAL_Delay(5);
 8005468:	2005      	movs	r0, #5
 800546a:	f000 f90f 	bl	800568c <HAL_Delay>
	printf("<S>\n");
 800546e:	4815      	ldr	r0, [pc, #84]	; (80054c4 <configNodeViaUart+0xf4>)
 8005470:	f002 fe8a 	bl	8008188 <puts>
	HAL_Delay(10);
 8005474:	200a      	movs	r0, #10
 8005476:	f000 f909 	bl	800568c <HAL_Delay>
	printf("<R>\n");
 800547a:	4813      	ldr	r0, [pc, #76]	; (80054c8 <configNodeViaUart+0xf8>)
 800547c:	f002 fe84 	bl	8008188 <puts>
	configTime = HAL_GetTick();
 8005480:	f000 f8fe 	bl	8005680 <HAL_GetTick>
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <configNodeViaUart+0xfc>)
 8005486:	6018      	str	r0, [r3, #0]
	lastUartConnect = HAL_GetTick();
 8005488:	f000 f8fa 	bl	8005680 <HAL_GetTick>
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <configNodeViaUart+0x100>)
 800548e:	6018      	str	r0, [r3, #0]
}
 8005490:	bd70      	pop	{r4, r5, r6, pc}
 8005492:	bf00      	nop
 8005494:	20000c7c 	.word	0x20000c7c
 8005498:	20000a80 	.word	0x20000a80
 800549c:	0800a5fe 	.word	0x0800a5fe
 80054a0:	0800a5b6 	.word	0x0800a5b6
 80054a4:	0800a5bd 	.word	0x0800a5bd
 80054a8:	0800a5c4 	.word	0x0800a5c4
 80054ac:	0800a5cb 	.word	0x0800a5cb
 80054b0:	0800a5d2 	.word	0x0800a5d2
 80054b4:	0800a5d9 	.word	0x0800a5d9
 80054b8:	0800a606 	.word	0x0800a606
 80054bc:	0800a60d 	.word	0x0800a60d
 80054c0:	0800a615 	.word	0x0800a615
 80054c4:	0800a61c 	.word	0x0800a61c
 80054c8:	0800a620 	.word	0x0800a620
 80054cc:	20000c9c 	.word	0x20000c9c
 80054d0:	20001898 	.word	0x20001898

080054d4 <wsSetColor>:

uint16_t wsBuffer[ARRAY_LEN];
color_t cBuffer[LED_COUNT];

void wsSetColor(uint8_t num, uint8_t red, uint8_t green, uint8_t blue)
{
 80054d4:	b530      	push	{r4, r5, lr}
cBuffer[num].red=red;
 80054d6:	4d04      	ldr	r5, [pc, #16]	; (80054e8 <wsSetColor+0x14>)
 80054d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80054dc:	182c      	adds	r4, r5, r0
 80054de:	7061      	strb	r1, [r4, #1]
cBuffer[num].green=green;
cBuffer[num].blue=blue;
 80054e0:	70a3      	strb	r3, [r4, #2]
cBuffer[num].green=green;
 80054e2:	542a      	strb	r2, [r5, r0]
}
 80054e4:	bd30      	pop	{r4, r5, pc}
 80054e6:	bf00      	nop
 80054e8:	200020e4 	.word	0x200020e4

080054ec <wsDoubleBright>:

void wsDoubleBright(uint8_t num)
{
	cBuffer[num].red*=2;
 80054ec:	4a06      	ldr	r2, [pc, #24]	; (8005508 <wsDoubleBright+0x1c>)
 80054ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80054f2:	1813      	adds	r3, r2, r0
 80054f4:	7859      	ldrb	r1, [r3, #1]
 80054f6:	0049      	lsls	r1, r1, #1
 80054f8:	7059      	strb	r1, [r3, #1]
	cBuffer[num].green*=2;
 80054fa:	5c11      	ldrb	r1, [r2, r0]
 80054fc:	0049      	lsls	r1, r1, #1
 80054fe:	5411      	strb	r1, [r2, r0]
	cBuffer[num].blue*=2;
 8005500:	789a      	ldrb	r2, [r3, #2]
 8005502:	0052      	lsls	r2, r2, #1
 8005504:	709a      	strb	r2, [r3, #2]
}
 8005506:	4770      	bx	lr
 8005508:	200020e4 	.word	0x200020e4

0800550c <wsMultiply>:

void wsMultiply(uint8_t num, float k)
{
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	460d      	mov	r5, r1
	cBuffer[num].red*=k;
 8005510:	4f0f      	ldr	r7, [pc, #60]	; (8005550 <wsMultiply+0x44>)
 8005512:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8005516:	193e      	adds	r6, r7, r4
 8005518:	7870      	ldrb	r0, [r6, #1]
 800551a:	f7fa fed9 	bl	80002d0 <__aeabi_i2f>
 800551e:	4629      	mov	r1, r5
 8005520:	f7fa ff2a 	bl	8000378 <__aeabi_fmul>
 8005524:	f7fb f914 	bl	8000750 <__aeabi_f2uiz>
 8005528:	7070      	strb	r0, [r6, #1]
	cBuffer[num].green*=k;
 800552a:	5d38      	ldrb	r0, [r7, r4]
 800552c:	f7fa fed0 	bl	80002d0 <__aeabi_i2f>
 8005530:	4629      	mov	r1, r5
 8005532:	f7fa ff21 	bl	8000378 <__aeabi_fmul>
 8005536:	f7fb f90b 	bl	8000750 <__aeabi_f2uiz>
 800553a:	5538      	strb	r0, [r7, r4]
	cBuffer[num].blue*=k;
 800553c:	78b0      	ldrb	r0, [r6, #2]
 800553e:	f7fa fec7 	bl	80002d0 <__aeabi_i2f>
 8005542:	4629      	mov	r1, r5
 8005544:	f7fa ff18 	bl	8000378 <__aeabi_fmul>
 8005548:	f7fb f902 	bl	8000750 <__aeabi_f2uiz>
 800554c:	70b0      	strb	r0, [r6, #2]
}
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005550:	200020e4 	.word	0x200020e4

08005554 <wsPrepareArray>:


void wsPrepareArray()
{
 8005554:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
}

uint32_t * getBitBanded(uint32_t * adr,uint8_t bit)
{
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8005556:	2400      	movs	r4, #0
	  wsBuffer[i*8+j]=LOW;
 8005558:	251a      	movs	r5, #26
      wsBuffer[i*8+j]=HIGH;
 800555a:	2641      	movs	r6, #65	; 0x41
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 800555c:	4b0e      	ldr	r3, [pc, #56]	; (8005598 <wsPrepareArray+0x44>)
 800555e:	480f      	ldr	r0, [pc, #60]	; (800559c <wsPrepareArray+0x48>)
 8005560:	b29b      	uxth	r3, r3
 8005562:	015b      	lsls	r3, r3, #5
 8005564:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8005568:	3320      	adds	r3, #32
{
 800556a:	4602      	mov	r2, r0
 800556c:	f1a3 0120 	sub.w	r1, r3, #32
		if (*adr++)
 8005570:	f851 7b04 	ldr.w	r7, [r1], #4
 8005574:	b16f      	cbz	r7, 8005592 <wsPrepareArray+0x3e>
      wsBuffer[i*8+j]=HIGH;
 8005576:	81d6      	strh	r6, [r2, #14]
	for(j=7;j>=0;j--)
 8005578:	4299      	cmp	r1, r3
 800557a:	f1a2 0202 	sub.w	r2, r2, #2
 800557e:	d1f7      	bne.n	8005570 <wsPrepareArray+0x1c>
	for(i=0;i<LED_COUNT*3;i++)
 8005580:	3408      	adds	r4, #8
 8005582:	f5b4 7f46 	cmp.w	r4, #792	; 0x318
 8005586:	f101 0320 	add.w	r3, r1, #32
 800558a:	f100 0010 	add.w	r0, r0, #16
 800558e:	d1ec      	bne.n	800556a <wsPrepareArray+0x16>
}
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  wsBuffer[i*8+j]=LOW;
 8005592:	81d5      	strh	r5, [r2, #14]
 8005594:	e7f0      	b.n	8005578 <wsPrepareArray+0x24>
 8005596:	bf00      	nop
 8005598:	200020e4 	.word	0x200020e4
 800559c:	20001924 	.word	0x20001924

080055a0 <wsInit>:
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
 80055a0:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80055a4:	4a01      	ldr	r2, [pc, #4]	; (80055ac <wsInit+0xc>)
 80055a6:	f002 ba6f 	b.w	8007a88 <HAL_TIM_PWM_Start_DMA>
 80055aa:	bf00      	nop
 80055ac:	20001924 	.word	0x20001924

080055b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055b0:	480c      	ldr	r0, [pc, #48]	; (80055e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055b2:	490d      	ldr	r1, [pc, #52]	; (80055e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055b4:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b8:	e002      	b.n	80055c0 <LoopCopyDataInit>

080055ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055be:	3304      	adds	r3, #4

080055c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c4:	d3f9      	bcc.n	80055ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80055c8:	4c0a      	ldr	r4, [pc, #40]	; (80055f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80055ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055cc:	e001      	b.n	80055d2 <LoopFillZerobss>

080055ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055d0:	3204      	adds	r2, #4

080055d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d4:	d3fb      	bcc.n	80055ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055d6:	f7ff fc77 	bl	8004ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055da:	f002 fd15 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055de:	f7fe fb71 	bl	8003cc4 <main>
  bx lr
 80055e2:	4770      	bx	lr
  ldr r0, =_sdata
 80055e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e8:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80055ec:	0800a6d8 	.word	0x0800a6d8
  ldr r2, =_sbss
 80055f0:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80055f4:	2000215c 	.word	0x2000215c

080055f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055f8:	e7fe      	b.n	80055f8 <ADC1_2_IRQHandler>
	...

080055fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80055fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80055fe:	4b0e      	ldr	r3, [pc, #56]	; (8005638 <HAL_InitTick+0x3c>)
{
 8005600:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005602:	7818      	ldrb	r0, [r3, #0]
 8005604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005608:	fbb3 f3f0 	udiv	r3, r3, r0
 800560c:	4a0b      	ldr	r2, [pc, #44]	; (800563c <HAL_InitTick+0x40>)
 800560e:	6810      	ldr	r0, [r2, #0]
 8005610:	fbb0 f0f3 	udiv	r0, r0, r3
 8005614:	f000 fad2 	bl	8005bbc <HAL_SYSTICK_Config>
 8005618:	4604      	mov	r4, r0
 800561a:	b958      	cbnz	r0, 8005634 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800561c:	2d0f      	cmp	r5, #15
 800561e:	d809      	bhi.n	8005634 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005620:	4602      	mov	r2, r0
 8005622:	4629      	mov	r1, r5
 8005624:	f04f 30ff 	mov.w	r0, #4294967295
 8005628:	f000 fa88 	bl	8005b3c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800562c:	4620      	mov	r0, r4
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <HAL_InitTick+0x44>)
 8005630:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005632:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005634:	2001      	movs	r0, #1
 8005636:	e7fc      	b.n	8005632 <HAL_InitTick+0x36>
 8005638:	2000004c 	.word	0x2000004c
 800563c:	20000048 	.word	0x20000048
 8005640:	20000050 	.word	0x20000050

08005644 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005644:	4a07      	ldr	r2, [pc, #28]	; (8005664 <HAL_Init+0x20>)
{
 8005646:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005648:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800564a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800564c:	f043 0310 	orr.w	r3, r3, #16
 8005650:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005652:	f000 fa61 	bl	8005b18 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005656:	2005      	movs	r0, #5
 8005658:	f7ff ffd0 	bl	80055fc <HAL_InitTick>
  HAL_MspInit();
 800565c:	f7fe ff62 	bl	8004524 <HAL_MspInit>
}
 8005660:	2000      	movs	r0, #0
 8005662:	bd08      	pop	{r3, pc}
 8005664:	40022000 	.word	0x40022000

08005668 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005668:	4a03      	ldr	r2, [pc, #12]	; (8005678 <HAL_IncTick+0x10>)
 800566a:	4b04      	ldr	r3, [pc, #16]	; (800567c <HAL_IncTick+0x14>)
 800566c:	6811      	ldr	r1, [r2, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	440b      	add	r3, r1
 8005672:	6013      	str	r3, [r2, #0]
}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	20002148 	.word	0x20002148
 800567c:	2000004c 	.word	0x2000004c

08005680 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005680:	4b01      	ldr	r3, [pc, #4]	; (8005688 <HAL_GetTick+0x8>)
 8005682:	6818      	ldr	r0, [r3, #0]
}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20002148 	.word	0x20002148

0800568c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005690:	f7ff fff6 	bl	8005680 <HAL_GetTick>
 8005694:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005696:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005698:	bf1e      	ittt	ne
 800569a:	4b04      	ldrne	r3, [pc, #16]	; (80056ac <HAL_Delay+0x20>)
 800569c:	781b      	ldrbne	r3, [r3, #0]
 800569e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056a0:	f7ff ffee 	bl	8005680 <HAL_GetTick>
 80056a4:	1b43      	subs	r3, r0, r5
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	d3fa      	bcc.n	80056a0 <HAL_Delay+0x14>
  {
  }
}
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	2000004c 	.word	0x2000004c

080056b0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80056b0:	6803      	ldr	r3, [r0, #0]
 80056b2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 80056b4:	4770      	bx	lr
	...

080056b8 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80056b8:	2300      	movs	r3, #0
{ 
 80056ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80056bc:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056be:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 80056c2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d06c      	beq.n	80057a2 <HAL_ADC_ConfigChannel+0xea>
 80056c8:	2301      	movs	r3, #1
 80056ca:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80056ce:	684d      	ldr	r5, [r1, #4]
 80056d0:	6802      	ldr	r2, [r0, #0]
 80056d2:	2d06      	cmp	r5, #6
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80056da:	d822      	bhi.n	8005722 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80056dc:	261f      	movs	r6, #31
 80056de:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80056e0:	3b05      	subs	r3, #5
 80056e2:	409e      	lsls	r6, r3
 80056e4:	ea25 0506 	bic.w	r5, r5, r6
 80056e8:	fa00 f303 	lsl.w	r3, r0, r3
 80056ec:	432b      	orrs	r3, r5
 80056ee:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80056f0:	2809      	cmp	r0, #9
 80056f2:	688b      	ldr	r3, [r1, #8]
 80056f4:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 80056f8:	f04f 0107 	mov.w	r1, #7
 80056fc:	d929      	bls.n	8005752 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80056fe:	68d6      	ldr	r6, [r2, #12]
 8005700:	3d1e      	subs	r5, #30
 8005702:	40a9      	lsls	r1, r5
 8005704:	ea26 0101 	bic.w	r1, r6, r1
 8005708:	40ab      	lsls	r3, r5
 800570a:	430b      	orrs	r3, r1
 800570c:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800570e:	f1a0 0310 	sub.w	r3, r0, #16
 8005712:	2b01      	cmp	r3, #1
 8005714:	d925      	bls.n	8005762 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005716:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005718:	2300      	movs	r3, #0
 800571a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800571e:	b002      	add	sp, #8
 8005720:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8005722:	2d0c      	cmp	r5, #12
 8005724:	f04f 051f 	mov.w	r5, #31
 8005728:	d809      	bhi.n	800573e <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800572a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800572c:	3b23      	subs	r3, #35	; 0x23
 800572e:	409d      	lsls	r5, r3
 8005730:	ea26 0505 	bic.w	r5, r6, r5
 8005734:	fa00 f303 	lsl.w	r3, r0, r3
 8005738:	432b      	orrs	r3, r5
 800573a:	6313      	str	r3, [r2, #48]	; 0x30
 800573c:	e7d8      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800573e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8005740:	3b41      	subs	r3, #65	; 0x41
 8005742:	409d      	lsls	r5, r3
 8005744:	ea26 0505 	bic.w	r5, r6, r5
 8005748:	fa00 f303 	lsl.w	r3, r0, r3
 800574c:	432b      	orrs	r3, r5
 800574e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005750:	e7ce      	b.n	80056f0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005752:	6910      	ldr	r0, [r2, #16]
 8005754:	40a9      	lsls	r1, r5
 8005756:	ea20 0101 	bic.w	r1, r0, r1
 800575a:	40ab      	lsls	r3, r5
 800575c:	430b      	orrs	r3, r1
 800575e:	6113      	str	r3, [r2, #16]
 8005760:	e7d9      	b.n	8005716 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8005762:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_ADC_ConfigChannel+0xf0>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d116      	bne.n	8005796 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005768:	6893      	ldr	r3, [r2, #8]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	d4d3      	bmi.n	8005716 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800576e:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005770:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8005772:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005776:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005778:	d1cd      	bne.n	8005716 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800577a:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <HAL_ADC_ConfigChannel+0xf4>)
 800577c:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <HAL_ADC_ConfigChannel+0xf8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	fbb3 f2f2 	udiv	r2, r3, r2
 8005784:	230a      	movs	r3, #10
 8005786:	4353      	muls	r3, r2
            wait_loop_index--;
 8005788:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800578a:	9b01      	ldr	r3, [sp, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0c2      	beq.n	8005716 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8005790:	9b01      	ldr	r3, [sp, #4]
 8005792:	3b01      	subs	r3, #1
 8005794:	e7f8      	b.n	8005788 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005796:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8005798:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800579a:	f043 0320 	orr.w	r3, r3, #32
 800579e:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80057a0:	e7ba      	b.n	8005718 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80057a2:	2002      	movs	r0, #2
 80057a4:	e7bb      	b.n	800571e <HAL_ADC_ConfigChannel+0x66>
 80057a6:	bf00      	nop
 80057a8:	40012400 	.word	0x40012400
 80057ac:	20000048 	.word	0x20000048
 80057b0:	000f4240 	.word	0x000f4240

080057b4 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80057b4:	2300      	movs	r3, #0
{
 80057b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 80057b8:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057ba:	6803      	ldr	r3, [r0, #0]
{
 80057bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	07d2      	lsls	r2, r2, #31
 80057c2:	d502      	bpl.n	80057ca <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80057c4:	2000      	movs	r0, #0
}
 80057c6:	b003      	add	sp, #12
 80057c8:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	f042 0201 	orr.w	r2, r2, #1
 80057d0:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057d2:	4b14      	ldr	r3, [pc, #80]	; (8005824 <ADC_Enable+0x70>)
 80057d4:	4a14      	ldr	r2, [pc, #80]	; (8005828 <ADC_Enable+0x74>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80057dc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80057de:	9b01      	ldr	r3, [sp, #4]
 80057e0:	b9e3      	cbnz	r3, 800581c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 80057e2:	f7ff ff4d 	bl	8005680 <HAL_GetTick>
 80057e6:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	07db      	lsls	r3, r3, #31
 80057ee:	d4e9      	bmi.n	80057c4 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80057f0:	f7ff ff46 	bl	8005680 <HAL_GetTick>
 80057f4:	1b40      	subs	r0, r0, r5
 80057f6:	2802      	cmp	r0, #2
 80057f8:	d9f6      	bls.n	80057e8 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 80057fa:	6823      	ldr	r3, [r4, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f013 0301 	ands.w	r3, r3, #1
 8005802:	d1f1      	bne.n	80057e8 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005804:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8005806:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005808:	f042 0210 	orr.w	r2, r2, #16
 800580c:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800580e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8005810:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800581a:	e7d4      	b.n	80057c6 <ADC_Enable+0x12>
      wait_loop_index--;
 800581c:	9b01      	ldr	r3, [sp, #4]
 800581e:	3b01      	subs	r3, #1
 8005820:	e7dc      	b.n	80057dc <ADC_Enable+0x28>
 8005822:	bf00      	nop
 8005824:	20000048 	.word	0x20000048
 8005828:	000f4240 	.word	0x000f4240

0800582c <HAL_ADC_Start>:
{
 800582c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800582e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8005832:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005834:	2b01      	cmp	r3, #1
 8005836:	d054      	beq.n	80058e2 <HAL_ADC_Start+0xb6>
 8005838:	2301      	movs	r3, #1
 800583a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800583e:	f7ff ffb9 	bl	80057b4 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8005842:	2800      	cmp	r0, #0
 8005844:	d149      	bne.n	80058da <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8005846:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005848:	4a27      	ldr	r2, [pc, #156]	; (80058e8 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800584a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800584e:	f023 0301 	bic.w	r3, r3, #1
 8005852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005856:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8005858:	6823      	ldr	r3, [r4, #0]
 800585a:	4293      	cmp	r3, r2
 800585c:	d104      	bne.n	8005868 <HAL_ADC_Start+0x3c>
 800585e:	4923      	ldr	r1, [pc, #140]	; (80058ec <HAL_ADC_Start+0xc0>)
 8005860:	684a      	ldr	r2, [r1, #4]
 8005862:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8005866:	d12e      	bne.n	80058c6 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005868:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800586a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800586e:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005870:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005872:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005874:	bf41      	itttt	mi
 8005876:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 8005878:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800587c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8005880:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005882:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005884:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005888:	bf1c      	itt	ne
 800588a:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 800588c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8005890:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8005892:	2200      	movs	r2, #0
 8005894:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005898:	f06f 0202 	mvn.w	r2, #2
 800589c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80058a4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80058a8:	d113      	bne.n	80058d2 <HAL_ADC_Start+0xa6>
 80058aa:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <HAL_ADC_Start+0xbc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d105      	bne.n	80058bc <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80058b0:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80058b4:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80058b6:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80058ba:	d10a      	bne.n	80058d2 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80058c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80058c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80058cc:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80058ce:	684a      	ldr	r2, [r1, #4]
 80058d0:	e7cf      	b.n	8005872 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80058d8:	e7f3      	b.n	80058c2 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80058da:	2300      	movs	r3, #0
 80058dc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80058e0:	e7f0      	b.n	80058c4 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 80058e2:	2002      	movs	r0, #2
 80058e4:	e7ee      	b.n	80058c4 <HAL_ADC_Start+0x98>
 80058e6:	bf00      	nop
 80058e8:	40012800 	.word	0x40012800
 80058ec:	40012400 	.word	0x40012400

080058f0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80058f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80058f2:	6803      	ldr	r3, [r0, #0]
{
 80058f4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80058f6:	689a      	ldr	r2, [r3, #8]
 80058f8:	07d1      	lsls	r1, r2, #31
 80058fa:	d401      	bmi.n	8005900 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80058fc:	2000      	movs	r0, #0
}
 80058fe:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	f022 0201 	bic.w	r2, r2, #1
 8005906:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005908:	f7ff feba 	bl	8005680 <HAL_GetTick>
 800590c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	07db      	lsls	r3, r3, #31
 8005914:	d5f2      	bpl.n	80058fc <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005916:	f7ff feb3 	bl	8005680 <HAL_GetTick>
 800591a:	1b40      	subs	r0, r0, r5
 800591c:	2802      	cmp	r0, #2
 800591e:	d9f6      	bls.n	800590e <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005920:	6823      	ldr	r3, [r4, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	07da      	lsls	r2, r3, #31
 8005926:	d5f2      	bpl.n	800590e <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005928:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800592a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800592c:	f043 0310 	orr.w	r3, r3, #16
 8005930:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005934:	f043 0301 	orr.w	r3, r3, #1
 8005938:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800593a:	e7e0      	b.n	80058fe <ADC_ConversionStop_Disable+0xe>

0800593c <HAL_ADC_Init>:
{
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800593e:	4604      	mov	r4, r0
 8005940:	2800      	cmp	r0, #0
 8005942:	d06e      	beq.n	8005a22 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005944:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005946:	b923      	cbnz	r3, 8005952 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8005948:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800594a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800594e:	f7fe fe0b 	bl	8004568 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005952:	4620      	mov	r0, r4
 8005954:	f7ff ffcc 	bl	80058f0 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005958:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800595a:	f013 0310 	ands.w	r3, r3, #16
 800595e:	d162      	bne.n	8005a26 <HAL_ADC_Init+0xea>
 8005960:	2800      	cmp	r0, #0
 8005962:	d160      	bne.n	8005a26 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8005964:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005966:	69e5      	ldr	r5, [r4, #28]
 8005968:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800596a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800596e:	f022 0202 	bic.w	r2, r2, #2
 8005972:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005976:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005978:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800597a:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800597c:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800597e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005982:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005986:	d037      	beq.n	80059f8 <HAL_ADC_Init+0xbc>
 8005988:	2d01      	cmp	r5, #1
 800598a:	bf14      	ite	ne
 800598c:	2700      	movne	r7, #0
 800598e:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005992:	7d26      	ldrb	r6, [r4, #20]
 8005994:	2e01      	cmp	r6, #1
 8005996:	d106      	bne.n	80059a6 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005998:	bb82      	cbnz	r2, 80059fc <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800599a:	69a2      	ldr	r2, [r4, #24]
 800599c:	3a01      	subs	r2, #1
 800599e:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 80059a2:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 80059a6:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80059a8:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 80059ac:	6856      	ldr	r6, [r2, #4]
 80059ae:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 80059b2:	ea46 0607 	orr.w	r6, r6, r7
 80059b6:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80059b8:	6897      	ldr	r7, [r2, #8]
 80059ba:	4e1d      	ldr	r6, [pc, #116]	; (8005a30 <HAL_ADC_Init+0xf4>)
 80059bc:	ea06 0607 	and.w	r6, r6, r7
 80059c0:	ea46 0601 	orr.w	r6, r6, r1
 80059c4:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80059c6:	d001      	beq.n	80059cc <HAL_ADC_Init+0x90>
 80059c8:	2d01      	cmp	r5, #1
 80059ca:	d102      	bne.n	80059d2 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80059cc:	6923      	ldr	r3, [r4, #16]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80059d2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80059d4:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80059d8:	432b      	orrs	r3, r5
 80059da:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80059dc:	6892      	ldr	r2, [r2, #8]
 80059de:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <HAL_ADC_Init+0xf8>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d113      	bne.n	8005a0e <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 80059e6:	2300      	movs	r3, #0
 80059e8:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80059ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80059ec:	f023 0303 	bic.w	r3, r3, #3
 80059f0:	f043 0301 	orr.w	r3, r3, #1
 80059f4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80059f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80059f8:	462f      	mov	r7, r5
 80059fa:	e7ca      	b.n	8005992 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80059fe:	f042 0220 	orr.w	r2, r2, #32
 8005a02:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a06:	f042 0201 	orr.w	r2, r2, #1
 8005a0a:	62e2      	str	r2, [r4, #44]	; 0x2c
 8005a0c:	e7cb      	b.n	80059a6 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8005a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a10:	f023 0312 	bic.w	r3, r3, #18
 8005a14:	f043 0310 	orr.w	r3, r3, #16
 8005a18:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a1c:	f043 0301 	orr.w	r3, r3, #1
 8005a20:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8005a22:	2001      	movs	r0, #1
 8005a24:	e7e7      	b.n	80059f6 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a28:	f043 0310 	orr.w	r3, r3, #16
 8005a2c:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8005a2e:	e7f8      	b.n	8005a22 <HAL_ADC_Init+0xe6>
 8005a30:	ffe1f7fd 	.word	0xffe1f7fd
 8005a34:	ff1f0efe 	.word	0xff1f0efe

08005a38 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8005a38:	2300      	movs	r3, #0
{
 8005a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005a3c:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a3e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8005a42:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d062      	beq.n	8005b0e <HAL_ADCEx_Calibration_Start+0xd6>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005a4e:	f7ff ff4f 	bl	80058f0 <ADC_ConversionStop_Disable>
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a52:	4605      	mov	r5, r0
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d132      	bne.n	8005abe <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a58:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005a5a:	2002      	movs	r0, #2
    ADC_STATE_CLR_SET(hadc->State,
 8005a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a60:	f023 0302 	bic.w	r3, r3, #2
 8005a64:	f043 0302 	orr.w	r3, r3, #2
 8005a68:	62a3      	str	r3, [r4, #40]	; 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8005a6a:	4b2a      	ldr	r3, [pc, #168]	; (8005b14 <HAL_ADCEx_Calibration_Start+0xdc>)
 8005a6c:	681e      	ldr	r6, [r3, #0]
 8005a6e:	f001 fa99 	bl	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005a72:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8005a76:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8005a78:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 8005a7a:	9b01      	ldr	r3, [sp, #4]
 8005a7c:	bb1b      	cbnz	r3, 8005ac6 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7ff fe98 	bl	80057b4 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8005a84:	6822      	ldr	r2, [r4, #0]
 8005a86:	6893      	ldr	r3, [r2, #8]
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8005a8e:	f7ff fdf7 	bl	8005680 <HAL_GetTick>
 8005a92:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	0711      	lsls	r1, r2, #28
 8005a9a:	d418      	bmi.n	8005ace <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	f042 0204 	orr.w	r2, r2, #4
 8005aa2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005aa4:	f7ff fdec 	bl	8005680 <HAL_GetTick>
 8005aa8:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	075b      	lsls	r3, r3, #29
 8005ab0:	d423      	bmi.n	8005afa <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ab2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ab4:	f023 0303 	bic.w	r3, r3, #3
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	62a3      	str	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005ac4:	e016      	b.n	8005af4 <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 8005ac6:	9b01      	ldr	r3, [sp, #4]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	e7d5      	b.n	8005a7a <HAL_ADCEx_Calibration_Start+0x42>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005ace:	f7ff fdd7 	bl	8005680 <HAL_GetTick>
 8005ad2:	1b80      	subs	r0, r0, r6
 8005ad4:	280a      	cmp	r0, #10
 8005ad6:	d9dd      	bls.n	8005a94 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	0718      	lsls	r0, r3, #28
 8005ade:	d5d9      	bpl.n	8005a94 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8005ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_ERROR;
 8005ae2:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 8005ae4:	f023 0312 	bic.w	r3, r3, #18
 8005ae8:	f043 0310 	orr.w	r3, r3, #16
 8005aec:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8005aee:	2300      	movs	r3, #0
 8005af0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8005af4:	4628      	mov	r0, r5
 8005af6:	b002      	add	sp, #8
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005afa:	f7ff fdc1 	bl	8005680 <HAL_GetTick>
 8005afe:	1b80      	subs	r0, r0, r6
 8005b00:	280a      	cmp	r0, #10
 8005b02:	d9d2      	bls.n	8005aaa <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	075a      	lsls	r2, r3, #29
 8005b0a:	d5ce      	bpl.n	8005aaa <HAL_ADCEx_Calibration_Start+0x72>
 8005b0c:	e7e8      	b.n	8005ae0 <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 8005b0e:	2502      	movs	r5, #2
 8005b10:	e7f0      	b.n	8005af4 <HAL_ADCEx_Calibration_Start+0xbc>
 8005b12:	bf00      	nop
 8005b14:	20000048 	.word	0x20000048

08005b18 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b18:	4907      	ldr	r1, [pc, #28]	; (8005b38 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005b1a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b1c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005b1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b26:	0412      	lsls	r2, r2, #16
 8005b28:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005b30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005b34:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005b36:	4770      	bx	lr
 8005b38:	e000ed00 	.word	0xe000ed00

08005b3c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b3c:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b3e:	b530      	push	{r4, r5, lr}
 8005b40:	68dc      	ldr	r4, [r3, #12]
 8005b42:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b46:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b4a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	bf28      	it	cs
 8005b50:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b52:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b58:	bf98      	it	ls
 8005b5a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b60:	bf88      	it	hi
 8005b62:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b64:	ea21 0303 	bic.w	r3, r1, r3
 8005b68:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b6a:	fa05 f404 	lsl.w	r4, r5, r4
 8005b6e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8005b72:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b74:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b78:	bfac      	ite	ge
 8005b7a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b7e:	4a07      	ldrlt	r2, [pc, #28]	; (8005b9c <HAL_NVIC_SetPriority+0x60>)
 8005b80:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005b84:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b86:	bfab      	itete	ge
 8005b88:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b8c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b90:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b94:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005b96:	bd30      	pop	{r4, r5, pc}
 8005b98:	e000ed00 	.word	0xe000ed00
 8005b9c:	e000ed14 	.word	0xe000ed14

08005ba0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	db08      	blt.n	8005bb6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	0942      	lsrs	r2, r0, #5
 8005ba8:	f000 001f 	and.w	r0, r0, #31
 8005bac:	fa03 f000 	lsl.w	r0, r3, r0
 8005bb0:	4b01      	ldr	r3, [pc, #4]	; (8005bb8 <HAL_NVIC_EnableIRQ+0x18>)
 8005bb2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005bb6:	4770      	bx	lr
 8005bb8:	e000e100 	.word	0xe000e100

08005bbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bbc:	3801      	subs	r0, #1
 8005bbe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005bc2:	d20a      	bcs.n	8005bda <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc4:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc8:	4a06      	ldr	r2, [pc, #24]	; (8005be4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bca:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bcc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bd0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bd2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bd4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bd8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005bda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000e010 	.word	0xe000e010
 8005be4:	e000ed00 	.word	0xe000ed00

08005be8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005be8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005bea:	b320      	cbz	r0, 8005c36 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005bec:	2214      	movs	r2, #20
 8005bee:	6801      	ldr	r1, [r0, #0]
 8005bf0:	4b12      	ldr	r3, [pc, #72]	; (8005c3c <HAL_DMA_Init+0x54>)
 8005bf2:	440b      	add	r3, r1
 8005bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8005bfc:	4b10      	ldr	r3, [pc, #64]	; (8005c40 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bfe:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8005c00:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005c02:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8005c06:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c08:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c0a:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c0e:	4323      	orrs	r3, r4
 8005c10:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005c12:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c16:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c18:	6944      	ldr	r4, [r0, #20]
 8005c1a:	4323      	orrs	r3, r4
 8005c1c:	6984      	ldr	r4, [r0, #24]
 8005c1e:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c20:	69c4      	ldr	r4, [r0, #28]
 8005c22:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8005c24:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c26:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c28:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c2c:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 8005c2e:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c30:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8005c32:	4618      	mov	r0, r3
}
 8005c34:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005c36:	2001      	movs	r0, #1
 8005c38:	e7fc      	b.n	8005c34 <HAL_DMA_Init+0x4c>
 8005c3a:	bf00      	nop
 8005c3c:	bffdfff8 	.word	0xbffdfff8
 8005c40:	40020000 	.word	0x40020000

08005c44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c44:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c46:	f890 4020 	ldrb.w	r4, [r0, #32]
 8005c4a:	2c01      	cmp	r4, #1
 8005c4c:	d034      	beq.n	8005cb8 <HAL_DMA_Start_IT+0x74>
 8005c4e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c50:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005c54:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	f04f 0600 	mov.w	r6, #0
 8005c5e:	f04f 0402 	mov.w	r4, #2
 8005c62:	d127      	bne.n	8005cb4 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c64:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c68:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c6a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8005c6c:	6826      	ldr	r6, [r4, #0]
 8005c6e:	f026 0601 	bic.w	r6, r6, #1
 8005c72:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005c74:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8005c78:	40bd      	lsls	r5, r7
 8005c7a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005c7c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c7e:	6843      	ldr	r3, [r0, #4]
 8005c80:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8005c82:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005c84:	bf0b      	itete	eq
 8005c86:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005c88:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8005c8a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005c8c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8005c8e:	b14b      	cbz	r3, 8005ca4 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8005c96:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c98:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005c9a:	6823      	ldr	r3, [r4, #0]
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6023      	str	r3, [r4, #0]
}
 8005ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	f023 0304 	bic.w	r3, r3, #4
 8005caa:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cac:	6823      	ldr	r3, [r4, #0]
 8005cae:	f043 030a 	orr.w	r3, r3, #10
 8005cb2:	e7f0      	b.n	8005c96 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8005cb4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8005cb8:	2002      	movs	r0, #2
 8005cba:	e7f2      	b.n	8005ca2 <HAL_DMA_Start_IT+0x5e>

08005cbc <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cbc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d006      	beq.n	8005cd2 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8005cce:	2001      	movs	r0, #1
 8005cd0:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd2:	6803      	ldr	r3, [r0, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	f022 020e 	bic.w	r2, r2, #14
 8005cda:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	f022 0201 	bic.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 8005cea:	408b      	lsls	r3, r1
 8005cec:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8005cee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cf2:	8403      	strh	r3, [r0, #32]
  return status; 
 8005cf4:	2000      	movs	r0, #0
}
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_DMA_Abort_IT>:
{  
 8005cf8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005cfa:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d003      	beq.n	8005d0a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d02:	2304      	movs	r3, #4
 8005d04:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005d06:	2001      	movs	r0, #1
}
 8005d08:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d0a:	6803      	ldr	r3, [r0, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	f022 020e 	bic.w	r2, r2, #14
 8005d12:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005d1c:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <HAL_DMA_Abort_IT+0x84>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01c      	beq.n	8005d5c <HAL_DMA_Abort_IT+0x64>
 8005d22:	3214      	adds	r2, #20
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d01b      	beq.n	8005d60 <HAL_DMA_Abort_IT+0x68>
 8005d28:	3214      	adds	r2, #20
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d01a      	beq.n	8005d64 <HAL_DMA_Abort_IT+0x6c>
 8005d2e:	3214      	adds	r2, #20
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01a      	beq.n	8005d6a <HAL_DMA_Abort_IT+0x72>
 8005d34:	3214      	adds	r2, #20
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01a      	beq.n	8005d70 <HAL_DMA_Abort_IT+0x78>
 8005d3a:	3214      	adds	r2, #20
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	bf0c      	ite	eq
 8005d40:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8005d44:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005d48:	4a0d      	ldr	r2, [pc, #52]	; (8005d80 <HAL_DMA_Abort_IT+0x88>)
 8005d4a:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d50:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005d52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005d54:	b17b      	cbz	r3, 8005d76 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8005d56:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2000      	movs	r0, #0
 8005d5a:	e7d5      	b.n	8005d08 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e7f3      	b.n	8005d48 <HAL_DMA_Abort_IT+0x50>
 8005d60:	2310      	movs	r3, #16
 8005d62:	e7f1      	b.n	8005d48 <HAL_DMA_Abort_IT+0x50>
 8005d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005d68:	e7ee      	b.n	8005d48 <HAL_DMA_Abort_IT+0x50>
 8005d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d6e:	e7eb      	b.n	8005d48 <HAL_DMA_Abort_IT+0x50>
 8005d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d74:	e7e8      	b.n	8005d48 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	4618      	mov	r0, r3
 8005d78:	e7c6      	b.n	8005d08 <HAL_DMA_Abort_IT+0x10>
 8005d7a:	bf00      	nop
 8005d7c:	40020008 	.word	0x40020008
 8005d80:	40020000 	.word	0x40020000

08005d84 <HAL_DMA_IRQHandler>:
{
 8005d84:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005d86:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d88:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005d8a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d8c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8005d8e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005d90:	4095      	lsls	r5, r2
 8005d92:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005d94:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005d96:	d032      	beq.n	8005dfe <HAL_DMA_IRQHandler+0x7a>
 8005d98:	074d      	lsls	r5, r1, #29
 8005d9a:	d530      	bpl.n	8005dfe <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005da0:	bf5e      	ittt	pl
 8005da2:	681a      	ldrpl	r2, [r3, #0]
 8005da4:	f022 0204 	bicpl.w	r2, r2, #4
 8005da8:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005daa:	4a3d      	ldr	r2, [pc, #244]	; (8005ea0 <HAL_DMA_IRQHandler+0x11c>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d019      	beq.n	8005de4 <HAL_DMA_IRQHandler+0x60>
 8005db0:	3214      	adds	r2, #20
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d018      	beq.n	8005de8 <HAL_DMA_IRQHandler+0x64>
 8005db6:	3214      	adds	r2, #20
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d017      	beq.n	8005dec <HAL_DMA_IRQHandler+0x68>
 8005dbc:	3214      	adds	r2, #20
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d017      	beq.n	8005df2 <HAL_DMA_IRQHandler+0x6e>
 8005dc2:	3214      	adds	r2, #20
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d017      	beq.n	8005df8 <HAL_DMA_IRQHandler+0x74>
 8005dc8:	3214      	adds	r2, #20
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	bf0c      	ite	eq
 8005dce:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8005dd2:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8005dd6:	4a33      	ldr	r2, [pc, #204]	; (8005ea4 <HAL_DMA_IRQHandler+0x120>)
 8005dd8:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8005dda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05c      	beq.n	8005e9a <HAL_DMA_IRQHandler+0x116>
}
 8005de0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8005de2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005de4:	2304      	movs	r3, #4
 8005de6:	e7f6      	b.n	8005dd6 <HAL_DMA_IRQHandler+0x52>
 8005de8:	2340      	movs	r3, #64	; 0x40
 8005dea:	e7f4      	b.n	8005dd6 <HAL_DMA_IRQHandler+0x52>
 8005dec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005df0:	e7f1      	b.n	8005dd6 <HAL_DMA_IRQHandler+0x52>
 8005df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005df6:	e7ee      	b.n	8005dd6 <HAL_DMA_IRQHandler+0x52>
 8005df8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005dfc:	e7eb      	b.n	8005dd6 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005dfe:	2502      	movs	r5, #2
 8005e00:	4095      	lsls	r5, r2
 8005e02:	4225      	tst	r5, r4
 8005e04:	d035      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xee>
 8005e06:	078d      	lsls	r5, r1, #30
 8005e08:	d533      	bpl.n	8005e72 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	0694      	lsls	r4, r2, #26
 8005e0e:	d406      	bmi.n	8005e1e <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	f022 020a 	bic.w	r2, r2, #10
 8005e16:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e1e:	4a20      	ldr	r2, [pc, #128]	; (8005ea0 <HAL_DMA_IRQHandler+0x11c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d019      	beq.n	8005e58 <HAL_DMA_IRQHandler+0xd4>
 8005e24:	3214      	adds	r2, #20
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_DMA_IRQHandler+0xd8>
 8005e2a:	3214      	adds	r2, #20
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d017      	beq.n	8005e60 <HAL_DMA_IRQHandler+0xdc>
 8005e30:	3214      	adds	r2, #20
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d017      	beq.n	8005e66 <HAL_DMA_IRQHandler+0xe2>
 8005e36:	3214      	adds	r2, #20
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d017      	beq.n	8005e6c <HAL_DMA_IRQHandler+0xe8>
 8005e3c:	3214      	adds	r2, #20
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	bf0c      	ite	eq
 8005e42:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8005e46:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8005e4a:	4a16      	ldr	r2, [pc, #88]	; (8005ea4 <HAL_DMA_IRQHandler+0x120>)
 8005e4c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005e54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e56:	e7c1      	b.n	8005ddc <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e7f6      	b.n	8005e4a <HAL_DMA_IRQHandler+0xc6>
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e7f4      	b.n	8005e4a <HAL_DMA_IRQHandler+0xc6>
 8005e60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e64:	e7f1      	b.n	8005e4a <HAL_DMA_IRQHandler+0xc6>
 8005e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e6a:	e7ee      	b.n	8005e4a <HAL_DMA_IRQHandler+0xc6>
 8005e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e70:	e7eb      	b.n	8005e4a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005e72:	2508      	movs	r5, #8
 8005e74:	4095      	lsls	r5, r2
 8005e76:	4225      	tst	r5, r4
 8005e78:	d00f      	beq.n	8005e9a <HAL_DMA_IRQHandler+0x116>
 8005e7a:	0709      	lsls	r1, r1, #28
 8005e7c:	d50d      	bpl.n	8005e9a <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e7e:	6819      	ldr	r1, [r3, #0]
 8005e80:	f021 010e 	bic.w	r1, r1, #14
 8005e84:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005e86:	2301      	movs	r3, #1
 8005e88:	fa03 f202 	lsl.w	r2, r3, r2
 8005e8c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e8e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e94:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8005e96:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005e98:	e7a0      	b.n	8005ddc <HAL_DMA_IRQHandler+0x58>
}
 8005e9a:	bc70      	pop	{r4, r5, r6}
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40020008 	.word	0x40020008
 8005ea4:	40020000 	.word	0x40020000

08005ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005eac:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8005eae:	4616      	mov	r6, r2
 8005eb0:	4b64      	ldr	r3, [pc, #400]	; (8006044 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005eb2:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006054 <HAL_GPIO_Init+0x1ac>
 8005eb6:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8006058 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005eba:	680d      	ldr	r5, [r1, #0]
 8005ebc:	fa35 f406 	lsrs.w	r4, r5, r6
 8005ec0:	d102      	bne.n	8005ec8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8005ec2:	b003      	add	sp, #12
 8005ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8005ec8:	f04f 0801 	mov.w	r8, #1
 8005ecc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ed0:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8005ed4:	ea38 0505 	bics.w	r5, r8, r5
 8005ed8:	d17c      	bne.n	8005fd4 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8005eda:	684d      	ldr	r5, [r1, #4]
 8005edc:	2d03      	cmp	r5, #3
 8005ede:	d807      	bhi.n	8005ef0 <HAL_GPIO_Init+0x48>
 8005ee0:	3d01      	subs	r5, #1
 8005ee2:	2d02      	cmp	r5, #2
 8005ee4:	f200 8088 	bhi.w	8005ff8 <HAL_GPIO_Init+0x150>
 8005ee8:	e8df f005 	tbb	[pc, r5]
 8005eec:	9b96      	.short	0x9b96
 8005eee:	a1          	.byte	0xa1
 8005eef:	00          	.byte	0x00
 8005ef0:	2d12      	cmp	r5, #18
 8005ef2:	f000 8099 	beq.w	8006028 <HAL_GPIO_Init+0x180>
 8005ef6:	d86f      	bhi.n	8005fd8 <HAL_GPIO_Init+0x130>
 8005ef8:	2d11      	cmp	r5, #17
 8005efa:	f000 808f 	beq.w	800601c <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005efe:	2cff      	cmp	r4, #255	; 0xff
 8005f00:	bf98      	it	ls
 8005f02:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f04:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005f08:	bf88      	it	hi
 8005f0a:	f100 0a04 	addhi.w	sl, r0, #4
 8005f0e:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f12:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005f16:	bf88      	it	hi
 8005f18:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005f1a:	fa09 fb05 	lsl.w	fp, r9, r5
 8005f1e:	ea28 080b 	bic.w	r8, r8, fp
 8005f22:	fa02 f505 	lsl.w	r5, r2, r5
 8005f26:	ea48 0505 	orr.w	r5, r8, r5
 8005f2a:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f2e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005f32:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8005f36:	d04d      	beq.n	8005fd4 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f38:	4f43      	ldr	r7, [pc, #268]	; (8006048 <HAL_GPIO_Init+0x1a0>)
 8005f3a:	f026 0803 	bic.w	r8, r6, #3
 8005f3e:	69bd      	ldr	r5, [r7, #24]
 8005f40:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8005f44:	f045 0501 	orr.w	r5, r5, #1
 8005f48:	61bd      	str	r5, [r7, #24]
 8005f4a:	69bd      	ldr	r5, [r7, #24]
 8005f4c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8005f50:	f005 0501 	and.w	r5, r5, #1
 8005f54:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f56:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005f5a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f5c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8005f60:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005f64:	fa09 f90b 	lsl.w	r9, r9, fp
 8005f68:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005f6c:	4d37      	ldr	r5, [pc, #220]	; (800604c <HAL_GPIO_Init+0x1a4>)
 8005f6e:	42a8      	cmp	r0, r5
 8005f70:	d061      	beq.n	8006036 <HAL_GPIO_Init+0x18e>
 8005f72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f76:	42a8      	cmp	r0, r5
 8005f78:	d05f      	beq.n	800603a <HAL_GPIO_Init+0x192>
 8005f7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f7e:	42a8      	cmp	r0, r5
 8005f80:	d05d      	beq.n	800603e <HAL_GPIO_Init+0x196>
 8005f82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005f86:	42a8      	cmp	r0, r5
 8005f88:	bf0c      	ite	eq
 8005f8a:	2503      	moveq	r5, #3
 8005f8c:	2504      	movne	r5, #4
 8005f8e:	fa05 f50b 	lsl.w	r5, r5, fp
 8005f92:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8005f96:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8005f9a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f9c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8005fa0:	bf14      	ite	ne
 8005fa2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005fa4:	43a5      	biceq	r5, r4
 8005fa6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8005fa8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005faa:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005fae:	bf14      	ite	ne
 8005fb0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005fb2:	43a5      	biceq	r5, r4
 8005fb4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8005fb6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005fb8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8005fbc:	bf14      	ite	ne
 8005fbe:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005fc0:	43a5      	biceq	r5, r4
 8005fc2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005fc4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005fc6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8005fca:	bf14      	ite	ne
 8005fcc:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005fce:	ea25 0404 	biceq.w	r4, r5, r4
 8005fd2:	60dc      	str	r4, [r3, #12]
	position++;
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	e770      	b.n	8005eba <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8005fd8:	4f1d      	ldr	r7, [pc, #116]	; (8006050 <HAL_GPIO_Init+0x1a8>)
 8005fda:	42bd      	cmp	r5, r7
 8005fdc:	d00c      	beq.n	8005ff8 <HAL_GPIO_Init+0x150>
 8005fde:	d817      	bhi.n	8006010 <HAL_GPIO_Init+0x168>
 8005fe0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800605c <HAL_GPIO_Init+0x1b4>
 8005fe4:	454d      	cmp	r5, r9
 8005fe6:	d007      	beq.n	8005ff8 <HAL_GPIO_Init+0x150>
 8005fe8:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8005fec:	454d      	cmp	r5, r9
 8005fee:	d003      	beq.n	8005ff8 <HAL_GPIO_Init+0x150>
 8005ff0:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005ff4:	454d      	cmp	r5, r9
 8005ff6:	d182      	bne.n	8005efe <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005ff8:	688a      	ldr	r2, [r1, #8]
 8005ffa:	b1d2      	cbz	r2, 8006032 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005ffc:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8005ffe:	bf08      	it	eq
 8006000:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006004:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8006008:	bf18      	it	ne
 800600a:	f8c0 8014 	strne.w	r8, [r0, #20]
 800600e:	e776      	b.n	8005efe <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8006010:	4565      	cmp	r5, ip
 8006012:	d0f1      	beq.n	8005ff8 <HAL_GPIO_Init+0x150>
 8006014:	4575      	cmp	r5, lr
 8006016:	e7ee      	b.n	8005ff6 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006018:	68ca      	ldr	r2, [r1, #12]
          break;
 800601a:	e770      	b.n	8005efe <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800601c:	68ca      	ldr	r2, [r1, #12]
 800601e:	3204      	adds	r2, #4
          break;
 8006020:	e76d      	b.n	8005efe <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006022:	68ca      	ldr	r2, [r1, #12]
 8006024:	3208      	adds	r2, #8
          break;
 8006026:	e76a      	b.n	8005efe <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006028:	68ca      	ldr	r2, [r1, #12]
 800602a:	320c      	adds	r2, #12
          break;
 800602c:	e767      	b.n	8005efe <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 800602e:	2200      	movs	r2, #0
 8006030:	e765      	b.n	8005efe <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006032:	2204      	movs	r2, #4
 8006034:	e763      	b.n	8005efe <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006036:	2500      	movs	r5, #0
 8006038:	e7a9      	b.n	8005f8e <HAL_GPIO_Init+0xe6>
 800603a:	2501      	movs	r5, #1
 800603c:	e7a7      	b.n	8005f8e <HAL_GPIO_Init+0xe6>
 800603e:	2502      	movs	r5, #2
 8006040:	e7a5      	b.n	8005f8e <HAL_GPIO_Init+0xe6>
 8006042:	bf00      	nop
 8006044:	40010400 	.word	0x40010400
 8006048:	40021000 	.word	0x40021000
 800604c:	40010800 	.word	0x40010800
 8006050:	10220000 	.word	0x10220000
 8006054:	10310000 	.word	0x10310000
 8006058:	10320000 	.word	0x10320000
 800605c:	10120000 	.word	0x10120000

08006060 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006060:	6883      	ldr	r3, [r0, #8]
 8006062:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006064:	bf14      	ite	ne
 8006066:	2001      	movne	r0, #1
 8006068:	2000      	moveq	r0, #0
 800606a:	4770      	bx	lr

0800606c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800606c:	b10a      	cbz	r2, 8006072 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800606e:	6101      	str	r1, [r0, #16]
  }
}
 8006070:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006072:	0409      	lsls	r1, r1, #16
 8006074:	e7fb      	b.n	800606e <HAL_GPIO_WritePin+0x2>
	...

08006078 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 800607a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800607c:	6951      	ldr	r1, [r2, #20]
 800607e:	4201      	tst	r1, r0
 8006080:	d002      	beq.n	8006088 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006082:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006084:	f7fb f96c 	bl	8001360 <HAL_GPIO_EXTI_Callback>
  }
}
 8006088:	bd08      	pop	{r3, pc}
 800608a:	bf00      	nop
 800608c:	40010400 	.word	0x40010400

08006090 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006090:	6801      	ldr	r1, [r0, #0]
 8006092:	2200      	movs	r2, #0
 8006094:	694b      	ldr	r3, [r1, #20]
 8006096:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 800609a:	d010      	beq.n	80060be <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800609c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80060a0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80060a2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80060a4:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060aa:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060ae:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060b4:	f043 0304 	orr.w	r3, r3, #4
 80060b8:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80060ba:	2001      	movs	r0, #1
 80060bc:	4770      	bx	lr
  }
  return HAL_OK;
 80060be:	4618      	mov	r0, r3
}
 80060c0:	4770      	bx	lr

080060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80060c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	4604      	mov	r4, r0
 80060c8:	460f      	mov	r7, r1
 80060ca:	4616      	mov	r6, r2
 80060cc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060ce:	6825      	ldr	r5, [r4, #0]
 80060d0:	6968      	ldr	r0, [r5, #20]
 80060d2:	ea27 0000 	bic.w	r0, r7, r0
 80060d6:	b280      	uxth	r0, r0
 80060d8:	b1b8      	cbz	r0, 800610a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060da:	696b      	ldr	r3, [r5, #20]
 80060dc:	055a      	lsls	r2, r3, #21
 80060de:	d516      	bpl.n	800610e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80060e2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060e8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ea:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80060ee:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060f4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060fe:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8006102:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006104:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006106:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800610a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800610e:	1c73      	adds	r3, r6, #1
 8006110:	d0de      	beq.n	80060d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006112:	f7ff fab5 	bl	8005680 <HAL_GetTick>
 8006116:	eba0 0008 	sub.w	r0, r0, r8
 800611a:	42b0      	cmp	r0, r6
 800611c:	d801      	bhi.n	8006122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800611e:	2e00      	cmp	r6, #0
 8006120:	d1d5      	bne.n	80060ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006122:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006124:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006126:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006128:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800612c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006130:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006132:	f042 0220 	orr.w	r2, r2, #32
 8006136:	e7e4      	b.n	8006102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08006138 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	4604      	mov	r4, r0
 800613c:	460d      	mov	r5, r1
 800613e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	075b      	lsls	r3, r3, #29
 8006146:	d501      	bpl.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8006148:	2000      	movs	r0, #0
}
 800614a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800614c:	4620      	mov	r0, r4
 800614e:	f7ff ff9f 	bl	8006090 <I2C_IsAcknowledgeFailed>
 8006152:	b9a8      	cbnz	r0, 8006180 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8006154:	1c6a      	adds	r2, r5, #1
 8006156:	d0f3      	beq.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006158:	f7ff fa92 	bl	8005680 <HAL_GetTick>
 800615c:	1b80      	subs	r0, r0, r6
 800615e:	42a8      	cmp	r0, r5
 8006160:	d801      	bhi.n	8006166 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8006162:	2d00      	cmp	r5, #0
 8006164:	d1ec      	bne.n	8006140 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006166:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006168:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800616a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800616c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006170:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006174:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006176:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800617a:	f042 0220 	orr.w	r2, r2, #32
 800617e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8006180:	2001      	movs	r0, #1
 8006182:	e7e2      	b.n	800614a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08006184 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8006184:	b570      	push	{r4, r5, r6, lr}
 8006186:	4604      	mov	r4, r0
 8006188:	460d      	mov	r5, r1
 800618a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800618c:	6821      	ldr	r1, [r4, #0]
 800618e:	694b      	ldr	r3, [r1, #20]
 8006190:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006194:	d001      	beq.n	800619a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8006196:	2000      	movs	r0, #0
 8006198:	e010      	b.n	80061bc <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800619a:	694a      	ldr	r2, [r1, #20]
 800619c:	06d2      	lsls	r2, r2, #27
 800619e:	d50e      	bpl.n	80061be <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061a0:	f06f 0210 	mvn.w	r2, #16
 80061a4:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80061a6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80061a8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80061b2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80061b4:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061b6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80061b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7ff fa5f 	bl	8005680 <HAL_GetTick>
 80061c2:	1b80      	subs	r0, r0, r6
 80061c4:	42a8      	cmp	r0, r5
 80061c6:	d801      	bhi.n	80061cc <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80061c8:	2d00      	cmp	r5, #0
 80061ca:	d1df      	bne.n	800618c <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061cc:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80061ce:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80061d0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80061d2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80061d6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80061da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80061dc:	f042 0220 	orr.w	r2, r2, #32
 80061e0:	e7e8      	b.n	80061b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080061e2 <I2C_WaitOnFlagUntilTimeout>:
{
 80061e2:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80061e6:	4606      	mov	r6, r0
 80061e8:	460f      	mov	r7, r1
 80061ea:	4691      	mov	r9, r2
 80061ec:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061f2:	6833      	ldr	r3, [r6, #0]
 80061f4:	f1ba 0f01 	cmp.w	sl, #1
 80061f8:	bf0c      	ite	eq
 80061fa:	695c      	ldreq	r4, [r3, #20]
 80061fc:	699c      	ldrne	r4, [r3, #24]
 80061fe:	ea27 0404 	bic.w	r4, r7, r4
 8006202:	b2a4      	uxth	r4, r4
 8006204:	fab4 f484 	clz	r4, r4
 8006208:	0964      	lsrs	r4, r4, #5
 800620a:	45a1      	cmp	r9, r4
 800620c:	d001      	beq.n	8006212 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800620e:	2000      	movs	r0, #0
 8006210:	e017      	b.n	8006242 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8006212:	1c6a      	adds	r2, r5, #1
 8006214:	d0ee      	beq.n	80061f4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006216:	f7ff fa33 	bl	8005680 <HAL_GetTick>
 800621a:	9b08      	ldr	r3, [sp, #32]
 800621c:	1ac0      	subs	r0, r0, r3
 800621e:	42a8      	cmp	r0, r5
 8006220:	d801      	bhi.n	8006226 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006222:	2d00      	cmp	r5, #0
 8006224:	d1e5      	bne.n	80061f2 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006226:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006228:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 800622a:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 800622c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800622e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006232:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006236:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006238:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800623c:	f042 0220 	orr.w	r2, r2, #32
 8006240:	6432      	str	r2, [r6, #64]	; 0x40
}
 8006242:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08006246 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8006246:	b570      	push	{r4, r5, r6, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	460d      	mov	r5, r1
 800624c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800624e:	6823      	ldr	r3, [r4, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	061b      	lsls	r3, r3, #24
 8006254:	d501      	bpl.n	800625a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8006256:	2000      	movs	r0, #0
}
 8006258:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800625a:	4620      	mov	r0, r4
 800625c:	f7ff ff18 	bl	8006090 <I2C_IsAcknowledgeFailed>
 8006260:	b9a8      	cbnz	r0, 800628e <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8006262:	1c6a      	adds	r2, r5, #1
 8006264:	d0f3      	beq.n	800624e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006266:	f7ff fa0b 	bl	8005680 <HAL_GetTick>
 800626a:	1b80      	subs	r0, r0, r6
 800626c:	42a8      	cmp	r0, r5
 800626e:	d801      	bhi.n	8006274 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8006270:	2d00      	cmp	r5, #0
 8006272:	d1ec      	bne.n	800624e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006274:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006276:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006278:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800627a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800627e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006282:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006284:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006288:	f042 0220 	orr.w	r2, r2, #32
 800628c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800628e:	2001      	movs	r0, #1
 8006290:	e7e2      	b.n	8006258 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08006294 <I2C_RequestMemoryWrite>:
{
 8006294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006298:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629a:	6802      	ldr	r2, [r0, #0]
{
 800629c:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629e:	6813      	ldr	r3, [r2, #0]
{
 80062a0:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a6:	6013      	str	r3, [r2, #0]
{
 80062a8:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80062ac:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062ae:	463b      	mov	r3, r7
 80062b0:	2200      	movs	r2, #0
 80062b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b6:	f8cd 8000 	str.w	r8, [sp]
{
 80062ba:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062bc:	f7ff ff91 	bl	80061e2 <I2C_WaitOnFlagUntilTimeout>
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	b138      	cbz	r0, 80062d4 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	05db      	lsls	r3, r3, #23
 80062c8:	d502      	bpl.n	80062d0 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ce:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80062d0:	2003      	movs	r0, #3
 80062d2:	e00a      	b.n	80062ea <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062d4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80062d8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062da:	463a      	mov	r2, r7
 80062dc:	4643      	mov	r3, r8
 80062de:	4620      	mov	r0, r4
 80062e0:	4917      	ldr	r1, [pc, #92]	; (8006340 <I2C_RequestMemoryWrite+0xac>)
 80062e2:	f7ff feee 	bl	80060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062e6:	b118      	cbz	r0, 80062f0 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80062e8:	2001      	movs	r0, #1
}
 80062ea:	b005      	add	sp, #20
 80062ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	9003      	str	r0, [sp, #12]
 80062f4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062f6:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062f8:	9203      	str	r2, [sp, #12]
 80062fa:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fc:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062fe:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006300:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006302:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006304:	f7ff ff9f 	bl	8006246 <I2C_WaitOnTXEFlagUntilTimeout>
 8006308:	b140      	cbz	r0, 800631c <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800630c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800630e:	bf01      	itttt	eq
 8006310:	6822      	ldreq	r2, [r4, #0]
 8006312:	6813      	ldreq	r3, [r2, #0]
 8006314:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006318:	6013      	streq	r3, [r2, #0]
 800631a:	e7e5      	b.n	80062e8 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800631c:	f1b9 0f01 	cmp.w	r9, #1
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	d102      	bne.n	800632a <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006324:	b2ed      	uxtb	r5, r5
 8006326:	611d      	str	r5, [r3, #16]
 8006328:	e7df      	b.n	80062ea <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800632a:	0a2a      	lsrs	r2, r5, #8
 800632c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800632e:	4639      	mov	r1, r7
 8006330:	4642      	mov	r2, r8
 8006332:	4620      	mov	r0, r4
 8006334:	f7ff ff87 	bl	8006246 <I2C_WaitOnTXEFlagUntilTimeout>
 8006338:	2800      	cmp	r0, #0
 800633a:	d1e6      	bne.n	800630a <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800633c:	6823      	ldr	r3, [r4, #0]
 800633e:	e7f1      	b.n	8006324 <I2C_RequestMemoryWrite+0x90>
 8006340:	00010002 	.word	0x00010002

08006344 <I2C_RequestMemoryRead>:
{
 8006344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	469a      	mov	sl, r3
 800634a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800634e:	6803      	ldr	r3, [r0, #0]
{
 8006350:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006352:	681a      	ldr	r2, [r3, #0]
{
 8006354:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006356:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800635a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800635c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800635e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006366:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006368:	463b      	mov	r3, r7
 800636a:	2200      	movs	r2, #0
 800636c:	f8cd 8000 	str.w	r8, [sp]
{
 8006370:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006372:	f7ff ff36 	bl	80061e2 <I2C_WaitOnFlagUntilTimeout>
 8006376:	6823      	ldr	r3, [r4, #0]
 8006378:	b148      	cbz	r0, 800638e <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800637a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800637c:	05db      	lsls	r3, r3, #23
 800637e:	d502      	bpl.n	8006386 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006380:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006384:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8006386:	2003      	movs	r0, #3
}
 8006388:	b004      	add	sp, #16
 800638a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800638e:	fa5f f986 	uxtb.w	r9, r6
 8006392:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8006396:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006398:	463a      	mov	r2, r7
 800639a:	4643      	mov	r3, r8
 800639c:	4620      	mov	r0, r4
 800639e:	4929      	ldr	r1, [pc, #164]	; (8006444 <I2C_RequestMemoryRead+0x100>)
 80063a0:	f7ff fe8f 	bl	80060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063a4:	b108      	cbz	r0, 80063aa <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80063a6:	2001      	movs	r0, #1
 80063a8:	e7ee      	b.n	8006388 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	9003      	str	r0, [sp, #12]
 80063ae:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b0:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b2:	9203      	str	r2, [sp, #12]
 80063b4:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ba:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063bc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063be:	f7ff ff42 	bl	8006246 <I2C_WaitOnTXEFlagUntilTimeout>
 80063c2:	b140      	cbz	r0, 80063d6 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063c6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c8:	bf01      	itttt	eq
 80063ca:	6822      	ldreq	r2, [r4, #0]
 80063cc:	6813      	ldreq	r3, [r2, #0]
 80063ce:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80063d2:	6013      	streq	r3, [r2, #0]
 80063d4:	e7e7      	b.n	80063a6 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063d6:	f1ba 0f01 	cmp.w	sl, #1
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	d11a      	bne.n	8006414 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063de:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e0:	4642      	mov	r2, r8
 80063e2:	4639      	mov	r1, r7
 80063e4:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063e6:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063e8:	f7ff ff2d 	bl	8006246 <I2C_WaitOnTXEFlagUntilTimeout>
 80063ec:	4602      	mov	r2, r0
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d1e8      	bne.n	80063c4 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f2:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063f4:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f6:	680b      	ldr	r3, [r1, #0]
 80063f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063fc:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063fe:	463b      	mov	r3, r7
 8006400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006404:	f8cd 8000 	str.w	r8, [sp]
 8006408:	f7ff feeb 	bl	80061e2 <I2C_WaitOnFlagUntilTimeout>
 800640c:	6822      	ldr	r2, [r4, #0]
 800640e:	b160      	cbz	r0, 800642a <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006410:	6813      	ldr	r3, [r2, #0]
 8006412:	e7b3      	b.n	800637c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006414:	0a2a      	lsrs	r2, r5, #8
 8006416:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006418:	4639      	mov	r1, r7
 800641a:	4642      	mov	r2, r8
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff ff12 	bl	8006246 <I2C_WaitOnTXEFlagUntilTimeout>
 8006422:	2800      	cmp	r0, #0
 8006424:	d1ce      	bne.n	80063c4 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	e7d9      	b.n	80063de <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800642a:	f049 0301 	orr.w	r3, r9, #1
 800642e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006430:	4620      	mov	r0, r4
 8006432:	4643      	mov	r3, r8
 8006434:	463a      	mov	r2, r7
 8006436:	4903      	ldr	r1, [pc, #12]	; (8006444 <I2C_RequestMemoryRead+0x100>)
 8006438:	f7ff fe43 	bl	80060c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 800643c:	3800      	subs	r0, #0
 800643e:	bf18      	it	ne
 8006440:	2001      	movne	r0, #1
 8006442:	e7a1      	b.n	8006388 <I2C_RequestMemoryRead+0x44>
 8006444:	00010002 	.word	0x00010002

08006448 <HAL_I2C_Init>:
{
 8006448:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800644a:	4604      	mov	r4, r0
 800644c:	b908      	cbnz	r0, 8006452 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800644e:	2001      	movs	r0, #1
}
 8006450:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006452:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006456:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800645a:	b91b      	cbnz	r3, 8006464 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800645c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006460:	f7fe f8b0 	bl	80045c4 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006464:	2324      	movs	r3, #36	; 0x24
 8006466:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800646a:	6823      	ldr	r3, [r4, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800647a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006482:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006484:	f000 fcf6 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006488:	4a3f      	ldr	r2, [pc, #252]	; (8006588 <HAL_I2C_Init+0x140>)
 800648a:	6863      	ldr	r3, [r4, #4]
 800648c:	4293      	cmp	r3, r2
 800648e:	bf94      	ite	ls
 8006490:	4a3e      	ldrls	r2, [pc, #248]	; (800658c <HAL_I2C_Init+0x144>)
 8006492:	4a3f      	ldrhi	r2, [pc, #252]	; (8006590 <HAL_I2C_Init+0x148>)
 8006494:	4290      	cmp	r0, r2
 8006496:	bf8c      	ite	hi
 8006498:	2200      	movhi	r2, #0
 800649a:	2201      	movls	r2, #1
 800649c:	2a00      	cmp	r2, #0
 800649e:	d1d6      	bne.n	800644e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80064a0:	4e3c      	ldr	r6, [pc, #240]	; (8006594 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064a2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80064a4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80064a8:	6851      	ldr	r1, [r2, #4]
 80064aa:	3801      	subs	r0, #1
 80064ac:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80064b0:	4331      	orrs	r1, r6
 80064b2:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80064b4:	4934      	ldr	r1, [pc, #208]	; (8006588 <HAL_I2C_Init+0x140>)
 80064b6:	6a15      	ldr	r5, [r2, #32]
 80064b8:	428b      	cmp	r3, r1
 80064ba:	bf81      	itttt	hi
 80064bc:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80064c0:	4371      	mulhi	r1, r6
 80064c2:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80064c6:	fbb1 f1f6 	udivhi	r1, r1, r6
 80064ca:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80064ce:	bf94      	ite	ls
 80064d0:	1c71      	addls	r1, r6, #1
 80064d2:	3101      	addhi	r1, #1
 80064d4:	4329      	orrs	r1, r5
 80064d6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80064d8:	69d1      	ldr	r1, [r2, #28]
 80064da:	4d2b      	ldr	r5, [pc, #172]	; (8006588 <HAL_I2C_Init+0x140>)
 80064dc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80064e6:	d832      	bhi.n	800654e <HAL_I2C_Init+0x106>
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80064ee:	1c43      	adds	r3, r0, #1
 80064f0:	f640 70fc 	movw	r0, #4092	; 0xffc
 80064f4:	4203      	tst	r3, r0
 80064f6:	d042      	beq.n	800657e <HAL_I2C_Init+0x136>
 80064f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064fc:	430b      	orrs	r3, r1
 80064fe:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006500:	6811      	ldr	r1, [r2, #0]
 8006502:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006506:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800650a:	4303      	orrs	r3, r0
 800650c:	430b      	orrs	r3, r1
 800650e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006510:	6891      	ldr	r1, [r2, #8]
 8006512:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8006516:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800651a:	4303      	orrs	r3, r0
 800651c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006520:	430b      	orrs	r3, r1
 8006522:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006524:	68d1      	ldr	r1, [r2, #12]
 8006526:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800652a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800652e:	4303      	orrs	r3, r0
 8006530:	430b      	orrs	r3, r1
 8006532:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006534:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006536:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8006538:	f043 0301 	orr.w	r3, r3, #1
 800653c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800653e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006540:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006542:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006546:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006548:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800654c:	e780      	b.n	8006450 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800654e:	68a5      	ldr	r5, [r4, #8]
 8006550:	b955      	cbnz	r5, 8006568 <HAL_I2C_Init+0x120>
 8006552:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006556:	fbb0 f3f3 	udiv	r3, r0, r3
 800655a:	3301      	adds	r3, #1
 800655c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006560:	b17b      	cbz	r3, 8006582 <HAL_I2C_Init+0x13a>
 8006562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006566:	e7c9      	b.n	80064fc <HAL_I2C_Init+0xb4>
 8006568:	2519      	movs	r5, #25
 800656a:	436b      	muls	r3, r5
 800656c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006570:	3301      	adds	r3, #1
 8006572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006576:	b123      	cbz	r3, 8006582 <HAL_I2C_Init+0x13a>
 8006578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800657c:	e7be      	b.n	80064fc <HAL_I2C_Init+0xb4>
 800657e:	2304      	movs	r3, #4
 8006580:	e7bc      	b.n	80064fc <HAL_I2C_Init+0xb4>
 8006582:	2301      	movs	r3, #1
 8006584:	e7ba      	b.n	80064fc <HAL_I2C_Init+0xb4>
 8006586:	bf00      	nop
 8006588:	000186a0 	.word	0x000186a0
 800658c:	001e847f 	.word	0x001e847f
 8006590:	003d08ff 	.word	0x003d08ff
 8006594:	000f4240 	.word	0x000f4240

08006598 <HAL_I2C_Mem_Write>:
{
 8006598:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800659c:	4604      	mov	r4, r0
 800659e:	4699      	mov	r9, r3
 80065a0:	460f      	mov	r7, r1
 80065a2:	4690      	mov	r8, r2
 80065a4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80065a6:	f7ff f86b 	bl	8005680 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80065ae:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b0:	2b20      	cmp	r3, #32
 80065b2:	d003      	beq.n	80065bc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80065b4:	2002      	movs	r0, #2
}
 80065b6:	b003      	add	sp, #12
 80065b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065bc:	9000      	str	r0, [sp, #0]
 80065be:	2319      	movs	r3, #25
 80065c0:	2201      	movs	r2, #1
 80065c2:	4620      	mov	r0, r4
 80065c4:	493a      	ldr	r1, [pc, #232]	; (80066b0 <HAL_I2C_Mem_Write+0x118>)
 80065c6:	f7ff fe0c 	bl	80061e2 <I2C_WaitOnFlagUntilTimeout>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d1f2      	bne.n	80065b4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80065ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d0ee      	beq.n	80065b4 <HAL_I2C_Mem_Write+0x1c>
 80065d6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065d8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80065da:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065de:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065e0:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e2:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80065e4:	bf58      	it	pl
 80065e6:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065e8:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80065ea:	bf5c      	itt	pl
 80065ec:	f043 0301 	orrpl.w	r3, r3, #1
 80065f0:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065f2:	6803      	ldr	r3, [r0, #0]
 80065f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f8:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065fa:	2321      	movs	r3, #33	; 0x21
 80065fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006600:	2340      	movs	r3, #64	; 0x40
 8006602:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006606:	2300      	movs	r3, #0
 8006608:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800660a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800660c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800660e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006610:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006614:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8006618:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800661a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800661c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800661e:	4b25      	ldr	r3, [pc, #148]	; (80066b4 <HAL_I2C_Mem_Write+0x11c>)
 8006620:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006622:	464b      	mov	r3, r9
 8006624:	f7ff fe36 	bl	8006294 <I2C_RequestMemoryWrite>
 8006628:	2800      	cmp	r0, #0
 800662a:	d02a      	beq.n	8006682 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 800662c:	2001      	movs	r0, #1
 800662e:	e7c2      	b.n	80065b6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006630:	f7ff fe09 	bl	8006246 <I2C_WaitOnTXEFlagUntilTimeout>
 8006634:	b140      	cbz	r0, 8006648 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006638:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663a:	bf01      	itttt	eq
 800663c:	6822      	ldreq	r2, [r4, #0]
 800663e:	6813      	ldreq	r3, [r2, #0]
 8006640:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006644:	6013      	streq	r3, [r2, #0]
 8006646:	e7f1      	b.n	800662c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006648:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800664a:	6827      	ldr	r7, [r4, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006652:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8006654:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006656:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006658:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800665a:	3a01      	subs	r2, #1
 800665c:	b292      	uxth	r2, r2
 800665e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006660:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8006662:	1e48      	subs	r0, r1, #1
 8006664:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006666:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8006668:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800666a:	d50a      	bpl.n	8006682 <HAL_I2C_Mem_Write+0xea>
 800666c:	b148      	cbz	r0, 8006682 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800666e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8006670:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006672:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8006674:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006676:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006678:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800667a:	3b01      	subs	r3, #1
 800667c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800667e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006680:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006682:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006684:	462a      	mov	r2, r5
 8006686:	4631      	mov	r1, r6
 8006688:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1d0      	bne.n	8006630 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800668e:	f7ff fd53 	bl	8006138 <I2C_WaitOnBTFFlagUntilTimeout>
 8006692:	2800      	cmp	r0, #0
 8006694:	d1cf      	bne.n	8006636 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006696:	6822      	ldr	r2, [r4, #0]
 8006698:	6813      	ldr	r3, [r2, #0]
 800669a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800669e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80066a0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80066a2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80066a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066aa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80066ae:	e782      	b.n	80065b6 <HAL_I2C_Mem_Write+0x1e>
 80066b0:	00100002 	.word	0x00100002
 80066b4:	ffff0000 	.word	0xffff0000

080066b8 <HAL_I2C_Mem_Read>:
{
 80066b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066bc:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80066be:	2300      	movs	r3, #0
{
 80066c0:	4604      	mov	r4, r0
 80066c2:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 80066c4:	9303      	str	r3, [sp, #12]
{
 80066c6:	460d      	mov	r5, r1
 80066c8:	4690      	mov	r8, r2
 80066ca:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80066cc:	f7fe ffd8 	bl	8005680 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80066d4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d004      	beq.n	80066e4 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80066da:	2502      	movs	r5, #2
}
 80066dc:	4628      	mov	r0, r5
 80066de:	b009      	add	sp, #36	; 0x24
 80066e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066e4:	9000      	str	r0, [sp, #0]
 80066e6:	2319      	movs	r3, #25
 80066e8:	2201      	movs	r2, #1
 80066ea:	4620      	mov	r0, r4
 80066ec:	498d      	ldr	r1, [pc, #564]	; (8006924 <HAL_I2C_Mem_Read+0x26c>)
 80066ee:	f7ff fd78 	bl	80061e2 <I2C_WaitOnFlagUntilTimeout>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d1f1      	bne.n	80066da <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80066f6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d0ed      	beq.n	80066da <HAL_I2C_Mem_Read+0x22>
 80066fe:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006700:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8006702:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006706:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006708:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800670a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800670c:	bf58      	it	pl
 800670e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006710:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8006712:	bf5c      	itt	pl
 8006714:	f043 0301 	orrpl.w	r3, r3, #1
 8006718:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800671a:	6803      	ldr	r3, [r0, #0]
 800671c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006720:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006722:	2322      	movs	r3, #34	; 0x22
 8006724:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006728:	2340      	movs	r3, #64	; 0x40
 800672a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800672e:	2300      	movs	r3, #0
 8006730:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006732:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006734:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8006736:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006738:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800673c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8006740:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006742:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006744:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006746:	4b78      	ldr	r3, [pc, #480]	; (8006928 <HAL_I2C_Mem_Read+0x270>)
 8006748:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800674a:	464b      	mov	r3, r9
 800674c:	f7ff fdfa 	bl	8006344 <I2C_RequestMemoryRead>
 8006750:	4605      	mov	r5, r0
 8006752:	b108      	cbz	r0, 8006758 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8006754:	2501      	movs	r5, #1
 8006756:	e7c1      	b.n	80066dc <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8006758:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	b9c2      	cbnz	r2, 8006790 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800675e:	9004      	str	r0, [sp, #16]
 8006760:	695a      	ldr	r2, [r3, #20]
 8006762:	9204      	str	r2, [sp, #16]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	9204      	str	r2, [sp, #16]
 8006768:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006770:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006772:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800692c <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006776:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8006930 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 800677a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800677c:	2b00      	cmp	r3, #0
 800677e:	d137      	bne.n	80067f0 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8006780:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8006782:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8006786:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800678a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800678e:	e7a5      	b.n	80066dc <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8006790:	2a01      	cmp	r2, #1
 8006792:	d111      	bne.n	80067b8 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800679a:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800679c:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	9005      	str	r0, [sp, #20]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	9205      	str	r2, [sp, #20]
 80067a6:	699a      	ldr	r2, [r3, #24]
 80067a8:	9205      	str	r2, [sp, #20]
 80067aa:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80067b4:	b662      	cpsie	i
}
 80067b6:	e7dc      	b.n	8006772 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80067b8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067ba:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80067bc:	d10e      	bne.n	80067dc <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80067c4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	9006      	str	r0, [sp, #24]
 80067ca:	695a      	ldr	r2, [r3, #20]
 80067cc:	9206      	str	r2, [sp, #24]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	9206      	str	r2, [sp, #24]
 80067d2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067da:	e7ea      	b.n	80067b2 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067e0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e2:	9007      	str	r0, [sp, #28]
 80067e4:	695a      	ldr	r2, [r3, #20]
 80067e6:	9207      	str	r2, [sp, #28]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	9307      	str	r3, [sp, #28]
 80067ec:	9b07      	ldr	r3, [sp, #28]
 80067ee:	e7c0      	b.n	8006772 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d878      	bhi.n	80068e6 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d115      	bne.n	8006824 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067f8:	4632      	mov	r2, r6
 80067fa:	4639      	mov	r1, r7
 80067fc:	4620      	mov	r0, r4
 80067fe:	f7ff fcc1 	bl	8006184 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006802:	2800      	cmp	r0, #0
 8006804:	d1a6      	bne.n	8006754 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	691a      	ldr	r2, [r3, #16]
 800680a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800680c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800680e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006810:	3301      	adds	r3, #1
 8006812:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006814:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006816:	3b01      	subs	r3, #1
 8006818:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800681a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800681c:	3b01      	subs	r3, #1
 800681e:	b29b      	uxth	r3, r3
 8006820:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006822:	e7aa      	b.n	800677a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8006824:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	463b      	mov	r3, r7
 800682c:	4641      	mov	r1, r8
 800682e:	4620      	mov	r0, r4
 8006830:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8006832:	d118      	bne.n	8006866 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006834:	f7ff fcd5 	bl	80061e2 <I2C_WaitOnFlagUntilTimeout>
 8006838:	2800      	cmp	r0, #0
 800683a:	d18b      	bne.n	8006754 <HAL_I2C_Mem_Read+0x9c>
 800683c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006846:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006848:	691a      	ldr	r2, [r3, #16]
 800684a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800684c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800684e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006850:	3301      	adds	r3, #1
 8006852:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006854:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006856:	3b01      	subs	r3, #1
 8006858:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800685a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800685c:	3b01      	subs	r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006862:	b662      	cpsie	i
 8006864:	e7cf      	b.n	8006806 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006866:	f7ff fcbc 	bl	80061e2 <I2C_WaitOnFlagUntilTimeout>
 800686a:	2800      	cmp	r0, #0
 800686c:	f47f af72 	bne.w	8006754 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006870:	6822      	ldr	r2, [r4, #0]
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006878:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800687a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	691a      	ldr	r2, [r3, #16]
 8006880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006882:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006884:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 8006888:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800688a:	1c4b      	adds	r3, r1, #1
 800688c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800688e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006890:	3b01      	subs	r3, #1
 8006892:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006894:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006896:	3b01      	subs	r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800689c:	f8d9 3000 	ldr.w	r3, [r9]
 80068a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80068a4:	2323      	movs	r3, #35	; 0x23
 80068a6:	4353      	muls	r3, r2
 80068a8:	9303      	str	r3, [sp, #12]
            count--;
 80068aa:	9b03      	ldr	r3, [sp, #12]
 80068ac:	3b01      	subs	r3, #1
 80068ae:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80068b0:	9b03      	ldr	r3, [sp, #12]
 80068b2:	b96b      	cbnz	r3, 80068d0 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80068b4:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80068b6:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80068b8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80068c2:	f042 0220 	orr.w	r2, r2, #32
 80068c6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80068c8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80068ca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80068ce:	e741      	b.n	8006754 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	0750      	lsls	r0, r2, #29
 80068d6:	d5e8      	bpl.n	80068aa <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068de:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	704b      	strb	r3, [r1, #1]
 80068e4:	e7b3      	b.n	800684e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068e6:	4632      	mov	r2, r6
 80068e8:	4639      	mov	r1, r7
 80068ea:	4620      	mov	r0, r4
 80068ec:	f7ff fc4a 	bl	8006184 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	f47f af2f 	bne.w	8006754 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068fc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80068fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006900:	1c53      	adds	r3, r2, #1
 8006902:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006904:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006906:	3b01      	subs	r3, #1
 8006908:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800690a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800690c:	3b01      	subs	r3, #1
 800690e:	b29b      	uxth	r3, r3
 8006910:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	6959      	ldr	r1, [r3, #20]
 8006916:	0749      	lsls	r1, r1, #29
 8006918:	f57f af2f 	bpl.w	800677a <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	7053      	strb	r3, [r2, #1]
 8006920:	e775      	b.n	800680e <HAL_I2C_Mem_Read+0x156>
 8006922:	bf00      	nop
 8006924:	00100002 	.word	0x00100002
 8006928:	ffff0000 	.word	0xffff0000
 800692c:	00010004 	.word	0x00010004
 8006930:	20000048 	.word	0x20000048

08006934 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006934:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006936:	4604      	mov	r4, r0
 8006938:	b308      	cbz	r0, 800697e <HAL_IWDG_Init+0x4a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800693a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800693e:	6803      	ldr	r3, [r0, #0]
 8006940:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006942:	f245 5255 	movw	r2, #21845	; 0x5555
 8006946:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006948:	6842      	ldr	r2, [r0, #4]
 800694a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800694c:	6882      	ldr	r2, [r0, #8]
 800694e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006950:	f7fe fe96 	bl	8005680 <HAL_GetTick>
 8006954:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	68d0      	ldr	r0, [r2, #12]
 800695a:	f010 0003 	ands.w	r0, r0, #3
 800695e:	d103      	bne.n	8006968 <HAL_IWDG_Init+0x34>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006960:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8006964:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8006966:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006968:	f7fe fe8a 	bl	8005680 <HAL_GetTick>
 800696c:	1b40      	subs	r0, r0, r5
 800696e:	2827      	cmp	r0, #39	; 0x27
 8006970:	d9f1      	bls.n	8006956 <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	079b      	lsls	r3, r3, #30
 8006978:	d0ed      	beq.n	8006956 <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 800697a:	2003      	movs	r0, #3
 800697c:	e7f3      	b.n	8006966 <HAL_IWDG_Init+0x32>
    return HAL_ERROR;
 800697e:	2001      	movs	r0, #1
 8006980:	e7f1      	b.n	8006966 <HAL_IWDG_Init+0x32>

08006982 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006982:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006986:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 8006988:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800698a:	601a      	str	r2, [r3, #0]
}
 800698c:	4770      	bx	lr
	...

08006990 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006990:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006994:	4605      	mov	r5, r0
 8006996:	b338      	cbz	r0, 80069e8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006998:	6803      	ldr	r3, [r0, #0]
 800699a:	07db      	lsls	r3, r3, #31
 800699c:	d410      	bmi.n	80069c0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800699e:	682b      	ldr	r3, [r5, #0]
 80069a0:	079f      	lsls	r7, r3, #30
 80069a2:	d45e      	bmi.n	8006a62 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	0719      	lsls	r1, r3, #28
 80069a8:	f100 8095 	bmi.w	8006ad6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069ac:	682b      	ldr	r3, [r5, #0]
 80069ae:	075a      	lsls	r2, r3, #29
 80069b0:	f100 80bf 	bmi.w	8006b32 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069b4:	69e8      	ldr	r0, [r5, #28]
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f040 812c 	bne.w	8006c14 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80069bc:	2000      	movs	r0, #0
 80069be:	e029      	b.n	8006a14 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069c0:	4c8f      	ldr	r4, [pc, #572]	; (8006c00 <HAL_RCC_OscConfig+0x270>)
 80069c2:	6863      	ldr	r3, [r4, #4]
 80069c4:	f003 030c 	and.w	r3, r3, #12
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d007      	beq.n	80069dc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069cc:	6863      	ldr	r3, [r4, #4]
 80069ce:	f003 030c 	and.w	r3, r3, #12
 80069d2:	2b08      	cmp	r3, #8
 80069d4:	d10a      	bne.n	80069ec <HAL_RCC_OscConfig+0x5c>
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	03de      	lsls	r6, r3, #15
 80069da:	d507      	bpl.n	80069ec <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069dc:	6823      	ldr	r3, [r4, #0]
 80069de:	039c      	lsls	r4, r3, #14
 80069e0:	d5dd      	bpl.n	800699e <HAL_RCC_OscConfig+0xe>
 80069e2:	686b      	ldr	r3, [r5, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1da      	bne.n	800699e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80069e8:	2001      	movs	r0, #1
 80069ea:	e013      	b.n	8006a14 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ec:	686b      	ldr	r3, [r5, #4]
 80069ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069f2:	d112      	bne.n	8006a1a <HAL_RCC_OscConfig+0x8a>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80069fc:	f7fe fe40 	bl	8005680 <HAL_GetTick>
 8006a00:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	0398      	lsls	r0, r3, #14
 8006a06:	d4ca      	bmi.n	800699e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a08:	f7fe fe3a 	bl	8005680 <HAL_GetTick>
 8006a0c:	1b80      	subs	r0, r0, r6
 8006a0e:	2864      	cmp	r0, #100	; 0x64
 8006a10:	d9f7      	bls.n	8006a02 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006a12:	2003      	movs	r0, #3
}
 8006a14:	b002      	add	sp, #8
 8006a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a1a:	b99b      	cbnz	r3, 8006a44 <HAL_RCC_OscConfig+0xb4>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006a2c:	f7fe fe28 	bl	8005680 <HAL_GetTick>
 8006a30:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	0399      	lsls	r1, r3, #14
 8006a36:	d5b2      	bpl.n	800699e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a38:	f7fe fe22 	bl	8005680 <HAL_GetTick>
 8006a3c:	1b80      	subs	r0, r0, r6
 8006a3e:	2864      	cmp	r0, #100	; 0x64
 8006a40:	d9f7      	bls.n	8006a32 <HAL_RCC_OscConfig+0xa2>
 8006a42:	e7e6      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a48:	6823      	ldr	r3, [r4, #0]
 8006a4a:	d103      	bne.n	8006a54 <HAL_RCC_OscConfig+0xc4>
 8006a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a50:	6023      	str	r3, [r4, #0]
 8006a52:	e7cf      	b.n	80069f4 <HAL_RCC_OscConfig+0x64>
 8006a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a60:	e7cb      	b.n	80069fa <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a62:	4c67      	ldr	r4, [pc, #412]	; (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006a64:	6863      	ldr	r3, [r4, #4]
 8006a66:	f013 0f0c 	tst.w	r3, #12
 8006a6a:	d007      	beq.n	8006a7c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006a6c:	6863      	ldr	r3, [r4, #4]
 8006a6e:	f003 030c 	and.w	r3, r3, #12
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d110      	bne.n	8006a98 <HAL_RCC_OscConfig+0x108>
 8006a76:	6863      	ldr	r3, [r4, #4]
 8006a78:	03da      	lsls	r2, r3, #15
 8006a7a:	d40d      	bmi.n	8006a98 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	079b      	lsls	r3, r3, #30
 8006a80:	d502      	bpl.n	8006a88 <HAL_RCC_OscConfig+0xf8>
 8006a82:	692b      	ldr	r3, [r5, #16]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d1af      	bne.n	80069e8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	696a      	ldr	r2, [r5, #20]
 8006a8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006a94:	6023      	str	r3, [r4, #0]
 8006a96:	e785      	b.n	80069a4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a98:	692a      	ldr	r2, [r5, #16]
 8006a9a:	4b5a      	ldr	r3, [pc, #360]	; (8006c04 <HAL_RCC_OscConfig+0x274>)
 8006a9c:	b16a      	cbz	r2, 8006aba <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006aa2:	f7fe fded 	bl	8005680 <HAL_GetTick>
 8006aa6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	079f      	lsls	r7, r3, #30
 8006aac:	d4ec      	bmi.n	8006a88 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aae:	f7fe fde7 	bl	8005680 <HAL_GetTick>
 8006ab2:	1b80      	subs	r0, r0, r6
 8006ab4:	2802      	cmp	r0, #2
 8006ab6:	d9f7      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x118>
 8006ab8:	e7ab      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8006aba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006abc:	f7fe fde0 	bl	8005680 <HAL_GetTick>
 8006ac0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ac2:	6823      	ldr	r3, [r4, #0]
 8006ac4:	0798      	lsls	r0, r3, #30
 8006ac6:	f57f af6d 	bpl.w	80069a4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aca:	f7fe fdd9 	bl	8005680 <HAL_GetTick>
 8006ace:	1b80      	subs	r0, r0, r6
 8006ad0:	2802      	cmp	r0, #2
 8006ad2:	d9f6      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x132>
 8006ad4:	e79d      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ad6:	69aa      	ldr	r2, [r5, #24]
 8006ad8:	4e49      	ldr	r6, [pc, #292]	; (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006ada:	4b4b      	ldr	r3, [pc, #300]	; (8006c08 <HAL_RCC_OscConfig+0x278>)
 8006adc:	b1da      	cbz	r2, 8006b16 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006ae2:	f7fe fdcd 	bl	8005680 <HAL_GetTick>
 8006ae6:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ae8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006aea:	079b      	lsls	r3, r3, #30
 8006aec:	d50d      	bpl.n	8006b0a <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006aee:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006af2:	4b46      	ldr	r3, [pc, #280]	; (8006c0c <HAL_RCC_OscConfig+0x27c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006afa:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006afc:	bf00      	nop
  }
  while (Delay --);
 8006afe:	9b01      	ldr	r3, [sp, #4]
 8006b00:	1e5a      	subs	r2, r3, #1
 8006b02:	9201      	str	r2, [sp, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1f9      	bne.n	8006afc <HAL_RCC_OscConfig+0x16c>
 8006b08:	e750      	b.n	80069ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b0a:	f7fe fdb9 	bl	8005680 <HAL_GetTick>
 8006b0e:	1b00      	subs	r0, r0, r4
 8006b10:	2802      	cmp	r0, #2
 8006b12:	d9e9      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x158>
 8006b14:	e77d      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8006b16:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006b18:	f7fe fdb2 	bl	8005680 <HAL_GetTick>
 8006b1c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006b20:	079f      	lsls	r7, r3, #30
 8006b22:	f57f af43 	bpl.w	80069ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b26:	f7fe fdab 	bl	8005680 <HAL_GetTick>
 8006b2a:	1b00      	subs	r0, r0, r4
 8006b2c:	2802      	cmp	r0, #2
 8006b2e:	d9f6      	bls.n	8006b1e <HAL_RCC_OscConfig+0x18e>
 8006b30:	e76f      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b32:	4c33      	ldr	r4, [pc, #204]	; (8006c00 <HAL_RCC_OscConfig+0x270>)
 8006b34:	69e3      	ldr	r3, [r4, #28]
 8006b36:	00d8      	lsls	r0, r3, #3
 8006b38:	d424      	bmi.n	8006b84 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 8006b3a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b3c:	69e3      	ldr	r3, [r4, #28]
 8006b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b42:	61e3      	str	r3, [r4, #28]
 8006b44:	69e3      	ldr	r3, [r4, #28]
 8006b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4e:	4e30      	ldr	r6, [pc, #192]	; (8006c10 <HAL_RCC_OscConfig+0x280>)
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	05d9      	lsls	r1, r3, #23
 8006b54:	d518      	bpl.n	8006b88 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b56:	68eb      	ldr	r3, [r5, #12]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d126      	bne.n	8006baa <HAL_RCC_OscConfig+0x21a>
 8006b5c:	6a23      	ldr	r3, [r4, #32]
 8006b5e:	f043 0301 	orr.w	r3, r3, #1
 8006b62:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006b64:	f7fe fd8c 	bl	8005680 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b68:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006b6c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b6e:	6a23      	ldr	r3, [r4, #32]
 8006b70:	079b      	lsls	r3, r3, #30
 8006b72:	d53f      	bpl.n	8006bf4 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8006b74:	2f00      	cmp	r7, #0
 8006b76:	f43f af1d 	beq.w	80069b4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b7a:	69e3      	ldr	r3, [r4, #28]
 8006b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b80:	61e3      	str	r3, [r4, #28]
 8006b82:	e717      	b.n	80069b4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8006b84:	2700      	movs	r7, #0
 8006b86:	e7e2      	b.n	8006b4e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b88:	6833      	ldr	r3, [r6, #0]
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006b90:	f7fe fd76 	bl	8005680 <HAL_GetTick>
 8006b94:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b96:	6833      	ldr	r3, [r6, #0]
 8006b98:	05da      	lsls	r2, r3, #23
 8006b9a:	d4dc      	bmi.n	8006b56 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b9c:	f7fe fd70 	bl	8005680 <HAL_GetTick>
 8006ba0:	eba0 0008 	sub.w	r0, r0, r8
 8006ba4:	2864      	cmp	r0, #100	; 0x64
 8006ba6:	d9f6      	bls.n	8006b96 <HAL_RCC_OscConfig+0x206>
 8006ba8:	e733      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006baa:	b9ab      	cbnz	r3, 8006bd8 <HAL_RCC_OscConfig+0x248>
 8006bac:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb2:	f023 0301 	bic.w	r3, r3, #1
 8006bb6:	6223      	str	r3, [r4, #32]
 8006bb8:	6a23      	ldr	r3, [r4, #32]
 8006bba:	f023 0304 	bic.w	r3, r3, #4
 8006bbe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006bc0:	f7fe fd5e 	bl	8005680 <HAL_GetTick>
 8006bc4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc6:	6a23      	ldr	r3, [r4, #32]
 8006bc8:	0798      	lsls	r0, r3, #30
 8006bca:	d5d3      	bpl.n	8006b74 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bcc:	f7fe fd58 	bl	8005680 <HAL_GetTick>
 8006bd0:	1b80      	subs	r0, r0, r6
 8006bd2:	4540      	cmp	r0, r8
 8006bd4:	d9f7      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x236>
 8006bd6:	e71c      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bd8:	2b05      	cmp	r3, #5
 8006bda:	6a23      	ldr	r3, [r4, #32]
 8006bdc:	d103      	bne.n	8006be6 <HAL_RCC_OscConfig+0x256>
 8006bde:	f043 0304 	orr.w	r3, r3, #4
 8006be2:	6223      	str	r3, [r4, #32]
 8006be4:	e7ba      	b.n	8006b5c <HAL_RCC_OscConfig+0x1cc>
 8006be6:	f023 0301 	bic.w	r3, r3, #1
 8006bea:	6223      	str	r3, [r4, #32]
 8006bec:	6a23      	ldr	r3, [r4, #32]
 8006bee:	f023 0304 	bic.w	r3, r3, #4
 8006bf2:	e7b6      	b.n	8006b62 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf4:	f7fe fd44 	bl	8005680 <HAL_GetTick>
 8006bf8:	1b80      	subs	r0, r0, r6
 8006bfa:	4540      	cmp	r0, r8
 8006bfc:	d9b7      	bls.n	8006b6e <HAL_RCC_OscConfig+0x1de>
 8006bfe:	e708      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
 8006c00:	40021000 	.word	0x40021000
 8006c04:	42420000 	.word	0x42420000
 8006c08:	42420480 	.word	0x42420480
 8006c0c:	20000048 	.word	0x20000048
 8006c10:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c14:	4b2a      	ldr	r3, [pc, #168]	; (8006cc0 <HAL_RCC_OscConfig+0x330>)
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	461c      	mov	r4, r3
 8006c1a:	f002 020c 	and.w	r2, r2, #12
 8006c1e:	2a08      	cmp	r2, #8
 8006c20:	d03d      	beq.n	8006c9e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c22:	2300      	movs	r3, #0
 8006c24:	4e27      	ldr	r6, [pc, #156]	; (8006cc4 <HAL_RCC_OscConfig+0x334>)
 8006c26:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006c28:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c2a:	d12b      	bne.n	8006c84 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8006c2c:	f7fe fd28 	bl	8005680 <HAL_GetTick>
 8006c30:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c32:	6823      	ldr	r3, [r4, #0]
 8006c34:	0199      	lsls	r1, r3, #6
 8006c36:	d41f      	bmi.n	8006c78 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006c38:	6a2b      	ldr	r3, [r5, #32]
 8006c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3e:	d105      	bne.n	8006c4c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006c40:	6862      	ldr	r2, [r4, #4]
 8006c42:	68a9      	ldr	r1, [r5, #8]
 8006c44:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006c48:	430a      	orrs	r2, r1
 8006c4a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c4c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8006c4e:	6862      	ldr	r2, [r4, #4]
 8006c50:	430b      	orrs	r3, r1
 8006c52:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006c56:	4313      	orrs	r3, r2
 8006c58:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006c5e:	f7fe fd0f 	bl	8005680 <HAL_GetTick>
 8006c62:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c64:	6823      	ldr	r3, [r4, #0]
 8006c66:	019a      	lsls	r2, r3, #6
 8006c68:	f53f aea8 	bmi.w	80069bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c6c:	f7fe fd08 	bl	8005680 <HAL_GetTick>
 8006c70:	1b40      	subs	r0, r0, r5
 8006c72:	2802      	cmp	r0, #2
 8006c74:	d9f6      	bls.n	8006c64 <HAL_RCC_OscConfig+0x2d4>
 8006c76:	e6cc      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fe fd02 	bl	8005680 <HAL_GetTick>
 8006c7c:	1bc0      	subs	r0, r0, r7
 8006c7e:	2802      	cmp	r0, #2
 8006c80:	d9d7      	bls.n	8006c32 <HAL_RCC_OscConfig+0x2a2>
 8006c82:	e6c6      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8006c84:	f7fe fcfc 	bl	8005680 <HAL_GetTick>
 8006c88:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	019b      	lsls	r3, r3, #6
 8006c8e:	f57f ae95 	bpl.w	80069bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c92:	f7fe fcf5 	bl	8005680 <HAL_GetTick>
 8006c96:	1b40      	subs	r0, r0, r5
 8006c98:	2802      	cmp	r0, #2
 8006c9a:	d9f6      	bls.n	8006c8a <HAL_RCC_OscConfig+0x2fa>
 8006c9c:	e6b9      	b.n	8006a12 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c9e:	2801      	cmp	r0, #1
 8006ca0:	f43f aeb8 	beq.w	8006a14 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8006ca4:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ca6:	6a2a      	ldr	r2, [r5, #32]
 8006ca8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8006cac:	4291      	cmp	r1, r2
 8006cae:	f47f ae9b 	bne.w	80069e8 <HAL_RCC_OscConfig+0x58>
 8006cb2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006cb4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	f43f ae7f 	beq.w	80069bc <HAL_RCC_OscConfig+0x2c>
 8006cbe:	e693      	b.n	80069e8 <HAL_RCC_OscConfig+0x58>
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	42420060 	.word	0x42420060

08006cc8 <HAL_RCC_GetSysClockFreq>:
{
 8006cc8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006cca:	4b18      	ldr	r3, [pc, #96]	; (8006d2c <HAL_RCC_GetSysClockFreq+0x64>)
{
 8006ccc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006cce:	ac02      	add	r4, sp, #8
 8006cd0:	f103 0510 	add.w	r5, r3, #16
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	6818      	ldr	r0, [r3, #0]
 8006cd8:	6859      	ldr	r1, [r3, #4]
 8006cda:	3308      	adds	r3, #8
 8006cdc:	c203      	stmia	r2!, {r0, r1}
 8006cde:	42ab      	cmp	r3, r5
 8006ce0:	4614      	mov	r4, r2
 8006ce2:	d1f7      	bne.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ce4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8006ce8:	4911      	ldr	r1, [pc, #68]	; (8006d30 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006cea:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8006cee:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006cf0:	f003 020c 	and.w	r2, r3, #12
 8006cf4:	2a08      	cmp	r2, #8
 8006cf6:	d117      	bne.n	8006d28 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cf8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8006cfc:	a806      	add	r0, sp, #24
 8006cfe:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d00:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006d02:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d06:	d50c      	bpl.n	8006d22 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d08:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d0a:	480a      	ldr	r0, [pc, #40]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d0c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d10:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d12:	aa06      	add	r2, sp, #24
 8006d14:	4413      	add	r3, r2
 8006d16:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d1a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8006d1e:	b007      	add	sp, #28
 8006d20:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d22:	4805      	ldr	r0, [pc, #20]	; (8006d38 <HAL_RCC_GetSysClockFreq+0x70>)
 8006d24:	4350      	muls	r0, r2
 8006d26:	e7fa      	b.n	8006d1e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8006d28:	4802      	ldr	r0, [pc, #8]	; (8006d34 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8006d2a:	e7f8      	b.n	8006d1e <HAL_RCC_GetSysClockFreq+0x56>
 8006d2c:	0800a624 	.word	0x0800a624
 8006d30:	40021000 	.word	0x40021000
 8006d34:	007a1200 	.word	0x007a1200
 8006d38:	003d0900 	.word	0x003d0900

08006d3c <HAL_RCC_ClockConfig>:
{
 8006d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d40:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006d42:	4604      	mov	r4, r0
 8006d44:	b910      	cbnz	r0, 8006d4c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006d46:	2001      	movs	r0, #1
}
 8006d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d4c:	4a44      	ldr	r2, [pc, #272]	; (8006e60 <HAL_RCC_ClockConfig+0x124>)
 8006d4e:	6813      	ldr	r3, [r2, #0]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	428b      	cmp	r3, r1
 8006d56:	d328      	bcc.n	8006daa <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d58:	6821      	ldr	r1, [r4, #0]
 8006d5a:	078e      	lsls	r6, r1, #30
 8006d5c:	d430      	bmi.n	8006dc0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d5e:	07ca      	lsls	r2, r1, #31
 8006d60:	d443      	bmi.n	8006dea <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d62:	4a3f      	ldr	r2, [pc, #252]	; (8006e60 <HAL_RCC_ClockConfig+0x124>)
 8006d64:	6813      	ldr	r3, [r2, #0]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	42ab      	cmp	r3, r5
 8006d6c:	d865      	bhi.n	8006e3a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6e:	6822      	ldr	r2, [r4, #0]
 8006d70:	4d3c      	ldr	r5, [pc, #240]	; (8006e64 <HAL_RCC_ClockConfig+0x128>)
 8006d72:	f012 0f04 	tst.w	r2, #4
 8006d76:	d16c      	bne.n	8006e52 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d78:	0713      	lsls	r3, r2, #28
 8006d7a:	d506      	bpl.n	8006d8a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d7c:	686b      	ldr	r3, [r5, #4]
 8006d7e:	6922      	ldr	r2, [r4, #16]
 8006d80:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8006d84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006d88:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d8a:	f7ff ff9d 	bl	8006cc8 <HAL_RCC_GetSysClockFreq>
 8006d8e:	686b      	ldr	r3, [r5, #4]
 8006d90:	4a35      	ldr	r2, [pc, #212]	; (8006e68 <HAL_RCC_ClockConfig+0x12c>)
 8006d92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006d96:	5cd3      	ldrb	r3, [r2, r3]
 8006d98:	40d8      	lsrs	r0, r3
 8006d9a:	4b34      	ldr	r3, [pc, #208]	; (8006e6c <HAL_RCC_ClockConfig+0x130>)
 8006d9c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8006d9e:	4b34      	ldr	r3, [pc, #208]	; (8006e70 <HAL_RCC_ClockConfig+0x134>)
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	f7fe fc2b 	bl	80055fc <HAL_InitTick>
  return HAL_OK;
 8006da6:	2000      	movs	r0, #0
 8006da8:	e7ce      	b.n	8006d48 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	f023 0307 	bic.w	r3, r3, #7
 8006db0:	430b      	orrs	r3, r1
 8006db2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db4:	6813      	ldr	r3, [r2, #0]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	428b      	cmp	r3, r1
 8006dbc:	d1c3      	bne.n	8006d46 <HAL_RCC_ClockConfig+0xa>
 8006dbe:	e7cb      	b.n	8006d58 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	4b28      	ldr	r3, [pc, #160]	; (8006e64 <HAL_RCC_ClockConfig+0x128>)
 8006dc2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dc6:	bf1e      	ittt	ne
 8006dc8:	685a      	ldrne	r2, [r3, #4]
 8006dca:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8006dce:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dd2:	bf42      	ittt	mi
 8006dd4:	685a      	ldrmi	r2, [r3, #4]
 8006dd6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8006dda:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68a0      	ldr	r0, [r4, #8]
 8006de0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006de4:	4302      	orrs	r2, r0
 8006de6:	605a      	str	r2, [r3, #4]
 8006de8:	e7b9      	b.n	8006d5e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dea:	6862      	ldr	r2, [r4, #4]
 8006dec:	4e1d      	ldr	r6, [pc, #116]	; (8006e64 <HAL_RCC_ClockConfig+0x128>)
 8006dee:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006df2:	d11a      	bne.n	8006e2a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df8:	d0a5      	beq.n	8006d46 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dfa:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dfc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e00:	f023 0303 	bic.w	r3, r3, #3
 8006e04:	4313      	orrs	r3, r2
 8006e06:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006e08:	f7fe fc3a 	bl	8005680 <HAL_GetTick>
 8006e0c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0e:	6873      	ldr	r3, [r6, #4]
 8006e10:	6862      	ldr	r2, [r4, #4]
 8006e12:	f003 030c 	and.w	r3, r3, #12
 8006e16:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006e1a:	d0a2      	beq.n	8006d62 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e1c:	f7fe fc30 	bl	8005680 <HAL_GetTick>
 8006e20:	1bc0      	subs	r0, r0, r7
 8006e22:	4540      	cmp	r0, r8
 8006e24:	d9f3      	bls.n	8006e0e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8006e26:	2003      	movs	r0, #3
 8006e28:	e78e      	b.n	8006d48 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e2a:	2a02      	cmp	r2, #2
 8006e2c:	d102      	bne.n	8006e34 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006e32:	e7e1      	b.n	8006df8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e34:	f013 0f02 	tst.w	r3, #2
 8006e38:	e7de      	b.n	8006df8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	f023 0307 	bic.w	r3, r3, #7
 8006e40:	432b      	orrs	r3, r5
 8006e42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e44:	6813      	ldr	r3, [r2, #0]
 8006e46:	f003 0307 	and.w	r3, r3, #7
 8006e4a:	42ab      	cmp	r3, r5
 8006e4c:	f47f af7b 	bne.w	8006d46 <HAL_RCC_ClockConfig+0xa>
 8006e50:	e78d      	b.n	8006d6e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e52:	686b      	ldr	r3, [r5, #4]
 8006e54:	68e1      	ldr	r1, [r4, #12]
 8006e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	606b      	str	r3, [r5, #4]
 8006e5e:	e78b      	b.n	8006d78 <HAL_RCC_ClockConfig+0x3c>
 8006e60:	40022000 	.word	0x40022000
 8006e64:	40021000 	.word	0x40021000
 8006e68:	0800a581 	.word	0x0800a581
 8006e6c:	20000048 	.word	0x20000048
 8006e70:	20000050 	.word	0x20000050

08006e74 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e74:	4b04      	ldr	r3, [pc, #16]	; (8006e88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006e76:	4a05      	ldr	r2, [pc, #20]	; (8006e8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006e7e:	5cd3      	ldrb	r3, [r2, r3]
 8006e80:	4a03      	ldr	r2, [pc, #12]	; (8006e90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006e82:	6810      	ldr	r0, [r2, #0]
}
 8006e84:	40d8      	lsrs	r0, r3
 8006e86:	4770      	bx	lr
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	0800a591 	.word	0x0800a591
 8006e90:	20000048 	.word	0x20000048

08006e94 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e94:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006e96:	4a05      	ldr	r2, [pc, #20]	; (8006eac <HAL_RCC_GetPCLK2Freq+0x18>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006e9e:	5cd3      	ldrb	r3, [r2, r3]
 8006ea0:	4a03      	ldr	r2, [pc, #12]	; (8006eb0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006ea2:	6810      	ldr	r0, [r2, #0]
}
 8006ea4:	40d8      	lsrs	r0, r3
 8006ea6:	4770      	bx	lr
 8006ea8:	40021000 	.word	0x40021000
 8006eac:	0800a591 	.word	0x0800a591
 8006eb0:	20000048 	.word	0x20000048

08006eb4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006eb4:	6803      	ldr	r3, [r0, #0]
{
 8006eb6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006eba:	07d9      	lsls	r1, r3, #31
{
 8006ebc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ebe:	d520      	bpl.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ec0:	4c35      	ldr	r4, [pc, #212]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006ec2:	69e3      	ldr	r3, [r4, #28]
 8006ec4:	00da      	lsls	r2, r3, #3
 8006ec6:	d432      	bmi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8006ec8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006eca:	69e3      	ldr	r3, [r4, #28]
 8006ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed0:	61e3      	str	r3, [r4, #28]
 8006ed2:	69e3      	ldr	r3, [r4, #28]
 8006ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006edc:	4e2f      	ldr	r6, [pc, #188]	; (8006f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006ede:	6833      	ldr	r3, [r6, #0]
 8006ee0:	05db      	lsls	r3, r3, #23
 8006ee2:	d526      	bpl.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ee4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006ee6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006eea:	d136      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eec:	6a23      	ldr	r3, [r4, #32]
 8006eee:	686a      	ldr	r2, [r5, #4]
 8006ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006ef8:	b11f      	cbz	r7, 8006f02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006efa:	69e3      	ldr	r3, [r4, #28]
 8006efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f00:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f02:	6828      	ldr	r0, [r5, #0]
 8006f04:	0783      	lsls	r3, r0, #30
 8006f06:	d506      	bpl.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f08:	4923      	ldr	r1, [pc, #140]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006f0a:	68ab      	ldr	r3, [r5, #8]
 8006f0c:	684a      	ldr	r2, [r1, #4]
 8006f0e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006f12:	431a      	orrs	r2, r3
 8006f14:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f16:	f010 0010 	ands.w	r0, r0, #16
 8006f1a:	d01b      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f1c:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006f1e:	68e9      	ldr	r1, [r5, #12]
 8006f20:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f22:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f24:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	6053      	str	r3, [r2, #4]
 8006f2c:	e012      	b.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8006f2e:	2700      	movs	r7, #0
 8006f30:	e7d4      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f32:	6833      	ldr	r3, [r6, #0]
 8006f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f38:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006f3a:	f7fe fba1 	bl	8005680 <HAL_GetTick>
 8006f3e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f40:	6833      	ldr	r3, [r6, #0]
 8006f42:	05d8      	lsls	r0, r3, #23
 8006f44:	d4ce      	bmi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f46:	f7fe fb9b 	bl	8005680 <HAL_GetTick>
 8006f4a:	eba0 0008 	sub.w	r0, r0, r8
 8006f4e:	2864      	cmp	r0, #100	; 0x64
 8006f50:	d9f6      	bls.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8006f52:	2003      	movs	r0, #3
}
 8006f54:	b002      	add	sp, #8
 8006f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f5a:	686a      	ldr	r2, [r5, #4]
 8006f5c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d0c3      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f64:	2001      	movs	r0, #1
 8006f66:	4a0e      	ldr	r2, [pc, #56]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f68:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f6a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f6c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f72:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8006f74:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d5b8      	bpl.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8006f7a:	f7fe fb81 	bl	8005680 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f7e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006f82:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f84:	6a23      	ldr	r3, [r4, #32]
 8006f86:	079a      	lsls	r2, r3, #30
 8006f88:	d4b0      	bmi.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f8a:	f7fe fb79 	bl	8005680 <HAL_GetTick>
 8006f8e:	1b80      	subs	r0, r0, r6
 8006f90:	4540      	cmp	r0, r8
 8006f92:	d9f7      	bls.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8006f94:	e7dd      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006f96:	bf00      	nop
 8006f98:	40021000 	.word	0x40021000
 8006f9c:	40007000 	.word	0x40007000
 8006fa0:	42420440 	.word	0x42420440

08006fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006fa8:	4b34      	ldr	r3, [pc, #208]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 8006faa:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006fac:	ad02      	add	r5, sp, #8
 8006fae:	f103 0610 	add.w	r6, r3, #16
 8006fb2:	462c      	mov	r4, r5
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	6859      	ldr	r1, [r3, #4]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	c403      	stmia	r4!, {r0, r1}
 8006fbc:	42b3      	cmp	r3, r6
 8006fbe:	4625      	mov	r5, r4
 8006fc0:	d1f7      	bne.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006fc2:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006fc6:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006fc8:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8006fcc:	d049      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8006fce:	2a10      	cmp	r2, #16
 8006fd0:	d003      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8006fd2:	2a01      	cmp	r2, #1
 8006fd4:	d026      	beq.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 8006fd6:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8006fd8:	e038      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 8006fda:	4b29      	ldr	r3, [pc, #164]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8006fdc:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8006fe4:	d032      	beq.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fe6:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8006fea:	a806      	add	r0, sp, #24
 8006fec:	4402      	add	r2, r0
 8006fee:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ff2:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ff4:	bf41      	itttt	mi
 8006ff6:	685a      	ldrmi	r2, [r3, #4]
 8006ff8:	a906      	addmi	r1, sp, #24
 8006ffa:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8006ffe:	1852      	addmi	r2, r2, r1
 8007000:	bf44      	itt	mi
 8007002:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007006:	4a1f      	ldrmi	r2, [pc, #124]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007008:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800700a:	bf4c      	ite	mi
 800700c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007010:	4a1d      	ldrpl	r2, [pc, #116]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007012:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007014:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007018:	d418      	bmi.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 800701a:	2303      	movs	r3, #3
 800701c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800701e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8007022:	e013      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007024:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8007028:	4a15      	ldr	r2, [pc, #84]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800702a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800702c:	4019      	ands	r1, r3
 800702e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8007032:	d01f      	beq.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800703c:	d108      	bne.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
        frequency = LSI_VALUE;
 800703e:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007042:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8007044:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8007048:	bf18      	it	ne
 800704a:	4618      	movne	r0, r3
}
 800704c:	b006      	add	sp, #24
 800704e:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007050:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007054:	d1bf      	bne.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 8007056:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8007058:	f24f 4324 	movw	r3, #62500	; 0xf424
 800705c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007060:	e7f2      	b.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007062:	f7ff ff17 	bl	8006e94 <HAL_RCC_GetPCLK2Freq>
 8007066:	4b06      	ldr	r3, [pc, #24]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800706e:	3301      	adds	r3, #1
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	e7d4      	b.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 8007074:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007078:	e7e8      	b.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800707a:	bf00      	nop
 800707c:	0800a624 	.word	0x0800a624
 8007080:	40021000 	.word	0x40021000
 8007084:	007a1200 	.word	0x007a1200
 8007088:	003d0900 	.word	0x003d0900

0800708c <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800708c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007090:	461c      	mov	r4, r3
 8007092:	4616      	mov	r6, r2
 8007094:	460f      	mov	r7, r1
 8007096:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007098:	f7fe faf2 	bl	8005680 <HAL_GetTick>
 800709c:	4434      	add	r4, r6
 800709e:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 80070a0:	f7fe faee 	bl	8005680 <HAL_GetTick>
 80070a4:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070a6:	4b23      	ldr	r3, [pc, #140]	; (8007134 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80070ae:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070b0:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80070b2:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070b4:	6893      	ldr	r3, [r2, #8]
 80070b6:	ea37 0303 	bics.w	r3, r7, r3
 80070ba:	d001      	beq.n	80070c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80070bc:	2000      	movs	r0, #0
 80070be:	e02e      	b.n	800711e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80070c0:	1c73      	adds	r3, r6, #1
 80070c2:	d0f7      	beq.n	80070b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070c4:	f7fe fadc 	bl	8005680 <HAL_GetTick>
 80070c8:	eba0 0008 	sub.w	r0, r0, r8
 80070cc:	42a0      	cmp	r0, r4
 80070ce:	d329      	bcc.n	8007124 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	685a      	ldr	r2, [r3, #4]
 80070d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80070d8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070da:	686a      	ldr	r2, [r5, #4]
 80070dc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80070e0:	d10a      	bne.n	80070f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 80070e2:	68aa      	ldr	r2, [r5, #8]
 80070e4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80070e8:	d002      	beq.n	80070f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80070ee:	d103      	bne.n	80070f8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070f6:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80070fa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80070fe:	d107      	bne.n	8007110 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800710e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007110:	2301      	movs	r3, #1
 8007112:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8007116:	2300      	movs	r3, #0
 8007118:	2003      	movs	r0, #3
 800711a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 800711e:	b002      	add	sp, #8
 8007120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8007124:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8007126:	2b00      	cmp	r3, #0
      count--;
 8007128:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800712a:	bf08      	it	eq
 800712c:	2400      	moveq	r4, #0
      count--;
 800712e:	3b01      	subs	r3, #1
 8007130:	e7be      	b.n	80070b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8007132:	bf00      	nop
 8007134:	20000048 	.word	0x20000048

08007138 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007138:	b510      	push	{r4, lr}
 800713a:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800713c:	460a      	mov	r2, r1
 800713e:	2180      	movs	r1, #128	; 0x80
{
 8007140:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007142:	f7ff ffa3 	bl	800708c <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8007146:	b120      	cbz	r0, 8007152 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8007148:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800714a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800714c:	f043 0320 	orr.w	r3, r3, #32
 8007150:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8007152:	bd10      	pop	{r4, pc}

08007154 <HAL_SPI_Init>:
{
 8007154:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8007156:	4604      	mov	r4, r0
 8007158:	2800      	cmp	r0, #0
 800715a:	d051      	beq.n	8007200 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800715c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800715e:	2b00      	cmp	r3, #0
 8007160:	d14a      	bne.n	80071f8 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007162:	6842      	ldr	r2, [r0, #4]
 8007164:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8007168:	d000      	beq.n	800716c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800716a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800716c:	2300      	movs	r3, #0
 800716e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007170:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8007174:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007178:	b923      	cbnz	r3, 8007184 <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 800717a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800717c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8007180:	f7fd fa52 	bl	8004628 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007184:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8007186:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8007188:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800718c:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800718e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8007190:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007194:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800719c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80071a0:	4303      	orrs	r3, r0
 80071a2:	68e0      	ldr	r0, [r4, #12]
 80071a4:	69a1      	ldr	r1, [r4, #24]
 80071a6:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 80071aa:	4303      	orrs	r3, r0
 80071ac:	6920      	ldr	r0, [r4, #16]
 80071ae:	f000 0002 	and.w	r0, r0, #2
 80071b2:	4303      	orrs	r3, r0
 80071b4:	6960      	ldr	r0, [r4, #20]
 80071b6:	f000 0001 	and.w	r0, r0, #1
 80071ba:	4303      	orrs	r3, r0
 80071bc:	f401 7000 	and.w	r0, r1, #512	; 0x200
 80071c0:	4303      	orrs	r3, r0
 80071c2:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80071c4:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071c6:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80071ca:	4303      	orrs	r3, r0
 80071cc:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80071ce:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071d2:	f000 0080 	and.w	r0, r0, #128	; 0x80
 80071d6:	4303      	orrs	r3, r0
 80071d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80071da:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 80071de:	4303      	orrs	r3, r0
 80071e0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80071e2:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071e4:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071e6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ec:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80071ee:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071f0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071f2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80071f6:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80071f8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fe:	e7b5      	b.n	800716c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8007200:	2001      	movs	r0, #1
 8007202:	e7f8      	b.n	80071f6 <HAL_SPI_Init+0xa2>

08007204 <HAL_SPI_Transmit>:
{
 8007204:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007208:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800720a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800720e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8007210:	2b01      	cmp	r3, #1
{
 8007212:	460d      	mov	r5, r1
 8007214:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8007216:	f000 80a0 	beq.w	800735a <HAL_SPI_Transmit+0x156>
 800721a:	2301      	movs	r3, #1
 800721c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8007220:	f7fe fa2e 	bl	8005680 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8007224:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8007228:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800722a:	2b01      	cmp	r3, #1
 800722c:	b2d8      	uxtb	r0, r3
 800722e:	f040 8092 	bne.w	8007356 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8007232:	2d00      	cmp	r5, #0
 8007234:	d061      	beq.n	80072fa <HAL_SPI_Transmit+0xf6>
 8007236:	f1b8 0f00 	cmp.w	r8, #0
 800723a:	d05e      	beq.n	80072fa <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800723c:	2303      	movs	r3, #3
 800723e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007242:	2300      	movs	r3, #0
 8007244:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8007246:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800724a:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800724e:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007250:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007252:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	6826      	ldr	r6, [r4, #0]
 8007258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800725c:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800725e:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007262:	d107      	bne.n	8007274 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8007264:	6833      	ldr	r3, [r6, #0]
 8007266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800726a:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 800726c:	6833      	ldr	r3, [r6, #0]
 800726e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007272:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007274:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007276:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007278:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800727a:	bf5e      	ittt	pl
 800727c:	6833      	ldrpl	r3, [r6, #0]
 800727e:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8007282:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007284:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8007288:	6863      	ldr	r3, [r4, #4]
 800728a:	d13f      	bne.n	800730c <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800728c:	b113      	cbz	r3, 8007294 <HAL_SPI_Transmit+0x90>
 800728e:	f1b8 0f01 	cmp.w	r8, #1
 8007292:	d107      	bne.n	80072a4 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007294:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007298:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800729a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800729c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800729e:	3b01      	subs	r3, #1
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80072a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	b9a3      	cbnz	r3, 80072d4 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072aa:	464a      	mov	r2, r9
 80072ac:	4639      	mov	r1, r7
 80072ae:	4620      	mov	r0, r4
 80072b0:	f7ff ff42 	bl	8007138 <SPI_EndRxTxTransaction>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	d14b      	bne.n	8007350 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072b8:	68a3      	ldr	r3, [r4, #8]
 80072ba:	b933      	cbnz	r3, 80072ca <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072bc:	9301      	str	r3, [sp, #4]
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	9201      	str	r2, [sp, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80072ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80072cc:	3800      	subs	r0, #0
 80072ce:	bf18      	it	ne
 80072d0:	2001      	movne	r0, #1
error:
 80072d2:	e012      	b.n	80072fa <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072d4:	6822      	ldr	r2, [r4, #0]
 80072d6:	6893      	ldr	r3, [r2, #8]
 80072d8:	0798      	lsls	r0, r3, #30
 80072da:	d505      	bpl.n	80072e8 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072de:	f833 1b02 	ldrh.w	r1, [r3], #2
 80072e2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e4:	6323      	str	r3, [r4, #48]	; 0x30
 80072e6:	e7d9      	b.n	800729c <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e8:	f7fe f9ca 	bl	8005680 <HAL_GetTick>
 80072ec:	eba0 0009 	sub.w	r0, r0, r9
 80072f0:	42b8      	cmp	r0, r7
 80072f2:	d3d7      	bcc.n	80072a4 <HAL_SPI_Transmit+0xa0>
 80072f4:	1c79      	adds	r1, r7, #1
 80072f6:	d0d5      	beq.n	80072a4 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80072f8:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007300:	2300      	movs	r3, #0
 8007302:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007306:	b003      	add	sp, #12
 8007308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730c:	b113      	cbz	r3, 8007314 <HAL_SPI_Transmit+0x110>
 800730e:	f1b8 0f01 	cmp.w	r8, #1
 8007312:	d108      	bne.n	8007326 <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007314:	782b      	ldrb	r3, [r5, #0]
 8007316:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007318:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800731a:	3301      	adds	r3, #1
 800731c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800731e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007320:	3b01      	subs	r3, #1
 8007322:	b29b      	uxth	r3, r3
 8007324:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8007326:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0bd      	beq.n	80072aa <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	0792      	lsls	r2, r2, #30
 8007334:	d503      	bpl.n	800733e <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007336:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007338:	7812      	ldrb	r2, [r2, #0]
 800733a:	731a      	strb	r2, [r3, #12]
 800733c:	e7ec      	b.n	8007318 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800733e:	f7fe f99f 	bl	8005680 <HAL_GetTick>
 8007342:	eba0 0009 	sub.w	r0, r0, r9
 8007346:	42b8      	cmp	r0, r7
 8007348:	d3ed      	bcc.n	8007326 <HAL_SPI_Transmit+0x122>
 800734a:	1c7b      	adds	r3, r7, #1
 800734c:	d0eb      	beq.n	8007326 <HAL_SPI_Transmit+0x122>
 800734e:	e7d3      	b.n	80072f8 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007350:	2320      	movs	r3, #32
 8007352:	6563      	str	r3, [r4, #84]	; 0x54
 8007354:	e7b0      	b.n	80072b8 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8007356:	2002      	movs	r0, #2
 8007358:	e7cf      	b.n	80072fa <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 800735a:	2002      	movs	r0, #2
 800735c:	e7d3      	b.n	8007306 <HAL_SPI_Transmit+0x102>

0800735e <HAL_SPI_TransmitReceive>:
{
 800735e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007362:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8007364:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8007368:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800736a:	2b01      	cmp	r3, #1
{
 800736c:	460d      	mov	r5, r1
 800736e:	4691      	mov	r9, r2
 8007370:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8007374:	f000 80e0 	beq.w	8007538 <HAL_SPI_TransmitReceive+0x1da>
 8007378:	2301      	movs	r3, #1
 800737a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800737e:	f7fe f97f 	bl	8005680 <HAL_GetTick>
  tmp_state           = hspi->State;
 8007382:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8007386:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007388:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 800738a:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800738c:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800738e:	d00a      	beq.n	80073a6 <HAL_SPI_TransmitReceive+0x48>
 8007390:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8007394:	f040 80ce 	bne.w	8007534 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007398:	68a3      	ldr	r3, [r4, #8]
 800739a:	2b00      	cmp	r3, #0
 800739c:	f040 80ca 	bne.w	8007534 <HAL_SPI_TransmitReceive+0x1d6>
 80073a0:	2904      	cmp	r1, #4
 80073a2:	f040 80c7 	bne.w	8007534 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073a6:	2d00      	cmp	r5, #0
 80073a8:	d03f      	beq.n	800742a <HAL_SPI_TransmitReceive+0xcc>
 80073aa:	f1b9 0f00 	cmp.w	r9, #0
 80073ae:	d03c      	beq.n	800742a <HAL_SPI_TransmitReceive+0xcc>
 80073b0:	2e00      	cmp	r6, #0
 80073b2:	d03a      	beq.n	800742a <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073b4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80073b8:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073bc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073be:	bf1c      	itt	ne
 80073c0:	2305      	movne	r3, #5
 80073c2:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80073ca:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073ce:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80073d0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80073d2:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d4:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80073d6:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d8:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80073da:	bf58      	it	pl
 80073dc:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80073de:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80073e0:	bf58      	it	pl
 80073e2:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 80073e6:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80073e8:	bf58      	it	pl
 80073ea:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073ec:	68e1      	ldr	r1, [r4, #12]
 80073ee:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80073f2:	d151      	bne.n	8007498 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f4:	b10a      	cbz	r2, 80073fa <HAL_SPI_TransmitReceive+0x9c>
 80073f6:	2e01      	cmp	r6, #1
 80073f8:	d107      	bne.n	800740a <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073fa:	f835 2b02 	ldrh.w	r2, [r5], #2
 80073fe:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8007400:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007402:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007404:	3b01      	subs	r3, #1
 8007406:	b29b      	uxth	r3, r3
 8007408:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800740a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800740c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800740e:	b29b      	uxth	r3, r3
 8007410:	b96b      	cbnz	r3, 800742e <HAL_SPI_TransmitReceive+0xd0>
 8007412:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007414:	b29b      	uxth	r3, r3
 8007416:	b953      	cbnz	r3, 800742e <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007418:	463a      	mov	r2, r7
 800741a:	4641      	mov	r1, r8
 800741c:	4620      	mov	r0, r4
 800741e:	f7ff fe8b 	bl	8007138 <SPI_EndRxTxTransaction>
 8007422:	2800      	cmp	r0, #0
 8007424:	d07b      	beq.n	800751e <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007426:	2320      	movs	r3, #32
 8007428:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800742a:	2001      	movs	r0, #1
 800742c:	e02b      	b.n	8007486 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800742e:	6821      	ldr	r1, [r4, #0]
 8007430:	688b      	ldr	r3, [r1, #8]
 8007432:	079a      	lsls	r2, r3, #30
 8007434:	d50d      	bpl.n	8007452 <HAL_SPI_TransmitReceive+0xf4>
 8007436:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007438:	b29b      	uxth	r3, r3
 800743a:	b153      	cbz	r3, 8007452 <HAL_SPI_TransmitReceive+0xf4>
 800743c:	b14d      	cbz	r5, 8007452 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 800743e:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007440:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007442:	f833 2b02 	ldrh.w	r2, [r3], #2
 8007446:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007448:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800744a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800744c:	3b01      	subs	r3, #1
 800744e:	b29b      	uxth	r3, r3
 8007450:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007452:	688a      	ldr	r2, [r1, #8]
 8007454:	f012 0201 	ands.w	r2, r2, #1
 8007458:	d00c      	beq.n	8007474 <HAL_SPI_TransmitReceive+0x116>
 800745a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800745c:	b29b      	uxth	r3, r3
 800745e:	b14b      	cbz	r3, 8007474 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8007460:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007462:	68c9      	ldr	r1, [r1, #12]
 8007464:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007466:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800746a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800746c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800746e:	3b01      	subs	r3, #1
 8007470:	b29b      	uxth	r3, r3
 8007472:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007474:	f7fe f904 	bl	8005680 <HAL_GetTick>
 8007478:	1bc0      	subs	r0, r0, r7
 800747a:	4540      	cmp	r0, r8
 800747c:	d3c6      	bcc.n	800740c <HAL_SPI_TransmitReceive+0xae>
 800747e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007482:	d0c3      	beq.n	800740c <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8007484:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8007486:	2301      	movs	r3, #1
 8007488:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800748c:	2300      	movs	r3, #0
 800748e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8007492:	b003      	add	sp, #12
 8007494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007498:	b10a      	cbz	r2, 800749e <HAL_SPI_TransmitReceive+0x140>
 800749a:	2e01      	cmp	r6, #1
 800749c:	d108      	bne.n	80074b0 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800749e:	782a      	ldrb	r2, [r5, #0]
 80074a0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80074a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074a4:	3301      	adds	r3, #1
 80074a6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80074a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80074b0:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	b91b      	cbnz	r3, 80074c0 <HAL_SPI_TransmitReceive+0x162>
 80074b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d0ab      	beq.n	8007418 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	6893      	ldr	r3, [r2, #8]
 80074c4:	079b      	lsls	r3, r3, #30
 80074c6:	d50e      	bpl.n	80074e6 <HAL_SPI_TransmitReceive+0x188>
 80074c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	b15b      	cbz	r3, 80074e6 <HAL_SPI_TransmitReceive+0x188>
 80074ce:	b155      	cbz	r5, 80074e6 <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 80074d0:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80074d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80074d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80074da:	3301      	adds	r3, #1
 80074dc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80074de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074e6:	6822      	ldr	r2, [r4, #0]
 80074e8:	6891      	ldr	r1, [r2, #8]
 80074ea:	f011 0101 	ands.w	r1, r1, #1
 80074ee:	d00d      	beq.n	800750c <HAL_SPI_TransmitReceive+0x1ae>
 80074f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	b153      	cbz	r3, 800750c <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 80074f6:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80074f8:	68d2      	ldr	r2, [r2, #12]
 80074fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80074fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007500:	3301      	adds	r3, #1
 8007502:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007504:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007506:	3b01      	subs	r3, #1
 8007508:	b29b      	uxth	r3, r3
 800750a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800750c:	f7fe f8b8 	bl	8005680 <HAL_GetTick>
 8007510:	1bc0      	subs	r0, r0, r7
 8007512:	4540      	cmp	r0, r8
 8007514:	d3cd      	bcc.n	80074b2 <HAL_SPI_TransmitReceive+0x154>
 8007516:	f1b8 3fff 	cmp.w	r8, #4294967295
 800751a:	d0ca      	beq.n	80074b2 <HAL_SPI_TransmitReceive+0x154>
 800751c:	e7b2      	b.n	8007484 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1b0      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	9001      	str	r0, [sp, #4]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	9201      	str	r2, [sp, #4]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	9b01      	ldr	r3, [sp, #4]
 8007532:	e7a8      	b.n	8007486 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8007534:	2002      	movs	r0, #2
 8007536:	e7a6      	b.n	8007486 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8007538:	2002      	movs	r0, #2
 800753a:	e7aa      	b.n	8007492 <HAL_SPI_TransmitReceive+0x134>

0800753c <HAL_SPI_GetState>:
  return hspi->State;
 800753c:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8007540:	4770      	bx	lr
	...

08007544 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007544:	6a03      	ldr	r3, [r0, #32]
{
 8007546:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007548:	f023 0301 	bic.w	r3, r3, #1
 800754c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007550:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007552:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007554:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007556:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800755a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800755c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800755e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007562:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007564:	4d0a      	ldr	r5, [pc, #40]	; (8007590 <TIM_OC1_SetConfig+0x4c>)
 8007566:	42a8      	cmp	r0, r5
 8007568:	d10b      	bne.n	8007582 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800756a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800756c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007570:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007572:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007576:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800757a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800757c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007580:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007582:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007584:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007586:	684a      	ldr	r2, [r1, #4]
 8007588:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758a:	6203      	str	r3, [r0, #32]
}
 800758c:	bd70      	pop	{r4, r5, r6, pc}
 800758e:	bf00      	nop
 8007590:	40012c00 	.word	0x40012c00

08007594 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007594:	6a03      	ldr	r3, [r0, #32]
{
 8007596:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800759c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800759e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075a0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075a2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075a6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80075aa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ac:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80075ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075b2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075b6:	4d0b      	ldr	r5, [pc, #44]	; (80075e4 <TIM_OC3_SetConfig+0x50>)
 80075b8:	42a8      	cmp	r0, r5
 80075ba:	d10d      	bne.n	80075d8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80075be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80075c6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075ca:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80075ce:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80075d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075d4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075d8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075da:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075dc:	684a      	ldr	r2, [r1, #4]
 80075de:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075e0:	6203      	str	r3, [r0, #32]
}
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	40012c00 	.word	0x40012c00

080075e8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075e8:	6a03      	ldr	r3, [r0, #32]
{
 80075ea:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075fa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007602:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8007604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007608:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760c:	4d06      	ldr	r5, [pc, #24]	; (8007628 <TIM_OC4_SetConfig+0x40>)
 800760e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007610:	bf02      	ittt	eq
 8007612:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007614:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007618:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800761e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007620:	684a      	ldr	r2, [r1, #4]
 8007622:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007624:	6203      	str	r3, [r0, #32]
}
 8007626:	bd30      	pop	{r4, r5, pc}
 8007628:	40012c00 	.word	0x40012c00

0800762c <HAL_TIM_PWM_PulseFinishedCallback>:
 800762c:	4770      	bx	lr

0800762e <TIM_DMADelayPulseCplt>:
{
 800762e:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007630:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007632:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007634:	4282      	cmp	r2, r0
 8007636:	d10b      	bne.n	8007650 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007638:	2301      	movs	r3, #1
 800763a:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800763c:	6992      	ldr	r2, [r2, #24]
 800763e:	b90a      	cbnz	r2, 8007644 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007640:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007644:	4620      	mov	r0, r4
 8007646:	f7ff fff1 	bl	800762c <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764a:	2300      	movs	r3, #0
 800764c:	7723      	strb	r3, [r4, #28]
}
 800764e:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007652:	4283      	cmp	r3, r0
 8007654:	d108      	bne.n	8007668 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007656:	2202      	movs	r2, #2
 8007658:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f1      	bne.n	8007644 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007660:	2301      	movs	r3, #1
 8007662:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007666:	e7ed      	b.n	8007644 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800766a:	4283      	cmp	r3, r0
 800766c:	d108      	bne.n	8007680 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800766e:	2204      	movs	r2, #4
 8007670:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e5      	bne.n	8007644 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007678:	2301      	movs	r3, #1
 800767a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800767e:	e7e1      	b.n	8007644 <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007680:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007682:	4283      	cmp	r3, r0
 8007684:	d1de      	bne.n	8007644 <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007686:	2208      	movs	r2, #8
 8007688:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1d9      	bne.n	8007644 <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007690:	2301      	movs	r3, #1
 8007692:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8007696:	e7d5      	b.n	8007644 <TIM_DMADelayPulseCplt+0x16>

08007698 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 8007698:	4770      	bx	lr

0800769a <TIM_DMADelayPulseHalfCplt>:
{
 800769a:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800769c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800769e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076a0:	4283      	cmp	r3, r0
 80076a2:	d107      	bne.n	80076b4 <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a4:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076a6:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80076a8:	4620      	mov	r0, r4
 80076aa:	f7ff fff5 	bl	8007698 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ae:	2300      	movs	r3, #0
 80076b0:	7723      	strb	r3, [r4, #28]
}
 80076b2:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076b6:	4283      	cmp	r3, r0
 80076b8:	d101      	bne.n	80076be <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ba:	2302      	movs	r3, #2
 80076bc:	e7f3      	b.n	80076a6 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80076c0:	4283      	cmp	r3, r0
 80076c2:	d101      	bne.n	80076c8 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076c4:	2304      	movs	r3, #4
 80076c6:	e7ee      	b.n	80076a6 <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80076ca:	4283      	cmp	r3, r0
 80076cc:	d1ec      	bne.n	80076a8 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076ce:	2308      	movs	r3, #8
 80076d0:	e7e9      	b.n	80076a6 <TIM_DMADelayPulseHalfCplt+0xc>

080076d2 <HAL_TIM_ErrorCallback>:
 80076d2:	4770      	bx	lr

080076d4 <TIM_DMAError>:
{
 80076d4:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d6:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80076d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076da:	4283      	cmp	r3, r0
 80076dc:	d109      	bne.n	80076f2 <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076de:	2301      	movs	r3, #1
 80076e0:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 80076e6:	4620      	mov	r0, r4
 80076e8:	f7ff fff3 	bl	80076d2 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ec:	2300      	movs	r3, #0
 80076ee:	7723      	strb	r3, [r4, #28]
}
 80076f0:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80076f4:	4283      	cmp	r3, r0
 80076f6:	d105      	bne.n	8007704 <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076f8:	2302      	movs	r3, #2
 80076fa:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	2301      	movs	r3, #1
 80076fe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8007702:	e7f0      	b.n	80076e6 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007704:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007706:	4283      	cmp	r3, r0
 8007708:	f04f 0301 	mov.w	r3, #1
 800770c:	d104      	bne.n	8007718 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800770e:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007714:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007716:	e7e6      	b.n	80076e6 <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007718:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800771a:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800771c:	bf03      	ittte	eq
 800771e:	2208      	moveq	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007720:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007724:	7722      	strbeq	r2, [r4, #28]
    htim->State = HAL_TIM_STATE_READY;
 8007726:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 800772a:	e7dc      	b.n	80076e6 <TIM_DMAError+0x12>

0800772c <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800772c:	4a1a      	ldr	r2, [pc, #104]	; (8007798 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800772e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007730:	4290      	cmp	r0, r2
 8007732:	d00a      	beq.n	800774a <TIM_Base_SetConfig+0x1e>
 8007734:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007738:	d007      	beq.n	800774a <TIM_Base_SetConfig+0x1e>
 800773a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800773e:	4290      	cmp	r0, r2
 8007740:	d003      	beq.n	800774a <TIM_Base_SetConfig+0x1e>
 8007742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007746:	4290      	cmp	r0, r2
 8007748:	d115      	bne.n	8007776 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 800774a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800774c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007750:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007752:	4a11      	ldr	r2, [pc, #68]	; (8007798 <TIM_Base_SetConfig+0x6c>)
 8007754:	4290      	cmp	r0, r2
 8007756:	d00a      	beq.n	800776e <TIM_Base_SetConfig+0x42>
 8007758:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800775c:	d007      	beq.n	800776e <TIM_Base_SetConfig+0x42>
 800775e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007762:	4290      	cmp	r0, r2
 8007764:	d003      	beq.n	800776e <TIM_Base_SetConfig+0x42>
 8007766:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800776a:	4290      	cmp	r0, r2
 800776c:	d103      	bne.n	8007776 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8007770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007774:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007776:	694a      	ldr	r2, [r1, #20]
 8007778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800777c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800777e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007780:	688b      	ldr	r3, [r1, #8]
 8007782:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8007784:	680b      	ldr	r3, [r1, #0]
 8007786:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007788:	4b03      	ldr	r3, [pc, #12]	; (8007798 <TIM_Base_SetConfig+0x6c>)
 800778a:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800778c:	bf04      	itt	eq
 800778e:	690b      	ldreq	r3, [r1, #16]
 8007790:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8007792:	2301      	movs	r3, #1
 8007794:	6143      	str	r3, [r0, #20]
}
 8007796:	4770      	bx	lr
 8007798:	40012c00 	.word	0x40012c00

0800779c <HAL_TIM_PWM_Init>:
{
 800779c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800779e:	4604      	mov	r4, r0
 80077a0:	b330      	cbz	r0, 80077f0 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80077a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80077a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80077aa:	b91b      	cbnz	r3, 80077b4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80077ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80077b0:	f7fc ff9a 	bl	80046e8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077b6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80077b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077bc:	1d21      	adds	r1, r4, #4
 80077be:	f7ff ffb5 	bl	800772c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c2:	2301      	movs	r3, #1
  return HAL_OK;
 80077c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80077ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80077d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80077d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80077e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80077ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80077ee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80077f0:	2001      	movs	r0, #1
 80077f2:	e7fc      	b.n	80077ee <HAL_TIM_PWM_Init+0x52>

080077f4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f4:	6a03      	ldr	r3, [r0, #32]
{
 80077f6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077f8:	f023 0310 	bic.w	r3, r3, #16
 80077fc:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80077fe:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007800:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007802:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007804:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007806:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800780a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800780e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007810:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007814:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007818:	4d0b      	ldr	r5, [pc, #44]	; (8007848 <TIM_OC2_SetConfig+0x54>)
 800781a:	42a8      	cmp	r0, r5
 800781c:	d10d      	bne.n	800783a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800781e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007824:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007828:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800782c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007830:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8007832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007836:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800783a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800783c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800783e:	684a      	ldr	r2, [r1, #4]
 8007840:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8007842:	6203      	str	r3, [r0, #32]
}
 8007844:	bd70      	pop	{r4, r5, r6, pc}
 8007846:	bf00      	nop
 8007848:	40012c00 	.word	0x40012c00

0800784c <HAL_TIM_PWM_ConfigChannel>:
{
 800784c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800784e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007852:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007854:	2b01      	cmp	r3, #1
 8007856:	d052      	beq.n	80078fe <HAL_TIM_PWM_ConfigChannel+0xb2>
 8007858:	2301      	movs	r3, #1
  switch (Channel)
 800785a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800785c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007860:	d03c      	beq.n	80078dc <HAL_TIM_PWM_ConfigChannel+0x90>
 8007862:	d806      	bhi.n	8007872 <HAL_TIM_PWM_ConfigChannel+0x26>
 8007864:	b1c2      	cbz	r2, 8007898 <HAL_TIM_PWM_ConfigChannel+0x4c>
 8007866:	2a04      	cmp	r2, #4
 8007868:	d027      	beq.n	80078ba <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 800786a:	2000      	movs	r0, #0
 800786c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8007870:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8007872:	2a0c      	cmp	r2, #12
 8007874:	d1f9      	bne.n	800786a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007876:	6800      	ldr	r0, [r0, #0]
 8007878:	f7ff feb6 	bl	80075e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800787c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800787e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007880:	69da      	ldr	r2, [r3, #28]
 8007882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007886:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007888:	69da      	ldr	r2, [r3, #28]
 800788a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800788e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007890:	69da      	ldr	r2, [r3, #28]
 8007892:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007896:	e030      	b.n	80078fa <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007898:	6800      	ldr	r0, [r0, #0]
 800789a:	f7ff fe53 	bl	8007544 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800789e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078a0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078a2:	699a      	ldr	r2, [r3, #24]
 80078a4:	f042 0208 	orr.w	r2, r2, #8
 80078a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	f022 0204 	bic.w	r2, r2, #4
 80078b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078b2:	699a      	ldr	r2, [r3, #24]
 80078b4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078b6:	619a      	str	r2, [r3, #24]
      break;
 80078b8:	e7d7      	b.n	800786a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	f7ff ff9a 	bl	80077f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078c2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078c4:	699a      	ldr	r2, [r3, #24]
 80078c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80078da:	e7ec      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80078dc:	6800      	ldr	r0, [r0, #0]
 80078de:	f7ff fe59 	bl	8007594 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078e2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078e4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80078e6:	69da      	ldr	r2, [r3, #28]
 80078e8:	f042 0208 	orr.w	r2, r2, #8
 80078ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80078ee:	69da      	ldr	r2, [r3, #28]
 80078f0:	f022 0204 	bic.w	r2, r2, #4
 80078f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078f6:	69da      	ldr	r2, [r3, #28]
 80078f8:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078fa:	61da      	str	r2, [r3, #28]
      break;
 80078fc:	e7b5      	b.n	800786a <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 80078fe:	2002      	movs	r0, #2
 8007900:	e7b6      	b.n	8007870 <HAL_TIM_PWM_ConfigChannel+0x24>

08007902 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007902:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007904:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007906:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007908:	f001 011f 	and.w	r1, r1, #31
 800790c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800790e:	ea23 0304 	bic.w	r3, r3, r4
 8007912:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007914:	6a03      	ldr	r3, [r0, #32]
 8007916:	408a      	lsls	r2, r1
 8007918:	431a      	orrs	r2, r3
 800791a:	6202      	str	r2, [r0, #32]
}
 800791c:	bd10      	pop	{r4, pc}
	...

08007920 <HAL_TIM_OC_Start_DMA>:
{
 8007920:	b570      	push	{r4, r5, r6, lr}
 8007922:	460d      	mov	r5, r1
 8007924:	4604      	mov	r4, r0
 8007926:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007928:	b92d      	cbnz	r5, 8007936 <HAL_TIM_OC_Start_DMA+0x16>
 800792a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800792e:	2a02      	cmp	r2, #2
 8007930:	b2d0      	uxtb	r0, r2
 8007932:	d11c      	bne.n	800796e <HAL_TIM_OC_Start_DMA+0x4e>
}
 8007934:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007936:	2d04      	cmp	r5, #4
 8007938:	d107      	bne.n	800794a <HAL_TIM_OC_Start_DMA+0x2a>
 800793a:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 800793e:	2a02      	cmp	r2, #2
 8007940:	b2d0      	uxtb	r0, r2
 8007942:	d0f7      	beq.n	8007934 <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007944:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 8007948:	e013      	b.n	8007972 <HAL_TIM_OC_Start_DMA+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800794a:	2d08      	cmp	r5, #8
 800794c:	d107      	bne.n	800795e <HAL_TIM_OC_Start_DMA+0x3e>
 800794e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8007952:	2a02      	cmp	r2, #2
 8007954:	b2d0      	uxtb	r0, r2
 8007956:	d0ed      	beq.n	8007934 <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007958:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 800795c:	e009      	b.n	8007972 <HAL_TIM_OC_Start_DMA+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800795e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007962:	2a02      	cmp	r2, #2
 8007964:	b2d0      	uxtb	r0, r2
 8007966:	d0e5      	beq.n	8007934 <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007968:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800796c:	e001      	b.n	8007972 <HAL_TIM_OC_Start_DMA+0x52>
 800796e:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 8007972:	1e42      	subs	r2, r0, #1
 8007974:	4250      	negs	r0, r2
 8007976:	4150      	adcs	r0, r2
 8007978:	b908      	cbnz	r0, 800797e <HAL_TIM_OC_Start_DMA+0x5e>
    return HAL_ERROR;
 800797a:	2001      	movs	r0, #1
 800797c:	e7da      	b.n	8007934 <HAL_TIM_OC_Start_DMA+0x14>
    if ((pData == NULL) && (Length > 0U))
 800797e:	b909      	cbnz	r1, 8007984 <HAL_TIM_OC_Start_DMA+0x64>
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1fa      	bne.n	800797a <HAL_TIM_OC_Start_DMA+0x5a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007984:	2002      	movs	r0, #2
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	bb35      	cbnz	r5, 80079d8 <HAL_TIM_OC_Start_DMA+0xb8>
 800798a:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800798e:	4e39      	ldr	r6, [pc, #228]	; (8007a74 <HAL_TIM_OC_Start_DMA+0x154>)
 8007990:	6a60      	ldr	r0, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007992:	3234      	adds	r2, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007994:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007996:	4e38      	ldr	r6, [pc, #224]	; (8007a78 <HAL_TIM_OC_Start_DMA+0x158>)
 8007998:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800799a:	4e38      	ldr	r6, [pc, #224]	; (8007a7c <HAL_TIM_OC_Start_DMA+0x15c>)
 800799c:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800799e:	f7fe f951 	bl	8005c44 <HAL_DMA_Start_IT>
 80079a2:	2800      	cmp	r0, #0
 80079a4:	d1e9      	bne.n	800797a <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	68d3      	ldr	r3, [r2, #12]
 80079aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80079ae:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80079b0:	2201      	movs	r2, #1
 80079b2:	4629      	mov	r1, r5
 80079b4:	6820      	ldr	r0, [r4, #0]
 80079b6:	f7ff ffa4 	bl	8007902 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	4a30      	ldr	r2, [pc, #192]	; (8007a80 <HAL_TIM_OC_Start_DMA+0x160>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d149      	bne.n	8007a56 <HAL_TIM_OC_Start_DMA+0x136>
    __HAL_TIM_MOE_ENABLE(htim);
 80079c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80079c8:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d0:	2a06      	cmp	r2, #6
 80079d2:	d14a      	bne.n	8007a6a <HAL_TIM_OC_Start_DMA+0x14a>
  return HAL_OK;
 80079d4:	2000      	movs	r0, #0
 80079d6:	e7ad      	b.n	8007934 <HAL_TIM_OC_Start_DMA+0x14>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d8:	2d04      	cmp	r5, #4
 80079da:	d112      	bne.n	8007a02 <HAL_TIM_OC_Start_DMA+0xe2>
 80079dc:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079e0:	4e24      	ldr	r6, [pc, #144]	; (8007a74 <HAL_TIM_OC_Start_DMA+0x154>)
 80079e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80079e4:	3238      	adds	r2, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079e6:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079e8:	4e23      	ldr	r6, [pc, #140]	; (8007a78 <HAL_TIM_OC_Start_DMA+0x158>)
 80079ea:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80079ec:	4e23      	ldr	r6, [pc, #140]	; (8007a7c <HAL_TIM_OC_Start_DMA+0x15c>)
 80079ee:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80079f0:	f7fe f928 	bl	8005c44 <HAL_DMA_Start_IT>
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1c0      	bne.n	800797a <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80079f8:	6822      	ldr	r2, [r4, #0]
 80079fa:	68d3      	ldr	r3, [r2, #12]
 80079fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007a00:	e7d5      	b.n	80079ae <HAL_TIM_OC_Start_DMA+0x8e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a02:	2d08      	cmp	r5, #8
 8007a04:	d112      	bne.n	8007a2c <HAL_TIM_OC_Start_DMA+0x10c>
 8007a06:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a0a:	4e1a      	ldr	r6, [pc, #104]	; (8007a74 <HAL_TIM_OC_Start_DMA+0x154>)
 8007a0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007a0e:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a10:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a12:	4e19      	ldr	r6, [pc, #100]	; (8007a78 <HAL_TIM_OC_Start_DMA+0x158>)
 8007a14:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a16:	4e19      	ldr	r6, [pc, #100]	; (8007a7c <HAL_TIM_OC_Start_DMA+0x15c>)
 8007a18:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007a1a:	f7fe f913 	bl	8005c44 <HAL_DMA_Start_IT>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d1ab      	bne.n	800797a <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	68d3      	ldr	r3, [r2, #12]
 8007a26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a2a:	e7c0      	b.n	80079ae <HAL_TIM_OC_Start_DMA+0x8e>
  switch (Channel)
 8007a2c:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a2e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  switch (Channel)
 8007a32:	d1bd      	bne.n	80079b0 <HAL_TIM_OC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007a36:	4e0f      	ldr	r6, [pc, #60]	; (8007a74 <HAL_TIM_OC_Start_DMA+0x154>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007a38:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a3a:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a3c:	4e0e      	ldr	r6, [pc, #56]	; (8007a78 <HAL_TIM_OC_Start_DMA+0x158>)
 8007a3e:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007a40:	4e0e      	ldr	r6, [pc, #56]	; (8007a7c <HAL_TIM_OC_Start_DMA+0x15c>)
 8007a42:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007a44:	f7fe f8fe 	bl	8005c44 <HAL_DMA_Start_IT>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d196      	bne.n	800797a <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007a4c:	6822      	ldr	r2, [r4, #0]
 8007a4e:	68d3      	ldr	r3, [r2, #12]
 8007a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a54:	e7ab      	b.n	80079ae <HAL_TIM_OC_Start_DMA+0x8e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a5a:	d0b6      	beq.n	80079ca <HAL_TIM_OC_Start_DMA+0xaa>
 8007a5c:	4a09      	ldr	r2, [pc, #36]	; (8007a84 <HAL_TIM_OC_Start_DMA+0x164>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d0b3      	beq.n	80079ca <HAL_TIM_OC_Start_DMA+0xaa>
 8007a62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d0af      	beq.n	80079ca <HAL_TIM_OC_Start_DMA+0xaa>
    __HAL_TIM_ENABLE(htim);
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	f042 0201 	orr.w	r2, r2, #1
 8007a70:	601a      	str	r2, [r3, #0]
 8007a72:	e7af      	b.n	80079d4 <HAL_TIM_OC_Start_DMA+0xb4>
 8007a74:	0800762f 	.word	0x0800762f
 8007a78:	0800769b 	.word	0x0800769b
 8007a7c:	080076d5 	.word	0x080076d5
 8007a80:	40012c00 	.word	0x40012c00
 8007a84:	40000400 	.word	0x40000400

08007a88 <HAL_TIM_PWM_Start_DMA>:
 8007a88:	f7ff bf4a 	b.w	8007920 <HAL_TIM_OC_Start_DMA>

08007a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a8c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007a92:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f04f 0002 	mov.w	r0, #2
 8007a9a:	d022      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a9c:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007a9e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007aa2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aa4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007aa6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007aaa:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8007aac:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007aae:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab0:	4c0c      	ldr	r4, [pc, #48]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8007ab2:	42a3      	cmp	r3, r4
 8007ab4:	d00a      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aba:	d007      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007abc:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	d003      	beq.n	8007acc <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8007ac4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007ac8:	42a3      	cmp	r3, r4
 8007aca:	d104      	bne.n	8007ad6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007acc:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ace:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ad2:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ad4:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ad6:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007ad8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007ada:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007ade:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 8007ae2:	bd30      	pop	{r4, r5, pc}
 8007ae4:	40012c00 	.word	0x40012c00

08007ae8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae8:	6803      	ldr	r3, [r0, #0]
 8007aea:	68da      	ldr	r2, [r3, #12]
 8007aec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007af0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007af2:	695a      	ldr	r2, [r3, #20]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007afc:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afe:	bf02      	ittt	eq
 8007b00:	68da      	ldreq	r2, [r3, #12]
 8007b02:	f022 0210 	biceq.w	r2, r2, #16
 8007b06:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b08:	2320      	movs	r3, #32
 8007b0a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6303      	str	r3, [r0, #48]	; 0x30
}
 8007b12:	4770      	bx	lr

08007b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b14:	b510      	push	{r4, lr}
 8007b16:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b18:	6803      	ldr	r3, [r0, #0]
 8007b1a:	68c1      	ldr	r1, [r0, #12]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007b22:	430a      	orrs	r2, r1
 8007b24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b26:	6882      	ldr	r2, [r0, #8]
 8007b28:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007b2a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b2c:	4302      	orrs	r2, r0
 8007b2e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007b30:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007b34:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007b38:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007b3a:	430a      	orrs	r2, r1
 8007b3c:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b3e:	695a      	ldr	r2, [r3, #20]
 8007b40:	69a1      	ldr	r1, [r4, #24]
 8007b42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007b46:	430a      	orrs	r2, r1
 8007b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007b4a:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <UART_SetConfig+0x70>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d115      	bne.n	8007b7c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007b50:	f7ff f9a0 	bl	8006e94 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b54:	2319      	movs	r3, #25
 8007b56:	4343      	muls	r3, r0
 8007b58:	6862      	ldr	r2, [r4, #4]
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	0092      	lsls	r2, r2, #2
 8007b5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b62:	2264      	movs	r2, #100	; 0x64
 8007b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b68:	fb02 3311 	mls	r3, r2, r1, r3
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	3332      	adds	r3, #50	; 0x32
 8007b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b74:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007b78:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b7a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8007b7c:	f7ff f97a 	bl	8006e74 <HAL_RCC_GetPCLK1Freq>
 8007b80:	e7e8      	b.n	8007b54 <UART_SetConfig+0x40>
 8007b82:	bf00      	nop
 8007b84:	40013800 	.word	0x40013800

08007b88 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8007b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	460e      	mov	r6, r1
 8007b8e:	4617      	mov	r7, r2
 8007b90:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b92:	6822      	ldr	r2, [r4, #0]
 8007b94:	6813      	ldr	r3, [r2, #0]
 8007b96:	ea36 0303 	bics.w	r3, r6, r3
 8007b9a:	d101      	bne.n	8007ba0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e014      	b.n	8007bca <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8007ba0:	1c6b      	adds	r3, r5, #1
 8007ba2:	d0f7      	beq.n	8007b94 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ba4:	b995      	cbnz	r5, 8007bcc <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ba6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8007ba8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007baa:	68da      	ldr	r2, [r3, #12]
 8007bac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007bb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bb2:	695a      	ldr	r2, [r3, #20]
 8007bb4:	f022 0201 	bic.w	r2, r2, #1
 8007bb8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007bba:	2320      	movs	r3, #32
 8007bbc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007bc0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007bca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007bcc:	f7fd fd58 	bl	8005680 <HAL_GetTick>
 8007bd0:	1bc0      	subs	r0, r0, r7
 8007bd2:	4285      	cmp	r5, r0
 8007bd4:	d2dd      	bcs.n	8007b92 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8007bd6:	e7e6      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08007bd8 <HAL_UART_Init>:
{
 8007bd8:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007bda:	4604      	mov	r4, r0
 8007bdc:	b340      	cbz	r0, 8007c30 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007bde:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007be2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007be6:	b91b      	cbnz	r3, 8007bf0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007be8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8007bec:	f7fc fdd6 	bl	800479c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007bf0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007bf2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007bf4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8007bf8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007bfa:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c00:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007c02:	f7ff ff87 	bl	8007b14 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c06:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c08:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c12:	695a      	ldr	r2, [r3, #20]
 8007c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c18:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c20:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007c22:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c24:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007c2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007c30:	2001      	movs	r0, #1
 8007c32:	e7fc      	b.n	8007c2e <HAL_UART_Init+0x56>

08007c34 <HAL_UART_Transmit>:
{
 8007c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c38:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007c3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8007c3e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007c40:	2b20      	cmp	r3, #32
{
 8007c42:	460e      	mov	r6, r1
 8007c44:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007c46:	d148      	bne.n	8007cda <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8007c48:	2900      	cmp	r1, #0
 8007c4a:	d044      	beq.n	8007cd6 <HAL_UART_Transmit+0xa2>
 8007c4c:	2a00      	cmp	r2, #0
 8007c4e:	d042      	beq.n	8007cd6 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8007c50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d040      	beq.n	8007cda <HAL_UART_Transmit+0xa6>
 8007c58:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8007c5c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c60:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c62:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8007c68:	f7fd fd0a 	bl	8005680 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c6c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8007c6e:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8007c74:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8007c76:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c78:	d103      	bne.n	8007c82 <HAL_UART_Transmit+0x4e>
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	b90b      	cbnz	r3, 8007c82 <HAL_UART_Transmit+0x4e>
 8007c7e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8007c80:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8007c82:	2300      	movs	r3, #0
 8007c84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8007c88:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	b953      	cbnz	r3, 8007ca4 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c8e:	464b      	mov	r3, r9
 8007c90:	4642      	mov	r2, r8
 8007c92:	2140      	movs	r1, #64	; 0x40
 8007c94:	4620      	mov	r0, r4
 8007c96:	f7ff ff77 	bl	8007b88 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8007c9a:	b950      	cbnz	r0, 8007cb2 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8007c9c:	2320      	movs	r3, #32
 8007c9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8007ca2:	e007      	b.n	8007cb4 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	4642      	mov	r2, r8
 8007ca8:	2180      	movs	r1, #128	; 0x80
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff ff6c 	bl	8007b88 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8007cb0:	b110      	cbz	r0, 8007cb8 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8007cb2:	2003      	movs	r0, #3
}
 8007cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8007cb8:	6822      	ldr	r2, [r4, #0]
 8007cba:	b94e      	cbnz	r6, 8007cd0 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007cbc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cc4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8007cc6:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8007cc8:	3901      	subs	r1, #1
 8007cca:	b289      	uxth	r1, r1
 8007ccc:	84e1      	strh	r1, [r4, #38]	; 0x26
 8007cce:	e7db      	b.n	8007c88 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007cd0:	f816 3b01 	ldrb.w	r3, [r6], #1
 8007cd4:	e7f6      	b.n	8007cc4 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8007cd6:	2001      	movs	r0, #1
 8007cd8:	e7ec      	b.n	8007cb4 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8007cda:	2002      	movs	r0, #2
 8007cdc:	e7ea      	b.n	8007cb4 <HAL_UART_Transmit+0x80>

08007cde <HAL_UART_TxCpltCallback>:
 8007cde:	4770      	bx	lr

08007ce0 <HAL_UART_ErrorCallback>:
 8007ce0:	4770      	bx	lr

08007ce2 <UART_DMAAbortOnError>:
{
 8007ce2:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8007ce4:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ce6:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8007ce8:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007cea:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007cec:	f7ff fff8 	bl	8007ce0 <HAL_UART_ErrorCallback>
}
 8007cf0:	bd08      	pop	{r3, pc}

08007cf2 <HAL_UARTEx_RxEventCallback>:
}
 8007cf2:	4770      	bx	lr

08007cf4 <UART_Receive_IT>:
{
 8007cf4:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cf6:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007cfa:	2b22      	cmp	r3, #34	; 0x22
 8007cfc:	d149      	bne.n	8007d92 <UART_Receive_IT+0x9e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cfe:	6881      	ldr	r1, [r0, #8]
 8007d00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d02:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007d06:	6802      	ldr	r2, [r0, #0]
 8007d08:	d133      	bne.n	8007d72 <UART_Receive_IT+0x7e>
 8007d0a:	6901      	ldr	r1, [r0, #16]
 8007d0c:	2900      	cmp	r1, #0
 8007d0e:	d133      	bne.n	8007d78 <UART_Receive_IT+0x84>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d10:	6852      	ldr	r2, [r2, #4]
 8007d12:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d16:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8007d1a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8007d1c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007d1e:	3c01      	subs	r4, #1
 8007d20:	b2a4      	uxth	r4, r4
 8007d22:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8007d24:	bb1c      	cbnz	r4, 8007d6e <UART_Receive_IT+0x7a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d26:	6803      	ldr	r3, [r0, #0]
 8007d28:	68da      	ldr	r2, [r3, #12]
 8007d2a:	f022 0220 	bic.w	r2, r2, #32
 8007d2e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d30:	68da      	ldr	r2, [r3, #12]
 8007d32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d36:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007d40:	2220      	movs	r2, #32
 8007d42:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d46:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007d48:	2a01      	cmp	r2, #1
 8007d4a:	d11f      	bne.n	8007d8c <UART_Receive_IT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4c:	6304      	str	r4, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	f022 0210 	bic.w	r2, r2, #16
 8007d54:	60da      	str	r2, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	06d2      	lsls	r2, r2, #27
 8007d5a:	d505      	bpl.n	8007d68 <UART_Receive_IT+0x74>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d5c:	9401      	str	r4, [sp, #4]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	9201      	str	r2, [sp, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	9301      	str	r3, [sp, #4]
 8007d66:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d68:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8007d6a:	f7ff ffc2 	bl	8007cf2 <HAL_UARTEx_RxEventCallback>
 8007d6e:	2000      	movs	r0, #0
 8007d70:	e010      	b.n	8007d94 <UART_Receive_IT+0xa0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d72:	b939      	cbnz	r1, 8007d84 <UART_Receive_IT+0x90>
 8007d74:	6901      	ldr	r1, [r0, #16]
 8007d76:	b929      	cbnz	r1, 8007d84 <UART_Receive_IT+0x90>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d78:	6852      	ldr	r2, [r2, #4]
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8007d7e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007d80:	3301      	adds	r3, #1
 8007d82:	e7ca      	b.n	8007d1a <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d84:	6852      	ldr	r2, [r2, #4]
 8007d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d8a:	e7f7      	b.n	8007d7c <UART_Receive_IT+0x88>
       HAL_UART_RxCpltCallback(huart);
 8007d8c:	f7f9 f920 	bl	8000fd0 <HAL_UART_RxCpltCallback>
 8007d90:	e7ed      	b.n	8007d6e <UART_Receive_IT+0x7a>
    return HAL_BUSY;
 8007d92:	2002      	movs	r0, #2
}
 8007d94:	b002      	add	sp, #8
 8007d96:	bd10      	pop	{r4, pc}

08007d98 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d98:	6803      	ldr	r3, [r0, #0]
{
 8007d9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d9c:	681a      	ldr	r2, [r3, #0]
{
 8007d9e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8007da0:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007da4:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007da6:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8007da8:	d108      	bne.n	8007dbc <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007daa:	0695      	lsls	r5, r2, #26
 8007dac:	d55f      	bpl.n	8007e6e <HAL_UART_IRQHandler+0xd6>
 8007dae:	068d      	lsls	r5, r1, #26
 8007db0:	d55d      	bpl.n	8007e6e <HAL_UART_IRQHandler+0xd6>
}
 8007db2:	b003      	add	sp, #12
 8007db4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8007db8:	f7ff bf9c 	b.w	8007cf4 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007dbc:	f005 0001 	and.w	r0, r5, #1
 8007dc0:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8007dc4:	4305      	orrs	r5, r0
 8007dc6:	d052      	beq.n	8007e6e <HAL_UART_IRQHandler+0xd6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007dc8:	07d5      	lsls	r5, r2, #31
 8007dca:	d505      	bpl.n	8007dd8 <HAL_UART_IRQHandler+0x40>
 8007dcc:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dce:	bf42      	ittt	mi
 8007dd0:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8007dd2:	f043 0301 	orrmi.w	r3, r3, #1
 8007dd6:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007dd8:	0755      	lsls	r5, r2, #29
 8007dda:	d504      	bpl.n	8007de6 <HAL_UART_IRQHandler+0x4e>
 8007ddc:	b118      	cbz	r0, 8007de6 <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007de6:	0793      	lsls	r3, r2, #30
 8007de8:	d504      	bpl.n	8007df4 <HAL_UART_IRQHandler+0x5c>
 8007dea:	b118      	cbz	r0, 8007df4 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dee:	f043 0304 	orr.w	r3, r3, #4
 8007df2:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007df4:	0715      	lsls	r5, r2, #28
 8007df6:	d507      	bpl.n	8007e08 <HAL_UART_IRQHandler+0x70>
 8007df8:	f001 0320 	and.w	r3, r1, #32
 8007dfc:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007dfe:	bf1e      	ittt	ne
 8007e00:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8007e02:	f043 0308 	orrne.w	r3, r3, #8
 8007e06:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e0a:	b353      	cbz	r3, 8007e62 <HAL_UART_IRQHandler+0xca>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e0c:	0692      	lsls	r2, r2, #26
 8007e0e:	d504      	bpl.n	8007e1a <HAL_UART_IRQHandler+0x82>
 8007e10:	068b      	lsls	r3, r1, #26
 8007e12:	d502      	bpl.n	8007e1a <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8007e14:	4620      	mov	r0, r4
 8007e16:	f7ff ff6d 	bl	8007cf4 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8007e1c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e1e:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e20:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007e26:	f005 0508 	and.w	r5, r5, #8
 8007e2a:	431d      	orrs	r5, r3
 8007e2c:	d01b      	beq.n	8007e66 <HAL_UART_IRQHandler+0xce>
        UART_EndRxTransfer(huart);
 8007e2e:	f7ff fe5b 	bl	8007ae8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	695a      	ldr	r2, [r3, #20]
 8007e36:	0655      	lsls	r5, r2, #25
 8007e38:	d510      	bpl.n	8007e5c <HAL_UART_IRQHandler+0xc4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007e3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e42:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007e44:	b150      	cbz	r0, 8007e5c <HAL_UART_IRQHandler+0xc4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e46:	4b53      	ldr	r3, [pc, #332]	; (8007f94 <HAL_UART_IRQHandler+0x1fc>)
 8007e48:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e4a:	f7fd ff55 	bl	8005cf8 <HAL_DMA_Abort_IT>
 8007e4e:	b140      	cbz	r0, 8007e62 <HAL_UART_IRQHandler+0xca>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e50:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007e52:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8007e54:	b003      	add	sp, #12
 8007e56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e5a:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f7ff ff3f 	bl	8007ce0 <HAL_UART_ErrorCallback>
}
 8007e62:	b003      	add	sp, #12
 8007e64:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8007e66:	f7ff ff3b 	bl	8007ce0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e6a:	6425      	str	r5, [r4, #64]	; 0x40
 8007e6c:	e7f9      	b.n	8007e62 <HAL_UART_IRQHandler+0xca>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e6e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007e70:	2801      	cmp	r0, #1
 8007e72:	d155      	bne.n	8007f20 <HAL_UART_IRQHandler+0x188>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007e74:	06d0      	lsls	r0, r2, #27
 8007e76:	d553      	bpl.n	8007f20 <HAL_UART_IRQHandler+0x188>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007e78:	06cd      	lsls	r5, r1, #27
 8007e7a:	d551      	bpl.n	8007f20 <HAL_UART_IRQHandler+0x188>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	9101      	str	r1, [sp, #4]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	9201      	str	r2, [sp, #4]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	9201      	str	r2, [sp, #4]
 8007e88:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e8a:	695a      	ldr	r2, [r3, #20]
 8007e8c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8007e90:	d02a      	beq.n	8007ee8 <HAL_UART_IRQHandler+0x150>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007e94:	6802      	ldr	r2, [r0, #0]
 8007e96:	6852      	ldr	r2, [r2, #4]
 8007e98:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	d0e1      	beq.n	8007e62 <HAL_UART_IRQHandler+0xca>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e9e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8007ea0:	4295      	cmp	r5, r2
 8007ea2:	d9de      	bls.n	8007e62 <HAL_UART_IRQHandler+0xca>
        huart->RxXferCount = nb_remaining_rx_data;
 8007ea4:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ea6:	6982      	ldr	r2, [r0, #24]
 8007ea8:	2a20      	cmp	r2, #32
 8007eaa:	d015      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x140>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007eb2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb4:	695a      	ldr	r2, [r3, #20]
 8007eb6:	f022 0201 	bic.w	r2, r2, #1
 8007eba:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ebc:	695a      	ldr	r2, [r3, #20]
 8007ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ec2:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8007ec4:	2220      	movs	r2, #32
 8007ec6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eca:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	f022 0210 	bic.w	r2, r2, #16
 8007ed2:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ed4:	f7fd fef2 	bl	8005cbc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ed8:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007eda:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007edc:	1ac9      	subs	r1, r1, r3
 8007ede:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	f7ff ff06 	bl	8007cf2 <HAL_UARTEx_RxEventCallback>
 8007ee6:	e7bc      	b.n	8007e62 <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ee8:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8007eea:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8007eec:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8007eee:	b289      	uxth	r1, r1
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	d0b6      	beq.n	8007e62 <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ef4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007ef6:	1a09      	subs	r1, r1, r0
 8007ef8:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8007efa:	2900      	cmp	r1, #0
 8007efc:	d0b1      	beq.n	8007e62 <HAL_UART_IRQHandler+0xca>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007efe:	68d8      	ldr	r0, [r3, #12]
 8007f00:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8007f04:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f06:	6958      	ldr	r0, [r3, #20]
 8007f08:	f020 0001 	bic.w	r0, r0, #1
 8007f0c:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	2020      	movs	r0, #32
 8007f10:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f14:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	f022 0210 	bic.w	r2, r2, #16
 8007f1c:	60da      	str	r2, [r3, #12]
 8007f1e:	e7df      	b.n	8007ee0 <HAL_UART_IRQHandler+0x148>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f20:	0610      	lsls	r0, r2, #24
 8007f22:	d526      	bpl.n	8007f72 <HAL_UART_IRQHandler+0x1da>
 8007f24:	060d      	lsls	r5, r1, #24
 8007f26:	d524      	bpl.n	8007f72 <HAL_UART_IRQHandler+0x1da>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f28:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007f2c:	2a21      	cmp	r2, #33	; 0x21
 8007f2e:	d198      	bne.n	8007e62 <HAL_UART_IRQHandler+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f30:	68a1      	ldr	r1, [r4, #8]
 8007f32:	6a22      	ldr	r2, [r4, #32]
 8007f34:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007f38:	d116      	bne.n	8007f68 <HAL_UART_IRQHandler+0x1d0>
 8007f3a:	6921      	ldr	r1, [r4, #16]
 8007f3c:	b9a1      	cbnz	r1, 8007f68 <HAL_UART_IRQHandler+0x1d0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f3e:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007f42:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007f46:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f48:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007f4a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007f4c:	3a01      	subs	r2, #1
 8007f4e:	b292      	uxth	r2, r2
 8007f50:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007f52:	2a00      	cmp	r2, #0
 8007f54:	d185      	bne.n	8007e62 <HAL_UART_IRQHandler+0xca>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f56:	68da      	ldr	r2, [r3, #12]
 8007f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f5c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f5e:	68da      	ldr	r2, [r3, #12]
 8007f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f64:	60da      	str	r2, [r3, #12]
 8007f66:	e77c      	b.n	8007e62 <HAL_UART_IRQHandler+0xca>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f68:	1c51      	adds	r1, r2, #1
 8007f6a:	6221      	str	r1, [r4, #32]
 8007f6c:	7812      	ldrb	r2, [r2, #0]
 8007f6e:	605a      	str	r2, [r3, #4]
 8007f70:	e7eb      	b.n	8007f4a <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f72:	0650      	lsls	r0, r2, #25
 8007f74:	f57f af75 	bpl.w	8007e62 <HAL_UART_IRQHandler+0xca>
 8007f78:	064a      	lsls	r2, r1, #25
 8007f7a:	f57f af72 	bpl.w	8007e62 <HAL_UART_IRQHandler+0xca>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f7e:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007f80:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f86:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8007f8e:	f7ff fea6 	bl	8007cde <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007f92:	e766      	b.n	8007e62 <HAL_UART_IRQHandler+0xca>
 8007f94:	08007ce3 	.word	0x08007ce3

08007f98 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 8007f98:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 8007f9a:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 8007f9c:	6281      	str	r1, [r0, #40]	; 0x28
{
 8007f9e:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fa0:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8007fa6:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007fb6:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007fb8:	695a      	ldr	r2, [r3, #20]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007fc0:	68da      	ldr	r2, [r3, #12]
 8007fc2:	f042 0220 	orr.w	r2, r2, #32
 8007fc6:	60da      	str	r2, [r3, #12]
}
 8007fc8:	4770      	bx	lr

08007fca <HAL_UART_Receive_IT>:
{
 8007fca:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fcc:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8007fd0:	2e20      	cmp	r6, #32
 8007fd2:	d110      	bne.n	8007ff6 <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8007fd4:	b161      	cbz	r1, 8007ff0 <HAL_UART_Receive_IT+0x26>
 8007fd6:	b15a      	cbz	r2, 8007ff0 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 8007fd8:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8007fdc:	2c01      	cmp	r4, #1
 8007fde:	d00a      	beq.n	8007ff6 <HAL_UART_Receive_IT+0x2c>
 8007fe0:	2401      	movs	r4, #1
 8007fe2:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe6:	2400      	movs	r4, #0
 8007fe8:	6304      	str	r4, [r0, #48]	; 0x30
}
 8007fea:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007fec:	f7ff bfd4 	b.w	8007f98 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8007ff0:	2001      	movs	r0, #1
}
 8007ff2:	bc70      	pop	{r4, r5, r6}
 8007ff4:	4770      	bx	lr
    return HAL_BUSY;
 8007ff6:	2002      	movs	r0, #2
 8007ff8:	e7fb      	b.n	8007ff2 <HAL_UART_Receive_IT+0x28>
	...

08007ffc <__errno>:
 8007ffc:	4b01      	ldr	r3, [pc, #4]	; (8008004 <__errno+0x8>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000054 	.word	0x20000054

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	2600      	movs	r6, #0
 800800c:	4d0c      	ldr	r5, [pc, #48]	; (8008040 <__libc_init_array+0x38>)
 800800e:	4c0d      	ldr	r4, [pc, #52]	; (8008044 <__libc_init_array+0x3c>)
 8008010:	1b64      	subs	r4, r4, r5
 8008012:	10a4      	asrs	r4, r4, #2
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	f001 f9d2 	bl	80093c0 <_init>
 800801c:	2600      	movs	r6, #0
 800801e:	4d0a      	ldr	r5, [pc, #40]	; (8008048 <__libc_init_array+0x40>)
 8008020:	4c0a      	ldr	r4, [pc, #40]	; (800804c <__libc_init_array+0x44>)
 8008022:	1b64      	subs	r4, r4, r5
 8008024:	10a4      	asrs	r4, r4, #2
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	0800a6d0 	.word	0x0800a6d0
 8008044:	0800a6d0 	.word	0x0800a6d0
 8008048:	0800a6d0 	.word	0x0800a6d0
 800804c:	0800a6d4 	.word	0x0800a6d4

08008050 <memcpy>:
 8008050:	440a      	add	r2, r1
 8008052:	4291      	cmp	r1, r2
 8008054:	f100 33ff 	add.w	r3, r0, #4294967295
 8008058:	d100      	bne.n	800805c <memcpy+0xc>
 800805a:	4770      	bx	lr
 800805c:	b510      	push	{r4, lr}
 800805e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008062:	4291      	cmp	r1, r2
 8008064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008068:	d1f9      	bne.n	800805e <memcpy+0xe>
 800806a:	bd10      	pop	{r4, pc}

0800806c <memset>:
 800806c:	4603      	mov	r3, r0
 800806e:	4402      	add	r2, r0
 8008070:	4293      	cmp	r3, r2
 8008072:	d100      	bne.n	8008076 <memset+0xa>
 8008074:	4770      	bx	lr
 8008076:	f803 1b01 	strb.w	r1, [r3], #1
 800807a:	e7f9      	b.n	8008070 <memset+0x4>

0800807c <iprintf>:
 800807c:	b40f      	push	{r0, r1, r2, r3}
 800807e:	4b0a      	ldr	r3, [pc, #40]	; (80080a8 <iprintf+0x2c>)
 8008080:	b513      	push	{r0, r1, r4, lr}
 8008082:	681c      	ldr	r4, [r3, #0]
 8008084:	b124      	cbz	r4, 8008090 <iprintf+0x14>
 8008086:	69a3      	ldr	r3, [r4, #24]
 8008088:	b913      	cbnz	r3, 8008090 <iprintf+0x14>
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fa86 	bl	800859c <__sinit>
 8008090:	ab05      	add	r3, sp, #20
 8008092:	4620      	mov	r0, r4
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	68a1      	ldr	r1, [r4, #8]
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	f000 fdad 	bl	8008bf8 <_vfiprintf_r>
 800809e:	b002      	add	sp, #8
 80080a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080a4:	b004      	add	sp, #16
 80080a6:	4770      	bx	lr
 80080a8:	20000054 	.word	0x20000054

080080ac <_puts_r>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	460e      	mov	r6, r1
 80080b0:	4605      	mov	r5, r0
 80080b2:	b118      	cbz	r0, 80080bc <_puts_r+0x10>
 80080b4:	6983      	ldr	r3, [r0, #24]
 80080b6:	b90b      	cbnz	r3, 80080bc <_puts_r+0x10>
 80080b8:	f000 fa70 	bl	800859c <__sinit>
 80080bc:	69ab      	ldr	r3, [r5, #24]
 80080be:	68ac      	ldr	r4, [r5, #8]
 80080c0:	b913      	cbnz	r3, 80080c8 <_puts_r+0x1c>
 80080c2:	4628      	mov	r0, r5
 80080c4:	f000 fa6a 	bl	800859c <__sinit>
 80080c8:	4b2c      	ldr	r3, [pc, #176]	; (800817c <_puts_r+0xd0>)
 80080ca:	429c      	cmp	r4, r3
 80080cc:	d120      	bne.n	8008110 <_puts_r+0x64>
 80080ce:	686c      	ldr	r4, [r5, #4]
 80080d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080d2:	07db      	lsls	r3, r3, #31
 80080d4:	d405      	bmi.n	80080e2 <_puts_r+0x36>
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	0598      	lsls	r0, r3, #22
 80080da:	d402      	bmi.n	80080e2 <_puts_r+0x36>
 80080dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080de:	f000 fafb 	bl	80086d8 <__retarget_lock_acquire_recursive>
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	0719      	lsls	r1, r3, #28
 80080e6:	d51d      	bpl.n	8008124 <_puts_r+0x78>
 80080e8:	6923      	ldr	r3, [r4, #16]
 80080ea:	b1db      	cbz	r3, 8008124 <_puts_r+0x78>
 80080ec:	3e01      	subs	r6, #1
 80080ee:	68a3      	ldr	r3, [r4, #8]
 80080f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80080f4:	3b01      	subs	r3, #1
 80080f6:	60a3      	str	r3, [r4, #8]
 80080f8:	bb39      	cbnz	r1, 800814a <_puts_r+0x9e>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	da38      	bge.n	8008170 <_puts_r+0xc4>
 80080fe:	4622      	mov	r2, r4
 8008100:	210a      	movs	r1, #10
 8008102:	4628      	mov	r0, r5
 8008104:	f000 f870 	bl	80081e8 <__swbuf_r>
 8008108:	3001      	adds	r0, #1
 800810a:	d011      	beq.n	8008130 <_puts_r+0x84>
 800810c:	250a      	movs	r5, #10
 800810e:	e011      	b.n	8008134 <_puts_r+0x88>
 8008110:	4b1b      	ldr	r3, [pc, #108]	; (8008180 <_puts_r+0xd4>)
 8008112:	429c      	cmp	r4, r3
 8008114:	d101      	bne.n	800811a <_puts_r+0x6e>
 8008116:	68ac      	ldr	r4, [r5, #8]
 8008118:	e7da      	b.n	80080d0 <_puts_r+0x24>
 800811a:	4b1a      	ldr	r3, [pc, #104]	; (8008184 <_puts_r+0xd8>)
 800811c:	429c      	cmp	r4, r3
 800811e:	bf08      	it	eq
 8008120:	68ec      	ldreq	r4, [r5, #12]
 8008122:	e7d5      	b.n	80080d0 <_puts_r+0x24>
 8008124:	4621      	mov	r1, r4
 8008126:	4628      	mov	r0, r5
 8008128:	f000 f8b0 	bl	800828c <__swsetup_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	d0dd      	beq.n	80080ec <_puts_r+0x40>
 8008130:	f04f 35ff 	mov.w	r5, #4294967295
 8008134:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008136:	07da      	lsls	r2, r3, #31
 8008138:	d405      	bmi.n	8008146 <_puts_r+0x9a>
 800813a:	89a3      	ldrh	r3, [r4, #12]
 800813c:	059b      	lsls	r3, r3, #22
 800813e:	d402      	bmi.n	8008146 <_puts_r+0x9a>
 8008140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008142:	f000 faca 	bl	80086da <__retarget_lock_release_recursive>
 8008146:	4628      	mov	r0, r5
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	2b00      	cmp	r3, #0
 800814c:	da04      	bge.n	8008158 <_puts_r+0xac>
 800814e:	69a2      	ldr	r2, [r4, #24]
 8008150:	429a      	cmp	r2, r3
 8008152:	dc06      	bgt.n	8008162 <_puts_r+0xb6>
 8008154:	290a      	cmp	r1, #10
 8008156:	d004      	beq.n	8008162 <_puts_r+0xb6>
 8008158:	6823      	ldr	r3, [r4, #0]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	6022      	str	r2, [r4, #0]
 800815e:	7019      	strb	r1, [r3, #0]
 8008160:	e7c5      	b.n	80080ee <_puts_r+0x42>
 8008162:	4622      	mov	r2, r4
 8008164:	4628      	mov	r0, r5
 8008166:	f000 f83f 	bl	80081e8 <__swbuf_r>
 800816a:	3001      	adds	r0, #1
 800816c:	d1bf      	bne.n	80080ee <_puts_r+0x42>
 800816e:	e7df      	b.n	8008130 <_puts_r+0x84>
 8008170:	250a      	movs	r5, #10
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	1c5a      	adds	r2, r3, #1
 8008176:	6022      	str	r2, [r4, #0]
 8008178:	701d      	strb	r5, [r3, #0]
 800817a:	e7db      	b.n	8008134 <_puts_r+0x88>
 800817c:	0800a65c 	.word	0x0800a65c
 8008180:	0800a67c 	.word	0x0800a67c
 8008184:	0800a63c 	.word	0x0800a63c

08008188 <puts>:
 8008188:	4b02      	ldr	r3, [pc, #8]	; (8008194 <puts+0xc>)
 800818a:	4601      	mov	r1, r0
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	f7ff bf8d 	b.w	80080ac <_puts_r>
 8008192:	bf00      	nop
 8008194:	20000054 	.word	0x20000054

08008198 <siprintf>:
 8008198:	b40e      	push	{r1, r2, r3}
 800819a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800819e:	b500      	push	{lr}
 80081a0:	b09c      	sub	sp, #112	; 0x70
 80081a2:	ab1d      	add	r3, sp, #116	; 0x74
 80081a4:	9002      	str	r0, [sp, #8]
 80081a6:	9006      	str	r0, [sp, #24]
 80081a8:	9107      	str	r1, [sp, #28]
 80081aa:	9104      	str	r1, [sp, #16]
 80081ac:	4808      	ldr	r0, [pc, #32]	; (80081d0 <siprintf+0x38>)
 80081ae:	4909      	ldr	r1, [pc, #36]	; (80081d4 <siprintf+0x3c>)
 80081b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b4:	9105      	str	r1, [sp, #20]
 80081b6:	6800      	ldr	r0, [r0, #0]
 80081b8:	a902      	add	r1, sp, #8
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	f000 fbf4 	bl	80089a8 <_svfiprintf_r>
 80081c0:	2200      	movs	r2, #0
 80081c2:	9b02      	ldr	r3, [sp, #8]
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	b01c      	add	sp, #112	; 0x70
 80081c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80081cc:	b003      	add	sp, #12
 80081ce:	4770      	bx	lr
 80081d0:	20000054 	.word	0x20000054
 80081d4:	ffff0208 	.word	0xffff0208

080081d8 <strcpy>:
 80081d8:	4603      	mov	r3, r0
 80081da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081de:	f803 2b01 	strb.w	r2, [r3], #1
 80081e2:	2a00      	cmp	r2, #0
 80081e4:	d1f9      	bne.n	80081da <strcpy+0x2>
 80081e6:	4770      	bx	lr

080081e8 <__swbuf_r>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	460e      	mov	r6, r1
 80081ec:	4614      	mov	r4, r2
 80081ee:	4605      	mov	r5, r0
 80081f0:	b118      	cbz	r0, 80081fa <__swbuf_r+0x12>
 80081f2:	6983      	ldr	r3, [r0, #24]
 80081f4:	b90b      	cbnz	r3, 80081fa <__swbuf_r+0x12>
 80081f6:	f000 f9d1 	bl	800859c <__sinit>
 80081fa:	4b21      	ldr	r3, [pc, #132]	; (8008280 <__swbuf_r+0x98>)
 80081fc:	429c      	cmp	r4, r3
 80081fe:	d12b      	bne.n	8008258 <__swbuf_r+0x70>
 8008200:	686c      	ldr	r4, [r5, #4]
 8008202:	69a3      	ldr	r3, [r4, #24]
 8008204:	60a3      	str	r3, [r4, #8]
 8008206:	89a3      	ldrh	r3, [r4, #12]
 8008208:	071a      	lsls	r2, r3, #28
 800820a:	d52f      	bpl.n	800826c <__swbuf_r+0x84>
 800820c:	6923      	ldr	r3, [r4, #16]
 800820e:	b36b      	cbz	r3, 800826c <__swbuf_r+0x84>
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	6820      	ldr	r0, [r4, #0]
 8008214:	b2f6      	uxtb	r6, r6
 8008216:	1ac0      	subs	r0, r0, r3
 8008218:	6963      	ldr	r3, [r4, #20]
 800821a:	4637      	mov	r7, r6
 800821c:	4283      	cmp	r3, r0
 800821e:	dc04      	bgt.n	800822a <__swbuf_r+0x42>
 8008220:	4621      	mov	r1, r4
 8008222:	4628      	mov	r0, r5
 8008224:	f000 f926 	bl	8008474 <_fflush_r>
 8008228:	bb30      	cbnz	r0, 8008278 <__swbuf_r+0x90>
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	3001      	adds	r0, #1
 800822e:	3b01      	subs	r3, #1
 8008230:	60a3      	str	r3, [r4, #8]
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	1c5a      	adds	r2, r3, #1
 8008236:	6022      	str	r2, [r4, #0]
 8008238:	701e      	strb	r6, [r3, #0]
 800823a:	6963      	ldr	r3, [r4, #20]
 800823c:	4283      	cmp	r3, r0
 800823e:	d004      	beq.n	800824a <__swbuf_r+0x62>
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	07db      	lsls	r3, r3, #31
 8008244:	d506      	bpl.n	8008254 <__swbuf_r+0x6c>
 8008246:	2e0a      	cmp	r6, #10
 8008248:	d104      	bne.n	8008254 <__swbuf_r+0x6c>
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f000 f911 	bl	8008474 <_fflush_r>
 8008252:	b988      	cbnz	r0, 8008278 <__swbuf_r+0x90>
 8008254:	4638      	mov	r0, r7
 8008256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <__swbuf_r+0x9c>)
 800825a:	429c      	cmp	r4, r3
 800825c:	d101      	bne.n	8008262 <__swbuf_r+0x7a>
 800825e:	68ac      	ldr	r4, [r5, #8]
 8008260:	e7cf      	b.n	8008202 <__swbuf_r+0x1a>
 8008262:	4b09      	ldr	r3, [pc, #36]	; (8008288 <__swbuf_r+0xa0>)
 8008264:	429c      	cmp	r4, r3
 8008266:	bf08      	it	eq
 8008268:	68ec      	ldreq	r4, [r5, #12]
 800826a:	e7ca      	b.n	8008202 <__swbuf_r+0x1a>
 800826c:	4621      	mov	r1, r4
 800826e:	4628      	mov	r0, r5
 8008270:	f000 f80c 	bl	800828c <__swsetup_r>
 8008274:	2800      	cmp	r0, #0
 8008276:	d0cb      	beq.n	8008210 <__swbuf_r+0x28>
 8008278:	f04f 37ff 	mov.w	r7, #4294967295
 800827c:	e7ea      	b.n	8008254 <__swbuf_r+0x6c>
 800827e:	bf00      	nop
 8008280:	0800a65c 	.word	0x0800a65c
 8008284:	0800a67c 	.word	0x0800a67c
 8008288:	0800a63c 	.word	0x0800a63c

0800828c <__swsetup_r>:
 800828c:	4b32      	ldr	r3, [pc, #200]	; (8008358 <__swsetup_r+0xcc>)
 800828e:	b570      	push	{r4, r5, r6, lr}
 8008290:	681d      	ldr	r5, [r3, #0]
 8008292:	4606      	mov	r6, r0
 8008294:	460c      	mov	r4, r1
 8008296:	b125      	cbz	r5, 80082a2 <__swsetup_r+0x16>
 8008298:	69ab      	ldr	r3, [r5, #24]
 800829a:	b913      	cbnz	r3, 80082a2 <__swsetup_r+0x16>
 800829c:	4628      	mov	r0, r5
 800829e:	f000 f97d 	bl	800859c <__sinit>
 80082a2:	4b2e      	ldr	r3, [pc, #184]	; (800835c <__swsetup_r+0xd0>)
 80082a4:	429c      	cmp	r4, r3
 80082a6:	d10f      	bne.n	80082c8 <__swsetup_r+0x3c>
 80082a8:	686c      	ldr	r4, [r5, #4]
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082b0:	0719      	lsls	r1, r3, #28
 80082b2:	d42c      	bmi.n	800830e <__swsetup_r+0x82>
 80082b4:	06dd      	lsls	r5, r3, #27
 80082b6:	d411      	bmi.n	80082dc <__swsetup_r+0x50>
 80082b8:	2309      	movs	r3, #9
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082c0:	f04f 30ff 	mov.w	r0, #4294967295
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	e03e      	b.n	8008346 <__swsetup_r+0xba>
 80082c8:	4b25      	ldr	r3, [pc, #148]	; (8008360 <__swsetup_r+0xd4>)
 80082ca:	429c      	cmp	r4, r3
 80082cc:	d101      	bne.n	80082d2 <__swsetup_r+0x46>
 80082ce:	68ac      	ldr	r4, [r5, #8]
 80082d0:	e7eb      	b.n	80082aa <__swsetup_r+0x1e>
 80082d2:	4b24      	ldr	r3, [pc, #144]	; (8008364 <__swsetup_r+0xd8>)
 80082d4:	429c      	cmp	r4, r3
 80082d6:	bf08      	it	eq
 80082d8:	68ec      	ldreq	r4, [r5, #12]
 80082da:	e7e6      	b.n	80082aa <__swsetup_r+0x1e>
 80082dc:	0758      	lsls	r0, r3, #29
 80082de:	d512      	bpl.n	8008306 <__swsetup_r+0x7a>
 80082e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082e2:	b141      	cbz	r1, 80082f6 <__swsetup_r+0x6a>
 80082e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082e8:	4299      	cmp	r1, r3
 80082ea:	d002      	beq.n	80082f2 <__swsetup_r+0x66>
 80082ec:	4630      	mov	r0, r6
 80082ee:	f000 fa59 	bl	80087a4 <_free_r>
 80082f2:	2300      	movs	r3, #0
 80082f4:	6363      	str	r3, [r4, #52]	; 0x34
 80082f6:	89a3      	ldrh	r3, [r4, #12]
 80082f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	2300      	movs	r3, #0
 8008300:	6063      	str	r3, [r4, #4]
 8008302:	6923      	ldr	r3, [r4, #16]
 8008304:	6023      	str	r3, [r4, #0]
 8008306:	89a3      	ldrh	r3, [r4, #12]
 8008308:	f043 0308 	orr.w	r3, r3, #8
 800830c:	81a3      	strh	r3, [r4, #12]
 800830e:	6923      	ldr	r3, [r4, #16]
 8008310:	b94b      	cbnz	r3, 8008326 <__swsetup_r+0x9a>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008318:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800831c:	d003      	beq.n	8008326 <__swsetup_r+0x9a>
 800831e:	4621      	mov	r1, r4
 8008320:	4630      	mov	r0, r6
 8008322:	f000 f9ff 	bl	8008724 <__smakebuf_r>
 8008326:	89a0      	ldrh	r0, [r4, #12]
 8008328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800832c:	f010 0301 	ands.w	r3, r0, #1
 8008330:	d00a      	beq.n	8008348 <__swsetup_r+0xbc>
 8008332:	2300      	movs	r3, #0
 8008334:	60a3      	str	r3, [r4, #8]
 8008336:	6963      	ldr	r3, [r4, #20]
 8008338:	425b      	negs	r3, r3
 800833a:	61a3      	str	r3, [r4, #24]
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	b943      	cbnz	r3, 8008352 <__swsetup_r+0xc6>
 8008340:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008344:	d1ba      	bne.n	80082bc <__swsetup_r+0x30>
 8008346:	bd70      	pop	{r4, r5, r6, pc}
 8008348:	0781      	lsls	r1, r0, #30
 800834a:	bf58      	it	pl
 800834c:	6963      	ldrpl	r3, [r4, #20]
 800834e:	60a3      	str	r3, [r4, #8]
 8008350:	e7f4      	b.n	800833c <__swsetup_r+0xb0>
 8008352:	2000      	movs	r0, #0
 8008354:	e7f7      	b.n	8008346 <__swsetup_r+0xba>
 8008356:	bf00      	nop
 8008358:	20000054 	.word	0x20000054
 800835c:	0800a65c 	.word	0x0800a65c
 8008360:	0800a67c 	.word	0x0800a67c
 8008364:	0800a63c 	.word	0x0800a63c

08008368 <__sflush_r>:
 8008368:	898a      	ldrh	r2, [r1, #12]
 800836a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800836e:	4605      	mov	r5, r0
 8008370:	0710      	lsls	r0, r2, #28
 8008372:	460c      	mov	r4, r1
 8008374:	d458      	bmi.n	8008428 <__sflush_r+0xc0>
 8008376:	684b      	ldr	r3, [r1, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	dc05      	bgt.n	8008388 <__sflush_r+0x20>
 800837c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	dc02      	bgt.n	8008388 <__sflush_r+0x20>
 8008382:	2000      	movs	r0, #0
 8008384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800838a:	2e00      	cmp	r6, #0
 800838c:	d0f9      	beq.n	8008382 <__sflush_r+0x1a>
 800838e:	2300      	movs	r3, #0
 8008390:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008394:	682f      	ldr	r7, [r5, #0]
 8008396:	602b      	str	r3, [r5, #0]
 8008398:	d032      	beq.n	8008400 <__sflush_r+0x98>
 800839a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800839c:	89a3      	ldrh	r3, [r4, #12]
 800839e:	075a      	lsls	r2, r3, #29
 80083a0:	d505      	bpl.n	80083ae <__sflush_r+0x46>
 80083a2:	6863      	ldr	r3, [r4, #4]
 80083a4:	1ac0      	subs	r0, r0, r3
 80083a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083a8:	b10b      	cbz	r3, 80083ae <__sflush_r+0x46>
 80083aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083ac:	1ac0      	subs	r0, r0, r3
 80083ae:	2300      	movs	r3, #0
 80083b0:	4602      	mov	r2, r0
 80083b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083b4:	4628      	mov	r0, r5
 80083b6:	6a21      	ldr	r1, [r4, #32]
 80083b8:	47b0      	blx	r6
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	d106      	bne.n	80083ce <__sflush_r+0x66>
 80083c0:	6829      	ldr	r1, [r5, #0]
 80083c2:	291d      	cmp	r1, #29
 80083c4:	d82c      	bhi.n	8008420 <__sflush_r+0xb8>
 80083c6:	4a2a      	ldr	r2, [pc, #168]	; (8008470 <__sflush_r+0x108>)
 80083c8:	40ca      	lsrs	r2, r1
 80083ca:	07d6      	lsls	r6, r2, #31
 80083cc:	d528      	bpl.n	8008420 <__sflush_r+0xb8>
 80083ce:	2200      	movs	r2, #0
 80083d0:	6062      	str	r2, [r4, #4]
 80083d2:	6922      	ldr	r2, [r4, #16]
 80083d4:	04d9      	lsls	r1, r3, #19
 80083d6:	6022      	str	r2, [r4, #0]
 80083d8:	d504      	bpl.n	80083e4 <__sflush_r+0x7c>
 80083da:	1c42      	adds	r2, r0, #1
 80083dc:	d101      	bne.n	80083e2 <__sflush_r+0x7a>
 80083de:	682b      	ldr	r3, [r5, #0]
 80083e0:	b903      	cbnz	r3, 80083e4 <__sflush_r+0x7c>
 80083e2:	6560      	str	r0, [r4, #84]	; 0x54
 80083e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083e6:	602f      	str	r7, [r5, #0]
 80083e8:	2900      	cmp	r1, #0
 80083ea:	d0ca      	beq.n	8008382 <__sflush_r+0x1a>
 80083ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083f0:	4299      	cmp	r1, r3
 80083f2:	d002      	beq.n	80083fa <__sflush_r+0x92>
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 f9d5 	bl	80087a4 <_free_r>
 80083fa:	2000      	movs	r0, #0
 80083fc:	6360      	str	r0, [r4, #52]	; 0x34
 80083fe:	e7c1      	b.n	8008384 <__sflush_r+0x1c>
 8008400:	6a21      	ldr	r1, [r4, #32]
 8008402:	2301      	movs	r3, #1
 8008404:	4628      	mov	r0, r5
 8008406:	47b0      	blx	r6
 8008408:	1c41      	adds	r1, r0, #1
 800840a:	d1c7      	bne.n	800839c <__sflush_r+0x34>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d0c4      	beq.n	800839c <__sflush_r+0x34>
 8008412:	2b1d      	cmp	r3, #29
 8008414:	d001      	beq.n	800841a <__sflush_r+0xb2>
 8008416:	2b16      	cmp	r3, #22
 8008418:	d101      	bne.n	800841e <__sflush_r+0xb6>
 800841a:	602f      	str	r7, [r5, #0]
 800841c:	e7b1      	b.n	8008382 <__sflush_r+0x1a>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	e7ad      	b.n	8008384 <__sflush_r+0x1c>
 8008428:	690f      	ldr	r7, [r1, #16]
 800842a:	2f00      	cmp	r7, #0
 800842c:	d0a9      	beq.n	8008382 <__sflush_r+0x1a>
 800842e:	0793      	lsls	r3, r2, #30
 8008430:	bf18      	it	ne
 8008432:	2300      	movne	r3, #0
 8008434:	680e      	ldr	r6, [r1, #0]
 8008436:	bf08      	it	eq
 8008438:	694b      	ldreq	r3, [r1, #20]
 800843a:	eba6 0807 	sub.w	r8, r6, r7
 800843e:	600f      	str	r7, [r1, #0]
 8008440:	608b      	str	r3, [r1, #8]
 8008442:	f1b8 0f00 	cmp.w	r8, #0
 8008446:	dd9c      	ble.n	8008382 <__sflush_r+0x1a>
 8008448:	4643      	mov	r3, r8
 800844a:	463a      	mov	r2, r7
 800844c:	4628      	mov	r0, r5
 800844e:	6a21      	ldr	r1, [r4, #32]
 8008450:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008452:	47b0      	blx	r6
 8008454:	2800      	cmp	r0, #0
 8008456:	dc06      	bgt.n	8008466 <__sflush_r+0xfe>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f04f 30ff 	mov.w	r0, #4294967295
 800845e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	e78e      	b.n	8008384 <__sflush_r+0x1c>
 8008466:	4407      	add	r7, r0
 8008468:	eba8 0800 	sub.w	r8, r8, r0
 800846c:	e7e9      	b.n	8008442 <__sflush_r+0xda>
 800846e:	bf00      	nop
 8008470:	20400001 	.word	0x20400001

08008474 <_fflush_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	690b      	ldr	r3, [r1, #16]
 8008478:	4605      	mov	r5, r0
 800847a:	460c      	mov	r4, r1
 800847c:	b913      	cbnz	r3, 8008484 <_fflush_r+0x10>
 800847e:	2500      	movs	r5, #0
 8008480:	4628      	mov	r0, r5
 8008482:	bd38      	pop	{r3, r4, r5, pc}
 8008484:	b118      	cbz	r0, 800848e <_fflush_r+0x1a>
 8008486:	6983      	ldr	r3, [r0, #24]
 8008488:	b90b      	cbnz	r3, 800848e <_fflush_r+0x1a>
 800848a:	f000 f887 	bl	800859c <__sinit>
 800848e:	4b14      	ldr	r3, [pc, #80]	; (80084e0 <_fflush_r+0x6c>)
 8008490:	429c      	cmp	r4, r3
 8008492:	d11b      	bne.n	80084cc <_fflush_r+0x58>
 8008494:	686c      	ldr	r4, [r5, #4]
 8008496:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d0ef      	beq.n	800847e <_fflush_r+0xa>
 800849e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084a0:	07d0      	lsls	r0, r2, #31
 80084a2:	d404      	bmi.n	80084ae <_fflush_r+0x3a>
 80084a4:	0599      	lsls	r1, r3, #22
 80084a6:	d402      	bmi.n	80084ae <_fflush_r+0x3a>
 80084a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084aa:	f000 f915 	bl	80086d8 <__retarget_lock_acquire_recursive>
 80084ae:	4628      	mov	r0, r5
 80084b0:	4621      	mov	r1, r4
 80084b2:	f7ff ff59 	bl	8008368 <__sflush_r>
 80084b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084b8:	4605      	mov	r5, r0
 80084ba:	07da      	lsls	r2, r3, #31
 80084bc:	d4e0      	bmi.n	8008480 <_fflush_r+0xc>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	059b      	lsls	r3, r3, #22
 80084c2:	d4dd      	bmi.n	8008480 <_fflush_r+0xc>
 80084c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084c6:	f000 f908 	bl	80086da <__retarget_lock_release_recursive>
 80084ca:	e7d9      	b.n	8008480 <_fflush_r+0xc>
 80084cc:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <_fflush_r+0x70>)
 80084ce:	429c      	cmp	r4, r3
 80084d0:	d101      	bne.n	80084d6 <_fflush_r+0x62>
 80084d2:	68ac      	ldr	r4, [r5, #8]
 80084d4:	e7df      	b.n	8008496 <_fflush_r+0x22>
 80084d6:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <_fflush_r+0x74>)
 80084d8:	429c      	cmp	r4, r3
 80084da:	bf08      	it	eq
 80084dc:	68ec      	ldreq	r4, [r5, #12]
 80084de:	e7da      	b.n	8008496 <_fflush_r+0x22>
 80084e0:	0800a65c 	.word	0x0800a65c
 80084e4:	0800a67c 	.word	0x0800a67c
 80084e8:	0800a63c 	.word	0x0800a63c

080084ec <std>:
 80084ec:	2300      	movs	r3, #0
 80084ee:	b510      	push	{r4, lr}
 80084f0:	4604      	mov	r4, r0
 80084f2:	e9c0 3300 	strd	r3, r3, [r0]
 80084f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084fa:	6083      	str	r3, [r0, #8]
 80084fc:	8181      	strh	r1, [r0, #12]
 80084fe:	6643      	str	r3, [r0, #100]	; 0x64
 8008500:	81c2      	strh	r2, [r0, #14]
 8008502:	6183      	str	r3, [r0, #24]
 8008504:	4619      	mov	r1, r3
 8008506:	2208      	movs	r2, #8
 8008508:	305c      	adds	r0, #92	; 0x5c
 800850a:	f7ff fdaf 	bl	800806c <memset>
 800850e:	4b05      	ldr	r3, [pc, #20]	; (8008524 <std+0x38>)
 8008510:	6224      	str	r4, [r4, #32]
 8008512:	6263      	str	r3, [r4, #36]	; 0x24
 8008514:	4b04      	ldr	r3, [pc, #16]	; (8008528 <std+0x3c>)
 8008516:	62a3      	str	r3, [r4, #40]	; 0x28
 8008518:	4b04      	ldr	r3, [pc, #16]	; (800852c <std+0x40>)
 800851a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800851c:	4b04      	ldr	r3, [pc, #16]	; (8008530 <std+0x44>)
 800851e:	6323      	str	r3, [r4, #48]	; 0x30
 8008520:	bd10      	pop	{r4, pc}
 8008522:	bf00      	nop
 8008524:	080091a5 	.word	0x080091a5
 8008528:	080091c7 	.word	0x080091c7
 800852c:	080091ff 	.word	0x080091ff
 8008530:	08009223 	.word	0x08009223

08008534 <_cleanup_r>:
 8008534:	4901      	ldr	r1, [pc, #4]	; (800853c <_cleanup_r+0x8>)
 8008536:	f000 b8af 	b.w	8008698 <_fwalk_reent>
 800853a:	bf00      	nop
 800853c:	08008475 	.word	0x08008475

08008540 <__sfmoreglue>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	2568      	movs	r5, #104	; 0x68
 8008544:	1e4a      	subs	r2, r1, #1
 8008546:	4355      	muls	r5, r2
 8008548:	460e      	mov	r6, r1
 800854a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800854e:	f000 f975 	bl	800883c <_malloc_r>
 8008552:	4604      	mov	r4, r0
 8008554:	b140      	cbz	r0, 8008568 <__sfmoreglue+0x28>
 8008556:	2100      	movs	r1, #0
 8008558:	e9c0 1600 	strd	r1, r6, [r0]
 800855c:	300c      	adds	r0, #12
 800855e:	60a0      	str	r0, [r4, #8]
 8008560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008564:	f7ff fd82 	bl	800806c <memset>
 8008568:	4620      	mov	r0, r4
 800856a:	bd70      	pop	{r4, r5, r6, pc}

0800856c <__sfp_lock_acquire>:
 800856c:	4801      	ldr	r0, [pc, #4]	; (8008574 <__sfp_lock_acquire+0x8>)
 800856e:	f000 b8b3 	b.w	80086d8 <__retarget_lock_acquire_recursive>
 8008572:	bf00      	nop
 8008574:	20002154 	.word	0x20002154

08008578 <__sfp_lock_release>:
 8008578:	4801      	ldr	r0, [pc, #4]	; (8008580 <__sfp_lock_release+0x8>)
 800857a:	f000 b8ae 	b.w	80086da <__retarget_lock_release_recursive>
 800857e:	bf00      	nop
 8008580:	20002154 	.word	0x20002154

08008584 <__sinit_lock_acquire>:
 8008584:	4801      	ldr	r0, [pc, #4]	; (800858c <__sinit_lock_acquire+0x8>)
 8008586:	f000 b8a7 	b.w	80086d8 <__retarget_lock_acquire_recursive>
 800858a:	bf00      	nop
 800858c:	2000214f 	.word	0x2000214f

08008590 <__sinit_lock_release>:
 8008590:	4801      	ldr	r0, [pc, #4]	; (8008598 <__sinit_lock_release+0x8>)
 8008592:	f000 b8a2 	b.w	80086da <__retarget_lock_release_recursive>
 8008596:	bf00      	nop
 8008598:	2000214f 	.word	0x2000214f

0800859c <__sinit>:
 800859c:	b510      	push	{r4, lr}
 800859e:	4604      	mov	r4, r0
 80085a0:	f7ff fff0 	bl	8008584 <__sinit_lock_acquire>
 80085a4:	69a3      	ldr	r3, [r4, #24]
 80085a6:	b11b      	cbz	r3, 80085b0 <__sinit+0x14>
 80085a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ac:	f7ff bff0 	b.w	8008590 <__sinit_lock_release>
 80085b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085b4:	6523      	str	r3, [r4, #80]	; 0x50
 80085b6:	4b13      	ldr	r3, [pc, #76]	; (8008604 <__sinit+0x68>)
 80085b8:	4a13      	ldr	r2, [pc, #76]	; (8008608 <__sinit+0x6c>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80085be:	42a3      	cmp	r3, r4
 80085c0:	bf08      	it	eq
 80085c2:	2301      	moveq	r3, #1
 80085c4:	4620      	mov	r0, r4
 80085c6:	bf08      	it	eq
 80085c8:	61a3      	streq	r3, [r4, #24]
 80085ca:	f000 f81f 	bl	800860c <__sfp>
 80085ce:	6060      	str	r0, [r4, #4]
 80085d0:	4620      	mov	r0, r4
 80085d2:	f000 f81b 	bl	800860c <__sfp>
 80085d6:	60a0      	str	r0, [r4, #8]
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 f817 	bl	800860c <__sfp>
 80085de:	2200      	movs	r2, #0
 80085e0:	2104      	movs	r1, #4
 80085e2:	60e0      	str	r0, [r4, #12]
 80085e4:	6860      	ldr	r0, [r4, #4]
 80085e6:	f7ff ff81 	bl	80084ec <std>
 80085ea:	2201      	movs	r2, #1
 80085ec:	2109      	movs	r1, #9
 80085ee:	68a0      	ldr	r0, [r4, #8]
 80085f0:	f7ff ff7c 	bl	80084ec <std>
 80085f4:	2202      	movs	r2, #2
 80085f6:	2112      	movs	r1, #18
 80085f8:	68e0      	ldr	r0, [r4, #12]
 80085fa:	f7ff ff77 	bl	80084ec <std>
 80085fe:	2301      	movs	r3, #1
 8008600:	61a3      	str	r3, [r4, #24]
 8008602:	e7d1      	b.n	80085a8 <__sinit+0xc>
 8008604:	0800a638 	.word	0x0800a638
 8008608:	08008535 	.word	0x08008535

0800860c <__sfp>:
 800860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800860e:	4607      	mov	r7, r0
 8008610:	f7ff ffac 	bl	800856c <__sfp_lock_acquire>
 8008614:	4b1e      	ldr	r3, [pc, #120]	; (8008690 <__sfp+0x84>)
 8008616:	681e      	ldr	r6, [r3, #0]
 8008618:	69b3      	ldr	r3, [r6, #24]
 800861a:	b913      	cbnz	r3, 8008622 <__sfp+0x16>
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff ffbd 	bl	800859c <__sinit>
 8008622:	3648      	adds	r6, #72	; 0x48
 8008624:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008628:	3b01      	subs	r3, #1
 800862a:	d503      	bpl.n	8008634 <__sfp+0x28>
 800862c:	6833      	ldr	r3, [r6, #0]
 800862e:	b30b      	cbz	r3, 8008674 <__sfp+0x68>
 8008630:	6836      	ldr	r6, [r6, #0]
 8008632:	e7f7      	b.n	8008624 <__sfp+0x18>
 8008634:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008638:	b9d5      	cbnz	r5, 8008670 <__sfp+0x64>
 800863a:	4b16      	ldr	r3, [pc, #88]	; (8008694 <__sfp+0x88>)
 800863c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008640:	60e3      	str	r3, [r4, #12]
 8008642:	6665      	str	r5, [r4, #100]	; 0x64
 8008644:	f000 f847 	bl	80086d6 <__retarget_lock_init_recursive>
 8008648:	f7ff ff96 	bl	8008578 <__sfp_lock_release>
 800864c:	2208      	movs	r2, #8
 800864e:	4629      	mov	r1, r5
 8008650:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008654:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008658:	6025      	str	r5, [r4, #0]
 800865a:	61a5      	str	r5, [r4, #24]
 800865c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008660:	f7ff fd04 	bl	800806c <memset>
 8008664:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008668:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800866c:	4620      	mov	r0, r4
 800866e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008670:	3468      	adds	r4, #104	; 0x68
 8008672:	e7d9      	b.n	8008628 <__sfp+0x1c>
 8008674:	2104      	movs	r1, #4
 8008676:	4638      	mov	r0, r7
 8008678:	f7ff ff62 	bl	8008540 <__sfmoreglue>
 800867c:	4604      	mov	r4, r0
 800867e:	6030      	str	r0, [r6, #0]
 8008680:	2800      	cmp	r0, #0
 8008682:	d1d5      	bne.n	8008630 <__sfp+0x24>
 8008684:	f7ff ff78 	bl	8008578 <__sfp_lock_release>
 8008688:	230c      	movs	r3, #12
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	e7ee      	b.n	800866c <__sfp+0x60>
 800868e:	bf00      	nop
 8008690:	0800a638 	.word	0x0800a638
 8008694:	ffff0001 	.word	0xffff0001

08008698 <_fwalk_reent>:
 8008698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800869c:	4606      	mov	r6, r0
 800869e:	4688      	mov	r8, r1
 80086a0:	2700      	movs	r7, #0
 80086a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086aa:	f1b9 0901 	subs.w	r9, r9, #1
 80086ae:	d505      	bpl.n	80086bc <_fwalk_reent+0x24>
 80086b0:	6824      	ldr	r4, [r4, #0]
 80086b2:	2c00      	cmp	r4, #0
 80086b4:	d1f7      	bne.n	80086a6 <_fwalk_reent+0xe>
 80086b6:	4638      	mov	r0, r7
 80086b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086bc:	89ab      	ldrh	r3, [r5, #12]
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d907      	bls.n	80086d2 <_fwalk_reent+0x3a>
 80086c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086c6:	3301      	adds	r3, #1
 80086c8:	d003      	beq.n	80086d2 <_fwalk_reent+0x3a>
 80086ca:	4629      	mov	r1, r5
 80086cc:	4630      	mov	r0, r6
 80086ce:	47c0      	blx	r8
 80086d0:	4307      	orrs	r7, r0
 80086d2:	3568      	adds	r5, #104	; 0x68
 80086d4:	e7e9      	b.n	80086aa <_fwalk_reent+0x12>

080086d6 <__retarget_lock_init_recursive>:
 80086d6:	4770      	bx	lr

080086d8 <__retarget_lock_acquire_recursive>:
 80086d8:	4770      	bx	lr

080086da <__retarget_lock_release_recursive>:
 80086da:	4770      	bx	lr

080086dc <__swhatbuf_r>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	460e      	mov	r6, r1
 80086e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e4:	4614      	mov	r4, r2
 80086e6:	2900      	cmp	r1, #0
 80086e8:	461d      	mov	r5, r3
 80086ea:	b096      	sub	sp, #88	; 0x58
 80086ec:	da07      	bge.n	80086fe <__swhatbuf_r+0x22>
 80086ee:	2300      	movs	r3, #0
 80086f0:	602b      	str	r3, [r5, #0]
 80086f2:	89b3      	ldrh	r3, [r6, #12]
 80086f4:	061a      	lsls	r2, r3, #24
 80086f6:	d410      	bmi.n	800871a <__swhatbuf_r+0x3e>
 80086f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086fc:	e00e      	b.n	800871c <__swhatbuf_r+0x40>
 80086fe:	466a      	mov	r2, sp
 8008700:	f000 fdb6 	bl	8009270 <_fstat_r>
 8008704:	2800      	cmp	r0, #0
 8008706:	dbf2      	blt.n	80086ee <__swhatbuf_r+0x12>
 8008708:	9a01      	ldr	r2, [sp, #4]
 800870a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800870e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008712:	425a      	negs	r2, r3
 8008714:	415a      	adcs	r2, r3
 8008716:	602a      	str	r2, [r5, #0]
 8008718:	e7ee      	b.n	80086f8 <__swhatbuf_r+0x1c>
 800871a:	2340      	movs	r3, #64	; 0x40
 800871c:	2000      	movs	r0, #0
 800871e:	6023      	str	r3, [r4, #0]
 8008720:	b016      	add	sp, #88	; 0x58
 8008722:	bd70      	pop	{r4, r5, r6, pc}

08008724 <__smakebuf_r>:
 8008724:	898b      	ldrh	r3, [r1, #12]
 8008726:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008728:	079d      	lsls	r5, r3, #30
 800872a:	4606      	mov	r6, r0
 800872c:	460c      	mov	r4, r1
 800872e:	d507      	bpl.n	8008740 <__smakebuf_r+0x1c>
 8008730:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008734:	6023      	str	r3, [r4, #0]
 8008736:	6123      	str	r3, [r4, #16]
 8008738:	2301      	movs	r3, #1
 800873a:	6163      	str	r3, [r4, #20]
 800873c:	b002      	add	sp, #8
 800873e:	bd70      	pop	{r4, r5, r6, pc}
 8008740:	466a      	mov	r2, sp
 8008742:	ab01      	add	r3, sp, #4
 8008744:	f7ff ffca 	bl	80086dc <__swhatbuf_r>
 8008748:	9900      	ldr	r1, [sp, #0]
 800874a:	4605      	mov	r5, r0
 800874c:	4630      	mov	r0, r6
 800874e:	f000 f875 	bl	800883c <_malloc_r>
 8008752:	b948      	cbnz	r0, 8008768 <__smakebuf_r+0x44>
 8008754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008758:	059a      	lsls	r2, r3, #22
 800875a:	d4ef      	bmi.n	800873c <__smakebuf_r+0x18>
 800875c:	f023 0303 	bic.w	r3, r3, #3
 8008760:	f043 0302 	orr.w	r3, r3, #2
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	e7e3      	b.n	8008730 <__smakebuf_r+0xc>
 8008768:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <__smakebuf_r+0x7c>)
 800876a:	62b3      	str	r3, [r6, #40]	; 0x28
 800876c:	89a3      	ldrh	r3, [r4, #12]
 800876e:	6020      	str	r0, [r4, #0]
 8008770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008774:	81a3      	strh	r3, [r4, #12]
 8008776:	9b00      	ldr	r3, [sp, #0]
 8008778:	6120      	str	r0, [r4, #16]
 800877a:	6163      	str	r3, [r4, #20]
 800877c:	9b01      	ldr	r3, [sp, #4]
 800877e:	b15b      	cbz	r3, 8008798 <__smakebuf_r+0x74>
 8008780:	4630      	mov	r0, r6
 8008782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008786:	f000 fd85 	bl	8009294 <_isatty_r>
 800878a:	b128      	cbz	r0, 8008798 <__smakebuf_r+0x74>
 800878c:	89a3      	ldrh	r3, [r4, #12]
 800878e:	f023 0303 	bic.w	r3, r3, #3
 8008792:	f043 0301 	orr.w	r3, r3, #1
 8008796:	81a3      	strh	r3, [r4, #12]
 8008798:	89a0      	ldrh	r0, [r4, #12]
 800879a:	4305      	orrs	r5, r0
 800879c:	81a5      	strh	r5, [r4, #12]
 800879e:	e7cd      	b.n	800873c <__smakebuf_r+0x18>
 80087a0:	08008535 	.word	0x08008535

080087a4 <_free_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4605      	mov	r5, r0
 80087a8:	2900      	cmp	r1, #0
 80087aa:	d043      	beq.n	8008834 <_free_r+0x90>
 80087ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087b0:	1f0c      	subs	r4, r1, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bfb8      	it	lt
 80087b6:	18e4      	addlt	r4, r4, r3
 80087b8:	f000 fdb6 	bl	8009328 <__malloc_lock>
 80087bc:	4a1e      	ldr	r2, [pc, #120]	; (8008838 <_free_r+0x94>)
 80087be:	6813      	ldr	r3, [r2, #0]
 80087c0:	4610      	mov	r0, r2
 80087c2:	b933      	cbnz	r3, 80087d2 <_free_r+0x2e>
 80087c4:	6063      	str	r3, [r4, #4]
 80087c6:	6014      	str	r4, [r2, #0]
 80087c8:	4628      	mov	r0, r5
 80087ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ce:	f000 bdb1 	b.w	8009334 <__malloc_unlock>
 80087d2:	42a3      	cmp	r3, r4
 80087d4:	d90a      	bls.n	80087ec <_free_r+0x48>
 80087d6:	6821      	ldr	r1, [r4, #0]
 80087d8:	1862      	adds	r2, r4, r1
 80087da:	4293      	cmp	r3, r2
 80087dc:	bf01      	itttt	eq
 80087de:	681a      	ldreq	r2, [r3, #0]
 80087e0:	685b      	ldreq	r3, [r3, #4]
 80087e2:	1852      	addeq	r2, r2, r1
 80087e4:	6022      	streq	r2, [r4, #0]
 80087e6:	6063      	str	r3, [r4, #4]
 80087e8:	6004      	str	r4, [r0, #0]
 80087ea:	e7ed      	b.n	80087c8 <_free_r+0x24>
 80087ec:	461a      	mov	r2, r3
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	b10b      	cbz	r3, 80087f6 <_free_r+0x52>
 80087f2:	42a3      	cmp	r3, r4
 80087f4:	d9fa      	bls.n	80087ec <_free_r+0x48>
 80087f6:	6811      	ldr	r1, [r2, #0]
 80087f8:	1850      	adds	r0, r2, r1
 80087fa:	42a0      	cmp	r0, r4
 80087fc:	d10b      	bne.n	8008816 <_free_r+0x72>
 80087fe:	6820      	ldr	r0, [r4, #0]
 8008800:	4401      	add	r1, r0
 8008802:	1850      	adds	r0, r2, r1
 8008804:	4283      	cmp	r3, r0
 8008806:	6011      	str	r1, [r2, #0]
 8008808:	d1de      	bne.n	80087c8 <_free_r+0x24>
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	4401      	add	r1, r0
 8008810:	6011      	str	r1, [r2, #0]
 8008812:	6053      	str	r3, [r2, #4]
 8008814:	e7d8      	b.n	80087c8 <_free_r+0x24>
 8008816:	d902      	bls.n	800881e <_free_r+0x7a>
 8008818:	230c      	movs	r3, #12
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	e7d4      	b.n	80087c8 <_free_r+0x24>
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	1821      	adds	r1, r4, r0
 8008822:	428b      	cmp	r3, r1
 8008824:	bf01      	itttt	eq
 8008826:	6819      	ldreq	r1, [r3, #0]
 8008828:	685b      	ldreq	r3, [r3, #4]
 800882a:	1809      	addeq	r1, r1, r0
 800882c:	6021      	streq	r1, [r4, #0]
 800882e:	6063      	str	r3, [r4, #4]
 8008830:	6054      	str	r4, [r2, #4]
 8008832:	e7c9      	b.n	80087c8 <_free_r+0x24>
 8008834:	bd38      	pop	{r3, r4, r5, pc}
 8008836:	bf00      	nop
 8008838:	20000380 	.word	0x20000380

0800883c <_malloc_r>:
 800883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883e:	1ccd      	adds	r5, r1, #3
 8008840:	f025 0503 	bic.w	r5, r5, #3
 8008844:	3508      	adds	r5, #8
 8008846:	2d0c      	cmp	r5, #12
 8008848:	bf38      	it	cc
 800884a:	250c      	movcc	r5, #12
 800884c:	2d00      	cmp	r5, #0
 800884e:	4606      	mov	r6, r0
 8008850:	db01      	blt.n	8008856 <_malloc_r+0x1a>
 8008852:	42a9      	cmp	r1, r5
 8008854:	d903      	bls.n	800885e <_malloc_r+0x22>
 8008856:	230c      	movs	r3, #12
 8008858:	6033      	str	r3, [r6, #0]
 800885a:	2000      	movs	r0, #0
 800885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800885e:	f000 fd63 	bl	8009328 <__malloc_lock>
 8008862:	4921      	ldr	r1, [pc, #132]	; (80088e8 <_malloc_r+0xac>)
 8008864:	680a      	ldr	r2, [r1, #0]
 8008866:	4614      	mov	r4, r2
 8008868:	b99c      	cbnz	r4, 8008892 <_malloc_r+0x56>
 800886a:	4f20      	ldr	r7, [pc, #128]	; (80088ec <_malloc_r+0xb0>)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	b923      	cbnz	r3, 800887a <_malloc_r+0x3e>
 8008870:	4621      	mov	r1, r4
 8008872:	4630      	mov	r0, r6
 8008874:	f000 fc86 	bl	8009184 <_sbrk_r>
 8008878:	6038      	str	r0, [r7, #0]
 800887a:	4629      	mov	r1, r5
 800887c:	4630      	mov	r0, r6
 800887e:	f000 fc81 	bl	8009184 <_sbrk_r>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	d123      	bne.n	80088ce <_malloc_r+0x92>
 8008886:	230c      	movs	r3, #12
 8008888:	4630      	mov	r0, r6
 800888a:	6033      	str	r3, [r6, #0]
 800888c:	f000 fd52 	bl	8009334 <__malloc_unlock>
 8008890:	e7e3      	b.n	800885a <_malloc_r+0x1e>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	1b5b      	subs	r3, r3, r5
 8008896:	d417      	bmi.n	80088c8 <_malloc_r+0x8c>
 8008898:	2b0b      	cmp	r3, #11
 800889a:	d903      	bls.n	80088a4 <_malloc_r+0x68>
 800889c:	6023      	str	r3, [r4, #0]
 800889e:	441c      	add	r4, r3
 80088a0:	6025      	str	r5, [r4, #0]
 80088a2:	e004      	b.n	80088ae <_malloc_r+0x72>
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	42a2      	cmp	r2, r4
 80088a8:	bf0c      	ite	eq
 80088aa:	600b      	streq	r3, [r1, #0]
 80088ac:	6053      	strne	r3, [r2, #4]
 80088ae:	4630      	mov	r0, r6
 80088b0:	f000 fd40 	bl	8009334 <__malloc_unlock>
 80088b4:	f104 000b 	add.w	r0, r4, #11
 80088b8:	1d23      	adds	r3, r4, #4
 80088ba:	f020 0007 	bic.w	r0, r0, #7
 80088be:	1ac2      	subs	r2, r0, r3
 80088c0:	d0cc      	beq.n	800885c <_malloc_r+0x20>
 80088c2:	1a1b      	subs	r3, r3, r0
 80088c4:	50a3      	str	r3, [r4, r2]
 80088c6:	e7c9      	b.n	800885c <_malloc_r+0x20>
 80088c8:	4622      	mov	r2, r4
 80088ca:	6864      	ldr	r4, [r4, #4]
 80088cc:	e7cc      	b.n	8008868 <_malloc_r+0x2c>
 80088ce:	1cc4      	adds	r4, r0, #3
 80088d0:	f024 0403 	bic.w	r4, r4, #3
 80088d4:	42a0      	cmp	r0, r4
 80088d6:	d0e3      	beq.n	80088a0 <_malloc_r+0x64>
 80088d8:	1a21      	subs	r1, r4, r0
 80088da:	4630      	mov	r0, r6
 80088dc:	f000 fc52 	bl	8009184 <_sbrk_r>
 80088e0:	3001      	adds	r0, #1
 80088e2:	d1dd      	bne.n	80088a0 <_malloc_r+0x64>
 80088e4:	e7cf      	b.n	8008886 <_malloc_r+0x4a>
 80088e6:	bf00      	nop
 80088e8:	20000380 	.word	0x20000380
 80088ec:	20000384 	.word	0x20000384

080088f0 <__ssputs_r>:
 80088f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	688e      	ldr	r6, [r1, #8]
 80088f6:	4682      	mov	sl, r0
 80088f8:	429e      	cmp	r6, r3
 80088fa:	460c      	mov	r4, r1
 80088fc:	4690      	mov	r8, r2
 80088fe:	461f      	mov	r7, r3
 8008900:	d838      	bhi.n	8008974 <__ssputs_r+0x84>
 8008902:	898a      	ldrh	r2, [r1, #12]
 8008904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008908:	d032      	beq.n	8008970 <__ssputs_r+0x80>
 800890a:	6825      	ldr	r5, [r4, #0]
 800890c:	6909      	ldr	r1, [r1, #16]
 800890e:	3301      	adds	r3, #1
 8008910:	eba5 0901 	sub.w	r9, r5, r1
 8008914:	6965      	ldr	r5, [r4, #20]
 8008916:	444b      	add	r3, r9
 8008918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800891c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008920:	106d      	asrs	r5, r5, #1
 8008922:	429d      	cmp	r5, r3
 8008924:	bf38      	it	cc
 8008926:	461d      	movcc	r5, r3
 8008928:	0553      	lsls	r3, r2, #21
 800892a:	d531      	bpl.n	8008990 <__ssputs_r+0xa0>
 800892c:	4629      	mov	r1, r5
 800892e:	f7ff ff85 	bl	800883c <_malloc_r>
 8008932:	4606      	mov	r6, r0
 8008934:	b950      	cbnz	r0, 800894c <__ssputs_r+0x5c>
 8008936:	230c      	movs	r3, #12
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	f8ca 3000 	str.w	r3, [sl]
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894c:	464a      	mov	r2, r9
 800894e:	6921      	ldr	r1, [r4, #16]
 8008950:	f7ff fb7e 	bl	8008050 <memcpy>
 8008954:	89a3      	ldrh	r3, [r4, #12]
 8008956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800895a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800895e:	81a3      	strh	r3, [r4, #12]
 8008960:	6126      	str	r6, [r4, #16]
 8008962:	444e      	add	r6, r9
 8008964:	6026      	str	r6, [r4, #0]
 8008966:	463e      	mov	r6, r7
 8008968:	6165      	str	r5, [r4, #20]
 800896a:	eba5 0509 	sub.w	r5, r5, r9
 800896e:	60a5      	str	r5, [r4, #8]
 8008970:	42be      	cmp	r6, r7
 8008972:	d900      	bls.n	8008976 <__ssputs_r+0x86>
 8008974:	463e      	mov	r6, r7
 8008976:	4632      	mov	r2, r6
 8008978:	4641      	mov	r1, r8
 800897a:	6820      	ldr	r0, [r4, #0]
 800897c:	f000 fcba 	bl	80092f4 <memmove>
 8008980:	68a3      	ldr	r3, [r4, #8]
 8008982:	6822      	ldr	r2, [r4, #0]
 8008984:	1b9b      	subs	r3, r3, r6
 8008986:	4432      	add	r2, r6
 8008988:	2000      	movs	r0, #0
 800898a:	60a3      	str	r3, [r4, #8]
 800898c:	6022      	str	r2, [r4, #0]
 800898e:	e7db      	b.n	8008948 <__ssputs_r+0x58>
 8008990:	462a      	mov	r2, r5
 8008992:	f000 fcd5 	bl	8009340 <_realloc_r>
 8008996:	4606      	mov	r6, r0
 8008998:	2800      	cmp	r0, #0
 800899a:	d1e1      	bne.n	8008960 <__ssputs_r+0x70>
 800899c:	4650      	mov	r0, sl
 800899e:	6921      	ldr	r1, [r4, #16]
 80089a0:	f7ff ff00 	bl	80087a4 <_free_r>
 80089a4:	e7c7      	b.n	8008936 <__ssputs_r+0x46>
	...

080089a8 <_svfiprintf_r>:
 80089a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ac:	4698      	mov	r8, r3
 80089ae:	898b      	ldrh	r3, [r1, #12]
 80089b0:	4607      	mov	r7, r0
 80089b2:	061b      	lsls	r3, r3, #24
 80089b4:	460d      	mov	r5, r1
 80089b6:	4614      	mov	r4, r2
 80089b8:	b09d      	sub	sp, #116	; 0x74
 80089ba:	d50e      	bpl.n	80089da <_svfiprintf_r+0x32>
 80089bc:	690b      	ldr	r3, [r1, #16]
 80089be:	b963      	cbnz	r3, 80089da <_svfiprintf_r+0x32>
 80089c0:	2140      	movs	r1, #64	; 0x40
 80089c2:	f7ff ff3b 	bl	800883c <_malloc_r>
 80089c6:	6028      	str	r0, [r5, #0]
 80089c8:	6128      	str	r0, [r5, #16]
 80089ca:	b920      	cbnz	r0, 80089d6 <_svfiprintf_r+0x2e>
 80089cc:	230c      	movs	r3, #12
 80089ce:	603b      	str	r3, [r7, #0]
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295
 80089d4:	e0d1      	b.n	8008b7a <_svfiprintf_r+0x1d2>
 80089d6:	2340      	movs	r3, #64	; 0x40
 80089d8:	616b      	str	r3, [r5, #20]
 80089da:	2300      	movs	r3, #0
 80089dc:	9309      	str	r3, [sp, #36]	; 0x24
 80089de:	2320      	movs	r3, #32
 80089e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089e4:	2330      	movs	r3, #48	; 0x30
 80089e6:	f04f 0901 	mov.w	r9, #1
 80089ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80089ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008b94 <_svfiprintf_r+0x1ec>
 80089f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089f6:	4623      	mov	r3, r4
 80089f8:	469a      	mov	sl, r3
 80089fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089fe:	b10a      	cbz	r2, 8008a04 <_svfiprintf_r+0x5c>
 8008a00:	2a25      	cmp	r2, #37	; 0x25
 8008a02:	d1f9      	bne.n	80089f8 <_svfiprintf_r+0x50>
 8008a04:	ebba 0b04 	subs.w	fp, sl, r4
 8008a08:	d00b      	beq.n	8008a22 <_svfiprintf_r+0x7a>
 8008a0a:	465b      	mov	r3, fp
 8008a0c:	4622      	mov	r2, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	4638      	mov	r0, r7
 8008a12:	f7ff ff6d 	bl	80088f0 <__ssputs_r>
 8008a16:	3001      	adds	r0, #1
 8008a18:	f000 80aa 	beq.w	8008b70 <_svfiprintf_r+0x1c8>
 8008a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a1e:	445a      	add	r2, fp
 8008a20:	9209      	str	r2, [sp, #36]	; 0x24
 8008a22:	f89a 3000 	ldrb.w	r3, [sl]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f000 80a2 	beq.w	8008b70 <_svfiprintf_r+0x1c8>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a36:	f10a 0a01 	add.w	sl, sl, #1
 8008a3a:	9304      	str	r3, [sp, #16]
 8008a3c:	9307      	str	r3, [sp, #28]
 8008a3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a42:	931a      	str	r3, [sp, #104]	; 0x68
 8008a44:	4654      	mov	r4, sl
 8008a46:	2205      	movs	r2, #5
 8008a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a4c:	4851      	ldr	r0, [pc, #324]	; (8008b94 <_svfiprintf_r+0x1ec>)
 8008a4e:	f000 fc43 	bl	80092d8 <memchr>
 8008a52:	9a04      	ldr	r2, [sp, #16]
 8008a54:	b9d8      	cbnz	r0, 8008a8e <_svfiprintf_r+0xe6>
 8008a56:	06d0      	lsls	r0, r2, #27
 8008a58:	bf44      	itt	mi
 8008a5a:	2320      	movmi	r3, #32
 8008a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a60:	0711      	lsls	r1, r2, #28
 8008a62:	bf44      	itt	mi
 8008a64:	232b      	movmi	r3, #43	; 0x2b
 8008a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8008a70:	d015      	beq.n	8008a9e <_svfiprintf_r+0xf6>
 8008a72:	4654      	mov	r4, sl
 8008a74:	2000      	movs	r0, #0
 8008a76:	f04f 0c0a 	mov.w	ip, #10
 8008a7a:	9a07      	ldr	r2, [sp, #28]
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a82:	3b30      	subs	r3, #48	; 0x30
 8008a84:	2b09      	cmp	r3, #9
 8008a86:	d94e      	bls.n	8008b26 <_svfiprintf_r+0x17e>
 8008a88:	b1b0      	cbz	r0, 8008ab8 <_svfiprintf_r+0x110>
 8008a8a:	9207      	str	r2, [sp, #28]
 8008a8c:	e014      	b.n	8008ab8 <_svfiprintf_r+0x110>
 8008a8e:	eba0 0308 	sub.w	r3, r0, r8
 8008a92:	fa09 f303 	lsl.w	r3, r9, r3
 8008a96:	4313      	orrs	r3, r2
 8008a98:	46a2      	mov	sl, r4
 8008a9a:	9304      	str	r3, [sp, #16]
 8008a9c:	e7d2      	b.n	8008a44 <_svfiprintf_r+0x9c>
 8008a9e:	9b03      	ldr	r3, [sp, #12]
 8008aa0:	1d19      	adds	r1, r3, #4
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	9103      	str	r1, [sp, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	bfbb      	ittet	lt
 8008aaa:	425b      	neglt	r3, r3
 8008aac:	f042 0202 	orrlt.w	r2, r2, #2
 8008ab0:	9307      	strge	r3, [sp, #28]
 8008ab2:	9307      	strlt	r3, [sp, #28]
 8008ab4:	bfb8      	it	lt
 8008ab6:	9204      	strlt	r2, [sp, #16]
 8008ab8:	7823      	ldrb	r3, [r4, #0]
 8008aba:	2b2e      	cmp	r3, #46	; 0x2e
 8008abc:	d10c      	bne.n	8008ad8 <_svfiprintf_r+0x130>
 8008abe:	7863      	ldrb	r3, [r4, #1]
 8008ac0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ac2:	d135      	bne.n	8008b30 <_svfiprintf_r+0x188>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	3402      	adds	r4, #2
 8008ac8:	1d1a      	adds	r2, r3, #4
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	9203      	str	r2, [sp, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	bfb8      	it	lt
 8008ad2:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ad6:	9305      	str	r3, [sp, #20]
 8008ad8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ba4 <_svfiprintf_r+0x1fc>
 8008adc:	2203      	movs	r2, #3
 8008ade:	4650      	mov	r0, sl
 8008ae0:	7821      	ldrb	r1, [r4, #0]
 8008ae2:	f000 fbf9 	bl	80092d8 <memchr>
 8008ae6:	b140      	cbz	r0, 8008afa <_svfiprintf_r+0x152>
 8008ae8:	2340      	movs	r3, #64	; 0x40
 8008aea:	eba0 000a 	sub.w	r0, r0, sl
 8008aee:	fa03 f000 	lsl.w	r0, r3, r0
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	3401      	adds	r4, #1
 8008af6:	4303      	orrs	r3, r0
 8008af8:	9304      	str	r3, [sp, #16]
 8008afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afe:	2206      	movs	r2, #6
 8008b00:	4825      	ldr	r0, [pc, #148]	; (8008b98 <_svfiprintf_r+0x1f0>)
 8008b02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b06:	f000 fbe7 	bl	80092d8 <memchr>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	d038      	beq.n	8008b80 <_svfiprintf_r+0x1d8>
 8008b0e:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <_svfiprintf_r+0x1f4>)
 8008b10:	bb1b      	cbnz	r3, 8008b5a <_svfiprintf_r+0x1b2>
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	3307      	adds	r3, #7
 8008b16:	f023 0307 	bic.w	r3, r3, #7
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	9303      	str	r3, [sp, #12]
 8008b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b20:	4433      	add	r3, r6
 8008b22:	9309      	str	r3, [sp, #36]	; 0x24
 8008b24:	e767      	b.n	80089f6 <_svfiprintf_r+0x4e>
 8008b26:	460c      	mov	r4, r1
 8008b28:	2001      	movs	r0, #1
 8008b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b2e:	e7a5      	b.n	8008a7c <_svfiprintf_r+0xd4>
 8008b30:	2300      	movs	r3, #0
 8008b32:	f04f 0c0a 	mov.w	ip, #10
 8008b36:	4619      	mov	r1, r3
 8008b38:	3401      	adds	r4, #1
 8008b3a:	9305      	str	r3, [sp, #20]
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b42:	3a30      	subs	r2, #48	; 0x30
 8008b44:	2a09      	cmp	r2, #9
 8008b46:	d903      	bls.n	8008b50 <_svfiprintf_r+0x1a8>
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0c5      	beq.n	8008ad8 <_svfiprintf_r+0x130>
 8008b4c:	9105      	str	r1, [sp, #20]
 8008b4e:	e7c3      	b.n	8008ad8 <_svfiprintf_r+0x130>
 8008b50:	4604      	mov	r4, r0
 8008b52:	2301      	movs	r3, #1
 8008b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b58:	e7f0      	b.n	8008b3c <_svfiprintf_r+0x194>
 8008b5a:	ab03      	add	r3, sp, #12
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4638      	mov	r0, r7
 8008b62:	4b0f      	ldr	r3, [pc, #60]	; (8008ba0 <_svfiprintf_r+0x1f8>)
 8008b64:	a904      	add	r1, sp, #16
 8008b66:	f3af 8000 	nop.w
 8008b6a:	1c42      	adds	r2, r0, #1
 8008b6c:	4606      	mov	r6, r0
 8008b6e:	d1d6      	bne.n	8008b1e <_svfiprintf_r+0x176>
 8008b70:	89ab      	ldrh	r3, [r5, #12]
 8008b72:	065b      	lsls	r3, r3, #25
 8008b74:	f53f af2c 	bmi.w	80089d0 <_svfiprintf_r+0x28>
 8008b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b7a:	b01d      	add	sp, #116	; 0x74
 8008b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b80:	ab03      	add	r3, sp, #12
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	462a      	mov	r2, r5
 8008b86:	4638      	mov	r0, r7
 8008b88:	4b05      	ldr	r3, [pc, #20]	; (8008ba0 <_svfiprintf_r+0x1f8>)
 8008b8a:	a904      	add	r1, sp, #16
 8008b8c:	f000 f9d4 	bl	8008f38 <_printf_i>
 8008b90:	e7eb      	b.n	8008b6a <_svfiprintf_r+0x1c2>
 8008b92:	bf00      	nop
 8008b94:	0800a69c 	.word	0x0800a69c
 8008b98:	0800a6a6 	.word	0x0800a6a6
 8008b9c:	00000000 	.word	0x00000000
 8008ba0:	080088f1 	.word	0x080088f1
 8008ba4:	0800a6a2 	.word	0x0800a6a2

08008ba8 <__sfputc_r>:
 8008ba8:	6893      	ldr	r3, [r2, #8]
 8008baa:	b410      	push	{r4}
 8008bac:	3b01      	subs	r3, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	6093      	str	r3, [r2, #8]
 8008bb2:	da07      	bge.n	8008bc4 <__sfputc_r+0x1c>
 8008bb4:	6994      	ldr	r4, [r2, #24]
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	db01      	blt.n	8008bbe <__sfputc_r+0x16>
 8008bba:	290a      	cmp	r1, #10
 8008bbc:	d102      	bne.n	8008bc4 <__sfputc_r+0x1c>
 8008bbe:	bc10      	pop	{r4}
 8008bc0:	f7ff bb12 	b.w	80081e8 <__swbuf_r>
 8008bc4:	6813      	ldr	r3, [r2, #0]
 8008bc6:	1c58      	adds	r0, r3, #1
 8008bc8:	6010      	str	r0, [r2, #0]
 8008bca:	7019      	strb	r1, [r3, #0]
 8008bcc:	4608      	mov	r0, r1
 8008bce:	bc10      	pop	{r4}
 8008bd0:	4770      	bx	lr

08008bd2 <__sfputs_r>:
 8008bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	460f      	mov	r7, r1
 8008bd8:	4614      	mov	r4, r2
 8008bda:	18d5      	adds	r5, r2, r3
 8008bdc:	42ac      	cmp	r4, r5
 8008bde:	d101      	bne.n	8008be4 <__sfputs_r+0x12>
 8008be0:	2000      	movs	r0, #0
 8008be2:	e007      	b.n	8008bf4 <__sfputs_r+0x22>
 8008be4:	463a      	mov	r2, r7
 8008be6:	4630      	mov	r0, r6
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	f7ff ffdc 	bl	8008ba8 <__sfputc_r>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d1f3      	bne.n	8008bdc <__sfputs_r+0xa>
 8008bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bf8 <_vfiprintf_r>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	460d      	mov	r5, r1
 8008bfe:	4614      	mov	r4, r2
 8008c00:	4698      	mov	r8, r3
 8008c02:	4606      	mov	r6, r0
 8008c04:	b09d      	sub	sp, #116	; 0x74
 8008c06:	b118      	cbz	r0, 8008c10 <_vfiprintf_r+0x18>
 8008c08:	6983      	ldr	r3, [r0, #24]
 8008c0a:	b90b      	cbnz	r3, 8008c10 <_vfiprintf_r+0x18>
 8008c0c:	f7ff fcc6 	bl	800859c <__sinit>
 8008c10:	4b89      	ldr	r3, [pc, #548]	; (8008e38 <_vfiprintf_r+0x240>)
 8008c12:	429d      	cmp	r5, r3
 8008c14:	d11b      	bne.n	8008c4e <_vfiprintf_r+0x56>
 8008c16:	6875      	ldr	r5, [r6, #4]
 8008c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	d405      	bmi.n	8008c2a <_vfiprintf_r+0x32>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	059a      	lsls	r2, r3, #22
 8008c22:	d402      	bmi.n	8008c2a <_vfiprintf_r+0x32>
 8008c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c26:	f7ff fd57 	bl	80086d8 <__retarget_lock_acquire_recursive>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	071b      	lsls	r3, r3, #28
 8008c2e:	d501      	bpl.n	8008c34 <_vfiprintf_r+0x3c>
 8008c30:	692b      	ldr	r3, [r5, #16]
 8008c32:	b9eb      	cbnz	r3, 8008c70 <_vfiprintf_r+0x78>
 8008c34:	4629      	mov	r1, r5
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7ff fb28 	bl	800828c <__swsetup_r>
 8008c3c:	b1c0      	cbz	r0, 8008c70 <_vfiprintf_r+0x78>
 8008c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c40:	07dc      	lsls	r4, r3, #31
 8008c42:	d50e      	bpl.n	8008c62 <_vfiprintf_r+0x6a>
 8008c44:	f04f 30ff 	mov.w	r0, #4294967295
 8008c48:	b01d      	add	sp, #116	; 0x74
 8008c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4e:	4b7b      	ldr	r3, [pc, #492]	; (8008e3c <_vfiprintf_r+0x244>)
 8008c50:	429d      	cmp	r5, r3
 8008c52:	d101      	bne.n	8008c58 <_vfiprintf_r+0x60>
 8008c54:	68b5      	ldr	r5, [r6, #8]
 8008c56:	e7df      	b.n	8008c18 <_vfiprintf_r+0x20>
 8008c58:	4b79      	ldr	r3, [pc, #484]	; (8008e40 <_vfiprintf_r+0x248>)
 8008c5a:	429d      	cmp	r5, r3
 8008c5c:	bf08      	it	eq
 8008c5e:	68f5      	ldreq	r5, [r6, #12]
 8008c60:	e7da      	b.n	8008c18 <_vfiprintf_r+0x20>
 8008c62:	89ab      	ldrh	r3, [r5, #12]
 8008c64:	0598      	lsls	r0, r3, #22
 8008c66:	d4ed      	bmi.n	8008c44 <_vfiprintf_r+0x4c>
 8008c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c6a:	f7ff fd36 	bl	80086da <__retarget_lock_release_recursive>
 8008c6e:	e7e9      	b.n	8008c44 <_vfiprintf_r+0x4c>
 8008c70:	2300      	movs	r3, #0
 8008c72:	9309      	str	r3, [sp, #36]	; 0x24
 8008c74:	2320      	movs	r3, #32
 8008c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c7a:	2330      	movs	r3, #48	; 0x30
 8008c7c:	f04f 0901 	mov.w	r9, #1
 8008c80:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c84:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008e44 <_vfiprintf_r+0x24c>
 8008c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	469a      	mov	sl, r3
 8008c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c94:	b10a      	cbz	r2, 8008c9a <_vfiprintf_r+0xa2>
 8008c96:	2a25      	cmp	r2, #37	; 0x25
 8008c98:	d1f9      	bne.n	8008c8e <_vfiprintf_r+0x96>
 8008c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c9e:	d00b      	beq.n	8008cb8 <_vfiprintf_r+0xc0>
 8008ca0:	465b      	mov	r3, fp
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	4629      	mov	r1, r5
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	f7ff ff93 	bl	8008bd2 <__sfputs_r>
 8008cac:	3001      	adds	r0, #1
 8008cae:	f000 80aa 	beq.w	8008e06 <_vfiprintf_r+0x20e>
 8008cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cb4:	445a      	add	r2, fp
 8008cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8008cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	f000 80a2 	beq.w	8008e06 <_vfiprintf_r+0x20e>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ccc:	f10a 0a01 	add.w	sl, sl, #1
 8008cd0:	9304      	str	r3, [sp, #16]
 8008cd2:	9307      	str	r3, [sp, #28]
 8008cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8008cda:	4654      	mov	r4, sl
 8008cdc:	2205      	movs	r2, #5
 8008cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce2:	4858      	ldr	r0, [pc, #352]	; (8008e44 <_vfiprintf_r+0x24c>)
 8008ce4:	f000 faf8 	bl	80092d8 <memchr>
 8008ce8:	9a04      	ldr	r2, [sp, #16]
 8008cea:	b9d8      	cbnz	r0, 8008d24 <_vfiprintf_r+0x12c>
 8008cec:	06d1      	lsls	r1, r2, #27
 8008cee:	bf44      	itt	mi
 8008cf0:	2320      	movmi	r3, #32
 8008cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cf6:	0713      	lsls	r3, r2, #28
 8008cf8:	bf44      	itt	mi
 8008cfa:	232b      	movmi	r3, #43	; 0x2b
 8008cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d00:	f89a 3000 	ldrb.w	r3, [sl]
 8008d04:	2b2a      	cmp	r3, #42	; 0x2a
 8008d06:	d015      	beq.n	8008d34 <_vfiprintf_r+0x13c>
 8008d08:	4654      	mov	r4, sl
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	f04f 0c0a 	mov.w	ip, #10
 8008d10:	9a07      	ldr	r2, [sp, #28]
 8008d12:	4621      	mov	r1, r4
 8008d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d18:	3b30      	subs	r3, #48	; 0x30
 8008d1a:	2b09      	cmp	r3, #9
 8008d1c:	d94e      	bls.n	8008dbc <_vfiprintf_r+0x1c4>
 8008d1e:	b1b0      	cbz	r0, 8008d4e <_vfiprintf_r+0x156>
 8008d20:	9207      	str	r2, [sp, #28]
 8008d22:	e014      	b.n	8008d4e <_vfiprintf_r+0x156>
 8008d24:	eba0 0308 	sub.w	r3, r0, r8
 8008d28:	fa09 f303 	lsl.w	r3, r9, r3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	46a2      	mov	sl, r4
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	e7d2      	b.n	8008cda <_vfiprintf_r+0xe2>
 8008d34:	9b03      	ldr	r3, [sp, #12]
 8008d36:	1d19      	adds	r1, r3, #4
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	9103      	str	r1, [sp, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	bfbb      	ittet	lt
 8008d40:	425b      	neglt	r3, r3
 8008d42:	f042 0202 	orrlt.w	r2, r2, #2
 8008d46:	9307      	strge	r3, [sp, #28]
 8008d48:	9307      	strlt	r3, [sp, #28]
 8008d4a:	bfb8      	it	lt
 8008d4c:	9204      	strlt	r2, [sp, #16]
 8008d4e:	7823      	ldrb	r3, [r4, #0]
 8008d50:	2b2e      	cmp	r3, #46	; 0x2e
 8008d52:	d10c      	bne.n	8008d6e <_vfiprintf_r+0x176>
 8008d54:	7863      	ldrb	r3, [r4, #1]
 8008d56:	2b2a      	cmp	r3, #42	; 0x2a
 8008d58:	d135      	bne.n	8008dc6 <_vfiprintf_r+0x1ce>
 8008d5a:	9b03      	ldr	r3, [sp, #12]
 8008d5c:	3402      	adds	r4, #2
 8008d5e:	1d1a      	adds	r2, r3, #4
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	9203      	str	r2, [sp, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bfb8      	it	lt
 8008d68:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d6c:	9305      	str	r3, [sp, #20]
 8008d6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008e54 <_vfiprintf_r+0x25c>
 8008d72:	2203      	movs	r2, #3
 8008d74:	4650      	mov	r0, sl
 8008d76:	7821      	ldrb	r1, [r4, #0]
 8008d78:	f000 faae 	bl	80092d8 <memchr>
 8008d7c:	b140      	cbz	r0, 8008d90 <_vfiprintf_r+0x198>
 8008d7e:	2340      	movs	r3, #64	; 0x40
 8008d80:	eba0 000a 	sub.w	r0, r0, sl
 8008d84:	fa03 f000 	lsl.w	r0, r3, r0
 8008d88:	9b04      	ldr	r3, [sp, #16]
 8008d8a:	3401      	adds	r4, #1
 8008d8c:	4303      	orrs	r3, r0
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d94:	2206      	movs	r2, #6
 8008d96:	482c      	ldr	r0, [pc, #176]	; (8008e48 <_vfiprintf_r+0x250>)
 8008d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d9c:	f000 fa9c 	bl	80092d8 <memchr>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d03f      	beq.n	8008e24 <_vfiprintf_r+0x22c>
 8008da4:	4b29      	ldr	r3, [pc, #164]	; (8008e4c <_vfiprintf_r+0x254>)
 8008da6:	bb1b      	cbnz	r3, 8008df0 <_vfiprintf_r+0x1f8>
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	3307      	adds	r3, #7
 8008dac:	f023 0307 	bic.w	r3, r3, #7
 8008db0:	3308      	adds	r3, #8
 8008db2:	9303      	str	r3, [sp, #12]
 8008db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008db6:	443b      	add	r3, r7
 8008db8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dba:	e767      	b.n	8008c8c <_vfiprintf_r+0x94>
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc4:	e7a5      	b.n	8008d12 <_vfiprintf_r+0x11a>
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f04f 0c0a 	mov.w	ip, #10
 8008dcc:	4619      	mov	r1, r3
 8008dce:	3401      	adds	r4, #1
 8008dd0:	9305      	str	r3, [sp, #20]
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dd8:	3a30      	subs	r2, #48	; 0x30
 8008dda:	2a09      	cmp	r2, #9
 8008ddc:	d903      	bls.n	8008de6 <_vfiprintf_r+0x1ee>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0c5      	beq.n	8008d6e <_vfiprintf_r+0x176>
 8008de2:	9105      	str	r1, [sp, #20]
 8008de4:	e7c3      	b.n	8008d6e <_vfiprintf_r+0x176>
 8008de6:	4604      	mov	r4, r0
 8008de8:	2301      	movs	r3, #1
 8008dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dee:	e7f0      	b.n	8008dd2 <_vfiprintf_r+0x1da>
 8008df0:	ab03      	add	r3, sp, #12
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	462a      	mov	r2, r5
 8008df6:	4630      	mov	r0, r6
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <_vfiprintf_r+0x258>)
 8008dfa:	a904      	add	r1, sp, #16
 8008dfc:	f3af 8000 	nop.w
 8008e00:	4607      	mov	r7, r0
 8008e02:	1c78      	adds	r0, r7, #1
 8008e04:	d1d6      	bne.n	8008db4 <_vfiprintf_r+0x1bc>
 8008e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e08:	07d9      	lsls	r1, r3, #31
 8008e0a:	d405      	bmi.n	8008e18 <_vfiprintf_r+0x220>
 8008e0c:	89ab      	ldrh	r3, [r5, #12]
 8008e0e:	059a      	lsls	r2, r3, #22
 8008e10:	d402      	bmi.n	8008e18 <_vfiprintf_r+0x220>
 8008e12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e14:	f7ff fc61 	bl	80086da <__retarget_lock_release_recursive>
 8008e18:	89ab      	ldrh	r3, [r5, #12]
 8008e1a:	065b      	lsls	r3, r3, #25
 8008e1c:	f53f af12 	bmi.w	8008c44 <_vfiprintf_r+0x4c>
 8008e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e22:	e711      	b.n	8008c48 <_vfiprintf_r+0x50>
 8008e24:	ab03      	add	r3, sp, #12
 8008e26:	9300      	str	r3, [sp, #0]
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	4b08      	ldr	r3, [pc, #32]	; (8008e50 <_vfiprintf_r+0x258>)
 8008e2e:	a904      	add	r1, sp, #16
 8008e30:	f000 f882 	bl	8008f38 <_printf_i>
 8008e34:	e7e4      	b.n	8008e00 <_vfiprintf_r+0x208>
 8008e36:	bf00      	nop
 8008e38:	0800a65c 	.word	0x0800a65c
 8008e3c:	0800a67c 	.word	0x0800a67c
 8008e40:	0800a63c 	.word	0x0800a63c
 8008e44:	0800a69c 	.word	0x0800a69c
 8008e48:	0800a6a6 	.word	0x0800a6a6
 8008e4c:	00000000 	.word	0x00000000
 8008e50:	08008bd3 	.word	0x08008bd3
 8008e54:	0800a6a2 	.word	0x0800a6a2

08008e58 <_printf_common>:
 8008e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e5c:	4616      	mov	r6, r2
 8008e5e:	4699      	mov	r9, r3
 8008e60:	688a      	ldr	r2, [r1, #8]
 8008e62:	690b      	ldr	r3, [r1, #16]
 8008e64:	4607      	mov	r7, r0
 8008e66:	4293      	cmp	r3, r2
 8008e68:	bfb8      	it	lt
 8008e6a:	4613      	movlt	r3, r2
 8008e6c:	6033      	str	r3, [r6, #0]
 8008e6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e72:	460c      	mov	r4, r1
 8008e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e78:	b10a      	cbz	r2, 8008e7e <_printf_common+0x26>
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	6033      	str	r3, [r6, #0]
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	0699      	lsls	r1, r3, #26
 8008e82:	bf42      	ittt	mi
 8008e84:	6833      	ldrmi	r3, [r6, #0]
 8008e86:	3302      	addmi	r3, #2
 8008e88:	6033      	strmi	r3, [r6, #0]
 8008e8a:	6825      	ldr	r5, [r4, #0]
 8008e8c:	f015 0506 	ands.w	r5, r5, #6
 8008e90:	d106      	bne.n	8008ea0 <_printf_common+0x48>
 8008e92:	f104 0a19 	add.w	sl, r4, #25
 8008e96:	68e3      	ldr	r3, [r4, #12]
 8008e98:	6832      	ldr	r2, [r6, #0]
 8008e9a:	1a9b      	subs	r3, r3, r2
 8008e9c:	42ab      	cmp	r3, r5
 8008e9e:	dc28      	bgt.n	8008ef2 <_printf_common+0x9a>
 8008ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ea4:	1e13      	subs	r3, r2, #0
 8008ea6:	6822      	ldr	r2, [r4, #0]
 8008ea8:	bf18      	it	ne
 8008eaa:	2301      	movne	r3, #1
 8008eac:	0692      	lsls	r2, r2, #26
 8008eae:	d42d      	bmi.n	8008f0c <_printf_common+0xb4>
 8008eb0:	4649      	mov	r1, r9
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008eb8:	47c0      	blx	r8
 8008eba:	3001      	adds	r0, #1
 8008ebc:	d020      	beq.n	8008f00 <_printf_common+0xa8>
 8008ebe:	6823      	ldr	r3, [r4, #0]
 8008ec0:	68e5      	ldr	r5, [r4, #12]
 8008ec2:	f003 0306 	and.w	r3, r3, #6
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	bf18      	it	ne
 8008eca:	2500      	movne	r5, #0
 8008ecc:	6832      	ldr	r2, [r6, #0]
 8008ece:	f04f 0600 	mov.w	r6, #0
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	bf08      	it	eq
 8008ed6:	1aad      	subeq	r5, r5, r2
 8008ed8:	6922      	ldr	r2, [r4, #16]
 8008eda:	bf08      	it	eq
 8008edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	bfc4      	itt	gt
 8008ee4:	1a9b      	subgt	r3, r3, r2
 8008ee6:	18ed      	addgt	r5, r5, r3
 8008ee8:	341a      	adds	r4, #26
 8008eea:	42b5      	cmp	r5, r6
 8008eec:	d11a      	bne.n	8008f24 <_printf_common+0xcc>
 8008eee:	2000      	movs	r0, #0
 8008ef0:	e008      	b.n	8008f04 <_printf_common+0xac>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4652      	mov	r2, sl
 8008ef6:	4649      	mov	r1, r9
 8008ef8:	4638      	mov	r0, r7
 8008efa:	47c0      	blx	r8
 8008efc:	3001      	adds	r0, #1
 8008efe:	d103      	bne.n	8008f08 <_printf_common+0xb0>
 8008f00:	f04f 30ff 	mov.w	r0, #4294967295
 8008f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f08:	3501      	adds	r5, #1
 8008f0a:	e7c4      	b.n	8008e96 <_printf_common+0x3e>
 8008f0c:	2030      	movs	r0, #48	; 0x30
 8008f0e:	18e1      	adds	r1, r4, r3
 8008f10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f14:	1c5a      	adds	r2, r3, #1
 8008f16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f1a:	4422      	add	r2, r4
 8008f1c:	3302      	adds	r3, #2
 8008f1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f22:	e7c5      	b.n	8008eb0 <_printf_common+0x58>
 8008f24:	2301      	movs	r3, #1
 8008f26:	4622      	mov	r2, r4
 8008f28:	4649      	mov	r1, r9
 8008f2a:	4638      	mov	r0, r7
 8008f2c:	47c0      	blx	r8
 8008f2e:	3001      	adds	r0, #1
 8008f30:	d0e6      	beq.n	8008f00 <_printf_common+0xa8>
 8008f32:	3601      	adds	r6, #1
 8008f34:	e7d9      	b.n	8008eea <_printf_common+0x92>
	...

08008f38 <_printf_i>:
 8008f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	7e27      	ldrb	r7, [r4, #24]
 8008f40:	4691      	mov	r9, r2
 8008f42:	2f78      	cmp	r7, #120	; 0x78
 8008f44:	4680      	mov	r8, r0
 8008f46:	469a      	mov	sl, r3
 8008f48:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f4e:	d807      	bhi.n	8008f60 <_printf_i+0x28>
 8008f50:	2f62      	cmp	r7, #98	; 0x62
 8008f52:	d80a      	bhi.n	8008f6a <_printf_i+0x32>
 8008f54:	2f00      	cmp	r7, #0
 8008f56:	f000 80d9 	beq.w	800910c <_printf_i+0x1d4>
 8008f5a:	2f58      	cmp	r7, #88	; 0x58
 8008f5c:	f000 80a4 	beq.w	80090a8 <_printf_i+0x170>
 8008f60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f68:	e03a      	b.n	8008fe0 <_printf_i+0xa8>
 8008f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f6e:	2b15      	cmp	r3, #21
 8008f70:	d8f6      	bhi.n	8008f60 <_printf_i+0x28>
 8008f72:	a001      	add	r0, pc, #4	; (adr r0, 8008f78 <_printf_i+0x40>)
 8008f74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008f78:	08008fd1 	.word	0x08008fd1
 8008f7c:	08008fe5 	.word	0x08008fe5
 8008f80:	08008f61 	.word	0x08008f61
 8008f84:	08008f61 	.word	0x08008f61
 8008f88:	08008f61 	.word	0x08008f61
 8008f8c:	08008f61 	.word	0x08008f61
 8008f90:	08008fe5 	.word	0x08008fe5
 8008f94:	08008f61 	.word	0x08008f61
 8008f98:	08008f61 	.word	0x08008f61
 8008f9c:	08008f61 	.word	0x08008f61
 8008fa0:	08008f61 	.word	0x08008f61
 8008fa4:	080090f3 	.word	0x080090f3
 8008fa8:	08009015 	.word	0x08009015
 8008fac:	080090d5 	.word	0x080090d5
 8008fb0:	08008f61 	.word	0x08008f61
 8008fb4:	08008f61 	.word	0x08008f61
 8008fb8:	08009115 	.word	0x08009115
 8008fbc:	08008f61 	.word	0x08008f61
 8008fc0:	08009015 	.word	0x08009015
 8008fc4:	08008f61 	.word	0x08008f61
 8008fc8:	08008f61 	.word	0x08008f61
 8008fcc:	080090dd 	.word	0x080090dd
 8008fd0:	680b      	ldr	r3, [r1, #0]
 8008fd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008fd6:	1d1a      	adds	r2, r3, #4
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	600a      	str	r2, [r1, #0]
 8008fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e0a4      	b.n	800912e <_printf_i+0x1f6>
 8008fe4:	6825      	ldr	r5, [r4, #0]
 8008fe6:	6808      	ldr	r0, [r1, #0]
 8008fe8:	062e      	lsls	r6, r5, #24
 8008fea:	f100 0304 	add.w	r3, r0, #4
 8008fee:	d50a      	bpl.n	8009006 <_printf_i+0xce>
 8008ff0:	6805      	ldr	r5, [r0, #0]
 8008ff2:	600b      	str	r3, [r1, #0]
 8008ff4:	2d00      	cmp	r5, #0
 8008ff6:	da03      	bge.n	8009000 <_printf_i+0xc8>
 8008ff8:	232d      	movs	r3, #45	; 0x2d
 8008ffa:	426d      	negs	r5, r5
 8008ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009000:	230a      	movs	r3, #10
 8009002:	485e      	ldr	r0, [pc, #376]	; (800917c <_printf_i+0x244>)
 8009004:	e019      	b.n	800903a <_printf_i+0x102>
 8009006:	f015 0f40 	tst.w	r5, #64	; 0x40
 800900a:	6805      	ldr	r5, [r0, #0]
 800900c:	600b      	str	r3, [r1, #0]
 800900e:	bf18      	it	ne
 8009010:	b22d      	sxthne	r5, r5
 8009012:	e7ef      	b.n	8008ff4 <_printf_i+0xbc>
 8009014:	680b      	ldr	r3, [r1, #0]
 8009016:	6825      	ldr	r5, [r4, #0]
 8009018:	1d18      	adds	r0, r3, #4
 800901a:	6008      	str	r0, [r1, #0]
 800901c:	0628      	lsls	r0, r5, #24
 800901e:	d501      	bpl.n	8009024 <_printf_i+0xec>
 8009020:	681d      	ldr	r5, [r3, #0]
 8009022:	e002      	b.n	800902a <_printf_i+0xf2>
 8009024:	0669      	lsls	r1, r5, #25
 8009026:	d5fb      	bpl.n	8009020 <_printf_i+0xe8>
 8009028:	881d      	ldrh	r5, [r3, #0]
 800902a:	2f6f      	cmp	r7, #111	; 0x6f
 800902c:	bf0c      	ite	eq
 800902e:	2308      	moveq	r3, #8
 8009030:	230a      	movne	r3, #10
 8009032:	4852      	ldr	r0, [pc, #328]	; (800917c <_printf_i+0x244>)
 8009034:	2100      	movs	r1, #0
 8009036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800903a:	6866      	ldr	r6, [r4, #4]
 800903c:	2e00      	cmp	r6, #0
 800903e:	bfa8      	it	ge
 8009040:	6821      	ldrge	r1, [r4, #0]
 8009042:	60a6      	str	r6, [r4, #8]
 8009044:	bfa4      	itt	ge
 8009046:	f021 0104 	bicge.w	r1, r1, #4
 800904a:	6021      	strge	r1, [r4, #0]
 800904c:	b90d      	cbnz	r5, 8009052 <_printf_i+0x11a>
 800904e:	2e00      	cmp	r6, #0
 8009050:	d04d      	beq.n	80090ee <_printf_i+0x1b6>
 8009052:	4616      	mov	r6, r2
 8009054:	fbb5 f1f3 	udiv	r1, r5, r3
 8009058:	fb03 5711 	mls	r7, r3, r1, r5
 800905c:	5dc7      	ldrb	r7, [r0, r7]
 800905e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009062:	462f      	mov	r7, r5
 8009064:	42bb      	cmp	r3, r7
 8009066:	460d      	mov	r5, r1
 8009068:	d9f4      	bls.n	8009054 <_printf_i+0x11c>
 800906a:	2b08      	cmp	r3, #8
 800906c:	d10b      	bne.n	8009086 <_printf_i+0x14e>
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	07df      	lsls	r7, r3, #31
 8009072:	d508      	bpl.n	8009086 <_printf_i+0x14e>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	6861      	ldr	r1, [r4, #4]
 8009078:	4299      	cmp	r1, r3
 800907a:	bfde      	ittt	le
 800907c:	2330      	movle	r3, #48	; 0x30
 800907e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009082:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009086:	1b92      	subs	r2, r2, r6
 8009088:	6122      	str	r2, [r4, #16]
 800908a:	464b      	mov	r3, r9
 800908c:	4621      	mov	r1, r4
 800908e:	4640      	mov	r0, r8
 8009090:	f8cd a000 	str.w	sl, [sp]
 8009094:	aa03      	add	r2, sp, #12
 8009096:	f7ff fedf 	bl	8008e58 <_printf_common>
 800909a:	3001      	adds	r0, #1
 800909c:	d14c      	bne.n	8009138 <_printf_i+0x200>
 800909e:	f04f 30ff 	mov.w	r0, #4294967295
 80090a2:	b004      	add	sp, #16
 80090a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a8:	4834      	ldr	r0, [pc, #208]	; (800917c <_printf_i+0x244>)
 80090aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090ae:	680e      	ldr	r6, [r1, #0]
 80090b0:	6823      	ldr	r3, [r4, #0]
 80090b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80090b6:	061f      	lsls	r7, r3, #24
 80090b8:	600e      	str	r6, [r1, #0]
 80090ba:	d514      	bpl.n	80090e6 <_printf_i+0x1ae>
 80090bc:	07d9      	lsls	r1, r3, #31
 80090be:	bf44      	itt	mi
 80090c0:	f043 0320 	orrmi.w	r3, r3, #32
 80090c4:	6023      	strmi	r3, [r4, #0]
 80090c6:	b91d      	cbnz	r5, 80090d0 <_printf_i+0x198>
 80090c8:	6823      	ldr	r3, [r4, #0]
 80090ca:	f023 0320 	bic.w	r3, r3, #32
 80090ce:	6023      	str	r3, [r4, #0]
 80090d0:	2310      	movs	r3, #16
 80090d2:	e7af      	b.n	8009034 <_printf_i+0xfc>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	f043 0320 	orr.w	r3, r3, #32
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	2378      	movs	r3, #120	; 0x78
 80090de:	4828      	ldr	r0, [pc, #160]	; (8009180 <_printf_i+0x248>)
 80090e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090e4:	e7e3      	b.n	80090ae <_printf_i+0x176>
 80090e6:	065e      	lsls	r6, r3, #25
 80090e8:	bf48      	it	mi
 80090ea:	b2ad      	uxthmi	r5, r5
 80090ec:	e7e6      	b.n	80090bc <_printf_i+0x184>
 80090ee:	4616      	mov	r6, r2
 80090f0:	e7bb      	b.n	800906a <_printf_i+0x132>
 80090f2:	680b      	ldr	r3, [r1, #0]
 80090f4:	6826      	ldr	r6, [r4, #0]
 80090f6:	1d1d      	adds	r5, r3, #4
 80090f8:	6960      	ldr	r0, [r4, #20]
 80090fa:	600d      	str	r5, [r1, #0]
 80090fc:	0635      	lsls	r5, r6, #24
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	d501      	bpl.n	8009106 <_printf_i+0x1ce>
 8009102:	6018      	str	r0, [r3, #0]
 8009104:	e002      	b.n	800910c <_printf_i+0x1d4>
 8009106:	0671      	lsls	r1, r6, #25
 8009108:	d5fb      	bpl.n	8009102 <_printf_i+0x1ca>
 800910a:	8018      	strh	r0, [r3, #0]
 800910c:	2300      	movs	r3, #0
 800910e:	4616      	mov	r6, r2
 8009110:	6123      	str	r3, [r4, #16]
 8009112:	e7ba      	b.n	800908a <_printf_i+0x152>
 8009114:	680b      	ldr	r3, [r1, #0]
 8009116:	1d1a      	adds	r2, r3, #4
 8009118:	600a      	str	r2, [r1, #0]
 800911a:	681e      	ldr	r6, [r3, #0]
 800911c:	2100      	movs	r1, #0
 800911e:	4630      	mov	r0, r6
 8009120:	6862      	ldr	r2, [r4, #4]
 8009122:	f000 f8d9 	bl	80092d8 <memchr>
 8009126:	b108      	cbz	r0, 800912c <_printf_i+0x1f4>
 8009128:	1b80      	subs	r0, r0, r6
 800912a:	6060      	str	r0, [r4, #4]
 800912c:	6863      	ldr	r3, [r4, #4]
 800912e:	6123      	str	r3, [r4, #16]
 8009130:	2300      	movs	r3, #0
 8009132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009136:	e7a8      	b.n	800908a <_printf_i+0x152>
 8009138:	4632      	mov	r2, r6
 800913a:	4649      	mov	r1, r9
 800913c:	4640      	mov	r0, r8
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	47d0      	blx	sl
 8009142:	3001      	adds	r0, #1
 8009144:	d0ab      	beq.n	800909e <_printf_i+0x166>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	079b      	lsls	r3, r3, #30
 800914a:	d413      	bmi.n	8009174 <_printf_i+0x23c>
 800914c:	68e0      	ldr	r0, [r4, #12]
 800914e:	9b03      	ldr	r3, [sp, #12]
 8009150:	4298      	cmp	r0, r3
 8009152:	bfb8      	it	lt
 8009154:	4618      	movlt	r0, r3
 8009156:	e7a4      	b.n	80090a2 <_printf_i+0x16a>
 8009158:	2301      	movs	r3, #1
 800915a:	4632      	mov	r2, r6
 800915c:	4649      	mov	r1, r9
 800915e:	4640      	mov	r0, r8
 8009160:	47d0      	blx	sl
 8009162:	3001      	adds	r0, #1
 8009164:	d09b      	beq.n	800909e <_printf_i+0x166>
 8009166:	3501      	adds	r5, #1
 8009168:	68e3      	ldr	r3, [r4, #12]
 800916a:	9903      	ldr	r1, [sp, #12]
 800916c:	1a5b      	subs	r3, r3, r1
 800916e:	42ab      	cmp	r3, r5
 8009170:	dcf2      	bgt.n	8009158 <_printf_i+0x220>
 8009172:	e7eb      	b.n	800914c <_printf_i+0x214>
 8009174:	2500      	movs	r5, #0
 8009176:	f104 0619 	add.w	r6, r4, #25
 800917a:	e7f5      	b.n	8009168 <_printf_i+0x230>
 800917c:	0800a6ad 	.word	0x0800a6ad
 8009180:	0800a6be 	.word	0x0800a6be

08009184 <_sbrk_r>:
 8009184:	b538      	push	{r3, r4, r5, lr}
 8009186:	2300      	movs	r3, #0
 8009188:	4d05      	ldr	r5, [pc, #20]	; (80091a0 <_sbrk_r+0x1c>)
 800918a:	4604      	mov	r4, r0
 800918c:	4608      	mov	r0, r1
 800918e:	602b      	str	r3, [r5, #0]
 8009190:	f7fb fe7a 	bl	8004e88 <_sbrk>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d102      	bne.n	800919e <_sbrk_r+0x1a>
 8009198:	682b      	ldr	r3, [r5, #0]
 800919a:	b103      	cbz	r3, 800919e <_sbrk_r+0x1a>
 800919c:	6023      	str	r3, [r4, #0]
 800919e:	bd38      	pop	{r3, r4, r5, pc}
 80091a0:	20002158 	.word	0x20002158

080091a4 <__sread>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ac:	f000 f8ee 	bl	800938c <_read_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	bfab      	itete	ge
 80091b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80091b6:	89a3      	ldrhlt	r3, [r4, #12]
 80091b8:	181b      	addge	r3, r3, r0
 80091ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091be:	bfac      	ite	ge
 80091c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80091c2:	81a3      	strhlt	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__swrite>:
 80091c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ca:	461f      	mov	r7, r3
 80091cc:	898b      	ldrh	r3, [r1, #12]
 80091ce:	4605      	mov	r5, r0
 80091d0:	05db      	lsls	r3, r3, #23
 80091d2:	460c      	mov	r4, r1
 80091d4:	4616      	mov	r6, r2
 80091d6:	d505      	bpl.n	80091e4 <__swrite+0x1e>
 80091d8:	2302      	movs	r3, #2
 80091da:	2200      	movs	r2, #0
 80091dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091e0:	f000 f868 	bl	80092b4 <_lseek_r>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	4632      	mov	r2, r6
 80091e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	4628      	mov	r0, r5
 80091f0:	463b      	mov	r3, r7
 80091f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	f000 b817 	b.w	800922c <_write_r>

080091fe <__sseek>:
 80091fe:	b510      	push	{r4, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009206:	f000 f855 	bl	80092b4 <_lseek_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	bf15      	itete	ne
 8009210:	6560      	strne	r0, [r4, #84]	; 0x54
 8009212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800921a:	81a3      	strheq	r3, [r4, #12]
 800921c:	bf18      	it	ne
 800921e:	81a3      	strhne	r3, [r4, #12]
 8009220:	bd10      	pop	{r4, pc}

08009222 <__sclose>:
 8009222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009226:	f000 b813 	b.w	8009250 <_close_r>
	...

0800922c <_write_r>:
 800922c:	b538      	push	{r3, r4, r5, lr}
 800922e:	4604      	mov	r4, r0
 8009230:	4608      	mov	r0, r1
 8009232:	4611      	mov	r1, r2
 8009234:	2200      	movs	r2, #0
 8009236:	4d05      	ldr	r5, [pc, #20]	; (800924c <_write_r+0x20>)
 8009238:	602a      	str	r2, [r5, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	f7f7 fe64 	bl	8000f08 <_write>
 8009240:	1c43      	adds	r3, r0, #1
 8009242:	d102      	bne.n	800924a <_write_r+0x1e>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	b103      	cbz	r3, 800924a <_write_r+0x1e>
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	bd38      	pop	{r3, r4, r5, pc}
 800924c:	20002158 	.word	0x20002158

08009250 <_close_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	2300      	movs	r3, #0
 8009254:	4d05      	ldr	r5, [pc, #20]	; (800926c <_close_r+0x1c>)
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7fb fe08 	bl	8004e70 <_close>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_close_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_close_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	20002158 	.word	0x20002158

08009270 <_fstat_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	2300      	movs	r3, #0
 8009274:	4d06      	ldr	r5, [pc, #24]	; (8009290 <_fstat_r+0x20>)
 8009276:	4604      	mov	r4, r0
 8009278:	4608      	mov	r0, r1
 800927a:	4611      	mov	r1, r2
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	f7fb fdfa 	bl	8004e76 <_fstat>
 8009282:	1c43      	adds	r3, r0, #1
 8009284:	d102      	bne.n	800928c <_fstat_r+0x1c>
 8009286:	682b      	ldr	r3, [r5, #0]
 8009288:	b103      	cbz	r3, 800928c <_fstat_r+0x1c>
 800928a:	6023      	str	r3, [r4, #0]
 800928c:	bd38      	pop	{r3, r4, r5, pc}
 800928e:	bf00      	nop
 8009290:	20002158 	.word	0x20002158

08009294 <_isatty_r>:
 8009294:	b538      	push	{r3, r4, r5, lr}
 8009296:	2300      	movs	r3, #0
 8009298:	4d05      	ldr	r5, [pc, #20]	; (80092b0 <_isatty_r+0x1c>)
 800929a:	4604      	mov	r4, r0
 800929c:	4608      	mov	r0, r1
 800929e:	602b      	str	r3, [r5, #0]
 80092a0:	f7fb fdee 	bl	8004e80 <_isatty>
 80092a4:	1c43      	adds	r3, r0, #1
 80092a6:	d102      	bne.n	80092ae <_isatty_r+0x1a>
 80092a8:	682b      	ldr	r3, [r5, #0]
 80092aa:	b103      	cbz	r3, 80092ae <_isatty_r+0x1a>
 80092ac:	6023      	str	r3, [r4, #0]
 80092ae:	bd38      	pop	{r3, r4, r5, pc}
 80092b0:	20002158 	.word	0x20002158

080092b4 <_lseek_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4604      	mov	r4, r0
 80092b8:	4608      	mov	r0, r1
 80092ba:	4611      	mov	r1, r2
 80092bc:	2200      	movs	r2, #0
 80092be:	4d05      	ldr	r5, [pc, #20]	; (80092d4 <_lseek_r+0x20>)
 80092c0:	602a      	str	r2, [r5, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	f7fb fdde 	bl	8004e84 <_lseek>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	d102      	bne.n	80092d2 <_lseek_r+0x1e>
 80092cc:	682b      	ldr	r3, [r5, #0]
 80092ce:	b103      	cbz	r3, 80092d2 <_lseek_r+0x1e>
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	bd38      	pop	{r3, r4, r5, pc}
 80092d4:	20002158 	.word	0x20002158

080092d8 <memchr>:
 80092d8:	4603      	mov	r3, r0
 80092da:	b510      	push	{r4, lr}
 80092dc:	b2c9      	uxtb	r1, r1
 80092de:	4402      	add	r2, r0
 80092e0:	4293      	cmp	r3, r2
 80092e2:	4618      	mov	r0, r3
 80092e4:	d101      	bne.n	80092ea <memchr+0x12>
 80092e6:	2000      	movs	r0, #0
 80092e8:	e003      	b.n	80092f2 <memchr+0x1a>
 80092ea:	7804      	ldrb	r4, [r0, #0]
 80092ec:	3301      	adds	r3, #1
 80092ee:	428c      	cmp	r4, r1
 80092f0:	d1f6      	bne.n	80092e0 <memchr+0x8>
 80092f2:	bd10      	pop	{r4, pc}

080092f4 <memmove>:
 80092f4:	4288      	cmp	r0, r1
 80092f6:	b510      	push	{r4, lr}
 80092f8:	eb01 0402 	add.w	r4, r1, r2
 80092fc:	d902      	bls.n	8009304 <memmove+0x10>
 80092fe:	4284      	cmp	r4, r0
 8009300:	4623      	mov	r3, r4
 8009302:	d807      	bhi.n	8009314 <memmove+0x20>
 8009304:	1e43      	subs	r3, r0, #1
 8009306:	42a1      	cmp	r1, r4
 8009308:	d008      	beq.n	800931c <memmove+0x28>
 800930a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800930e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009312:	e7f8      	b.n	8009306 <memmove+0x12>
 8009314:	4601      	mov	r1, r0
 8009316:	4402      	add	r2, r0
 8009318:	428a      	cmp	r2, r1
 800931a:	d100      	bne.n	800931e <memmove+0x2a>
 800931c:	bd10      	pop	{r4, pc}
 800931e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009326:	e7f7      	b.n	8009318 <memmove+0x24>

08009328 <__malloc_lock>:
 8009328:	4801      	ldr	r0, [pc, #4]	; (8009330 <__malloc_lock+0x8>)
 800932a:	f7ff b9d5 	b.w	80086d8 <__retarget_lock_acquire_recursive>
 800932e:	bf00      	nop
 8009330:	20002150 	.word	0x20002150

08009334 <__malloc_unlock>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__malloc_unlock+0x8>)
 8009336:	f7ff b9d0 	b.w	80086da <__retarget_lock_release_recursive>
 800933a:	bf00      	nop
 800933c:	20002150 	.word	0x20002150

08009340 <_realloc_r>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	4607      	mov	r7, r0
 8009344:	4614      	mov	r4, r2
 8009346:	460e      	mov	r6, r1
 8009348:	b921      	cbnz	r1, 8009354 <_realloc_r+0x14>
 800934a:	4611      	mov	r1, r2
 800934c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009350:	f7ff ba74 	b.w	800883c <_malloc_r>
 8009354:	b922      	cbnz	r2, 8009360 <_realloc_r+0x20>
 8009356:	f7ff fa25 	bl	80087a4 <_free_r>
 800935a:	4625      	mov	r5, r4
 800935c:	4628      	mov	r0, r5
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009360:	f000 f826 	bl	80093b0 <_malloc_usable_size_r>
 8009364:	42a0      	cmp	r0, r4
 8009366:	d20f      	bcs.n	8009388 <_realloc_r+0x48>
 8009368:	4621      	mov	r1, r4
 800936a:	4638      	mov	r0, r7
 800936c:	f7ff fa66 	bl	800883c <_malloc_r>
 8009370:	4605      	mov	r5, r0
 8009372:	2800      	cmp	r0, #0
 8009374:	d0f2      	beq.n	800935c <_realloc_r+0x1c>
 8009376:	4631      	mov	r1, r6
 8009378:	4622      	mov	r2, r4
 800937a:	f7fe fe69 	bl	8008050 <memcpy>
 800937e:	4631      	mov	r1, r6
 8009380:	4638      	mov	r0, r7
 8009382:	f7ff fa0f 	bl	80087a4 <_free_r>
 8009386:	e7e9      	b.n	800935c <_realloc_r+0x1c>
 8009388:	4635      	mov	r5, r6
 800938a:	e7e7      	b.n	800935c <_realloc_r+0x1c>

0800938c <_read_r>:
 800938c:	b538      	push	{r3, r4, r5, lr}
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	4611      	mov	r1, r2
 8009394:	2200      	movs	r2, #0
 8009396:	4d05      	ldr	r5, [pc, #20]	; (80093ac <_read_r+0x20>)
 8009398:	602a      	str	r2, [r5, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	f7fb fd5b 	bl	8004e56 <_read>
 80093a0:	1c43      	adds	r3, r0, #1
 80093a2:	d102      	bne.n	80093aa <_read_r+0x1e>
 80093a4:	682b      	ldr	r3, [r5, #0]
 80093a6:	b103      	cbz	r3, 80093aa <_read_r+0x1e>
 80093a8:	6023      	str	r3, [r4, #0]
 80093aa:	bd38      	pop	{r3, r4, r5, pc}
 80093ac:	20002158 	.word	0x20002158

080093b0 <_malloc_usable_size_r>:
 80093b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093b4:	1f18      	subs	r0, r3, #4
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bfbc      	itt	lt
 80093ba:	580b      	ldrlt	r3, [r1, r0]
 80093bc:	18c0      	addlt	r0, r0, r3
 80093be:	4770      	bx	lr

080093c0 <_init>:
 80093c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c2:	bf00      	nop
 80093c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093c6:	bc08      	pop	{r3}
 80093c8:	469e      	mov	lr, r3
 80093ca:	4770      	bx	lr

080093cc <_fini>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	bf00      	nop
 80093d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d2:	bc08      	pop	{r3}
 80093d4:	469e      	mov	lr, r3
 80093d6:	4770      	bx	lr
