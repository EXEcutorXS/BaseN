
BaseN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d20  08008f10  08008f10  00018f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c30  08009c30  000200bc  2**0
                  CONTENTS
  4 .ARM          00000000  08009c30  08009c30  000200bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c30  08009c30  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c30  08009c30  00019c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c34  08009c34  00019c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08009c38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001920  200000c0  08009cf4  000200c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200019e0  08009cf4  000219e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029737  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000558b  00000000  00000000  0004981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012378  00000000  00000000  0004eda7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00061120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e70  00000000  00000000  00062598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cde7  00000000  00000000  00064408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002515b  00000000  00000000  000811ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009895b  00000000  00000000  000a634a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013eca5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ad0  00000000  00000000  0013ecf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08008ef8 	.word	0x08008ef8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	08008ef8 	.word	0x08008ef8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__gesf2>:
 8000618:	f04f 3cff 	mov.w	ip, #4294967295
 800061c:	e006      	b.n	800062c <__cmpsf2+0x4>
 800061e:	bf00      	nop

08000620 <__lesf2>:
 8000620:	f04f 0c01 	mov.w	ip, #1
 8000624:	e002      	b.n	800062c <__cmpsf2+0x4>
 8000626:	bf00      	nop

08000628 <__cmpsf2>:
 8000628:	f04f 0c01 	mov.w	ip, #1
 800062c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000630:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000634:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000638:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800063c:	bf18      	it	ne
 800063e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000642:	d011      	beq.n	8000668 <__cmpsf2+0x40>
 8000644:	b001      	add	sp, #4
 8000646:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064a:	bf18      	it	ne
 800064c:	ea90 0f01 	teqne	r0, r1
 8000650:	bf58      	it	pl
 8000652:	ebb2 0003 	subspl.w	r0, r2, r3
 8000656:	bf88      	it	hi
 8000658:	17c8      	asrhi	r0, r1, #31
 800065a:	bf38      	it	cc
 800065c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000660:	bf18      	it	ne
 8000662:	f040 0001 	orrne.w	r0, r0, #1
 8000666:	4770      	bx	lr
 8000668:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800066c:	d102      	bne.n	8000674 <__cmpsf2+0x4c>
 800066e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000672:	d105      	bne.n	8000680 <__cmpsf2+0x58>
 8000674:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000678:	d1e4      	bne.n	8000644 <__cmpsf2+0x1c>
 800067a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800067e:	d0e1      	beq.n	8000644 <__cmpsf2+0x1c>
 8000680:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <__aeabi_cfrcmple>:
 8000688:	4684      	mov	ip, r0
 800068a:	4608      	mov	r0, r1
 800068c:	4661      	mov	r1, ip
 800068e:	e7ff      	b.n	8000690 <__aeabi_cfcmpeq>

08000690 <__aeabi_cfcmpeq>:
 8000690:	b50f      	push	{r0, r1, r2, r3, lr}
 8000692:	f7ff ffc9 	bl	8000628 <__cmpsf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a0 <__aeabi_fcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cfcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_fcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cfcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cfcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffd2 	bl	8000688 <__aeabi_cfrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc8 	bl	8000688 <__aeabi_cfrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_f2iz>:
 8000704:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000708:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800070c:	d30f      	bcc.n	800072e <__aeabi_f2iz+0x2a>
 800070e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000712:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000716:	d90d      	bls.n	8000734 <__aeabi_f2iz+0x30>
 8000718:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800071c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000720:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000724:	fa23 f002 	lsr.w	r0, r3, r2
 8000728:	bf18      	it	ne
 800072a:	4240      	negne	r0, r0
 800072c:	4770      	bx	lr
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	4770      	bx	lr
 8000734:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000738:	d101      	bne.n	800073e <__aeabi_f2iz+0x3a>
 800073a:	0242      	lsls	r2, r0, #9
 800073c:	d105      	bne.n	800074a <__aeabi_f2iz+0x46>
 800073e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000742:	bf08      	it	eq
 8000744:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr

08000750 <__aeabi_f2uiz>:
 8000750:	0042      	lsls	r2, r0, #1
 8000752:	d20e      	bcs.n	8000772 <__aeabi_f2uiz+0x22>
 8000754:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000758:	d30b      	bcc.n	8000772 <__aeabi_f2uiz+0x22>
 800075a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800075e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000762:	d409      	bmi.n	8000778 <__aeabi_f2uiz+0x28>
 8000764:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000768:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800076c:	fa23 f002 	lsr.w	r0, r3, r2
 8000770:	4770      	bx	lr
 8000772:	f04f 0000 	mov.w	r0, #0
 8000776:	4770      	bx	lr
 8000778:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800077c:	d101      	bne.n	8000782 <__aeabi_f2uiz+0x32>
 800077e:	0242      	lsls	r2, r0, #9
 8000780:	d102      	bne.n	8000788 <__aeabi_f2uiz+0x38>
 8000782:	f04f 30ff 	mov.w	r0, #4294967295
 8000786:	4770      	bx	lr
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop

08000790 <SendCommand>:
extern NetHandler_t netHandler;

uint32_t lastStatusCheck = 0;

void SendCommand (char com, char *data)
{
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	4604      	mov	r4, r0
 8000794:	460d      	mov	r5, r1
	char tmpStr[256] = { 0, };
 8000796:	2100      	movs	r1, #0
{
 8000798:	b0c1      	sub	sp, #260	; 0x104
	char tmpStr[256] = { 0, };
 800079a:	22fc      	movs	r2, #252	; 0xfc
 800079c:	a801      	add	r0, sp, #4
 800079e:	9100      	str	r1, [sp, #0]
 80007a0:	f007 fa00 	bl	8007ba4 <memset>
	uint8_t len;
	sprintf (tmpStr, "<%c%s", com, data);
 80007a4:	462b      	mov	r3, r5
 80007a6:	4622      	mov	r2, r4
 80007a8:	4909      	ldr	r1, [pc, #36]	; (80007d0 <SendCommand+0x40>)
 80007aa:	4668      	mov	r0, sp
 80007ac:	f007 fa90 	bl	8007cd0 <siprintf>
	len = strlen (tmpStr);
 80007b0:	4668      	mov	r0, sp
 80007b2:	f7ff fccb 	bl	800014c <strlen>
	tmpStr[len] = '>';
 80007b6:	233e      	movs	r3, #62	; 0x3e
 80007b8:	f80d 3000 	strb.w	r3, [sp, r0]
	HAL_UART_Transmit (&huart1, (uint8_t*) tmpStr, len + 1, 1000);
 80007bc:	3001      	adds	r0, #1
 80007be:	b282      	uxth	r2, r0
 80007c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c4:	4669      	mov	r1, sp
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <SendCommand+0x44>)
 80007c8:	f006 ffd0 	bl	800776c <HAL_UART_Transmit>
}
 80007cc:	b041      	add	sp, #260	; 0x104
 80007ce:	bd30      	pop	{r4, r5, pc}
 80007d0:	08008f10 	.word	0x08008f10
 80007d4:	20000c30 	.word	0x20000c30

080007d8 <NetInitialise>:


}

void NetInitialise (NetHandler_t *h)
{
 80007d8:	b538      	push	{r3, r4, r5, lr}
	SendCommand (UARTW_SSID, settings.SSID);
 80007da:	4d08      	ldr	r5, [pc, #32]	; (80007fc <NetInitialise+0x24>)
{
 80007dc:	4604      	mov	r4, r0
	SendCommand (UARTW_SSID, settings.SSID);
 80007de:	4629      	mov	r1, r5
 80007e0:	205a      	movs	r0, #90	; 0x5a
 80007e2:	f7ff ffd5 	bl	8000790 <SendCommand>
	HAL_Delay (100);
 80007e6:	2064      	movs	r0, #100	; 0x64
 80007e8:	f004 fc3c 	bl	8005064 <HAL_Delay>
	SendCommand (UARTW_WIFIPASS, settings.WiFiPass);
 80007ec:	2058      	movs	r0, #88	; 0x58
 80007ee:	f105 0110 	add.w	r1, r5, #16
 80007f2:	f7ff ffcd 	bl	8000790 <SendCommand>
	h->initialised = true;
 80007f6:	2301      	movs	r3, #1
 80007f8:	7063      	strb	r3, [r4, #1]
}
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
 80007fc:	20000a8b 	.word	0x20000a8b

08000800 <NetSendAsync>:
{
	SendCommand (UARTW_DEBUGOFF, "0");
}

void NetSendAsync (NetHandler_t *h, char *ptr)
{
 8000800:	b570      	push	{r4, r5, r6, lr}
	if (h->nMessages < 7)
 8000802:	f890 5630 	ldrb.w	r5, [r0, #1584]	; 0x630
{
 8000806:	4604      	mov	r4, r0
	if (h->nMessages < 7)
 8000808:	2d06      	cmp	r5, #6
{
 800080a:	460e      	mov	r6, r1
	if (h->nMessages < 7)
 800080c:	d80f      	bhi.n	800082e <NetSendAsync+0x2e>
		{
			memcpy (h->messages[h->nMessages], ptr, strlen (ptr));
 800080e:	4608      	mov	r0, r1
 8000810:	f7ff fc9c 	bl	800014c <strlen>
 8000814:	eb04 15c5 	add.w	r5, r4, r5, lsl #7
 8000818:	4602      	mov	r2, r0
 800081a:	4631      	mov	r1, r6
 800081c:	f505 700c 	add.w	r0, r5, #560	; 0x230
 8000820:	f007 f9b2 	bl	8007b88 <memcpy>
			h->nMessages++;
 8000824:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8000828:	3301      	adds	r3, #1
 800082a:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
		}
}
 800082e:	bd70      	pop	{r4, r5, r6, pc}

08000830 <NetStatusCheck>:

}

void NetStatusCheck ()
{
	SendCommand (UARTW_STATUS, "");
 8000830:	2074      	movs	r0, #116	; 0x74
 8000832:	4901      	ldr	r1, [pc, #4]	; (8000838 <NetStatusCheck+0x8>)
 8000834:	f7ff bfac 	b.w	8000790 <SendCommand>
 8000838:	08009b2a 	.word	0x08009b2a

0800083c <NetRoutine>:
{
 800083c:	b538      	push	{r3, r4, r5, lr}
	if (h->TX && HAL_GetTick()-h->lastTransmit>3000)
 800083e:	7943      	ldrb	r3, [r0, #5]
{
 8000840:	4604      	mov	r4, r0
	if (h->TX && HAL_GetTick()-h->lastTransmit>3000)
 8000842:	b14b      	cbz	r3, 8000858 <NetRoutine+0x1c>
 8000844:	f004 fc08 	bl	8005058 <HAL_GetTick>
 8000848:	68e3      	ldr	r3, [r4, #12]
 800084a:	1ac0      	subs	r0, r0, r3
 800084c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000850:	4298      	cmp	r0, r3
		h->TX=false;
 8000852:	bf84      	itt	hi
 8000854:	2300      	movhi	r3, #0
 8000856:	7163      	strbhi	r3, [r4, #5]
	if (HAL_GetTick () - h->lastStatusCheck > 10000)
 8000858:	f004 fbfe 	bl	8005058 <HAL_GetTick>
 800085c:	6923      	ldr	r3, [r4, #16]
 800085e:	1ac0      	subs	r0, r0, r3
 8000860:	f242 7310 	movw	r3, #10000	; 0x2710
 8000864:	4298      	cmp	r0, r3
 8000866:	d904      	bls.n	8000872 <NetRoutine+0x36>
			h->lastStatusCheck = HAL_GetTick ();
 8000868:	f004 fbf6 	bl	8005058 <HAL_GetTick>
 800086c:	6120      	str	r0, [r4, #16]
			NetStatusCheck ();
 800086e:	f7ff ffdf 	bl	8000830 <NetStatusCheck>
	if (!h->plugged)
 8000872:	7823      	ldrb	r3, [r4, #0]
 8000874:	b373      	cbz	r3, 80008d4 <NetRoutine+0x98>
	if (!h->initialised && settings.SSID[0] != 0 && settings.WiFiPass[0] != 0)
 8000876:	7863      	ldrb	r3, [r4, #1]
 8000878:	b943      	cbnz	r3, 800088c <NetRoutine+0x50>
 800087a:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <NetRoutine+0x9c>)
 800087c:	7cda      	ldrb	r2, [r3, #19]
 800087e:	b12a      	cbz	r2, 800088c <NetRoutine+0x50>
 8000880:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000884:	b113      	cbz	r3, 800088c <NetRoutine+0x50>
			NetInitialise (h);
 8000886:	4620      	mov	r0, r4
 8000888:	f7ff ffa6 	bl	80007d8 <NetInitialise>
	if (h->online && !h->TX)
 800088c:	78e3      	ldrb	r3, [r4, #3]
 800088e:	b30b      	cbz	r3, 80008d4 <NetRoutine+0x98>
 8000890:	7965      	ldrb	r5, [r4, #5]
 8000892:	b9fd      	cbnz	r5, 80008d4 <NetRoutine+0x98>
			if (h->nMessages)
 8000894:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 8000898:	b1e3      	cbz	r3, 80008d4 <NetRoutine+0x98>
					h->TX = true;
 800089a:	2301      	movs	r3, #1
 800089c:	7163      	strb	r3, [r4, #5]
					h->lastTransmit=HAL_GetTick();
 800089e:	f004 fbdb 	bl	8005058 <HAL_GetTick>
					SendCommand (UARTW_GETSTRING, h->messages[h->nMessages - 1]);
 80008a2:	f894 1630 	ldrb.w	r1, [r4, #1584]	; 0x630
					h->lastTransmit=HAL_GetTick();
 80008a6:	60e0      	str	r0, [r4, #12]
					SendCommand (UARTW_GETSTRING, h->messages[h->nMessages - 1]);
 80008a8:	eb04 11c1 	add.w	r1, r4, r1, lsl #7
 80008ac:	2046      	movs	r0, #70	; 0x46
 80008ae:	f501 71d8 	add.w	r1, r1, #432	; 0x1b0
 80008b2:	f7ff ff6d 	bl	8000790 <SendCommand>
					memset(h->messages[h->nMessages - 1],0,sizeof(h->messages[h->nMessages - 1]));
 80008b6:	f894 0630 	ldrb.w	r0, [r4, #1584]	; 0x630
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	eb04 10c0 	add.w	r0, r4, r0, lsl #7
 80008c0:	4629      	mov	r1, r5
 80008c2:	f500 70d8 	add.w	r0, r0, #432	; 0x1b0
 80008c6:	f007 f96d 	bl	8007ba4 <memset>
					h->nMessages--;
 80008ca:	f894 3630 	ldrb.w	r3, [r4, #1584]	; 0x630
 80008ce:	3b01      	subs	r3, #1
 80008d0:	f884 3630 	strb.w	r3, [r4, #1584]	; 0x630
}
 80008d4:	bd38      	pop	{r3, r4, r5, pc}
 80008d6:	bf00      	nop
 80008d8:	20000a78 	.word	0x20000a78

080008dc <NetRefreshNetworkList>:
}

void NetRefreshNetworkList (NetHandler_t *h)
{
 80008dc:	b508      	push	{r3, lr}
	h->netRefreshDone = false;
	h->netRefreshInProgress=true;
 80008de:	2301      	movs	r3, #1
	memset (h->nets, 0, sizeof(h->nets));
 80008e0:	2100      	movs	r1, #0
	h->netRefreshInProgress=true;
 80008e2:	80c3      	strh	r3, [r0, #6]
	memset (h->nets, 0, sizeof(h->nets));
 80008e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008e8:	3030      	adds	r0, #48	; 0x30
 80008ea:	f007 f95b 	bl	8007ba4 <memset>
	SendCommand (UARTW_WIFIREFRESH, "");
}
 80008ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SendCommand (UARTW_WIFIREFRESH, "");
 80008f2:	2057      	movs	r0, #87	; 0x57
 80008f4:	4901      	ldr	r1, [pc, #4]	; (80008fc <NetRefreshNetworkList+0x20>)
 80008f6:	f7ff bf4b 	b.w	8000790 <SendCommand>
 80008fa:	bf00      	nop
 80008fc:	08009b2a 	.word	0x08009b2a

08000900 <sendCommand>:
GPIO_TypeDef * rstPort;
uint16_t rstPin;
uint8_t biasRatio=0x88;

void sendCommand (uint8_t com)
{
 8000900:	b537      	push	{r0, r1, r2, r4, r5, lr}
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000902:	4d0f      	ldr	r5, [pc, #60]	; (8000940 <sendCommand+0x40>)
 8000904:	4c0f      	ldr	r4, [pc, #60]	; (8000944 <sendCommand+0x44>)
 8000906:	8829      	ldrh	r1, [r5, #0]
{
 8000908:	f88d 0007 	strb.w	r0, [sp, #7]
	HAL_GPIO_WritePin (csPort, csPin, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	6820      	ldr	r0, [r4, #0]
 8000910:	f005 f9bc 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 0);
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <sendCommand+0x48>)
 8000916:	2200      	movs	r2, #0
 8000918:	8819      	ldrh	r1, [r3, #0]
 800091a:	4b0c      	ldr	r3, [pc, #48]	; (800094c <sendCommand+0x4c>)
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	f005 f9b5 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, &com, 1, 10);
 8000922:	480b      	ldr	r0, [pc, #44]	; (8000950 <sendCommand+0x50>)
 8000924:	230a      	movs	r3, #10
 8000926:	f10d 0107 	add.w	r1, sp, #7
 800092a:	2201      	movs	r2, #1
 800092c:	6800      	ldr	r0, [r0, #0]
 800092e:	f006 fa05 	bl	8006d3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	8829      	ldrh	r1, [r5, #0]
 8000936:	6820      	ldr	r0, [r4, #0]
 8000938:	f005 f9a8 	bl	8005c8c <HAL_GPIO_WritePin>
}
 800093c:	b003      	add	sp, #12
 800093e:	bd30      	pop	{r4, r5, pc}
 8000940:	20000380 	.word	0x20000380
 8000944:	20000990 	.word	0x20000990
 8000948:	2000098a 	.word	0x2000098a
 800094c:	20000384 	.word	0x20000384
 8000950:	20000994 	.word	0x20000994

08000954 <UC1609_SoftwareReset>:

void UC1609_SoftwareReset()
{
 8000954:	b508      	push	{r3, lr}
sendCommand(0b11100010);
 8000956:	20e2      	movs	r0, #226	; 0xe2
 8000958:	f7ff ffd2 	bl	8000900 <sendCommand>
HAL_Delay (20);
}
 800095c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
HAL_Delay (20);
 8000960:	2014      	movs	r0, #20
 8000962:	f004 bb7f 	b.w	8005064 <HAL_Delay>
	...

08000968 <UC1609_HardwareReset>:

void UC1609_HardwareReset()
{
 8000968:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin (rstPort, rstPin, 0);
 800096a:	4d0a      	ldr	r5, [pc, #40]	; (8000994 <UC1609_HardwareReset+0x2c>)
 800096c:	4c0a      	ldr	r4, [pc, #40]	; (8000998 <UC1609_HardwareReset+0x30>)
 800096e:	8829      	ldrh	r1, [r5, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	6820      	ldr	r0, [r4, #0]
 8000974:	f005 f98a 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_Delay (1);
 8000978:	2001      	movs	r0, #1
 800097a:	f004 fb73 	bl	8005064 <HAL_Delay>
	HAL_GPIO_WritePin (rstPort, rstPin, 1);
 800097e:	6820      	ldr	r0, [r4, #0]
 8000980:	8829      	ldrh	r1, [r5, #0]
 8000982:	2201      	movs	r2, #1
 8000984:	f005 f982 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_Delay (5);
}
 8000988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay (5);
 800098c:	2005      	movs	r0, #5
 800098e:	f004 bb69 	b.w	8005064 <HAL_Delay>
 8000992:	bf00      	nop
 8000994:	20000388 	.word	0x20000388
 8000998:	2000098c 	.word	0x2000098c

0800099c <UC1609_Init>:
									uint16_t csGpioPin,
									GPIO_TypeDef* cdGpioPort,
									uint16_t cdGpioPin,
									GPIO_TypeDef* rstGpioPort,
									uint16_t rstGpioPin)
{
 800099c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	hspi = spiHandler;
 800099e:	4f15      	ldr	r7, [pc, #84]	; (80009f4 <UC1609_Init+0x58>)
{
 80009a0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	hspi = spiHandler;
 80009a4:	6038      	str	r0, [r7, #0]
	csPort=csGpioPort;
 80009a6:	4814      	ldr	r0, [pc, #80]	; (80009f8 <UC1609_Init+0x5c>)
{
 80009a8:	9c07      	ldr	r4, [sp, #28]
	csPort=csGpioPort;
 80009aa:	6001      	str	r1, [r0, #0]
	csPin=csGpioPin;
 80009ac:	4913      	ldr	r1, [pc, #76]	; (80009fc <UC1609_Init+0x60>)
{
 80009ae:	f8bd 5020 	ldrh.w	r5, [sp, #32]
	csPin=csGpioPin;
 80009b2:	800a      	strh	r2, [r1, #0]
	cdPort=cdGpioPort;
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <UC1609_Init+0x64>)
 80009b6:	6013      	str	r3, [r2, #0]
	cdPin=cdGpioPin;
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <UC1609_Init+0x68>)
 80009ba:	801e      	strh	r6, [r3, #0]
	rstPort=rstGpioPort;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <UC1609_Init+0x6c>)
 80009be:	601c      	str	r4, [r3, #0]
	rstPin=rstGpioPin;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <UC1609_Init+0x70>)
 80009c2:	801d      	strh	r5, [r3, #0]
if (rstPin==0 || rstPort==0)
 80009c4:	b105      	cbz	r5, 80009c8 <UC1609_Init+0x2c>
 80009c6:	b994      	cbnz	r4, 80009ee <UC1609_Init+0x52>
	{
	UC1609_SoftwareReset();
 80009c8:	f7ff ffc4 	bl	8000954 <UC1609_SoftwareReset>
	}
else
	{
	UC1609_HardwareReset();
	}
	sendCommand (UC1609_CMD_MAPPING | MIRROR_X);
 80009cc:	20c4      	movs	r0, #196	; 0xc4
 80009ce:	f7ff ff97 	bl	8000900 <sendCommand>
	sendCommand (UC1609_CMD_SET_BIAS_RATIO|DEFAULT_BIAS_RATIO);
 80009d2:	20eb      	movs	r0, #235	; 0xeb
 80009d4:	f7ff ff94 	bl	8000900 <sendCommand>
	sendCommand (UC_1609_CMD_SET_BIAS_POTENTIOMETER);
 80009d8:	2081      	movs	r0, #129	; 0x81
 80009da:	f7ff ff91 	bl	8000900 <sendCommand>
	sendCommand (IMHO_BEST_LOOKING_BIAS_RATIO);
 80009de:	2083      	movs	r0, #131	; 0x83
 80009e0:	f7ff ff8e 	bl	8000900 <sendCommand>
	UC1609_Scroll(0);
}
 80009e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
}

void UC1609_Scroll (uint8_t lines)
{
lines%=64;
sendCommand(UC1609_CMD_SCROLL|lines);
 80009e8:	2040      	movs	r0, #64	; 0x40
 80009ea:	f7ff bf89 	b.w	8000900 <sendCommand>
	UC1609_HardwareReset();
 80009ee:	f7ff ffbb 	bl	8000968 <UC1609_HardwareReset>
 80009f2:	e7eb      	b.n	80009cc <UC1609_Init+0x30>
 80009f4:	20000994 	.word	0x20000994
 80009f8:	20000990 	.word	0x20000990
 80009fc:	20000380 	.word	0x20000380
 8000a00:	20000384 	.word	0x20000384
 8000a04:	2000098a 	.word	0x2000098a
 8000a08:	2000098c 	.word	0x2000098c
 8000a0c:	20000388 	.word	0x20000388

08000a10 <UC1609_SetXY>:
{
 8000a10:	b538      	push	{r3, r4, r5, lr}
 8000a12:	4604      	mov	r4, r0
 8000a14:	460d      	mov	r5, r1
	sendCommand (0b00000000 | (x & 0xF));
 8000a16:	f000 000f 	and.w	r0, r0, #15
 8000a1a:	f7ff ff71 	bl	8000900 <sendCommand>
	sendCommand (0b00010000 | ((x >> 4) & 0xF));
 8000a1e:	0920      	lsrs	r0, r4, #4
 8000a20:	f040 0010 	orr.w	r0, r0, #16
 8000a24:	f7ff ff6c 	bl	8000900 <sendCommand>
	sendCommand (0b10110000 | y);
 8000a28:	f045 00b0 	orr.w	r0, r5, #176	; 0xb0
}
 8000a2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sendCommand (0b10110000 | y);
 8000a30:	f7ff bf66 	b.w	8000900 <sendCommand>

08000a34 <UC1609_SetPos>:
	cursor = x * 6 + UC1609_WIDTH * y;
 8000a34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <UC1609_SetPos+0x14>)
 8000a3a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000a3e:	0189      	lsls	r1, r1, #6
 8000a40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8000a44:	8019      	strh	r1, [r3, #0]
}
 8000a46:	4770      	bx	lr
 8000a48:	20000370 	.word	0x20000370

08000a4c <UC1609_UpdateScreen>:
	UC1609_SetXY (0, 0);
 8000a4c:	2100      	movs	r1, #0
{
 8000a4e:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000a50:	4d11      	ldr	r5, [pc, #68]	; (8000a98 <UC1609_UpdateScreen+0x4c>)
 8000a52:	4c12      	ldr	r4, [pc, #72]	; (8000a9c <UC1609_UpdateScreen+0x50>)
	UC1609_SetXY (0, 0);
 8000a54:	4608      	mov	r0, r1
 8000a56:	f7ff ffdb 	bl	8000a10 <UC1609_SetXY>
	HAL_GPIO_WritePin (csPort, csPin, 0);
 8000a5a:	8829      	ldrh	r1, [r5, #0]
 8000a5c:	6820      	ldr	r0, [r4, #0]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f005 f914 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (cdPort, cdPin, 1);
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <UC1609_UpdateScreen+0x54>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	8819      	ldrh	r1, [r3, #0]
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <UC1609_UpdateScreen+0x58>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	f005 f90d 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (hspi, buffer, BUFFER_SIZE, 1000);
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <UC1609_UpdateScreen+0x5c>)
 8000a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a78:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a7c:	490b      	ldr	r1, [pc, #44]	; (8000aac <UC1609_UpdateScreen+0x60>)
 8000a7e:	6800      	ldr	r0, [r0, #0]
 8000a80:	f006 f95c 	bl	8006d3c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (csPort, csPin, 1);
 8000a84:	6820      	ldr	r0, [r4, #0]
 8000a86:	8829      	ldrh	r1, [r5, #0]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f005 f8ff 	bl	8005c8c <HAL_GPIO_WritePin>
}
 8000a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	sendCommand (UC1609_CMD_ENABLE);
 8000a92:	20af      	movs	r0, #175	; 0xaf
 8000a94:	f7ff bf34 	b.w	8000900 <sendCommand>
 8000a98:	20000380 	.word	0x20000380
 8000a9c:	20000990 	.word	0x20000990
 8000aa0:	2000098a 	.word	0x2000098a
 8000aa4:	20000384 	.word	0x20000384
 8000aa8:	20000994 	.word	0x20000994
 8000aac:	2000038a 	.word	0x2000038a

08000ab0 <UC1609_Clean>:
{
 8000ab0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
		buffer[i] = 0;
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <UC1609_Clean+0x18>)
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	f802 1b01 	strb.w	r1, [r2], #1
	for (uint16_t i = 0; i < BUFFER_SIZE; ++i)
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f9      	bne.n	8000ab8 <UC1609_Clean+0x8>
}
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	2000038a 	.word	0x2000038a

08000acc <UC1609_PutRuC>:
{
 8000acc:	b570      	push	{r4, r5, r6, lr}
	if (*c == 0xD0)
 8000ace:	7803      	ldrb	r3, [r0, #0]
 8000ad0:	2bd0      	cmp	r3, #208	; 0xd0
 8000ad2:	d111      	bne.n	8000af8 <UC1609_PutRuC+0x2c>
		pos = *(c + 1) - 144 + 101;
 8000ad4:	7843      	ldrb	r3, [r0, #1]
 8000ad6:	3b2b      	subs	r3, #43	; 0x2b
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000ad8:	490a      	ldr	r1, [pc, #40]	; (8000b04 <UC1609_PutRuC+0x38>)
 8000ada:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <UC1609_PutRuC+0x3c>)
		pos = *(c + 1) - 128 + 149;
 8000adc:	b2db      	uxtb	r3, r3
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000ade:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ae2:	880a      	ldrh	r2, [r1, #0]
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <UC1609_PutRuC+0x40>)
 8000ae6:	191e      	adds	r6, r3, r4
 8000ae8:	58e3      	ldr	r3, [r4, r3]
 8000aea:	1815      	adds	r5, r2, r0
 8000aec:	5013      	str	r3, [r2, r0]
 8000aee:	7933      	ldrb	r3, [r6, #4]
	cursor += 5;
 8000af0:	3205      	adds	r2, #5
	memcpy (buffer + cursor, &myFont[pos][0], 5);
 8000af2:	712b      	strb	r3, [r5, #4]
	cursor += 5;
 8000af4:	800a      	strh	r2, [r1, #0]
}
 8000af6:	bd70      	pop	{r4, r5, r6, pc}
	else if (*c == 0xD1)
 8000af8:	2bd1      	cmp	r3, #209	; 0xd1
 8000afa:	d1fc      	bne.n	8000af6 <UC1609_PutRuC+0x2a>
		pos = *(c + 1) - 128 + 149;
 8000afc:	7843      	ldrb	r3, [r0, #1]
 8000afe:	3315      	adds	r3, #21
 8000b00:	e7ea      	b.n	8000ad8 <UC1609_PutRuC+0xc>
 8000b02:	bf00      	nop
 8000b04:	20000370 	.word	0x20000370
 8000b08:	080097a8 	.word	0x080097a8
 8000b0c:	2000038a 	.word	0x2000038a

08000b10 <UC1609_Put>:
{
 8000b10:	b570      	push	{r4, r5, r6, lr}
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <UC1609_Put+0x24>)
 8000b14:	4c08      	ldr	r4, [pc, #32]	; (8000b38 <UC1609_Put+0x28>)
 8000b16:	3820      	subs	r0, #32
 8000b18:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000b1c:	8813      	ldrh	r3, [r2, #0]
 8000b1e:	4907      	ldr	r1, [pc, #28]	; (8000b3c <UC1609_Put+0x2c>)
 8000b20:	1906      	adds	r6, r0, r4
 8000b22:	5820      	ldr	r0, [r4, r0]
 8000b24:	185d      	adds	r5, r3, r1
 8000b26:	5058      	str	r0, [r3, r1]
 8000b28:	7931      	ldrb	r1, [r6, #4]
	cursor += 5;
 8000b2a:	3305      	adds	r3, #5
	memcpy (buffer + cursor, &myFont[c - 0x20][0], 5);
 8000b2c:	7129      	strb	r1, [r5, #4]
	cursor += 5;
 8000b2e:	8013      	strh	r3, [r2, #0]
}
 8000b30:	bd70      	pop	{r4, r5, r6, pc}
 8000b32:	bf00      	nop
 8000b34:	20000370 	.word	0x20000370
 8000b38:	080097a8 	.word	0x080097a8
 8000b3c:	2000038a 	.word	0x2000038a

08000b40 <UC1609_PutString>:
{
 8000b40:	b570      	push	{r4, r5, r6, lr}
 8000b42:	4604      	mov	r4, r0
			cursor %= BUFFER_SIZE;
 8000b44:	f44f 66c0 	mov.w	r6, #1536	; 0x600
 8000b48:	4d0d      	ldr	r5, [pc, #52]	; (8000b80 <UC1609_PutString+0x40>)
	while (*c)
 8000b4a:	7823      	ldrb	r3, [r4, #0]
 8000b4c:	b903      	cbnz	r3, 8000b50 <UC1609_PutString+0x10>
}
 8000b4e:	bd70      	pop	{r4, r5, r6, pc}
			cursor %= BUFFER_SIZE;
 8000b50:	882a      	ldrh	r2, [r5, #0]
 8000b52:	fbb2 f3f6 	udiv	r3, r2, r6
 8000b56:	fb06 2313 	mls	r3, r6, r3, r2
 8000b5a:	802b      	strh	r3, [r5, #0]
			if (*c == 0xD0 || *c == 0xD1)
 8000b5c:	7820      	ldrb	r0, [r4, #0]
 8000b5e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d807      	bhi.n	8000b78 <UC1609_PutString+0x38>
					UC1609_PutRuC (c);
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f7ff ffaf 	bl	8000acc <UC1609_PutRuC>
					c += 2;
 8000b6e:	3402      	adds	r4, #2
			cursor++;
 8000b70:	882b      	ldrh	r3, [r5, #0]
 8000b72:	3301      	adds	r3, #1
 8000b74:	802b      	strh	r3, [r5, #0]
 8000b76:	e7e8      	b.n	8000b4a <UC1609_PutString+0xa>
				UC1609_Put (*c++);
 8000b78:	3401      	adds	r4, #1
 8000b7a:	f7ff ffc9 	bl	8000b10 <UC1609_Put>
 8000b7e:	e7f7      	b.n	8000b70 <UC1609_PutString+0x30>
 8000b80:	20000370 	.word	0x20000370

08000b84 <pow10_>:
	while(pos<255 && str[pos]!=sym)
		pos++;
	return pos;
}
uint32_t pow10_(uint8_t value)
{
 8000b84:	4603      	mov	r3, r0
 8000b86:	220a      	movs	r2, #10
 8000b88:	2001      	movs	r0, #1
  if (value>0)
 8000b8a:	b11b      	cbz	r3, 8000b94 <pow10_+0x10>
  	return 10*pow10_(value-1);
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	4350      	muls	r0, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	e7fa      	b.n	8000b8a <pow10_+0x6>
  else
  	return 1;
}
 8000b94:	4770      	bx	lr
	...

08000b98 <floatToString2>:
{
	return 1<<(value*4);
}

char* floatToString2(float arg)
{
 8000b98:	b538      	push	{r3, r4, r5, lr}
static char resString[32];
int32_t leftPart = (int32_t) arg;
int16_t rightPart = abs((int16_t)(arg*100))%100;
 8000b9a:	490e      	ldr	r1, [pc, #56]	; (8000bd4 <floatToString2+0x3c>)
{
 8000b9c:	4605      	mov	r5, r0
int16_t rightPart = abs((int16_t)(arg*100))%100;
 8000b9e:	f7ff fbeb 	bl	8000378 <__aeabi_fmul>
 8000ba2:	f7ff fdaf 	bl	8000704 <__aeabi_f2iz>
 8000ba6:	2364      	movs	r3, #100	; 0x64
 8000ba8:	b202      	sxth	r2, r0
 8000baa:	2a00      	cmp	r2, #0
 8000bac:	bfb8      	it	lt
 8000bae:	4252      	neglt	r2, r2
 8000bb0:	b292      	uxth	r2, r2
 8000bb2:	fbb2 f4f3 	udiv	r4, r2, r3
int32_t leftPart = (int32_t) arg;
 8000bb6:	4628      	mov	r0, r5
int16_t rightPart = abs((int16_t)(arg*100))%100;
 8000bb8:	fb03 2414 	mls	r4, r3, r4, r2
int32_t leftPart = (int32_t) arg;
 8000bbc:	f7ff fda2 	bl	8000704 <__aeabi_f2iz>
sprintf(resString,"%li.%02d",leftPart,rightPart);
 8000bc0:	4d05      	ldr	r5, [pc, #20]	; (8000bd8 <floatToString2+0x40>)
int32_t leftPart = (int32_t) arg;
 8000bc2:	4602      	mov	r2, r0
sprintf(resString,"%li.%02d",leftPart,rightPart);
 8000bc4:	4623      	mov	r3, r4
 8000bc6:	4628      	mov	r0, r5
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <floatToString2+0x44>)
 8000bca:	f007 f881 	bl	8007cd0 <siprintf>
return resString;
}
 8000bce:	4628      	mov	r0, r5
 8000bd0:	bd38      	pop	{r3, r4, r5, pc}
 8000bd2:	bf00      	nop
 8000bd4:	42c80000 	.word	0x42c80000
 8000bd8:	200000dc 	.word	0x200000dc
 8000bdc:	08008f16 	.word	0x08008f16

08000be0 <floatToString1>:

char* floatToString1(float arg)
{
 8000be0:	b538      	push	{r3, r4, r5, lr}
static char resString[32];
int32_t leftPart = (int32_t) arg;
int16_t rightPart = abs((int16_t)(arg*10))%10;
 8000be2:	490e      	ldr	r1, [pc, #56]	; (8000c1c <floatToString1+0x3c>)
{
 8000be4:	4605      	mov	r5, r0
int16_t rightPart = abs((int16_t)(arg*10))%10;
 8000be6:	f7ff fbc7 	bl	8000378 <__aeabi_fmul>
 8000bea:	f7ff fd8b 	bl	8000704 <__aeabi_f2iz>
 8000bee:	230a      	movs	r3, #10
 8000bf0:	b202      	sxth	r2, r0
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	bfb8      	it	lt
 8000bf6:	4252      	neglt	r2, r2
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	fbb2 f4f3 	udiv	r4, r2, r3
int32_t leftPart = (int32_t) arg;
 8000bfe:	4628      	mov	r0, r5
int16_t rightPart = abs((int16_t)(arg*10))%10;
 8000c00:	fb03 2414 	mls	r4, r3, r4, r2
int32_t leftPart = (int32_t) arg;
 8000c04:	f7ff fd7e 	bl	8000704 <__aeabi_f2iz>
sprintf(resString,"%li.%d",leftPart,rightPart);
 8000c08:	4d05      	ldr	r5, [pc, #20]	; (8000c20 <floatToString1+0x40>)
int32_t leftPart = (int32_t) arg;
 8000c0a:	4602      	mov	r2, r0
sprintf(resString,"%li.%d",leftPart,rightPart);
 8000c0c:	4623      	mov	r3, r4
 8000c0e:	4628      	mov	r0, r5
 8000c10:	4904      	ldr	r1, [pc, #16]	; (8000c24 <floatToString1+0x44>)
 8000c12:	f007 f85d 	bl	8007cd0 <siprintf>
return resString;
}
 8000c16:	4628      	mov	r0, r5
 8000c18:	bd38      	pop	{r3, r4, r5, pc}
 8000c1a:	bf00      	nop
 8000c1c:	41200000 	.word	0x41200000
 8000c20:	200000fc 	.word	0x200000fc
 8000c24:	08008f1f 	.word	0x08008f1f

08000c28 <DecToInt>:

uint32_t DecToInt(uint8_t * string, uint8_t len)
{
 8000c28:	b570      	push	{r4, r5, r6, lr}
	uint32_t value=0;
 8000c2a:	2400      	movs	r4, #0
 8000c2c:	1e45      	subs	r5, r0, #1
	uint8_t i=0;
	for(i=0;i<len;i++)
 8000c2e:	b189      	cbz	r1, 8000c54 <DecToInt+0x2c>
	if (string[i]>='0' && string[i]<='9')
 8000c30:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000c34:	3901      	subs	r1, #1
 8000c36:	3e30      	subs	r6, #48	; 0x30
 8000c38:	b2f3      	uxtb	r3, r6
 8000c3a:	2b09      	cmp	r3, #9
 8000c3c:	b2c9      	uxtb	r1, r1
 8000c3e:	d805      	bhi.n	8000c4c <DecToInt+0x24>
	value+=(string[i]-'0')*pow10_(len-i-1);
 8000c40:	4608      	mov	r0, r1
 8000c42:	f7ff ff9f 	bl	8000b84 <pow10_>
 8000c46:	fb00 4406 	mla	r4, r0, r6, r4
	for(i=0;i<len;i++)
 8000c4a:	e7f0      	b.n	8000c2e <DecToInt+0x6>
	else
	{
		Error_Handler();
 8000c4c:	f003 f82c 	bl	8003ca8 <Error_Handler>
		return 0xFFFFFFFF;
 8000c50:	f04f 34ff 	mov.w	r4, #4294967295
	}
	return value;
}
 8000c54:	4620      	mov	r0, r4
 8000c56:	bd70      	pop	{r4, r5, r6, pc}

08000c58 <HexToInt>:
{
	uint32_t value=0;
	uint32_t tmp=0;
	uint8_t i=0;

	for(i=0;i<len;i++)
 8000c58:	1e42      	subs	r2, r0, #1
	uint32_t value=0;
 8000c5a:	2000      	movs	r0, #0
{
 8000c5c:	b510      	push	{r4, lr}
 8000c5e:	3901      	subs	r1, #1
 8000c60:	b2c9      	uxtb	r1, r1
	for(i=0;i<len;i++)
 8000c62:	29ff      	cmp	r1, #255	; 0xff
 8000c64:	d047      	beq.n	8000cf6 <HexToInt+0x9e>
	{
		switch (string[i])
 8000c66:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8000c6a:	3b30      	subs	r3, #48	; 0x30
 8000c6c:	2b36      	cmp	r3, #54	; 0x36
 8000c6e:	d83e      	bhi.n	8000cee <HexToInt+0x96>
 8000c70:	e8df f003 	tbb	[pc, r3]
 8000c74:	23441c42 	.word	0x23441c42
 8000c78:	2b292725 	.word	0x2b292725
 8000c7c:	3d3d2f2d 	.word	0x3d3d2f2d
 8000c80:	3d3d3d3d 	.word	0x3d3d3d3d
 8000c84:	3533313d 	.word	0x3533313d
 8000c88:	3d3b3937 	.word	0x3d3b3937
 8000c8c:	3d3d3d3d 	.word	0x3d3d3d3d
 8000c90:	3d3d3d3d 	.word	0x3d3d3d3d
 8000c94:	3d3d3d3d 	.word	0x3d3d3d3d
 8000c98:	3d3d3d3d 	.word	0x3d3d3d3d
 8000c9c:	3d3d3d3d 	.word	0x3d3d3d3d
 8000ca0:	3d3d3d3d 	.word	0x3d3d3d3d
 8000ca4:	3533313d 	.word	0x3533313d
 8000ca8:	3937      	.short	0x3937
 8000caa:	3b          	.byte	0x3b
 8000cab:	00          	.byte	0x00
 8000cac:	2301      	movs	r3, #1
	return 1<<(value*4);
 8000cae:	008c      	lsls	r4, r1, #2
		case 'f': tmp=15; break;
		default:
			Error_Handler();
			return 0xFFFFFFFF;
		}
		value+=tmp*pow16(len-i-1);
 8000cb0:	40a3      	lsls	r3, r4
 8000cb2:	3901      	subs	r1, #1
 8000cb4:	4418      	add	r0, r3
	for(i=0;i<len;i++)
 8000cb6:	b2c9      	uxtb	r1, r1
 8000cb8:	e7d3      	b.n	8000c62 <HexToInt+0xa>
		case '3': tmp=3; break;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	e7f7      	b.n	8000cae <HexToInt+0x56>
		case '4': tmp=4; break;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	e7f5      	b.n	8000cae <HexToInt+0x56>
		case '5': tmp=5; break;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	e7f3      	b.n	8000cae <HexToInt+0x56>
		case '6': tmp=6; break;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	e7f1      	b.n	8000cae <HexToInt+0x56>
		case '7': tmp=7; break;
 8000cca:	2307      	movs	r3, #7
 8000ccc:	e7ef      	b.n	8000cae <HexToInt+0x56>
		case '8': tmp=8; break;
 8000cce:	2308      	movs	r3, #8
 8000cd0:	e7ed      	b.n	8000cae <HexToInt+0x56>
		case '9': tmp=9; break;
 8000cd2:	2309      	movs	r3, #9
 8000cd4:	e7eb      	b.n	8000cae <HexToInt+0x56>
		case 'a': tmp=10; break;
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	e7e9      	b.n	8000cae <HexToInt+0x56>
		case 'b': tmp=11; break;
 8000cda:	230b      	movs	r3, #11
 8000cdc:	e7e7      	b.n	8000cae <HexToInt+0x56>
		case 'c': tmp=12; break;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	e7e5      	b.n	8000cae <HexToInt+0x56>
		case 'd': tmp=13; break;
 8000ce2:	230d      	movs	r3, #13
 8000ce4:	e7e3      	b.n	8000cae <HexToInt+0x56>
		case 'e': tmp=14; break;
 8000ce6:	230e      	movs	r3, #14
 8000ce8:	e7e1      	b.n	8000cae <HexToInt+0x56>
		case 'f': tmp=15; break;
 8000cea:	230f      	movs	r3, #15
 8000cec:	e7df      	b.n	8000cae <HexToInt+0x56>
			Error_Handler();
 8000cee:	f002 ffdb 	bl	8003ca8 <Error_Handler>
			return 0xFFFFFFFF;
 8000cf2:	f04f 30ff 	mov.w	r0, #4294967295
	}
	return value;
}
 8000cf6:	bd10      	pop	{r4, pc}
		case '0': tmp=0; break;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	e7d8      	b.n	8000cae <HexToInt+0x56>
		case '2': tmp=2; break;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e7d6      	b.n	8000cae <HexToInt+0x56>

08000d00 <delayMicro>:
	    {
	      tick++;
	    }
	    tick = 0;
	  }
}
 8000d00:	4770      	bx	lr

08000d02 <writeToEeprom>:
* @brief Writes data array to external EEPROM
* @param None
* @retval None
*/
void writeToEeprom(uint8_t to, uint8_t* from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
 8000d02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d06:	4606      	mov	r6, r0
 8000d08:	460f      	mov	r7, r1
 8000d0a:	4614      	mov	r4, r2
 8000d0c:	4698      	mov	r8, r3
	uint8_t bytesLeft=size;
	uint8_t part;
	uint8_t shift=0;
 8000d0e:	2500      	movs	r5, #0
	while(bytesLeft)
	{
		part=(bytesLeft>16)?16:bytesLeft;
		HAL_I2C_Mem_Write(hi2c, 0xA0, to+shift, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000d10:	f04f 0932 	mov.w	r9, #50	; 0x32
	while(bytesLeft)
 8000d14:	b914      	cbnz	r4, 8000d1c <writeToEeprom+0x1a>
		bytesLeft-=part;
		shift+=part;
		HAL_Delay(5);
	}
}
 8000d16:	b004      	add	sp, #16
 8000d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		part=(bytesLeft>16)?16:bytesLeft;
 8000d1c:	2c10      	cmp	r4, #16
 8000d1e:	46a2      	mov	sl, r4
 8000d20:	bf28      	it	cs
 8000d22:	f04f 0a10 	movcs.w	sl, #16
		HAL_I2C_Mem_Write(hi2c, 0xA0, to+shift, I2C_MEMADD_SIZE_8BIT, from+shift, part, 50);
 8000d26:	197b      	adds	r3, r7, r5
 8000d28:	1972      	adds	r2, r6, r5
 8000d2a:	9300      	str	r3, [sp, #0]
 8000d2c:	21a0      	movs	r1, #160	; 0xa0
 8000d2e:	2301      	movs	r3, #1
 8000d30:	4640      	mov	r0, r8
 8000d32:	e9cd a901 	strd	sl, r9, [sp, #4]
 8000d36:	f005 fa3f 	bl	80061b8 <HAL_I2C_Mem_Write>
		bytesLeft-=part;
 8000d3a:	eba4 040a 	sub.w	r4, r4, sl
		shift+=part;
 8000d3e:	eb05 020a 	add.w	r2, r5, sl
		HAL_Delay(5);
 8000d42:	2005      	movs	r0, #5
		bytesLeft-=part;
 8000d44:	b2e4      	uxtb	r4, r4
		shift+=part;
 8000d46:	b2d5      	uxtb	r5, r2
		HAL_Delay(5);
 8000d48:	f004 f98c 	bl	8005064 <HAL_Delay>
 8000d4c:	e7e2      	b.n	8000d14 <writeToEeprom+0x12>

08000d4e <readFromEeprom>:
* @param None
* @retval None
*/

void readFromEeprom(uint8_t* to, uint8_t from, uint8_t size, I2C_HandleTypeDef* hi2c)
{
 8000d4e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d52:	4606      	mov	r6, r0
 8000d54:	460f      	mov	r7, r1
 8000d56:	4614      	mov	r4, r2
 8000d58:	4698      	mov	r8, r3
	uint8_t bytesLeft=size;
	uint8_t part;
	uint8_t shift=0;
 8000d5a:	2500      	movs	r5, #0
	while(bytesLeft)
	{
		part=(bytesLeft>16)?16:bytesLeft;
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000d5c:	f04f 0932 	mov.w	r9, #50	; 0x32
	while(bytesLeft)
 8000d60:	b914      	cbnz	r4, 8000d68 <readFromEeprom+0x1a>
		bytesLeft-=part;
		shift+=part;
		HAL_Delay(5);
	}
}
 8000d62:	b004      	add	sp, #16
 8000d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		part=(bytesLeft>16)?16:bytesLeft;
 8000d68:	2c10      	cmp	r4, #16
 8000d6a:	46a2      	mov	sl, r4
 8000d6c:	bf28      	it	cs
 8000d6e:	f04f 0a10 	movcs.w	sl, #16
		HAL_I2C_Mem_Read(hi2c, 0xA0, from+shift, I2C_MEMADD_SIZE_8BIT, to+shift, part,50);
 8000d72:	1973      	adds	r3, r6, r5
 8000d74:	197a      	adds	r2, r7, r5
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	21a0      	movs	r1, #160	; 0xa0
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e9cd a901 	strd	sl, r9, [sp, #4]
 8000d82:	f005 faa9 	bl	80062d8 <HAL_I2C_Mem_Read>
		bytesLeft-=part;
 8000d86:	eba4 040a 	sub.w	r4, r4, sl
		shift+=part;
 8000d8a:	eb05 020a 	add.w	r2, r5, sl
		HAL_Delay(5);
 8000d8e:	2005      	movs	r0, #5
		bytesLeft-=part;
 8000d90:	b2e4      	uxtb	r4, r4
		shift+=part;
 8000d92:	b2d5      	uxtb	r5, r2
		HAL_Delay(5);
 8000d94:	f004 f966 	bl	8005064 <HAL_Delay>
 8000d98:	e7e2      	b.n	8000d60 <readFromEeprom+0x12>
	...

08000d9c <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write (int fd, char *ptr, int len)
{
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	4614      	mov	r4, r2
	HAL_UART_Transmit (&huart1, (uint8_t*) ptr, len, 1000);
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	b292      	uxth	r2, r2
 8000da6:	4802      	ldr	r0, [pc, #8]	; (8000db0 <_write+0x14>)
 8000da8:	f006 fce0 	bl	800776c <HAL_UART_Transmit>
	return len;
}
 8000dac:	4620      	mov	r0, r4
 8000dae:	bd10      	pop	{r4, pc}
 8000db0:	20000c30 	.word	0x20000c30

08000db4 <eraseNodeData>:
	return ch;
}

void eraseNodeData ()
{
	for (int i = 0; i < MAX_NODES; ++i)
 8000db4:	2200      	movs	r2, #0
 8000db6:	4906      	ldr	r1, [pc, #24]	; (8000dd0 <eraseNodeData+0x1c>)
		{
			nodeData[i].disarmRequest = 0;
			nodeData[i].disarmed = 0;
			nodeData[i].masked = 0;
 8000db8:	5c53      	ldrb	r3, [r2, r1]
 8000dba:	f023 030f 	bic.w	r3, r3, #15
 8000dbe:	5453      	strb	r3, [r2, r1]
	for (int i = 0; i < MAX_NODES; ++i)
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	2a08      	cmp	r2, #8
 8000dc4:	d1f8      	bne.n	8000db8 <eraseNodeData+0x4>
		}
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	4b02      	ldr	r3, [pc, #8]	; (8000dd4 <eraseNodeData+0x20>)
 8000dca:	4901      	ldr	r1, [pc, #4]	; (8000dd0 <eraseNodeData+0x1c>)
 8000dcc:	f7ff bf99 	b.w	8000d02 <writeToEeprom>
 8000dd0:	20000de0 	.word	0x20000de0
 8000dd4:	20000ae0 	.word	0x20000ae0

08000dd8 <saveNodeData>:
}

void saveNodeData ()
{
	for (int i = 0; i < MAX_NODES; ++i)
 8000dd8:	2200      	movs	r2, #0
{
 8000dda:	b410      	push	{r4}
 8000ddc:	490e      	ldr	r1, [pc, #56]	; (8000e18 <saveNodeData+0x40>)
 8000dde:	4c0f      	ldr	r4, [pc, #60]	; (8000e1c <saveNodeData+0x44>)
		{
			nodeData[i].disarmRequest = nodes[i].disarmRequest;
			nodeData[i].disarmed = nodes[i].disarmed;
			nodeData[i].masked = nodes[i].masked;
 8000de0:	7b4b      	ldrb	r3, [r1, #13]
 8000de2:	7b08      	ldrb	r0, [r1, #12]
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	f000 0003 	and.w	r0, r0, #3
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	4303      	orrs	r3, r0
 8000df0:	7b88      	ldrb	r0, [r1, #14]
 8000df2:	3120      	adds	r1, #32
 8000df4:	00c0      	lsls	r0, r0, #3
 8000df6:	f000 0008 	and.w	r0, r0, #8
 8000dfa:	4303      	orrs	r3, r0
 8000dfc:	5d10      	ldrb	r0, [r2, r4]
 8000dfe:	f020 000f 	bic.w	r0, r0, #15
 8000e02:	4303      	orrs	r3, r0
 8000e04:	5513      	strb	r3, [r2, r4]
	for (int i = 0; i < MAX_NODES; ++i)
 8000e06:	3201      	adds	r2, #1
 8000e08:	2a08      	cmp	r2, #8
 8000e0a:	d1e9      	bne.n	8000de0 <saveNodeData+0x8>
		}
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <saveNodeData+0x48>)
 8000e10:	4902      	ldr	r1, [pc, #8]	; (8000e1c <saveNodeData+0x44>)
}
 8000e12:	bc10      	pop	{r4}
	writeToEeprom (0, (uint8_t*) &nodeData, sizeof(nodeData), &hi2c1);
 8000e14:	f7ff bf75 	b.w	8000d02 <writeToEeprom>
 8000e18:	20000ce0 	.word	0x20000ce0
 8000e1c:	20000de0 	.word	0x20000de0
 8000e20:	20000ae0 	.word	0x20000ae0

08000e24 <loadNodeData>:

void loadNodeData ()
{
	readFromEeprom ((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 8000e24:	2100      	movs	r1, #0
{
 8000e26:	b510      	push	{r4, lr}
	readFromEeprom ((uint8_t*) &nodeData, 0, sizeof(nodeData), &hi2c1);
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <loadNodeData+0x34>)
 8000e2a:	2208      	movs	r2, #8
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <loadNodeData+0x38>)
 8000e2e:	f7ff ff8e 	bl	8000d4e <readFromEeprom>
	for (int i = 0; i < MAX_NODES; ++i)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <loadNodeData+0x3c>)
		{
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8000e36:	4c09      	ldr	r4, [pc, #36]	; (8000e5c <loadNodeData+0x38>)
 8000e38:	5c62      	ldrb	r2, [r4, r1]
	for (int i = 0; i < MAX_NODES; ++i)
 8000e3a:	3101      	adds	r1, #1
			nodes[i].disarmRequest = nodeData[i].disarmRequest;
 8000e3c:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 8000e40:	7398      	strb	r0, [r3, #14]
	for (int i = 0; i < MAX_NODES; ++i)
 8000e42:	2908      	cmp	r1, #8
			nodes[i].disarmed = nodeData[i].disarmed;
 8000e44:	f3c2 0080 	ubfx	r0, r2, #2, #1
			nodes[i].masked = nodeData[i].masked;
 8000e48:	f3c2 0201 	ubfx	r2, r2, #0, #2
			nodes[i].disarmed = nodeData[i].disarmed;
 8000e4c:	7358      	strb	r0, [r3, #13]
			nodes[i].masked = nodeData[i].masked;
 8000e4e:	731a      	strb	r2, [r3, #12]
	for (int i = 0; i < MAX_NODES; ++i)
 8000e50:	f103 0320 	add.w	r3, r3, #32
 8000e54:	d1f0      	bne.n	8000e38 <loadNodeData+0x14>
		}

}
 8000e56:	bd10      	pop	{r4, pc}
 8000e58:	20000ae0 	.word	0x20000ae0
 8000e5c:	20000de0 	.word	0x20000de0
 8000e60:	20000ce0 	.word	0x20000ce0

08000e64 <HAL_UART_RxCpltCallback>:
 * @brief Callback for UART interrupt
 * @param  *huart - uart handler
 * @retval None
 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef *huart)
{
 8000e64:	b508      	push	{r3, lr}
	HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	4905      	ldr	r1, [pc, #20]	; (8000e80 <HAL_UART_RxCpltCallback+0x1c>)
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <HAL_UART_RxCpltCallback+0x20>)
 8000e6c:	f006 fe49 	bl	8007b02 <HAL_UART_Receive_IT>
	lastUartConnect = HAL_GetTick ();
 8000e70:	f004 f8f2 	bl	8005058 <HAL_GetTick>
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_UART_RxCpltCallback+0x24>)
 8000e76:	6018      	str	r0, [r3, #0]
	readByte ();
}
 8000e78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	readByte ();
 8000e7c:	f003 bd1e 	b.w	80048bc <readByte>
 8000e80:	20000b98 	.word	0x20000b98
 8000e84:	20000c30 	.word	0x20000c30
 8000e88:	200015c0 	.word	0x200015c0

08000e8c <defaultSettings>:
 * @brief sets settings to default values
 * @param None
 * @retval None
 */
void defaultSettings ()
{
 8000e8c:	b510      	push	{r4, lr}
	settings.power = SX127X_POWER_20DBM;
	settings.sf = SX127X_LORA_SF_12;
	settings.preamble = 5;
	settings.superWarningDelay = SUPER_WARNING_DELAY;
	settings.syncWord = 0x1;
	settings.warningDelay = WARNING_DELAY;
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <defaultSettings+0x4c>)
	settings.realFrequency = DEF_FREQUENCY;
 8000e90:	4c12      	ldr	r4, [pc, #72]	; (8000edc <defaultSettings+0x50>)
	settings.warningDelay = WARNING_DELAY;
 8000e92:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <defaultSettings+0x54>)
	settings.realFrequency = DEF_FREQUENCY;
	settings.baseID = 1;
	sprintf (settings.SSID, "EXEcutor");
 8000e94:	4913      	ldr	r1, [pc, #76]	; (8000ee4 <defaultSettings+0x58>)
	settings.warningDelay = WARNING_DELAY;
 8000e96:	e9c4 2300 	strd	r2, r3, [r4]
	settings.superWarningDelay = SUPER_WARNING_DELAY;
 8000e9a:	f503 2312 	add.w	r3, r3, #598016	; 0x92000
 8000e9e:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8000ea2:	60a3      	str	r3, [r4, #8]
	settings.preamble = 5;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <defaultSettings+0x5c>)
	sprintf (settings.SSID, "EXEcutor");
 8000ea6:	f104 0013 	add.w	r0, r4, #19
	settings.preamble = 5;
 8000eaa:	60e3      	str	r3, [r4, #12]
	settings.cr = SX127X_CR_4_8;
 8000eac:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000eb0:	8223      	strh	r3, [r4, #16]
	settings.power = SX127X_POWER_20DBM;
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	74a3      	strb	r3, [r4, #18]
	settings.baseID = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	6663      	str	r3, [r4, #100]	; 0x64
	sprintf (settings.SSID, "EXEcutor");
 8000eba:	f006 ff29 	bl	8007d10 <strcpy>
	sprintf (settings.WiFiPass, "executor");
 8000ebe:	490b      	ldr	r1, [pc, #44]	; (8000eec <defaultSettings+0x60>)
 8000ec0:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8000ec4:	f006 ff24 	bl	8007d10 <strcpy>
	sprintf (settings.ServerPass, "12345");
 8000ec8:	f104 0033 	add.w	r0, r4, #51	; 0x33
 8000ecc:	4908      	ldr	r1, [pc, #32]	; (8000ef0 <defaultSettings+0x64>)

}
 8000ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	sprintf (settings.ServerPass, "12345");
 8000ed2:	f006 bf1d 	b.w	8007d10 <strcpy>
 8000ed6:	bf00      	nop
 8000ed8:	33c8d600 	.word	0x33c8d600
 8000edc:	20000a78 	.word	0x20000a78
 8000ee0:	0009eb10 	.word	0x0009eb10
 8000ee4:	08008f26 	.word	0x08008f26
 8000ee8:	070c0005 	.word	0x070c0005
 8000eec:	08008f2f 	.word	0x08008f2f
 8000ef0:	08008f38 	.word	0x08008f38

08000ef4 <clearStrings>:
 * @param None
 * @retval None
 */
void clearStrings ()
{
	memset (string, 0, sizeof(string));
 8000ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4801      	ldr	r0, [pc, #4]	; (8000f00 <clearStrings+0xc>)
 8000efc:	f006 be52 	b.w	8007ba4 <memset>
 8000f00:	20000168 	.word	0x20000168

08000f04 <setCursor>:
}

void setCursor (char *string, int8_t pos)
{
	for (int i = 0; i < pos; i++)
 8000f04:	2300      	movs	r3, #0
		string[i] = ' ';
 8000f06:	2220      	movs	r2, #32
	for (int i = 0; i < pos; i++)
 8000f08:	4299      	cmp	r1, r3
 8000f0a:	dc02      	bgt.n	8000f12 <setCursor+0xe>
	string[pos] = '^';
 8000f0c:	235e      	movs	r3, #94	; 0x5e
 8000f0e:	5443      	strb	r3, [r0, r1]
}
 8000f10:	4770      	bx	lr
		string[i] = ' ';
 8000f12:	54c2      	strb	r2, [r0, r3]
	for (int i = 0; i < pos; i++)
 8000f14:	3301      	adds	r3, #1
 8000f16:	e7f7      	b.n	8000f08 <setCursor+0x4>

08000f18 <updateLcd>:
 * @brief Writes string[0]..string[3] to all screens
 * @param None
 * @retval None
 */
void updateLcd ()
{
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	4d13      	ldr	r5, [pc, #76]	; (8000f68 <updateLcd+0x50>)
	ssd1306_Clean ();
 8000f1c:	f002 ff90 	bl	8003e40 <ssd1306_Clean>
 8000f20:	462e      	mov	r6, r5
	for (int i = 0; i < 8; i++)
 8000f22:	2400      	movs	r4, #0
		{
			ssd1306_GotoXY (0, i);
 8000f24:	4621      	mov	r1, r4
 8000f26:	2000      	movs	r0, #0
 8000f28:	f002 ff2e 	bl	8003d88 <ssd1306_GotoXY>
	for (int i = 0; i < 8; i++)
 8000f2c:	3401      	adds	r4, #1
			ssd1306_PutString (string[i]);
 8000f2e:	4630      	mov	r0, r6
 8000f30:	f002 ff6c 	bl	8003e0c <ssd1306_PutString>
	for (int i = 0; i < 8; i++)
 8000f34:	2c08      	cmp	r4, #8
 8000f36:	f106 0640 	add.w	r6, r6, #64	; 0x40
 8000f3a:	d1f3      	bne.n	8000f24 <updateLcd+0xc>
		}

	ssd1306_Update ();
 8000f3c:	f002 ff8e 	bl	8003e5c <ssd1306_Update>

	UC1609_Clean ();

	for (int i = 0; i < 8; i++)
 8000f40:	2400      	movs	r4, #0
	UC1609_Clean ();
 8000f42:	f7ff fdb5 	bl	8000ab0 <UC1609_Clean>
		{
			UC1609_SetPos (0, i);
 8000f46:	b2e1      	uxtb	r1, r4
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fd73 	bl	8000a34 <UC1609_SetPos>
	for (int i = 0; i < 8; i++)
 8000f4e:	3401      	adds	r4, #1
			UC1609_PutString (string[i]);
 8000f50:	4628      	mov	r0, r5
 8000f52:	f7ff fdf5 	bl	8000b40 <UC1609_PutString>
	for (int i = 0; i < 8; i++)
 8000f56:	2c08      	cmp	r4, #8
 8000f58:	f105 0540 	add.w	r5, r5, #64	; 0x40
 8000f5c:	d1f3      	bne.n	8000f46 <updateLcd+0x2e>
		}
	UC1609_UpdateScreen ();

}
 8000f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	UC1609_UpdateScreen ();
 8000f62:	f7ff bd73 	b.w	8000a4c <UC1609_UpdateScreen>
 8000f66:	bf00      	nop
 8000f68:	20000168 	.word	0x20000168

08000f6c <settingsInitiate>:
 * @brief Initiates settings from settings structure to radio structure
 * @param None
 * @retval None
 */
void settingsInitiate ()
{
 8000f6c:	b538      	push	{r3, r4, r5, lr}
	myRadio.sf = settings.sf;
 8000f6e:	4d0c      	ldr	r5, [pc, #48]	; (8000fa0 <settingsInitiate+0x34>)
 8000f70:	4c0c      	ldr	r4, [pc, #48]	; (8000fa4 <settingsInitiate+0x38>)
 8000f72:	7bab      	ldrb	r3, [r5, #14]
	myRadio.bw = settings.bw;
	myRadio.cr = settings.cr;
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8000f74:	6828      	ldr	r0, [r5, #0]
	myRadio.sf = settings.sf;
 8000f76:	7163      	strb	r3, [r4, #5]
	myRadio.bw = settings.bw;
 8000f78:	7beb      	ldrb	r3, [r5, #15]
 8000f7a:	71a3      	strb	r3, [r4, #6]
	myRadio.cr = settings.cr;
 8000f7c:	7c2b      	ldrb	r3, [r5, #16]
 8000f7e:	71e3      	strb	r3, [r4, #7]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8000f80:	f7ff f9a2 	bl	80002c8 <__aeabi_ui2f>
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <settingsInitiate+0x3c>)
 8000f86:	f7ff faab 	bl	80004e0 <__aeabi_fdiv>
 8000f8a:	f7ff fbe1 	bl	8000750 <__aeabi_f2uiz>
	myRadio.preamble = settings.preamble;
 8000f8e:	89ab      	ldrh	r3, [r5, #12]
	myRadio.frequency = (uint32_t) (settings.realFrequency / 61.035f);
 8000f90:	6020      	str	r0, [r4, #0]
	myRadio.preamble = settings.preamble;
 8000f92:	81a3      	strh	r3, [r4, #12]
	myRadio.power = settings.power;
 8000f94:	7cab      	ldrb	r3, [r5, #18]
 8000f96:	7123      	strb	r3, [r4, #4]
	myRadio.syncWord = settings.syncWord;
 8000f98:	7c6b      	ldrb	r3, [r5, #17]
 8000f9a:	73a3      	strb	r3, [r4, #14]
	myRadio.preamble = settings.preamble;
}
 8000f9c:	bd38      	pop	{r3, r4, r5, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000a78 	.word	0x20000a78
 8000fa4:	20000998 	.word	0x20000998
 8000fa8:	427423d7 	.word	0x427423d7

08000fac <tryLoadSettings>:
 * @brief tries to load settings from page 63 flash memory
 * @param None
 * @retval 1 - success 0 - fail
 */
bool tryLoadSettings ()
{
 8000fac:	b538      	push	{r3, r4, r5, lr}
	if (flashSettings->realFrequency >= MIN_FREQUENCY && flashSettings->realFrequency <= MAX_FREQUENCY)
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <tryLoadSettings+0x94>)
 8000fb0:	4a24      	ldr	r2, [pc, #144]	; (8001044 <tryLoadSettings+0x98>)
 8000fb2:	6819      	ldr	r1, [r3, #0]
 8000fb4:	4b24      	ldr	r3, [pc, #144]	; (8001048 <tryLoadSettings+0x9c>)
 8000fb6:	6808      	ldr	r0, [r1, #0]
 8000fb8:	4403      	add	r3, r0
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d83d      	bhi.n	800103a <tryLoadSettings+0x8e>
		if (flashSettings->sf > 6 && flashSettings->sf < 13)
 8000fbe:	7b8b      	ldrb	r3, [r1, #14]
 8000fc0:	3b07      	subs	r3, #7
 8000fc2:	2b05      	cmp	r3, #5
 8000fc4:	d839      	bhi.n	800103a <tryLoadSettings+0x8e>
			if (flashSettings->bw < 10)
 8000fc6:	7bcb      	ldrb	r3, [r1, #15]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d836      	bhi.n	800103a <tryLoadSettings+0x8e>
				if (flashSettings->cr > 0 && flashSettings->cr < 5)
 8000fcc:	7c0b      	ldrb	r3, [r1, #16]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	2b03      	cmp	r3, #3
 8000fd2:	d832      	bhi.n	800103a <tryLoadSettings+0x8e>
					if (flashSettings->preamble > 1 && flashSettings->preamble < 65535)
 8000fd4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8000fd8:	898b      	ldrh	r3, [r1, #12]
 8000fda:	3b02      	subs	r3, #2
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d82b      	bhi.n	800103a <tryLoadSettings+0x8e>
						if (flashSettings->realFrequency > MIN_FREQUENCY && flashSettings->realFrequency < MAX_FREQUENCY)
 8000fe2:	4a1a      	ldr	r2, [pc, #104]	; (800104c <tryLoadSettings+0xa0>)
 8000fe4:	4402      	add	r2, r0
 8000fe6:	481a      	ldr	r0, [pc, #104]	; (8001050 <tryLoadSettings+0xa4>)
 8000fe8:	4282      	cmp	r2, r0
 8000fea:	d226      	bcs.n	800103a <tryLoadSettings+0x8e>
							if (flashSettings->syncWord != 0x34 && flashSettings->syncWord != 0x55 && flashSettings->syncWord != 0xAA)
 8000fec:	7c4a      	ldrb	r2, [r1, #17]
 8000fee:	2a34      	cmp	r2, #52	; 0x34
 8000ff0:	d023      	beq.n	800103a <tryLoadSettings+0x8e>
 8000ff2:	2a55      	cmp	r2, #85	; 0x55
 8000ff4:	d021      	beq.n	800103a <tryLoadSettings+0x8e>
 8000ff6:	2aaa      	cmp	r2, #170	; 0xaa
 8000ff8:	d01f      	beq.n	800103a <tryLoadSettings+0x8e>
								if (flashSettings->power < 21 || flashSettings->power > 9)
									if (flashSettings->warningDelay > MIN_WARNING_DELAY && flashSettings->warningDelay < MAX_WARNING_DELAY)
 8000ffa:	684d      	ldr	r5, [r1, #4]
 8000ffc:	4a15      	ldr	r2, [pc, #84]	; (8001054 <tryLoadSettings+0xa8>)
 8000ffe:	f5a5 406a 	sub.w	r0, r5, #59904	; 0xea00
 8001002:	3861      	subs	r0, #97	; 0x61
 8001004:	4290      	cmp	r0, r2
 8001006:	d818      	bhi.n	800103a <tryLoadSettings+0x8e>
										if (flashSettings->superWarningDelay > MIN_WARNING_DELAY && flashSettings->superWarningDelay < MAX_WARNING_DELAY)
 8001008:	688c      	ldr	r4, [r1, #8]
 800100a:	f5a4 406a 	sub.w	r0, r4, #59904	; 0xea00
 800100e:	3861      	subs	r0, #97	; 0x61
 8001010:	4290      	cmp	r0, r2
 8001012:	d812      	bhi.n	800103a <tryLoadSettings+0x8e>
											if (flashSettings->superWarningDelay > flashSettings->warningDelay)
 8001014:	42a5      	cmp	r5, r4
 8001016:	d210      	bcs.n	800103a <tryLoadSettings+0x8e>
												if (flashSettings->preamble >= MIN_PREAMBLE && flashSettings->preamble <= MAX_PREAMBLE)
 8001018:	f240 32e6 	movw	r2, #998	; 0x3e6
 800101c:	4293      	cmp	r3, r2
 800101e:	d80c      	bhi.n	800103a <tryLoadSettings+0x8e>
													if (flashSettings->baseID > 0 && flashSettings->baseID < MAX_BASEID)
 8001020:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <tryLoadSettings+0xac>)
 8001024:	3b01      	subs	r3, #1
 8001026:	4293      	cmp	r3, r2
 8001028:	d807      	bhi.n	800103a <tryLoadSettings+0x8e>
														{
															settings = *flashSettings;
 800102a:	2268      	movs	r2, #104	; 0x68
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <tryLoadSettings+0xb0>)
 800102e:	f006 fdab 	bl	8007b88 <memcpy>
															settingsInitiate ();
 8001032:	f7ff ff9b 	bl	8000f6c <settingsInitiate>
															return true;
 8001036:	2001      	movs	r0, #1
														}
	return false;
}
 8001038:	bd38      	pop	{r3, r4, r5, pc}
	return false;
 800103a:	2000      	movs	r0, #0
 800103c:	e7fc      	b.n	8001038 <tryLoadSettings+0x8c>
 800103e:	bf00      	nop
 8001040:	20000028 	.word	0x20000028
 8001044:	3351d140 	.word	0x3351d140
 8001048:	f7c64980 	.word	0xf7c64980
 800104c:	f7c6497f 	.word	0xf7c6497f
 8001050:	3351d13f 	.word	0x3351d13f
 8001054:	0292439e 	.word	0x0292439e
 8001058:	0098967d 	.word	0x0098967d
 800105c:	20000a78 	.word	0x20000a78

08001060 <saveSettings>:
 * @brief Saves current device settings from RAM to page 63 of internal flash
 * @param None
 * @retval None
 */
void saveSettings ()
{
 8001060:	b570      	push	{r4, r5, r6, lr}
	uint16_t i = 0;
	uint16_t const settingsSize = (sizeof(baseSettings_t) + 3) / 4;
	FLASH_EraseInitTypeDef eraseInit;
	uint32_t pageError;
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
	eraseInit.PageAddress = (uint32_t) flashSettings;
 8001062:	4d10      	ldr	r5, [pc, #64]	; (80010a4 <saveSettings+0x44>)
{
 8001064:	b086      	sub	sp, #24
	eraseInit.PageAddress = (uint32_t) flashSettings;
 8001066:	682b      	ldr	r3, [r5, #0]
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8001068:	2400      	movs	r4, #0
	eraseInit.PageAddress = (uint32_t) flashSettings;
 800106a:	9304      	str	r3, [sp, #16]
	eraseInit.NbPages = 1;
 800106c:	2301      	movs	r3, #1
	eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 800106e:	9402      	str	r4, [sp, #8]
	eraseInit.NbPages = 1;
 8001070:	9305      	str	r3, [sp, #20]
	HAL_FLASH_Unlock ();
 8001072:	f004 fc21 	bl	80058b8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase (&eraseInit, &pageError);
 8001076:	a901      	add	r1, sp, #4
 8001078:	a802      	add	r0, sp, #8
 800107a:	f004 fcd9 	bl	8005a30 <HAL_FLASHEx_Erase>
	for (i = 0; i < settingsSize; i++)
 800107e:	4e0a      	ldr	r6, [pc, #40]	; (80010a8 <saveSettings+0x48>)
		HAL_FLASH_Program (FLASH_TYPEPROGRAM_WORD, ((uint32_t) flashSettings) + 4 * i, *(((uint32_t*) &settings) + i));
 8001080:	6829      	ldr	r1, [r5, #0]
 8001082:	2300      	movs	r3, #0
 8001084:	4421      	add	r1, r4
 8001086:	2002      	movs	r0, #2
 8001088:	f856 2b04 	ldr.w	r2, [r6], #4
 800108c:	3404      	adds	r4, #4
 800108e:	f004 fc59 	bl	8005944 <HAL_FLASH_Program>
	for (i = 0; i < settingsSize; i++)
 8001092:	2c68      	cmp	r4, #104	; 0x68
 8001094:	d1f4      	bne.n	8001080 <saveSettings+0x20>
	HAL_FLASH_Lock ();
 8001096:	f004 fc21 	bl	80058dc <HAL_FLASH_Lock>
	settingsInitiate ();
 800109a:	f7ff ff67 	bl	8000f6c <settingsInitiate>
}
 800109e:	b006      	add	sp, #24
 80010a0:	bd70      	pop	{r4, r5, r6, pc}
 80010a2:	bf00      	nop
 80010a4:	20000028 	.word	0x20000028
 80010a8:	20000a78 	.word	0x20000a78

080010ac <encoderPinChanged>:
	static uint8_t right;
	static uint8_t left;
	static uint16_t lastStatus;
	static uint8_t r = 0;
	static uint8_t l = 0;
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 80010ac:	4b32      	ldr	r3, [pc, #200]	; (8001178 <encoderPinChanged+0xcc>)
{
 80010ae:	b530      	push	{r4, r5, lr}
	uint32_t status = *(uint32_t*) 0x40010C08 & 0xC00;
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a32      	ldr	r2, [pc, #200]	; (800117c <encoderPinChanged+0xd0>)
 80010b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00

	switch (status)
 80010b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010bc:	d04d      	beq.n	800115a <encoderPinChanged+0xae>
 80010be:	d806      	bhi.n	80010ce <encoderPinChanged+0x22>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d03c      	beq.n	800113e <encoderPinChanged+0x92>
 80010c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010c8:	d020      	beq.n	800110c <encoderPinChanged+0x60>
					left++;
					l = 1;
					r = 0;
				}
	}
	lastStatus = status;
 80010ca:	8013      	strh	r3, [r2, #0]
}
 80010cc:	bd30      	pop	{r4, r5, pc}
	switch (status)
 80010ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80010d2:	d1fa      	bne.n	80010ca <encoderPinChanged+0x1e>
			if (right > 2)
 80010d4:	4c2a      	ldr	r4, [pc, #168]	; (8001180 <encoderPinChanged+0xd4>)
 80010d6:	7820      	ldrb	r0, [r4, #0]
 80010d8:	2802      	cmp	r0, #2
				flag.encDec = 1;
 80010da:	bf81      	itttt	hi
 80010dc:	4829      	ldrhi	r0, [pc, #164]	; (8001184 <encoderPinChanged+0xd8>)
 80010de:	7801      	ldrbhi	r1, [r0, #0]
 80010e0:	f041 0102 	orrhi.w	r1, r1, #2
 80010e4:	7001      	strbhi	r1, [r0, #0]
			if (left > 2)
 80010e6:	4928      	ldr	r1, [pc, #160]	; (8001188 <encoderPinChanged+0xdc>)
 80010e8:	7808      	ldrb	r0, [r1, #0]
 80010ea:	2802      	cmp	r0, #2
				flag.encInc = 1;
 80010ec:	bf88      	it	hi
 80010ee:	4d25      	ldrhi	r5, [pc, #148]	; (8001184 <encoderPinChanged+0xd8>)
 80010f0:	4608      	mov	r0, r1
 80010f2:	bf82      	ittt	hi
 80010f4:	7829      	ldrbhi	r1, [r5, #0]
 80010f6:	f041 0101 	orrhi.w	r1, r1, #1
 80010fa:	7029      	strbhi	r1, [r5, #0]
			right = 0;
 80010fc:	2100      	movs	r1, #0
			left = 0;
 80010fe:	7001      	strb	r1, [r0, #0]
			r = 0;
 8001100:	4822      	ldr	r0, [pc, #136]	; (800118c <encoderPinChanged+0xe0>)
			right = 0;
 8001102:	7021      	strb	r1, [r4, #0]
			r = 0;
 8001104:	7001      	strb	r1, [r0, #0]
			l = 0;
 8001106:	4822      	ldr	r0, [pc, #136]	; (8001190 <encoderPinChanged+0xe4>)
				right++;
 8001108:	7001      	strb	r1, [r0, #0]
 800110a:	e7de      	b.n	80010ca <encoderPinChanged+0x1e>
			if (lastStatus == 0xC00)
 800110c:	8811      	ldrh	r1, [r2, #0]
 800110e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8001112:	d10a      	bne.n	800112a <encoderPinChanged+0x7e>
					right++;
 8001114:	481a      	ldr	r0, [pc, #104]	; (8001180 <encoderPinChanged+0xd4>)
 8001116:	7801      	ldrb	r1, [r0, #0]
 8001118:	3101      	adds	r1, #1
 800111a:	7001      	strb	r1, [r0, #0]
					r = 1;
 800111c:	2001      	movs	r0, #1
 800111e:	491b      	ldr	r1, [pc, #108]	; (800118c <encoderPinChanged+0xe0>)
 8001120:	7008      	strb	r0, [r1, #0]
					l = 0;
 8001122:	491b      	ldr	r1, [pc, #108]	; (8001190 <encoderPinChanged+0xe4>)
					r = 0;
 8001124:	2000      	movs	r0, #0
 8001126:	7008      	strb	r0, [r1, #0]
 8001128:	e7cf      	b.n	80010ca <encoderPinChanged+0x1e>
			if (lastStatus == 0 && l)
 800112a:	2900      	cmp	r1, #0
 800112c:	d1cd      	bne.n	80010ca <encoderPinChanged+0x1e>
 800112e:	4918      	ldr	r1, [pc, #96]	; (8001190 <encoderPinChanged+0xe4>)
 8001130:	7809      	ldrb	r1, [r1, #0]
 8001132:	2900      	cmp	r1, #0
 8001134:	d0c9      	beq.n	80010ca <encoderPinChanged+0x1e>
				left++;
 8001136:	4814      	ldr	r0, [pc, #80]	; (8001188 <encoderPinChanged+0xdc>)
				right++;
 8001138:	7801      	ldrb	r1, [r0, #0]
 800113a:	3101      	adds	r1, #1
 800113c:	e7e4      	b.n	8001108 <encoderPinChanged+0x5c>
			if (lastStatus == 0x400 && r)
 800113e:	8811      	ldrh	r1, [r2, #0]
 8001140:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8001144:	d105      	bne.n	8001152 <encoderPinChanged+0xa6>
 8001146:	4911      	ldr	r1, [pc, #68]	; (800118c <encoderPinChanged+0xe0>)
 8001148:	7809      	ldrb	r1, [r1, #0]
 800114a:	2900      	cmp	r1, #0
 800114c:	d0bd      	beq.n	80010ca <encoderPinChanged+0x1e>
				right++;
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <encoderPinChanged+0xd4>)
 8001150:	e7f2      	b.n	8001138 <encoderPinChanged+0x8c>
			if (lastStatus == 0x800 && l)
 8001152:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001156:	d0ea      	beq.n	800112e <encoderPinChanged+0x82>
 8001158:	e7b7      	b.n	80010ca <encoderPinChanged+0x1e>
			if ((lastStatus == 0x000) && r)
 800115a:	8811      	ldrh	r1, [r2, #0]
 800115c:	2900      	cmp	r1, #0
 800115e:	d0f2      	beq.n	8001146 <encoderPinChanged+0x9a>
			if (lastStatus == 0xC00)
 8001160:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8001164:	d1b1      	bne.n	80010ca <encoderPinChanged+0x1e>
					left++;
 8001166:	4808      	ldr	r0, [pc, #32]	; (8001188 <encoderPinChanged+0xdc>)
 8001168:	7801      	ldrb	r1, [r0, #0]
 800116a:	3101      	adds	r1, #1
 800116c:	7001      	strb	r1, [r0, #0]
					l = 1;
 800116e:	2001      	movs	r0, #1
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <encoderPinChanged+0xe4>)
 8001172:	7008      	strb	r0, [r1, #0]
					r = 0;
 8001174:	4905      	ldr	r1, [pc, #20]	; (800118c <encoderPinChanged+0xe0>)
 8001176:	e7d5      	b.n	8001124 <encoderPinChanged+0x78>
 8001178:	40010c08 	.word	0x40010c08
 800117c:	20000134 	.word	0x20000134
 8001180:	20000161 	.word	0x20000161
 8001184:	20000b4c 	.word	0x20000b4c
 8001188:	2000014e 	.word	0x2000014e
 800118c:	20000150 	.word	0x20000150
 8001190:	20000126 	.word	0x20000126

08001194 <HAL_GPIO_EXTI_Callback>:
	switch (GPIO_Pin)
 8001194:	2804      	cmp	r0, #4
{
 8001196:	b510      	push	{r4, lr}
 8001198:	4604      	mov	r4, r0
	switch (GPIO_Pin)
 800119a:	d01d      	beq.n	80011d8 <HAL_GPIO_EXTI_Callback+0x44>
 800119c:	d802      	bhi.n	80011a4 <HAL_GPIO_EXTI_Callback+0x10>
 800119e:	2802      	cmp	r0, #2
 80011a0:	d00a      	beq.n	80011b8 <HAL_GPIO_EXTI_Callback+0x24>
}
 80011a2:	bd10      	pop	{r4, pc}
	switch (GPIO_Pin)
 80011a4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80011a8:	d002      	beq.n	80011b0 <HAL_GPIO_EXTI_Callback+0x1c>
 80011aa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80011ae:	d1f8      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0xe>
}
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			encoderPinChanged ();
 80011b4:	f7ff bf7a 	b.w	80010ac <encoderPinChanged>
			delayMicro (20000);
 80011b8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80011bc:	f7ff fda0 	bl	8000d00 <delayMicro>
			if (HAL_GPIO_ReadPin (B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80011c0:	4621      	mov	r1, r4
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x64>)
 80011c4:	f004 fd5c 	bl	8005c80 <HAL_GPIO_ReadPin>
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d1ea      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0xe>
				flag.encOk = 1;
 80011cc:	4a0b      	ldr	r2, [pc, #44]	; (80011fc <HAL_GPIO_EXTI_Callback+0x68>)
 80011ce:	7813      	ldrb	r3, [r2, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
				flag.back = 1;
 80011d4:	7013      	strb	r3, [r2, #0]
 80011d6:	e7e4      	b.n	80011a2 <HAL_GPIO_EXTI_Callback+0xe>
			delayMicro (20000);
 80011d8:	f644 6020 	movw	r0, #20000	; 0x4e20
 80011dc:	f7ff fd90 	bl	8000d00 <delayMicro>
			if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80011e0:	4621      	mov	r1, r4
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <HAL_GPIO_EXTI_Callback+0x64>)
 80011e4:	f004 fd4c 	bl	8005c80 <HAL_GPIO_ReadPin>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d1da      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0xe>
				flag.back = 1;
 80011ec:	4a03      	ldr	r2, [pc, #12]	; (80011fc <HAL_GPIO_EXTI_Callback+0x68>)
 80011ee:	7813      	ldrb	r3, [r2, #0]
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	e7ee      	b.n	80011d4 <HAL_GPIO_EXTI_Callback+0x40>
 80011f6:	bf00      	nop
 80011f8:	40010c00 	.word	0x40010c00
 80011fc:	20000b4c 	.word	0x20000b4c

08001200 <nextNodeAwaited>:

uint8_t nextNodeAwaited ()
{
 8001200:	b570      	push	{r4, r5, r6, lr}
	uint8_t ret = 255;
	int32_t minDelay = 0x40000000;
	uint32_t tick = HAL_GetTick ();
 8001202:	f003 ff29 	bl	8005058 <HAL_GetTick>
	int32_t minDelay = 0x40000000;
 8001206:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
	uint32_t tick = HAL_GetTick ();
 800120a:	4601      	mov	r1, r0
	for (int i = 0; i < MAX_NODES; i++)
 800120c:	2300      	movs	r3, #0
	uint8_t ret = 255;
 800120e:	20ff      	movs	r0, #255	; 0xff
 8001210:	4a08      	ldr	r2, [pc, #32]	; (8001234 <nextNodeAwaited+0x34>)
		{
			if (nodes[i].activated && (nodes[i].NextMessageTick - tick) < minDelay && (nodes[i].NextMessageTick - tick) > 0)
 8001212:	7c55      	ldrb	r5, [r2, #17]
 8001214:	b13d      	cbz	r5, 8001226 <nextNodeAwaited+0x26>
 8001216:	6856      	ldr	r6, [r2, #4]
 8001218:	1a75      	subs	r5, r6, r1
 800121a:	42a5      	cmp	r5, r4
 800121c:	d203      	bcs.n	8001226 <nextNodeAwaited+0x26>
 800121e:	428e      	cmp	r6, r1
				{
					ret = i;
					minDelay = nodes[i].NextMessageTick - tick;
 8001220:	bf1c      	itt	ne
 8001222:	462c      	movne	r4, r5
					ret = i;
 8001224:	b2d8      	uxtbne	r0, r3
	for (int i = 0; i < MAX_NODES; i++)
 8001226:	3301      	adds	r3, #1
 8001228:	2b08      	cmp	r3, #8
 800122a:	f102 0220 	add.w	r2, r2, #32
 800122e:	d1f0      	bne.n	8001212 <nextNodeAwaited+0x12>
				}
		}
	return ret;
}
 8001230:	bd70      	pop	{r4, r5, r6, pc}
 8001232:	bf00      	nop
 8001234:	20000ce0 	.word	0x20000ce0

08001238 <calcDelay>:

void calcDelay (uint8_t nodeNum)
{
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	4606      	mov	r6, r0
	uint32_t maxDelay = 0;

	uint16_t delay = 0;

	uint32_t tick = HAL_GetTick ();
 800123c:	f003 ff0c 	bl	8005058 <HAL_GetTick>

	for (int i = 0; i < MAX_NODES; i++)
 8001240:	2300      	movs	r3, #0
 8001242:	4918      	ldr	r1, [pc, #96]	; (80012a4 <calcDelay+0x6c>)
	uint32_t maxDelay = 0;
 8001244:	461a      	mov	r2, r3
 8001246:	460d      	mov	r5, r1
		{
			if (nodes[i].activated && ((nodes[i].NextMessageTick - tick) > (maxDelay * 1000)) && (nodes[i].NextMessageTick - tick < 0x8000000)
 8001248:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 800124c:	7c4c      	ldrb	r4, [r1, #17]
 800124e:	b164      	cbz	r4, 800126a <calcDelay+0x32>
 8001250:	fb07 fc02 	mul.w	ip, r7, r2
 8001254:	684c      	ldr	r4, [r1, #4]
 8001256:	1a24      	subs	r4, r4, r0
 8001258:	4564      	cmp	r4, ip
 800125a:	d906      	bls.n	800126a <calcDelay+0x32>
 800125c:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
 8001260:	d203      	bcs.n	800126a <calcDelay+0x32>
					&& (i != nodeNum))
 8001262:	429e      	cmp	r6, r3
				maxDelay = (nodes[i].NextMessageTick - tick) / 1000;
 8001264:	bf18      	it	ne
 8001266:	fbb4 f2f7 	udivne	r2, r4, r7
	for (int i = 0; i < MAX_NODES; i++)
 800126a:	3301      	adds	r3, #1
 800126c:	2b08      	cmp	r3, #8
 800126e:	f101 0120 	add.w	r1, r1, #32
 8001272:	d1eb      	bne.n	800124c <calcDelay+0x14>
		}

	if (maxDelay > (nodeSettings.workInterval - SAFE_INTERVAL))
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <calcDelay+0x70>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f1a3 010a 	sub.w	r1, r3, #10
 800127c:	4291      	cmp	r1, r2
		delay = maxDelay + SAFE_INTERVAL;
	else
		delay = nodeSettings.workInterval;
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 800127e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		delay = maxDelay + SAFE_INTERVAL;
 8001282:	bf38      	it	cc
 8001284:	f102 030a 	addcc.w	r3, r2, #10
		delay = nodeSettings.workInterval;
 8001288:	b29b      	uxth	r3, r3
	nodes[nodeNum].NextMessageTick = tick + delay * 1000;
 800128a:	fb01 0003 	mla	r0, r1, r3, r0
 800128e:	eb05 1246 	add.w	r2, r5, r6, lsl #5
 8001292:	6050      	str	r0, [r2, #4]
	nodes[nodeNum].delay = delay;
 8001294:	8113      	strh	r3, [r2, #8]
	absoluteMaxDelay = absoluteMaxDelay < delay ? delay : absoluteMaxDelay;
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <calcDelay+0x74>)
 8001298:	6811      	ldr	r1, [r2, #0]
 800129a:	4299      	cmp	r1, r3
 800129c:	bf2c      	ite	cs
 800129e:	6011      	strcs	r1, [r2, #0]
 80012a0:	6013      	strcc	r3, [r2, #0]

}
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	20000ce0 	.word	0x20000ce0
 80012a8:	20000c74 	.word	0x20000c74
 80012ac:	2000011c 	.word	0x2000011c

080012b0 <handleMessage>:
 * @brief Received radio message handler
 * @param message length
 * @retval None
 */
void handleMessage (uint8_t len)
{
 80012b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t nodeNum = rxMes->adr;
 80012b4:	4c94      	ldr	r4, [pc, #592]	; (8001508 <handleMessage+0x258>)
	receivedMesCnt++;
 80012b6:	4a95      	ldr	r2, [pc, #596]	; (800150c <handleMessage+0x25c>)
	uint8_t nodeNum = rxMes->adr;
 80012b8:	6823      	ldr	r3, [r4, #0]
{
 80012ba:	b0df      	sub	sp, #380	; 0x17c
	uint8_t nodeNum = rxMes->adr;
 80012bc:	781d      	ldrb	r5, [r3, #0]
	receivedMesCnt++;
 80012be:	6813      	ldr	r3, [r2, #0]
	uint8_t nodeNum = rxMes->adr;
 80012c0:	f3c5 08c4 	ubfx	r8, r5, #3, #5
	receivedMesCnt++;
 80012c4:	3301      	adds	r3, #1
 80012c6:	6013      	str	r3, [r2, #0]
	clearStrings ();
 80012c8:	f7ff fe14 	bl	8000ef4 <clearStrings>
	if (rxMes->uplink == 0)
 80012cc:	6823      	ldr	r3, [r4, #0]
 80012ce:	46a2      	mov	sl, r4
 80012d0:	781b      	ldrb	r3, [r3, #0]
	uint8_t nodeNum = rxMes->adr;
 80012d2:	08ed      	lsrs	r5, r5, #3
	if (rxMes->uplink == 0)
 80012d4:	f013 0f01 	tst.w	r3, #1
 80012d8:	d105      	bne.n	80012e6 <handleMessage+0x36>
		{
			printf ("Received downlink message!\n");
 80012da:	488d      	ldr	r0, [pc, #564]	; (8001510 <handleMessage+0x260>)
			return;
		}
	if (myRadio.badCrc == 1)
		{
			printf ("Bad CRC in received message!\n");
 80012dc:	f006 fcf0 	bl	8007cc0 <puts>
			nodes[nodeNum].NetAlarm = ALARM_OFF;
		}

	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));

}
 80012e0:	b05f      	add	sp, #380	; 0x17c
 80012e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (myRadio.badCrc == 1)
 80012e6:	4a8b      	ldr	r2, [pc, #556]	; (8001514 <handleMessage+0x264>)
 80012e8:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80012ec:	b10a      	cbz	r2, 80012f2 <handleMessage+0x42>
			printf ("Bad CRC in received message!\n");
 80012ee:	488a      	ldr	r0, [pc, #552]	; (8001518 <handleMessage+0x268>)
 80012f0:	e7f4      	b.n	80012dc <handleMessage+0x2c>
	if (rxMes->adr >= MAX_NODES)
 80012f2:	2b3f      	cmp	r3, #63	; 0x3f
 80012f4:	d905      	bls.n	8001302 <handleMessage+0x52>
			printf ("Node %d not supported! Max is %d\n", nodeNum, MAX_NODES);
 80012f6:	2208      	movs	r2, #8
 80012f8:	4629      	mov	r1, r5
 80012fa:	4888      	ldr	r0, [pc, #544]	; (800151c <handleMessage+0x26c>)
 80012fc:	f006 fc5a 	bl	8007bb4 <iprintf>
			return;
 8001300:	e7ee      	b.n	80012e0 <handleMessage+0x30>
	receivedMesCntSuc++;
 8001302:	4a87      	ldr	r2, [pc, #540]	; (8001520 <handleMessage+0x270>)
	if (nodes[nodeNum].activated == 0)
 8001304:	4c87      	ldr	r4, [pc, #540]	; (8001524 <handleMessage+0x274>)
	receivedMesCntSuc++;
 8001306:	6813      	ldr	r3, [r2, #0]
	if (nodes[nodeNum].activated == 0)
 8001308:	016f      	lsls	r7, r5, #5
	receivedMesCntSuc++;
 800130a:	3301      	adds	r3, #1
 800130c:	6013      	str	r3, [r2, #0]
	if (nodes[nodeNum].activated == 0)
 800130e:	eb04 1345 	add.w	r3, r4, r5, lsl #5
 8001312:	7c5a      	ldrb	r2, [r3, #17]
 8001314:	b91a      	cbnz	r2, 800131e <handleMessage+0x6e>
			nodes[nodeNum].activated = 1;
 8001316:	2201      	movs	r2, #1
 8001318:	745a      	strb	r2, [r3, #17]
			saveNodeData ();
 800131a:	f7ff fd5d 	bl	8000dd8 <saveNodeData>
	nodes[nodeNum].disarmed = rxMes->disarm;
 800131e:	f8da 3000 	ldr.w	r3, [sl]
 8001322:	19e6      	adds	r6, r4, r7
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800132a:	7373      	strb	r3, [r6, #13]
	nodes[nodeNum].lastContact = HAL_GetTick ();
 800132c:	f003 fe94 	bl	8005058 <HAL_GetTick>
	nodes[nodeNum].opened = rxMes->opened;
 8001330:	f8da 9000 	ldr.w	r9, [sl]
	nodes[nodeNum].lastContact = HAL_GetTick ();
 8001334:	51e0      	str	r0, [r4, r7]
	nodes[nodeNum].opened = rxMes->opened;
 8001336:	f899 3001 	ldrb.w	r3, [r9, #1]
 800133a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800133e:	73f3      	strb	r3, [r6, #15]
	nodes[nodeNum].powered = rxMes->powered;
 8001340:	f899 3001 	ldrb.w	r3, [r9, #1]
 8001344:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001348:	7433      	strb	r3, [r6, #16]
	nodes[nodeNum].voltage = 1.9F + rxMes->codedVoltage / 10.0F;
 800134a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800134e:	08c0      	lsrs	r0, r0, #3
 8001350:	f7fe ffbe 	bl	80002d0 <__aeabi_i2f>
 8001354:	4974      	ldr	r1, [pc, #464]	; (8001528 <handleMessage+0x278>)
 8001356:	f7ff f8c3 	bl	80004e0 <__aeabi_fdiv>
 800135a:	4974      	ldr	r1, [pc, #464]	; (800152c <handleMessage+0x27c>)
 800135c:	f7fe ff04 	bl	8000168 <__addsf3>
 8001360:	6170      	str	r0, [r6, #20]
	nodes[nodeNum].temperature = rxMes->codedTemperature / 2.0F - 40.0F;
 8001362:	f899 0002 	ldrb.w	r0, [r9, #2]
 8001366:	f7fe ffb3 	bl	80002d0 <__aeabi_i2f>
 800136a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800136e:	f7ff f803 	bl	8000378 <__aeabi_fmul>
 8001372:	496f      	ldr	r1, [pc, #444]	; (8001530 <handleMessage+0x280>)
 8001374:	f7fe fef6 	bl	8000164 <__aeabi_fsub>
 8001378:	61f0      	str	r0, [r6, #28]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack (&myRadio);
 800137a:	4866      	ldr	r0, [pc, #408]	; (8001514 <handleMessage+0x264>)
 800137c:	f003 f9a6 	bl	80046cc <SX127X_RSSI_Pack>
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 8001380:	7b31      	ldrb	r1, [r6, #12]
	nodes[nodeNum].rssi = SX127X_RSSI_Pack (&myRadio);
 8001382:	8170      	strh	r0, [r6, #10]
	if ((nodes[nodeNum].masked & MASK_DOOR) == 0 && nodes[nodeNum].opened)
 8001384:	07ca      	lsls	r2, r1, #31
 8001386:	d40a      	bmi.n	800139e <handleMessage+0xee>
 8001388:	7bf3      	ldrb	r3, [r6, #15]
 800138a:	b143      	cbz	r3, 800139e <handleMessage+0xee>
			nodes[nodeNum].NetAlarm |= ALARM_DOOR;
 800138c:	f107 0210 	add.w	r2, r7, #16
 8001390:	4422      	add	r2, r4
			nodes[nodeNum].alarm |= ALARM_DOOR;
 8001392:	8853      	ldrh	r3, [r2, #2]
 8001394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	8053      	strh	r3, [r2, #2]
	if ((nodes[nodeNum].masked & MASK_POWER) == 0 && !nodes[nodeNum].powered)
 800139e:	078b      	lsls	r3, r1, #30
 80013a0:	d40b      	bmi.n	80013ba <handleMessage+0x10a>
 80013a2:	19e3      	adds	r3, r4, r7
 80013a4:	7c1b      	ldrb	r3, [r3, #16]
 80013a6:	b943      	cbnz	r3, 80013ba <handleMessage+0x10a>
			nodes[nodeNum].NetAlarm |= ALARM_POWER;
 80013a8:	f107 0210 	add.w	r2, r7, #16
 80013ac:	4422      	add	r2, r4
			nodes[nodeNum].alarm |= ALARM_POWER;
 80013ae:	8853      	ldrh	r3, [r2, #2]
 80013b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	8053      	strh	r3, [r2, #2]
	flag.lcdRefreshRequest = 1;
 80013ba:	4a5e      	ldr	r2, [pc, #376]	; (8001534 <handleMessage+0x284>)
	lastMessageFrom = nodeNum;
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <handleMessage+0x288>)
	calcDelay (nodeNum);
 80013be:	4628      	mov	r0, r5
	lastMessageFrom = nodeNum;
 80013c0:	f883 8000 	strb.w	r8, [r3]
	flag.lcdRefreshRequest = 1;
 80013c4:	7813      	ldrb	r3, [r2, #0]
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 80013c6:	443c      	add	r4, r7
	flag.lcdRefreshRequest = 1;
 80013c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013cc:	7013      	strb	r3, [r2, #0]
	calcDelay (nodeNum);
 80013ce:	f7ff ff33 	bl	8001238 <calcDelay>
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 80013d2:	4b5a      	ldr	r3, [pc, #360]	; (800153c <handleMessage+0x28c>)
 80013d4:	8922      	ldrh	r2, [r4, #8]
 80013d6:	6819      	ldr	r1, [r3, #0]
	txMes->uplink = 0;
 80013d8:	00ed      	lsls	r5, r5, #3
	txMes->codedDelayLSB = nodes[nodeNum].delay & 0xFF;
 80013da:	708a      	strb	r2, [r1, #2]
	txMes->disarm = nodes[nodeNum].disarmRequest;
 80013dc:	7ba3      	ldrb	r3, [r4, #14]
	txMes->codedDelayMSB = (nodes[nodeNum].delay >> 8) & 0x7F;
 80013de:	0a12      	lsrs	r2, r2, #8
	txMes->disarm = nodes[nodeNum].disarmRequest;
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80013e8:	704b      	strb	r3, [r1, #1]
	txMes->uplink = 0;
 80013ea:	700d      	strb	r5, [r1, #0]
	HAL_Delay (2);
 80013ec:	2002      	movs	r0, #2
	if (netHandler.online)
 80013ee:	4d54      	ldr	r5, [pc, #336]	; (8001540 <handleMessage+0x290>)
	HAL_Delay (2);
 80013f0:	f003 fe38 	bl	8005064 <HAL_Delay>
	SX127X_transmitAsync (&myRadio, 3);
 80013f4:	2103      	movs	r1, #3
 80013f6:	4847      	ldr	r0, [pc, #284]	; (8001514 <handleMessage+0x264>)
 80013f8:	f003 f94a 	bl	8004690 <SX127X_transmitAsync>
	if (netHandler.online)
 80013fc:	78eb      	ldrb	r3, [r5, #3]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d07a      	beq.n	80014f8 <handleMessage+0x248>
			sprintf (DAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_DOOR ? "&DA=true" : "");
 8001402:	7ce7      	ldrb	r7, [r4, #19]
 8001404:	4e4f      	ldr	r6, [pc, #316]	; (8001544 <handleMessage+0x294>)
 8001406:	f017 0f01 	tst.w	r7, #1
 800140a:	f10d 0858 	add.w	r8, sp, #88	; 0x58
 800140e:	494e      	ldr	r1, [pc, #312]	; (8001548 <handleMessage+0x298>)
 8001410:	4640      	mov	r0, r8
 8001412:	bf08      	it	eq
 8001414:	4631      	moveq	r1, r6
 8001416:	f006 fc7b 	bl	8007d10 <strcpy>
			sprintf (PAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_POWER ? "&PA=true" : "");
 800141a:	f017 0f02 	tst.w	r7, #2
			sprintf (Vstr, "&V=%d.%d", (19 + rxMes->codedVoltage) / 10, (19 + rxMes->codedVoltage) % 10);
 800141e:	f04f 070a 	mov.w	r7, #10
			sprintf (PAstr, "%s", nodes[nodeNum].NetAlarm & ALARM_POWER ? "&PA=true" : "");
 8001422:	f10d 0968 	add.w	r9, sp, #104	; 0x68
 8001426:	4949      	ldr	r1, [pc, #292]	; (800154c <handleMessage+0x29c>)
 8001428:	4648      	mov	r0, r9
 800142a:	bf08      	it	eq
 800142c:	4631      	moveq	r1, r6
 800142e:	f006 fc6f 	bl	8007d10 <strcpy>
			sprintf (Vstr, "&V=%d.%d", (19 + rxMes->codedVoltage) / 10, (19 + rxMes->codedVoltage) % 10);
 8001432:	f8da 3000 	ldr.w	r3, [sl]
 8001436:	ae0e      	add	r6, sp, #56	; 0x38
 8001438:	785b      	ldrb	r3, [r3, #1]
 800143a:	4945      	ldr	r1, [pc, #276]	; (8001550 <handleMessage+0x2a0>)
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	3313      	adds	r3, #19
 8001440:	fbb3 f2f7 	udiv	r2, r3, r7
 8001444:	4630      	mov	r0, r6
 8001446:	fb07 3312 	mls	r3, r7, r2, r3
 800144a:	f006 fc41 	bl	8007cd0 <siprintf>
			sprintf (Tstr, "&T=%d.%d", (int) nodes[nodeNum].temperature, ((int) (nodes[nodeNum].temperature * 10.0f)) % 10);
 800144e:	69e2      	ldr	r2, [r4, #28]
 8001450:	4935      	ldr	r1, [pc, #212]	; (8001528 <handleMessage+0x278>)
 8001452:	4610      	mov	r0, r2
 8001454:	920d      	str	r2, [sp, #52]	; 0x34
 8001456:	f7fe ff8f 	bl	8000378 <__aeabi_fmul>
 800145a:	f7ff f953 	bl	8000704 <__aeabi_f2iz>
 800145e:	fb90 fbf7 	sdiv	fp, r0, r7
 8001462:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001464:	fb0b 0b17 	mls	fp, fp, r7, r0
 8001468:	4610      	mov	r0, r2
 800146a:	f7ff f94b 	bl	8000704 <__aeabi_f2iz>
 800146e:	af12      	add	r7, sp, #72	; 0x48
 8001470:	465b      	mov	r3, fp
 8001472:	4602      	mov	r2, r0
 8001474:	4937      	ldr	r1, [pc, #220]	; (8001554 <handleMessage+0x2a4>)
 8001476:	4638      	mov	r0, r7
 8001478:	f006 fc2a 	bl	8007cd0 <siprintf>
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 800147c:	f8da 1000 	ldr.w	r1, [sl]
 8001480:	4835      	ldr	r0, [pc, #212]	; (8001558 <handleMessage+0x2a8>)
								settings.ServerPass, rxMes->opened ? "true" : "false", rxMes->powered ? "true" : "false", rxMes->disarm ? "true" : "false",
 8001482:	f891 c001 	ldrb.w	ip, [r1, #1]
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 8001486:	780b      	ldrb	r3, [r1, #0]
 8001488:	4934      	ldr	r1, [pc, #208]	; (800155c <handleMessage+0x2ac>)
 800148a:	f01c 0f02 	tst.w	ip, #2
 800148e:	930d      	str	r3, [sp, #52]	; 0x34
 8001490:	bf14      	ite	ne
 8001492:	460b      	movne	r3, r1
 8001494:	4603      	moveq	r3, r0
 8001496:	f01c 0f04 	tst.w	ip, #4
 800149a:	bf14      	ite	ne
 800149c:	468e      	movne	lr, r1
 800149e:	4686      	moveq	lr, r0
 80014a0:	f01c 0f01 	tst.w	ip, #1
								nodes[nodeNum].masked & MASK_DOOR ? "true" : "false", nodes[nodeNum].masked & MASK_POWER ? "true" : "false", Vstr, Tstr, DAstr,
 80014a4:	f894 c00c 	ldrb.w	ip, [r4, #12]
			sprintf (message, "%s/Uplink/UpdateNode?N=%d&BID=%lu&Ps=%s&O=%s&P=%s&D=%s&DM=%s&PM=%s%s%s%s%s", settings.host, rxMes->adr, settings.baseID,
 80014a8:	bf14      	ite	ne
 80014aa:	468a      	movne	sl, r1
 80014ac:	4682      	moveq	sl, r0
 80014ae:	f01c 0f01 	tst.w	ip, #1
 80014b2:	bf14      	ite	ne
 80014b4:	468b      	movne	fp, r1
 80014b6:	4683      	moveq	fp, r0
 80014b8:	f01c 0f02 	tst.w	ip, #2
 80014bc:	bf08      	it	eq
 80014be:	4601      	moveq	r1, r0
 80014c0:	4a27      	ldr	r2, [pc, #156]	; (8001560 <handleMessage+0x2b0>)
 80014c2:	e9cd b105 	strd	fp, r1, [sp, #20]
 80014c6:	e9cd ea03 	strd	lr, sl, [sp, #12]
 80014ca:	e9cd 8909 	strd	r8, r9, [sp, #36]	; 0x24
 80014ce:	e9cd 6707 	strd	r6, r7, [sp, #28]
 80014d2:	f102 0133 	add.w	r1, r2, #51	; 0x33
 80014d6:	9101      	str	r1, [sp, #4]
 80014d8:	9302      	str	r3, [sp, #8]
 80014da:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80014dc:	4921      	ldr	r1, [pc, #132]	; (8001564 <handleMessage+0x2b4>)
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80014e2:	3243      	adds	r2, #67	; 0x43
 80014e4:	08db      	lsrs	r3, r3, #3
 80014e6:	a81e      	add	r0, sp, #120	; 0x78
 80014e8:	f006 fbf2 	bl	8007cd0 <siprintf>
			NetSendAsync (&netHandler, message);
 80014ec:	4628      	mov	r0, r5
 80014ee:	a91e      	add	r1, sp, #120	; 0x78
 80014f0:	f7ff f986 	bl	8000800 <NetSendAsync>
			nodes[nodeNum].NetAlarm = ALARM_OFF;
 80014f4:	2300      	movs	r3, #0
 80014f6:	74e3      	strb	r3, [r4, #19]
	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 80014f8:	2220      	movs	r2, #32
 80014fa:	2100      	movs	r1, #0
 80014fc:	481a      	ldr	r0, [pc, #104]	; (8001568 <handleMessage+0x2b8>)
}
 80014fe:	b05f      	add	sp, #380	; 0x17c
 8001500:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memset (myRadio.rxBuf, 0, sizeof(myRadio.rxBuf));
 8001504:	f006 bb4e 	b.w	8007ba4 <memset>
 8001508:	20000044 	.word	0x20000044
 800150c:	20000154 	.word	0x20000154
 8001510:	08008f56 	.word	0x08008f56
 8001514:	20000998 	.word	0x20000998
 8001518:	08008f71 	.word	0x08008f71
 800151c:	08008f8e 	.word	0x08008f8e
 8001520:	20000158 	.word	0x20000158
 8001524:	20000ce0 	.word	0x20000ce0
 8001528:	41200000 	.word	0x41200000
 800152c:	3ff33333 	.word	0x3ff33333
 8001530:	42200000 	.word	0x42200000
 8001534:	20000b4c 	.word	0x20000b4c
 8001538:	2000002c 	.word	0x2000002c
 800153c:	20000048 	.word	0x20000048
 8001540:	20000e8c 	.word	0x20000e8c
 8001544:	08009b2a 	.word	0x08009b2a
 8001548:	08008f3e 	.word	0x08008f3e
 800154c:	08008f47 	.word	0x08008f47
 8001550:	08008fb0 	.word	0x08008fb0
 8001554:	08008fb9 	.word	0x08008fb9
 8001558:	08008f50 	.word	0x08008f50
 800155c:	08008f42 	.word	0x08008f42
 8001560:	20000a78 	.word	0x20000a78
 8001564:	08008fc2 	.word	0x08008fc2
 8001568:	200009b5 	.word	0x200009b5

0800156c <alarmRoutine>:
 * @brief Handles alarm situations
 * @param None
 * @retval None
 */
void alarmRoutine ()
{
 800156c:	b508      	push	{r3, lr}
 800156e:	2300      	movs	r3, #0
	uint16_t i;
	uint8_t gotAlarm = 0;
 8001570:	461a      	mov	r2, r3
 8001572:	4917      	ldr	r1, [pc, #92]	; (80015d0 <alarmRoutine+0x64>)
	for (i = 0; i < MAX_NODES; i++)
		if (nodes[i].alarm)
 8001574:	7c88      	ldrb	r0, [r1, #18]
 8001576:	3301      	adds	r3, #1
			gotAlarm = true;
 8001578:	2800      	cmp	r0, #0
 800157a:	bf18      	it	ne
 800157c:	2201      	movne	r2, #1
	for (i = 0; i < MAX_NODES; i++)
 800157e:	2b08      	cmp	r3, #8
 8001580:	f101 0120 	add.w	r1, r1, #32
 8001584:	d1f6      	bne.n	8001574 <alarmRoutine+0x8>

	if (gotAlarm)
 8001586:	b1ea      	cbz	r2, 80015c4 <alarmRoutine+0x58>
		{
			uint8_t tact = (HAL_GetTick () / 80) % 12;
 8001588:	f003 fd66 	bl	8005058 <HAL_GetTick>
 800158c:	2350      	movs	r3, #80	; 0x50
 800158e:	220c      	movs	r2, #12
 8001590:	fbb0 f3f3 	udiv	r3, r0, r3
 8001594:	fbb3 f0f2 	udiv	r0, r3, r2
 8001598:	fb02 3010 	mls	r0, r2, r0, r3
			if (tact % 2 && tact < 9)
 800159c:	07c2      	lsls	r2, r0, #31
			uint8_t tact = (HAL_GetTick () / 80) % 12;
 800159e:	b2c3      	uxtb	r3, r0
			if (tact % 2 && tact < 9)
 80015a0:	d50e      	bpl.n	80015c0 <alarmRoutine+0x54>
 80015a2:	2b08      	cmp	r3, #8
 80015a4:	d80c      	bhi.n	80015c0 <alarmRoutine+0x54>
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 1);
 80015a6:	2201      	movs	r2, #1
			else
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80015a8:	2120      	movs	r1, #32
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <alarmRoutine+0x68>)
 80015ac:	f004 fb6e 	bl	8005c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 0);
 80015b0:	2200      	movs	r2, #0
	else
		{
			HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
		}
}
 80015b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
 80015b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ba:	4807      	ldr	r0, [pc, #28]	; (80015d8 <alarmRoutine+0x6c>)
 80015bc:	f004 bb66 	b.w	8005c8c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	e7f1      	b.n	80015a8 <alarmRoutine+0x3c>
			HAL_GPIO_WritePin (BUZZER_GPIO_Port, BUZZER_Pin, 0);
 80015c4:	2120      	movs	r1, #32
 80015c6:	4803      	ldr	r0, [pc, #12]	; (80015d4 <alarmRoutine+0x68>)
 80015c8:	f004 fb60 	bl	8005c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (RELAY_GPIO_Port, RELAY_Pin, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	e7f0      	b.n	80015b2 <alarmRoutine+0x46>
 80015d0:	20000ce0 	.word	0x20000ce0
 80015d4:	40010c00 	.word	0x40010c00
 80015d8:	40010800 	.word	0x40010800

080015dc <alarmOff>:
 */
void alarmOff ()
{
	uint16_t i;
	for (i = 0; i < MAX_NODES; i++)
		nodes[i].alarm = 0;
 80015dc:	2200      	movs	r2, #0
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <alarmOff+0x24>)
 80015e0:	749a      	strb	r2, [r3, #18]
 80015e2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80015e6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80015ea:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
 80015ee:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80015f2:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 80015f6:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
 80015fa:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
}
 80015fe:	4770      	bx	lr
 8001600:	20000ce0 	.word	0x20000ce0

08001604 <ledNodeStatusIndication>:

void ledNodeStatusIndication ()
{
 8001604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	for (i = 0; i < MAX_NODES; i++)
 8001608:	f04f 0a00 	mov.w	sl, #0
				{
#if RECEIVE_ANIMATION == WAVE
					float fTemp;
					uint32_t temp = (HAL_GetTick () - nodes[i].lastContact) % 1000;
					if (temp < 500)
						fTemp = 1.0f + (float) temp / 125.0f;
 800160c:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8001610:	4c73      	ldr	r4, [pc, #460]	; (80017e0 <ledNodeStatusIndication+0x1dc>)
					else
						fTemp = 9.0f - (float) temp / 125.0f;
 8001612:	4f74      	ldr	r7, [pc, #464]	; (80017e4 <ledNodeStatusIndication+0x1e0>)
 8001614:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80017f4 <ledNodeStatusIndication+0x1f0>
			wsSetColor (i + 1, GREEN);
 8001618:	2300      	movs	r3, #0
 800161a:	f10a 0601 	add.w	r6, sl, #1
 800161e:	b2f5      	uxtb	r5, r6
 8001620:	4619      	mov	r1, r3
 8001622:	2210      	movs	r2, #16
 8001624:	4628      	mov	r0, r5
 8001626:	f003 fc43 	bl	8004eb0 <wsSetColor>
			if (nodes[i].powered == 0)
 800162a:	7c21      	ldrb	r1, [r4, #16]
 800162c:	b921      	cbnz	r1, 8001638 <ledNodeStatusIndication+0x34>
				wsSetColor (i + 1, CYAN);
 800162e:	2310      	movs	r3, #16
 8001630:	4628      	mov	r0, r5
 8001632:	461a      	mov	r2, r3
 8001634:	f003 fc3c 	bl	8004eb0 <wsSetColor>
			if (nodes[i].voltage < nodes[i].voltageTrashold)
 8001638:	69a1      	ldr	r1, [r4, #24]
 800163a:	6960      	ldr	r0, [r4, #20]
 800163c:	f7ff f83a 	bl	80006b4 <__aeabi_fcmplt>
 8001640:	b150      	cbz	r0, 8001658 <ledNodeStatusIndication+0x54>
				blinkProvider ? wsSetColor (i + 1, CYAN) : wsSetColor (i + 1, BLACK);
 8001642:	4b69      	ldr	r3, [pc, #420]	; (80017e8 <ledNodeStatusIndication+0x1e4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 80aa 	beq.w	80017a0 <ledNodeStatusIndication+0x19c>
 800164c:	2310      	movs	r3, #16
 800164e:	2100      	movs	r1, #0
 8001650:	461a      	mov	r2, r3
 8001652:	4628      	mov	r0, r5
 8001654:	f003 fc2c 	bl	8004eb0 <wsSetColor>
			if (nodes[i].masked & MASK_DOOR)
 8001658:	7b23      	ldrb	r3, [r4, #12]
 800165a:	07db      	lsls	r3, r3, #31
 800165c:	d50e      	bpl.n	800167c <ledNodeStatusIndication+0x78>
				(nodes[i].opened && blinkProvider) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, BLUE); // Blinking - opened
 800165e:	7be3      	ldrb	r3, [r4, #15]
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a0 	beq.w	80017a6 <ledNodeStatusIndication+0x1a2>
 8001666:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <ledNodeStatusIndication+0x1e4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 809b 	beq.w	80017a6 <ledNodeStatusIndication+0x1a2>
 8001670:	2300      	movs	r3, #0
 8001672:	461a      	mov	r2, r3
 8001674:	4619      	mov	r1, r3
 8001676:	4628      	mov	r0, r5
 8001678:	f003 fc1a 	bl	8004eb0 <wsSetColor>
			if (nodes[i].alarm)
 800167c:	7ca3      	ldrb	r3, [r4, #18]
 800167e:	b16b      	cbz	r3, 800169c <ledNodeStatusIndication+0x98>
				(blinkProvider && nodes[i].alarm == ALARM_DOOR) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 8001680:	4a59      	ldr	r2, [pc, #356]	; (80017e8 <ledNodeStatusIndication+0x1e4>)
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	2a00      	cmp	r2, #0
 8001686:	f000 8092 	beq.w	80017ae <ledNodeStatusIndication+0x1aa>
 800168a:	2b01      	cmp	r3, #1
 800168c:	f040 808f 	bne.w	80017ae <ledNodeStatusIndication+0x1aa>
 8001690:	2300      	movs	r3, #0
 8001692:	461a      	mov	r2, r3
 8001694:	4619      	mov	r1, r3
 8001696:	4628      	mov	r0, r5
 8001698:	f003 fc0a 	bl	8004eb0 <wsSetColor>
			if (HAL_GetTick () - nodes[i].lastContact > settings.warningDelay && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 800169c:	f003 fcdc 	bl	8005058 <HAL_GetTick>
 80016a0:	f8df b154 	ldr.w	fp, [pc, #340]	; 80017f8 <ledNodeStatusIndication+0x1f4>
 80016a4:	6823      	ldr	r3, [r4, #0]
 80016a6:	1ac0      	subs	r0, r0, r3
 80016a8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80016ac:	4298      	cmp	r0, r3
 80016ae:	d90d      	bls.n	80016cc <ledNodeStatusIndication+0xc8>
 80016b0:	f003 fcd2 	bl	8005058 <HAL_GetTick>
 80016b4:	6863      	ldr	r3, [r4, #4]
 80016b6:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80016ba:	3310      	adds	r3, #16
 80016bc:	4298      	cmp	r0, r3
 80016be:	d905      	bls.n	80016cc <ledNodeStatusIndication+0xc8>
				wsSetColor (i + 1, YELLOW);
 80016c0:	2210      	movs	r2, #16
 80016c2:	2300      	movs	r3, #0
 80016c4:	4611      	mov	r1, r2
 80016c6:	4628      	mov	r0, r5
 80016c8:	f003 fbf2 	bl	8004eb0 <wsSetColor>
			if (HAL_GetTick () - nodes[i].lastContact > settings.superWarningDelay && blinkProvider && HAL_GetTick () > (nodes[i].NextMessageTick + 10000))
 80016cc:	f003 fcc4 	bl	8005058 <HAL_GetTick>
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	1ac0      	subs	r0, r0, r3
 80016d4:	f8db 3008 	ldr.w	r3, [fp, #8]
 80016d8:	4298      	cmp	r0, r3
 80016da:	d910      	bls.n	80016fe <ledNodeStatusIndication+0xfa>
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <ledNodeStatusIndication+0x1e4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b16b      	cbz	r3, 80016fe <ledNodeStatusIndication+0xfa>
 80016e2:	f003 fcb9 	bl	8005058 <HAL_GetTick>
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80016ec:	3310      	adds	r3, #16
 80016ee:	4298      	cmp	r0, r3
 80016f0:	d905      	bls.n	80016fe <ledNodeStatusIndication+0xfa>
				wsSetColor (i + 1, BLACK);
 80016f2:	2300      	movs	r3, #0
 80016f4:	4628      	mov	r0, r5
 80016f6:	461a      	mov	r2, r3
 80016f8:	4619      	mov	r1, r3
 80016fa:	f003 fbd9 	bl	8004eb0 <wsSetColor>
			if (nodes[i].disarmed && nodes[i].disarmRequest)
 80016fe:	7b63      	ldrb	r3, [r4, #13]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d05e      	beq.n	80017c2 <ledNodeStatusIndication+0x1be>
 8001704:	7ba3      	ldrb	r3, [r4, #14]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d155      	bne.n	80017b6 <ledNodeStatusIndication+0x1b2>
				wsSetColor (i + 1, MAGENTA);
 800170a:	2310      	movs	r3, #16
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	4628      	mov	r0, r5
 8001712:	f003 fbcd 	bl	8004eb0 <wsSetColor>
			if (nodes[i].activated == 0)
 8001716:	7c63      	ldrb	r3, [r4, #17]
 8001718:	b92b      	cbnz	r3, 8001726 <ledNodeStatusIndication+0x122>
				wsSetColor (i + 1, WHITE);
 800171a:	2310      	movs	r3, #16
 800171c:	4628      	mov	r0, r5
 800171e:	461a      	mov	r2, r3
 8001720:	4619      	mov	r1, r3
 8001722:	f003 fbc5 	bl	8004eb0 <wsSetColor>
			if (selectedNode == i && HAL_GetTick () - lastNodeChangeTick < DELAY_SELECTED_MARK && lastNodeChangeTick)
 8001726:	4b31      	ldr	r3, [pc, #196]	; (80017ec <ledNodeStatusIndication+0x1e8>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	4553      	cmp	r3, sl
 800172e:	d10c      	bne.n	800174a <ledNodeStatusIndication+0x146>
 8001730:	f003 fc92 	bl	8005058 <HAL_GetTick>
 8001734:	f241 3287 	movw	r2, #4999	; 0x1387
 8001738:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <ledNodeStatusIndication+0x1ec>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1ac0      	subs	r0, r0, r3
 800173e:	4290      	cmp	r0, r2
 8001740:	d803      	bhi.n	800174a <ledNodeStatusIndication+0x146>
 8001742:	b113      	cbz	r3, 800174a <ledNodeStatusIndication+0x146>
				wsDoubleBright (i + 1);
 8001744:	4628      	mov	r0, r5
 8001746:	f003 fbbf 	bl	8004ec8 <wsDoubleBright>
			if (HAL_GetTick () - nodes[i].lastContact < DELAY_SHOW_CONTACT && nodes[i].activated)
 800174a:	f003 fc85 	bl	8005058 <HAL_GetTick>
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	1ac0      	subs	r0, r0, r3
 8001752:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8001756:	4298      	cmp	r0, r3
 8001758:	d81a      	bhi.n	8001790 <ledNodeStatusIndication+0x18c>
 800175a:	7c63      	ldrb	r3, [r4, #17]
 800175c:	b1c3      	cbz	r3, 8001790 <ledNodeStatusIndication+0x18c>
					uint32_t temp = (HAL_GetTick () - nodes[i].lastContact) % 1000;
 800175e:	f003 fc7b 	bl	8005058 <HAL_GetTick>
 8001762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	1ac3      	subs	r3, r0, r3
 800176a:	fbb3 f0f2 	udiv	r0, r3, r2
 800176e:	fb02 3010 	mls	r0, r2, r0, r3
					if (temp < 500)
 8001772:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8001776:	d229      	bcs.n	80017cc <ledNodeStatusIndication+0x1c8>
						fTemp = 1.0f + (float) temp / 125.0f;
 8001778:	f7fe fda6 	bl	80002c8 <__aeabi_ui2f>
 800177c:	4639      	mov	r1, r7
 800177e:	f7fe feaf 	bl	80004e0 <__aeabi_fdiv>
 8001782:	4649      	mov	r1, r9
 8001784:	f7fe fcf0 	bl	8000168 <__addsf3>
						fTemp = 9.0f - (float) temp / 125.0f;
 8001788:	4601      	mov	r1, r0

					wsMultiply (i + 1, fTemp);
 800178a:	4628      	mov	r0, r5
 800178c:	f003 fbac 	bl	8004ee8 <wsMultiply>
	for (i = 0; i < MAX_NODES; i++)
 8001790:	2e08      	cmp	r6, #8
 8001792:	46b2      	mov	sl, r6
 8001794:	f104 0420 	add.w	r4, r4, #32
 8001798:	f47f af3e 	bne.w	8001618 <ledNodeStatusIndication+0x14>
					if (fastBlinkProvider)
						wsDoubleBright (i + 1);
#endif
				}
		}
}
 800179c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				blinkProvider ? wsSetColor (i + 1, CYAN) : wsSetColor (i + 1, BLACK);
 80017a0:	461a      	mov	r2, r3
 80017a2:	4619      	mov	r1, r3
 80017a4:	e755      	b.n	8001652 <ledNodeStatusIndication+0x4e>
				(nodes[i].opened && blinkProvider) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, BLUE); // Blinking - opened
 80017a6:	2200      	movs	r2, #0
 80017a8:	2310      	movs	r3, #16
 80017aa:	4611      	mov	r1, r2
 80017ac:	e763      	b.n	8001676 <ledNodeStatusIndication+0x72>
				(blinkProvider && nodes[i].alarm == ALARM_DOOR) ? wsSetColor (i + 1, BLACK) : wsSetColor (i + 1, RED); //Blinking - DOOR ALARM still - POWER ALARM
 80017ae:	2300      	movs	r3, #0
 80017b0:	2110      	movs	r1, #16
 80017b2:	461a      	mov	r2, r3
 80017b4:	e76f      	b.n	8001696 <ledNodeStatusIndication+0x92>
				wsSetColor (i + 1, ORANGE);
 80017b6:	2300      	movs	r3, #0
 80017b8:	2210      	movs	r2, #16
 80017ba:	2120      	movs	r1, #32
 80017bc:	4628      	mov	r0, r5
 80017be:	f003 fb77 	bl	8004eb0 <wsSetColor>
			if (nodes[i].disarmRequest != nodes[i].disarmed)
 80017c2:	7ba2      	ldrb	r2, [r4, #14]
 80017c4:	7b63      	ldrb	r3, [r4, #13]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d0a5      	beq.n	8001716 <ledNodeStatusIndication+0x112>
 80017ca:	e79e      	b.n	800170a <ledNodeStatusIndication+0x106>
						fTemp = 9.0f - (float) temp / 125.0f;
 80017cc:	f7fe fd7c 	bl	80002c8 <__aeabi_ui2f>
 80017d0:	4639      	mov	r1, r7
 80017d2:	f7fe fe85 	bl	80004e0 <__aeabi_fdiv>
 80017d6:	4601      	mov	r1, r0
 80017d8:	4640      	mov	r0, r8
 80017da:	f7fe fcc3 	bl	8000164 <__aeabi_fsub>
 80017de:	e7d3      	b.n	8001788 <ledNodeStatusIndication+0x184>
 80017e0:	20000ce0 	.word	0x20000ce0
 80017e4:	42fa0000 	.word	0x42fa0000
 80017e8:	20000de8 	.word	0x20000de8
 80017ec:	20000166 	.word	0x20000166
 80017f0:	2000012c 	.word	0x2000012c
 80017f4:	41100000 	.word	0x41100000
 80017f8:	20000a78 	.word	0x20000a78

080017fc <ledFillBlack>:

void ledFillBlack ()
{
 80017fc:	b510      	push	{r4, lr}
	int i;
	for (i = 0; i < MAX_NODES + 1; i++)
 80017fe:	2400      	movs	r4, #0
		wsSetColor (i, BLACK);
 8001800:	2300      	movs	r3, #0
 8001802:	b2e0      	uxtb	r0, r4
 8001804:	461a      	mov	r2, r3
 8001806:	4619      	mov	r1, r3
	for (i = 0; i < MAX_NODES + 1; i++)
 8001808:	3401      	adds	r4, #1
		wsSetColor (i, BLACK);
 800180a:	f003 fb51 	bl	8004eb0 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 800180e:	2c09      	cmp	r4, #9
 8001810:	d1f6      	bne.n	8001800 <ledFillBlack+0x4>
}
 8001812:	bd10      	pop	{r4, pc}

08001814 <ledRoutine>:
 */
void ledRoutine ()
{
	uint8_t i = 0;

	wsSetColor (0, BLACK);
 8001814:	2300      	movs	r3, #0
{
 8001816:	b510      	push	{r4, lr}

	if (myRadio.status == TX)
 8001818:	4c29      	ldr	r4, [pc, #164]	; (80018c0 <ledRoutine+0xac>)
	wsSetColor (0, BLACK);
 800181a:	461a      	mov	r2, r3
 800181c:	4619      	mov	r1, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f003 fb46 	bl	8004eb0 <wsSetColor>
	if (myRadio.status == TX)
 8001824:	7c22      	ldrb	r2, [r4, #16]
 8001826:	2a03      	cmp	r2, #3
 8001828:	d105      	bne.n	8001836 <ledRoutine+0x22>
		wsSetColor (0, RED);
 800182a:	2300      	movs	r3, #0
 800182c:	2110      	movs	r1, #16
 800182e:	461a      	mov	r2, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f003 fb3d 	bl	8004eb0 <wsSetColor>
	if (myRadio.signalDetected == 1)
 8001836:	7f23      	ldrb	r3, [r4, #28]
 8001838:	b12b      	cbz	r3, 8001846 <ledRoutine+0x32>
		wsSetColor (0, GREEN);
 800183a:	2300      	movs	r3, #0
 800183c:	2210      	movs	r2, #16
 800183e:	4619      	mov	r1, r3
 8001840:	4618      	mov	r0, r3
 8001842:	f003 fb35 	bl	8004eb0 <wsSetColor>
	if (HAL_GetTick () - lastUartConnect < 200)
 8001846:	f003 fc07 	bl	8005058 <HAL_GetTick>
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <ledRoutine+0xb0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	1ac0      	subs	r0, r0, r3
 8001850:	28c7      	cmp	r0, #199	; 0xc7
 8001852:	d805      	bhi.n	8001860 <ledRoutine+0x4c>
		wsSetColor (0, YELLOW);
 8001854:	2300      	movs	r3, #0
 8001856:	2210      	movs	r2, #16
 8001858:	4618      	mov	r0, r3
 800185a:	4611      	mov	r1, r2
 800185c:	f003 fb28 	bl	8004eb0 <wsSetColor>

	if (screenMode == smRegular)
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <ledRoutine+0xb4>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b92b      	cbnz	r3, 8001872 <ledRoutine+0x5e>
		{
			ledNodeStatusIndication ();
 8001866:	f7ff fecd 	bl	8001604 <ledNodeStatusIndication>
					wsSetColor (i, BLACK);
				}

		}
	wsPrepareArray ();
}
 800186a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	wsPrepareArray ();
 800186e:	f003 bb5f 	b.w	8004f30 <wsPrepareArray>
	else if (screenMode == smSaveConfig)
 8001872:	2b18      	cmp	r3, #24
 8001874:	d102      	bne.n	800187c <ledRoutine+0x68>
			ledFillBlack ();
 8001876:	f7ff ffc1 	bl	80017fc <ledFillBlack>
 800187a:	e7f6      	b.n	800186a <ledRoutine+0x56>
	else if (screenMode == smNodeAction)
 800187c:	2b1c      	cmp	r3, #28
 800187e:	f04f 0400 	mov.w	r4, #0
 8001882:	d112      	bne.n	80018aa <ledRoutine+0x96>
					wsSetColor (i, BLACK);
 8001884:	2300      	movs	r3, #0
 8001886:	b2e0      	uxtb	r0, r4
 8001888:	461a      	mov	r2, r3
 800188a:	4619      	mov	r1, r3
 800188c:	3401      	adds	r4, #1
 800188e:	f003 fb0f 	bl	8004eb0 <wsSetColor>
			for (i = 0; i < MAX_NODES + 1; i++)
 8001892:	2c09      	cmp	r4, #9
 8001894:	d1f6      	bne.n	8001884 <ledRoutine+0x70>
			wsSetColor (selectedNode + 1, WHITE);
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <ledRoutine+0xb8>)
 8001898:	7818      	ldrb	r0, [r3, #0]
 800189a:	2310      	movs	r3, #16
 800189c:	3001      	adds	r0, #1
 800189e:	461a      	mov	r2, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	b2c0      	uxtb	r0, r0
 80018a4:	f003 fb04 	bl	8004eb0 <wsSetColor>
 80018a8:	e7df      	b.n	800186a <ledRoutine+0x56>
					wsSetColor (i, BLACK);
 80018aa:	2300      	movs	r3, #0
 80018ac:	b2e0      	uxtb	r0, r4
 80018ae:	461a      	mov	r2, r3
 80018b0:	4619      	mov	r1, r3
 80018b2:	3401      	adds	r4, #1
 80018b4:	f003 fafc 	bl	8004eb0 <wsSetColor>
			for (i = 0; i < MAX_NODES + 1; i++)
 80018b8:	2c09      	cmp	r4, #9
 80018ba:	d1f6      	bne.n	80018aa <ledRoutine+0x96>
 80018bc:	e7d5      	b.n	800186a <ledRoutine+0x56>
 80018be:	bf00      	nop
 80018c0:	20000998 	.word	0x20000998
 80018c4:	200015c0 	.word	0x200015c0
 80018c8:	20000162 	.word	0x20000162
 80018cc:	20000166 	.word	0x20000166

080018d0 <ShowLogo>:
 * @brief Handles turn on logo
 * @param None
 * @retval None
 */
void ShowLogo ()
{
 80018d0:	b510      	push	{r4, lr}
	int i = 0;
	for (i = 0; i < MAX_NODES + 1; i++)
 80018d2:	2400      	movs	r4, #0
		{
			wsSetColor (i, WHITE);
 80018d4:	2310      	movs	r3, #16
 80018d6:	b2e0      	uxtb	r0, r4
 80018d8:	461a      	mov	r2, r3
 80018da:	4619      	mov	r1, r3
 80018dc:	f003 fae8 	bl	8004eb0 <wsSetColor>
	for (i = 0; i < MAX_NODES + 1; i++)
 80018e0:	3401      	adds	r4, #1
			wsPrepareArray ();
 80018e2:	f003 fb25 	bl	8004f30 <wsPrepareArray>
			HAL_Delay (20);
 80018e6:	2014      	movs	r0, #20
 80018e8:	f003 fbbc 	bl	8005064 <HAL_Delay>
	for (i = 0; i < MAX_NODES + 1; i++)
 80018ec:	2c09      	cmp	r4, #9
 80018ee:	d1f1      	bne.n	80018d4 <ShowLogo+0x4>
		}
	clearStrings ();
 80018f0:	f7ff fb00 	bl	8000ef4 <clearStrings>
	sprintf (string[0], "SX127* is OK ");
 80018f4:	4912      	ldr	r1, [pc, #72]	; (8001940 <ShowLogo+0x70>)
 80018f6:	4813      	ldr	r0, [pc, #76]	; (8001944 <ShowLogo+0x74>)
 80018f8:	f006 fa0a 	bl	8007d10 <strcpy>
	sprintf (string[1], "Module Firmware:");
 80018fc:	4912      	ldr	r1, [pc, #72]	; (8001948 <ShowLogo+0x78>)
 80018fe:	4813      	ldr	r0, [pc, #76]	; (800194c <ShowLogo+0x7c>)
 8001900:	f006 fa06 	bl	8007d10 <strcpy>
	sprintf (string[2], "0x%X", myRadio.revision);
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <ShowLogo+0x80>)
 8001906:	4913      	ldr	r1, [pc, #76]	; (8001954 <ShowLogo+0x84>)
 8001908:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
 800190c:	4812      	ldr	r0, [pc, #72]	; (8001958 <ShowLogo+0x88>)
 800190e:	f006 f9df 	bl	8007cd0 <siprintf>
	updateLcd ();
 8001912:	f7ff fb01 	bl	8000f18 <updateLcd>
	HAL_Delay (100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f003 fba4 	bl	8005064 <HAL_Delay>
	clearStrings ();
 800191c:	f7ff faea 	bl	8000ef4 <clearStrings>
	sprintf (string[0], "Firmware:");
 8001920:	490e      	ldr	r1, [pc, #56]	; (800195c <ShowLogo+0x8c>)
 8001922:	4808      	ldr	r0, [pc, #32]	; (8001944 <ShowLogo+0x74>)
 8001924:	f006 f9f4 	bl	8007d10 <strcpy>
	sprintf (string[1], "%lu", version);
 8001928:	4a0d      	ldr	r2, [pc, #52]	; (8001960 <ShowLogo+0x90>)
 800192a:	490e      	ldr	r1, [pc, #56]	; (8001964 <ShowLogo+0x94>)
 800192c:	4807      	ldr	r0, [pc, #28]	; (800194c <ShowLogo+0x7c>)
 800192e:	f006 f9cf 	bl	8007cd0 <siprintf>
	updateLcd ();
 8001932:	f7ff faf1 	bl	8000f18 <updateLcd>
	HAL_Delay (100);
}
 8001936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay (100);
 800193a:	2064      	movs	r0, #100	; 0x64
 800193c:	f003 bb92 	b.w	8005064 <HAL_Delay>
 8001940:	0800900d 	.word	0x0800900d
 8001944:	20000168 	.word	0x20000168
 8001948:	0800901b 	.word	0x0800901b
 800194c:	200001a8 	.word	0x200001a8
 8001950:	20000998 	.word	0x20000998
 8001954:	0800902c 	.word	0x0800902c
 8001958:	200001e8 	.word	0x200001e8
 800195c:	08009022 	.word	0x08009022
 8001960:	08082021 	.word	0x08082021
 8001964:	0800913a 	.word	0x0800913a

08001968 <changeDisarmNode>:
 * @param  selectedNode obvious
 * @retval None
 */
void changeDisarmNode (int16_t selectedNode)
{
	nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <changeDisarmNode+0x2c>)
 800196a:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 800196e:	7b93      	ldrb	r3, [r2, #14]
	txMes->adr = selectedNode;
	txMes->disarm = nodes[selectedNode].disarmRequest;
	txMes->message = MSG_DOWN_REQUEST;
	txMes->uplink = 0;
 8001970:	00c0      	lsls	r0, r0, #3
	nodes[selectedNode].disarmRequest = !nodes[selectedNode].disarmRequest;
 8001972:	fab3 f383 	clz	r3, r3
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	7393      	strb	r3, [r2, #14]
	txMes->adr = selectedNode;
 800197a:	4a07      	ldr	r2, [pc, #28]	; (8001998 <changeDisarmNode+0x30>)
	txMes->uplink = 0;
 800197c:	f040 0002 	orr.w	r0, r0, #2
	txMes->adr = selectedNode;
 8001980:	6812      	ldr	r2, [r2, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8001982:	7851      	ldrb	r1, [r2, #1]
	txMes->uplink = 0;
 8001984:	7010      	strb	r0, [r2, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 8001986:	f363 0100 	bfi	r1, r3, #0, #1
 800198a:	7051      	strb	r1, [r2, #1]
	SX127X_transmitAsync (&myRadio, 3);
 800198c:	4803      	ldr	r0, [pc, #12]	; (800199c <changeDisarmNode+0x34>)
 800198e:	2103      	movs	r1, #3
 8001990:	f002 be7e 	b.w	8004690 <SX127X_transmitAsync>
 8001994:	20000ce0 	.word	0x20000ce0
 8001998:	20000048 	.word	0x20000048
 800199c:	20000998 	.word	0x20000998

080019a0 <pingNode>:
 * @param  None
 * @retval None
 */
void pingNode (int16_t selectedNode)
{
	txMes->adr = selectedNode;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <pingNode+0x24>)
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <pingNode+0x28>)
	txMes->adr = selectedNode;
 80019a4:	681b      	ldr	r3, [r3, #0]
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80019a6:	eb02 1240 	add.w	r2, r2, r0, lsl #5
 80019aa:	7b91      	ldrb	r1, [r2, #14]
 80019ac:	785a      	ldrb	r2, [r3, #1]
	txMes->message = MSG_DOWN_REQUEST;
	txMes->uplink = 0;
 80019ae:	00c0      	lsls	r0, r0, #3
 80019b0:	f040 0002 	orr.w	r0, r0, #2
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80019b4:	f361 0200 	bfi	r2, r1, #0, #1
	txMes->uplink = 0;
 80019b8:	7018      	strb	r0, [r3, #0]
	SX127X_transmitAsync (&myRadio, 3);
 80019ba:	2103      	movs	r1, #3
 80019bc:	4803      	ldr	r0, [pc, #12]	; (80019cc <pingNode+0x2c>)
	txMes->disarm = nodes[selectedNode].disarmRequest;
 80019be:	705a      	strb	r2, [r3, #1]
	SX127X_transmitAsync (&myRadio, 3);
 80019c0:	f002 be66 	b.w	8004690 <SX127X_transmitAsync>
 80019c4:	20000048 	.word	0x20000048
 80019c8:	20000ce0 	.word	0x20000ce0
 80019cc:	20000998 	.word	0x20000998

080019d0 <button_back>:
 * @param  None
 * @retval None
 */
void button_back ()
{
	menuPosition = 0;
 80019d0:	2100      	movs	r1, #0
 80019d2:	481d      	ldr	r0, [pc, #116]	; (8001a48 <button_back+0x78>)
{
 80019d4:	b510      	push	{r4, lr}
	menuPosition = 0;
 80019d6:	7001      	strb	r1, [r0, #0]
	alarmOff ();
 80019d8:	f7ff fe00 	bl	80015dc <alarmOff>
	switch (screenMode)
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <button_back+0x7c>)
 80019de:	460a      	mov	r2, r1
 80019e0:	781c      	ldrb	r4, [r3, #0]
 80019e2:	2c1d      	cmp	r4, #29
 80019e4:	d82d      	bhi.n	8001a42 <button_back+0x72>
 80019e6:	e8df f004 	tbb	[pc, r4]
 80019ea:	1112      	.short	0x1112
 80019ec:	0f0f0f0f 	.word	0x0f0f0f0f
 80019f0:	18181818 	.word	0x18181818
 80019f4:	1b181818 	.word	0x1b181818
 80019f8:	1e1e1e1b 	.word	0x1e1e1e1b
 80019fc:	24242121 	.word	0x24242121
 8001a00:	0f0f2424 	.word	0x0f0f2424
 8001a04:	12110f0f 	.word	0x12110f0f
		case smRadioMenu:
		case smBaseMenu:
		case smNodeMenu:
		case smNetworkMenu:

			menuPosition = 0;
 8001a08:	7002      	strb	r2, [r0, #0]
			screenMode = smMainMenu;
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	701a      	strb	r2, [r3, #0]

		default:
			screenMode--;
	}

	flag.lcdRefreshRequest = 1;
 8001a0e:	4a10      	ldr	r2, [pc, #64]	; (8001a50 <button_back+0x80>)
 8001a10:	7813      	ldrb	r3, [r2, #0]
 8001a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a16:	7013      	strb	r3, [r2, #0]
}
 8001a18:	bd10      	pop	{r4, pc}
			menuPosition = 0;
 8001a1a:	7002      	strb	r2, [r0, #0]
			screenMode = smRadioMenu;
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	e7f5      	b.n	8001a0c <button_back+0x3c>
			menuPosition = 0;
 8001a20:	7002      	strb	r2, [r0, #0]
			screenMode = smBaseMenu;
 8001a22:	2203      	movs	r2, #3
 8001a24:	e7f2      	b.n	8001a0c <button_back+0x3c>
			menuPosition = 0;
 8001a26:	7002      	strb	r2, [r0, #0]
			screenMode = smNodeMenu;
 8001a28:	2204      	movs	r2, #4
 8001a2a:	e7ef      	b.n	8001a0c <button_back+0x3c>
			menuPosition = 0;
 8001a2c:	7002      	strb	r2, [r0, #0]
				screenMode = smNetworkMenu;
 8001a2e:	2205      	movs	r2, #5
 8001a30:	e7ec      	b.n	8001a0c <button_back+0x3c>
			if (cursorPos)
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <button_back+0x84>)
 8001a34:	f991 2000 	ldrsb.w	r2, [r1]
 8001a38:	2a00      	cmp	r2, #0
 8001a3a:	d0f8      	beq.n	8001a2e <button_back+0x5e>
				cursorPos--;
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	700a      	strb	r2, [r1, #0]
 8001a40:	e7e5      	b.n	8001a0e <button_back+0x3e>
			screenMode--;
 8001a42:	3c01      	subs	r4, #1
 8001a44:	701c      	strb	r4, [r3, #0]
 8001a46:	e7e2      	b.n	8001a0e <button_back+0x3e>
 8001a48:	2000014f 	.word	0x2000014f
 8001a4c:	20000162 	.word	0x20000162
 8001a50:	20000b4c 	.word	0x20000b4c
 8001a54:	20000122 	.word	0x20000122

08001a58 <lcdRoutine>:
 * @brief Forms and updates information on LCD, depends by selected screen mode
 * @param None
 * @retval None
 */
void lcdRoutine ()
{
 8001a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	clearStrings ();
 8001a5a:	f7ff fa4b 	bl	8000ef4 <clearStrings>
	switch (screenMode)
 8001a5e:	4bab      	ldr	r3, [pc, #684]	; (8001d0c <lcdRoutine+0x2b4>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b1d      	cmp	r3, #29
 8001a64:	f200 8082 	bhi.w	8001b6c <lcdRoutine+0x114>
 8001a68:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001a6c:	00fd001e 	.word	0x00fd001e
 8001a70:	01c2011f 	.word	0x01c2011f
 8001a74:	01e301d0 	.word	0x01e301d0
 8001a78:	023c0203 	.word	0x023c0203
 8001a7c:	0258024b 	.word	0x0258024b
 8001a80:	026a0261 	.word	0x026a0261
 8001a84:	02930272 	.word	0x02930272
 8001a88:	02ae02a3 	.word	0x02ae02a3
 8001a8c:	02c202b6 	.word	0x02c202b6
 8001a90:	02df02c8 	.word	0x02df02c8
 8001a94:	039402f2 	.word	0x039402f2
 8001a98:	03be03a9 	.word	0x03be03a9
 8001a9c:	03e703cf 	.word	0x03e703cf
 8001aa0:	03d503e0 	.word	0x03d503e0
 8001aa4:	045a0430 	.word	0x045a0430
	{
		case smRegular:

			if (HAL_GetTick () - lastNodeChangeTick < DELAY_SELECTED_MARK)
 8001aa8:	f003 fad6 	bl	8005058 <HAL_GetTick>
 8001aac:	4b98      	ldr	r3, [pc, #608]	; (8001d10 <lcdRoutine+0x2b8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	1ac0      	subs	r0, r0, r3
 8001ab2:	f241 3387 	movw	r3, #4999	; 0x1387
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	d864      	bhi.n	8001b84 <lcdRoutine+0x12c>
				{
					if (nodes[selectedNode].activated)
 8001aba:	4d96      	ldr	r5, [pc, #600]	; (8001d14 <lcdRoutine+0x2bc>)
 8001abc:	4c96      	ldr	r4, [pc, #600]	; (8001d18 <lcdRoutine+0x2c0>)
 8001abe:	f9b5 2000 	ldrsh.w	r2, [r5]
 8001ac2:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8001ac6:	7c59      	ldrb	r1, [r3, #17]
 8001ac8:	2900      	cmp	r1, #0
 8001aca:	d058      	beq.n	8001b7e <lcdRoutine+0x126>
						{
							sprintf (string[0], "Node %d Last RSSI:%ddB", lastMessageFrom, nodes[selectedNode].rssi);
 8001acc:	4a93      	ldr	r2, [pc, #588]	; (8001d1c <lcdRoutine+0x2c4>)
 8001ace:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	4992      	ldr	r1, [pc, #584]	; (8001d20 <lcdRoutine+0x2c8>)
 8001ad6:	4893      	ldr	r0, [pc, #588]	; (8001d24 <lcdRoutine+0x2cc>)
 8001ad8:	f006 f8fa 	bl	8007cd0 <siprintf>
							if (nodes[selectedNode].opened)
 8001adc:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001ae0:	015e      	lsls	r6, r3, #5
 8001ae2:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001ae6:	7bdb      	ldrb	r3, [r3, #15]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d044      	beq.n	8001b76 <lcdRoutine+0x11e>
								sprintf (string[1], "Door: Opened");
 8001aec:	498e      	ldr	r1, [pc, #568]	; (8001d28 <lcdRoutine+0x2d0>)
							else
								sprintf (string[1], "Door: Closed");
 8001aee:	488f      	ldr	r0, [pc, #572]	; (8001d2c <lcdRoutine+0x2d4>)
 8001af0:	f006 f90e 	bl	8007d10 <strcpy>
							if (nodes[selectedNode].powered)
 8001af4:	19a3      	adds	r3, r4, r6
 8001af6:	7c1b      	ldrb	r3, [r3, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d03e      	beq.n	8001b7a <lcdRoutine+0x122>
								sprintf (string[2], "Powered by PS");
 8001afc:	498c      	ldr	r1, [pc, #560]	; (8001d30 <lcdRoutine+0x2d8>)
							else
								sprintf (string[2], "Powered by battery");
							sprintf (string[3], "Voltage:%s V", floatToString2 (nodes[selectedNode].voltage));
 8001afe:	4426      	add	r6, r4
								sprintf (string[2], "Powered by battery");
 8001b00:	488c      	ldr	r0, [pc, #560]	; (8001d34 <lcdRoutine+0x2dc>)
 8001b02:	f006 f905 	bl	8007d10 <strcpy>
							sprintf (string[3], "Voltage:%s V", floatToString2 (nodes[selectedNode].voltage));
 8001b06:	6970      	ldr	r0, [r6, #20]
 8001b08:	f7ff f846 	bl	8000b98 <floatToString2>
 8001b0c:	498a      	ldr	r1, [pc, #552]	; (8001d38 <lcdRoutine+0x2e0>)
 8001b0e:	4602      	mov	r2, r0
 8001b10:	488a      	ldr	r0, [pc, #552]	; (8001d3c <lcdRoutine+0x2e4>)
 8001b12:	f006 f8dd 	bl	8007cd0 <siprintf>
							sprintf (string[4], "Temperature:%s C", floatToString1 (nodes[selectedNode].temperature));
 8001b16:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001b1a:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001b1e:	69d8      	ldr	r0, [r3, #28]
 8001b20:	f7ff f85e 	bl	8000be0 <floatToString1>
 8001b24:	4986      	ldr	r1, [pc, #536]	; (8001d40 <lcdRoutine+0x2e8>)
 8001b26:	4602      	mov	r2, r0
 8001b28:	4886      	ldr	r0, [pc, #536]	; (8001d44 <lcdRoutine+0x2ec>)
 8001b2a:	f006 f8d1 	bl	8007cd0 <siprintf>
							sprintf (string[5], "Next message in %d s", (int16_t) (nodes[selectedNode].NextMessageTick - HAL_GetTick ()) / 1000);
 8001b2e:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001b32:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001b36:	889e      	ldrh	r6, [r3, #4]
 8001b38:	f003 fa8e 	bl	8005058 <HAL_GetTick>
 8001b3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b40:	1a36      	subs	r6, r6, r0
 8001b42:	b236      	sxth	r6, r6
 8001b44:	fb96 f2f2 	sdiv	r2, r6, r2
 8001b48:	497f      	ldr	r1, [pc, #508]	; (8001d48 <lcdRoutine+0x2f0>)
 8001b4a:	4880      	ldr	r0, [pc, #512]	; (8001d4c <lcdRoutine+0x2f4>)
 8001b4c:	f006 f8c0 	bl	8007cd0 <siprintf>
							sprintf (string[6], "Alarm: %s", maskNames[nodes[selectedNode].masked]);
 8001b50:	f9b5 3000 	ldrsh.w	r3, [r5]
 8001b54:	497e      	ldr	r1, [pc, #504]	; (8001d50 <lcdRoutine+0x2f8>)
 8001b56:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8001b5a:	7b22      	ldrb	r2, [r4, #12]
 8001b5c:	4b7d      	ldr	r3, [pc, #500]	; (8001d54 <lcdRoutine+0x2fc>)
 8001b5e:	487e      	ldr	r0, [pc, #504]	; (8001d58 <lcdRoutine+0x300>)
 8001b60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
							sprintf (string[3], "Waiting # %d in %lu s", next, (nodes[next].NextMessageTick-HAL_GetTick())/1000);
							sprintf (string[4], "Last message from %d", lastMessageFrom);
							sprintf (string[5], "%s, %s", nodes[lastMessageFrom].opened ? "Door opened" : "Door closed",
												nodes[lastMessageFrom].powered ? "PS" : "Battery");
							sprintf (string[6], "T:%d, V:%s", (int)nodes[lastMessageFrom].temperature, floatToString1 (nodes[lastMessageFrom].voltage));
							sprintf (string[7], "Delay:%d", nodes[lastMessageFrom].delay);
 8001b64:	f006 f8b4 	bl	8007cd0 <siprintf>
						}

				}
			updateLcd ();
 8001b68:	f7ff f9d6 	bl	8000f18 <updateLcd>
			string[selectedMode][0] = 0x83;

			break;
	}
	updateLcd ();
}
 8001b6c:	b003      	add	sp, #12
 8001b6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	updateLcd ();
 8001b72:	f7ff b9d1 	b.w	8000f18 <updateLcd>
								sprintf (string[1], "Door: Closed");
 8001b76:	4979      	ldr	r1, [pc, #484]	; (8001d5c <lcdRoutine+0x304>)
 8001b78:	e7b9      	b.n	8001aee <lcdRoutine+0x96>
								sprintf (string[2], "Powered by battery");
 8001b7a:	4979      	ldr	r1, [pc, #484]	; (8001d60 <lcdRoutine+0x308>)
 8001b7c:	e7bf      	b.n	8001afe <lcdRoutine+0xa6>
						sprintf (string[0], "Node %d not activated", selectedNode);
 8001b7e:	4979      	ldr	r1, [pc, #484]	; (8001d64 <lcdRoutine+0x30c>)
 8001b80:	4868      	ldr	r0, [pc, #416]	; (8001d24 <lcdRoutine+0x2cc>)
 8001b82:	e7ef      	b.n	8001b64 <lcdRoutine+0x10c>
					sprintf (string[0], "Up:%lu d & %lu:%02lu:%02lu ", upTime / 86400, upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8001b84:	203c      	movs	r0, #60	; 0x3c
 8001b86:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001b8a:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <lcdRoutine+0x310>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	2318      	movs	r3, #24
 8001b90:	fbb2 f5f0 	udiv	r5, r2, r0
 8001b94:	fbb2 f1f1 	udiv	r1, r2, r1
 8001b98:	fb00 2415 	mls	r4, r0, r5, r2
 8001b9c:	9401      	str	r4, [sp, #4]
 8001b9e:	fbb5 f4f0 	udiv	r4, r5, r0
 8001ba2:	fbb1 f6f3 	udiv	r6, r1, r3
 8001ba6:	fb00 5014 	mls	r0, r0, r4, r5
 8001baa:	fb03 1316 	mls	r3, r3, r6, r1
 8001bae:	496f      	ldr	r1, [pc, #444]	; (8001d6c <lcdRoutine+0x314>)
 8001bb0:	9000      	str	r0, [sp, #0]
 8001bb2:	fbb2 f2f1 	udiv	r2, r2, r1
 8001bb6:	485b      	ldr	r0, [pc, #364]	; (8001d24 <lcdRoutine+0x2cc>)
 8001bb8:	496d      	ldr	r1, [pc, #436]	; (8001d70 <lcdRoutine+0x318>)
 8001bba:	f006 f889 	bl	8007cd0 <siprintf>
					sprintf (string[1], "Msg:%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 8001bbe:	4b6d      	ldr	r3, [pc, #436]	; (8001d74 <lcdRoutine+0x31c>)
 8001bc0:	4a6d      	ldr	r2, [pc, #436]	; (8001d78 <lcdRoutine+0x320>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	496d      	ldr	r1, [pc, #436]	; (8001d7c <lcdRoutine+0x324>)
 8001bc8:	4858      	ldr	r0, [pc, #352]	; (8001d2c <lcdRoutine+0x2d4>)
 8001bca:	f006 f881 	bl	8007cd0 <siprintf>
					sprintf (string[2], "Max delay: %lu", absoluteMaxDelay);
 8001bce:	4b6c      	ldr	r3, [pc, #432]	; (8001d80 <lcdRoutine+0x328>)
					if (lastMessageFrom != 255)
 8001bd0:	4d52      	ldr	r5, [pc, #328]	; (8001d1c <lcdRoutine+0x2c4>)
					sprintf (string[2], "Max delay: %lu", absoluteMaxDelay);
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	496b      	ldr	r1, [pc, #428]	; (8001d84 <lcdRoutine+0x32c>)
 8001bd6:	4857      	ldr	r0, [pc, #348]	; (8001d34 <lcdRoutine+0x2dc>)
 8001bd8:	f006 f87a 	bl	8007cd0 <siprintf>
					if (lastMessageFrom != 255)
 8001bdc:	782b      	ldrb	r3, [r5, #0]
 8001bde:	2bff      	cmp	r3, #255	; 0xff
 8001be0:	d0c2      	beq.n	8001b68 <lcdRoutine+0x110>
							uint8_t next=nextNodeAwaited();
 8001be2:	f7ff fb0d 	bl	8001200 <nextNodeAwaited>
							sprintf (string[3], "Waiting # %d in %lu s", next, (nodes[next].NextMessageTick-HAL_GetTick())/1000);
 8001be6:	4c4c      	ldr	r4, [pc, #304]	; (8001d18 <lcdRoutine+0x2c0>)
							uint8_t next=nextNodeAwaited();
 8001be8:	4606      	mov	r6, r0
							sprintf (string[3], "Waiting # %d in %lu s", next, (nodes[next].NextMessageTick-HAL_GetTick())/1000);
 8001bea:	eb04 1340 	add.w	r3, r4, r0, lsl #5
 8001bee:	685f      	ldr	r7, [r3, #4]
 8001bf0:	f003 fa32 	bl	8005058 <HAL_GetTick>
 8001bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf8:	1a3f      	subs	r7, r7, r0
 8001bfa:	fbb7 f3f3 	udiv	r3, r7, r3
 8001bfe:	4632      	mov	r2, r6
 8001c00:	4961      	ldr	r1, [pc, #388]	; (8001d88 <lcdRoutine+0x330>)
 8001c02:	484e      	ldr	r0, [pc, #312]	; (8001d3c <lcdRoutine+0x2e4>)
 8001c04:	f006 f864 	bl	8007cd0 <siprintf>
							sprintf (string[4], "Last message from %d", lastMessageFrom);
 8001c08:	782a      	ldrb	r2, [r5, #0]
 8001c0a:	4960      	ldr	r1, [pc, #384]	; (8001d8c <lcdRoutine+0x334>)
 8001c0c:	484d      	ldr	r0, [pc, #308]	; (8001d44 <lcdRoutine+0x2ec>)
 8001c0e:	f006 f85f 	bl	8007cd0 <siprintf>
							sprintf (string[5], "%s, %s", nodes[lastMessageFrom].opened ? "Door opened" : "Door closed",
 8001c12:	782b      	ldrb	r3, [r5, #0]
 8001c14:	4a5e      	ldr	r2, [pc, #376]	; (8001d90 <lcdRoutine+0x338>)
 8001c16:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 8001c1a:	7bd8      	ldrb	r0, [r3, #15]
 8001c1c:	7c19      	ldrb	r1, [r3, #16]
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <lcdRoutine+0x33c>)
 8001c20:	2900      	cmp	r1, #0
 8001c22:	bf08      	it	eq
 8001c24:	4613      	moveq	r3, r2
 8001c26:	495c      	ldr	r1, [pc, #368]	; (8001d98 <lcdRoutine+0x340>)
 8001c28:	4a5c      	ldr	r2, [pc, #368]	; (8001d9c <lcdRoutine+0x344>)
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	bf08      	it	eq
 8001c2e:	460a      	moveq	r2, r1
 8001c30:	495b      	ldr	r1, [pc, #364]	; (8001da0 <lcdRoutine+0x348>)
 8001c32:	4846      	ldr	r0, [pc, #280]	; (8001d4c <lcdRoutine+0x2f4>)
 8001c34:	f006 f84c 	bl	8007cd0 <siprintf>
							sprintf (string[6], "T:%d, V:%s", (int)nodes[lastMessageFrom].temperature, floatToString1 (nodes[lastMessageFrom].voltage));
 8001c38:	782e      	ldrb	r6, [r5, #0]
 8001c3a:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 8001c3e:	69f0      	ldr	r0, [r6, #28]
 8001c40:	f7fe fd60 	bl	8000704 <__aeabi_f2iz>
 8001c44:	4607      	mov	r7, r0
 8001c46:	6970      	ldr	r0, [r6, #20]
 8001c48:	f7fe ffca 	bl	8000be0 <floatToString1>
 8001c4c:	463a      	mov	r2, r7
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4954      	ldr	r1, [pc, #336]	; (8001da4 <lcdRoutine+0x34c>)
 8001c52:	4841      	ldr	r0, [pc, #260]	; (8001d58 <lcdRoutine+0x300>)
 8001c54:	f006 f83c 	bl	8007cd0 <siprintf>
							sprintf (string[7], "Delay:%d", nodes[lastMessageFrom].delay);
 8001c58:	782b      	ldrb	r3, [r5, #0]
 8001c5a:	4953      	ldr	r1, [pc, #332]	; (8001da8 <lcdRoutine+0x350>)
 8001c5c:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8001c60:	8922      	ldrh	r2, [r4, #8]
 8001c62:	4852      	ldr	r0, [pc, #328]	; (8001dac <lcdRoutine+0x354>)
 8001c64:	e77e      	b.n	8001b64 <lcdRoutine+0x10c>
			sprintf (string[0], "Main Menu");
 8001c66:	4c2f      	ldr	r4, [pc, #188]	; (8001d24 <lcdRoutine+0x2cc>)
 8001c68:	4951      	ldr	r1, [pc, #324]	; (8001db0 <lcdRoutine+0x358>)
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f006 f850 	bl	8007d10 <strcpy>
			sprintf (string[1], " Radio Settings");
 8001c70:	4950      	ldr	r1, [pc, #320]	; (8001db4 <lcdRoutine+0x35c>)
 8001c72:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001c76:	f006 f84b 	bl	8007d10 <strcpy>
			sprintf (string[2], " Base Settings");
 8001c7a:	494f      	ldr	r1, [pc, #316]	; (8001db8 <lcdRoutine+0x360>)
 8001c7c:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8001c80:	f006 f846 	bl	8007d10 <strcpy>
			sprintf (string[3], " Node Settings");
 8001c84:	494d      	ldr	r1, [pc, #308]	; (8001dbc <lcdRoutine+0x364>)
 8001c86:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8001c8a:	f006 f841 	bl	8007d10 <strcpy>
			sprintf (string[4], " Network Settings");
 8001c8e:	494c      	ldr	r1, [pc, #304]	; (8001dc0 <lcdRoutine+0x368>)
 8001c90:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8001c94:	f006 f83c 	bl	8007d10 <strcpy>
			sprintf (string[5], " Save Settings");
 8001c98:	494a      	ldr	r1, [pc, #296]	; (8001dc4 <lcdRoutine+0x36c>)
 8001c9a:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8001c9e:	f006 f837 	bl	8007d10 <strcpy>
			sprintf (string[6], " Info");
 8001ca2:	4949      	ldr	r1, [pc, #292]	; (8001dc8 <lcdRoutine+0x370>)
			sprintf (string[6], " Set Host");
 8001ca4:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8001ca8:	e025      	b.n	8001cf6 <lcdRoutine+0x29e>
			sprintf (string[0], "Radio settings");
 8001caa:	4c1e      	ldr	r4, [pc, #120]	; (8001d24 <lcdRoutine+0x2cc>)
 8001cac:	4947      	ldr	r1, [pc, #284]	; (8001dcc <lcdRoutine+0x374>)
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f006 f82e 	bl	8007d10 <strcpy>
			sprintf (string[1], " Frequency");
 8001cb4:	4946      	ldr	r1, [pc, #280]	; (8001dd0 <lcdRoutine+0x378>)
 8001cb6:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001cba:	f006 f829 	bl	8007d10 <strcpy>
			sprintf (string[2], " Bandwidth");
 8001cbe:	4945      	ldr	r1, [pc, #276]	; (8001dd4 <lcdRoutine+0x37c>)
 8001cc0:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8001cc4:	f006 f824 	bl	8007d10 <strcpy>
			sprintf (string[3], " Spreading Factor");
 8001cc8:	4943      	ldr	r1, [pc, #268]	; (8001dd8 <lcdRoutine+0x380>)
 8001cca:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8001cce:	f006 f81f 	bl	8007d10 <strcpy>
			sprintf (string[4], " SyncWord");
 8001cd2:	4942      	ldr	r1, [pc, #264]	; (8001ddc <lcdRoutine+0x384>)
 8001cd4:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8001cd8:	f006 f81a 	bl	8007d10 <strcpy>
			sprintf (string[5], " Coding rate");
 8001cdc:	4940      	ldr	r1, [pc, #256]	; (8001de0 <lcdRoutine+0x388>)
 8001cde:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8001ce2:	f006 f815 	bl	8007d10 <strcpy>
			sprintf (string[6], " Preamble");
 8001ce6:	493f      	ldr	r1, [pc, #252]	; (8001de4 <lcdRoutine+0x38c>)
 8001ce8:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8001cec:	f006 f810 	bl	8007d10 <strcpy>
			sprintf (string[7], " Power");
 8001cf0:	493d      	ldr	r1, [pc, #244]	; (8001de8 <lcdRoutine+0x390>)
 8001cf2:	f504 70e0 	add.w	r0, r4, #448	; 0x1c0
			sprintf (string[4], " Config Node");
 8001cf6:	f006 f80b 	bl	8007d10 <strcpy>
			string[1 + menuPosition][0] = 0x83;
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <lcdRoutine+0x394>)
 8001cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8001d00:	eb04 1483 	add.w	r4, r4, r3, lsl #6
 8001d04:	2383      	movs	r3, #131	; 0x83
 8001d06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			break;
 8001d0a:	e72f      	b.n	8001b6c <lcdRoutine+0x114>
 8001d0c:	20000162 	.word	0x20000162
 8001d10:	2000012c 	.word	0x2000012c
 8001d14:	20000166 	.word	0x20000166
 8001d18:	20000ce0 	.word	0x20000ce0
 8001d1c:	2000002c 	.word	0x2000002c
 8001d20:	08009062 	.word	0x08009062
 8001d24:	20000168 	.word	0x20000168
 8001d28:	08009079 	.word	0x08009079
 8001d2c:	200001a8 	.word	0x200001a8
 8001d30:	08009093 	.word	0x08009093
 8001d34:	200001e8 	.word	0x200001e8
 8001d38:	080090b4 	.word	0x080090b4
 8001d3c:	20000228 	.word	0x20000228
 8001d40:	080090c1 	.word	0x080090c1
 8001d44:	20000268 	.word	0x20000268
 8001d48:	080090d2 	.word	0x080090d2
 8001d4c:	200002a8 	.word	0x200002a8
 8001d50:	080090e7 	.word	0x080090e7
 8001d54:	20000030 	.word	0x20000030
 8001d58:	200002e8 	.word	0x200002e8
 8001d5c:	08009086 	.word	0x08009086
 8001d60:	080090a1 	.word	0x080090a1
 8001d64:	080090f1 	.word	0x080090f1
 8001d68:	20000b40 	.word	0x20000b40
 8001d6c:	00015180 	.word	0x00015180
 8001d70:	08009107 	.word	0x08009107
 8001d74:	20000154 	.word	0x20000154
 8001d78:	20000158 	.word	0x20000158
 8001d7c:	08009123 	.word	0x08009123
 8001d80:	2000011c 	.word	0x2000011c
 8001d84:	0800912f 	.word	0x0800912f
 8001d88:	0800913e 	.word	0x0800913e
 8001d8c:	08009154 	.word	0x08009154
 8001d90:	08009049 	.word	0x08009049
 8001d94:	0800909e 	.word	0x0800909e
 8001d98:	0800903d 	.word	0x0800903d
 8001d9c:	08009031 	.word	0x08009031
 8001da0:	08009169 	.word	0x08009169
 8001da4:	08009170 	.word	0x08009170
 8001da8:	0800917b 	.word	0x0800917b
 8001dac:	20000328 	.word	0x20000328
 8001db0:	08009184 	.word	0x08009184
 8001db4:	0800918e 	.word	0x0800918e
 8001db8:	0800919e 	.word	0x0800919e
 8001dbc:	080091ad 	.word	0x080091ad
 8001dc0:	080091bc 	.word	0x080091bc
 8001dc4:	080091ce 	.word	0x080091ce
 8001dc8:	080091dd 	.word	0x080091dd
 8001dcc:	080091e3 	.word	0x080091e3
 8001dd0:	080091f2 	.word	0x080091f2
 8001dd4:	080091fd 	.word	0x080091fd
 8001dd8:	08009208 	.word	0x08009208
 8001ddc:	0800921a 	.word	0x0800921a
 8001de0:	08009224 	.word	0x08009224
 8001de4:	08009231 	.word	0x08009231
 8001de8:	0800923b 	.word	0x0800923b
 8001dec:	2000014f 	.word	0x2000014f
			sprintf (string[0], "Base settings");
 8001df0:	4ca4      	ldr	r4, [pc, #656]	; (8002084 <lcdRoutine+0x62c>)
 8001df2:	49a5      	ldr	r1, [pc, #660]	; (8002088 <lcdRoutine+0x630>)
 8001df4:	4620      	mov	r0, r4
 8001df6:	f005 ff8b 	bl	8007d10 <strcpy>
			sprintf (string[1], " Warning Delay 1");
 8001dfa:	49a4      	ldr	r1, [pc, #656]	; (800208c <lcdRoutine+0x634>)
 8001dfc:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001e00:	f005 ff86 	bl	8007d10 <strcpy>
			sprintf (string[2], " Warning Delay 2");
 8001e04:	49a2      	ldr	r1, [pc, #648]	; (8002090 <lcdRoutine+0x638>)
 8001e06:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8001e0a:	e774      	b.n	8001cf6 <lcdRoutine+0x29e>
			sprintf (string[0], "Node settings");
 8001e0c:	4c9d      	ldr	r4, [pc, #628]	; (8002084 <lcdRoutine+0x62c>)
 8001e0e:	49a1      	ldr	r1, [pc, #644]	; (8002094 <lcdRoutine+0x63c>)
 8001e10:	4620      	mov	r0, r4
 8001e12:	f005 ff7d 	bl	8007d10 <strcpy>
			sprintf (string[1], " Working Interval");
 8001e16:	49a0      	ldr	r1, [pc, #640]	; (8002098 <lcdRoutine+0x640>)
 8001e18:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001e1c:	f005 ff78 	bl	8007d10 <strcpy>
			sprintf (string[2], " Use LED");
 8001e20:	499e      	ldr	r1, [pc, #632]	; (800209c <lcdRoutine+0x644>)
 8001e22:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8001e26:	f005 ff73 	bl	8007d10 <strcpy>
			sprintf (string[3], " Clean saved data");
 8001e2a:	499d      	ldr	r1, [pc, #628]	; (80020a0 <lcdRoutine+0x648>)
 8001e2c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8001e30:	e761      	b.n	8001cf6 <lcdRoutine+0x29e>
			sprintf (string[0], "Network settings");
 8001e32:	4c94      	ldr	r4, [pc, #592]	; (8002084 <lcdRoutine+0x62c>)
 8001e34:	499b      	ldr	r1, [pc, #620]	; (80020a4 <lcdRoutine+0x64c>)
 8001e36:	4620      	mov	r0, r4
 8001e38:	f005 ff6a 	bl	8007d10 <strcpy>
			sprintf (string[1], " Refresh Network List");
 8001e3c:	499a      	ldr	r1, [pc, #616]	; (80020a8 <lcdRoutine+0x650>)
 8001e3e:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001e42:	f005 ff65 	bl	8007d10 <strcpy>
			sprintf (string[2], " Select Network");
 8001e46:	4999      	ldr	r1, [pc, #612]	; (80020ac <lcdRoutine+0x654>)
 8001e48:	f104 0080 	add.w	r0, r4, #128	; 0x80
 8001e4c:	f005 ff60 	bl	8007d10 <strcpy>
			sprintf (string[3], " Set WiFi Password");
 8001e50:	4997      	ldr	r1, [pc, #604]	; (80020b0 <lcdRoutine+0x658>)
 8001e52:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8001e56:	f005 ff5b 	bl	8007d10 <strcpy>
			sprintf (string[4], " Set Server Password");
 8001e5a:	4996      	ldr	r1, [pc, #600]	; (80020b4 <lcdRoutine+0x65c>)
 8001e5c:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8001e60:	f005 ff56 	bl	8007d10 <strcpy>
			sprintf (string[5], " Set BaseID");
 8001e64:	4994      	ldr	r1, [pc, #592]	; (80020b8 <lcdRoutine+0x660>)
 8001e66:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 8001e6a:	f005 ff51 	bl	8007d10 <strcpy>
			sprintf (string[6], " Set Host");
 8001e6e:	4993      	ldr	r1, [pc, #588]	; (80020bc <lcdRoutine+0x664>)
 8001e70:	e718      	b.n	8001ca4 <lcdRoutine+0x24c>
			sprintf (string[0], "Frequency");
 8001e72:	4993      	ldr	r1, [pc, #588]	; (80020c0 <lcdRoutine+0x668>)
 8001e74:	4883      	ldr	r0, [pc, #524]	; (8002084 <lcdRoutine+0x62c>)
 8001e76:	f005 ff4b 	bl	8007d10 <strcpy>
			sprintf (string[1], "%03ld.%02ld MHz", settings.realFrequency / 1000000, (settings.realFrequency / 10000) % 100);
 8001e7a:	f242 7110 	movw	r1, #10000	; 0x2710
 8001e7e:	4b91      	ldr	r3, [pc, #580]	; (80020c4 <lcdRoutine+0x66c>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	2364      	movs	r3, #100	; 0x64
 8001e84:	fbb2 f1f1 	udiv	r1, r2, r1
 8001e88:	fbb1 f0f3 	udiv	r0, r1, r3
 8001e8c:	fb03 1310 	mls	r3, r3, r0, r1
 8001e90:	498d      	ldr	r1, [pc, #564]	; (80020c8 <lcdRoutine+0x670>)
 8001e92:	488e      	ldr	r0, [pc, #568]	; (80020cc <lcdRoutine+0x674>)
 8001e94:	fbb2 f2f1 	udiv	r2, r2, r1
 8001e98:	498d      	ldr	r1, [pc, #564]	; (80020d0 <lcdRoutine+0x678>)
 8001e9a:	f005 ff19 	bl	8007cd0 <siprintf>
			if (currentInterval != BAD_INTERVAL)
 8001e9e:	4e8d      	ldr	r6, [pc, #564]	; (80020d4 <lcdRoutine+0x67c>)
 8001ea0:	f996 3000 	ldrsb.w	r3, [r6]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	d018      	beq.n	8001eda <lcdRoutine+0x482>
					sprintf (string[2], "Power:%u dB", legalFreq.interval[currentInterval].maxPower);
 8001ea8:	250c      	movs	r5, #12
 8001eaa:	4c8b      	ldr	r4, [pc, #556]	; (80020d8 <lcdRoutine+0x680>)
 8001eac:	498b      	ldr	r1, [pc, #556]	; (80020dc <lcdRoutine+0x684>)
 8001eae:	fb05 4303 	mla	r3, r5, r3, r4
 8001eb2:	488b      	ldr	r0, [pc, #556]	; (80020e0 <lcdRoutine+0x688>)
 8001eb4:	7b1a      	ldrb	r2, [r3, #12]
 8001eb6:	f005 ff0b 	bl	8007cd0 <siprintf>
					sprintf (string[3], "Air use.%u.%u%%", legalFreq.interval[currentInterval].maxAirUse / 10,
 8001eba:	f996 3000 	ldrsb.w	r3, [r6]
 8001ebe:	4889      	ldr	r0, [pc, #548]	; (80020e4 <lcdRoutine+0x68c>)
 8001ec0:	fb05 4303 	mla	r3, r5, r3, r4
 8001ec4:	89d9      	ldrh	r1, [r3, #14]
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	fbb1 f2f3 	udiv	r2, r1, r3
 8001ecc:	fb03 1312 	mls	r3, r3, r2, r1
 8001ed0:	4985      	ldr	r1, [pc, #532]	; (80020e8 <lcdRoutine+0x690>)
 8001ed2:	b29b      	uxth	r3, r3
			sprintf (string[1], "%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 8001ed4:	f005 fefc 	bl	8007cd0 <siprintf>
			break;
 8001ed8:	e648      	b.n	8001b6c <lcdRoutine+0x114>
					sprintf (string[3], "Not within ISM Band!");
 8001eda:	4984      	ldr	r1, [pc, #528]	; (80020ec <lcdRoutine+0x694>)
				sprintf (string[3], "Done");
 8001edc:	4881      	ldr	r0, [pc, #516]	; (80020e4 <lcdRoutine+0x68c>)
			sprintf (string[1], "OK:Yes BACK:No");
 8001ede:	f005 ff17 	bl	8007d10 <strcpy>
			break;
 8001ee2:	e643      	b.n	8001b6c <lcdRoutine+0x114>
			sprintf (string[0], "Spreading");
 8001ee4:	4982      	ldr	r1, [pc, #520]	; (80020f0 <lcdRoutine+0x698>)
 8001ee6:	4867      	ldr	r0, [pc, #412]	; (8002084 <lcdRoutine+0x62c>)
 8001ee8:	f005 ff12 	bl	8007d10 <strcpy>
			sprintf (string[1], "factor");
 8001eec:	4981      	ldr	r1, [pc, #516]	; (80020f4 <lcdRoutine+0x69c>)
 8001eee:	4877      	ldr	r0, [pc, #476]	; (80020cc <lcdRoutine+0x674>)
 8001ef0:	f005 ff0e 	bl	8007d10 <strcpy>
			sprintf (string[2], "%d", settings.sf);
 8001ef4:	4b73      	ldr	r3, [pc, #460]	; (80020c4 <lcdRoutine+0x66c>)
 8001ef6:	4980      	ldr	r1, [pc, #512]	; (80020f8 <lcdRoutine+0x6a0>)
 8001ef8:	7b9a      	ldrb	r2, [r3, #14]
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8001efa:	4879      	ldr	r0, [pc, #484]	; (80020e0 <lcdRoutine+0x688>)
			sprintf (string[1], "%lu s", nodeSettings.workInterval);
 8001efc:	f005 fee8 	bl	8007cd0 <siprintf>
			break;
 8001f00:	e634      	b.n	8001b6c <lcdRoutine+0x114>
			sprintf (string[0], "Bandwidth");
 8001f02:	497e      	ldr	r1, [pc, #504]	; (80020fc <lcdRoutine+0x6a4>)
 8001f04:	485f      	ldr	r0, [pc, #380]	; (8002084 <lcdRoutine+0x62c>)
 8001f06:	f005 ff03 	bl	8007d10 <strcpy>
			sprintf (string[1], "%s", bandwidthNames[settings.bw]);
 8001f0a:	4b6e      	ldr	r3, [pc, #440]	; (80020c4 <lcdRoutine+0x66c>)
 8001f0c:	486f      	ldr	r0, [pc, #444]	; (80020cc <lcdRoutine+0x674>)
 8001f0e:	7bda      	ldrb	r2, [r3, #15]
 8001f10:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <lcdRoutine+0x6a8>)
 8001f12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001f16:	f005 fefb 	bl	8007d10 <strcpy>
 8001f1a:	e7c0      	b.n	8001e9e <lcdRoutine+0x446>
			sprintf (string[0], "SyncWord");
 8001f1c:	4979      	ldr	r1, [pc, #484]	; (8002104 <lcdRoutine+0x6ac>)
 8001f1e:	4859      	ldr	r0, [pc, #356]	; (8002084 <lcdRoutine+0x62c>)
 8001f20:	f005 fef6 	bl	8007d10 <strcpy>
			sprintf (string[1], "0x%X", settings.syncWord);
 8001f24:	4b67      	ldr	r3, [pc, #412]	; (80020c4 <lcdRoutine+0x66c>)
 8001f26:	4978      	ldr	r1, [pc, #480]	; (8002108 <lcdRoutine+0x6b0>)
 8001f28:	7c5a      	ldrb	r2, [r3, #17]
			sprintf (string[1], "%lu s", nodeSettings.workInterval);
 8001f2a:	4868      	ldr	r0, [pc, #416]	; (80020cc <lcdRoutine+0x674>)
 8001f2c:	e7e6      	b.n	8001efc <lcdRoutine+0x4a4>
			sprintf (string[0], "Coding rate");
 8001f2e:	4977      	ldr	r1, [pc, #476]	; (800210c <lcdRoutine+0x6b4>)
 8001f30:	4854      	ldr	r0, [pc, #336]	; (8002084 <lcdRoutine+0x62c>)
 8001f32:	f005 feed 	bl	8007d10 <strcpy>
			sprintf (string[1], "4/%d", settings.cr + 4);
 8001f36:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <lcdRoutine+0x66c>)
 8001f38:	4975      	ldr	r1, [pc, #468]	; (8002110 <lcdRoutine+0x6b8>)
 8001f3a:	7c1a      	ldrb	r2, [r3, #16]
 8001f3c:	3204      	adds	r2, #4
 8001f3e:	e7f4      	b.n	8001f2a <lcdRoutine+0x4d2>
			sprintf (string[0], "Preamble");
 8001f40:	4974      	ldr	r1, [pc, #464]	; (8002114 <lcdRoutine+0x6bc>)
 8001f42:	4850      	ldr	r0, [pc, #320]	; (8002084 <lcdRoutine+0x62c>)
 8001f44:	f005 fee4 	bl	8007d10 <strcpy>
			sprintf (string[1], "%d sym", settings.preamble);
 8001f48:	4b5e      	ldr	r3, [pc, #376]	; (80020c4 <lcdRoutine+0x66c>)
 8001f4a:	4973      	ldr	r1, [pc, #460]	; (8002118 <lcdRoutine+0x6c0>)
 8001f4c:	899a      	ldrh	r2, [r3, #12]
 8001f4e:	e7ec      	b.n	8001f2a <lcdRoutine+0x4d2>
			sprintf (string[0], "Transmission power");
 8001f50:	4972      	ldr	r1, [pc, #456]	; (800211c <lcdRoutine+0x6c4>)
 8001f52:	484c      	ldr	r0, [pc, #304]	; (8002084 <lcdRoutine+0x62c>)
 8001f54:	f005 fedc 	bl	8007d10 <strcpy>
			sprintf (string[1], "%d dBm (%d mW)", settings.power, mW[settings.power - 10]);
 8001f58:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <lcdRoutine+0x66c>)
 8001f5a:	4971      	ldr	r1, [pc, #452]	; (8002120 <lcdRoutine+0x6c8>)
 8001f5c:	7c9a      	ldrb	r2, [r3, #18]
 8001f5e:	4b71      	ldr	r3, [pc, #452]	; (8002124 <lcdRoutine+0x6cc>)
 8001f60:	485a      	ldr	r0, [pc, #360]	; (80020cc <lcdRoutine+0x674>)
 8001f62:	4413      	add	r3, r2
 8001f64:	f813 3c0a 	ldrb.w	r3, [r3, #-10]
 8001f68:	f005 feb2 	bl	8007cd0 <siprintf>
			if (currentInterval != BAD_INTERVAL)
 8001f6c:	4b59      	ldr	r3, [pc, #356]	; (80020d4 <lcdRoutine+0x67c>)
 8001f6e:	f993 4000 	ldrsb.w	r4, [r3]
 8001f72:	1c63      	adds	r3, r4, #1
 8001f74:	d00b      	beq.n	8001f8e <lcdRoutine+0x536>
					sprintf (string[2], "For this frequency");
 8001f76:	496c      	ldr	r1, [pc, #432]	; (8002128 <lcdRoutine+0x6d0>)
 8001f78:	4859      	ldr	r0, [pc, #356]	; (80020e0 <lcdRoutine+0x688>)
 8001f7a:	f005 fec9 	bl	8007d10 <strcpy>
					sprintf (string[3], "Max:%d dBm", legalFreq.interval[currentInterval].maxPower);
 8001f7e:	220c      	movs	r2, #12
 8001f80:	4b55      	ldr	r3, [pc, #340]	; (80020d8 <lcdRoutine+0x680>)
 8001f82:	496a      	ldr	r1, [pc, #424]	; (800212c <lcdRoutine+0x6d4>)
 8001f84:	fb02 3404 	mla	r4, r2, r4, r3
 8001f88:	7b22      	ldrb	r2, [r4, #12]
				sprintf (string[3], "Found %d Nets", netHandler.netCount);
 8001f8a:	4856      	ldr	r0, [pc, #344]	; (80020e4 <lcdRoutine+0x68c>)
 8001f8c:	e7b6      	b.n	8001efc <lcdRoutine+0x4a4>
					sprintf (string[3], "Not within ISM band");
 8001f8e:	4968      	ldr	r1, [pc, #416]	; (8002130 <lcdRoutine+0x6d8>)
 8001f90:	e7a4      	b.n	8001edc <lcdRoutine+0x484>
			sprintf (string[0], "Level 1");
 8001f92:	4968      	ldr	r1, [pc, #416]	; (8002134 <lcdRoutine+0x6dc>)
 8001f94:	483b      	ldr	r0, [pc, #236]	; (8002084 <lcdRoutine+0x62c>)
 8001f96:	f005 febb 	bl	8007d10 <strcpy>
			sprintf (string[1], "Silence Alarm");
 8001f9a:	4967      	ldr	r1, [pc, #412]	; (8002138 <lcdRoutine+0x6e0>)
 8001f9c:	484b      	ldr	r0, [pc, #300]	; (80020cc <lcdRoutine+0x674>)
 8001f9e:	f005 feb7 	bl	8007d10 <strcpy>
			sprintf (string[2], "%lu s", settings.warningDelay / 1000);
 8001fa2:	4b48      	ldr	r3, [pc, #288]	; (80020c4 <lcdRoutine+0x66c>)
 8001fa4:	685a      	ldr	r2, [r3, #4]
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8001fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001faa:	4964      	ldr	r1, [pc, #400]	; (800213c <lcdRoutine+0x6e4>)
 8001fac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb0:	e7a3      	b.n	8001efa <lcdRoutine+0x4a2>
			sprintf (string[0], "Level 2");
 8001fb2:	4963      	ldr	r1, [pc, #396]	; (8002140 <lcdRoutine+0x6e8>)
 8001fb4:	4833      	ldr	r0, [pc, #204]	; (8002084 <lcdRoutine+0x62c>)
 8001fb6:	f005 feab 	bl	8007d10 <strcpy>
			sprintf (string[1], "Silence alarm");
 8001fba:	4962      	ldr	r1, [pc, #392]	; (8002144 <lcdRoutine+0x6ec>)
 8001fbc:	4843      	ldr	r0, [pc, #268]	; (80020cc <lcdRoutine+0x674>)
 8001fbe:	f005 fea7 	bl	8007d10 <strcpy>
			sprintf (string[2], "%lu s", settings.superWarningDelay / 1000);
 8001fc2:	4b40      	ldr	r3, [pc, #256]	; (80020c4 <lcdRoutine+0x66c>)
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	e7ee      	b.n	8001fa6 <lcdRoutine+0x54e>
			sprintf (string[0], "Send status every");
 8001fc8:	495f      	ldr	r1, [pc, #380]	; (8002148 <lcdRoutine+0x6f0>)
 8001fca:	482e      	ldr	r0, [pc, #184]	; (8002084 <lcdRoutine+0x62c>)
 8001fcc:	f005 fea0 	bl	8007d10 <strcpy>
			sprintf (string[1], "%lu s", nodeSettings.workInterval);
 8001fd0:	4b5e      	ldr	r3, [pc, #376]	; (800214c <lcdRoutine+0x6f4>)
 8001fd2:	495a      	ldr	r1, [pc, #360]	; (800213c <lcdRoutine+0x6e4>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	e7a8      	b.n	8001f2a <lcdRoutine+0x4d2>
			sprintf (string[0], "Node LED use");
 8001fd8:	495d      	ldr	r1, [pc, #372]	; (8002150 <lcdRoutine+0x6f8>)
 8001fda:	482a      	ldr	r0, [pc, #168]	; (8002084 <lcdRoutine+0x62c>)
 8001fdc:	f005 fe98 	bl	8007d10 <strcpy>
			if (nodeSettings.useLed)
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <lcdRoutine+0x6f4>)
 8001fe2:	7c1b      	ldrb	r3, [r3, #16]
 8001fe4:	b113      	cbz	r3, 8001fec <lcdRoutine+0x594>
				sprintf (string[1], "On");
 8001fe6:	495b      	ldr	r1, [pc, #364]	; (8002154 <lcdRoutine+0x6fc>)
			sprintf (string[1], "OK:Yes BACK:No");
 8001fe8:	4838      	ldr	r0, [pc, #224]	; (80020cc <lcdRoutine+0x674>)
 8001fea:	e778      	b.n	8001ede <lcdRoutine+0x486>
				sprintf (string[1], "Off");
 8001fec:	495a      	ldr	r1, [pc, #360]	; (8002158 <lcdRoutine+0x700>)
 8001fee:	e7fb      	b.n	8001fe8 <lcdRoutine+0x590>
			sprintf (string[0], "Clean saved");
 8001ff0:	495a      	ldr	r1, [pc, #360]	; (800215c <lcdRoutine+0x704>)
 8001ff2:	4824      	ldr	r0, [pc, #144]	; (8002084 <lcdRoutine+0x62c>)
 8001ff4:	f005 fe8c 	bl	8007d10 <strcpy>
			sprintf (string[1], "Node data");
 8001ff8:	4959      	ldr	r1, [pc, #356]	; (8002160 <lcdRoutine+0x708>)
 8001ffa:	e7f5      	b.n	8001fe8 <lcdRoutine+0x590>
			sprintf (string[0], "Refresh Network");
 8001ffc:	4959      	ldr	r1, [pc, #356]	; (8002164 <lcdRoutine+0x70c>)
 8001ffe:	4821      	ldr	r0, [pc, #132]	; (8002084 <lcdRoutine+0x62c>)
			if (netHandler.netRefreshInProgress)
 8002000:	4c59      	ldr	r4, [pc, #356]	; (8002168 <lcdRoutine+0x710>)
			sprintf (string[0], "Refresh Network");
 8002002:	f005 fe85 	bl	8007d10 <strcpy>
			sprintf (string[1], "List");
 8002006:	4959      	ldr	r1, [pc, #356]	; (800216c <lcdRoutine+0x714>)
 8002008:	4830      	ldr	r0, [pc, #192]	; (80020cc <lcdRoutine+0x674>)
 800200a:	f005 fe81 	bl	8007d10 <strcpy>
			if (netHandler.netRefreshInProgress)
 800200e:	79a3      	ldrb	r3, [r4, #6]
 8002010:	b11b      	cbz	r3, 800201a <lcdRoutine+0x5c2>
				sprintf (string[2], "In progress...");
 8002012:	4957      	ldr	r1, [pc, #348]	; (8002170 <lcdRoutine+0x718>)
 8002014:	4832      	ldr	r0, [pc, #200]	; (80020e0 <lcdRoutine+0x688>)
 8002016:	f005 fe7b 	bl	8007d10 <strcpy>
			if (netHandler.netRefreshDone)
 800201a:	79e3      	ldrb	r3, [r4, #7]
 800201c:	2b00      	cmp	r3, #0
 800201e:	f43f ada5 	beq.w	8001b6c <lcdRoutine+0x114>
				sprintf (string[3], "Found %d Nets", netHandler.netCount);
 8002022:	f894 2631 	ldrb.w	r2, [r4, #1585]	; 0x631
 8002026:	4953      	ldr	r1, [pc, #332]	; (8002174 <lcdRoutine+0x71c>)
 8002028:	e7af      	b.n	8001f8a <lcdRoutine+0x532>
			sprintf (string[0], "Select WLAN");
 800202a:	4953      	ldr	r1, [pc, #332]	; (8002178 <lcdRoutine+0x720>)
 800202c:	4815      	ldr	r0, [pc, #84]	; (8002084 <lcdRoutine+0x62c>)
 800202e:	f005 fe6f 	bl	8007d10 <strcpy>
			if (netHandler.nets[selectedNetwork][0] == 0)
 8002032:	4b52      	ldr	r3, [pc, #328]	; (800217c <lcdRoutine+0x724>)
 8002034:	494c      	ldr	r1, [pc, #304]	; (8002168 <lcdRoutine+0x710>)
 8002036:	f993 2000 	ldrsb.w	r2, [r3]
 800203a:	eb01 1042 	add.w	r0, r1, r2, lsl #5
 800203e:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
 8002042:	0153      	lsls	r3, r2, #5
 8002044:	b908      	cbnz	r0, 800204a <lcdRoutine+0x5f2>
				sprintf (string[1], "Slot %d is empty", selectedNetwork);
 8002046:	494e      	ldr	r1, [pc, #312]	; (8002180 <lcdRoutine+0x728>)
 8002048:	e76f      	b.n	8001f2a <lcdRoutine+0x4d2>
				sprintf (string[1], "%s", netHandler.nets[selectedNetwork]);
 800204a:	3330      	adds	r3, #48	; 0x30
 800204c:	4419      	add	r1, r3
 800204e:	e7cb      	b.n	8001fe8 <lcdRoutine+0x590>
			sprintf (string[0], "Set WiFi password");
 8002050:	494c      	ldr	r1, [pc, #304]	; (8002184 <lcdRoutine+0x72c>)
			setCursor (string[2], cursorPos);
 8002052:	4c4d      	ldr	r4, [pc, #308]	; (8002188 <lcdRoutine+0x730>)
			sprintf (string[0], "Set WiFi password");
 8002054:	480b      	ldr	r0, [pc, #44]	; (8002084 <lcdRoutine+0x62c>)
 8002056:	f005 fe5b 	bl	8007d10 <strcpy>
			sprintf (string[1], settings.WiFiPass);
 800205a:	494c      	ldr	r1, [pc, #304]	; (800218c <lcdRoutine+0x734>)
 800205c:	481b      	ldr	r0, [pc, #108]	; (80020cc <lcdRoutine+0x674>)
 800205e:	f005 fe37 	bl	8007cd0 <siprintf>
			setCursor (string[2], cursorPos);
 8002062:	f994 1000 	ldrsb.w	r1, [r4]
 8002066:	481e      	ldr	r0, [pc, #120]	; (80020e0 <lcdRoutine+0x688>)
 8002068:	f7fe ff4c 	bl	8000f04 <setCursor>
			if (settings.WiFiPass[cursorPos] == ' ' || settings.WiFiPass[cursorPos] == '\0')
 800206c:	f994 2000 	ldrsb.w	r2, [r4]
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <lcdRoutine+0x66c>)
 8002072:	4413      	add	r3, r2
 8002074:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002078:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800207c:	f47f ad76 	bne.w	8001b6c <lcdRoutine+0x114>
				sprintf (string[3], "Done");
 8002080:	4943      	ldr	r1, [pc, #268]	; (8002190 <lcdRoutine+0x738>)
 8002082:	e72b      	b.n	8001edc <lcdRoutine+0x484>
 8002084:	20000168 	.word	0x20000168
 8002088:	08009242 	.word	0x08009242
 800208c:	08009250 	.word	0x08009250
 8002090:	08009261 	.word	0x08009261
 8002094:	08009272 	.word	0x08009272
 8002098:	08009280 	.word	0x08009280
 800209c:	08009292 	.word	0x08009292
 80020a0:	0800929b 	.word	0x0800929b
 80020a4:	080092ad 	.word	0x080092ad
 80020a8:	080092be 	.word	0x080092be
 80020ac:	080092d4 	.word	0x080092d4
 80020b0:	080092e4 	.word	0x080092e4
 80020b4:	080092f7 	.word	0x080092f7
 80020b8:	0800930c 	.word	0x0800930c
 80020bc:	08009318 	.word	0x08009318
 80020c0:	080091f3 	.word	0x080091f3
 80020c4:	20000a78 	.word	0x20000a78
 80020c8:	000f4240 	.word	0x000f4240
 80020cc:	200001a8 	.word	0x200001a8
 80020d0:	08009322 	.word	0x08009322
 80020d4:	200015c8 	.word	0x200015c8
 80020d8:	20000bcc 	.word	0x20000bcc
 80020dc:	08009332 	.word	0x08009332
 80020e0:	200001e8 	.word	0x200001e8
 80020e4:	20000228 	.word	0x20000228
 80020e8:	0800933e 	.word	0x0800933e
 80020ec:	0800934e 	.word	0x0800934e
 80020f0:	08009363 	.word	0x08009363
 80020f4:	0800936d 	.word	0x0800936d
 80020f8:	08009166 	.word	0x08009166
 80020fc:	080091fe 	.word	0x080091fe
 8002100:	20000000 	.word	0x20000000
 8002104:	0800921b 	.word	0x0800921b
 8002108:	0800902c 	.word	0x0800902c
 800210c:	08009225 	.word	0x08009225
 8002110:	08009374 	.word	0x08009374
 8002114:	08009232 	.word	0x08009232
 8002118:	08009379 	.word	0x08009379
 800211c:	08009380 	.word	0x08009380
 8002120:	08009393 	.word	0x08009393
 8002124:	08009798 	.word	0x08009798
 8002128:	080093a2 	.word	0x080093a2
 800212c:	080093b5 	.word	0x080093b5
 8002130:	080093c0 	.word	0x080093c0
 8002134:	080093d4 	.word	0x080093d4
 8002138:	080093dc 	.word	0x080093dc
 800213c:	0800914e 	.word	0x0800914e
 8002140:	080093ea 	.word	0x080093ea
 8002144:	080093f2 	.word	0x080093f2
 8002148:	08009400 	.word	0x08009400
 800214c:	20000c74 	.word	0x20000c74
 8002150:	08009412 	.word	0x08009412
 8002154:	0800941f 	.word	0x0800941f
 8002158:	08009422 	.word	0x08009422
 800215c:	08009426 	.word	0x08009426
 8002160:	08009432 	.word	0x08009432
 8002164:	0800943c 	.word	0x0800943c
 8002168:	20000e8c 	.word	0x20000e8c
 800216c:	080092cf 	.word	0x080092cf
 8002170:	0800944c 	.word	0x0800944c
 8002174:	0800945b 	.word	0x0800945b
 8002178:	08009469 	.word	0x08009469
 800217c:	20000164 	.word	0x20000164
 8002180:	08009475 	.word	0x08009475
 8002184:	08009486 	.word	0x08009486
 8002188:	20000122 	.word	0x20000122
 800218c:	20000a9b 	.word	0x20000a9b
 8002190:	08009498 	.word	0x08009498
			sprintf (string[0], "Set Server password");
 8002194:	4976      	ldr	r1, [pc, #472]	; (8002370 <lcdRoutine+0x918>)
			setCursor (string[2], cursorPos);
 8002196:	4c77      	ldr	r4, [pc, #476]	; (8002374 <lcdRoutine+0x91c>)
			sprintf (string[0], "Set Server password");
 8002198:	4877      	ldr	r0, [pc, #476]	; (8002378 <lcdRoutine+0x920>)
 800219a:	f005 fdb9 	bl	8007d10 <strcpy>
			sprintf (string[1], settings.ServerPass);
 800219e:	4977      	ldr	r1, [pc, #476]	; (800237c <lcdRoutine+0x924>)
 80021a0:	4877      	ldr	r0, [pc, #476]	; (8002380 <lcdRoutine+0x928>)
 80021a2:	f005 fd95 	bl	8007cd0 <siprintf>
			setCursor (string[2], cursorPos);
 80021a6:	f994 1000 	ldrsb.w	r1, [r4]
 80021aa:	4876      	ldr	r0, [pc, #472]	; (8002384 <lcdRoutine+0x92c>)
 80021ac:	f7fe feaa 	bl	8000f04 <setCursor>
			if (settings.ServerPass[cursorPos] == ' ' || settings.ServerPass[cursorPos] == '\0')
 80021b0:	f994 2000 	ldrsb.w	r2, [r4]
 80021b4:	4b74      	ldr	r3, [pc, #464]	; (8002388 <lcdRoutine+0x930>)
 80021b6:	4413      	add	r3, r2
 80021b8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80021bc:	e75c      	b.n	8002078 <lcdRoutine+0x620>
			sprintf (string[0], "Set Host");
 80021be:	4973      	ldr	r1, [pc, #460]	; (800238c <lcdRoutine+0x934>)
			setCursor (string[2], cursorPos);
 80021c0:	4c6c      	ldr	r4, [pc, #432]	; (8002374 <lcdRoutine+0x91c>)
			sprintf (string[0], "Set Host");
 80021c2:	486d      	ldr	r0, [pc, #436]	; (8002378 <lcdRoutine+0x920>)
 80021c4:	f005 fda4 	bl	8007d10 <strcpy>
			sprintf (string[1], settings.host);
 80021c8:	4971      	ldr	r1, [pc, #452]	; (8002390 <lcdRoutine+0x938>)
 80021ca:	486d      	ldr	r0, [pc, #436]	; (8002380 <lcdRoutine+0x928>)
 80021cc:	f005 fd80 	bl	8007cd0 <siprintf>
			setCursor (string[2], cursorPos);
 80021d0:	f994 1000 	ldrsb.w	r1, [r4]
 80021d4:	486b      	ldr	r0, [pc, #428]	; (8002384 <lcdRoutine+0x92c>)
 80021d6:	f7fe fe95 	bl	8000f04 <setCursor>
			if (settings.host[cursorPos] == ' ' || settings.host[cursorPos] == '\0')
 80021da:	f994 2000 	ldrsb.w	r2, [r4]
 80021de:	4b6a      	ldr	r3, [pc, #424]	; (8002388 <lcdRoutine+0x930>)
 80021e0:	4413      	add	r3, r2
 80021e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80021e6:	e747      	b.n	8002078 <lcdRoutine+0x620>
			sprintf (string[0], "Set Base ID");
 80021e8:	496a      	ldr	r1, [pc, #424]	; (8002394 <lcdRoutine+0x93c>)
 80021ea:	4863      	ldr	r0, [pc, #396]	; (8002378 <lcdRoutine+0x920>)
 80021ec:	f005 fd90 	bl	8007d10 <strcpy>
			sprintf (string[1], "%07lu", settings.baseID);
 80021f0:	4b65      	ldr	r3, [pc, #404]	; (8002388 <lcdRoutine+0x930>)
 80021f2:	4969      	ldr	r1, [pc, #420]	; (8002398 <lcdRoutine+0x940>)
 80021f4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80021f6:	4862      	ldr	r0, [pc, #392]	; (8002380 <lcdRoutine+0x928>)
 80021f8:	f005 fd6a 	bl	8007cd0 <siprintf>
			setCursor (string[2], cursorPos);
 80021fc:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <lcdRoutine+0x91c>)
 80021fe:	4861      	ldr	r0, [pc, #388]	; (8002384 <lcdRoutine+0x92c>)
 8002200:	f993 1000 	ldrsb.w	r1, [r3]
 8002204:	f7fe fe7e 	bl	8000f04 <setCursor>
			break;
 8002208:	e4b0      	b.n	8001b6c <lcdRoutine+0x114>
			sprintf (string[0], "Save to Flash?");
 800220a:	4964      	ldr	r1, [pc, #400]	; (800239c <lcdRoutine+0x944>)
 800220c:	485a      	ldr	r0, [pc, #360]	; (8002378 <lcdRoutine+0x920>)
 800220e:	f005 fd7f 	bl	8007d10 <strcpy>
			sprintf (string[1], "OK:Yes BACK:No");
 8002212:	4963      	ldr	r1, [pc, #396]	; (80023a0 <lcdRoutine+0x948>)
 8002214:	e6e8      	b.n	8001fe8 <lcdRoutine+0x590>
			sprintf (string[0], "Total received:");
 8002216:	4963      	ldr	r1, [pc, #396]	; (80023a4 <lcdRoutine+0x94c>)
 8002218:	4857      	ldr	r0, [pc, #348]	; (8002378 <lcdRoutine+0x920>)
 800221a:	f005 fd79 	bl	8007d10 <strcpy>
			sprintf (string[1], "%lu/%lu", receivedMesCntSuc, receivedMesCnt);
 800221e:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <lcdRoutine+0x950>)
 8002220:	4a62      	ldr	r2, [pc, #392]	; (80023ac <lcdRoutine+0x954>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	4962      	ldr	r1, [pc, #392]	; (80023b0 <lcdRoutine+0x958>)
 8002228:	4855      	ldr	r0, [pc, #340]	; (8002380 <lcdRoutine+0x928>)
 800222a:	e653      	b.n	8001ed4 <lcdRoutine+0x47c>
			sprintf (string[0], "Firmware: ");
 800222c:	4961      	ldr	r1, [pc, #388]	; (80023b4 <lcdRoutine+0x95c>)
 800222e:	4852      	ldr	r0, [pc, #328]	; (8002378 <lcdRoutine+0x920>)
 8002230:	f005 fd6e 	bl	8007d10 <strcpy>
			sprintf (string[1], "release %lu", version);
 8002234:	4a60      	ldr	r2, [pc, #384]	; (80023b8 <lcdRoutine+0x960>)
 8002236:	4961      	ldr	r1, [pc, #388]	; (80023bc <lcdRoutine+0x964>)
 8002238:	e677      	b.n	8001f2a <lcdRoutine+0x4d2>
				sprintf (string[0], "Uptime:");
 800223a:	4961      	ldr	r1, [pc, #388]	; (80023c0 <lcdRoutine+0x968>)
 800223c:	484e      	ldr	r0, [pc, #312]	; (8002378 <lcdRoutine+0x920>)
 800223e:	f005 fd67 	bl	8007d10 <strcpy>
				sprintf (string[1], "%lu d & %lu:%02lu:%02lu ", upTime / 86400, upTime / 3600 % 24, upTime / 60 % 60, upTime % 60);
 8002242:	203c      	movs	r0, #60	; 0x3c
 8002244:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002248:	4b5e      	ldr	r3, [pc, #376]	; (80023c4 <lcdRoutine+0x96c>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	2318      	movs	r3, #24
 800224e:	fbb2 f5f0 	udiv	r5, r2, r0
 8002252:	fbb2 f1f1 	udiv	r1, r2, r1
 8002256:	fb00 2415 	mls	r4, r0, r5, r2
 800225a:	9401      	str	r4, [sp, #4]
 800225c:	fbb5 f4f0 	udiv	r4, r5, r0
 8002260:	fbb1 f6f3 	udiv	r6, r1, r3
 8002264:	fb00 5014 	mls	r0, r0, r4, r5
 8002268:	fb03 1316 	mls	r3, r3, r6, r1
 800226c:	4956      	ldr	r1, [pc, #344]	; (80023c8 <lcdRoutine+0x970>)
 800226e:	9000      	str	r0, [sp, #0]
 8002270:	fbb2 f2f1 	udiv	r2, r2, r1
 8002274:	4842      	ldr	r0, [pc, #264]	; (8002380 <lcdRoutine+0x928>)
 8002276:	4955      	ldr	r1, [pc, #340]	; (80023cc <lcdRoutine+0x974>)
 8002278:	f005 fd2a 	bl	8007cd0 <siprintf>
				sprintf (string[2], "RX use: %s", floatToString2 (airUseForRx));
 800227c:	4b54      	ldr	r3, [pc, #336]	; (80023d0 <lcdRoutine+0x978>)
				sprintf (string[4], "WiFI:%d,Connected:%d", netHandler.plugged, netHandler.connected);
 800227e:	4c55      	ldr	r4, [pc, #340]	; (80023d4 <lcdRoutine+0x97c>)
				sprintf (string[2], "RX use: %s", floatToString2 (airUseForRx));
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	f7fe fc89 	bl	8000b98 <floatToString2>
 8002286:	4954      	ldr	r1, [pc, #336]	; (80023d8 <lcdRoutine+0x980>)
 8002288:	4602      	mov	r2, r0
 800228a:	483e      	ldr	r0, [pc, #248]	; (8002384 <lcdRoutine+0x92c>)
 800228c:	f005 fd20 	bl	8007cd0 <siprintf>
				sprintf (string[3], "TX use: %s", floatToString2 (airUseForTx));
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <lcdRoutine+0x984>)
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	f7fe fc80 	bl	8000b98 <floatToString2>
 8002298:	4951      	ldr	r1, [pc, #324]	; (80023e0 <lcdRoutine+0x988>)
 800229a:	4602      	mov	r2, r0
 800229c:	4851      	ldr	r0, [pc, #324]	; (80023e4 <lcdRoutine+0x98c>)
 800229e:	f005 fd17 	bl	8007cd0 <siprintf>
				sprintf (string[4], "WiFI:%d,Connected:%d", netHandler.plugged, netHandler.connected);
 80022a2:	78a3      	ldrb	r3, [r4, #2]
 80022a4:	7822      	ldrb	r2, [r4, #0]
 80022a6:	4950      	ldr	r1, [pc, #320]	; (80023e8 <lcdRoutine+0x990>)
 80022a8:	4850      	ldr	r0, [pc, #320]	; (80023ec <lcdRoutine+0x994>)
 80022aa:	f005 fd11 	bl	8007cd0 <siprintf>
				sprintf (string[5], "Local IP:%s", netHandler.ip);
 80022ae:	4950      	ldr	r1, [pc, #320]	; (80023f0 <lcdRoutine+0x998>)
 80022b0:	f104 0214 	add.w	r2, r4, #20
 80022b4:	484f      	ldr	r0, [pc, #316]	; (80023f4 <lcdRoutine+0x99c>)
 80022b6:	f005 fd0b 	bl	8007cd0 <siprintf>
				sprintf (string[6], "Online:%d", netHandler.online);
 80022ba:	78e2      	ldrb	r2, [r4, #3]
 80022bc:	494e      	ldr	r1, [pc, #312]	; (80023f8 <lcdRoutine+0x9a0>)
 80022be:	484f      	ldr	r0, [pc, #316]	; (80023fc <lcdRoutine+0x9a4>)
 80022c0:	f005 fd06 	bl	8007cd0 <siprintf>
				sprintf (string[7], "TX:%d", netHandler.TX);
 80022c4:	7962      	ldrb	r2, [r4, #5]
 80022c6:	494e      	ldr	r1, [pc, #312]	; (8002400 <lcdRoutine+0x9a8>)
 80022c8:	484e      	ldr	r0, [pc, #312]	; (8002404 <lcdRoutine+0x9ac>)
 80022ca:	e617      	b.n	8001efc <lcdRoutine+0x4a4>
			sprintf (string[0], "   Node Actions:");
 80022cc:	494e      	ldr	r1, [pc, #312]	; (8002408 <lcdRoutine+0x9b0>)
			sprintf (string[2], "Alarm: %s", maskNames[nodes[selectedNode].masked]);
 80022ce:	4d4f      	ldr	r5, [pc, #316]	; (800240c <lcdRoutine+0x9b4>)
			sprintf (string[0], "   Node Actions:");
 80022d0:	4829      	ldr	r0, [pc, #164]	; (8002378 <lcdRoutine+0x920>)
 80022d2:	f005 fd1d 	bl	8007d10 <strcpy>
			sprintf (string[1], " Ping");
 80022d6:	494e      	ldr	r1, [pc, #312]	; (8002410 <lcdRoutine+0x9b8>)
 80022d8:	4829      	ldr	r0, [pc, #164]	; (8002380 <lcdRoutine+0x928>)
 80022da:	f005 fd19 	bl	8007d10 <strcpy>
			sprintf (string[2], "Alarm: %s", maskNames[nodes[selectedNode].masked]);
 80022de:	4c4d      	ldr	r4, [pc, #308]	; (8002414 <lcdRoutine+0x9bc>)
 80022e0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80022e4:	494c      	ldr	r1, [pc, #304]	; (8002418 <lcdRoutine+0x9c0>)
 80022e6:	eb04 1343 	add.w	r3, r4, r3, lsl #5
 80022ea:	7b1a      	ldrb	r2, [r3, #12]
 80022ec:	4b4b      	ldr	r3, [pc, #300]	; (800241c <lcdRoutine+0x9c4>)
 80022ee:	4825      	ldr	r0, [pc, #148]	; (8002384 <lcdRoutine+0x92c>)
 80022f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022f4:	f005 fcec 	bl	8007cd0 <siprintf>
			sprintf (string[3], nodes[selectedNode].disarmRequest ? " Disarmed" : " Armed");
 80022f8:	f9b5 3000 	ldrsh.w	r3, [r5]
 80022fc:	4a48      	ldr	r2, [pc, #288]	; (8002420 <lcdRoutine+0x9c8>)
 80022fe:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8002302:	7ba1      	ldrb	r1, [r4, #14]
 8002304:	4b47      	ldr	r3, [pc, #284]	; (8002424 <lcdRoutine+0x9cc>)
 8002306:	4c1c      	ldr	r4, [pc, #112]	; (8002378 <lcdRoutine+0x920>)
 8002308:	2900      	cmp	r1, #0
 800230a:	bf14      	ite	ne
 800230c:	4611      	movne	r1, r2
 800230e:	4619      	moveq	r1, r3
 8002310:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002314:	f005 fcdc 	bl	8007cd0 <siprintf>
			sprintf (string[4], " Config Node");
 8002318:	4943      	ldr	r1, [pc, #268]	; (8002428 <lcdRoutine+0x9d0>)
 800231a:	f504 7080 	add.w	r0, r4, #256	; 0x100
 800231e:	e4ea      	b.n	8001cf6 <lcdRoutine+0x29e>
			sprintf (string[0], " Work");
 8002320:	4c15      	ldr	r4, [pc, #84]	; (8002378 <lcdRoutine+0x920>)
			clearStrings ();
 8002322:	f7fe fde7 	bl	8000ef4 <clearStrings>
			sprintf (string[0], " Work");
 8002326:	4941      	ldr	r1, [pc, #260]	; (800242c <lcdRoutine+0x9d4>)
 8002328:	4620      	mov	r0, r4
 800232a:	f005 fcf1 	bl	8007d10 <strcpy>
			sprintf (string[1], " Color test");
 800232e:	4940      	ldr	r1, [pc, #256]	; (8002430 <lcdRoutine+0x9d8>)
 8002330:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8002334:	f005 fcec 	bl	8007d10 <strcpy>
			sprintf (string[2], " Transmitter test");
 8002338:	493e      	ldr	r1, [pc, #248]	; (8002434 <lcdRoutine+0x9dc>)
 800233a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800233e:	f005 fce7 	bl	8007d10 <strcpy>
			sprintf (string[3], " Receiver Test");
 8002342:	493d      	ldr	r1, [pc, #244]	; (8002438 <lcdRoutine+0x9e0>)
 8002344:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8002348:	f005 fce2 	bl	8007d10 <strcpy>
			sprintf (string[4], " Ping test");
 800234c:	493b      	ldr	r1, [pc, #236]	; (800243c <lcdRoutine+0x9e4>)
 800234e:	f504 7080 	add.w	r0, r4, #256	; 0x100
 8002352:	f005 fcdd 	bl	8007d10 <strcpy>
			sprintf (string[5], " RSSI Indicator");
 8002356:	493a      	ldr	r1, [pc, #232]	; (8002440 <lcdRoutine+0x9e8>)
 8002358:	f504 70a0 	add.w	r0, r4, #320	; 0x140
 800235c:	f005 fcd8 	bl	8007d10 <strcpy>
			string[selectedMode][0] = 0x83;
 8002360:	2283      	movs	r2, #131	; 0x83
 8002362:	4b38      	ldr	r3, [pc, #224]	; (8002444 <lcdRoutine+0x9ec>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	019b      	lsls	r3, r3, #6
 8002368:	54e2      	strb	r2, [r4, r3]
			break;
 800236a:	f7ff bbff 	b.w	8001b6c <lcdRoutine+0x114>
 800236e:	bf00      	nop
 8002370:	0800949d 	.word	0x0800949d
 8002374:	20000122 	.word	0x20000122
 8002378:	20000168 	.word	0x20000168
 800237c:	20000aab 	.word	0x20000aab
 8002380:	200001a8 	.word	0x200001a8
 8002384:	200001e8 	.word	0x200001e8
 8002388:	20000a78 	.word	0x20000a78
 800238c:	08009319 	.word	0x08009319
 8002390:	20000abb 	.word	0x20000abb
 8002394:	080094b1 	.word	0x080094b1
 8002398:	080094bd 	.word	0x080094bd
 800239c:	080094c3 	.word	0x080094c3
 80023a0:	080094d2 	.word	0x080094d2
 80023a4:	080094e1 	.word	0x080094e1
 80023a8:	20000154 	.word	0x20000154
 80023ac:	20000158 	.word	0x20000158
 80023b0:	08009127 	.word	0x08009127
 80023b4:	080094f1 	.word	0x080094f1
 80023b8:	08082021 	.word	0x08082021
 80023bc:	080094fc 	.word	0x080094fc
 80023c0:	08009508 	.word	0x08009508
 80023c4:	20000b40 	.word	0x20000b40
 80023c8:	00015180 	.word	0x00015180
 80023cc:	0800910a 	.word	0x0800910a
 80023d0:	20000b94 	.word	0x20000b94
 80023d4:	20000e8c 	.word	0x20000e8c
 80023d8:	08009510 	.word	0x08009510
 80023dc:	20000b44 	.word	0x20000b44
 80023e0:	0800951b 	.word	0x0800951b
 80023e4:	20000228 	.word	0x20000228
 80023e8:	08009526 	.word	0x08009526
 80023ec:	20000268 	.word	0x20000268
 80023f0:	0800953b 	.word	0x0800953b
 80023f4:	200002a8 	.word	0x200002a8
 80023f8:	08009547 	.word	0x08009547
 80023fc:	200002e8 	.word	0x200002e8
 8002400:	08009551 	.word	0x08009551
 8002404:	20000328 	.word	0x20000328
 8002408:	08009557 	.word	0x08009557
 800240c:	20000166 	.word	0x20000166
 8002410:	08009568 	.word	0x08009568
 8002414:	20000ce0 	.word	0x20000ce0
 8002418:	080090e7 	.word	0x080090e7
 800241c:	20000030 	.word	0x20000030
 8002420:	08009051 	.word	0x08009051
 8002424:	0800905b 	.word	0x0800905b
 8002428:	0800956e 	.word	0x0800956e
 800242c:	0800957b 	.word	0x0800957b
 8002430:	08009581 	.word	0x08009581
 8002434:	0800958d 	.word	0x0800958d
 8002438:	0800959f 	.word	0x0800959f
 800243c:	080095ae 	.word	0x080095ae
 8002440:	080095b9 	.word	0x080095b9
 8002444:	20000163 	.word	0x20000163

08002448 <colorTest>:
 * @param  None
 * @retval None
 */
void colorTest ()
{
	flag.lcdRefreshRequest = 1;
 8002448:	4c44      	ldr	r4, [pc, #272]	; (800255c <colorTest+0x114>)
{
 800244a:	b580      	push	{r7, lr}
	flag.lcdRefreshRequest = 1;
 800244c:	7823      	ldrb	r3, [r4, #0]
 800244e:	4d44      	ldr	r5, [pc, #272]	; (8002560 <colorTest+0x118>)
 8002450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			static uint8_t currentCol = 0;

			if (flag.encInc)
				{
					flag.encInc = 0;
					switch (currentCol)
 8002454:	f8df 8124 	ldr.w	r8, [pc, #292]	; 800257c <colorTest+0x134>
	flag.lcdRefreshRequest = 1;
 8002458:	7023      	strb	r3, [r4, #0]
			if (flag.encInc)
 800245a:	7823      	ldrb	r3, [r4, #0]
 800245c:	4f41      	ldr	r7, [pc, #260]	; (8002564 <colorTest+0x11c>)
 800245e:	f013 0f01 	tst.w	r3, #1
 8002462:	4e41      	ldr	r6, [pc, #260]	; (8002568 <colorTest+0x120>)
 8002464:	d010      	beq.n	8002488 <colorTest+0x40>
					flag.encInc = 0;
 8002466:	f36f 0300 	bfc	r3, #0, #1
 800246a:	7023      	strb	r3, [r4, #0]
					switch (currentCol)
 800246c:	f898 3000 	ldrb.w	r3, [r8]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d067      	beq.n	8002544 <colorTest+0xfc>
 8002474:	2b02      	cmp	r3, #2
 8002476:	d061      	beq.n	800253c <colorTest+0xf4>
 8002478:	b913      	cbnz	r3, 8002480 <colorTest+0x38>
					{
						case 0:
							red++;
 800247a:	782b      	ldrb	r3, [r5, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	702b      	strb	r3, [r5, #0]
							break;
						case 1:
							green++;
							break;
					}
					flag.lcdRefreshRequest = 1;
 8002480:	7823      	ldrb	r3, [r4, #0]
 8002482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002486:	7023      	strb	r3, [r4, #0]
				}

			if (flag.encDec)
 8002488:	7823      	ldrb	r3, [r4, #0]
 800248a:	0798      	lsls	r0, r3, #30
 800248c:	d510      	bpl.n	80024b0 <colorTest+0x68>
				{
					flag.encDec = 0;
 800248e:	f36f 0341 	bfc	r3, #1, #1
 8002492:	7023      	strb	r3, [r4, #0]
					switch (currentCol)
 8002494:	f898 3000 	ldrb.w	r3, [r8]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d05b      	beq.n	8002554 <colorTest+0x10c>
 800249c:	2b02      	cmp	r3, #2
 800249e:	d055      	beq.n	800254c <colorTest+0x104>
 80024a0:	b913      	cbnz	r3, 80024a8 <colorTest+0x60>
					{
						case 0:
							red--;
 80024a2:	782b      	ldrb	r3, [r5, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	702b      	strb	r3, [r5, #0]
							break;
						case 1:
							green--;
							break;
					}
					flag.lcdRefreshRequest = 1;
 80024a8:	7823      	ldrb	r3, [r4, #0]
 80024aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ae:	7023      	strb	r3, [r4, #0]
				}

			if (flag.encOk)
 80024b0:	7822      	ldrb	r2, [r4, #0]
 80024b2:	0751      	lsls	r1, r2, #29
 80024b4:	d50d      	bpl.n	80024d2 <colorTest+0x8a>
				{
					flag.encOk = 0;
					currentCol = (++currentCol > 2) ? 0 : currentCol;
 80024b6:	f898 3000 	ldrb.w	r3, [r8]
					flag.lcdRefreshRequest = 1;
 80024ba:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
					currentCol = (++currentCol > 2) ? 0 : currentCol;
 80024be:	3301      	adds	r3, #1
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b03      	cmp	r3, #3
 80024c4:	bf28      	it	cs
 80024c6:	2300      	movcs	r3, #0
					flag.lcdRefreshRequest = 1;
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
					currentCol = (++currentCol > 2) ? 0 : currentCol;
 80024cc:	f888 3000 	strb.w	r3, [r8]
					flag.lcdRefreshRequest = 1;
 80024d0:	7022      	strb	r2, [r4, #0]
				}

			if (flag.lcdRefreshRequest == 1)
 80024d2:	7823      	ldrb	r3, [r4, #0]
 80024d4:	065a      	lsls	r2, r3, #25
 80024d6:	d528      	bpl.n	800252a <colorTest+0xe2>
				{
					flag.lcdRefreshRequest = 0;
					clearStrings ();
					sprintf (string[0], "Color test");
 80024d8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8002580 <colorTest+0x138>
					flag.lcdRefreshRequest = 0;
 80024dc:	f36f 1386 	bfc	r3, #6, #1
 80024e0:	7023      	strb	r3, [r4, #0]
					clearStrings ();
 80024e2:	f7fe fd07 	bl	8000ef4 <clearStrings>
					sprintf (string[0], "Color test");
 80024e6:	4648      	mov	r0, r9
 80024e8:	4920      	ldr	r1, [pc, #128]	; (800256c <colorTest+0x124>)
 80024ea:	f005 fc11 	bl	8007d10 <strcpy>
					sprintf (string[1], " Red:  %3d %02X", red, red);
 80024ee:	782b      	ldrb	r3, [r5, #0]
 80024f0:	491f      	ldr	r1, [pc, #124]	; (8002570 <colorTest+0x128>)
 80024f2:	461a      	mov	r2, r3
 80024f4:	f109 0040 	add.w	r0, r9, #64	; 0x40
 80024f8:	f005 fbea 	bl	8007cd0 <siprintf>
					sprintf (string[2], " Green:%3d %02X", green, green);
 80024fc:	7833      	ldrb	r3, [r6, #0]
 80024fe:	491d      	ldr	r1, [pc, #116]	; (8002574 <colorTest+0x12c>)
 8002500:	461a      	mov	r2, r3
 8002502:	f109 0080 	add.w	r0, r9, #128	; 0x80
 8002506:	f005 fbe3 	bl	8007cd0 <siprintf>
					sprintf (string[3], " Blue: %3d %02X", blue, blue);
 800250a:	783b      	ldrb	r3, [r7, #0]
 800250c:	f109 00c0 	add.w	r0, r9, #192	; 0xc0
 8002510:	461a      	mov	r2, r3
 8002512:	4919      	ldr	r1, [pc, #100]	; (8002578 <colorTest+0x130>)
 8002514:	f005 fbdc 	bl	8007cd0 <siprintf>
					string[currentCol + 1][0] = 0x83;
 8002518:	f898 3000 	ldrb.w	r3, [r8]
 800251c:	eb09 1983 	add.w	r9, r9, r3, lsl #6
 8002520:	2383      	movs	r3, #131	; 0x83
 8002522:	f889 3040 	strb.w	r3, [r9, #64]	; 0x40

					updateLcd ();
 8002526:	f7fe fcf7 	bl	8000f18 <updateLcd>
				}
			wsSetColor (0, red, green, blue);
 800252a:	2000      	movs	r0, #0
 800252c:	783b      	ldrb	r3, [r7, #0]
 800252e:	7832      	ldrb	r2, [r6, #0]
 8002530:	7829      	ldrb	r1, [r5, #0]
 8002532:	f002 fcbd 	bl	8004eb0 <wsSetColor>
			wsPrepareArray ();
 8002536:	f002 fcfb 	bl	8004f30 <wsPrepareArray>
		{
 800253a:	e78e      	b.n	800245a <colorTest+0x12>
							blue++;
 800253c:	783b      	ldrb	r3, [r7, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	703b      	strb	r3, [r7, #0]
							break;
 8002542:	e79d      	b.n	8002480 <colorTest+0x38>
							green++;
 8002544:	7833      	ldrb	r3, [r6, #0]
 8002546:	3301      	adds	r3, #1
 8002548:	7033      	strb	r3, [r6, #0]
							break;
 800254a:	e799      	b.n	8002480 <colorTest+0x38>
							blue--;
 800254c:	783b      	ldrb	r3, [r7, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	703b      	strb	r3, [r7, #0]
							break;
 8002552:	e7a9      	b.n	80024a8 <colorTest+0x60>
							green--;
 8002554:	7833      	ldrb	r3, [r6, #0]
 8002556:	3b01      	subs	r3, #1
 8002558:	7033      	strb	r3, [r6, #0]
							break;
 800255a:	e7a5      	b.n	80024a8 <colorTest+0x60>
 800255c:	20000b4c 	.word	0x20000b4c
 8002560:	20000160 	.word	0x20000160
 8002564:	20000120 	.word	0x20000120
 8002568:	20000123 	.word	0x20000123
 800256c:	08009582 	.word	0x08009582
 8002570:	080095c9 	.word	0x080095c9
 8002574:	080095d9 	.word	0x080095d9
 8002578:	080095e9 	.word	0x080095e9
 800257c:	20000121 	.word	0x20000121
 8002580:	20000168 	.word	0x20000168

08002584 <radioTestTransmit>:
 * Transmittion power can be cyclic increased or static 20dbm
 * @param  None
 * @retval None
 */
void radioTestTransmit ()
{
 8002584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
					else
						wsSetColor (i, BLACK);
				}
			wsPrepareArray ();

			if (myRadio.status != TX)
 8002588:	4f45      	ldr	r7, [pc, #276]	; (80026a0 <radioTestTransmit+0x11c>)
	SX127X_defaultConfig (&myRadio);
 800258a:	4845      	ldr	r0, [pc, #276]	; (80026a0 <radioTestTransmit+0x11c>)
 800258c:	463e      	mov	r6, r7
	flag.lcdRefreshRequest = 1;
 800258e:	4c45      	ldr	r4, [pc, #276]	; (80026a4 <radioTestTransmit+0x120>)
	SX127X_defaultConfig (&myRadio);
 8002590:	f001 fef4 	bl	800437c <SX127X_defaultConfig>
	tryLoadSettings ();
 8002594:	f7fe fd0a 	bl	8000fac <tryLoadSettings>
	SX127X_config (&myRadio);
 8002598:	4841      	ldr	r0, [pc, #260]	; (80026a0 <radioTestTransmit+0x11c>)
 800259a:	f001 ff3b 	bl	8004414 <SX127X_config>
	flag.lcdRefreshRequest = 1;
 800259e:	7823      	ldrb	r3, [r4, #0]
					if (power - 12 == i)
 80025a0:	4d41      	ldr	r5, [pc, #260]	; (80026a8 <radioTestTransmit+0x124>)
	flag.lcdRefreshRequest = 1;
 80025a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a6:	7023      	strb	r3, [r4, #0]
{
 80025a8:	f04f 0800 	mov.w	r8, #0
					if (power - 12 == i)
 80025ac:	782b      	ldrb	r3, [r5, #0]
 80025ae:	fa5f f088 	uxtb.w	r0, r8
 80025b2:	3b0c      	subs	r3, #12
 80025b4:	4543      	cmp	r3, r8
						wsSetColor (i, GREEN);
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2210      	moveq	r2, #16
						wsSetColor (i, BLACK);
 80025be:	461a      	movne	r2, r3
 80025c0:	4619      	mov	r1, r3
 80025c2:	f108 0801 	add.w	r8, r8, #1
 80025c6:	f002 fc73 	bl	8004eb0 <wsSetColor>
			for (i = 0; i < 9; i++)
 80025ca:	f1b8 0f09 	cmp.w	r8, #9
 80025ce:	d1ed      	bne.n	80025ac <radioTestTransmit+0x28>
			wsPrepareArray ();
 80025d0:	f002 fcae 	bl	8004f30 <wsPrepareArray>
			if (myRadio.status != TX)
 80025d4:	7c3b      	ldrb	r3, [r7, #16]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d01b      	beq.n	8002612 <radioTestTransmit+0x8e>
				{
					if (radioTxTestMode == 0)
 80025da:	4b34      	ldr	r3, [pc, #208]	; (80026ac <radioTestTransmit+0x128>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d154      	bne.n	800268c <radioTestTransmit+0x108>
						power = (power + 1 > 20) ? 10 : power + 1;
 80025e2:	782b      	ldrb	r3, [r5, #0]
 80025e4:	2b13      	cmp	r3, #19
 80025e6:	bf8e      	itee	hi
 80025e8:	230a      	movhi	r3, #10
 80025ea:	3301      	addls	r3, #1
 80025ec:	b2db      	uxtbls	r3, r3
					else
						power = radioTxTestMode + 9;
 80025ee:	702b      	strb	r3, [r5, #0]
					myRadio.power = power;
 80025f0:	782b      	ldrb	r3, [r5, #0]
					SX127X_config (&myRadio);
 80025f2:	4630      	mov	r0, r6
					myRadio.power = power;
 80025f4:	7133      	strb	r3, [r6, #4]
					SX127X_config (&myRadio);
 80025f6:	f001 ff0d 	bl	8004414 <SX127X_config>
					myRadio.txBuf[0] = 'a' + power - 10;
 80025fa:	782b      	ldrb	r3, [r5, #0]
					SX127X_transmitAsync (&myRadio, 3);
 80025fc:	2103      	movs	r1, #3
					myRadio.txBuf[0] = 'a' + power - 10;
 80025fe:	3357      	adds	r3, #87	; 0x57
					SX127X_transmitAsync (&myRadio, 3);
 8002600:	4630      	mov	r0, r6
					myRadio.txBuf[0] = 'a' + power - 10;
 8002602:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
					SX127X_transmitAsync (&myRadio, 3);
 8002606:	f002 f843 	bl	8004690 <SX127X_transmitAsync>
					flag.lcdRefreshRequest = 1;
 800260a:	7823      	ldrb	r3, [r4, #0]
 800260c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002610:	7023      	strb	r3, [r4, #0]
				}

			if (flag.encInc || flag.encDec)
 8002612:	7822      	ldrb	r2, [r4, #0]
 8002614:	0793      	lsls	r3, r2, #30
 8002616:	d017      	beq.n	8002648 <radioTestTransmit+0xc4>
				{
					if (flag.encInc)
 8002618:	07d0      	lsls	r0, r2, #31
 800261a:	d507      	bpl.n	800262c <radioTestTransmit+0xa8>
						radioTxTestMode = (radioTxTestMode == 11) ? 0 : radioTxTestMode + 1;
 800261c:	4923      	ldr	r1, [pc, #140]	; (80026ac <radioTestTransmit+0x128>)
 800261e:	780b      	ldrb	r3, [r1, #0]
 8002620:	2b0b      	cmp	r3, #11
 8002622:	bf0e      	itee	eq
 8002624:	2300      	moveq	r3, #0
 8002626:	3301      	addne	r3, #1
 8002628:	b2db      	uxtbne	r3, r3
 800262a:	700b      	strb	r3, [r1, #0]
					if (flag.encDec)
 800262c:	0791      	lsls	r1, r2, #30
 800262e:	d505      	bpl.n	800263c <radioTestTransmit+0xb8>
						radioTxTestMode = (radioTxTestMode == 0) ? 11 : radioTxTestMode - 1;
 8002630:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <radioTestTransmit+0x128>)
 8002632:	7813      	ldrb	r3, [r2, #0]
 8002634:	b363      	cbz	r3, 8002690 <radioTestTransmit+0x10c>
 8002636:	3b01      	subs	r3, #1
 8002638:	b2db      	uxtb	r3, r3
 800263a:	7013      	strb	r3, [r2, #0]
					flag.encInc = 0;
 800263c:	7823      	ldrb	r3, [r4, #0]
 800263e:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 8002642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002646:	7023      	strb	r3, [r4, #0]
					flag.encDec = 0;
					flag.lcdRefreshRequest = 1;
				}

			SX127X_Routine (&myRadio);
 8002648:	4630      	mov	r0, r6
 800264a:	f002 f86f 	bl	800472c <SX127X_Routine>
			if (flag.lcdRefreshRequest)
 800264e:	7823      	ldrb	r3, [r4, #0]
 8002650:	065a      	lsls	r2, r3, #25
 8002652:	d5a9      	bpl.n	80025a8 <radioTestTransmit+0x24>
				{
					flag.lcdRefreshRequest = 0;
 8002654:	f36f 1386 	bfc	r3, #6, #1
 8002658:	7023      	strb	r3, [r4, #0]

					clearStrings ();
 800265a:	f7fe fc4b 	bl	8000ef4 <clearStrings>
					sprintf (string[0], "Transmitter");
 800265e:	4914      	ldr	r1, [pc, #80]	; (80026b0 <radioTestTransmit+0x12c>)
 8002660:	4814      	ldr	r0, [pc, #80]	; (80026b4 <radioTestTransmit+0x130>)
 8002662:	f005 fb55 	bl	8007d10 <strcpy>
					sprintf (string[1], "Mode:");
 8002666:	4914      	ldr	r1, [pc, #80]	; (80026b8 <radioTestTransmit+0x134>)
 8002668:	4814      	ldr	r0, [pc, #80]	; (80026bc <radioTestTransmit+0x138>)
 800266a:	f005 fb51 	bl	8007d10 <strcpy>
					if (!radioTxTestMode)
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <radioTestTransmit+0x128>)
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	b97a      	cbnz	r2, 8002694 <radioTestTransmit+0x110>
						sprintf (string[3], "Cyclic");
 8002674:	4912      	ldr	r1, [pc, #72]	; (80026c0 <radioTestTransmit+0x13c>)
 8002676:	4813      	ldr	r0, [pc, #76]	; (80026c4 <radioTestTransmit+0x140>)
 8002678:	f005 fb4a 	bl	8007d10 <strcpy>
					else
						sprintf (string[3], "Constant %u mw", radioTxTestMode + 9);
					sprintf (string[2], "Pow:%d dBm", power);
 800267c:	782a      	ldrb	r2, [r5, #0]
 800267e:	4912      	ldr	r1, [pc, #72]	; (80026c8 <radioTestTransmit+0x144>)
 8002680:	4812      	ldr	r0, [pc, #72]	; (80026cc <radioTestTransmit+0x148>)
 8002682:	f005 fb25 	bl	8007cd0 <siprintf>
					updateLcd ();
 8002686:	f7fe fc47 	bl	8000f18 <updateLcd>
 800268a:	e78d      	b.n	80025a8 <radioTestTransmit+0x24>
						power = radioTxTestMode + 9;
 800268c:	3309      	adds	r3, #9
 800268e:	e7ae      	b.n	80025ee <radioTestTransmit+0x6a>
						radioTxTestMode = (radioTxTestMode == 0) ? 11 : radioTxTestMode - 1;
 8002690:	230b      	movs	r3, #11
 8002692:	e7d2      	b.n	800263a <radioTestTransmit+0xb6>
						sprintf (string[3], "Constant %u mw", radioTxTestMode + 9);
 8002694:	490e      	ldr	r1, [pc, #56]	; (80026d0 <radioTestTransmit+0x14c>)
 8002696:	3209      	adds	r2, #9
 8002698:	480a      	ldr	r0, [pc, #40]	; (80026c4 <radioTestTransmit+0x140>)
 800269a:	f005 fb19 	bl	8007cd0 <siprintf>
 800269e:	e7ed      	b.n	800267c <radioTestTransmit+0xf8>
 80026a0:	20000998 	.word	0x20000998
 80026a4:	20000b4c 	.word	0x20000b4c
 80026a8:	20000040 	.word	0x20000040
 80026ac:	20000151 	.word	0x20000151
 80026b0:	080095f9 	.word	0x080095f9
 80026b4:	20000168 	.word	0x20000168
 80026b8:	08009605 	.word	0x08009605
 80026bc:	200001a8 	.word	0x200001a8
 80026c0:	0800960b 	.word	0x0800960b
 80026c4:	20000228 	.word	0x20000228
 80026c8:	08009621 	.word	0x08009621
 80026cc:	200001e8 	.word	0x200001e8
 80026d0:	08009612 	.word	0x08009612

080026d4 <radioTestReceive>:
 * Transmission powerd displayed by LCD and led
 * @param  None
 * @retval None
 */
void radioTestReceive ()
{
 80026d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SX127X_defaultConfig (&myRadio);
 80026d8:	4d62      	ldr	r5, [pc, #392]	; (8002864 <radioTestReceive+0x190>)
{
 80026da:	b08b      	sub	sp, #44	; 0x2c
	SX127X_defaultConfig (&myRadio);
 80026dc:	4628      	mov	r0, r5
 80026de:	f001 fe4d 	bl	800437c <SX127X_defaultConfig>
	tryLoadSettings ();
 80026e2:	f7fe fc63 	bl	8000fac <tryLoadSettings>
	SX127X_config (&myRadio);
 80026e6:	4628      	mov	r0, r5
 80026e8:	f001 fe94 	bl	8004414 <SX127X_config>
	myRadio.alwaysRX = 1;
 80026ec:	2301      	movs	r3, #1
			static uint16_t ledPower[9];
			uint8_t i;
			uint32_t lastMessageReceived = 0;
			char message[20] = { 0, };

			SX127X_Routine (&myRadio);
 80026ee:	462f      	mov	r7, r5
	flag.lcdRefreshRequest = 1;
 80026f0:	4e5d      	ldr	r6, [pc, #372]	; (8002868 <radioTestReceive+0x194>)
	myRadio.alwaysRX = 1;
 80026f2:	73eb      	strb	r3, [r5, #15]
	flag.lcdRefreshRequest = 1;
 80026f4:	7833      	ldrb	r3, [r6, #0]
			else
				wsSetColor (1, 0, 0, 0);

			for (i = 2; i < 9; i++)
				{
					wsSetColor (i, 0, ledPower[i] / 256, 0);
 80026f6:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002870 <radioTestReceive+0x19c>
	flag.lcdRefreshRequest = 1;
 80026fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
			if (flag.lcdRefreshRequest)
				{
					flag.lcdRefreshRequest = 0;

					clearStrings ();
					sprintf (string[0], "Receiver RSSI:%d dB", SX127X_RSSI_Pack (&myRadio));
 80026fe:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8002888 <radioTestReceive+0x1b4>
	flag.lcdRefreshRequest = 1;
 8002702:	7033      	strb	r3, [r6, #0]
			char message[20] = { 0, };
 8002704:	2400      	movs	r4, #0
 8002706:	2210      	movs	r2, #16
 8002708:	4621      	mov	r1, r4
 800270a:	a806      	add	r0, sp, #24
 800270c:	9405      	str	r4, [sp, #20]
 800270e:	f005 fa49 	bl	8007ba4 <memset>
			SX127X_Routine (&myRadio);
 8002712:	4638      	mov	r0, r7
 8002714:	f002 f80a 	bl	800472c <SX127X_Routine>
			if (flag.uartGotMessage)
 8002718:	7873      	ldrb	r3, [r6, #1]
 800271a:	07d9      	lsls	r1, r3, #31
 800271c:	d504      	bpl.n	8002728 <radioTestReceive+0x54>
					flag.uartGotMessage = 0;
 800271e:	f364 0300 	bfi	r3, r4, #0, #1
 8002722:	7073      	strb	r3, [r6, #1]
					uartReceiveHandler ();
 8002724:	f002 f8f6 	bl	8004914 <uartReceiveHandler>
			if (myRadio.readBytes)
 8002728:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
 800272c:	2a00      	cmp	r2, #0
 800272e:	f000 8090 	beq.w	8002852 <radioTestReceive+0x17e>
					if (myRadio.badCrc)
 8002732:	f895 4060 	ldrb.w	r4, [r5, #96]	; 0x60
 8002736:	b11c      	cbz	r4, 8002740 <radioTestReceive+0x6c>
							myRadio.readBytes = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
							continue;
 800273e:	e7e1      	b.n	8002704 <radioTestReceive+0x30>
					memcpy (message, myRadio.rxBuf, myRadio.readBytes);
 8002740:	494a      	ldr	r1, [pc, #296]	; (800286c <radioTestReceive+0x198>)
 8002742:	a805      	add	r0, sp, #20
 8002744:	f005 fa20 	bl	8007b88 <memcpy>
					ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8002748:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800274c:	7f6b      	ldrb	r3, [r5, #29]
					myRadio.readBytes = 0;
 800274e:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
					ledPower[(int) (myRadio.rxBuf[0] - 'a')] = 3000;
 8002752:	3b61      	subs	r3, #97	; 0x61
 8002754:	f828 2013 	strh.w	r2, [r8, r3, lsl #1]
					lastMessageReceived = HAL_GetTick ();
 8002758:	f002 fc7e 	bl	8005058 <HAL_GetTick>
 800275c:	4604      	mov	r4, r0
					flag.lcdRefreshRequest = 1;
 800275e:	7833      	ldrb	r3, [r6, #0]
 8002760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002764:	7033      	strb	r3, [r6, #0]
			if (myRadio.signalDetected)
 8002766:	7f2b      	ldrb	r3, [r5, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d074      	beq.n	8002856 <radioTestReceive+0x182>
				wsSetColor (0, 0, 0, 20);
 800276c:	2200      	movs	r2, #0
 800276e:	2314      	movs	r3, #20
 8002770:	4611      	mov	r1, r2
 8002772:	4610      	mov	r0, r2
				wsSetColor (0, 0, 0, 0);
 8002774:	f002 fb9c 	bl	8004eb0 <wsSetColor>
			if (HAL_GetTick () - lastMessageReceived < 1000)
 8002778:	f002 fc6e 	bl	8005058 <HAL_GetTick>
 800277c:	1b00      	subs	r0, r0, r4
 800277e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
				wsSetColor (1, 0, 20, 0);
 8002782:	f04f 0300 	mov.w	r3, #0
			if (HAL_GetTick () - lastMessageReceived < 1000)
 8002786:	d26a      	bcs.n	800285e <radioTestReceive+0x18a>
				wsSetColor (1, 0, 20, 0);
 8002788:	2214      	movs	r2, #20
 800278a:	4619      	mov	r1, r3
 800278c:	2001      	movs	r0, #1
 800278e:	f002 fb8f 	bl	8004eb0 <wsSetColor>
			uint32_t lastMessageReceived = 0;
 8002792:	2402      	movs	r4, #2
					wsSetColor (i, 0, ledPower[i] / 256, 0);
 8002794:	2300      	movs	r3, #0
 8002796:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 800279a:	b2e0      	uxtb	r0, r4
 800279c:	4619      	mov	r1, r3
 800279e:	0a12      	lsrs	r2, r2, #8
 80027a0:	3401      	adds	r4, #1
 80027a2:	f002 fb85 	bl	8004eb0 <wsSetColor>
			for (i = 2; i < 9; i++)
 80027a6:	2c09      	cmp	r4, #9
 80027a8:	d1f4      	bne.n	8002794 <radioTestReceive+0xc0>
			wsPrepareArray ();
 80027aa:	f002 fbc1 	bl	8004f30 <wsPrepareArray>
			for (i = 0; i < 9; i++)
 80027ae:	4a30      	ldr	r2, [pc, #192]	; (8002870 <radioTestReceive+0x19c>)
				ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 80027b0:	f832 3b02 	ldrh.w	r3, [r2], #2
 80027b4:	b10b      	cbz	r3, 80027ba <radioTestReceive+0xe6>
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3c01      	subs	r4, #1
			for (i = 0; i < 9; i++)
 80027bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
				ledPower[i] = ledPower[i] ? ledPower[i] - 1 : 0;
 80027c0:	f822 3c02 	strh.w	r3, [r2, #-2]
			for (i = 0; i < 9; i++)
 80027c4:	d1f4      	bne.n	80027b0 <radioTestReceive+0xdc>
			if (flag.lcdRefreshRequest)
 80027c6:	7833      	ldrb	r3, [r6, #0]
 80027c8:	065a      	lsls	r2, r3, #25
 80027ca:	d59b      	bpl.n	8002704 <radioTestReceive+0x30>
					flag.lcdRefreshRequest = 0;
 80027cc:	f364 1386 	bfi	r3, r4, #6, #1
 80027d0:	7033      	strb	r3, [r6, #0]
					clearStrings ();
 80027d2:	f7fe fb8f 	bl	8000ef4 <clearStrings>
					sprintf (string[0], "Receiver RSSI:%d dB", SX127X_RSSI_Pack (&myRadio));
 80027d6:	4638      	mov	r0, r7
 80027d8:	f001 ff78 	bl	80046cc <SX127X_RSSI_Pack>
 80027dc:	4649      	mov	r1, r9
 80027de:	4602      	mov	r2, r0
 80027e0:	4824      	ldr	r0, [pc, #144]	; (8002874 <radioTestReceive+0x1a0>)
 80027e2:	f005 fa75 	bl	8007cd0 <siprintf>
					memcpy (string[1], message, 14);
 80027e6:	4b24      	ldr	r3, [pc, #144]	; (8002878 <radioTestReceive+0x1a4>)
 80027e8:	aa05      	add	r2, sp, #20
 80027ea:	f10d 0c1c 	add.w	ip, sp, #28
 80027ee:	4614      	mov	r4, r2
 80027f0:	cc03      	ldmia	r4!, {r0, r1}
 80027f2:	4564      	cmp	r4, ip
 80027f4:	6018      	str	r0, [r3, #0]
 80027f6:	6059      	str	r1, [r3, #4]
 80027f8:	4622      	mov	r2, r4
 80027fa:	f103 0308 	add.w	r3, r3, #8
 80027fe:	d1f6      	bne.n	80027ee <radioTestReceive+0x11a>
 8002800:	6820      	ldr	r0, [r4, #0]
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 8002802:	491e      	ldr	r1, [pc, #120]	; (800287c <radioTestReceive+0x1a8>)
					memcpy (string[1], message, 14);
 8002804:	6018      	str	r0, [r3, #0]
 8002806:	88a2      	ldrh	r2, [r4, #4]
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 8002808:	481d      	ldr	r0, [pc, #116]	; (8002880 <radioTestReceive+0x1ac>)
					memcpy (string[1], message, 14);
 800280a:	809a      	strh	r2, [r3, #4]
					sprintf (string[2], "%02x %02x %02x %02x %02x", message[0], message[1], message[2], message[3], message[4]);
 800280c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8002810:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8002814:	9302      	str	r3, [sp, #8]
 8002816:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800281a:	9301      	str	r3, [sp, #4]
 800281c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002826:	f005 fa53 	bl	8007cd0 <siprintf>
					sprintf (string[3], "%02x %02x %02x %02x %02x", message[5], message[6], message[7], message[8], message[9]);
 800282a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800282e:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002838:	4910      	ldr	r1, [pc, #64]	; (800287c <radioTestReceive+0x1a8>)
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002840:	4810      	ldr	r0, [pc, #64]	; (8002884 <radioTestReceive+0x1b0>)
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8002848:	f005 fa42 	bl	8007cd0 <siprintf>
					updateLcd ();
 800284c:	f7fe fb64 	bl	8000f18 <updateLcd>
 8002850:	e758      	b.n	8002704 <radioTestReceive+0x30>
			uint32_t lastMessageReceived = 0;
 8002852:	4614      	mov	r4, r2
 8002854:	e787      	b.n	8002766 <radioTestReceive+0x92>
				wsSetColor (0, 0, 0, 0);
 8002856:	461a      	mov	r2, r3
 8002858:	4619      	mov	r1, r3
 800285a:	4618      	mov	r0, r3
 800285c:	e78a      	b.n	8002774 <radioTestReceive+0xa0>
				wsSetColor (1, 0, 0, 0);
 800285e:	461a      	mov	r2, r3
 8002860:	e793      	b.n	800278a <radioTestReceive+0xb6>
 8002862:	bf00      	nop
 8002864:	20000998 	.word	0x20000998
 8002868:	20000b4c 	.word	0x20000b4c
 800286c:	200009b5 	.word	0x200009b5
 8002870:	2000013c 	.word	0x2000013c
 8002874:	20000168 	.word	0x20000168
 8002878:	200001a8 	.word	0x200001a8
 800287c:	08009640 	.word	0x08009640
 8002880:	200001e8 	.word	0x200001e8
 8002884:	20000228 	.word	0x20000228
 8002888:	0800962c 	.word	0x0800962c

0800288c <radioTestPing>:
 * Pings Base in manual or automatic mode
 * @param  None
 * @retval None
 */
void radioTestPing ()
{
 800288c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t lastSend = 0;
	uint32_t lastReceived = 0;
	uint32_t lastLcdUpdate = 0;
	uint8_t i;
	uint32_t sendCount = 0;
	uint32_t receivedCount = 0;
 8002890:	2600      	movs	r6, #0
	SX127X_defaultConfig (&myRadio);
 8002892:	4c83      	ldr	r4, [pc, #524]	; (8002aa0 <radioTestPing+0x214>)
	uint32_t sendCount = 0;
 8002894:	46b0      	mov	r8, r6
	SX127X_defaultConfig (&myRadio);
 8002896:	4620      	mov	r0, r4
 8002898:	f001 fd70 	bl	800437c <SX127X_defaultConfig>
	tryLoadSettings ();
 800289c:	f7fe fb86 	bl	8000fac <tryLoadSettings>
	SX127X_config (&myRadio);
 80028a0:	4620      	mov	r0, r4
 80028a2:	f001 fdb7 	bl	8004414 <SX127X_config>
	myRadio.alwaysRX = 1;
 80028a6:	2301      	movs	r3, #1

	txMes->adr = 0;
	txMes->disarm = 0;
	txMes->uplink = 0;
 80028a8:	2202      	movs	r2, #2
	uint32_t lastReceived = 0;
 80028aa:	46b1      	mov	r9, r6
	uint32_t lastSend = 0;
 80028ac:	46b2      	mov	sl, r6
	uint8_t autoPing = 0;
 80028ae:	4637      	mov	r7, r6
	myRadio.alwaysRX = 1;
 80028b0:	73e3      	strb	r3, [r4, #15]
	txMes->adr = 0;
 80028b2:	4b7c      	ldr	r3, [pc, #496]	; (8002aa4 <radioTestPing+0x218>)
	uint32_t lastLcdUpdate = 0;
 80028b4:	9601      	str	r6, [sp, #4]
	txMes->adr = 0;
 80028b6:	681b      	ldr	r3, [r3, #0]
	txMes->uplink = 0;
 80028b8:	701a      	strb	r2, [r3, #0]
	txMes->disarm = 0;
 80028ba:	785a      	ldrb	r2, [r3, #1]
 80028bc:	f36f 0200 	bfc	r2, #0, #1
 80028c0:	705a      	strb	r2, [r3, #1]

	while (1)
		{
			HAL_UART_Receive_IT (&huart1, &uartIn, 1);

			if (flag.encInc || flag.encDec)
 80028c2:	4d79      	ldr	r5, [pc, #484]	; (8002aa8 <radioTestPing+0x21c>)
			HAL_UART_Receive_IT (&huart1, &uartIn, 1);
 80028c4:	2201      	movs	r2, #1
 80028c6:	4979      	ldr	r1, [pc, #484]	; (8002aac <radioTestPing+0x220>)
 80028c8:	4879      	ldr	r0, [pc, #484]	; (8002ab0 <radioTestPing+0x224>)
 80028ca:	f005 f91a 	bl	8007b02 <HAL_UART_Receive_IT>
			if (flag.encInc || flag.encDec)
 80028ce:	782b      	ldrb	r3, [r5, #0]
 80028d0:	0798      	lsls	r0, r3, #30
 80028d2:	d006      	beq.n	80028e2 <radioTestPing+0x56>
				{
					flag.encInc = 0;
					flag.encDec = 0;
					autoPing = ~autoPing;
 80028d4:	43ff      	mvns	r7, r7
					flag.encInc = 0;
 80028d6:	f023 0343 	bic.w	r3, r3, #67	; 0x43
 80028da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
					autoPing = ~autoPing;
 80028de:	b2ff      	uxtb	r7, r7
					flag.encInc = 0;
 80028e0:	702b      	strb	r3, [r5, #0]
					flag.lcdRefreshRequest = 1;
				}

			if (myRadio.readBytes > 0)
 80028e2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80028e6:	b173      	cbz	r3, 8002906 <radioTestPing+0x7a>
				{
					if (myRadio.badCrc != 0)
 80028e8:	f894 b060 	ldrb.w	fp, [r4, #96]	; 0x60
 80028ec:	f1bb 0f00 	cmp.w	fp, #0
 80028f0:	d003      	beq.n	80028fa <radioTestPing+0x6e>
						{
							myRadio.readBytes = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
							continue;
 80028f8:	e7e3      	b.n	80028c2 <radioTestPing+0x36>
						}
					receivedCount++;
					lastReceived = HAL_GetTick ();
 80028fa:	f002 fbad 	bl	8005058 <HAL_GetTick>
 80028fe:	4681      	mov	r9, r0
					receivedCount++;
 8002900:	3601      	adds	r6, #1
					myRadio.readBytes = 0;
 8002902:	f884 b05d 	strb.w	fp, [r4, #93]	; 0x5d
				}

			if (HAL_GetTick () - lastSend > 2000 && (autoPing || flag.encOk))
 8002906:	f002 fba7 	bl	8005058 <HAL_GetTick>
 800290a:	eba0 000a 	sub.w	r0, r0, sl
 800290e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8002912:	d910      	bls.n	8002936 <radioTestPing+0xaa>
 8002914:	782b      	ldrb	r3, [r5, #0]
 8002916:	f003 0204 	and.w	r2, r3, #4
 800291a:	433a      	orrs	r2, r7
 800291c:	d00b      	beq.n	8002936 <radioTestPing+0xaa>
				{
					sendCount++;
					flag.encOk = 0;
 800291e:	f36f 0382 	bfc	r3, #2, #1
					SX127X_transmitAsync (&myRadio, 3);
 8002922:	2103      	movs	r1, #3
 8002924:	485e      	ldr	r0, [pc, #376]	; (8002aa0 <radioTestPing+0x214>)
					flag.encOk = 0;
 8002926:	702b      	strb	r3, [r5, #0]
					SX127X_transmitAsync (&myRadio, 3);
 8002928:	f001 feb2 	bl	8004690 <SX127X_transmitAsync>
					lastSend = HAL_GetTick ();
 800292c:	f002 fb94 	bl	8005058 <HAL_GetTick>
 8002930:	4682      	mov	sl, r0
					sendCount++;
 8002932:	f108 0801 	add.w	r8, r8, #1
				}

			SX127X_Routine (&myRadio);
 8002936:	485a      	ldr	r0, [pc, #360]	; (8002aa0 <radioTestPing+0x214>)
 8002938:	f001 fef8 	bl	800472c <SX127X_Routine>
 800293c:	f04f 0b00 	mov.w	fp, #0

//Handle LED
			for (i = 0; i < 9; i++)
				wsSetColor (i, BLACK);
 8002940:	2300      	movs	r3, #0
 8002942:	fa5f f08b 	uxtb.w	r0, fp
 8002946:	461a      	mov	r2, r3
 8002948:	4619      	mov	r1, r3
 800294a:	f10b 0b01 	add.w	fp, fp, #1
 800294e:	f002 faaf 	bl	8004eb0 <wsSetColor>
			for (i = 0; i < 9; i++)
 8002952:	f1bb 0f09 	cmp.w	fp, #9
 8002956:	d1f3      	bne.n	8002940 <radioTestPing+0xb4>
			if (myRadio.status == TX)
 8002958:	f894 b010 	ldrb.w	fp, [r4, #16]
 800295c:	f1bb 0f03 	cmp.w	fp, #3
 8002960:	d117      	bne.n	8002992 <radioTestPing+0x106>
				{
					wsSetColor (1, MAGENTA);
 8002962:	2310      	movs	r3, #16
 8002964:	2200      	movs	r2, #0
 8002966:	4619      	mov	r1, r3
 8002968:	2001      	movs	r0, #1
 800296a:	f002 faa1 	bl	8004eb0 <wsSetColor>
					wsSetColor (2, MAGENTA);
 800296e:	2310      	movs	r3, #16
 8002970:	2200      	movs	r2, #0
 8002972:	4619      	mov	r1, r3
 8002974:	2002      	movs	r0, #2
 8002976:	f002 fa9b 	bl	8004eb0 <wsSetColor>
					wsSetColor (3, MAGENTA);
 800297a:	2310      	movs	r3, #16
 800297c:	2200      	movs	r2, #0
 800297e:	4619      	mov	r1, r3
 8002980:	4658      	mov	r0, fp
 8002982:	f002 fa95 	bl	8004eb0 <wsSetColor>
					wsSetColor (4, MAGENTA);
 8002986:	2310      	movs	r3, #16
 8002988:	2200      	movs	r2, #0
 800298a:	4619      	mov	r1, r3
 800298c:	2004      	movs	r0, #4
 800298e:	f002 fa8f 	bl	8004eb0 <wsSetColor>
				}
			if (HAL_GetTick () - lastReceived < 600 && lastReceived)
 8002992:	f002 fb61 	bl	8005058 <HAL_GetTick>
 8002996:	eba0 0009 	sub.w	r0, r0, r9
 800299a:	f5b0 7f16 	cmp.w	r0, #600	; 0x258
 800299e:	d21a      	bcs.n	80029d6 <radioTestPing+0x14a>
 80029a0:	f1b9 0f00 	cmp.w	r9, #0
 80029a4:	d017      	beq.n	80029d6 <radioTestPing+0x14a>
				{
					wsSetColor (5, GREEN);
 80029a6:	2300      	movs	r3, #0
 80029a8:	2210      	movs	r2, #16
 80029aa:	4619      	mov	r1, r3
 80029ac:	2005      	movs	r0, #5
 80029ae:	f002 fa7f 	bl	8004eb0 <wsSetColor>
					wsSetColor (6, GREEN);
 80029b2:	2300      	movs	r3, #0
 80029b4:	2210      	movs	r2, #16
 80029b6:	4619      	mov	r1, r3
 80029b8:	2006      	movs	r0, #6
 80029ba:	f002 fa79 	bl	8004eb0 <wsSetColor>
					wsSetColor (7, GREEN);
 80029be:	2300      	movs	r3, #0
 80029c0:	2210      	movs	r2, #16
 80029c2:	4619      	mov	r1, r3
 80029c4:	2007      	movs	r0, #7
 80029c6:	f002 fa73 	bl	8004eb0 <wsSetColor>
					wsSetColor (8, GREEN);
 80029ca:	2300      	movs	r3, #0
 80029cc:	2210      	movs	r2, #16
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f002 fa6d 	bl	8004eb0 <wsSetColor>
				}
			if (HAL_GetTick () - lastUartConnect < 200)
 80029d6:	f002 fb3f 	bl	8005058 <HAL_GetTick>
 80029da:	f8df b100 	ldr.w	fp, [pc, #256]	; 8002adc <radioTestPing+0x250>
 80029de:	f8db 3000 	ldr.w	r3, [fp]
 80029e2:	1ac0      	subs	r0, r0, r3
 80029e4:	28c7      	cmp	r0, #199	; 0xc7
 80029e6:	d805      	bhi.n	80029f4 <radioTestPing+0x168>
				{
					wsSetColor (0, YELLOW);
 80029e8:	2300      	movs	r3, #0
 80029ea:	2210      	movs	r2, #16
 80029ec:	4618      	mov	r0, r3
 80029ee:	4611      	mov	r1, r2
 80029f0:	f002 fa5e 	bl	8004eb0 <wsSetColor>
				}
			wsPrepareArray ();
 80029f4:	f002 fa9c 	bl	8004f30 <wsPrepareArray>

//Handle UART
			if (HAL_GetTick () - lastLcdUpdate > 300)
 80029f8:	f002 fb2e 	bl	8005058 <HAL_GetTick>
 80029fc:	9b01      	ldr	r3, [sp, #4]
 80029fe:	1ac0      	subs	r0, r0, r3
 8002a00:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
				flag.lcdRefreshRequest = 1;
 8002a04:	bf82      	ittt	hi
 8002a06:	782b      	ldrbhi	r3, [r5, #0]
 8002a08:	f043 0340 	orrhi.w	r3, r3, #64	; 0x40
 8002a0c:	702b      	strbhi	r3, [r5, #0]

			if (flag.uartGotMessage)
 8002a0e:	786b      	ldrb	r3, [r5, #1]
 8002a10:	07d9      	lsls	r1, r3, #31
 8002a12:	d508      	bpl.n	8002a26 <radioTestPing+0x19a>
				{
					flag.uartGotMessage = 0;
 8002a14:	f36f 0300 	bfc	r3, #0, #1
 8002a18:	706b      	strb	r3, [r5, #1]
					lastUartConnect = HAL_GetTick ();
 8002a1a:	f002 fb1d 	bl	8005058 <HAL_GetTick>
 8002a1e:	f8cb 0000 	str.w	r0, [fp]

					uartReceiveHandler ();
 8002a22:	f001 ff77 	bl	8004914 <uartReceiveHandler>
				}

//Handle LCD
			if (flag.lcdRefreshRequest)
 8002a26:	782b      	ldrb	r3, [r5, #0]
 8002a28:	065a      	lsls	r2, r3, #25
 8002a2a:	f57f af4a 	bpl.w	80028c2 <radioTestPing+0x36>
				{
					flag.lcdRefreshRequest = 0;
 8002a2e:	f36f 1386 	bfc	r3, #6, #1
 8002a32:	702b      	strb	r3, [r5, #0]

					float sucess;
					if (sendCount != 0)
 8002a34:	f1b8 0f00 	cmp.w	r8, #0
 8002a38:	d02d      	beq.n	8002a96 <radioTestPing+0x20a>
						sucess = (float) receivedCount / (float) sendCount;
 8002a3a:	4630      	mov	r0, r6
 8002a3c:	f7fd fc44 	bl	80002c8 <__aeabi_ui2f>
 8002a40:	4605      	mov	r5, r0
 8002a42:	4640      	mov	r0, r8
 8002a44:	f7fd fc40 	bl	80002c8 <__aeabi_ui2f>
 8002a48:	4601      	mov	r1, r0
 8002a4a:	4628      	mov	r0, r5
 8002a4c:	f7fd fd48 	bl	80004e0 <__aeabi_fdiv>
 8002a50:	4605      	mov	r5, r0
					else
						sucess = 0;

					lastLcdUpdate = HAL_GetTick ();
 8002a52:	f002 fb01 	bl	8005058 <HAL_GetTick>
 8002a56:	9001      	str	r0, [sp, #4]
					clearStrings ();
 8002a58:	f7fe fa4c 	bl	8000ef4 <clearStrings>

					if (autoPing)
 8002a5c:	b1ef      	cbz	r7, 8002a9a <radioTestPing+0x20e>
						sprintf (string[0], "Ping auto");
 8002a5e:	4915      	ldr	r1, [pc, #84]	; (8002ab4 <radioTestPing+0x228>)
					else
						sprintf (string[0], "Ping manual");
 8002a60:	4815      	ldr	r0, [pc, #84]	; (8002ab8 <radioTestPing+0x22c>)
 8002a62:	f005 f955 	bl	8007d10 <strcpy>
					sprintf (string[1], "send %lu", sendCount);
 8002a66:	4642      	mov	r2, r8
 8002a68:	4914      	ldr	r1, [pc, #80]	; (8002abc <radioTestPing+0x230>)
 8002a6a:	4815      	ldr	r0, [pc, #84]	; (8002ac0 <radioTestPing+0x234>)
 8002a6c:	f005 f930 	bl	8007cd0 <siprintf>
					sprintf (string[2], "received %lu", receivedCount);
 8002a70:	4632      	mov	r2, r6
 8002a72:	4914      	ldr	r1, [pc, #80]	; (8002ac4 <radioTestPing+0x238>)
 8002a74:	4814      	ldr	r0, [pc, #80]	; (8002ac8 <radioTestPing+0x23c>)
 8002a76:	f005 f92b 	bl	8007cd0 <siprintf>
					sprintf (string[3], "%d%% sucess", (int) (sucess * 100));
 8002a7a:	4914      	ldr	r1, [pc, #80]	; (8002acc <radioTestPing+0x240>)
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f7fd fc7b 	bl	8000378 <__aeabi_fmul>
 8002a82:	f7fd fe3f 	bl	8000704 <__aeabi_f2iz>
 8002a86:	4912      	ldr	r1, [pc, #72]	; (8002ad0 <radioTestPing+0x244>)
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <radioTestPing+0x248>)
 8002a8c:	f005 f920 	bl	8007cd0 <siprintf>
					updateLcd ();
 8002a90:	f7fe fa42 	bl	8000f18 <updateLcd>
 8002a94:	e715      	b.n	80028c2 <radioTestPing+0x36>
						sucess = 0;
 8002a96:	2500      	movs	r5, #0
 8002a98:	e7db      	b.n	8002a52 <radioTestPing+0x1c6>
						sprintf (string[0], "Ping manual");
 8002a9a:	490f      	ldr	r1, [pc, #60]	; (8002ad8 <radioTestPing+0x24c>)
 8002a9c:	e7e0      	b.n	8002a60 <radioTestPing+0x1d4>
 8002a9e:	bf00      	nop
 8002aa0:	20000998 	.word	0x20000998
 8002aa4:	20000048 	.word	0x20000048
 8002aa8:	20000b4c 	.word	0x20000b4c
 8002aac:	20000b98 	.word	0x20000b98
 8002ab0:	20000c30 	.word	0x20000c30
 8002ab4:	08009659 	.word	0x08009659
 8002ab8:	20000168 	.word	0x20000168
 8002abc:	0800966f 	.word	0x0800966f
 8002ac0:	200001a8 	.word	0x200001a8
 8002ac4:	08009678 	.word	0x08009678
 8002ac8:	200001e8 	.word	0x200001e8
 8002acc:	42c80000 	.word	0x42c80000
 8002ad0:	08009685 	.word	0x08009685
 8002ad4:	20000228 	.word	0x20000228
 8002ad8:	08009663 	.word	0x08009663
 8002adc:	200015c0 	.word	0x200015c0

08002ae0 <radioSignalIndicator>:
 * Shows current RSSI
 * @param  None
 * @retval None
 */
void radioSignalIndicator ()
{
 8002ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	int16_t rssi;
	int16_t scale;
	SX127X_defaultConfig (&myRadio);
 8002ae4:	4829      	ldr	r0, [pc, #164]	; (8002b8c <radioSignalIndicator+0xac>)
 8002ae6:	f001 fc49 	bl	800437c <SX127X_defaultConfig>
	tryLoadSettings ();
 8002aea:	f7fe fa5f 	bl	8000fac <tryLoadSettings>
	SX127X_config (&myRadio);
 8002aee:	4827      	ldr	r0, [pc, #156]	; (8002b8c <radioSignalIndicator+0xac>)
 8002af0:	f001 fc90 	bl	8004414 <SX127X_config>
	while (1)
		{
			rssi = SX127X_RSSI (&myRadio);
 8002af4:	4e25      	ldr	r6, [pc, #148]	; (8002b8c <radioSignalIndicator+0xac>)
			scale = (rssi > -120) ? 120 + rssi : 0;
			clearStrings ();
			sprintf (string[0], "RSSI Meter");
 8002af6:	4f26      	ldr	r7, [pc, #152]	; (8002b90 <radioSignalIndicator+0xb0>)
			rssi = SX127X_RSSI (&myRadio);
 8002af8:	4630      	mov	r0, r6
 8002afa:	f001 fdd5 	bl	80046a8 <SX127X_RSSI>
			scale = (rssi > -120) ? 120 + rssi : 0;
 8002afe:	f110 0f77 	cmn.w	r0, #119	; 0x77
 8002b02:	bfb8      	it	lt
 8002b04:	2400      	movlt	r4, #0
			rssi = SX127X_RSSI (&myRadio);
 8002b06:	4605      	mov	r5, r0
			scale = (rssi > -120) ? 120 + rssi : 0;
 8002b08:	bfa4      	itt	ge
 8002b0a:	f100 0378 	addge.w	r3, r0, #120	; 0x78
 8002b0e:	b21c      	sxthge	r4, r3
			clearStrings ();
 8002b10:	f7fe f9f0 	bl	8000ef4 <clearStrings>
			sprintf (string[0], "RSSI Meter");
 8002b14:	4639      	mov	r1, r7
 8002b16:	481f      	ldr	r0, [pc, #124]	; (8002b94 <radioSignalIndicator+0xb4>)
 8002b18:	f005 f8fa 	bl	8007d10 <strcpy>
			sprintf (string[1], "RSSI:%4d C:%d", rssi, scale);
 8002b1c:	4623      	mov	r3, r4
 8002b1e:	462a      	mov	r2, r5
 8002b20:	491d      	ldr	r1, [pc, #116]	; (8002b98 <radioSignalIndicator+0xb8>)
 8002b22:	481e      	ldr	r0, [pc, #120]	; (8002b9c <radioSignalIndicator+0xbc>)
 8002b24:	f005 f8d4 	bl	8007cd0 <siprintf>
			SX127X_Routine (&myRadio);
 8002b28:	4818      	ldr	r0, [pc, #96]	; (8002b8c <radioSignalIndicator+0xac>)
 8002b2a:	f001 fdff 	bl	800472c <SX127X_Routine>
			updateLcd ();
 8002b2e:	f7fe f9f3 	bl	8000f18 <updateLcd>
			wsSetColor (0, BLACK);
 8002b32:	2300      	movs	r3, #0
 8002b34:	461a      	mov	r2, r3
 8002b36:	4619      	mov	r1, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 f9b9 	bl	8004eb0 <wsSetColor>
			if (myRadio.signalDetected)
 8002b3e:	7f33      	ldrb	r3, [r6, #28]
 8002b40:	b12b      	cbz	r3, 8002b4e <radioSignalIndicator+0x6e>
				wsSetColor (0, CYAN);
 8002b42:	2310      	movs	r3, #16
 8002b44:	2100      	movs	r1, #0
 8002b46:	461a      	mov	r2, r3
 8002b48:	4608      	mov	r0, r1
 8002b4a:	f002 f9b1 	bl	8004eb0 <wsSetColor>
			for (i = 0; i < 8; i++)
				{
					if (scale / 10 > i)
 8002b4e:	220a      	movs	r2, #10
 8002b50:	fb94 f3f2 	sdiv	r3, r4, r2
						wsSetColor (8 - i, 0, 10, 0);
					else if (scale / 10 < i)
						wsSetColor (8 - i, 0, 0, 0);
					else
						wsSetColor (8 - i, 0, scale % 10, 0);
 8002b54:	2500      	movs	r5, #0
					if (scale / 10 > i)
 8002b56:	fa0f f883 	sxth.w	r8, r3
						wsSetColor (8 - i, 0, scale % 10, 0);
 8002b5a:	fb02 4313 	mls	r3, r2, r3, r4
 8002b5e:	b2dc      	uxtb	r4, r3
					if (scale / 10 > i)
 8002b60:	f1c5 0008 	rsb	r0, r5, #8
 8002b64:	45a8      	cmp	r8, r5
						wsSetColor (8 - i, 0, 10, 0);
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	b2c0      	uxtb	r0, r0
					if (scale / 10 > i)
 8002b6c:	dd09      	ble.n	8002b82 <radioSignalIndicator+0xa2>
						wsSetColor (8 - i, 0, 10, 0);
 8002b6e:	220a      	movs	r2, #10
						wsSetColor (8 - i, 0, scale % 10, 0);
 8002b70:	4619      	mov	r1, r3
 8002b72:	3501      	adds	r5, #1
 8002b74:	f002 f99c 	bl	8004eb0 <wsSetColor>
			for (i = 0; i < 8; i++)
 8002b78:	2d08      	cmp	r5, #8
 8002b7a:	d1f1      	bne.n	8002b60 <radioSignalIndicator+0x80>

				}
			wsPrepareArray ();
 8002b7c:	f002 f9d8 	bl	8004f30 <wsPrepareArray>
			rssi = SX127X_RSSI (&myRadio);
 8002b80:	e7ba      	b.n	8002af8 <radioSignalIndicator+0x18>
						wsSetColor (8 - i, 0, 0, 0);
 8002b82:	bfb4      	ite	lt
 8002b84:	461a      	movlt	r2, r3
						wsSetColor (8 - i, 0, scale % 10, 0);
 8002b86:	4622      	movge	r2, r4
 8002b88:	e7f2      	b.n	8002b70 <radioSignalIndicator+0x90>
 8002b8a:	bf00      	nop
 8002b8c:	20000998 	.word	0x20000998
 8002b90:	08009691 	.word	0x08009691
 8002b94:	20000168 	.word	0x20000168
 8002b98:	0800969c 	.word	0x0800969c
 8002b9c:	200001a8 	.word	0x200001a8

08002ba0 <button_ok>:
{
 8002ba0:	b538      	push	{r3, r4, r5, lr}
	if (screenMode == smModeSelect)
 8002ba2:	4aa0      	ldr	r2, [pc, #640]	; (8002e24 <button_ok+0x284>)
 8002ba4:	7813      	ldrb	r3, [r2, #0]
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	2b1d      	cmp	r3, #29
 8002baa:	d116      	bne.n	8002bda <button_ok+0x3a>
			switch (selectedMode)
 8002bac:	4b9e      	ldr	r3, [pc, #632]	; (8002e28 <button_ok+0x288>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b05      	cmp	r3, #5
 8002bb2:	f200 8094 	bhi.w	8002cde <button_ok+0x13e>
 8002bb6:	e8df f003 	tbb	[pc, r3]
 8002bba:	0603      	.short	0x0603
 8002bbc:	0e0c0a08 	.word	0x0e0c0a08
					screenMode = smRegular;
 8002bc0:	2300      	movs	r3, #0
			screenMode = smRadioMenu;
 8002bc2:	7023      	strb	r3, [r4, #0]
 8002bc4:	e08b      	b.n	8002cde <button_ok+0x13e>
					colorTest ();
 8002bc6:	f7ff fc3f 	bl	8002448 <colorTest>
					radioTestTransmit ();
 8002bca:	f7ff fcdb 	bl	8002584 <radioTestTransmit>
					radioTestReceive ();
 8002bce:	f7ff fd81 	bl	80026d4 <radioTestReceive>
					radioTestPing ();
 8002bd2:	f7ff fe5b 	bl	800288c <radioTestPing>
					radioSignalIndicator ();
 8002bd6:	f7ff ff83 	bl	8002ae0 <radioSignalIndicator>
	else if (screenMode == smRegular)
 8002bda:	b913      	cbnz	r3, 8002be2 <button_ok+0x42>
			screenMode = smNodeAction;
 8002bdc:	231c      	movs	r3, #28
				cursorPos++;
 8002bde:	7013      	strb	r3, [r2, #0]
 8002be0:	e07d      	b.n	8002cde <button_ok+0x13e>
	else if (screenMode == smMainMenu)
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d116      	bne.n	8002c14 <button_ok+0x74>
			switch (menuPosition)
 8002be6:	4b91      	ldr	r3, [pc, #580]	; (8002e2c <button_ok+0x28c>)
 8002be8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d834      	bhi.n	8002c5a <button_ok+0xba>
 8002bf0:	e8df f003 	tbb	[pc, r3]
 8002bf4:	0a080603 	.word	0x0a080603
 8002bf8:	0e0c      	.short	0x0e0c
					screenMode = smRadioMenu;
 8002bfa:	2302      	movs	r3, #2
			screenMode = smMainMenu;
 8002bfc:	7023      	strb	r3, [r4, #0]
 8002bfe:	e02c      	b.n	8002c5a <button_ok+0xba>
					screenMode = smBaseMenu;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e7fb      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smNodeMenu;
 8002c04:	2304      	movs	r3, #4
 8002c06:	e7f9      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smNetworkMenu;
 8002c08:	2305      	movs	r3, #5
 8002c0a:	e7f7      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSaveConfig;
 8002c0c:	2318      	movs	r3, #24
 8002c0e:	e7f5      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smStatus;
 8002c10:	2319      	movs	r3, #25
 8002c12:	e7f3      	b.n	8002bfc <button_ok+0x5c>
	else if (screenMode == smRadioMenu)
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d118      	bne.n	8002c4a <button_ok+0xaa>
			switch (menuPosition)
 8002c18:	4b84      	ldr	r3, [pc, #528]	; (8002e2c <button_ok+0x28c>)
 8002c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d81b      	bhi.n	8002c5a <button_ok+0xba>
 8002c22:	e8df f003 	tbb	[pc, r3]
 8002c26:	0604      	.short	0x0604
 8002c28:	0e0c0a08 	.word	0x0e0c0a08
 8002c2c:	10          	.byte	0x10
 8002c2d:	00          	.byte	0x00
					screenMode = smFrequency;
 8002c2e:	2306      	movs	r3, #6
 8002c30:	e7e4      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smBw;
 8002c32:	2308      	movs	r3, #8
 8002c34:	e7e2      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSf;
 8002c36:	2307      	movs	r3, #7
 8002c38:	e7e0      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSw;
 8002c3a:	2309      	movs	r3, #9
 8002c3c:	e7de      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smCr;
 8002c3e:	230a      	movs	r3, #10
 8002c40:	e7dc      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smPreamble;
 8002c42:	230b      	movs	r3, #11
 8002c44:	e7da      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smPower;
 8002c46:	230c      	movs	r3, #12
 8002c48:	e7d8      	b.n	8002bfc <button_ok+0x5c>
	else if (screenMode == smBaseMenu)
 8002c4a:	2b03      	cmp	r3, #3
 8002c4c:	d10c      	bne.n	8002c68 <button_ok+0xc8>
			switch (menuPosition)
 8002c4e:	4b77      	ldr	r3, [pc, #476]	; (8002e2c <button_ok+0x28c>)
 8002c50:	f993 3000 	ldrsb.w	r3, [r3]
 8002c54:	b11b      	cbz	r3, 8002c5e <button_ok+0xbe>
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d004      	beq.n	8002c64 <button_ok+0xc4>
			menuPosition = 0;
 8002c5a:	4b74      	ldr	r3, [pc, #464]	; (8002e2c <button_ok+0x28c>)
 8002c5c:	e084      	b.n	8002d68 <button_ok+0x1c8>
					screenMode = smInterval1;
 8002c5e:	230d      	movs	r3, #13
					screenMode = smCleanNodeData;
 8002c60:	7013      	strb	r3, [r2, #0]
					break;
 8002c62:	e7fa      	b.n	8002c5a <button_ok+0xba>
					screenMode = smInterval2;
 8002c64:	230e      	movs	r3, #14
 8002c66:	e7fb      	b.n	8002c60 <button_ok+0xc0>
	else if (screenMode == smNodeMenu)
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d10e      	bne.n	8002c8a <button_ok+0xea>
			switch (menuPosition)
 8002c6c:	4b6f      	ldr	r3, [pc, #444]	; (8002e2c <button_ok+0x28c>)
 8002c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <button_ok+0xe2>
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d005      	beq.n	8002c86 <button_ok+0xe6>
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1ed      	bne.n	8002c5a <button_ok+0xba>
					screenMode = smWorkInterval;
 8002c7e:	230f      	movs	r3, #15
 8002c80:	e7ee      	b.n	8002c60 <button_ok+0xc0>
					screenMode = smLed;
 8002c82:	2310      	movs	r3, #16
 8002c84:	e7ec      	b.n	8002c60 <button_ok+0xc0>
					screenMode = smCleanNodeData;
 8002c86:	2311      	movs	r3, #17
 8002c88:	e7ea      	b.n	8002c60 <button_ok+0xc0>
	else if (screenMode == smNetworkMenu)
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d115      	bne.n	8002cba <button_ok+0x11a>
			switch (menuPosition)
 8002c8e:	4b67      	ldr	r3, [pc, #412]	; (8002e2c <button_ok+0x28c>)
 8002c90:	f993 3000 	ldrsb.w	r3, [r3]
 8002c94:	2b05      	cmp	r3, #5
 8002c96:	d8e0      	bhi.n	8002c5a <button_ok+0xba>
 8002c98:	e8df f003 	tbb	[pc, r3]
 8002c9c:	09070503 	.word	0x09070503
 8002ca0:	0d0b      	.short	0x0d0b
					screenMode = smRefreshNetworks;
 8002ca2:	2312      	movs	r3, #18
 8002ca4:	e7aa      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSelectNet;
 8002ca6:	2313      	movs	r3, #19
 8002ca8:	e7a8      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSetWiFiPassword;
 8002caa:	2314      	movs	r3, #20
 8002cac:	e7a6      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSetServerPassword;
 8002cae:	2315      	movs	r3, #21
 8002cb0:	e7a4      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSetBaseID;
 8002cb2:	2317      	movs	r3, #23
 8002cb4:	e7a2      	b.n	8002bfc <button_ok+0x5c>
					screenMode = smSetHost;
 8002cb6:	2316      	movs	r3, #22
 8002cb8:	e7a0      	b.n	8002bfc <button_ok+0x5c>
	else if (screenMode == smNodeAction)
 8002cba:	2b1c      	cmp	r3, #28
 8002cbc:	d139      	bne.n	8002d32 <button_ok+0x192>
			switch (menuPosition)
 8002cbe:	4b5b      	ldr	r3, [pc, #364]	; (8002e2c <button_ok+0x28c>)
 8002cc0:	f993 3000 	ldrsb.w	r3, [r3]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d80a      	bhi.n	8002cde <button_ok+0x13e>
 8002cc8:	e8df f003 	tbb	[pc, r3]
 8002ccc:	27210f02 	.word	0x27210f02
					screenMode = smRegular;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	7023      	strb	r3, [r4, #0]
					pingNode (selectedNode);
 8002cd4:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <button_ok+0x290>)
 8002cd6:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002cda:	f7fe fe61 	bl	80019a0 <pingNode>
	flag.lcdRefreshRequest = 1;
 8002cde:	4a55      	ldr	r2, [pc, #340]	; (8002e34 <button_ok+0x294>)
 8002ce0:	7813      	ldrb	r3, [r2, #0]
 8002ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ce6:	7013      	strb	r3, [r2, #0]
}
 8002ce8:	bd38      	pop	{r3, r4, r5, pc}
					nodes[selectedNode].masked = (nodes[selectedNode].masked == 3) ? 0 : nodes[selectedNode].masked + 1;
 8002cea:	4b51      	ldr	r3, [pc, #324]	; (8002e30 <button_ok+0x290>)
 8002cec:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <button_ok+0x298>)
 8002cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cf2:	0159      	lsls	r1, r3, #5
 8002cf4:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 8002cf8:	7b1b      	ldrb	r3, [r3, #12]
 8002cfa:	440a      	add	r2, r1
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	bf0e      	itee	eq
 8002d00:	2300      	moveq	r3, #0
 8002d02:	3301      	addne	r3, #1
 8002d04:	b2db      	uxtbne	r3, r3
 8002d06:	7313      	strb	r3, [r2, #12]
					saveNodeData ();
 8002d08:	f7fe f866 	bl	8000dd8 <saveNodeData>
					break;
 8002d0c:	e7e7      	b.n	8002cde <button_ok+0x13e>
					changeDisarmNode (selectedNode);
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <button_ok+0x290>)
 8002d10:	f9b3 0000 	ldrsh.w	r0, [r3]
 8002d14:	f7fe fe28 	bl	8001968 <changeDisarmNode>
 8002d18:	e7f6      	b.n	8002d08 <button_ok+0x168>
					configNodeViaUart (selectedNode);
 8002d1a:	4b45      	ldr	r3, [pc, #276]	; (8002e30 <button_ok+0x290>)
 8002d1c:	7818      	ldrb	r0, [r3, #0]
 8002d1e:	f002 f845 	bl	8004dac <configNodeViaUart>
					configTime = HAL_GetTick ();
 8002d22:	f002 f999 	bl	8005058 <HAL_GetTick>
					configStep = 1;
 8002d26:	2201      	movs	r2, #1
					configTime = HAL_GetTick ();
 8002d28:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <button_ok+0x29c>)
 8002d2a:	6018      	str	r0, [r3, #0]
					configStep = 1;
 8002d2c:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <button_ok+0x2a0>)
 8002d2e:	701a      	strb	r2, [r3, #0]
					break;
 8002d30:	e7d5      	b.n	8002cde <button_ok+0x13e>
	else if (screenMode == smSaveConfig)
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d104      	bne.n	8002d40 <button_ok+0x1a0>
			screenMode = smMainMenu;
 8002d36:	2301      	movs	r3, #1
 8002d38:	7013      	strb	r3, [r2, #0]
			saveSettings ();
 8002d3a:	f7fe f991 	bl	8001060 <saveSettings>
 8002d3e:	e7ce      	b.n	8002cde <button_ok+0x13e>
	else if (screenMode == smRefreshNetworks)
 8002d40:	2b12      	cmp	r3, #18
 8002d42:	d103      	bne.n	8002d4c <button_ok+0x1ac>
			NetRefreshNetworkList (&netHandler);
 8002d44:	483f      	ldr	r0, [pc, #252]	; (8002e44 <button_ok+0x2a4>)
 8002d46:	f7fd fdc9 	bl	80008dc <NetRefreshNetworkList>
 8002d4a:	e7c8      	b.n	8002cde <button_ok+0x13e>
	else if (screenMode == smSelectNet)
 8002d4c:	2b13      	cmp	r3, #19
 8002d4e:	d10d      	bne.n	8002d6c <button_ok+0x1cc>
			sprintf (settings.SSID, "%s", netHandler.nets[selectedNetwork]);
 8002d50:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <button_ok+0x2a8>)
 8002d52:	483e      	ldr	r0, [pc, #248]	; (8002e4c <button_ok+0x2ac>)
 8002d54:	f993 1000 	ldrsb.w	r1, [r3]
 8002d58:	4b3d      	ldr	r3, [pc, #244]	; (8002e50 <button_ok+0x2b0>)
 8002d5a:	eb03 1141 	add.w	r1, r3, r1, lsl #5
 8002d5e:	f004 ffd7 	bl	8007d10 <strcpy>
			screenMode = smNetworkMenu;
 8002d62:	2305      	movs	r3, #5
 8002d64:	7023      	strb	r3, [r4, #0]
			cursorPos = 0;
 8002d66:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <button_ok+0x2b4>)
			menuPosition = 0;
 8002d68:	2200      	movs	r2, #0
 8002d6a:	e7e0      	b.n	8002d2e <button_ok+0x18e>
	else if (screenMode == smSetWiFiPassword)
 8002d6c:	2b14      	cmp	r3, #20
 8002d6e:	d117      	bne.n	8002da0 <button_ok+0x200>
			if (cursorPos < 20 && settings.WiFiPass[cursorPos] != ' ' && settings.WiFiPass[cursorPos] != '\0')
 8002d70:	4938      	ldr	r1, [pc, #224]	; (8002e54 <button_ok+0x2b4>)
 8002d72:	4a39      	ldr	r2, [pc, #228]	; (8002e58 <button_ok+0x2b8>)
 8002d74:	f991 3000 	ldrsb.w	r3, [r1]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	2b13      	cmp	r3, #19
 8002d7c:	dc08      	bgt.n	8002d90 <button_ok+0x1f0>
 8002d7e:	18d5      	adds	r5, r2, r3
 8002d80:	f895 5023 	ldrb.w	r5, [r5, #35]	; 0x23
 8002d84:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8002d88:	d002      	beq.n	8002d90 <button_ok+0x1f0>
				cursorPos++;
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	700b      	strb	r3, [r1, #0]
 8002d8e:	e7a6      	b.n	8002cde <button_ok+0x13e>
					settings.WiFiPass[cursorPos] = 0;
 8002d90:	4413      	add	r3, r2
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
					screenMode = smNetworkMenu;
 8002d98:	2305      	movs	r3, #5
					cursorPos = 0;
 8002d9a:	7002      	strb	r2, [r0, #0]
					screenMode = smNetworkMenu;
 8002d9c:	7023      	strb	r3, [r4, #0]
					cursorPos = 0;
 8002d9e:	e79e      	b.n	8002cde <button_ok+0x13e>
	else if (screenMode == smSetHost)
 8002da0:	2b16      	cmp	r3, #22
 8002da2:	d111      	bne.n	8002dc8 <button_ok+0x228>
			if (cursorPos < 20 && settings.host[cursorPos] != ' ' && settings.host[cursorPos] != '\0')
 8002da4:	492b      	ldr	r1, [pc, #172]	; (8002e54 <button_ok+0x2b4>)
 8002da6:	4a2c      	ldr	r2, [pc, #176]	; (8002e58 <button_ok+0x2b8>)
 8002da8:	f991 3000 	ldrsb.w	r3, [r1]
 8002dac:	4608      	mov	r0, r1
 8002dae:	2b13      	cmp	r3, #19
 8002db0:	dc05      	bgt.n	8002dbe <button_ok+0x21e>
 8002db2:	18d5      	adds	r5, r2, r3
 8002db4:	f895 5043 	ldrb.w	r5, [r5, #67]	; 0x43
 8002db8:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8002dbc:	d1e5      	bne.n	8002d8a <button_ok+0x1ea>
					settings.host[cursorPos] = 0;
 8002dbe:	4413      	add	r3, r2
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
					screenMode = smNetworkMenu;
 8002dc6:	e7e7      	b.n	8002d98 <button_ok+0x1f8>
	else if (screenMode == smSetServerPassword)
 8002dc8:	2b15      	cmp	r3, #21
 8002dca:	d111      	bne.n	8002df0 <button_ok+0x250>
			if (cursorPos < 20 && settings.ServerPass[cursorPos] != ' ' && settings.ServerPass[cursorPos] != '\0')
 8002dcc:	4921      	ldr	r1, [pc, #132]	; (8002e54 <button_ok+0x2b4>)
 8002dce:	4a22      	ldr	r2, [pc, #136]	; (8002e58 <button_ok+0x2b8>)
 8002dd0:	f991 3000 	ldrsb.w	r3, [r1]
 8002dd4:	4608      	mov	r0, r1
 8002dd6:	2b13      	cmp	r3, #19
 8002dd8:	dc05      	bgt.n	8002de6 <button_ok+0x246>
 8002dda:	18d5      	adds	r5, r2, r3
 8002ddc:	f895 5033 	ldrb.w	r5, [r5, #51]	; 0x33
 8002de0:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8002de4:	d1d1      	bne.n	8002d8a <button_ok+0x1ea>
					settings.ServerPass[cursorPos] = 0;
 8002de6:	4413      	add	r3, r2
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8002dee:	e7d3      	b.n	8002d98 <button_ok+0x1f8>
	else if (screenMode == smSetBaseID)
 8002df0:	2b17      	cmp	r3, #23
 8002df2:	d108      	bne.n	8002e06 <button_ok+0x266>
			if (cursorPos < 7)
 8002df4:	4a17      	ldr	r2, [pc, #92]	; (8002e54 <button_ok+0x2b4>)
 8002df6:	f992 3000 	ldrsb.w	r3, [r2]
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	dc01      	bgt.n	8002e02 <button_ok+0x262>
				cursorPos++;
 8002dfe:	3301      	adds	r3, #1
 8002e00:	e6ed      	b.n	8002bde <button_ok+0x3e>
				screenMode = smNetworkMenu;
 8002e02:	2305      	movs	r3, #5
 8002e04:	e6dd      	b.n	8002bc2 <button_ok+0x22>
	else if (screenMode == smMessageCounter)
 8002e06:	2b1b      	cmp	r3, #27
 8002e08:	d101      	bne.n	8002e0e <button_ok+0x26e>
			screenMode = smMainMenu;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e6f6      	b.n	8002bfc <button_ok+0x5c>
	else if (screenMode == smCleanNodeData)
 8002e0e:	2b11      	cmp	r3, #17
 8002e10:	d102      	bne.n	8002e18 <button_ok+0x278>
			eraseNodeData ();
 8002e12:	f7fd ffcf 	bl	8000db4 <eraseNodeData>
 8002e16:	e762      	b.n	8002cde <button_ok+0x13e>
	else if (screenMode >= smFrequency && screenMode <= smPower)
 8002e18:	3b06      	subs	r3, #6
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	f63f af5f 	bhi.w	8002cde <button_ok+0x13e>
			screenMode = smRadioMenu;
 8002e20:	2302      	movs	r3, #2
 8002e22:	e6ce      	b.n	8002bc2 <button_ok+0x22>
 8002e24:	20000162 	.word	0x20000162
 8002e28:	20000163 	.word	0x20000163
 8002e2c:	2000014f 	.word	0x2000014f
 8002e30:	20000166 	.word	0x20000166
 8002e34:	20000b4c 	.word	0x20000b4c
 8002e38:	20000ce0 	.word	0x20000ce0
 8002e3c:	20000cdc 	.word	0x20000cdc
 8002e40:	20000b99 	.word	0x20000b99
 8002e44:	20000e8c 	.word	0x20000e8c
 8002e48:	20000164 	.word	0x20000164
 8002e4c:	20000a8b 	.word	0x20000a8b
 8002e50:	20000ebc 	.word	0x20000ebc
 8002e54:	20000122 	.word	0x20000122
 8002e58:	20000a78 	.word	0x20000a78

08002e5c <defaultNodeSettings>:
void defaultNodeSettings ()
{
	nodeSettings.bw = SX127X_LORA_BW_125KHZ;
	nodeSettings.cr = SX127X_CR_4_8;
	nodeSettings.power = SX127X_POWER_20DBM;
	nodeSettings.preamble = 5;
 8002e5c:	2205      	movs	r2, #5
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <defaultNodeSettings+0x20>)
 8002e60:	811a      	strh	r2, [r3, #8]
	nodeSettings.realFrequency = DEF_FREQUENCY;
 8002e62:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <defaultNodeSettings+0x24>)
 8002e64:	601a      	str	r2, [r3, #0]
	nodeSettings.cr = SX127X_CR_4_8;
 8002e66:	2204      	movs	r2, #4
 8002e68:	72da      	strb	r2, [r3, #11]
	nodeSettings.sf = SX127X_LORA_SF_12;
 8002e6a:	4a06      	ldr	r2, [pc, #24]	; (8002e84 <defaultNodeSettings+0x28>)
 8002e6c:	60da      	str	r2, [r3, #12]
	nodeSettings.sw = 0x1;
	nodeSettings.useLed = true;
 8002e6e:	2201      	movs	r2, #1
 8002e70:	741a      	strb	r2, [r3, #16]
	nodeSettings.voltageTreshold = 2.5f;
 8002e72:	4a05      	ldr	r2, [pc, #20]	; (8002e88 <defaultNodeSettings+0x2c>)
 8002e74:	615a      	str	r2, [r3, #20]
	nodeSettings.workInterval = 60;
 8002e76:	223c      	movs	r2, #60	; 0x3c
 8002e78:	605a      	str	r2, [r3, #4]
}
 8002e7a:	4770      	bx	lr
 8002e7c:	20000c74 	.word	0x20000c74
 8002e80:	33c8d600 	.word	0x33c8d600
 8002e84:	1401070c 	.word	0x1401070c
 8002e88:	40200000 	.word	0x40200000

08002e8c <initLegalFreq>:
 * @param  None
 * @retval None
 */
void initLegalFreq ()
{
	legalFreq.intervalCount = 3;
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	4b12      	ldr	r3, [pc, #72]	; (8002ed8 <initLegalFreq+0x4c>)

	legalFreq.interval[0].minFreq = 864000000;
	legalFreq.interval[0].maxFreq = 865000000;
	legalFreq.interval[0].maxPower = 14; //25mW
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 8002e90:	2101      	movs	r1, #1
	legalFreq.intervalCount = 3;
 8002e92:	701a      	strb	r2, [r3, #0]
	legalFreq.interval[0].minFreq = 864000000;
 8002e94:	4a11      	ldr	r2, [pc, #68]	; (8002edc <initLegalFreq+0x50>)
	legalFreq.interval[0].maxAirUse = 1; //0.1%
 8002e96:	81d9      	strh	r1, [r3, #14]
	legalFreq.interval[0].minFreq = 864000000;
 8002e98:	605a      	str	r2, [r3, #4]
	legalFreq.interval[0].maxFreq = 865000000;
 8002e9a:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
 8002e9e:	f502 7210 	add.w	r2, r2, #576	; 0x240
 8002ea2:	609a      	str	r2, [r3, #8]
	legalFreq.interval[0].maxPower = 14; //25mW
 8002ea4:	220e      	movs	r2, #14
 8002ea6:	731a      	strb	r2, [r3, #12]

	legalFreq.interval[1].minFreq = 866000000;
	legalFreq.interval[1].maxFreq = 868000000;
	legalFreq.interval[1].maxPower = 14;
 8002ea8:	761a      	strb	r2, [r3, #24]
	legalFreq.interval[1].maxAirUse = 10; //1%
 8002eaa:	220a      	movs	r2, #10
 8002eac:	835a      	strh	r2, [r3, #26]

	legalFreq.interval[2].minFreq = 868700000;
 8002eae:	4a0c      	ldr	r2, [pc, #48]	; (8002ee0 <initLegalFreq+0x54>)
	legalFreq.interval[1].minFreq = 866000000;
 8002eb0:	490c      	ldr	r1, [pc, #48]	; (8002ee4 <initLegalFreq+0x58>)
	legalFreq.interval[2].minFreq = 868700000;
 8002eb2:	61da      	str	r2, [r3, #28]
	legalFreq.interval[2].maxFreq = 869200000;
 8002eb4:	f502 22f4 	add.w	r2, r2, #499712	; 0x7a000
 8002eb8:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8002ebc:	621a      	str	r2, [r3, #32]
	legalFreq.interval[2].maxPower = 20;
 8002ebe:	2214      	movs	r2, #20
 8002ec0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	legalFreq.interval[2].maxAirUse = 100; //10%
 8002ec4:	2264      	movs	r2, #100	; 0x64
	legalFreq.interval[1].minFreq = 866000000;
 8002ec6:	6119      	str	r1, [r3, #16]
	legalFreq.interval[1].maxFreq = 868000000;
 8002ec8:	f501 11f4 	add.w	r1, r1, #1998848	; 0x1e8000
 8002ecc:	f501 6190 	add.w	r1, r1, #1152	; 0x480
 8002ed0:	6159      	str	r1, [r3, #20]
	legalFreq.interval[2].maxAirUse = 100; //10%
 8002ed2:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000bcc 	.word	0x20000bcc
 8002edc:	337f9800 	.word	0x337f9800
 8002ee0:	33c74f60 	.word	0x33c74f60
 8002ee4:	339e1c80 	.word	0x339e1c80

08002ee8 <checkFreq>:
 * that the frequency is included in
 * @param  real frequency in Hz, bandwidth index
 * @retval returns interval
 */
uint8_t checkFreq (uint32_t frequency, uint8_t bw)
{
 8002ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002eec:	4604      	mov	r4, r0
	uint8_t i;
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002eee:	2600      	movs	r6, #0
 8002ef0:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <checkFreq+0x48>)
		{
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 8002ef2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8002f34 <checkFreq+0x4c>
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002ef6:	f893 e000 	ldrb.w	lr, [r3]
 8002efa:	b2f0      	uxtb	r0, r6
 8002efc:	4586      	cmp	lr, r0
 8002efe:	d802      	bhi.n	8002f06 <checkFreq+0x1e>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
				{
					return i;
				}
		}
	return BAD_INTERVAL;
 8002f00:	20ff      	movs	r0, #255	; 0xff
}
 8002f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (frequency - bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency - bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq
 8002f06:	f858 2021 	ldr.w	r2, [r8, r1, lsl #2]
 8002f0a:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8002f0e:	0855      	lsrs	r5, r2, #1
 8002f10:	eba4 0252 	sub.w	r2, r4, r2, lsr #1
 8002f14:	4562      	cmp	r2, ip
 8002f16:	d307      	bcc.n	8002f28 <checkFreq+0x40>
 8002f18:	689f      	ldr	r7, [r3, #8]
 8002f1a:	42ba      	cmp	r2, r7
 8002f1c:	d804      	bhi.n	8002f28 <checkFreq+0x40>
					&& frequency + bandWidth[bw] / 2 >= legalFreq.interval[i].minFreq && frequency + bandWidth[bw] / 2 <= legalFreq.interval[i].maxFreq)
 8002f1e:	192a      	adds	r2, r5, r4
 8002f20:	4594      	cmp	ip, r2
 8002f22:	d801      	bhi.n	8002f28 <checkFreq+0x40>
 8002f24:	4297      	cmp	r7, r2
 8002f26:	d2ec      	bcs.n	8002f02 <checkFreq+0x1a>
	for (i = 0; i < legalFreq.intervalCount; i++)
 8002f28:	3601      	adds	r6, #1
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	e7e5      	b.n	8002efa <checkFreq+0x12>
 8002f2e:	bf00      	nop
 8002f30:	20000bcc 	.word	0x20000bcc
 8002f34:	08009770 	.word	0x08009770

08002f38 <button_right>:
{
 8002f38:	b510      	push	{r4, lr}
	switch (screenMode)
 8002f3a:	4b98      	ldr	r3, [pc, #608]	; (800319c <button_right+0x264>)
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	2a1d      	cmp	r2, #29
 8002f40:	d82b      	bhi.n	8002f9a <button_right+0x62>
 8002f42:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002f46:	001e      	.short	0x001e
 8002f48:	00300044 	.word	0x00300044
 8002f4c:	003f003a 	.word	0x003f003a
 8002f50:	004e0044 	.word	0x004e0044
 8002f54:	0071006a 	.word	0x0071006a
 8002f58:	0087007e 	.word	0x0087007e
 8002f5c:	0099008f 	.word	0x0099008f
 8002f60:	00ba00b0 	.word	0x00ba00b0
 8002f64:	00ce00c4 	.word	0x00ce00c4
 8002f68:	002a00d4 	.word	0x002a00d4
 8002f6c:	00dc00d7 	.word	0x00dc00d7
 8002f70:	00fc00ec 	.word	0x00fc00ec
 8002f74:	002a010c 	.word	0x002a010c
 8002f78:	011d011d 	.word	0x011d011d
 8002f7c:	00490120 	.word	0x00490120
 8002f80:	0122      	.short	0x0122
			lastNodeChangeTick = HAL_GetTick ();
 8002f82:	f002 f869 	bl	8005058 <HAL_GetTick>
 8002f86:	4b86      	ldr	r3, [pc, #536]	; (80031a0 <button_right+0x268>)
			selectedNode++;
 8002f88:	4a86      	ldr	r2, [pc, #536]	; (80031a4 <button_right+0x26c>)
			lastNodeChangeTick = HAL_GetTick ();
 8002f8a:	6018      	str	r0, [r3, #0]
			selectedNode++;
 8002f8c:	8813      	ldrh	r3, [r2, #0]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	b21b      	sxth	r3, r3
			if (selectedNode > MAX_NODES - 1)
 8002f92:	2b07      	cmp	r3, #7
				selectedNode = 0;
 8002f94:	bfc8      	it	gt
 8002f96:	2300      	movgt	r3, #0
 8002f98:	8013      	strh	r3, [r2, #0]
	flag.lcdRefreshRequest = 1;
 8002f9a:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <button_right+0x270>)
 8002f9c:	7813      	ldrb	r3, [r2, #0]
 8002f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa2:	7013      	strb	r3, [r2, #0]
}
 8002fa4:	bd10      	pop	{r4, pc}
			menuPosition = (menuPosition > 5) ? 0 : menuPosition + 1;
 8002fa6:	4a81      	ldr	r2, [pc, #516]	; (80031ac <button_right+0x274>)
 8002fa8:	f992 3000 	ldrsb.w	r3, [r2]
 8002fac:	2b05      	cmp	r3, #5
			selectedNetwork = (selectedNetwork > 14) ? 0 : selectedNetwork + 1;
 8002fae:	f300 80f3 	bgt.w	8003198 <button_right+0x260>
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b25b      	sxtb	r3, r3
				selectedMode = 0;
 8002fb6:	7013      	strb	r3, [r2, #0]
 8002fb8:	e7ef      	b.n	8002f9a <button_right+0x62>
			menuPosition = (menuPosition > 0) ? 0 : menuPosition + 1;
 8002fba:	4a7c      	ldr	r2, [pc, #496]	; (80031ac <button_right+0x274>)
 8002fbc:	f992 3000 	ldrsb.w	r3, [r2]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	e7f4      	b.n	8002fae <button_right+0x76>
			menuPosition = (menuPosition > 1) ? 0 : menuPosition + 1;
 8002fc4:	4a79      	ldr	r2, [pc, #484]	; (80031ac <button_right+0x274>)
 8002fc6:	f992 3000 	ldrsb.w	r3, [r2]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	e7ef      	b.n	8002fae <button_right+0x76>
			menuPosition = (menuPosition > 4) ? 0 : menuPosition + 1;
 8002fce:	4a77      	ldr	r2, [pc, #476]	; (80031ac <button_right+0x274>)
 8002fd0:	f992 3000 	ldrsb.w	r3, [r2]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	e7ea      	b.n	8002fae <button_right+0x76>
			menuPosition = (menuPosition > 2) ? 0 : menuPosition + 1;
 8002fd8:	4a74      	ldr	r2, [pc, #464]	; (80031ac <button_right+0x274>)
 8002fda:	f992 3000 	ldrsb.w	r3, [r2]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	e7e5      	b.n	8002fae <button_right+0x76>
			if (settings.realFrequency < MAX_FREQUENCY)
 8002fe2:	4c73      	ldr	r4, [pc, #460]	; (80031b0 <button_right+0x278>)
 8002fe4:	4a73      	ldr	r2, [pc, #460]	; (80031b4 <button_right+0x27c>)
 8002fe6:	6823      	ldr	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002fe8:	7be1      	ldrb	r1, [r4, #15]
			if (settings.realFrequency < MAX_FREQUENCY)
 8002fea:	4293      	cmp	r3, r2
				settings.realFrequency += 50000;
 8002fec:	bf9e      	ittt	ls
 8002fee:	f503 4343 	addls.w	r3, r3, #49920	; 0xc300
 8002ff2:	3350      	addls	r3, #80	; 0x50
 8002ff4:	6023      	strls	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8002ff6:	6820      	ldr	r0, [r4, #0]
 8002ff8:	f7ff ff76 	bl	8002ee8 <checkFreq>
 8002ffc:	4b6e      	ldr	r3, [pc, #440]	; (80031b8 <button_right+0x280>)
 8002ffe:	b240      	sxtb	r0, r0
 8003000:	7018      	strb	r0, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003002:	1c43      	adds	r3, r0, #1
 8003004:	d0c9      	beq.n	8002f9a <button_right+0x62>
 8003006:	220c      	movs	r2, #12
 8003008:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <button_right+0x284>)
 800300a:	fb02 3000 	mla	r0, r2, r0, r3
 800300e:	7ca2      	ldrb	r2, [r4, #18]
 8003010:	7b03      	ldrb	r3, [r0, #12]
 8003012:	429a      	cmp	r2, r3
 8003014:	d9c1      	bls.n	8002f9a <button_right+0x62>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 8003016:	74a3      	strb	r3, [r4, #18]
 8003018:	e7bf      	b.n	8002f9a <button_right+0x62>
			if (settings.sf < 12)
 800301a:	4a65      	ldr	r2, [pc, #404]	; (80031b0 <button_right+0x278>)
 800301c:	7b93      	ldrb	r3, [r2, #14]
 800301e:	2b0b      	cmp	r3, #11
 8003020:	d8bb      	bhi.n	8002f9a <button_right+0x62>
				settings.sf++;
 8003022:	3301      	adds	r3, #1
 8003024:	7393      	strb	r3, [r2, #14]
 8003026:	e7b8      	b.n	8002f9a <button_right+0x62>
			if (settings.bw < 9)
 8003028:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <button_right+0x278>)
 800302a:	7bda      	ldrb	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 800302c:	6818      	ldr	r0, [r3, #0]
			if (settings.bw < 9)
 800302e:	2a08      	cmp	r2, #8
				settings.bw++;
 8003030:	bf9c      	itt	ls
 8003032:	3201      	addls	r2, #1
 8003034:	73da      	strbls	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 8003036:	7bd9      	ldrb	r1, [r3, #15]
 8003038:	f7ff ff56 	bl	8002ee8 <checkFreq>
 800303c:	4b5e      	ldr	r3, [pc, #376]	; (80031b8 <button_right+0x280>)
 800303e:	7018      	strb	r0, [r3, #0]
			break;
 8003040:	e7ab      	b.n	8002f9a <button_right+0x62>
			settings.syncWord++;
 8003042:	4a5b      	ldr	r2, [pc, #364]	; (80031b0 <button_right+0x278>)
 8003044:	7c53      	ldrb	r3, [r2, #17]
 8003046:	3301      	adds	r3, #1
 8003048:	b2db      	uxtb	r3, r3
			if (settings.syncWord == 0x34)
 800304a:	2b34      	cmp	r3, #52	; 0x34
				settings.syncWord = 0x35;
 800304c:	bf08      	it	eq
 800304e:	2335      	moveq	r3, #53	; 0x35
 8003050:	7453      	strb	r3, [r2, #17]
 8003052:	e7a2      	b.n	8002f9a <button_right+0x62>
			settings.cr = (settings.cr >= 4) ? 4 : settings.cr + 1;
 8003054:	4a56      	ldr	r2, [pc, #344]	; (80031b0 <button_right+0x278>)
 8003056:	7c13      	ldrb	r3, [r2, #16]
 8003058:	2b03      	cmp	r3, #3
 800305a:	bf28      	it	cs
 800305c:	2303      	movcs	r3, #3
 800305e:	3301      	adds	r3, #1
			nodeSettings.useLed = !nodeSettings.useLed;
 8003060:	7413      	strb	r3, [r2, #16]
			break;
 8003062:	e79a      	b.n	8002f9a <button_right+0x62>
			settings.preamble = (settings.preamble >= MAX_PREAMBLE) ?
 8003064:	f240 31e7 	movw	r1, #999	; 0x3e7
 8003068:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <button_right+0x278>)
 800306a:	8993      	ldrh	r3, [r2, #12]
 800306c:	428b      	cmp	r3, r1
 800306e:	bf28      	it	cs
 8003070:	460b      	movcs	r3, r1
 8003072:	3301      	adds	r3, #1
 8003074:	8193      	strh	r3, [r2, #12]
			break;
 8003076:	e790      	b.n	8002f9a <button_right+0x62>
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8003078:	494d      	ldr	r1, [pc, #308]	; (80031b0 <button_right+0x278>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800307a:	4a4f      	ldr	r2, [pc, #316]	; (80031b8 <button_right+0x280>)
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 800307c:	7c8b      	ldrb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800307e:	f992 2000 	ldrsb.w	r2, [r2]
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 8003082:	2b13      	cmp	r3, #19
 8003084:	bf28      	it	cs
 8003086:	2313      	movcs	r3, #19
 8003088:	3301      	adds	r3, #1
 800308a:	b2db      	uxtb	r3, r3
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 800308c:	1c50      	adds	r0, r2, #1
			settings.power = (settings.power >= 20) ? 20 : settings.power + 1;
 800308e:	748b      	strb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003090:	d083      	beq.n	8002f9a <button_right+0x62>
 8003092:	240c      	movs	r4, #12
 8003094:	4849      	ldr	r0, [pc, #292]	; (80031bc <button_right+0x284>)
 8003096:	fb04 0202 	mla	r2, r4, r2, r0
 800309a:	7b12      	ldrb	r2, [r2, #12]
 800309c:	4293      	cmp	r3, r2
 800309e:	f67f af7c 	bls.w	8002f9a <button_right+0x62>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 80030a2:	748a      	strb	r2, [r1, #18]
 80030a4:	e779      	b.n	8002f9a <button_right+0x62>
			settings.warningDelay = (settings.warningDelay >= MAX_WARNING_DELAY) ?
 80030a6:	4a42      	ldr	r2, [pc, #264]	; (80031b0 <button_right+0x278>)
			MAX_WARNING_DELAY :
 80030a8:	4b45      	ldr	r3, [pc, #276]	; (80031c0 <button_right+0x288>)
			settings.warningDelay = (settings.warningDelay >= MAX_WARNING_DELAY) ?
 80030aa:	6851      	ldr	r1, [r2, #4]
			MAX_WARNING_DELAY :
 80030ac:	4299      	cmp	r1, r3
 80030ae:	bf3c      	itt	cc
 80030b0:	f501 531c 	addcc.w	r3, r1, #9984	; 0x2700
 80030b4:	3310      	addcc	r3, #16
			settings.warningDelay = (settings.warningDelay >= MAX_WARNING_DELAY) ?
 80030b6:	6053      	str	r3, [r2, #4]
			break;
 80030b8:	e76f      	b.n	8002f9a <button_right+0x62>
			settings.superWarningDelay = (settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 80030ba:	4a3d      	ldr	r2, [pc, #244]	; (80031b0 <button_right+0x278>)
			MAX_WARNING_DELAY :
 80030bc:	4b40      	ldr	r3, [pc, #256]	; (80031c0 <button_right+0x288>)
			settings.superWarningDelay = (settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 80030be:	6891      	ldr	r1, [r2, #8]
			MAX_WARNING_DELAY :
 80030c0:	4299      	cmp	r1, r3
 80030c2:	bf3c      	itt	cc
 80030c4:	f501 531c 	addcc.w	r3, r1, #9984	; 0x2700
 80030c8:	3310      	addcc	r3, #16
			settings.superWarningDelay = (settings.superWarningDelay >= MAX_WARNING_DELAY) ?
 80030ca:	6093      	str	r3, [r2, #8]
			break;
 80030cc:	e765      	b.n	8002f9a <button_right+0x62>
			nodeSettings.workInterval += 5;
 80030ce:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 80030d2:	4a3c      	ldr	r2, [pc, #240]	; (80031c4 <button_right+0x28c>)
 80030d4:	6853      	ldr	r3, [r2, #4]
 80030d6:	3305      	adds	r3, #5
 80030d8:	428b      	cmp	r3, r1
 80030da:	bf94      	ite	ls
 80030dc:	6053      	strls	r3, [r2, #4]
 80030de:	6051      	strhi	r1, [r2, #4]
 80030e0:	e75b      	b.n	8002f9a <button_right+0x62>
			nodeSettings.useLed = !nodeSettings.useLed;
 80030e2:	4a38      	ldr	r2, [pc, #224]	; (80031c4 <button_right+0x28c>)
 80030e4:	7c13      	ldrb	r3, [r2, #16]
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	e7b8      	b.n	8003060 <button_right+0x128>
			eraseNodeData ();
 80030ee:	f7fd fe61 	bl	8000db4 <eraseNodeData>
			break;
 80030f2:	e752      	b.n	8002f9a <button_right+0x62>
			selectedNetwork = (selectedNetwork > 14) ? 0 : selectedNetwork + 1;
 80030f4:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <button_right+0x290>)
 80030f6:	f992 3000 	ldrsb.w	r3, [r2]
 80030fa:	2b0e      	cmp	r3, #14
 80030fc:	e757      	b.n	8002fae <button_right+0x76>
			settings.WiFiPass[cursorPos] = (settings.WiFiPass[cursorPos] >= 'z') ? ' ' : settings.WiFiPass[cursorPos] + 1;
 80030fe:	4b33      	ldr	r3, [pc, #204]	; (80031cc <button_right+0x294>)
 8003100:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <button_right+0x278>)
 8003102:	f993 1000 	ldrsb.w	r1, [r3]
 8003106:	1853      	adds	r3, r2, r1
 8003108:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800310c:	440a      	add	r2, r1
 800310e:	2b79      	cmp	r3, #121	; 0x79
 8003110:	bf8e      	itee	hi
 8003112:	2320      	movhi	r3, #32
 8003114:	3301      	addls	r3, #1
 8003116:	b2db      	uxtbls	r3, r3
 8003118:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
			break;
 800311c:	e73d      	b.n	8002f9a <button_right+0x62>
			settings.ServerPass[cursorPos] = (settings.ServerPass[cursorPos] >= 'z') ? ' ' : settings.ServerPass[cursorPos] + 1;
 800311e:	4b2b      	ldr	r3, [pc, #172]	; (80031cc <button_right+0x294>)
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <button_right+0x278>)
 8003122:	f993 1000 	ldrsb.w	r1, [r3]
 8003126:	1853      	adds	r3, r2, r1
 8003128:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800312c:	440a      	add	r2, r1
 800312e:	2b79      	cmp	r3, #121	; 0x79
 8003130:	bf8e      	itee	hi
 8003132:	2320      	movhi	r3, #32
 8003134:	3301      	addls	r3, #1
 8003136:	b2db      	uxtbls	r3, r3
 8003138:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
			break;
 800313c:	e72d      	b.n	8002f9a <button_right+0x62>
			settings.host[cursorPos] = (settings.host[cursorPos] >= 'z') ? ' ' : settings.host[cursorPos] + 1;
 800313e:	4b23      	ldr	r3, [pc, #140]	; (80031cc <button_right+0x294>)
 8003140:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <button_right+0x278>)
 8003142:	f993 1000 	ldrsb.w	r1, [r3]
 8003146:	1853      	adds	r3, r2, r1
 8003148:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800314c:	440a      	add	r2, r1
 800314e:	2b79      	cmp	r3, #121	; 0x79
 8003150:	bf8e      	itee	hi
 8003152:	2320      	movhi	r3, #32
 8003154:	3301      	addls	r3, #1
 8003156:	b2db      	uxtbls	r3, r3
 8003158:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
			break;
 800315c:	e71d      	b.n	8002f9a <button_right+0x62>
			settings.baseID += pow10_ (6 - cursorPos);
 800315e:	4b1b      	ldr	r3, [pc, #108]	; (80031cc <button_right+0x294>)
 8003160:	7818      	ldrb	r0, [r3, #0]
 8003162:	f1c0 0006 	rsb	r0, r0, #6
 8003166:	b2c0      	uxtb	r0, r0
 8003168:	f7fd fd0c 	bl	8000b84 <pow10_>
 800316c:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <button_right+0x278>)
 800316e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003170:	4410      	add	r0, r2
			if (settings.baseID > MAX_BASEID)
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <button_right+0x298>)
 8003174:	4290      	cmp	r0, r2
				settings.baseID = MAX_BASEID;
 8003176:	bfaa      	itet	ge
 8003178:	4a16      	ldrge	r2, [pc, #88]	; (80031d4 <button_right+0x29c>)
			settings.baseID += pow10_ (6 - cursorPos);
 800317a:	6658      	strlt	r0, [r3, #100]	; 0x64
				settings.baseID = MAX_BASEID;
 800317c:	665a      	strge	r2, [r3, #100]	; 0x64
 800317e:	e70c      	b.n	8002f9a <button_right+0x62>
			screenMode++;
 8003180:	3201      	adds	r2, #1
			screenMode = smStatus;
 8003182:	701a      	strb	r2, [r3, #0]
			break;
 8003184:	e709      	b.n	8002f9a <button_right+0x62>
			screenMode = smStatus;
 8003186:	2219      	movs	r2, #25
 8003188:	e7fb      	b.n	8003182 <button_right+0x24a>
			selectedMode++;
 800318a:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <button_right+0x2a0>)
 800318c:	7813      	ldrb	r3, [r2, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	b2db      	uxtb	r3, r3
			if (selectedMode > testSignal)
 8003192:	2b05      	cmp	r3, #5
 8003194:	f67f af0f 	bls.w	8002fb6 <button_right+0x7e>
				selectedMode = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	e70c      	b.n	8002fb6 <button_right+0x7e>
 800319c:	20000162 	.word	0x20000162
 80031a0:	2000012c 	.word	0x2000012c
 80031a4:	20000166 	.word	0x20000166
 80031a8:	20000b4c 	.word	0x20000b4c
 80031ac:	2000014f 	.word	0x2000014f
 80031b0:	20000a78 	.word	0x20000a78
 80031b4:	3b8b87bf 	.word	0x3b8b87bf
 80031b8:	200015c8 	.word	0x200015c8
 80031bc:	20000bcc 	.word	0x20000bcc
 80031c0:	02932e00 	.word	0x02932e00
 80031c4:	20000c74 	.word	0x20000c74
 80031c8:	20000164 	.word	0x20000164
 80031cc:	20000122 	.word	0x20000122
 80031d0:	00989680 	.word	0x00989680
 80031d4:	0098967f 	.word	0x0098967f
 80031d8:	20000163 	.word	0x20000163

080031dc <button_left>:
{
 80031dc:	b538      	push	{r3, r4, r5, lr}
	switch (screenMode)
 80031de:	4d9e      	ldr	r5, [pc, #632]	; (8003458 <button_left+0x27c>)
 80031e0:	782b      	ldrb	r3, [r5, #0]
 80031e2:	2b1d      	cmp	r3, #29
 80031e4:	d82b      	bhi.n	800323e <button_left+0x62>
 80031e6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80031ea:	001e      	.short	0x001e
 80031ec:	0032004b 	.word	0x0032004b
 80031f0:	0044003d 	.word	0x0044003d
 80031f4:	0059004b 	.word	0x0059004b
 80031f8:	007c0075 	.word	0x007c0075
 80031fc:	0093008a 	.word	0x0093008a
 8003200:	00a3009b 	.word	0x00a3009b
 8003204:	00c600bb 	.word	0x00c600bb
 8003208:	00d800d1 	.word	0x00d800d1
 800320c:	002a002a 	.word	0x002a002a
 8003210:	00e600de 	.word	0x00e600de
 8003214:	010800f7 	.word	0x010800f7
 8003218:	002a0119 	.word	0x002a0119
 800321c:	012c0129 	.word	0x012c0129
 8003220:	0052012c 	.word	0x0052012c
 8003224:	012e      	.short	0x012e
			lastNodeChangeTick = HAL_GetTick ();
 8003226:	f001 ff17 	bl	8005058 <HAL_GetTick>
 800322a:	4b8c      	ldr	r3, [pc, #560]	; (800345c <button_left+0x280>)
			selectedNode--;
 800322c:	4a8c      	ldr	r2, [pc, #560]	; (8003460 <button_left+0x284>)
			lastNodeChangeTick = HAL_GetTick ();
 800322e:	6018      	str	r0, [r3, #0]
			selectedNode--;
 8003230:	8813      	ldrh	r3, [r2, #0]
 8003232:	3b01      	subs	r3, #1
 8003234:	b21b      	sxth	r3, r3
			if (selectedNode < 0)
 8003236:	2b00      	cmp	r3, #0
				selectedNode = MAX_NODES - 1;
 8003238:	bfb8      	it	lt
 800323a:	2307      	movlt	r3, #7
 800323c:	8013      	strh	r3, [r2, #0]
	if (screenMode != smRegular)
 800323e:	782b      	ldrb	r3, [r5, #0]
 8003240:	b123      	cbz	r3, 800324c <button_left+0x70>
		flag.lcdRefreshRequest = 1;
 8003242:	4a88      	ldr	r2, [pc, #544]	; (8003464 <button_left+0x288>)
 8003244:	7813      	ldrb	r3, [r2, #0]
 8003246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800324a:	7013      	strb	r3, [r2, #0]
}
 800324c:	bd38      	pop	{r3, r4, r5, pc}
			menuPosition = (menuPosition < 1) ? 6 : menuPosition - 1;
 800324e:	4a86      	ldr	r2, [pc, #536]	; (8003468 <button_left+0x28c>)
 8003250:	f992 3000 	ldrsb.w	r3, [r2]
 8003254:	2b00      	cmp	r3, #0
 8003256:	dd02      	ble.n	800325e <button_left+0x82>
			selectedNetwork = (selectedNetwork < 1) ? 15 : selectedNetwork - 1;
 8003258:	3b01      	subs	r3, #1
 800325a:	b25b      	sxtb	r3, r3
 800325c:	e000      	b.n	8003260 <button_left+0x84>
			menuPosition = (menuPosition < 1) ? 6 : menuPosition - 1;
 800325e:	2306      	movs	r3, #6
				selectedMode = testSignal;
 8003260:	7013      	strb	r3, [r2, #0]
 8003262:	e7ec      	b.n	800323e <button_left+0x62>
			menuPosition = (menuPosition < 1) ? 1 : menuPosition - 1;
 8003264:	4a80      	ldr	r2, [pc, #512]	; (8003468 <button_left+0x28c>)
 8003266:	f992 3000 	ldrsb.w	r3, [r2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	dcf4      	bgt.n	8003258 <button_left+0x7c>
 800326e:	2301      	movs	r3, #1
 8003270:	e7f6      	b.n	8003260 <button_left+0x84>
			menuPosition = (menuPosition < 1) ? 2 : menuPosition - 1;
 8003272:	4a7d      	ldr	r2, [pc, #500]	; (8003468 <button_left+0x28c>)
 8003274:	f992 3000 	ldrsb.w	r3, [r2]
 8003278:	2b00      	cmp	r3, #0
 800327a:	dced      	bgt.n	8003258 <button_left+0x7c>
 800327c:	2302      	movs	r3, #2
 800327e:	e7ef      	b.n	8003260 <button_left+0x84>
			menuPosition = (menuPosition < 1) ? 5 : menuPosition - 1;
 8003280:	4a79      	ldr	r2, [pc, #484]	; (8003468 <button_left+0x28c>)
 8003282:	f992 3000 	ldrsb.w	r3, [r2]
 8003286:	2b00      	cmp	r3, #0
 8003288:	dce6      	bgt.n	8003258 <button_left+0x7c>
				selectedMode = testSignal;
 800328a:	2305      	movs	r3, #5
 800328c:	e7e8      	b.n	8003260 <button_left+0x84>
			menuPosition = (menuPosition < 1) ? 3 : menuPosition - 1;
 800328e:	4a76      	ldr	r2, [pc, #472]	; (8003468 <button_left+0x28c>)
 8003290:	f992 3000 	ldrsb.w	r3, [r2]
 8003294:	2b00      	cmp	r3, #0
 8003296:	dcdf      	bgt.n	8003258 <button_left+0x7c>
 8003298:	2303      	movs	r3, #3
 800329a:	e7e1      	b.n	8003260 <button_left+0x84>
			if (settings.realFrequency > MIN_FREQUENCY)
 800329c:	4c73      	ldr	r4, [pc, #460]	; (800346c <button_left+0x290>)
 800329e:	4a74      	ldr	r2, [pc, #464]	; (8003470 <button_left+0x294>)
 80032a0:	6823      	ldr	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80032a2:	7be1      	ldrb	r1, [r4, #15]
			if (settings.realFrequency > MIN_FREQUENCY)
 80032a4:	4293      	cmp	r3, r2
				settings.realFrequency -= 50000;
 80032a6:	bf82      	ittt	hi
 80032a8:	f5a3 4343 	subhi.w	r3, r3, #49920	; 0xc300
 80032ac:	3b50      	subhi	r3, #80	; 0x50
 80032ae:	6023      	strhi	r3, [r4, #0]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	f7ff fe19 	bl	8002ee8 <checkFreq>
 80032b6:	4b6f      	ldr	r3, [pc, #444]	; (8003474 <button_left+0x298>)
 80032b8:	b240      	sxtb	r0, r0
 80032ba:	7018      	strb	r0, [r3, #0]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 80032bc:	1c43      	adds	r3, r0, #1
 80032be:	d0be      	beq.n	800323e <button_left+0x62>
 80032c0:	220c      	movs	r2, #12
 80032c2:	4b6d      	ldr	r3, [pc, #436]	; (8003478 <button_left+0x29c>)
 80032c4:	fb02 3000 	mla	r0, r2, r0, r3
 80032c8:	7ca2      	ldrb	r2, [r4, #18]
 80032ca:	7b03      	ldrb	r3, [r0, #12]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d9b6      	bls.n	800323e <button_left+0x62>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 80032d0:	74a3      	strb	r3, [r4, #18]
 80032d2:	e7b4      	b.n	800323e <button_left+0x62>
			if (settings.sf > 7)
 80032d4:	4a65      	ldr	r2, [pc, #404]	; (800346c <button_left+0x290>)
 80032d6:	7b93      	ldrb	r3, [r2, #14]
 80032d8:	2b07      	cmp	r3, #7
 80032da:	d9b0      	bls.n	800323e <button_left+0x62>
				settings.sf--;
 80032dc:	3b01      	subs	r3, #1
 80032de:	7393      	strb	r3, [r2, #14]
 80032e0:	e7ad      	b.n	800323e <button_left+0x62>
			if (settings.bw > 1)
 80032e2:	4b62      	ldr	r3, [pc, #392]	; (800346c <button_left+0x290>)
 80032e4:	7bda      	ldrb	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80032e6:	6818      	ldr	r0, [r3, #0]
			if (settings.bw > 1)
 80032e8:	2a01      	cmp	r2, #1
				settings.bw--;
 80032ea:	bf84      	itt	hi
 80032ec:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80032f0:	73da      	strbhi	r2, [r3, #15]
			currentInterval = checkFreq (settings.realFrequency, settings.bw);
 80032f2:	7bd9      	ldrb	r1, [r3, #15]
 80032f4:	f7ff fdf8 	bl	8002ee8 <checkFreq>
 80032f8:	4b5e      	ldr	r3, [pc, #376]	; (8003474 <button_left+0x298>)
 80032fa:	7018      	strb	r0, [r3, #0]
			break;
 80032fc:	e79f      	b.n	800323e <button_left+0x62>
			settings.syncWord--;
 80032fe:	4a5b      	ldr	r2, [pc, #364]	; (800346c <button_left+0x290>)
 8003300:	7c53      	ldrb	r3, [r2, #17]
 8003302:	3b01      	subs	r3, #1
 8003304:	b2db      	uxtb	r3, r3
			if (settings.syncWord == 0x34)
 8003306:	2b34      	cmp	r3, #52	; 0x34
				settings.syncWord = 0x33;
 8003308:	bf08      	it	eq
 800330a:	2333      	moveq	r3, #51	; 0x33
 800330c:	7453      	strb	r3, [r2, #17]
 800330e:	e796      	b.n	800323e <button_left+0x62>
			settings.cr = (settings.cr <= 1) ? 1 : settings.cr - 1;
 8003310:	4a56      	ldr	r2, [pc, #344]	; (800346c <button_left+0x290>)
 8003312:	7c13      	ldrb	r3, [r2, #16]
 8003314:	2b02      	cmp	r3, #2
 8003316:	bf38      	it	cc
 8003318:	2302      	movcc	r3, #2
 800331a:	3b01      	subs	r3, #1
			nodeSettings.useLed = !nodeSettings.useLed;
 800331c:	7413      	strb	r3, [r2, #16]
			break;
 800331e:	e78e      	b.n	800323e <button_left+0x62>
			settings.preamble = (settings.preamble <= MIN_PREAMBLE) ?
 8003320:	4a52      	ldr	r2, [pc, #328]	; (800346c <button_left+0x290>)
 8003322:	8993      	ldrh	r3, [r2, #12]
 8003324:	2b03      	cmp	r3, #3
 8003326:	bf38      	it	cc
 8003328:	2303      	movcc	r3, #3
 800332a:	3b01      	subs	r3, #1
 800332c:	8193      	strh	r3, [r2, #12]
			break;
 800332e:	e786      	b.n	800323e <button_left+0x62>
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003330:	494e      	ldr	r1, [pc, #312]	; (800346c <button_left+0x290>)
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003332:	4a50      	ldr	r2, [pc, #320]	; (8003474 <button_left+0x298>)
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003334:	7c8b      	ldrb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003336:	f992 2000 	ldrsb.w	r2, [r2]
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 800333a:	2b0b      	cmp	r3, #11
 800333c:	bf38      	it	cc
 800333e:	230b      	movcc	r3, #11
 8003340:	3b01      	subs	r3, #1
 8003342:	b2db      	uxtb	r3, r3
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003344:	1c50      	adds	r0, r2, #1
			settings.power = (settings.power <= 10) ? 10 : settings.power - 1;
 8003346:	748b      	strb	r3, [r1, #18]
			if (currentInterval != BAD_INTERVAL && settings.power > legalFreq.interval[currentInterval].maxPower)
 8003348:	f43f af79 	beq.w	800323e <button_left+0x62>
 800334c:	240c      	movs	r4, #12
 800334e:	484a      	ldr	r0, [pc, #296]	; (8003478 <button_left+0x29c>)
 8003350:	fb04 0202 	mla	r2, r4, r2, r0
 8003354:	7b12      	ldrb	r2, [r2, #12]
 8003356:	4293      	cmp	r3, r2
 8003358:	f67f af71 	bls.w	800323e <button_left+0x62>
				settings.power = legalFreq.interval[currentInterval].maxPower;
 800335c:	748a      	strb	r2, [r1, #18]
 800335e:	e76e      	b.n	800323e <button_left+0x62>
			MIN_WARNING_DELAY :
 8003360:	f64e 2360 	movw	r3, #60000	; 0xea60
			settings.warningDelay = (settings.warningDelay <= MIN_WARNING_DELAY) ?
 8003364:	4a41      	ldr	r2, [pc, #260]	; (800346c <button_left+0x290>)
 8003366:	6851      	ldr	r1, [r2, #4]
			MIN_WARNING_DELAY :
 8003368:	4299      	cmp	r1, r3
 800336a:	d902      	bls.n	8003372 <button_left+0x196>
 800336c:	f5a1 531c 	sub.w	r3, r1, #9984	; 0x2700
 8003370:	3b10      	subs	r3, #16
			nodeSettings.workInterval = nodeSettings.workInterval <= MIN_WORK_INTERVAL ?
 8003372:	6053      	str	r3, [r2, #4]
			break;
 8003374:	e763      	b.n	800323e <button_left+0x62>
			MIN_WARNING_DELAY :
 8003376:	f64e 2360 	movw	r3, #60000	; 0xea60
			settings.superWarningDelay = (settings.superWarningDelay <= MIN_WARNING_DELAY) ?
 800337a:	4a3c      	ldr	r2, [pc, #240]	; (800346c <button_left+0x290>)
 800337c:	6891      	ldr	r1, [r2, #8]
			MIN_WARNING_DELAY :
 800337e:	4299      	cmp	r1, r3
 8003380:	bf84      	itt	hi
 8003382:	f5a1 531c 	subhi.w	r3, r1, #9984	; 0x2700
 8003386:	3b10      	subhi	r3, #16
			settings.superWarningDelay = (settings.superWarningDelay <= MIN_WARNING_DELAY) ?
 8003388:	6093      	str	r3, [r2, #8]
			break;
 800338a:	e758      	b.n	800323e <button_left+0x62>
			nodeSettings.workInterval = nodeSettings.workInterval <= MIN_WORK_INTERVAL ?
 800338c:	4a3b      	ldr	r2, [pc, #236]	; (800347c <button_left+0x2a0>)
 800338e:	6853      	ldr	r3, [r2, #4]
			MIN_WORK_INTERVAL :
 8003390:	2b14      	cmp	r3, #20
 8003392:	bf94      	ite	ls
 8003394:	2314      	movls	r3, #20
 8003396:	3b05      	subhi	r3, #5
 8003398:	e7eb      	b.n	8003372 <button_left+0x196>
			nodeSettings.useLed = !nodeSettings.useLed;
 800339a:	4a38      	ldr	r2, [pc, #224]	; (800347c <button_left+0x2a0>)
 800339c:	7c13      	ldrb	r3, [r2, #16]
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	e7ba      	b.n	800331c <button_left+0x140>
			selectedNetwork = (selectedNetwork < 1) ? 15 : selectedNetwork - 1;
 80033a6:	4a36      	ldr	r2, [pc, #216]	; (8003480 <button_left+0x2a4>)
 80033a8:	f992 3000 	ldrsb.w	r3, [r2]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f73f af53 	bgt.w	8003258 <button_left+0x7c>
 80033b2:	230f      	movs	r3, #15
 80033b4:	e754      	b.n	8003260 <button_left+0x84>
			settings.WiFiPass[cursorPos] = (settings.WiFiPass[cursorPos] <= ' ') ? 'z' : settings.WiFiPass[cursorPos] - 1;
 80033b6:	4b33      	ldr	r3, [pc, #204]	; (8003484 <button_left+0x2a8>)
 80033b8:	4a2c      	ldr	r2, [pc, #176]	; (800346c <button_left+0x290>)
 80033ba:	f993 1000 	ldrsb.w	r1, [r3]
 80033be:	1853      	adds	r3, r2, r1
 80033c0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80033c4:	440a      	add	r2, r1
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	bf92      	itee	ls
 80033ca:	237a      	movls	r3, #122	; 0x7a
 80033cc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80033d0:	b2db      	uxtbhi	r3, r3
 80033d2:	f882 3023 	strb.w	r3, [r2, #35]	; 0x23
			break;
 80033d6:	e732      	b.n	800323e <button_left+0x62>
			settings.ServerPass[cursorPos] = (settings.ServerPass[cursorPos] <= ' ') ? 'z' : settings.ServerPass[cursorPos] - 1;
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <button_left+0x2a8>)
 80033da:	4a24      	ldr	r2, [pc, #144]	; (800346c <button_left+0x290>)
 80033dc:	f993 1000 	ldrsb.w	r1, [r3]
 80033e0:	1853      	adds	r3, r2, r1
 80033e2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80033e6:	440a      	add	r2, r1
 80033e8:	2b20      	cmp	r3, #32
 80033ea:	bf92      	itee	ls
 80033ec:	237a      	movls	r3, #122	; 0x7a
 80033ee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80033f2:	b2db      	uxtbhi	r3, r3
 80033f4:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
			break;
 80033f8:	e721      	b.n	800323e <button_left+0x62>
			settings.host[cursorPos] = (settings.host[cursorPos] <= ' ') ? 'z' : settings.host[cursorPos] - 1;
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <button_left+0x2a8>)
 80033fc:	4a1b      	ldr	r2, [pc, #108]	; (800346c <button_left+0x290>)
 80033fe:	f993 1000 	ldrsb.w	r1, [r3]
 8003402:	1853      	adds	r3, r2, r1
 8003404:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003408:	440a      	add	r2, r1
 800340a:	2b20      	cmp	r3, #32
 800340c:	bf92      	itee	ls
 800340e:	237a      	movls	r3, #122	; 0x7a
 8003410:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003414:	b2db      	uxtbhi	r3, r3
 8003416:	f882 3043 	strb.w	r3, [r2, #67]	; 0x43
			break;
 800341a:	e710      	b.n	800323e <button_left+0x62>
			settings.baseID -= pow10_ (6 - cursorPos);
 800341c:	4b19      	ldr	r3, [pc, #100]	; (8003484 <button_left+0x2a8>)
 800341e:	7818      	ldrb	r0, [r3, #0]
 8003420:	f1c0 0006 	rsb	r0, r0, #6
 8003424:	b2c0      	uxtb	r0, r0
 8003426:	f7fd fbad 	bl	8000b84 <pow10_>
 800342a:	4a10      	ldr	r2, [pc, #64]	; (800346c <button_left+0x290>)
 800342c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800342e:	1a18      	subs	r0, r3, r0
			if (settings.baseID <= 0)
 8003430:	2800      	cmp	r0, #0
				settings.baseID = 0;
 8003432:	bfd6      	itet	le
 8003434:	2300      	movle	r3, #0
			settings.baseID -= pow10_ (6 - cursorPos);
 8003436:	6650      	strgt	r0, [r2, #100]	; 0x64
				settings.baseID = 0;
 8003438:	6653      	strle	r3, [r2, #100]	; 0x64
 800343a:	e700      	b.n	800323e <button_left+0x62>
			screenMode = smMessageCounter;
 800343c:	231b      	movs	r3, #27
			screenMode--;
 800343e:	702b      	strb	r3, [r5, #0]
			break;
 8003440:	e6fd      	b.n	800323e <button_left+0x62>
			screenMode--;
 8003442:	3b01      	subs	r3, #1
 8003444:	e7fb      	b.n	800343e <button_left+0x262>
			selectedMode--;
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <button_left+0x2ac>)
 8003448:	7813      	ldrb	r3, [r2, #0]
 800344a:	3b01      	subs	r3, #1
			if (selectedMode <= work)
 800344c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8003450:	f43f af1b 	beq.w	800328a <button_left+0xae>
 8003454:	e704      	b.n	8003260 <button_left+0x84>
 8003456:	bf00      	nop
 8003458:	20000162 	.word	0x20000162
 800345c:	2000012c 	.word	0x2000012c
 8003460:	20000166 	.word	0x20000166
 8003464:	20000b4c 	.word	0x20000b4c
 8003468:	2000014f 	.word	0x2000014f
 800346c:	20000a78 	.word	0x20000a78
 8003470:	0839b680 	.word	0x0839b680
 8003474:	200015c8 	.word	0x200015c8
 8003478:	20000bcc 	.word	0x20000bcc
 800347c:	20000c74 	.word	0x20000c74
 8003480:	20000164 	.word	0x20000164
 8003484:	20000122 	.word	0x20000122
 8003488:	20000163 	.word	0x20000163

0800348c <backButtonHoldRoutine>:

void backButtonHoldRoutine ()
{
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == false && screenMode == smRegular)
 800348c:	2104      	movs	r1, #4
{
 800348e:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == false && screenMode == smRegular)
 8003490:	480e      	ldr	r0, [pc, #56]	; (80034cc <backButtonHoldRoutine+0x40>)
 8003492:	f002 fbf5 	bl	8005c80 <HAL_GPIO_ReadPin>
 8003496:	490e      	ldr	r1, [pc, #56]	; (80034d0 <backButtonHoldRoutine+0x44>)
 8003498:	4a0e      	ldr	r2, [pc, #56]	; (80034d4 <backButtonHoldRoutine+0x48>)
 800349a:	780b      	ldrb	r3, [r1, #0]
 800349c:	4318      	orrs	r0, r3
 800349e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
 80034a2:	d107      	bne.n	80034b4 <backButtonHoldRoutine+0x28>
		infoCounter++;
 80034a4:	8813      	ldrh	r3, [r2, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	b29b      	uxth	r3, r3
	else
		infoCounter = 0;

	if (infoCounter > 2000)
 80034aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80034ae:	d803      	bhi.n	80034b8 <backButtonHoldRoutine+0x2c>
 80034b0:	8013      	strh	r3, [r2, #0]
			infoCounter = 0;
			screenMode = smMainMenu;
			flag.lcdRefreshRequest = 1;
		}

}
 80034b2:	bd08      	pop	{r3, pc}
		infoCounter = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	e7fb      	b.n	80034b0 <backButtonHoldRoutine+0x24>
			screenMode = smMainMenu;
 80034b8:	2301      	movs	r3, #1
			infoCounter = 0;
 80034ba:	8010      	strh	r0, [r2, #0]
			flag.lcdRefreshRequest = 1;
 80034bc:	4a06      	ldr	r2, [pc, #24]	; (80034d8 <backButtonHoldRoutine+0x4c>)
			screenMode = smMainMenu;
 80034be:	700b      	strb	r3, [r1, #0]
			flag.lcdRefreshRequest = 1;
 80034c0:	7813      	ldrb	r3, [r2, #0]
 80034c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c6:	7013      	strb	r3, [r2, #0]
}
 80034c8:	e7f3      	b.n	80034b2 <backButtonHoldRoutine+0x26>
 80034ca:	bf00      	nop
 80034cc:	40010c00 	.word	0x40010c00
 80034d0:	20000162 	.word	0x20000162
 80034d4:	20000124 	.word	0x20000124
 80034d8:	20000b4c 	.word	0x20000b4c

080034dc <halfSecondRoutine>:

void halfSecondRoutine ()
{
 80034dc:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastHalf = 0;
	if (lastHalf != HAL_GetTick () / 500 && ((screenMode >= smStatus && screenMode <= smMessageCounter)))
 80034de:	f001 fdbb 	bl	8005058 <HAL_GetTick>
 80034e2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 80034e6:	fbb0 f0f5 	udiv	r0, r0, r5
 80034ea:	4c0a      	ldr	r4, [pc, #40]	; (8003514 <halfSecondRoutine+0x38>)
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	4298      	cmp	r0, r3
 80034f0:	d00e      	beq.n	8003510 <halfSecondRoutine+0x34>
 80034f2:	4b09      	ldr	r3, [pc, #36]	; (8003518 <halfSecondRoutine+0x3c>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	3b19      	subs	r3, #25
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d809      	bhi.n	8003510 <halfSecondRoutine+0x34>
		{
			lastHalf = HAL_GetTick () / 500;
 80034fc:	f001 fdac 	bl	8005058 <HAL_GetTick>
 8003500:	fbb0 f0f5 	udiv	r0, r0, r5

			flag.lcdRefreshRequest = 1;
 8003504:	4a05      	ldr	r2, [pc, #20]	; (800351c <halfSecondRoutine+0x40>)
			lastHalf = HAL_GetTick () / 500;
 8003506:	6020      	str	r0, [r4, #0]
			flag.lcdRefreshRequest = 1;
 8003508:	7813      	ldrb	r3, [r2, #0]
 800350a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800350e:	7013      	strb	r3, [r2, #0]
		}
}
 8003510:	bd38      	pop	{r3, r4, r5, pc}
 8003512:	bf00      	nop
 8003514:	20000128 	.word	0x20000128
 8003518:	20000162 	.word	0x20000162
 800351c:	20000b4c 	.word	0x20000b4c

08003520 <secondRoutine>:

void secondRoutine ()
{
 8003520:	b538      	push	{r3, r4, r5, lr}
	static uint32_t lastSecond = 0;
	if (HAL_GetTick () / 1000 != lastSecond)
 8003522:	f001 fd99 	bl	8005058 <HAL_GetTick>
 8003526:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800352a:	fbb0 f0f5 	udiv	r0, r0, r5
 800352e:	4c09      	ldr	r4, [pc, #36]	; (8003554 <secondRoutine+0x34>)
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	4298      	cmp	r0, r3
 8003534:	d00c      	beq.n	8003550 <secondRoutine+0x30>
		{
			lastSecond = HAL_GetTick () / 1000;
 8003536:	f001 fd8f 	bl	8005058 <HAL_GetTick>
 800353a:	fbb0 f0f5 	udiv	r0, r0, r5
			if (screenMode == smRegular)
 800353e:	4b06      	ldr	r3, [pc, #24]	; (8003558 <secondRoutine+0x38>)
			lastSecond = HAL_GetTick () / 1000;
 8003540:	6020      	str	r0, [r4, #0]
			if (screenMode == smRegular)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	b923      	cbnz	r3, 8003550 <secondRoutine+0x30>
				flag.lcdRefreshRequest = 1;
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <secondRoutine+0x3c>)
 8003548:	7813      	ldrb	r3, [r2, #0]
 800354a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800354e:	7013      	strb	r3, [r2, #0]
		}
}
 8003550:	bd38      	pop	{r3, r4, r5, pc}
 8003552:	bf00      	nop
 8003554:	20000130 	.word	0x20000130
 8003558:	20000162 	.word	0x20000162
 800355c:	20000b4c 	.word	0x20000b4c

08003560 <checkNodeConfigure>:

uint8_t checkNodeConfigure ()
{
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr && settings.sf == nodeSettings.sf
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <checkNodeConfigure+0x48>)
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <checkNodeConfigure+0x4c>)
			&& settings.realFrequency == nodeSettings.realFrequency && settings.preamble == nodeSettings.preamble && settings.syncWord == nodeSettings.sw
			&& selectedNode == nodeSettings.nodeNum);
 8003564:	7bd0      	ldrb	r0, [r2, #15]
 8003566:	7b59      	ldrb	r1, [r3, #13]
 8003568:	4288      	cmp	r0, r1
 800356a:	d11b      	bne.n	80035a4 <checkNodeConfigure+0x44>
	return (settings.bw == nodeSettings.bw && settings.cr == nodeSettings.cr && settings.sf == nodeSettings.sf
 800356c:	7c10      	ldrb	r0, [r2, #16]
 800356e:	7ad9      	ldrb	r1, [r3, #11]
 8003570:	4288      	cmp	r0, r1
 8003572:	d117      	bne.n	80035a4 <checkNodeConfigure+0x44>
 8003574:	7b90      	ldrb	r0, [r2, #14]
 8003576:	7b19      	ldrb	r1, [r3, #12]
 8003578:	4288      	cmp	r0, r1
 800357a:	d113      	bne.n	80035a4 <checkNodeConfigure+0x44>
			&& settings.realFrequency == nodeSettings.realFrequency && settings.preamble == nodeSettings.preamble && settings.syncWord == nodeSettings.sw
 800357c:	6810      	ldr	r0, [r2, #0]
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	4288      	cmp	r0, r1
 8003582:	d10f      	bne.n	80035a4 <checkNodeConfigure+0x44>
 8003584:	8990      	ldrh	r0, [r2, #12]
 8003586:	8919      	ldrh	r1, [r3, #8]
 8003588:	4288      	cmp	r0, r1
 800358a:	d10b      	bne.n	80035a4 <checkNodeConfigure+0x44>
 800358c:	7c51      	ldrb	r1, [r2, #17]
 800358e:	7b9a      	ldrb	r2, [r3, #14]
 8003590:	4291      	cmp	r1, r2
 8003592:	d107      	bne.n	80035a4 <checkNodeConfigure+0x44>
			&& selectedNode == nodeSettings.nodeNum);
 8003594:	4a06      	ldr	r2, [pc, #24]	; (80035b0 <checkNodeConfigure+0x50>)
 8003596:	7a9b      	ldrb	r3, [r3, #10]
 8003598:	f9b2 0000 	ldrsh.w	r0, [r2]
 800359c:	1ac3      	subs	r3, r0, r3
 800359e:	4258      	negs	r0, r3
 80035a0:	4158      	adcs	r0, r3
 80035a2:	4770      	bx	lr
 80035a4:	2000      	movs	r0, #0
}
 80035a6:	4770      	bx	lr
 80035a8:	20000a78 	.word	0x20000a78
 80035ac:	20000c74 	.word	0x20000c74
 80035b0:	20000166 	.word	0x20000166

080035b4 <nodeConfigureRoutine>:

void nodeConfigureRoutine ()
{
 80035b4:	b538      	push	{r3, r4, r5, lr}
	if (HAL_GetTick () - configTime > 500 && configStep == 1)
 80035b6:	f001 fd4f 	bl	8005058 <HAL_GetTick>
 80035ba:	4c16      	ldr	r4, [pc, #88]	; (8003614 <nodeConfigureRoutine+0x60>)
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	1a80      	subs	r0, r0, r2
 80035c0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80035c4:	d910      	bls.n	80035e8 <nodeConfigureRoutine+0x34>
 80035c6:	4d14      	ldr	r5, [pc, #80]	; (8003618 <nodeConfigureRoutine+0x64>)
 80035c8:	782a      	ldrb	r2, [r5, #0]
 80035ca:	2a01      	cmp	r2, #1
 80035cc:	d10c      	bne.n	80035e8 <nodeConfigureRoutine+0x34>
		{
			clearStrings ();
 80035ce:	f7fd fc91 	bl	8000ef4 <clearStrings>
			if (checkNodeConfigure ())
 80035d2:	f7ff ffc5 	bl	8003560 <checkNodeConfigure>
 80035d6:	b1d8      	cbz	r0, 8003610 <nodeConfigureRoutine+0x5c>
				{
					sprintf (string[0], "Sucess");
 80035d8:	4910      	ldr	r1, [pc, #64]	; (800361c <nodeConfigureRoutine+0x68>)
				}
			else
				{
					sprintf (string[0], "Failure");
 80035da:	4811      	ldr	r0, [pc, #68]	; (8003620 <nodeConfigureRoutine+0x6c>)
 80035dc:	f004 fb98 	bl	8007d10 <strcpy>
				}
			updateLcd ();
 80035e0:	f7fd fc9a 	bl	8000f18 <updateLcd>
			configStep = 2;
 80035e4:	2302      	movs	r3, #2
 80035e6:	702b      	strb	r3, [r5, #0]
		}

	if (HAL_GetTick () - configTime > 1500 && configStep == 2)
 80035e8:	f001 fd36 	bl	8005058 <HAL_GetTick>
 80035ec:	6823      	ldr	r3, [r4, #0]
 80035ee:	1ac0      	subs	r0, r0, r3
 80035f0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80035f4:	4298      	cmp	r0, r3
 80035f6:	d90a      	bls.n	800360e <nodeConfigureRoutine+0x5a>
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <nodeConfigureRoutine+0x64>)
 80035fa:	781a      	ldrb	r2, [r3, #0]
 80035fc:	2a02      	cmp	r2, #2
 80035fe:	d106      	bne.n	800360e <nodeConfigureRoutine+0x5a>
		{
			configStep = 0;
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
			flag.lcdRefreshRequest = 1;
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <nodeConfigureRoutine+0x70>)
 8003606:	7813      	ldrb	r3, [r2, #0]
 8003608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800360c:	7013      	strb	r3, [r2, #0]
		}
}
 800360e:	bd38      	pop	{r3, r4, r5, pc}
					sprintf (string[0], "Failure");
 8003610:	4905      	ldr	r1, [pc, #20]	; (8003628 <nodeConfigureRoutine+0x74>)
 8003612:	e7e2      	b.n	80035da <nodeConfigureRoutine+0x26>
 8003614:	20000cdc 	.word	0x20000cdc
 8003618:	20000b99 	.word	0x20000b99
 800361c:	080096aa 	.word	0x080096aa
 8003620:	20000168 	.word	0x20000168
 8003624:	20000b4c 	.word	0x20000b4c
 8003628:	080096b1 	.word	0x080096b1

0800362c <RadioInit>:

void RadioInit ()
{
 800362c:	b510      	push	{r4, lr}
	SX127X_dio_t nss;
	SX127X_dio_t reset;
	SX127X_defaultConfig (&myRadio);
 800362e:	4c0d      	ldr	r4, [pc, #52]	; (8003664 <RadioInit+0x38>)
{
 8003630:	b086      	sub	sp, #24
	SX127X_defaultConfig (&myRadio);
 8003632:	4620      	mov	r0, r4
 8003634:	f000 fea2 	bl	800437c <SX127X_defaultConfig>
	defaultSettings ();
 8003638:	f7fd fc28 	bl	8000e8c <defaultSettings>

	nss.pin = NSS_Pin;
	nss.port = NSS_GPIO_Port;
	reset.pin = RESET_Pin;
 800363c:	2208      	movs	r2, #8
	nss.port = NSS_GPIO_Port;
 800363e:	4b0a      	ldr	r3, [pc, #40]	; (8003668 <RadioInit+0x3c>)
	reset.port = RESET_GPIO_Port;
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8003640:	4620      	mov	r0, r4
	reset.port = RESET_GPIO_Port;
 8003642:	e9cd 2304 	strd	r2, r3, [sp, #16]
	SX127X_PortConfig (&myRadio, reset, nss, &hspi1);
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <RadioInit+0x40>)
 8003648:	e9cd 3200 	strd	r3, r2, [sp]
 800364c:	aa06      	add	r2, sp, #24
 800364e:	2310      	movs	r3, #16
 8003650:	e912 0006 	ldmdb	r2, {r1, r2}
 8003654:	f000 fea4 	bl	80043a0 <SX127X_PortConfig>
	SX127X_init (&myRadio);
 8003658:	4620      	mov	r0, r4
}
 800365a:	b006      	add	sp, #24
 800365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SX127X_init (&myRadio);
 8003660:	f001 b8c6 	b.w	80047f0 <SX127X_init>
 8003664:	20000998 	.word	0x20000998
 8003668:	40010800 	.word	0x40010800
 800366c:	20000dec 	.word	0x20000dec

08003670 <airCounter>:

void airCounter ()
{
 8003670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint32_t upTimeMs;
	static uint32_t transmittingTimeMs;
	static uint32_t receivingTimeMs;
	static uint32_t lastTick;

	uint32_t delta = HAL_GetTick () - lastTick;
 8003672:	f001 fcf1 	bl	8005058 <HAL_GetTick>
 8003676:	4d31      	ldr	r5, [pc, #196]	; (800373c <airCounter+0xcc>)
	upTimeMs += delta;
 8003678:	4931      	ldr	r1, [pc, #196]	; (8003740 <airCounter+0xd0>)
	uint32_t delta = HAL_GetTick () - lastTick;
 800367a:	682b      	ldr	r3, [r5, #0]
	upTimeMs += delta;
 800367c:	680e      	ldr	r6, [r1, #0]
	uint32_t delta = HAL_GetTick () - lastTick;
 800367e:	1ac0      	subs	r0, r0, r3
	if (myRadio.signalDetected)
 8003680:	4b30      	ldr	r3, [pc, #192]	; (8003744 <airCounter+0xd4>)
 8003682:	4a31      	ldr	r2, [pc, #196]	; (8003748 <airCounter+0xd8>)
 8003684:	7f1c      	ldrb	r4, [r3, #28]
	upTimeMs += delta;
 8003686:	1987      	adds	r7, r0, r6
	if (myRadio.signalDetected)
 8003688:	b114      	cbz	r4, 8003690 <airCounter+0x20>
		receivingTimeMs += delta;
 800368a:	6814      	ldr	r4, [r2, #0]
 800368c:	4404      	add	r4, r0
 800368e:	6014      	str	r4, [r2, #0]
	if (myRadio.status == TX)
 8003690:	7c1b      	ldrb	r3, [r3, #16]
		transmittingTimeMs += delta;
	upTime += upTimeMs / 1000;
 8003692:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8003760 <airCounter+0xf0>
	if (myRadio.status == TX)
 8003696:	2b03      	cmp	r3, #3
 8003698:	4b2c      	ldr	r3, [pc, #176]	; (800374c <airCounter+0xdc>)
		transmittingTimeMs += delta;
 800369a:	bf02      	ittt	eq
 800369c:	681c      	ldreq	r4, [r3, #0]
 800369e:	1900      	addeq	r0, r0, r4
 80036a0:	6018      	streq	r0, [r3, #0]
	upTime += upTimeMs / 1000;
 80036a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036a6:	fbb7 f6f0 	udiv	r6, r7, r0
 80036aa:	f8dc 4000 	ldr.w	r4, [ip]
 80036ae:	4434      	add	r4, r6
	upTimeMs %= 1000;
 80036b0:	fb00 7616 	mls	r6, r0, r6, r7
	upTime += upTimeMs / 1000;
 80036b4:	f8cc 4000 	str.w	r4, [ip]
	if (receivingTimeMs > 1000)
 80036b8:	f8d2 c000 	ldr.w	ip, [r2]
 80036bc:	4f24      	ldr	r7, [pc, #144]	; (8003750 <airCounter+0xe0>)
 80036be:	4584      	cmp	ip, r0
	upTimeMs %= 1000;
 80036c0:	600e      	str	r6, [r1, #0]
	if (receivingTimeMs > 1000)
 80036c2:	d907      	bls.n	80036d4 <airCounter+0x64>
		{
			receivingTime += receivingTimeMs / 1000;
 80036c4:	fbbc f1f0 	udiv	r1, ip, r0
 80036c8:	683e      	ldr	r6, [r7, #0]
 80036ca:	440e      	add	r6, r1
			receivingTimeMs %= 1000;
 80036cc:	fb00 c111 	mls	r1, r0, r1, ip
			receivingTime += receivingTimeMs / 1000;
 80036d0:	603e      	str	r6, [r7, #0]
			receivingTimeMs %= 1000;
 80036d2:	6011      	str	r1, [r2, #0]
		}
	if (transmittingTimeMs > 1000)
 80036d4:	6819      	ldr	r1, [r3, #0]
 80036d6:	4e1f      	ldr	r6, [pc, #124]	; (8003754 <airCounter+0xe4>)
 80036d8:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80036dc:	d909      	bls.n	80036f2 <airCounter+0x82>
		{
			transmittingTime += transmittingTimeMs / 1000;
 80036de:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 80036e2:	fbb1 f2fc 	udiv	r2, r1, ip
 80036e6:	6830      	ldr	r0, [r6, #0]
 80036e8:	4410      	add	r0, r2
			transmittingTimeMs %= 1000;
 80036ea:	fb0c 1212 	mls	r2, ip, r2, r1
			transmittingTime += transmittingTimeMs / 1000;
 80036ee:	6030      	str	r0, [r6, #0]
			transmittingTimeMs %= 1000;
 80036f0:	601a      	str	r2, [r3, #0]
		}
	airUseForRx = (receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 80036f2:	6838      	ldr	r0, [r7, #0]
 80036f4:	b1e8      	cbz	r0, 8003732 <airCounter+0xc2>
 80036f6:	f7fc fde7 	bl	80002c8 <__aeabi_ui2f>
 80036fa:	4607      	mov	r7, r0
 80036fc:	4620      	mov	r0, r4
 80036fe:	f7fc fde3 	bl	80002c8 <__aeabi_ui2f>
 8003702:	4601      	mov	r1, r0
 8003704:	4638      	mov	r0, r7
 8003706:	f7fc feeb 	bl	80004e0 <__aeabi_fdiv>
 800370a:	4b13      	ldr	r3, [pc, #76]	; (8003758 <airCounter+0xe8>)
 800370c:	6018      	str	r0, [r3, #0]
	airUseForTx = (transmittingTime == 0) ? 0 : (float) transmittingTime / (float) upTime;
 800370e:	6830      	ldr	r0, [r6, #0]
 8003710:	b188      	cbz	r0, 8003736 <airCounter+0xc6>
 8003712:	f7fc fdd9 	bl	80002c8 <__aeabi_ui2f>
 8003716:	4606      	mov	r6, r0
 8003718:	4620      	mov	r0, r4
 800371a:	f7fc fdd5 	bl	80002c8 <__aeabi_ui2f>
 800371e:	4601      	mov	r1, r0
 8003720:	4630      	mov	r0, r6
 8003722:	f7fc fedd 	bl	80004e0 <__aeabi_fdiv>
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <airCounter+0xec>)
 8003728:	6018      	str	r0, [r3, #0]
	lastTick = HAL_GetTick ();
 800372a:	f001 fc95 	bl	8005058 <HAL_GetTick>
 800372e:	6028      	str	r0, [r5, #0]

}
 8003730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	airUseForRx = (receivingTime == 0) ? 0 : (float) receivingTime / (float) upTime;
 8003732:	2000      	movs	r0, #0
 8003734:	e7e9      	b.n	800370a <airCounter+0x9a>
	airUseForTx = (transmittingTime == 0) ? 0 : (float) transmittingTime / (float) upTime;
 8003736:	2000      	movs	r0, #0
 8003738:	e7f5      	b.n	8003726 <airCounter+0xb6>
 800373a:	bf00      	nop
 800373c:	20000138 	.word	0x20000138
 8003740:	2000036c 	.word	0x2000036c
 8003744:	20000998 	.word	0x20000998
 8003748:	2000015c 	.word	0x2000015c
 800374c:	20000368 	.word	0x20000368
 8003750:	20000a74 	.word	0x20000a74
 8003754:	200015c4 	.word	0x200015c4
 8003758:	20000b94 	.word	0x20000b94
 800375c:	20000b44 	.word	0x20000b44
 8003760:	20000b40 	.word	0x20000b40

08003764 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config (void)
{
 8003764:	b510      	push	{r4, lr}
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003766:	2214      	movs	r2, #20
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003768:	2400      	movs	r4, #0
{
 800376a:	b094      	sub	sp, #80	; 0x50
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800376c:	4621      	mov	r1, r4
 800376e:	eb0d 0002 	add.w	r0, sp, r2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003772:	940d      	str	r4, [sp, #52]	; 0x34
 8003774:	940f      	str	r4, [sp, #60]	; 0x3c
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003776:	f004 fa15 	bl	8007ba4 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800377a:	2210      	movs	r2, #16
 800377c:	4621      	mov	r1, r4
 800377e:	a801      	add	r0, sp, #4
 8003780:	f004 fa10 	bl	8007ba4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003788:	2209      	movs	r2, #9
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800378a:	940c      	str	r4, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800378c:	2402      	movs	r4, #2
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800378e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003792:	e9cd 4311 	strd	r4, r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003796:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003798:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 800379c:	a80a      	add	r0, sp, #40	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800379e:	920e      	str	r2, [sp, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80037a0:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80037a2:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig (&RCC_OscInitStruct) != HAL_OK)
 80037a4:	f002 ff04 	bl	80065b0 <HAL_RCC_OscConfig>
 80037a8:	b100      	cbz	r0, 80037ac <SystemClock_Config+0x48>
 */
void Error_Handler (void)
{
	/* USER CODE BEGIN Error_Handler_Debug */

	while (1)
 80037aa:	e7fe      	b.n	80037aa <SystemClock_Config+0x46>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037ac:	230f      	movs	r3, #15
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ae:	e9cd 3405 	strd	r3, r4, [sp, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037b6:	9007      	str	r0, [sp, #28]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037b8:	e9cd 3008 	strd	r3, r0, [sp, #32]
	if (HAL_RCC_ClockConfig (&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037bc:	4621      	mov	r1, r4
 80037be:	a805      	add	r0, sp, #20
 80037c0:	f003 f8cc 	bl	800695c <HAL_RCC_ClockConfig>
 80037c4:	b100      	cbz	r0, 80037c8 <SystemClock_Config+0x64>
	while (1)
 80037c6:	e7fe      	b.n	80037c6 <SystemClock_Config+0x62>
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80037c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	if (HAL_RCCEx_PeriphCLKConfig (&PeriphClkInit) != HAL_OK)
 80037cc:	a801      	add	r0, sp, #4
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80037ce:	9401      	str	r4, [sp, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80037d0:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig (&PeriphClkInit) != HAL_OK)
 80037d2:	f003 f97f 	bl	8006ad4 <HAL_RCCEx_PeriphCLKConfig>
 80037d6:	b100      	cbz	r0, 80037da <SystemClock_Config+0x76>
	while (1)
 80037d8:	e7fe      	b.n	80037d8 <SystemClock_Config+0x74>
}
 80037da:	b014      	add	sp, #80	; 0x50
 80037dc:	bd10      	pop	{r4, pc}
	...

080037e0 <main>:
{
 80037e0:	b580      	push	{r7, lr}
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80037e2:	4d91      	ldr	r5, [pc, #580]	; (8003a28 <main+0x248>)
{
 80037e4:	b092      	sub	sp, #72	; 0x48
	HAL_Init ();
 80037e6:	f001 fc19 	bl	800501c <HAL_Init>
	SystemClock_Config ();
 80037ea:	f7ff ffbb 	bl	8003764 <SystemClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80037ee:	2210      	movs	r2, #16
 80037f0:	2100      	movs	r1, #0
 80037f2:	a80b      	add	r0, sp, #44	; 0x2c
 80037f4:	f004 f9d6 	bl	8007ba4 <memset>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80037f8:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin (GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 80037fa:	2200      	movs	r2, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80037fc:	f043 0320 	orr.w	r3, r3, #32
 8003800:	61ab      	str	r3, [r5, #24]
 8003802:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin (GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 8003804:	f44f 718c 	mov.w	r1, #280	; 0x118
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	9306      	str	r3, [sp, #24]
 800380e:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003810:	69ab      	ldr	r3, [r5, #24]
	HAL_GPIO_WritePin (GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 8003812:	4886      	ldr	r0, [pc, #536]	; (8003a2c <main+0x24c>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003814:	f043 0304 	orr.w	r3, r3, #4
 8003818:	61ab      	str	r3, [r5, #24]
 800381a:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800381c:	2400      	movs	r4, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	9307      	str	r3, [sp, #28]
 8003824:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003826:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003828:	2601      	movs	r6, #1
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	f043 0308 	orr.w	r3, r3, #8
 800382e:	61ab      	str	r3, [r5, #24]
 8003830:	69ab      	ldr	r3, [r5, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003832:	2703      	movs	r7, #3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	9308      	str	r3, [sp, #32]
 800383a:	9b08      	ldr	r3, [sp, #32]
	HAL_GPIO_WritePin (GPIOA, RESET_Pin | NSS_Pin | RELAY_Pin, GPIO_PIN_RESET);
 800383c:	f002 fa26 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (GPIOB, CS_Pin | CD_Pin | BUZZER_Pin, GPIO_PIN_RESET);
 8003840:	2200      	movs	r2, #0
 8003842:	f245 0120 	movw	r1, #20512	; 0x5020
 8003846:	487a      	ldr	r0, [pc, #488]	; (8003a30 <main+0x250>)
 8003848:	f002 fa20 	bl	8005c8c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800384c:	f44f 738c 	mov.w	r3, #280	; 0x118
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 8003850:	4876      	ldr	r0, [pc, #472]	; (8003a2c <main+0x24c>)
 8003852:	a90b      	add	r1, sp, #44	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003854:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003858:	e9cd 470d 	strd	r4, r7, [sp, #52]	; 0x34
	HAL_GPIO_Init (GPIOA, &GPIO_InitStruct);
 800385c:	f002 f934 	bl	8005ac8 <HAL_GPIO_Init>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003860:	f640 4c06 	movw	ip, #3078	; 0xc06
 8003864:	4b73      	ldr	r3, [pc, #460]	; (8003a34 <main+0x254>)
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003866:	4872      	ldr	r0, [pc, #456]	; (8003a30 <main+0x250>)
 8003868:	a90b      	add	r1, sp, #44	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800386a:	e9cd c30b 	strd	ip, r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800386e:	960d      	str	r6, [sp, #52]	; 0x34
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003870:	f002 f92a 	bl	8005ac8 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_Pin | CD_Pin | BUZZER_Pin;
 8003874:	f245 0320 	movw	r3, #20512	; 0x5020
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003878:	486d      	ldr	r0, [pc, #436]	; (8003a30 <main+0x250>)
 800387a:	a90b      	add	r1, sp, #44	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800387c:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003880:	e9cd 470d 	strd	r4, r7, [sp, #52]	; 0x34
	HAL_GPIO_Init (GPIOB, &GPIO_InitStruct);
 8003884:	f002 f920 	bl	8005ac8 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority (EXTI1_IRQn, 0, 0);
 8003888:	4622      	mov	r2, r4
 800388a:	4621      	mov	r1, r4
 800388c:	2007      	movs	r0, #7
 800388e:	f001 fe35 	bl	80054fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (EXTI1_IRQn);
 8003892:	2007      	movs	r0, #7
 8003894:	f001 fe64 	bl	8005560 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority (EXTI2_IRQn, 0, 0);
 8003898:	4622      	mov	r2, r4
 800389a:	4621      	mov	r1, r4
 800389c:	2008      	movs	r0, #8
 800389e:	f001 fe2d 	bl	80054fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (EXTI2_IRQn);
 80038a2:	2008      	movs	r0, #8
 80038a4:	f001 fe5c 	bl	8005560 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority (EXTI15_10_IRQn, 3, 0);
 80038a8:	4622      	mov	r2, r4
 80038aa:	4639      	mov	r1, r7
 80038ac:	2028      	movs	r0, #40	; 0x28
 80038ae:	f001 fe25 	bl	80054fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (EXTI15_10_IRQn);
 80038b2:	2028      	movs	r0, #40	; 0x28
 80038b4:	f001 fe54 	bl	8005560 <HAL_NVIC_EnableIRQ>
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038b8:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority (DMA1_Channel7_IRQn, 2, 0);
 80038ba:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038bc:	4333      	orrs	r3, r6
 80038be:	616b      	str	r3, [r5, #20]
 80038c0:	696b      	ldr	r3, [r5, #20]
	HAL_NVIC_SetPriority (DMA1_Channel7_IRQn, 2, 0);
 80038c2:	2102      	movs	r1, #2
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038c4:	4033      	ands	r3, r6
	HAL_NVIC_SetPriority (DMA1_Channel7_IRQn, 2, 0);
 80038c6:	2011      	movs	r0, #17
	__HAL_RCC_DMA1_CLK_ENABLE();
 80038c8:	9305      	str	r3, [sp, #20]
 80038ca:	9b05      	ldr	r3, [sp, #20]
	HAL_NVIC_SetPriority (DMA1_Channel7_IRQn, 2, 0);
 80038cc:	f001 fe16 	bl	80054fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ (DMA1_Channel7_IRQn);
 80038d0:	2011      	movs	r0, #17
 80038d2:	f001 fe45 	bl	8005560 <HAL_NVIC_EnableIRQ>
	hi2c1.Instance = I2C1;
 80038d6:	4858      	ldr	r0, [pc, #352]	; (8003a38 <main+0x258>)
	hi2c1.Init.ClockSpeed = 400000;
 80038d8:	f8df e190 	ldr.w	lr, [pc, #400]	; 8003a6c <main+0x28c>
 80038dc:	4b57      	ldr	r3, [pc, #348]	; (8003a3c <main+0x25c>)
	hi2c1.Init.OwnAddress1 = 0;
 80038de:	e9c0 4402 	strd	r4, r4, [r0, #8]
	hi2c1.Init.ClockSpeed = 400000;
 80038e2:	e9c0 e300 	strd	lr, r3, [r0]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038ea:	e9c0 4406 	strd	r4, r4, [r0, #24]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038ee:	e9c0 3404 	strd	r3, r4, [r0, #16]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038f2:	6204      	str	r4, [r0, #32]
	if (HAL_I2C_Init (&hi2c1) != HAL_OK)
 80038f4:	f002 fbb8 	bl	8006068 <HAL_I2C_Init>
 80038f8:	4603      	mov	r3, r0
 80038fa:	b100      	cbz	r0, 80038fe <main+0x11e>
	while (1)
 80038fc:	e7fe      	b.n	80038fc <main+0x11c>
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80038fe:	f44f 7882 	mov.w	r8, #260	; 0x104
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003902:	f44f 7700 	mov.w	r7, #512	; 0x200
 8003906:	2508      	movs	r5, #8
	hspi1.Init.CRCPolynomial = 10;
 8003908:	240a      	movs	r4, #10
	hspi1.Instance = SPI1;
 800390a:	484d      	ldr	r0, [pc, #308]	; (8003a40 <main+0x260>)
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800390c:	4a4d      	ldr	r2, [pc, #308]	; (8003a44 <main+0x264>)
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800390e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003912:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003916:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800391a:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800391c:	e9c0 2800 	strd	r2, r8, [r0]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003920:	e9c0 7506 	strd	r7, r5, [r0, #24]
	hspi1.Init.CRCPolynomial = 10;
 8003924:	62c4      	str	r4, [r0, #44]	; 0x2c
	if (HAL_SPI_Init (&hspi1) != HAL_OK)
 8003926:	f003 f9b1 	bl	8006c8c <HAL_SPI_Init>
 800392a:	4603      	mov	r3, r0
 800392c:	b100      	cbz	r0, 8003930 <main+0x150>
	while (1)
 800392e:	e7fe      	b.n	800392e <main+0x14e>
	hspi2.Instance = SPI2;
 8003930:	4845      	ldr	r0, [pc, #276]	; (8003a48 <main+0x268>)
 8003932:	4a46      	ldr	r2, [pc, #280]	; (8003a4c <main+0x26c>)
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003934:	e9c0 7506 	strd	r7, r5, [r0, #24]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8003938:	e9c0 2800 	strd	r2, r8, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800393c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003940:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003944:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.CRCPolynomial = 10;
 8003948:	e9c0 340a 	strd	r3, r4, [r0, #40]	; 0x28
	if (HAL_SPI_Init (&hspi2) != HAL_OK)
 800394c:	f003 f99e 	bl	8006c8c <HAL_SPI_Init>
 8003950:	4605      	mov	r5, r0
 8003952:	b100      	cbz	r0, 8003956 <main+0x176>
	while (1)
 8003954:	e7fe      	b.n	8003954 <main+0x174>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003956:	4601      	mov	r1, r0
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003958:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800395c:	221c      	movs	r2, #28
 800395e:	a80b      	add	r0, sp, #44	; 0x2c
 8003960:	f004 f920 	bl	8007ba4 <memset>
	htim2.Instance = TIM2;
 8003964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003968:	4c39      	ldr	r4, [pc, #228]	; (8003a50 <main+0x270>)
	htim2.Init.Prescaler = 0;
 800396a:	e9c4 3500 	strd	r3, r5, [r4]
	htim2.Init.Period = 89;
 800396e:	2359      	movs	r3, #89	; 0x59
	if (HAL_TIM_PWM_Init (&htim2) != HAL_OK)
 8003970:	4620      	mov	r0, r4
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003972:	e9c4 3503 	strd	r3, r5, [r4, #12]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003976:	60a5      	str	r5, [r4, #8]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003978:	61a5      	str	r5, [r4, #24]
	if (HAL_TIM_PWM_Init (&htim2) != HAL_OK)
 800397a:	f003 fcab 	bl	80072d4 <HAL_TIM_PWM_Init>
 800397e:	b100      	cbz	r0, 8003982 <main+0x1a2>
	while (1)
 8003980:	e7fe      	b.n	8003980 <main+0x1a0>
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003982:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization (&htim2, &sMasterConfig) != HAL_OK)
 8003986:	a909      	add	r1, sp, #36	; 0x24
 8003988:	4620      	mov	r0, r4
 800398a:	f003 fe1b 	bl	80075c4 <HAL_TIMEx_MasterConfigSynchronization>
 800398e:	b100      	cbz	r0, 8003992 <main+0x1b2>
	while (1)
 8003990:	e7fe      	b.n	8003990 <main+0x1b0>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003992:	2360      	movs	r3, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003994:	900d      	str	r0, [sp, #52]	; 0x34
	sConfigOC.Pulse = 0;
 8003996:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800399a:	900f      	str	r0, [sp, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel (&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800399c:	2204      	movs	r2, #4
 800399e:	4620      	mov	r0, r4
 80039a0:	a90b      	add	r1, sp, #44	; 0x2c
 80039a2:	f003 fcef 	bl	8007384 <HAL_TIM_PWM_ConfigChannel>
 80039a6:	4605      	mov	r5, r0
 80039a8:	b100      	cbz	r0, 80039ac <main+0x1cc>
	while (1)
 80039aa:	e7fe      	b.n	80039aa <main+0x1ca>
	HAL_TIM_MspPostInit (&htim2);
 80039ac:	4620      	mov	r0, r4
 80039ae:	f000 fbaf 	bl	8004110 <HAL_TIM_MspPostInit>
	huart1.Init.BaudRate = 9600;
 80039b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	huart1.Instance = USART1;
 80039b6:	4827      	ldr	r0, [pc, #156]	; (8003a54 <main+0x274>)
	huart1.Init.BaudRate = 9600;
 80039b8:	4f27      	ldr	r7, [pc, #156]	; (8003a58 <main+0x278>)
	huart1.Init.StopBits = UART_STOPBITS_1;
 80039ba:	e9c0 5502 	strd	r5, r5, [r0, #8]
	huart1.Init.BaudRate = 9600;
 80039be:	e9c0 7300 	strd	r7, r3, [r0]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80039c2:	230c      	movs	r3, #12
	huart1.Init.Parity = UART_PARITY_NONE;
 80039c4:	6105      	str	r5, [r0, #16]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039c6:	e9c0 3505 	strd	r3, r5, [r0, #20]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039ca:	61c5      	str	r5, [r0, #28]
	if (HAL_UART_Init (&huart1) != HAL_OK)
 80039cc:	f003 fea0 	bl	8007710 <HAL_UART_Init>
 80039d0:	b100      	cbz	r0, 80039d4 <main+0x1f4>
	while (1)
 80039d2:	e7fe      	b.n	80039d2 <main+0x1f2>
	hadc1.Instance = ADC1;
 80039d4:	4c21      	ldr	r4, [pc, #132]	; (8003a5c <main+0x27c>)
 80039d6:	4b22      	ldr	r3, [pc, #136]	; (8003a60 <main+0x280>)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80039d8:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	hadc1.Instance = ADC1;
 80039dc:	6023      	str	r3, [r4, #0]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039de:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
	ADC_ChannelConfTypeDef sConfig = { 0 };
 80039e2:	900d      	str	r0, [sp, #52]	; 0x34
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80039e4:	60a0      	str	r0, [r4, #8]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80039e6:	7520      	strb	r0, [r4, #20]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80039e8:	6060      	str	r0, [r4, #4]
	if (HAL_ADC_Init (&hadc1) != HAL_OK)
 80039ea:	4620      	mov	r0, r4
	hadc1.Init.ContinuousConvMode = ENABLE;
 80039ec:	7326      	strb	r6, [r4, #12]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039ee:	61e3      	str	r3, [r4, #28]
	hadc1.Init.NbrOfConversion = 1;
 80039f0:	6126      	str	r6, [r4, #16]
	if (HAL_ADC_Init (&hadc1) != HAL_OK)
 80039f2:	f001 fcf3 	bl	80053dc <HAL_ADC_Init>
 80039f6:	b100      	cbz	r0, 80039fa <main+0x21a>
	while (1)
 80039f8:	e7fe      	b.n	80039f8 <main+0x218>
	sConfig.Channel = ADC_CHANNEL_2;
 80039fa:	2302      	movs	r3, #2
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80039fc:	e9cd 360b 	strd	r3, r6, [sp, #44]	; 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003a00:	2307      	movs	r3, #7
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK)
 8003a02:	4620      	mov	r0, r4
 8003a04:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003a06:	930d      	str	r3, [sp, #52]	; 0x34
	if (HAL_ADC_ConfigChannel (&hadc1, &sConfig) != HAL_OK)
 8003a08:	f001 fb7a 	bl	8005100 <HAL_ADC_ConfigChannel>
 8003a0c:	b100      	cbz	r0, 8003a10 <main+0x230>
	while (1)
 8003a0e:	e7fe      	b.n	8003a0e <main+0x22e>
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003a10:	2306      	movs	r3, #6
	hiwdg.Instance = IWDG;
 8003a12:	4814      	ldr	r0, [pc, #80]	; (8003a64 <main+0x284>)
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8003a14:	4c14      	ldr	r4, [pc, #80]	; (8003a68 <main+0x288>)
 8003a16:	e9c0 4300 	strd	r4, r3, [r0]
	hiwdg.Init.Reload = 4095;
 8003a1a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8003a1e:	6083      	str	r3, [r0, #8]
	if (HAL_IWDG_Init (&hiwdg) != HAL_OK)
 8003a20:	f002 fd98 	bl	8006554 <HAL_IWDG_Init>
 8003a24:	b320      	cbz	r0, 8003a70 <main+0x290>
	while (1)
 8003a26:	e7fe      	b.n	8003a26 <main+0x246>
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40010800 	.word	0x40010800
 8003a30:	40010c00 	.word	0x40010c00
 8003a34:	10310000 	.word	0x10310000
 8003a38:	20000ae0 	.word	0x20000ae0
 8003a3c:	00061a80 	.word	0x00061a80
 8003a40:	20000dec 	.word	0x20000dec
 8003a44:	40013000 	.word	0x40013000
 8003a48:	20000a1c 	.word	0x20000a1c
 8003a4c:	40003800 	.word	0x40003800
 8003a50:	20000e44 	.word	0x20000e44
 8003a54:	20000c30 	.word	0x20000c30
 8003a58:	40013800 	.word	0x40013800
 8003a5c:	20000b9c 	.word	0x20000b9c
 8003a60:	40012400 	.word	0x40012400
 8003a64:	20000b34 	.word	0x20000b34
 8003a68:	40003000 	.word	0x40003000
 8003a6c:	40005400 	.word	0x40005400
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 8003a70:	4a75      	ldr	r2, [pc, #468]	; (8003c48 <main+0x468>)
	HAL_Delay (300);
 8003a72:	f44f 7096 	mov.w	r0, #300	; 0x12c
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 8003a76:	6853      	ldr	r3, [r2, #4]
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 8003a78:	2400      	movs	r4, #0
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP_Msk | DBGMCU_CR_DBG_WWDG_STOP_Msk;
 8003a7a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003a7e:	6053      	str	r3, [r2, #4]
	HAL_Delay (300);
 8003a80:	f001 faf0 	bl	8005064 <HAL_Delay>
	ssd1306_Init ();
 8003a84:	f000 f926 	bl	8003cd4 <ssd1306_Init>
	UC1609_Init (&hspi2, CS_GPIO_Port, CS_Pin, CD_GPIO_Port, CD_Pin, 0, 0);
 8003a88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <main+0x46c>)
 8003a90:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a94:	4619      	mov	r1, r3
 8003a96:	486e      	ldr	r0, [pc, #440]	; (8003c50 <main+0x470>)
 8003a98:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003a9c:	f7fc ff7e 	bl	800099c <UC1609_Init>
	wsInit (&htim2, TIM_CHANNEL_2);
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	486c      	ldr	r0, [pc, #432]	; (8003c54 <main+0x474>)
 8003aa4:	f001 fa68 	bl	8004f78 <wsInit>
	uartInit (&huart1);
 8003aa8:	486b      	ldr	r0, [pc, #428]	; (8003c58 <main+0x478>)
 8003aaa:	f000 fefd 	bl	80048a8 <uartInit>
	HAL_ADC_Start_DMA (&hadc1, (uint32_t*) &adc, 1);
 8003aae:	2201      	movs	r2, #1
 8003ab0:	496a      	ldr	r1, [pc, #424]	; (8003c5c <main+0x47c>)
 8003ab2:	486b      	ldr	r0, [pc, #428]	; (8003c60 <main+0x480>)
 8003ab4:	f001 fbde 	bl	8005274 <HAL_ADC_Start_DMA>
	RadioInit ();
 8003ab8:	f7ff fdb8 	bl	800362c <RadioInit>
	initLegalFreq ();
 8003abc:	f7ff f9e6 	bl	8002e8c <initLegalFreq>
	memset (nodes, 0, sizeof(nodes));
 8003ac0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4867      	ldr	r0, [pc, #412]	; (8003c64 <main+0x484>)
 8003ac8:	f004 f86c 	bl	8007ba4 <memset>
	loadNodeData ();
 8003acc:	f7fd f9aa 	bl	8000e24 <loadNodeData>
	defaultNodeSettings ();
 8003ad0:	f7ff f9c4 	bl	8002e5c <defaultNodeSettings>
	ShowLogo ();
 8003ad4:	f7fd fefc 	bl	80018d0 <ShowLogo>
	clearStrings ();
 8003ad8:	f7fd fa0c 	bl	8000ef4 <clearStrings>
	if (tryLoadSettings () == 1)
 8003adc:	f7fd fa66 	bl	8000fac <tryLoadSettings>
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	f000 80a5 	beq.w	8003c30 <main+0x450>
			sprintf (string[0], "Settings loaded");
 8003ae6:	4960      	ldr	r1, [pc, #384]	; (8003c68 <main+0x488>)
 8003ae8:	4860      	ldr	r0, [pc, #384]	; (8003c6c <main+0x48c>)
 8003aea:	f004 f911 	bl	8007d10 <strcpy>
			sprintf (string[1], "from flash");
 8003aee:	4960      	ldr	r1, [pc, #384]	; (8003c70 <main+0x490>)
 8003af0:	4860      	ldr	r0, [pc, #384]	; (8003c74 <main+0x494>)
	flag.lcdRefreshRequest = 1;
 8003af2:	4c61      	ldr	r4, [pc, #388]	; (8003c78 <main+0x498>)
			sprintf (string[2], "Using defaults");
 8003af4:	f004 f90c 	bl	8007d10 <strcpy>
	updateLcd ();
 8003af8:	f7fd fa0e 	bl	8000f18 <updateLcd>
	HAL_Delay (500);
 8003afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b00:	f001 fab0 	bl	8005064 <HAL_Delay>
	flag.lcdRefreshRequest = 1;
 8003b04:	7823      	ldrb	r3, [r4, #0]
	myRadio.alwaysRX = true;   //Always listen for AIR
 8003b06:	4d5d      	ldr	r5, [pc, #372]	; (8003c7c <main+0x49c>)
	flag.lcdRefreshRequest = 1;
 8003b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0c:	7023      	strb	r3, [r4, #0]
	myRadio.alwaysRX = true;   //Always listen for AIR
 8003b0e:	2301      	movs	r3, #1
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 8003b10:	2104      	movs	r1, #4
 8003b12:	484e      	ldr	r0, [pc, #312]	; (8003c4c <main+0x46c>)
	myRadio.alwaysRX = true;   //Always listen for AIR
 8003b14:	73eb      	strb	r3, [r5, #15]
	if (HAL_GPIO_ReadPin (B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 8003b16:	f002 f8b3 	bl	8005c80 <HAL_GPIO_ReadPin>
 8003b1a:	4e59      	ldr	r6, [pc, #356]	; (8003c80 <main+0x4a0>)
 8003b1c:	b908      	cbnz	r0, 8003b22 <main+0x342>
		screenMode = smModeSelect;
 8003b1e:	231d      	movs	r3, #29
 8003b20:	7033      	strb	r3, [r6, #0]
			HAL_IWDG_Refresh (&hiwdg);
 8003b22:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003ca0 <main+0x4c0>
			blinkProvider = HAL_GetTick () % 1000 > 500;
 8003b26:	4f57      	ldr	r7, [pc, #348]	; (8003c84 <main+0x4a4>)
			fastBlinkProvider = HAL_GetTick () % 70 > 35;
 8003b28:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8003ca4 <main+0x4c4>
			HAL_IWDG_Refresh (&hiwdg);
 8003b2c:	4648      	mov	r0, r9
 8003b2e:	f002 fd38 	bl	80065a2 <HAL_IWDG_Refresh>
			blinkProvider = HAL_GetTick () % 1000 > 500;
 8003b32:	f001 fa91 	bl	8005058 <HAL_GetTick>
 8003b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b3a:	fbb0 f2f3 	udiv	r2, r0, r3
 8003b3e:	fb02 0313 	mls	r3, r2, r3, r0
 8003b42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b46:	bf94      	ite	ls
 8003b48:	2300      	movls	r3, #0
 8003b4a:	2301      	movhi	r3, #1
 8003b4c:	703b      	strb	r3, [r7, #0]
			fastBlinkProvider = HAL_GetTick () % 70 > 35;
 8003b4e:	f001 fa83 	bl	8005058 <HAL_GetTick>
 8003b52:	2346      	movs	r3, #70	; 0x46
 8003b54:	fbb0 f2f3 	udiv	r2, r0, r3
 8003b58:	fb02 0313 	mls	r3, r2, r3, r0
 8003b5c:	2b23      	cmp	r3, #35	; 0x23
 8003b5e:	bf94      	ite	ls
 8003b60:	2300      	movls	r3, #0
 8003b62:	2301      	movhi	r3, #1
 8003b64:	f888 3000 	strb.w	r3, [r8]
			backButtonHoldRoutine ();
 8003b68:	f7ff fc90 	bl	800348c <backButtonHoldRoutine>
			halfSecondRoutine ();
 8003b6c:	f7ff fcb6 	bl	80034dc <halfSecondRoutine>
			secondRoutine ();
 8003b70:	f7ff fcd6 	bl	8003520 <secondRoutine>
			alarmRoutine ();
 8003b74:	f7fd fcfa 	bl	800156c <alarmRoutine>
			ledRoutine ();
 8003b78:	f7fd fe4c 	bl	8001814 <ledRoutine>
			airCounter ();
 8003b7c:	f7ff fd78 	bl	8003670 <airCounter>
			NetRoutine (&netHandler);
 8003b80:	4841      	ldr	r0, [pc, #260]	; (8003c88 <main+0x4a8>)
 8003b82:	f7fc fe5b 	bl	800083c <NetRoutine>
			SX127X_Routine (&myRadio);
 8003b86:	483d      	ldr	r0, [pc, #244]	; (8003c7c <main+0x49c>)
 8003b88:	f000 fdd0 	bl	800472c <SX127X_Routine>
			if (flag.lcdRefreshRequest)
 8003b8c:	7823      	ldrb	r3, [r4, #0]
 8003b8e:	0659      	lsls	r1, r3, #25
 8003b90:	d504      	bpl.n	8003b9c <main+0x3bc>
					flag.lcdRefreshRequest = 0;
 8003b92:	f36f 1386 	bfc	r3, #6, #1
 8003b96:	7023      	strb	r3, [r4, #0]
					lcdRoutine ();
 8003b98:	f7fd ff5e 	bl	8001a58 <lcdRoutine>
			if (myRadio.readBytes)
 8003b9c:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
 8003ba0:	b120      	cbz	r0, 8003bac <main+0x3cc>
					handleMessage (myRadio.readBytes);
 8003ba2:	f7fd fb85 	bl	80012b0 <handleMessage>
					myRadio.readBytes = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			if (flag.encDec)
 8003bac:	7823      	ldrb	r3, [r4, #0]
 8003bae:	079a      	lsls	r2, r3, #30
 8003bb0:	d504      	bpl.n	8003bbc <main+0x3dc>
					flag.encDec = 0;
 8003bb2:	f36f 0341 	bfc	r3, #1, #1
 8003bb6:	7023      	strb	r3, [r4, #0]
					button_left ();
 8003bb8:	f7ff fb10 	bl	80031dc <button_left>
			if (flag.encInc)
 8003bbc:	7823      	ldrb	r3, [r4, #0]
 8003bbe:	07d8      	lsls	r0, r3, #31
 8003bc0:	d504      	bpl.n	8003bcc <main+0x3ec>
					flag.encInc = 0;
 8003bc2:	f36f 0300 	bfc	r3, #0, #1
 8003bc6:	7023      	strb	r3, [r4, #0]
					button_right ();
 8003bc8:	f7ff f9b6 	bl	8002f38 <button_right>
			if (flag.encOk)
 8003bcc:	7823      	ldrb	r3, [r4, #0]
 8003bce:	0759      	lsls	r1, r3, #29
 8003bd0:	d504      	bpl.n	8003bdc <main+0x3fc>
					flag.encOk = 0;
 8003bd2:	f36f 0382 	bfc	r3, #2, #1
 8003bd6:	7023      	strb	r3, [r4, #0]
					button_ok ();
 8003bd8:	f7fe ffe2 	bl	8002ba0 <button_ok>
			if (flag.back == 1)
 8003bdc:	7823      	ldrb	r3, [r4, #0]
 8003bde:	071a      	lsls	r2, r3, #28
 8003be0:	d504      	bpl.n	8003bec <main+0x40c>
					flag.back = 0;
 8003be2:	f36f 03c3 	bfc	r3, #3, #1
 8003be6:	7023      	strb	r3, [r4, #0]
					button_back ();
 8003be8:	f7fd fef2 	bl	80019d0 <button_back>
			if (screenMode == smModeSelect)
 8003bec:	7833      	ldrb	r3, [r6, #0]
 8003bee:	2b1d      	cmp	r3, #29
 8003bf0:	d09c      	beq.n	8003b2c <main+0x34c>
			if (flag.uartGotMessage)
 8003bf2:	7863      	ldrb	r3, [r4, #1]
 8003bf4:	07d8      	lsls	r0, r3, #31
 8003bf6:	d504      	bpl.n	8003c02 <main+0x422>
					flag.uartGotMessage = 0;
 8003bf8:	f36f 0300 	bfc	r3, #0, #1
 8003bfc:	7063      	strb	r3, [r4, #1]
					uartReceiveHandler ();
 8003bfe:	f000 fe89 	bl	8004914 <uartReceiveHandler>
			if (flag.saveSettings)
 8003c02:	7823      	ldrb	r3, [r4, #0]
 8003c04:	06d9      	lsls	r1, r3, #27
 8003c06:	d504      	bpl.n	8003c12 <main+0x432>
					flag.saveSettings = 0;
 8003c08:	f36f 1304 	bfc	r3, #4, #1
 8003c0c:	7023      	strb	r3, [r4, #0]
					saveSettings ();
 8003c0e:	f7fd fa27 	bl	8001060 <saveSettings>
			if (flag.sendConfig)
 8003c12:	7823      	ldrb	r3, [r4, #0]
 8003c14:	069a      	lsls	r2, r3, #26
 8003c16:	d504      	bpl.n	8003c22 <main+0x442>
					flag.sendConfig = 0;
 8003c18:	f36f 1345 	bfc	r3, #5, #1
 8003c1c:	7023      	strb	r3, [r4, #0]
					sendConfig ();
 8003c1e:	f001 f86f 	bl	8004d00 <sendConfig>
			if (configStep)
 8003c22:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <main+0x4ac>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d080      	beq.n	8003b2c <main+0x34c>
					nodeConfigureRoutine ();
 8003c2a:	f7ff fcc3 	bl	80035b4 <nodeConfigureRoutine>
 8003c2e:	e77d      	b.n	8003b2c <main+0x34c>
			sprintf (string[0], "Failed to load");
 8003c30:	4917      	ldr	r1, [pc, #92]	; (8003c90 <main+0x4b0>)
 8003c32:	480e      	ldr	r0, [pc, #56]	; (8003c6c <main+0x48c>)
 8003c34:	f004 f86c 	bl	8007d10 <strcpy>
			sprintf (string[1], "settings from flash");
 8003c38:	4916      	ldr	r1, [pc, #88]	; (8003c94 <main+0x4b4>)
 8003c3a:	480e      	ldr	r0, [pc, #56]	; (8003c74 <main+0x494>)
 8003c3c:	f004 f868 	bl	8007d10 <strcpy>
			sprintf (string[2], "Using defaults");
 8003c40:	4915      	ldr	r1, [pc, #84]	; (8003c98 <main+0x4b8>)
 8003c42:	4816      	ldr	r0, [pc, #88]	; (8003c9c <main+0x4bc>)
 8003c44:	e755      	b.n	8003af2 <main+0x312>
 8003c46:	bf00      	nop
 8003c48:	e0042000 	.word	0xe0042000
 8003c4c:	40010c00 	.word	0x40010c00
 8003c50:	20000a1c 	.word	0x20000a1c
 8003c54:	20000e44 	.word	0x20000e44
 8003c58:	20000c30 	.word	0x20000c30
 8003c5c:	20000c90 	.word	0x20000c90
 8003c60:	20000b9c 	.word	0x20000b9c
 8003c64:	20000ce0 	.word	0x20000ce0
 8003c68:	080096b9 	.word	0x080096b9
 8003c6c:	20000168 	.word	0x20000168
 8003c70:	080096e1 	.word	0x080096e1
 8003c74:	200001a8 	.word	0x200001a8
 8003c78:	20000b4c 	.word	0x20000b4c
 8003c7c:	20000998 	.word	0x20000998
 8003c80:	20000162 	.word	0x20000162
 8003c84:	20000de8 	.word	0x20000de8
 8003c88:	20000e8c 	.word	0x20000e8c
 8003c8c:	20000b99 	.word	0x20000b99
 8003c90:	080096c9 	.word	0x080096c9
 8003c94:	080096d8 	.word	0x080096d8
 8003c98:	080096ec 	.word	0x080096ec
 8003c9c:	200001e8 	.word	0x200001e8
 8003ca0:	20000b34 	.word	0x20000b34
 8003ca4:	20000b48 	.word	0x20000b48

08003ca8 <Error_Handler>:
	while (1)
 8003ca8:	e7fe      	b.n	8003ca8 <Error_Handler>
	...

08003cac <ssd1306_WriteCommand>:
uint8_t buffer[SSD1306_HEIGHT * SSD1306_WIDTH / 8];
uint16_t cursor = 0;
//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command) {
 8003cac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003cae:	2301      	movs	r3, #1
 8003cb0:	220a      	movs	r2, #10
 8003cb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003cb6:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t command) {
 8003cba:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003cbe:	9200      	str	r2, [sp, #0]
 8003cc0:	2178      	movs	r1, #120	; 0x78
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4802      	ldr	r0, [pc, #8]	; (8003cd0 <ssd1306_WriteCommand+0x24>)
 8003cc6:	f002 fa77 	bl	80061b8 <HAL_I2C_Mem_Write>
}
 8003cca:	b007      	add	sp, #28
 8003ccc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cd0:	20000ae0 	.word	0x20000ae0

08003cd4 <ssd1306_Init>:

//
//	Initialize the oled screen
//
void ssd1306_Init(void) {
 8003cd4:	b508      	push	{r3, lr}

	// Wait for the screen to boot
	HAL_Delay(100);
 8003cd6:	2064      	movs	r0, #100	; 0x64
 8003cd8:	f001 f9c4 	bl	8005064 <HAL_Delay>

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8003cdc:	20ae      	movs	r0, #174	; 0xae
 8003cde:	f7ff ffe5 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8003ce2:	2020      	movs	r0, #32
 8003ce4:	f7ff ffe2 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003ce8:	2010      	movs	r0, #16
 8003cea:	f7ff ffdf 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003cee:	20b0      	movs	r0, #176	; 0xb0
 8003cf0:	f7ff ffdc 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8003cf4:	20c8      	movs	r0, #200	; 0xc8
 8003cf6:	f7ff ffd9 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //---set low column address
 8003cfa:	2000      	movs	r0, #0
 8003cfc:	f7ff ffd6 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //---set high column address
 8003d00:	2010      	movs	r0, #16
 8003d02:	f7ff ffd3 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); //--set start line address
 8003d06:	2040      	movs	r0, #64	; 0x40
 8003d08:	f7ff ffd0 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8003d0c:	2081      	movs	r0, #129	; 0x81
 8003d0e:	f7ff ffcd 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8003d12:	20ff      	movs	r0, #255	; 0xff
 8003d14:	f7ff ffca 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8003d18:	20a1      	movs	r0, #161	; 0xa1
 8003d1a:	f7ff ffc7 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8003d1e:	20a6      	movs	r0, #166	; 0xa6
 8003d20:	f7ff ffc4 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8003d24:	20a8      	movs	r0, #168	; 0xa8
 8003d26:	f7ff ffc1 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x3F); //
 8003d2a:	203f      	movs	r0, #63	; 0x3f
 8003d2c:	f7ff ffbe 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003d30:	20a4      	movs	r0, #164	; 0xa4
 8003d32:	f7ff ffbb 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8003d36:	20d3      	movs	r0, #211	; 0xd3
 8003d38:	f7ff ffb8 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7ff ffb5 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8003d42:	20d5      	movs	r0, #213	; 0xd5
 8003d44:	f7ff ffb2 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8003d48:	20f0      	movs	r0, #240	; 0xf0
 8003d4a:	f7ff ffaf 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8003d4e:	20d9      	movs	r0, #217	; 0xd9
 8003d50:	f7ff ffac 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8003d54:	2022      	movs	r0, #34	; 0x22
 8003d56:	f7ff ffa9 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8003d5a:	20da      	movs	r0, #218	; 0xda
 8003d5c:	f7ff ffa6 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x12);
 8003d60:	2012      	movs	r0, #18
 8003d62:	f7ff ffa3 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8003d66:	20db      	movs	r0, #219	; 0xdb
 8003d68:	f7ff ffa0 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003d6c:	2020      	movs	r0, #32
 8003d6e:	f7ff ff9d 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003d72:	208d      	movs	r0, #141	; 0x8d
 8003d74:	f7ff ff9a 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 8003d78:	2014      	movs	r0, #20
 8003d7a:	f7ff ff97 	bl	8003cac <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
}
 8003d7e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8003d82:	20af      	movs	r0, #175	; 0xaf
 8003d84:	f7ff bf92 	b.w	8003cac <ssd1306_WriteCommand>

08003d88 <ssd1306_GotoXY>:

void ssd1306_GotoXY(int x, int y) {
	cursor = SSD1306_WIDTH * y + x;
 8003d88:	4b02      	ldr	r3, [pc, #8]	; (8003d94 <ssd1306_GotoXY+0xc>)
 8003d8a:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
 8003d8e:	8018      	strh	r0, [r3, #0]
}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000370 	.word	0x20000370

08003d98 <ssd1306_PutRuC>:

void ssd1306_PutRuC(char *c) {
 8003d98:	b570      	push	{r4, r5, r6, lr}

	uint8_t pos;
	if (*c == 0xD0)
 8003d9a:	7803      	ldrb	r3, [r0, #0]
 8003d9c:	2bd0      	cmp	r3, #208	; 0xd0
 8003d9e:	d111      	bne.n	8003dc4 <ssd1306_PutRuC+0x2c>
		pos = *(c + 1) - 144 + 101;
 8003da0:	7843      	ldrb	r3, [r0, #1]
 8003da2:	3b2b      	subs	r3, #43	; 0x2b
	else if (*c == 0xD1)
		pos = *(c + 1) - 128 + 149;
	else
		return;
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 8003da4:	490a      	ldr	r1, [pc, #40]	; (8003dd0 <ssd1306_PutRuC+0x38>)
 8003da6:	4c0b      	ldr	r4, [pc, #44]	; (8003dd4 <ssd1306_PutRuC+0x3c>)
		pos = *(c + 1) - 128 + 149;
 8003da8:	b2db      	uxtb	r3, r3
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 8003daa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dae:	880a      	ldrh	r2, [r1, #0]
 8003db0:	4809      	ldr	r0, [pc, #36]	; (8003dd8 <ssd1306_PutRuC+0x40>)
 8003db2:	191e      	adds	r6, r3, r4
 8003db4:	58e3      	ldr	r3, [r4, r3]
 8003db6:	1815      	adds	r5, r2, r0
 8003db8:	5013      	str	r3, [r2, r0]
 8003dba:	7933      	ldrb	r3, [r6, #4]
	cursor += 5;
 8003dbc:	3205      	adds	r2, #5
	memcpy(buffer + cursor, &myFont[pos][0], 5);
 8003dbe:	712b      	strb	r3, [r5, #4]
	cursor += 5;
 8003dc0:	800a      	strh	r2, [r1, #0]
}
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
	else if (*c == 0xD1)
 8003dc4:	2bd1      	cmp	r3, #209	; 0xd1
 8003dc6:	d1fc      	bne.n	8003dc2 <ssd1306_PutRuC+0x2a>
		pos = *(c + 1) - 128 + 149;
 8003dc8:	7843      	ldrb	r3, [r0, #1]
 8003dca:	3315      	adds	r3, #21
 8003dcc:	e7ea      	b.n	8003da4 <ssd1306_PutRuC+0xc>
 8003dce:	bf00      	nop
 8003dd0:	20000370 	.word	0x20000370
 8003dd4:	080097a8 	.word	0x080097a8
 8003dd8:	2000038a 	.word	0x2000038a

08003ddc <ssd1306_Put>:

void ssd1306_Put(char c) {
 8003ddc:	b570      	push	{r4, r5, r6, lr}
	memcpy(buffer + cursor, &myFont[c - 0x20][0], 5);
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <ssd1306_Put+0x24>)
 8003de0:	4c08      	ldr	r4, [pc, #32]	; (8003e04 <ssd1306_Put+0x28>)
 8003de2:	3820      	subs	r0, #32
 8003de4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003de8:	8813      	ldrh	r3, [r2, #0]
 8003dea:	4907      	ldr	r1, [pc, #28]	; (8003e08 <ssd1306_Put+0x2c>)
 8003dec:	1906      	adds	r6, r0, r4
 8003dee:	5820      	ldr	r0, [r4, r0]
 8003df0:	185d      	adds	r5, r3, r1
 8003df2:	5058      	str	r0, [r3, r1]
 8003df4:	7931      	ldrb	r1, [r6, #4]
	cursor += 5;
 8003df6:	3305      	adds	r3, #5
	memcpy(buffer + cursor, &myFont[c - 0x20][0], 5);
 8003df8:	7129      	strb	r1, [r5, #4]
	cursor += 5;
 8003dfa:	8013      	strh	r3, [r2, #0]
}
 8003dfc:	bd70      	pop	{r4, r5, r6, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000370 	.word	0x20000370
 8003e04:	080097a8 	.word	0x080097a8
 8003e08:	2000038a 	.word	0x2000038a

08003e0c <ssd1306_PutString>:

void ssd1306_PutString(char *c) {
 8003e0c:	b538      	push	{r3, r4, r5, lr}
 8003e0e:	4604      	mov	r4, r0
		if (*c == 0xD0 || *c == 0xD1) {
			ssd1306_PutRuC(c);
			c += 2;
		} else
			ssd1306_Put(*c++);
		cursor++;
 8003e10:	4d0a      	ldr	r5, [pc, #40]	; (8003e3c <ssd1306_PutString+0x30>)
	while (*c) {
 8003e12:	7820      	ldrb	r0, [r4, #0]
 8003e14:	b900      	cbnz	r0, 8003e18 <ssd1306_PutString+0xc>
	}
}
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
		if (*c == 0xD0 || *c == 0xD1) {
 8003e18:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d807      	bhi.n	8003e32 <ssd1306_PutString+0x26>
			ssd1306_PutRuC(c);
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7ff ffb8 	bl	8003d98 <ssd1306_PutRuC>
			c += 2;
 8003e28:	3402      	adds	r4, #2
		cursor++;
 8003e2a:	882b      	ldrh	r3, [r5, #0]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	802b      	strh	r3, [r5, #0]
 8003e30:	e7ef      	b.n	8003e12 <ssd1306_PutString+0x6>
			ssd1306_Put(*c++);
 8003e32:	3401      	adds	r4, #1
 8003e34:	f7ff ffd2 	bl	8003ddc <ssd1306_Put>
 8003e38:	e7f7      	b.n	8003e2a <ssd1306_PutString+0x1e>
 8003e3a:	bf00      	nop
 8003e3c:	20000370 	.word	0x20000370

08003e40 <ssd1306_Clean>:

void ssd1306_Clean(void) {
 8003e40:	f44f 6380 	mov.w	r3, #1024	; 0x400
	uint16_t i;
	for (i = 0; i < SSD1306_HEIGHT * SSD1306_WIDTH / 8; i++)
		buffer[i] = 0;
 8003e44:	2100      	movs	r1, #0
 8003e46:	4a04      	ldr	r2, [pc, #16]	; (8003e58 <ssd1306_Clean+0x18>)
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < SSD1306_HEIGHT * SSD1306_WIDTH / 8; i++)
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f9      	bne.n	8003e48 <ssd1306_Clean+0x8>
}
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	2000038a 	.word	0x2000038a

08003e5c <ssd1306_Update>:

void ssd1306_Update(void) {
 8003e5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003e5e:	24b0      	movs	r4, #176	; 0xb0
 8003e60:	4d0f      	ldr	r5, [pc, #60]	; (8003ea0 <ssd1306_Update+0x44>)

	for (j = 0; j < 8; j++) {
		ssd1306_WriteCommand(0xB0 + j);
		ssd1306_WriteCommand(0x00);
		ssd1306_WriteCommand(0x10);
		HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer + j * 128,
 8003e62:	4e10      	ldr	r6, [pc, #64]	; (8003ea4 <ssd1306_Update+0x48>)
		ssd1306_WriteCommand(0xB0 + j);
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff ff21 	bl	8003cac <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8003e6a:	2000      	movs	r0, #0
 8003e6c:	f7ff ff1e 	bl	8003cac <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 8003e70:	2010      	movs	r0, #16
 8003e72:	f7ff ff1b 	bl	8003cac <ssd1306_WriteCommand>
		HAL_I2C_Mem_Write(&hi2c1, SSD1306_I2C_ADDR, 0x40, 1, buffer + j * 128,
 8003e76:	2380      	movs	r3, #128	; 0x80
 8003e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e7c:	3401      	adds	r4, #1
 8003e7e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003e82:	9500      	str	r5, [sp, #0]
 8003e84:	2301      	movs	r3, #1
 8003e86:	2240      	movs	r2, #64	; 0x40
 8003e88:	2178      	movs	r1, #120	; 0x78
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	b2e4      	uxtb	r4, r4
 8003e8e:	f002 f993 	bl	80061b8 <HAL_I2C_Mem_Write>
	for (j = 0; j < 8; j++) {
 8003e92:	2cb8      	cmp	r4, #184	; 0xb8
 8003e94:	f105 0580 	add.w	r5, r5, #128	; 0x80
 8003e98:	d1e4      	bne.n	8003e64 <ssd1306_Update+0x8>
				128, 1000);

	}
}
 8003e9a:	b004      	add	sp, #16
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
 8003e9e:	bf00      	nop
 8003ea0:	2000038a 	.word	0x2000038a
 8003ea4:	20000ae0 	.word	0x20000ae0

08003ea8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003ea8:	4b0e      	ldr	r3, [pc, #56]	; (8003ee4 <HAL_MspInit+0x3c>)
{
 8003eaa:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	619a      	str	r2, [r3, #24]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	f002 0201 	and.w	r2, r2, #1
 8003eba:	9200      	str	r2, [sp, #0]
 8003ebc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ec4:	61da      	str	r2, [r3, #28]
 8003ec6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ec8:	4a07      	ldr	r2, [pc, #28]	; (8003ee8 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003ed2:	6853      	ldr	r3, [r2, #4]
 8003ed4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003edc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ede:	b002      	add	sp, #8
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40010000 	.word	0x40010000

08003eec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eec:	b530      	push	{r4, r5, lr}
 8003eee:	4605      	mov	r5, r0
 8003ef0:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef2:	2210      	movs	r2, #16
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	a802      	add	r0, sp, #8
 8003ef8:	f003 fe54 	bl	8007ba4 <memset>
  if(hadc->Instance==ADC1)
 8003efc:	682a      	ldr	r2, [r5, #0]
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <HAL_ADC_MspInit+0x84>)
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d133      	bne.n	8003f6c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f04:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003f08:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0a:	481a      	ldr	r0, [pc, #104]	; (8003f74 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f10:	619a      	str	r2, [r3, #24]
 8003f12:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f14:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f16:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003f1a:	9200      	str	r2, [sp, #0]
 8003f1c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1e:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003f20:	4c15      	ldr	r4, [pc, #84]	; (8003f78 <HAL_ADC_MspInit+0x8c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f22:	f042 0204 	orr.w	r2, r2, #4
 8003f26:	619a      	str	r2, [r3, #24]
 8003f28:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f2a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2c:	f003 0304 	and.w	r3, r3, #4
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f3a:	f001 fdc5 	bl	8005ac8 <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f3e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f42:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f46:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003f48:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003f4c:	2220      	movs	r2, #32
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f4e:	490b      	ldr	r1, [pc, #44]	; (8003f7c <HAL_ADC_MspInit+0x90>)
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f50:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f52:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8003f56:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003f5a:	e9c4 2306 	strd	r2, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003f5e:	f001 fb23 	bl	80055a8 <HAL_DMA_Init>
 8003f62:	b108      	cbz	r0, 8003f68 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8003f64:	f7ff fea0 	bl	8003ca8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003f68:	622c      	str	r4, [r5, #32]
 8003f6a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f6c:	b007      	add	sp, #28
 8003f6e:	bd30      	pop	{r4, r5, pc}
 8003f70:	40012400 	.word	0x40012400
 8003f74:	40010800 	.word	0x40010800
 8003f78:	20000c94 	.word	0x20000c94
 8003f7c:	40020008 	.word	0x40020008

08003f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f80:	b510      	push	{r4, lr}
 8003f82:	4604      	mov	r4, r0
 8003f84:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f86:	2210      	movs	r2, #16
 8003f88:	2100      	movs	r1, #0
 8003f8a:	a802      	add	r0, sp, #8
 8003f8c:	f003 fe0a 	bl	8007ba4 <memset>
  if(hi2c->Instance==I2C1)
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <HAL_I2C_MspInit+0x58>)
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d11c      	bne.n	8003fd2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f98:	4c10      	ldr	r4, [pc, #64]	; (8003fdc <HAL_I2C_MspInit+0x5c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f9a:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f9c:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f9e:	4810      	ldr	r0, [pc, #64]	; (8003fe0 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa0:	f043 0308 	orr.w	r3, r3, #8
 8003fa4:	61a3      	str	r3, [r4, #24]
 8003fa6:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fa8:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fb2:	2312      	movs	r3, #18
 8003fb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fbc:	f001 fd84 	bl	8005ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fc0:	69e3      	ldr	r3, [r4, #28]
 8003fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc6:	61e3      	str	r3, [r4, #28]
 8003fc8:	69e3      	ldr	r3, [r4, #28]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fce:	9301      	str	r3, [sp, #4]
 8003fd0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003fd2:	b006      	add	sp, #24
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40005400 	.word	0x40005400
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40010c00 	.word	0x40010c00

08003fe4 <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe4:	2210      	movs	r2, #16
{
 8003fe6:	b510      	push	{r4, lr}
 8003fe8:	4604      	mov	r4, r0
 8003fea:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	eb0d 0002 	add.w	r0, sp, r2
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	f003 fdd7 	bl	8007ba4 <memset>
  if(hspi->Instance==SPI1)
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	4a25      	ldr	r2, [pc, #148]	; (8004090 <HAL_SPI_MspInit+0xac>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d127      	bne.n	800404e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ffe:	4b25      	ldr	r3, [pc, #148]	; (8004094 <HAL_SPI_MspInit+0xb0>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004000:	21a0      	movs	r1, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004002:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004004:	4824      	ldr	r0, [pc, #144]	; (8004098 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004006:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800400a:	619a      	str	r2, [r3, #24]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004012:	9200      	str	r2, [sp, #0]
 8004014:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	f042 0204 	orr.w	r2, r2, #4
 800401c:	619a      	str	r2, [r3, #24]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004028:	2302      	movs	r3, #2
 800402a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800402e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004030:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004032:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004034:	f001 fd48 	bl	8005ac8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004038:	2040      	movs	r0, #64	; 0x40
 800403a:	2300      	movs	r3, #0
 800403c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	4815      	ldr	r0, [pc, #84]	; (8004098 <HAL_SPI_MspInit+0xb4>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004044:	a904      	add	r1, sp, #16
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004046:	f001 fd3f 	bl	8005ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800404a:	b008      	add	sp, #32
 800404c:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <HAL_SPI_MspInit+0xb8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d1fa      	bne.n	800404a <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004056:	4812      	ldr	r0, [pc, #72]	; (80040a0 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004058:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800405a:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 800405c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004060:	61da      	str	r2, [r3, #28]
 8004062:	69da      	ldr	r2, [r3, #28]
 8004064:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004068:	9202      	str	r2, [sp, #8]
 800406a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	f042 0208 	orr.w	r2, r2, #8
 8004072:	619a      	str	r2, [r3, #24]
 8004074:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004076:	f44f 4220 	mov.w	r2, #40960	; 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	9303      	str	r3, [sp, #12]
 8004080:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004082:	2302      	movs	r3, #2
 8004084:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004088:	2303      	movs	r3, #3
 800408a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800408c:	e7db      	b.n	8004046 <HAL_SPI_MspInit+0x62>
 800408e:	bf00      	nop
 8004090:	40013000 	.word	0x40013000
 8004094:	40021000 	.word	0x40021000
 8004098:	40010800 	.word	0x40010800
 800409c:	40003800 	.word	0x40003800
 80040a0:	40010c00 	.word	0x40010c00

080040a4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM2)
 80040a4:	6803      	ldr	r3, [r0, #0]
{
 80040a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(htim_pwm->Instance==TIM2)
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80040ac:	4605      	mov	r5, r0
  if(htim_pwm->Instance==TIM2)
 80040ae:	d128      	bne.n	8004102 <HAL_TIM_PWM_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80040b4:	69da      	ldr	r2, [r3, #28]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80040b6:	4c14      	ldr	r4, [pc, #80]	; (8004108 <HAL_TIM_PWM_MspInit+0x64>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040b8:	f042 0201 	orr.w	r2, r2, #1
 80040bc:	61da      	str	r2, [r3, #28]
 80040be:	69db      	ldr	r3, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040c0:	4a12      	ldr	r2, [pc, #72]	; (800410c <HAL_TIM_PWM_MspInit+0x68>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	9b01      	ldr	r3, [sp, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040ca:	2310      	movs	r3, #16
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80040cc:	2100      	movs	r1, #0
    hdma_tim2_ch2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040ce:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80040d2:	2380      	movs	r3, #128	; 0x80
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040d4:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80040d8:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80040e0:	f04f 0c20 	mov.w	ip, #32
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040e4:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80040e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80040ec:	4620      	mov	r0, r4
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80040ee:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80040f2:	f001 fa59 	bl	80055a8 <HAL_DMA_Init>
 80040f6:	b108      	cbz	r0, 80040fc <HAL_TIM_PWM_MspInit+0x58>
    {
      Error_Handler();
 80040f8:	f7ff fdd6 	bl	8003ca8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80040fc:	62ac      	str	r4, [r5, #40]	; 0x28
 80040fe:	6265      	str	r5, [r4, #36]	; 0x24
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8004100:	632c      	str	r4, [r5, #48]	; 0x30
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004102:	b003      	add	sp, #12
 8004104:	bd30      	pop	{r4, r5, pc}
 8004106:	bf00      	nop
 8004108:	20000b50 	.word	0x20000b50
 800410c:	40020080 	.word	0x40020080

08004110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004110:	b510      	push	{r4, lr}
 8004112:	4604      	mov	r4, r0
 8004114:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004116:	2210      	movs	r2, #16
 8004118:	2100      	movs	r1, #0
 800411a:	a802      	add	r0, sp, #8
 800411c:	f003 fd42 	bl	8007ba4 <memset>
  if(htim->Instance==TIM2)
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d112      	bne.n	800414e <HAL_TIM_MspPostInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004128:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800412c:	699a      	ldr	r2, [r3, #24]
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800412e:	4809      	ldr	r0, [pc, #36]	; (8004154 <HAL_TIM_MspPostInit+0x44>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004130:	f042 0204 	orr.w	r2, r2, #4
 8004134:	619a      	str	r2, [r3, #24]
 8004136:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004138:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004142:	2302      	movs	r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004144:	e9cd 3302 	strd	r3, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414a:	f001 fcbd 	bl	8005ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800414e:	b006      	add	sp, #24
 8004150:	bd10      	pop	{r4, pc}
 8004152:	bf00      	nop
 8004154:	40010800 	.word	0x40010800

08004158 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004158:	b530      	push	{r4, r5, lr}
 800415a:	4604      	mov	r4, r0
 800415c:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800415e:	2210      	movs	r2, #16
 8004160:	2100      	movs	r1, #0
 8004162:	a802      	add	r0, sp, #8
 8004164:	f003 fd1e 	bl	8007ba4 <memset>
  if(huart->Instance==USART1)
 8004168:	6822      	ldr	r2, [r4, #0]
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <HAL_UART_MspInit+0x80>)
 800416c:	429a      	cmp	r2, r3
 800416e:	d130      	bne.n	80041d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004170:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004174:	699a      	ldr	r2, [r3, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 8004178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800417c:	619a      	str	r2, [r3, #24]
 800417e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004180:	4816      	ldr	r0, [pc, #88]	; (80041dc <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004182:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004186:	9200      	str	r2, [sp, #0]
 8004188:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800418e:	f042 0204 	orr.w	r2, r2, #4
 8004192:	619a      	str	r2, [r3, #24]
 8004194:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004196:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	9301      	str	r3, [sp, #4]
 800419e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041a4:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041a8:	2303      	movs	r3, #3
 80041aa:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ac:	f001 fc8c 	bl	8005ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b4:	4809      	ldr	r0, [pc, #36]	; (80041dc <HAL_UART_MspInit+0x84>)
 80041b6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80041b8:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041bc:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041be:	f001 fc83 	bl	8005ac8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80041c2:	2025      	movs	r0, #37	; 0x25
 80041c4:	4622      	mov	r2, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f001 f998 	bl	80054fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041cc:	2025      	movs	r0, #37	; 0x25
 80041ce:	f001 f9c7 	bl	8005560 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80041d2:	b007      	add	sp, #28
 80041d4:	bd30      	pop	{r4, r5, pc}
 80041d6:	bf00      	nop
 80041d8:	40013800 	.word	0x40013800
 80041dc:	40010800 	.word	0x40010800

080041e0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041e0:	e7fe      	b.n	80041e0 <NMI_Handler>

080041e2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041e2:	e7fe      	b.n	80041e2 <HardFault_Handler>

080041e4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041e4:	e7fe      	b.n	80041e4 <MemManage_Handler>

080041e6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041e6:	e7fe      	b.n	80041e6 <BusFault_Handler>

080041e8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041e8:	e7fe      	b.n	80041e8 <UsageFault_Handler>

080041ea <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041ea:	4770      	bx	lr

080041ec <DebugMon_Handler>:
 80041ec:	4770      	bx	lr

080041ee <PendSV_Handler>:
 80041ee:	4770      	bx	lr

080041f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041f0:	f000 bf26 	b.w	8005040 <HAL_IncTick>

080041f4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80041f4:	2002      	movs	r0, #2
 80041f6:	f001 bd4f 	b.w	8005c98 <HAL_GPIO_EXTI_IRQHandler>

080041fa <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80041fa:	2004      	movs	r0, #4
 80041fc:	f001 bd4c 	b.w	8005c98 <HAL_GPIO_EXTI_IRQHandler>

08004200 <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <DMA1_Channel7_IRQHandler+0x8>)
 8004202:	f001 ba9f 	b.w	8005744 <HAL_DMA_IRQHandler>
 8004206:	bf00      	nop
 8004208:	20000b50 	.word	0x20000b50

0800420c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <USART1_IRQHandler+0x8>)
 800420e:	f003 bb5f 	b.w	80078d0 <HAL_UART_IRQHandler>
 8004212:	bf00      	nop
 8004214:	20000c30 	.word	0x20000c30

08004218 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004218:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800421a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800421e:	f001 fd3b 	bl	8005c98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004222:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004226:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800422a:	f001 bd35 	b.w	8005c98 <HAL_GPIO_EXTI_IRQHandler>

0800422e <SX127X_SetNSS>:
 */
#include "main.h"

#ifndef USE_LL
__weak void SX127X_SetNSS(SX127X_t *module, GPIO_PinState state)
{
 800422e:	460a      	mov	r2, r1
	HAL_GPIO_WritePin(module->nss.port, module->nss.pin, state);
 8004230:	f8b0 106c 	ldrh.w	r1, [r0, #108]	; 0x6c
 8004234:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8004236:	f001 bd29 	b.w	8005c8c <HAL_GPIO_WritePin>

0800423a <SX127X_Reset>:
}

__weak void SX127X_Reset(SX127X_t *module)
{
 800423a:	b510      	push	{r4, lr}
 800423c:	4604      	mov	r4, r0
	SX127X_SetNSS(module, 1);
 800423e:	2101      	movs	r1, #1
 8004240:	f7ff fff5 	bl	800422e <SX127X_SetNSS>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 8004244:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8004248:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800424a:	2200      	movs	r2, #0
 800424c:	f001 fd1e 	bl	8005c8c <HAL_GPIO_WritePin>

	SX127X_delayMicro(1000);

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8004250:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 8004254:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004256:	2201      	movs	r2, #1

	SX127X_delayMicro(6000);
}
 8004258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 800425c:	f001 bd16 	b.w	8005c8c <HAL_GPIO_WritePin>

08004260 <SX127X_SPICommand>:

__weak void SX127X_SPICommand(SX127X_t *module, uint8_t cmd)
{
 8004260:	b513      	push	{r0, r1, r4, lr}
 8004262:	4604      	mov	r4, r0
 8004264:	f88d 1007 	strb.w	r1, [sp, #7]
	SX127X_SetNSS(module, 0);
 8004268:	2100      	movs	r1, #0
 800426a:	f7ff ffe0 	bl	800422e <SX127X_SetNSS>
	HAL_SPI_Transmit(module->spi, &cmd, 1, 1000);
 800426e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004272:	2201      	movs	r2, #1
 8004274:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004276:	f10d 0107 	add.w	r1, sp, #7
 800427a:	f002 fd5f 	bl	8006d3c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(module->spi) != HAL_SPI_STATE_READY)
 800427e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004280:	f002 fef8 	bl	8007074 <HAL_SPI_GetState>
 8004284:	2801      	cmp	r0, #1
 8004286:	d1fa      	bne.n	800427e <SX127X_SPICommand+0x1e>
		;
}
 8004288:	b002      	add	sp, #8
 800428a:	bd10      	pop	{r4, pc}

0800428c <SX127X_SPIReadByte>:

__weak uint8_t SX127X_SPIReadByte(SX127X_t *module)
{
 800428c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t txByte = 0x00;
 800428e:	2100      	movs	r1, #0
{
 8004290:	4604      	mov	r4, r0
	uint8_t txByte = 0x00;
 8004292:	f88d 100e 	strb.w	r1, [sp, #14]
	uint8_t rxByte = 0x00;
 8004296:	f88d 100f 	strb.w	r1, [sp, #15]

	SX127X_SetNSS(module, 0);
 800429a:	f7ff ffc8 	bl	800422e <SX127X_SetNSS>
	HAL_SPI_TransmitReceive(module->spi, &txByte, &rxByte, 1, 1000);
 800429e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042a2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	f10d 020f 	add.w	r2, sp, #15
 80042aa:	2301      	movs	r3, #1
 80042ac:	f10d 010e 	add.w	r1, sp, #14
 80042b0:	f002 fdf1 	bl	8006e96 <HAL_SPI_TransmitReceive>
	return rxByte;
}
 80042b4:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80042b8:	b004      	add	sp, #16
 80042ba:	bd10      	pop	{r4, pc}

080042bc <SX127X_SPIRead>:
//////////////////////////////////
// logic
//////////////////////////////////

uint8_t SX127X_SPIRead(SX127X_t *module, uint8_t addr)
{
 80042bc:	b538      	push	{r3, r4, r5, lr}
 80042be:	4604      	mov	r4, r0
	uint8_t tmp;
	SX127X_SPICommand(module, addr);
 80042c0:	f7ff ffce 	bl	8004260 <SX127X_SPICommand>
	tmp = SX127X_SPIReadByte(module);
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff ffe1 	bl	800428c <SX127X_SPIReadByte>
 80042ca:	4605      	mov	r5, r0
	SX127X_SetNSS(module, 1);
 80042cc:	2101      	movs	r1, #1
 80042ce:	4620      	mov	r0, r4
 80042d0:	f7ff ffad 	bl	800422e <SX127X_SetNSS>
	return tmp;
}
 80042d4:	4628      	mov	r0, r5
 80042d6:	bd38      	pop	{r3, r4, r5, pc}

080042d8 <SX127X_SPIWrite>:

void SX127X_SPIWrite(SX127X_t *module, uint8_t addr, uint8_t cmd)
{
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	4604      	mov	r4, r0
 80042dc:	460e      	mov	r6, r1
 80042de:	4615      	mov	r5, r2
	SX127X_SetNSS(module, 0);
 80042e0:	2100      	movs	r1, #0
 80042e2:	f7ff ffa4 	bl	800422e <SX127X_SetNSS>
	SX127X_SPICommand(module, addr | 0x80);
 80042e6:	4620      	mov	r0, r4
 80042e8:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 80042ec:	f7ff ffb8 	bl	8004260 <SX127X_SPICommand>
	SX127X_SPICommand(module, cmd);
 80042f0:	4629      	mov	r1, r5
 80042f2:	4620      	mov	r0, r4
 80042f4:	f7ff ffb4 	bl	8004260 <SX127X_SPICommand>
	SX127X_SetNSS(module, 1);
 80042f8:	2101      	movs	r1, #1
 80042fa:	4620      	mov	r0, r4
 80042fc:	f7ff ff97 	bl	800422e <SX127X_SetNSS>
}
 8004300:	bd70      	pop	{r4, r5, r6, pc}

08004302 <SX127X_SPIBurstRead>:

void SX127X_SPIBurstRead(SX127X_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length)
{
	uint8_t i;
	if (length <= 1)
 8004302:	2b01      	cmp	r3, #1
{
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004306:	4606      	mov	r6, r0
 8004308:	460f      	mov	r7, r1
 800430a:	4615      	mov	r5, r2
 800430c:	461c      	mov	r4, r3
	if (length <= 1)
 800430e:	d915      	bls.n	800433c <SX127X_SPIBurstRead+0x3a>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 8004310:	2100      	movs	r1, #0
 8004312:	f7ff ff8c 	bl	800422e <SX127X_SetNSS>
		SX127X_SPICommand(module, addr);
 8004316:	4639      	mov	r1, r7
 8004318:	4630      	mov	r0, r6
 800431a:	f7ff ffa1 	bl	8004260 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 800431e:	3c01      	subs	r4, #1
 8004320:	b2e4      	uxtb	r4, r4
 8004322:	1e6f      	subs	r7, r5, #1
 8004324:	442c      	add	r4, r5
		{
			*(rxBuf + i) = SX127X_SPIReadByte(module);
 8004326:	4630      	mov	r0, r6
 8004328:	f7ff ffb0 	bl	800428c <SX127X_SPIReadByte>
 800432c:	f807 0f01 	strb.w	r0, [r7, #1]!
		for (i = 0; i < length; i++)
 8004330:	42a7      	cmp	r7, r4
 8004332:	d1f8      	bne.n	8004326 <SX127X_SPIBurstRead+0x24>
		}
		SX127X_SetNSS(module, 1);
 8004334:	2101      	movs	r1, #1
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff ff79 	bl	800422e <SX127X_SetNSS>
	}
}
 800433c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800433e <SX127X_SPIBurstWrite>:

void SX127X_SPIBurstWrite(SX127X_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length)
{
	unsigned char i;
	if (length <= 1)
 800433e:	2b01      	cmp	r3, #1
{
 8004340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004342:	4606      	mov	r6, r0
 8004344:	460f      	mov	r7, r1
 8004346:	4615      	mov	r5, r2
 8004348:	461c      	mov	r4, r3
	if (length <= 1)
 800434a:	d916      	bls.n	800437a <SX127X_SPIBurstWrite+0x3c>
		return;
	else
	{
		SX127X_SetNSS(module, 0);
 800434c:	2100      	movs	r1, #0
 800434e:	f7ff ff6e 	bl	800422e <SX127X_SetNSS>
		SX127X_SPICommand(module, addr | 0x80);
 8004352:	f047 0180 	orr.w	r1, r7, #128	; 0x80
 8004356:	4630      	mov	r0, r6
 8004358:	f7ff ff82 	bl	8004260 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 800435c:	3c01      	subs	r4, #1
 800435e:	b2e4      	uxtb	r4, r4
 8004360:	1e6f      	subs	r7, r5, #1
 8004362:	442c      	add	r4, r5
		{
			SX127X_SPICommand(module, *(txBuf + i));
 8004364:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8004368:	4630      	mov	r0, r6
 800436a:	f7ff ff79 	bl	8004260 <SX127X_SPICommand>
		for (i = 0; i < length; i++)
 800436e:	42a7      	cmp	r7, r4
 8004370:	d1f8      	bne.n	8004364 <SX127X_SPIBurstWrite+0x26>
		}
		SX127X_SetNSS(module, 1);
 8004372:	2101      	movs	r1, #1
 8004374:	4630      	mov	r0, r6
 8004376:	f7ff ff5a 	bl	800422e <SX127X_SetNSS>
	}
}
 800437a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800437c <SX127X_defaultConfig>:
	module->cr = SX127X_CR_4_8;
	module->crcEnable = 1;
	module->frequency = SX127X_FREQ_DEFAULT;
	module->implicitHeader = 1;
	module->len = 3;
	module->power = SX127X_POWER_20DBM;
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <SX127X_defaultConfig+0x18>)
 800437e:	4a06      	ldr	r2, [pc, #24]	; (8004398 <SX127X_defaultConfig+0x1c>)
 8004380:	e9c0 2300 	strd	r2, r3, [r0]
	module->len = 3;
 8004384:	f240 1303 	movw	r3, #259	; 0x103
 8004388:	8103      	strh	r3, [r0, #8]
	module->implicitHeader = 1;
 800438a:	2301      	movs	r3, #1
 800438c:	7283      	strb	r3, [r0, #10]
	module->preamble = 5;
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <SX127X_defaultConfig+0x20>)
 8004390:	60c3      	str	r3, [r0, #12]
	module->sf = SX127X_LORA_SF_12;
	module->syncWord = 0x1;
	module->alwaysRX = 1;
}
 8004392:	4770      	bx	lr
 8004394:	04070c14 	.word	0x04070c14
 8004398:	00d94024 	.word	0x00d94024
 800439c:	01010005 	.word	0x01010005

080043a0 <SX127X_PortConfig>:

void SX127X_PortConfig(SX127X_t *module, SX127X_dio_t reset, SX127X_dio_t nss,
		SPI_HandleTypeDef *hspi)
{
 80043a0:	b082      	sub	sp, #8
 80043a2:	b513      	push	{r0, r1, r4, lr}
 80043a4:	4604      	mov	r4, r0
 80043a6:	4668      	mov	r0, sp
 80043a8:	e880 0006 	stmia.w	r0, {r1, r2}
 80043ac:	9305      	str	r3, [sp, #20]
	module->reset = reset;
 80043ae:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80043b2:	c803      	ldmia	r0, {r0, r1}
 80043b4:	e883 0005 	stmia.w	r3, {r0, r2}
	module->nss = nss;
 80043b8:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 80043bc:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80043c0:	e883 0003 	stmia.w	r3, {r0, r1}
	module->spi = hspi;
 80043c4:	9b07      	ldr	r3, [sp, #28]
 80043c6:	6763      	str	r3, [r4, #116]	; 0x74
}
 80043c8:	b002      	add	sp, #8
 80043ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ce:	b002      	add	sp, #8
 80043d0:	4770      	bx	lr
	...

080043d4 <SX127X_standby>:

void SX127X_standby(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 80043d4:	6802      	ldr	r2, [r0, #0]
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <SX127X_standby+0x1c>)
{
 80043d8:	b510      	push	{r4, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 80043da:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x89);
 80043dc:	bf94      	ite	ls
 80043de:	2289      	movls	r2, #137	; 0x89
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 80043e0:	2281      	movhi	r2, #129	; 0x81
 80043e2:	2101      	movs	r1, #1
{
 80043e4:	4604      	mov	r4, r0
		SX127X_SPIWrite(module, LR_RegOpMode, 0x81);
 80043e6:	f7ff ff77 	bl	80042d8 <SX127X_SPIWrite>
	module->status = STANDBY;
 80043ea:	2302      	movs	r3, #2
 80043ec:	7423      	strb	r3, [r4, #16]
}
 80043ee:	bd10      	pop	{r4, pc}
 80043f0:	00834015 	.word	0x00834015

080043f4 <SX127X_sleep>:

void SX127X_sleep(SX127X_t *module)
{
	if (module->frequency < SX127X_FREQ_525MHZ)
 80043f4:	6802      	ldr	r2, [r0, #0]
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <SX127X_sleep+0x1c>)
{
 80043f8:	b510      	push	{r4, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 80043fa:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x88);
 80043fc:	bf94      	ite	ls
 80043fe:	2288      	movls	r2, #136	; 0x88
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004400:	2280      	movhi	r2, #128	; 0x80
 8004402:	2101      	movs	r1, #1
{
 8004404:	4604      	mov	r4, r0
		SX127X_SPIWrite(module, LR_RegOpMode, 0x80);
 8004406:	f7ff ff67 	bl	80042d8 <SX127X_SPIWrite>
	module->status = SLEEP;
 800440a:	2301      	movs	r3, #1
 800440c:	7423      	strb	r3, [r4, #16]
}
 800440e:	bd10      	pop	{r4, pc}
 8004410:	00834015 	.word	0x00834015

08004414 <SX127X_config>:
{
 8004414:	b510      	push	{r4, lr}
 8004416:	4604      	mov	r4, r0
	SX127X_sleep(module); //Change modem mode Must in Sleep mode
 8004418:	f7ff ffec 	bl	80043f4 <SX127X_sleep>
	SX127X_SPIWrite(module, LR_RegFrMsb, (module->frequency >> 16) & 0xFF);
 800441c:	2106      	movs	r1, #6
 800441e:	4620      	mov	r0, r4
 8004420:	78a2      	ldrb	r2, [r4, #2]
 8004422:	f7ff ff59 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrMid, (module->frequency >> 8) & 0xFF);
 8004426:	2107      	movs	r1, #7
 8004428:	4620      	mov	r0, r4
 800442a:	7862      	ldrb	r2, [r4, #1]
 800442c:	f7ff ff54 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegFrLsb, (module->frequency) & 0xFF);
 8004430:	2108      	movs	r1, #8
 8004432:	4620      	mov	r0, r4
 8004434:	7822      	ldrb	r2, [r4, #0]
 8004436:	f7ff ff4f 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPaConfig, 0xF0 | (module->power - 5)); //Setting output power parameter
 800443a:	7922      	ldrb	r2, [r4, #4]
 800443c:	2109      	movs	r1, #9
 800443e:	3a05      	subs	r2, #5
 8004440:	f062 020f 	orn	r2, r2, #15
 8004444:	4620      	mov	r0, r4
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	f7ff ff46 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegOcp, 0x32);	//OCP to 150 mA
 800444c:	2232      	movs	r2, #50	; 0x32
 800444e:	210b      	movs	r1, #11
 8004450:	4620      	mov	r0, r4
 8004452:	f7ff ff41 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegLna, 0x23);	//LNA to full gain
 8004456:	2223      	movs	r2, #35	; 0x23
 8004458:	210c      	movs	r1, #12
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff ff3c 	bl	80042d8 <SX127X_SPIWrite>
			(module->cr << 1)) +         //Coding rate
 8004460:	79e2      	ldrb	r2, [r4, #7]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004462:	79a3      	ldrb	r3, [r4, #6]
			(module->cr << 1)) +         //Coding rate
 8004464:	0052      	lsls	r2, r2, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004466:	eb02 1203 	add.w	r2, r2, r3, lsl #4
			(module->implicitHeader & 1)); //Implicit header flag
 800446a:	7aa3      	ldrb	r3, [r4, #10]
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 800446c:	211d      	movs	r1, #29
			(module->implicitHeader & 1)); //Implicit header flag
 800446e:	f003 0301 	and.w	r3, r3, #1
	SX127X_SPIWrite(module, LR_RegModemConfig1, ((module->bw << 4) + //Bandwidth
 8004472:	441a      	add	r2, r3
 8004474:	4620      	mov	r0, r4
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	f7ff ff2e 	bl	80042d8 <SX127X_SPIWrite>
			(module->crcEnable << 2) +     //CRC enable flag
 800447c:	7a62      	ldrb	r2, [r4, #9]
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 800447e:	7963      	ldrb	r3, [r4, #5]
			(module->crcEnable << 2) +     //CRC enable flag
 8004480:	0092      	lsls	r2, r2, #2
	SX127X_SPIWrite(module, LR_RegModemConfig2, ((module->sf << 4) + //Spreading factor
 8004482:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8004486:	3203      	adds	r2, #3
 8004488:	211e      	movs	r1, #30
 800448a:	4620      	mov	r0, r4
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	f7ff ff23 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSymbTimeoutLsb, 0xFF); //RX symb Timeout = 0x3FF(Max)
 8004492:	22ff      	movs	r2, #255	; 0xff
 8004494:	211f      	movs	r1, #31
 8004496:	4620      	mov	r0, r4
 8004498:	f7ff ff1e 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleMsb, (module->preamble >> 8) & 0xFF); //RegPreambleMsb
 800449c:	89a2      	ldrh	r2, [r4, #12]
 800449e:	2120      	movs	r1, #32
 80044a0:	4620      	mov	r0, r4
 80044a2:	0a12      	lsrs	r2, r2, #8
 80044a4:	f7ff ff18 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPreambleLsb, module->preamble & 0xFF); //RegPreambleLsb
 80044a8:	2121      	movs	r1, #33	; 0x21
 80044aa:	4620      	mov	r0, r4
 80044ac:	7b22      	ldrb	r2, [r4, #12]
 80044ae:	f7ff ff13 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //Payload lenght
 80044b2:	2122      	movs	r1, #34	; 0x22
 80044b4:	4620      	mov	r0, r4
 80044b6:	7a22      	ldrb	r2, [r4, #8]
 80044b8:	f7ff ff0e 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegSyncWord, module->syncWord);  //Sync word
 80044bc:	2139      	movs	r1, #57	; 0x39
 80044be:	4620      	mov	r0, r4
 80044c0:	7ba2      	ldrb	r2, [r4, #14]
 80044c2:	f7ff ff09 	bl	80042d8 <SX127X_SPIWrite>
	module->readBytes = 0;
 80044c6:	2300      	movs	r3, #0
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 80044c8:	2142      	movs	r1, #66	; 0x42
	module->readBytes = 0;
 80044ca:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 80044ce:	4620      	mov	r0, r4
 80044d0:	f7ff fef4 	bl	80042bc <SX127X_SPIRead>
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 80044d4:	79a3      	ldrb	r3, [r4, #6]
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 80044d6:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	if (module->bw == SX127X_LORA_BW_500KHZ && module->revision == 0x12)
 80044da:	2b09      	cmp	r3, #9
 80044dc:	d123      	bne.n	8004526 <SX127X_config+0x112>
 80044de:	2812      	cmp	r0, #18
 80044e0:	d121      	bne.n	8004526 <SX127X_config+0x112>
				&& module->frequency < SX127X_FREQ_1020MHZ)
 80044e2:	6823      	ldr	r3, [r4, #0]
		if (module->frequency > SX127X_FREQ_820MHZ
 80044e4:	4a12      	ldr	r2, [pc, #72]	; (8004530 <SX127X_config+0x11c>)
				&& module->frequency < SX127X_FREQ_1020MHZ)
 80044e6:	f5a3 034d 	sub.w	r3, r3, #13434880	; 0xcd0000
 80044ea:	3b23      	subs	r3, #35	; 0x23
		if (module->frequency > SX127X_FREQ_820MHZ
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d809      	bhi.n	8004504 <SX127X_config+0xf0>
			SX127X_SPIWrite(module, 0x36, 0x2);
 80044f0:	2202      	movs	r2, #2
 80044f2:	2136      	movs	r1, #54	; 0x36
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7ff feef 	bl	80042d8 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x64);
 80044fa:	2264      	movs	r2, #100	; 0x64
 80044fc:	213a      	movs	r1, #58	; 0x3a
 80044fe:	4620      	mov	r0, r4
 8004500:	f7ff feea 	bl	80042d8 <SX127X_SPIWrite>
				&& module->frequency < SX127X_FREQ_525MHZ)
 8004504:	6823      	ldr	r3, [r4, #0]
		if (module->frequency > SX127X_FREQ_410MHZ
 8004506:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <SX127X_config+0x120>)
				&& module->frequency < SX127X_FREQ_525MHZ)
 8004508:	f5a3 03cd 	sub.w	r3, r3, #6717440	; 0x668000
 800450c:	3b12      	subs	r3, #18
		if (module->frequency > SX127X_FREQ_410MHZ
 800450e:	4293      	cmp	r3, r2
 8004510:	d809      	bhi.n	8004526 <SX127X_config+0x112>
			SX127X_SPIWrite(module, 0x36, 0x3);
 8004512:	2203      	movs	r2, #3
 8004514:	2136      	movs	r1, #54	; 0x36
 8004516:	4620      	mov	r0, r4
 8004518:	f7ff fede 	bl	80042d8 <SX127X_SPIWrite>
			SX127X_SPIWrite(module, 0x3A, 0x7F);
 800451c:	227f      	movs	r2, #127	; 0x7f
 800451e:	213a      	movs	r1, #58	; 0x3a
 8004520:	4620      	mov	r0, r4
 8004522:	f7ff fed9 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_standby(module); //Entry standby mode
 8004526:	4620      	mov	r0, r4
}
 8004528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SX127X_standby(module); //Entry standby mode
 800452c:	f7ff bf52 	b.w	80043d4 <SX127X_standby>
 8004530:	00320006 	.word	0x00320006
 8004534:	001cc003 	.word	0x001cc003

08004538 <SX127X_clearIrq>:

void SX127X_clearIrq(SX127X_t *module)
{
	SX127X_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8004538:	22ff      	movs	r2, #255	; 0xff
 800453a:	2112      	movs	r1, #18
 800453c:	f7ff becc 	b.w	80042d8 <SX127X_SPIWrite>

08004540 <SX127X_startRx>:
}

int SX127X_startRx(SX127X_t *module, uint32_t timeout)
{
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4604      	mov	r4, r0
 8004544:	460d      	mov	r5, r1
	uint8_t addr;
	SX127X_config(module);		//Setting base parameter
 8004546:	f7ff ff65 	bl	8004414 <SX127X_config>
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800454a:	2284      	movs	r2, #132	; 0x84
 800454c:	214d      	movs	r1, #77	; 0x4d
 800454e:	4620      	mov	r0, r4
 8004550:	f7ff fec2 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00);	//No FHSS
 8004554:	2200      	movs	r2, #0
 8004556:	2124      	movs	r1, #36	; 0x24
 8004558:	4620      	mov	r0, r4
 800455a:	f7ff febd 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 800455e:	4620      	mov	r0, r4
 8004560:	f7ff ffea 	bl	8004538 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len);
 8004564:	7a22      	ldrb	r2, [r4, #8]
 8004566:	2122      	movs	r1, #34	; 0x22
 8004568:	4620      	mov	r0, r4
 800456a:	f7ff feb5 	bl	80042d8 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800456e:	210f      	movs	r1, #15
 8004570:	4620      	mov	r0, r4
 8004572:	f7ff fea3 	bl	80042bc <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8004576:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8004578:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800457a:	4620      	mov	r0, r4
 800457c:	f7ff feac 	bl	80042d8 <SX127X_SPIWrite>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004580:	6822      	ldr	r2, [r4, #0]
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <SX127X_startRx+0x8c>)
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 8004584:	2101      	movs	r1, #1
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004586:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8d);	//Cont RX Mode & LF
 8004588:	bf94      	ite	ls
 800458a:	228d      	movls	r2, #141	; 0x8d
		SX127X_SPIWrite(module, LR_RegOpMode, 0x85);	    //Cont RX Mode & HF
 800458c:	2285      	movhi	r2, #133	; 0x85
 800458e:	4620      	mov	r0, r4
 8004590:	f7ff fea2 	bl	80042d8 <SX127X_SPIWrite>
	module->readBytes = 0;
 8004594:	2300      	movs	r3, #0
 8004596:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	while (1)
	{
		uint8_t status = SX127X_SPIRead(module, LR_RegModemStat);
 800459a:	2118      	movs	r1, #24
 800459c:	4620      	mov	r0, r4
 800459e:	f7ff fe8d 	bl	80042bc <SX127X_SPIRead>
		if (status & 0x04)
 80045a2:	0743      	lsls	r3, r0, #29
 80045a4:	d503      	bpl.n	80045ae <SX127X_startRx+0x6e>
		{	//Rx-on going RegModemStat
			module->status = RX;
 80045a6:	2304      	movs	r3, #4
			return 1;
 80045a8:	2001      	movs	r0, #1
			module->status = RX;
 80045aa:	7423      	strb	r3, [r4, #16]
			return 0;
		}

		HAL_Delay(1);
	}
}
 80045ac:	bd38      	pop	{r3, r4, r5, pc}
		if (--timeout == 0)
 80045ae:	3d01      	subs	r5, #1
 80045b0:	d107      	bne.n	80045c2 <SX127X_startRx+0x82>
			SX127X_Reset(module);
 80045b2:	4620      	mov	r0, r4
 80045b4:	f7ff fe41 	bl	800423a <SX127X_Reset>
			SX127X_config(module);
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff ff2b 	bl	8004414 <SX127X_config>
			return 0;
 80045be:	4628      	mov	r0, r5
 80045c0:	e7f4      	b.n	80045ac <SX127X_startRx+0x6c>
		HAL_Delay(1);
 80045c2:	2001      	movs	r0, #1
 80045c4:	f000 fd4e 	bl	8005064 <HAL_Delay>
	{
 80045c8:	e7e7      	b.n	800459a <SX127X_startRx+0x5a>
 80045ca:	bf00      	nop
 80045cc:	00834015 	.word	0x00834015

080045d0 <SX127X_receive>:

uint8_t SX127X_receive(SX127X_t *module)
{
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4604      	mov	r4, r0
	unsigned char addr;
	unsigned char packet_size;
	memset(module->rxBuf, 0x00, SX127X_MAX_PACKET);
 80045d4:	f100 061d 	add.w	r6, r0, #29
 80045d8:	2220      	movs	r2, #32
 80045da:	2100      	movs	r1, #0
 80045dc:	4630      	mov	r0, r6
 80045de:	f003 fae1 	bl	8007ba4 <memset>

	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80045e2:	2110      	movs	r1, #16
 80045e4:	4620      	mov	r0, r4
 80045e6:	f7ff fe69 	bl	80042bc <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80045ea:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80045ec:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80045ee:	4620      	mov	r0, r4
 80045f0:	f7ff fe72 	bl	80042d8 <SX127X_SPIWrite>
	if (module->sf == SX127X_LORA_SF_6)
 80045f4:	7963      	ldrb	r3, [r4, #5]
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d10a      	bne.n	8004610 <SX127X_receive+0x40>
		packet_size = module->len;
 80045fa:	7a25      	ldrb	r5, [r4, #8]
	else
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
	SX127X_SPIBurstRead(module, 0x00, module->rxBuf, packet_size);
 80045fc:	4620      	mov	r0, r4
 80045fe:	462b      	mov	r3, r5
 8004600:	4632      	mov	r2, r6
 8004602:	2100      	movs	r1, #0
 8004604:	f7ff fe7d 	bl	8004302 <SX127X_SPIBurstRead>
	module->readBytes = packet_size;
	return module->readBytes;
}
 8004608:	4628      	mov	r0, r5
	module->readBytes = packet_size;
 800460a:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
}
 800460e:	bd70      	pop	{r4, r5, r6, pc}
		packet_size = SX127X_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8004610:	2113      	movs	r1, #19
 8004612:	4620      	mov	r0, r4
 8004614:	f7ff fe52 	bl	80042bc <SX127X_SPIRead>
 8004618:	4605      	mov	r5, r0
 800461a:	e7ef      	b.n	80045fc <SX127X_receive+0x2c>

0800461c <SX127X_startTransmission>:

void SX127X_startTransmission(SX127X_t *module)
{
 800461c:	b510      	push	{r4, lr}
 800461e:	4604      	mov	r4, r0
	uint8_t addr;
	SX127X_config(module); //setting base parameter
 8004620:	f7ff fef8 	bl	8004414 <SX127X_config>
	module->status = TX;
 8004624:	2303      	movs	r3, #3
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8004626:	2287      	movs	r2, #135	; 0x87
	module->status = TX;
 8004628:	7423      	strb	r3, [r4, #16]
	SX127X_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800462a:	214d      	movs	r1, #77	; 0x4d
 800462c:	4620      	mov	r0, r4
 800462e:	f7ff fe53 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8004632:	2200      	movs	r2, #0
 8004634:	2124      	movs	r1, #36	; 0x24
 8004636:	4620      	mov	r0, r4
 8004638:	f7ff fe4e 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_clearIrq(module);
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff ff7b 	bl	8004538 <SX127X_clearIrq>
	SX127X_SPIWrite(module, LR_RegPayloadLength, module->len); //RegPayloadLength 21byte
 8004642:	7a22      	ldrb	r2, [r4, #8]
 8004644:	2122      	movs	r1, #34	; 0x22
 8004646:	4620      	mov	r0, r4
 8004648:	f7ff fe46 	bl	80042d8 <SX127X_SPIWrite>
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 800464c:	210e      	movs	r1, #14
 800464e:	4620      	mov	r0, r4
 8004650:	f7ff fe34 	bl	80042bc <SX127X_SPIRead>
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004654:	210d      	movs	r1, #13
	addr = SX127X_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8004656:	4602      	mov	r2, r0
	SX127X_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8004658:	4620      	mov	r0, r4
 800465a:	f7ff fe3d 	bl	80042d8 <SX127X_SPIWrite>
	SX127X_SPIBurstWrite(module, 0x00, module->txBuf, module->len);
 800465e:	2100      	movs	r1, #0
 8004660:	7a23      	ldrb	r3, [r4, #8]
 8004662:	f104 023d 	add.w	r2, r4, #61	; 0x3d
 8004666:	4620      	mov	r0, r4
 8004668:	f7ff fe69 	bl	800433e <SX127X_SPIBurstWrite>
	module->lastTransTick = HAL_GetTick();
 800466c:	f000 fcf4 	bl	8005058 <HAL_GetTick>
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004670:	6822      	ldr	r2, [r4, #0]
 8004672:	4b06      	ldr	r3, [pc, #24]	; (800468c <SX127X_startTransmission+0x70>)
	module->lastTransTick = HAL_GetTick();
 8004674:	6160      	str	r0, [r4, #20]
	if (module->frequency < SX127X_FREQ_525MHZ)
 8004676:	429a      	cmp	r2, r3
		SX127X_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode LF
 8004678:	bf94      	ite	ls
 800467a:	228b      	movls	r2, #139	; 0x8b
	else
		SX127X_SPIWrite(module, LR_RegOpMode, 0x83);	//Tx Mode HF
 800467c:	2283      	movhi	r2, #131	; 0x83
 800467e:	2101      	movs	r1, #1
 8004680:	4620      	mov	r0, r4
 8004682:	f7ff fe29 	bl	80042d8 <SX127X_SPIWrite>
	module->TXrequest = 0;
 8004686:	2300      	movs	r3, #0
 8004688:	7463      	strb	r3, [r4, #17]

}
 800468a:	bd10      	pop	{r4, pc}
 800468c:	00834015 	.word	0x00834015

08004690 <SX127X_transmitAsync>:

HAL_StatusTypeDef SX127X_transmitAsync(SX127X_t *module, uint8_t lenght)
{
 8004690:	4603      	mov	r3, r0
	if (module->TXrequest == 0 && module->status != TX)
 8004692:	7c40      	ldrb	r0, [r0, #17]
 8004694:	b930      	cbnz	r0, 80046a4 <SX127X_transmitAsync+0x14>
 8004696:	7c1a      	ldrb	r2, [r3, #16]
 8004698:	2a03      	cmp	r2, #3
 800469a:	d003      	beq.n	80046a4 <SX127X_transmitAsync+0x14>
	{
		module->len = lenght;
		module->TXrequest = 1;
 800469c:	2201      	movs	r2, #1
		module->len = lenght;
 800469e:	7219      	strb	r1, [r3, #8]
		module->TXrequest = 1;
 80046a0:	745a      	strb	r2, [r3, #17]

		return HAL_OK;
 80046a2:	4770      	bx	lr
	}
	else
		return HAL_ERROR;
 80046a4:	2001      	movs	r0, #1
}
 80046a6:	4770      	bx	lr

080046a8 <SX127X_RSSI>:
		module->status = UNINITIALISED;
	}
}

int16_t SX127X_RSSI(SX127X_t *module)
{
 80046a8:	b508      	push	{r3, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 80046aa:	6802      	ldr	r2, [r0, #0]
 80046ac:	4b06      	ldr	r3, [pc, #24]	; (80046c8 <SX127X_RSSI+0x20>)
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 164;
 80046ae:	211b      	movs	r1, #27
	if (module->frequency < SX127X_FREQ_525MHZ)
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d804      	bhi.n	80046be <SX127X_RSSI+0x16>
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 164;
 80046b4:	f7ff fe02 	bl	80042bc <SX127X_SPIRead>
 80046b8:	38a4      	subs	r0, #164	; 0xa4
	else
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 157;
 80046ba:	b200      	sxth	r0, r0
}
 80046bc:	bd08      	pop	{r3, pc}
		return (int16_t) SX127X_SPIRead(module, LR_RegRssiValue) - 157;
 80046be:	f7ff fdfd 	bl	80042bc <SX127X_SPIRead>
 80046c2:	389d      	subs	r0, #157	; 0x9d
 80046c4:	e7f9      	b.n	80046ba <SX127X_RSSI+0x12>
 80046c6:	bf00      	nop
 80046c8:	00834015 	.word	0x00834015

080046cc <SX127X_RSSI_Pack>:

int16_t SX127X_RSSI_Pack(SX127X_t *module)
{
 80046cc:	b508      	push	{r3, lr}
	if (module->frequency < SX127X_FREQ_525MHZ)
 80046ce:	6802      	ldr	r2, [r0, #0]
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <SX127X_RSSI_Pack+0x20>)
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 164;
 80046d2:	211a      	movs	r1, #26
	if (module->frequency < SX127X_FREQ_525MHZ)
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d804      	bhi.n	80046e2 <SX127X_RSSI_Pack+0x16>
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 164;
 80046d8:	f7ff fdf0 	bl	80042bc <SX127X_SPIRead>
 80046dc:	38a4      	subs	r0, #164	; 0xa4
	else
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 157;
 80046de:	b200      	sxth	r0, r0
}
 80046e0:	bd08      	pop	{r3, pc}
		return (int16_t) SX127X_SPIRead(module, LR_RegPktRssiValue) - 157;
 80046e2:	f7ff fdeb 	bl	80042bc <SX127X_SPIRead>
 80046e6:	389d      	subs	r0, #157	; 0x9d
 80046e8:	e7f9      	b.n	80046de <SX127X_RSSI_Pack+0x12>
 80046ea:	bf00      	nop
 80046ec:	00834015 	.word	0x00834015

080046f0 <SX127X_readStatus>:
	else
		return -ret;
}

void SX127X_readStatus(SX127X_t *module)
{
 80046f0:	b510      	push	{r4, lr}
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 80046f2:	2118      	movs	r1, #24
{
 80046f4:	4604      	mov	r4, r0
	module->modemStatus = SX127X_SPIRead(module, LR_RegModemStat);
 80046f6:	f7ff fde1 	bl	80042bc <SX127X_SPIRead>
 80046fa:	f884 005f 	strb.w	r0, [r4, #95]	; 0x5f
	if (module->modemStatus & MODEM_STATUS_SIG_DET)
 80046fe:	f010 0001 	ands.w	r0, r0, #1
 8004702:	d008      	beq.n	8004716 <SX127X_readStatus+0x26>
	{
		module->signalDetected = true;
 8004704:	2301      	movs	r3, #1
 8004706:	7723      	strb	r3, [r4, #28]
		module->lastSignalTick = HAL_GetTick();
 8004708:	f000 fca6 	bl	8005058 <HAL_GetTick>
 800470c:	61a0      	str	r0, [r4, #24]
		module->watchdogTick = HAL_GetTick();
 800470e:	f000 fca3 	bl	8005058 <HAL_GetTick>
 8004712:	67e0      	str	r0, [r4, #124]	; 0x7c
	}
	else
		module->signalDetected = false;
}
 8004714:	bd10      	pop	{r4, pc}
		module->signalDetected = false;
 8004716:	7720      	strb	r0, [r4, #28]
}
 8004718:	e7fc      	b.n	8004714 <SX127X_readStatus+0x24>

0800471a <SX127X_readIrq>:

void SX127X_readIrq(SX127X_t *module)
{
 800471a:	b510      	push	{r4, lr}
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 800471c:	2112      	movs	r1, #18
{
 800471e:	4604      	mov	r4, r0
	module->irq = SX127X_SPIRead(module, LR_RegIrqFlags);
 8004720:	f7ff fdcc 	bl	80042bc <SX127X_SPIRead>
 8004724:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
}
 8004728:	bd10      	pop	{r4, pc}
	...

0800472c <SX127X_Routine>:
{
 800472c:	b510      	push	{r4, lr}
 800472e:	4604      	mov	r4, r0
	SX127X_readStatus(module);
 8004730:	f7ff ffde 	bl	80046f0 <SX127X_readStatus>
	SX127X_readIrq(module);
 8004734:	4620      	mov	r0, r4
 8004736:	f7ff fff0 	bl	800471a <SX127X_readIrq>
	if (module->status == UNINITIALISED)
 800473a:	7c23      	ldrb	r3, [r4, #16]
 800473c:	b92b      	cbnz	r3, 800474a <SX127X_Routine+0x1e>
		SX127X_Reset(module);
 800473e:	4620      	mov	r0, r4
 8004740:	f7ff fd7b 	bl	800423a <SX127X_Reset>
		SX127X_config(module);
 8004744:	4620      	mov	r0, r4
 8004746:	f7ff fe65 	bl	8004414 <SX127X_config>
	if ((module->status == SLEEP || module->status == STANDBY)
 800474a:	7c23      	ldrb	r3, [r4, #16]
 800474c:	3b01      	subs	r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d806      	bhi.n	8004760 <SX127X_Routine+0x34>
			&& module->alwaysRX)
 8004752:	7be3      	ldrb	r3, [r4, #15]
 8004754:	b123      	cbz	r3, 8004760 <SX127X_Routine+0x34>
		SX127X_startRx(module, 1000);
 8004756:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800475a:	4620      	mov	r0, r4
 800475c:	f7ff fef0 	bl	8004540 <SX127X_startRx>
	if (module->TXrequest && (module->modemStatus & MODEM_STATUS_SIG_DET) == 0)
 8004760:	7c63      	ldrb	r3, [r4, #17]
 8004762:	b133      	cbz	r3, 8004772 <SX127X_Routine+0x46>
 8004764:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8004768:	07d8      	lsls	r0, r3, #31
 800476a:	d402      	bmi.n	8004772 <SX127X_Routine+0x46>
		SX127X_startTransmission(module);
 800476c:	4620      	mov	r0, r4
 800476e:	f7ff ff55 	bl	800461c <SX127X_startTransmission>
	SX127X_readIrq(module);
 8004772:	4620      	mov	r0, r4
 8004774:	f7ff ffd1 	bl	800471a <SX127X_readIrq>
	if (module->irq & IRQ_TX_DONE)
 8004778:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 800477c:	0719      	lsls	r1, r3, #28
 800477e:	d506      	bpl.n	800478e <SX127X_Routine+0x62>
		SX127X_clearIrq(module);
 8004780:	4620      	mov	r0, r4
 8004782:	f7ff fed9 	bl	8004538 <SX127X_clearIrq>
		SX127X_startRx(module, 100);
 8004786:	2164      	movs	r1, #100	; 0x64
 8004788:	4620      	mov	r0, r4
 800478a:	f7ff fed9 	bl	8004540 <SX127X_startRx>
	if (module->irq & IRQ_RX_DONE)
 800478e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8004792:	065a      	lsls	r2, r3, #25
 8004794:	d509      	bpl.n	80047aa <SX127X_Routine+0x7e>
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 8004796:	f3c3 1340 	ubfx	r3, r3, #5, #1
		SX127X_receive(module);
 800479a:	4620      	mov	r0, r4
		module->badCrc = (module->irq & IRQ_CRC_ERROR) >> 5;
 800479c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		SX127X_receive(module);
 80047a0:	f7ff ff16 	bl	80045d0 <SX127X_receive>
		SX127X_clearIrq(module);
 80047a4:	4620      	mov	r0, r4
 80047a6:	f7ff fec7 	bl	8004538 <SX127X_clearIrq>
	if (((SX127X_SPIRead(module, 0x1D)) != (module->bw << 4 | module->cr << 1 | module->implicitHeader))
 80047aa:	211d      	movs	r1, #29
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7ff fd85 	bl	80042bc <SX127X_SPIRead>
 80047b2:	79e3      	ldrb	r3, [r4, #7]
 80047b4:	79a2      	ldrb	r2, [r4, #6]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80047bc:	7aa2      	ldrb	r2, [r4, #10]
 80047be:	4313      	orrs	r3, r2
 80047c0:	4298      	cmp	r0, r3
 80047c2:	d00a      	beq.n	80047da <SX127X_Routine+0xae>
		module->wdCounter++;
 80047c4:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 80047c8:	3301      	adds	r3, #1
 80047ca:	f8a4 3080 	strh.w	r3, [r4, #128]	; 0x80
		module->watchdogTick = HAL_GetTick();
 80047ce:	f000 fc43 	bl	8005058 <HAL_GetTick>
		module->status = UNINITIALISED;
 80047d2:	2300      	movs	r3, #0
		module->watchdogTick = HAL_GetTick();
 80047d4:	67e0      	str	r0, [r4, #124]	; 0x7c
		module->status = UNINITIALISED;
 80047d6:	7423      	strb	r3, [r4, #16]
}
 80047d8:	bd10      	pop	{r4, pc}
			|| (HAL_GetTick() - module->watchdogTick > 120000)) //Watchdog
 80047da:	f000 fc3d 	bl	8005058 <HAL_GetTick>
 80047de:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80047e0:	1ac0      	subs	r0, r0, r3
 80047e2:	4b02      	ldr	r3, [pc, #8]	; (80047ec <SX127X_Routine+0xc0>)
 80047e4:	4298      	cmp	r0, r3
 80047e6:	d8ed      	bhi.n	80047c4 <SX127X_Routine+0x98>
 80047e8:	e7f6      	b.n	80047d8 <SX127X_Routine+0xac>
 80047ea:	bf00      	nop
 80047ec:	0001d4c0 	.word	0x0001d4c0

080047f0 <SX127X_init>:
{
	return SX127X_SPIRead(module, LR_RegWideBandRSSI);
}

void SX127X_init(SX127X_t *module)
{
 80047f0:	b510      	push	{r4, lr}
 80047f2:	4604      	mov	r4, r0

	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_RESET);
 80047f4:	f8b0 1064 	ldrh.w	r1, [r0, #100]	; 0x64
 80047f8:	2200      	movs	r2, #0
 80047fa:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80047fc:	f001 fa46 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8004800:	200f      	movs	r0, #15
 8004802:	f000 fc2f 	bl	8005064 <HAL_Delay>
	HAL_GPIO_WritePin(module->reset.port, module->reset.pin, GPIO_PIN_SET);
 8004806:	2201      	movs	r2, #1
 8004808:	f8b4 1064 	ldrh.w	r1, [r4, #100]	; 0x64
 800480c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800480e:	f001 fa3d 	bl	8005c8c <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8004812:	200f      	movs	r0, #15
 8004814:	f000 fc26 	bl	8005064 <HAL_Delay>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004818:	2142      	movs	r1, #66	; 0x42
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff fd4e 	bl	80042bc <SX127X_SPIRead>
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004820:	2142      	movs	r1, #66	; 0x42
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004822:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	module->revision = SX127X_SPIRead(module, REG_LR_VERSION);
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff fd48 	bl	80042bc <SX127X_SPIRead>
 800482c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
}
 8004830:	bd10      	pop	{r4, pc}

08004832 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004832:	b570      	push	{r4, r5, r6, lr}
 8004834:	460e      	mov	r6, r1
 8004836:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004838:	2500      	movs	r5, #0
 800483a:	42a5      	cmp	r5, r4
 800483c:	db01      	blt.n	8004842 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800483e:	4620      	mov	r0, r4
 8004840:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8004842:	f3af 8000 	nop.w
 8004846:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004848:	3501      	adds	r5, #1
 800484a:	e7f6      	b.n	800483a <_read+0x8>

0800484c <_close>:
}

int _close(int file)
{
	return -1;
}
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	4770      	bx	lr

08004852 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8004852:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8004856:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004858:	604b      	str	r3, [r1, #4]
}
 800485a:	4770      	bx	lr

0800485c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800485c:	2001      	movs	r0, #1
 800485e:	4770      	bx	lr

08004860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8004860:	2000      	movs	r0, #0
 8004862:	4770      	bx	lr

08004864 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <_sbrk+0x30>)
{
 8004866:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8004868:	6819      	ldr	r1, [r3, #0]
{
 800486a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800486c:	b909      	cbnz	r1, 8004872 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800486e:	490a      	ldr	r1, [pc, #40]	; (8004898 <_sbrk+0x34>)
 8004870:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	4909      	ldr	r1, [pc, #36]	; (800489c <_sbrk+0x38>)
 8004876:	4c0a      	ldr	r4, [pc, #40]	; (80048a0 <_sbrk+0x3c>)
 8004878:	4402      	add	r2, r0
 800487a:	1b09      	subs	r1, r1, r4
 800487c:	428a      	cmp	r2, r1
 800487e:	d906      	bls.n	800488e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8004880:	f003 f958 	bl	8007b34 <__errno>
 8004884:	230c      	movs	r3, #12
 8004886:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8004888:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800488c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800488e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8004890:	e7fc      	b.n	800488c <_sbrk+0x28>
 8004892:	bf00      	nop
 8004894:	20000374 	.word	0x20000374
 8004898:	200019e0 	.word	0x200019e0
 800489c:	20005000 	.word	0x20005000
 80048a0:	00000400 	.word	0x00000400

080048a4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80048a4:	4770      	bx	lr
	...

080048a8 <uartInit>:
uint8_t uartPos;
uint8_t len;
uint8_t nodeNum;

void uartInit() {
	HAL_UART_Receive_IT(&huart1, &uartIn, 1);
 80048a8:	2201      	movs	r2, #1
 80048aa:	4902      	ldr	r1, [pc, #8]	; (80048b4 <uartInit+0xc>)
 80048ac:	4802      	ldr	r0, [pc, #8]	; (80048b8 <uartInit+0x10>)
 80048ae:	f003 b928 	b.w	8007b02 <HAL_UART_Receive_IT>
 80048b2:	bf00      	nop
 80048b4:	20000b98 	.word	0x20000b98
 80048b8:	20000c30 	.word	0x20000c30

080048bc <readByte>:
}

void readByte(void) {
 80048bc:	b510      	push	{r4, lr}
	switch (uartIn) {
 80048be:	4b10      	ldr	r3, [pc, #64]	; (8004900 <readByte+0x44>)
 80048c0:	7819      	ldrb	r1, [r3, #0]
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <readByte+0x48>)
 80048c4:	293c      	cmp	r1, #60	; 0x3c
 80048c6:	d00b      	beq.n	80048e0 <readByte+0x24>
 80048c8:	293e      	cmp	r1, #62	; 0x3e
 80048ca:	4c0f      	ldr	r4, [pc, #60]	; (8004908 <readByte+0x4c>)
 80048cc:	d00b      	beq.n	80048e6 <readByte+0x2a>
		flag.uartGotMessage = 1;
		uartPos = 0;
		break;

	default:
		uartRx[uartPos++] = uartIn;
 80048ce:	7818      	ldrb	r0, [r3, #0]
 80048d0:	1c42      	adds	r2, r0, #1
 80048d2:	b2d2      	uxtb	r2, r2
		break;
	}
	if (uartPos > 126)
 80048d4:	2a7e      	cmp	r2, #126	; 0x7e
		uartRx[uartPos++] = uartIn;
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	5421      	strb	r1, [r4, r0]
	if (uartPos > 126)
 80048da:	d90f      	bls.n	80048fc <readByte+0x40>
		uartPos = 126;
 80048dc:	227e      	movs	r2, #126	; 0x7e
 80048de:	e000      	b.n	80048e2 <readByte+0x26>
		uartPos = 0;
 80048e0:	2200      	movs	r2, #0
		uartPos = 126;
 80048e2:	701a      	strb	r2, [r3, #0]
}
 80048e4:	e00a      	b.n	80048fc <readByte+0x40>
		len = uartPos;
 80048e6:	781a      	ldrb	r2, [r3, #0]
 80048e8:	4908      	ldr	r1, [pc, #32]	; (800490c <readByte+0x50>)
		flag.uartGotMessage = 1;
 80048ea:	4809      	ldr	r0, [pc, #36]	; (8004910 <readByte+0x54>)
		len = uartPos;
 80048ec:	700a      	strb	r2, [r1, #0]
		uartRx[uartPos] = 0;
 80048ee:	2100      	movs	r1, #0
 80048f0:	54a1      	strb	r1, [r4, r2]
		flag.uartGotMessage = 1;
 80048f2:	7842      	ldrb	r2, [r0, #1]
		uartPos = 0;
 80048f4:	7019      	strb	r1, [r3, #0]
		flag.uartGotMessage = 1;
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	7042      	strb	r2, [r0, #1]
}
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	bf00      	nop
 8004900:	20000b98 	.word	0x20000b98
 8004904:	200015c9 	.word	0x200015c9
 8004908:	200015cb 	.word	0x200015cb
 800490c:	2000164b 	.word	0x2000164b
 8004910:	20000b4c 	.word	0x20000b4c

08004914 <uartReceiveHandler>:

void uartReceiveHandler() {
 8004914:	b530      	push	{r4, r5, lr}
	char tempString[20];

	uint8_t l = len - 1;
 8004916:	4bbc      	ldr	r3, [pc, #752]	; (8004c08 <uartReceiveHandler+0x2f4>)
void uartReceiveHandler() {
 8004918:	b087      	sub	sp, #28
	uint8_t l = len - 1;
 800491a:	781c      	ldrb	r4, [r3, #0]
	uint8_t *ptr = uartRx + 1;

	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 800491c:	f000 fb9c 	bl	8005058 <HAL_GetTick>
 8004920:	4bba      	ldr	r3, [pc, #744]	; (8004c0c <uartReceiveHandler+0x2f8>)
 8004922:	4dbb      	ldr	r5, [pc, #748]	; (8004c10 <uartReceiveHandler+0x2fc>)
 8004924:	681b      	ldr	r3, [r3, #0]
	uint8_t l = len - 1;
 8004926:	3c01      	subs	r4, #1
	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 8004928:	1ac0      	subs	r0, r0, r3
 800492a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
		switch (uartRx[0]) {
 800492e:	782b      	ldrb	r3, [r5, #0]
	uint8_t l = len - 1;
 8004930:	b2e4      	uxtb	r4, r4
	if (HAL_GetTick() - configTime > 500) //First half second after node configuring saving incoming data into node var
 8004932:	f240 8183 	bls.w	8004c3c <uartReceiveHandler+0x328>
		switch (uartRx[0]) {
 8004936:	2b5a      	cmp	r3, #90	; 0x5a
 8004938:	d860      	bhi.n	80049fc <uartReceiveHandler+0xe8>
 800493a:	2b30      	cmp	r3, #48	; 0x30
 800493c:	d803      	bhi.n	8004946 <uartReceiveHandler+0x32>
			netHandler.connected = true;
			flag.lcdRefreshRequest = true;
			break;

		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) "//Bad Format", 10, 100);
 800493e:	2364      	movs	r3, #100	; 0x64
 8004940:	220a      	movs	r2, #10
 8004942:	49b4      	ldr	r1, [pc, #720]	; (8004c14 <uartReceiveHandler+0x300>)
 8004944:	e0d9      	b.n	8004afa <uartReceiveHandler+0x1e6>
 8004946:	3b31      	subs	r3, #49	; 0x31
 8004948:	2b29      	cmp	r3, #41	; 0x29
 800494a:	d8f8      	bhi.n	800493e <uartReceiveHandler+0x2a>
 800494c:	a201      	add	r2, pc, #4	; (adr r2, 8004954 <uartReceiveHandler+0x40>)
 800494e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004952:	bf00      	nop
 8004954:	08004a69 	.word	0x08004a69
 8004958:	08004a77 	.word	0x08004a77
 800495c:	08004a85 	.word	0x08004a85
 8004960:	08004a93 	.word	0x08004a93
 8004964:	08004abf 	.word	0x08004abf
 8004968:	0800493f 	.word	0x0800493f
 800496c:	0800493f 	.word	0x0800493f
 8004970:	08004aa3 	.word	0x08004aa3
 8004974:	08004ab1 	.word	0x08004ab1
 8004978:	0800493f 	.word	0x0800493f
 800497c:	0800493f 	.word	0x0800493f
 8004980:	0800493f 	.word	0x0800493f
 8004984:	0800493f 	.word	0x0800493f
 8004988:	0800493f 	.word	0x0800493f
 800498c:	0800493f 	.word	0x0800493f
 8004990:	0800493f 	.word	0x0800493f
 8004994:	0800493f 	.word	0x0800493f
 8004998:	0800493f 	.word	0x0800493f
 800499c:	08004ae3 	.word	0x08004ae3
 80049a0:	08004bd7 	.word	0x08004bd7
 80049a4:	0800493f 	.word	0x0800493f
 80049a8:	0800493f 	.word	0x0800493f
 80049ac:	0800493f 	.word	0x0800493f
 80049b0:	0800493f 	.word	0x0800493f
 80049b4:	08004bf1 	.word	0x08004bf1
 80049b8:	0800493f 	.word	0x0800493f
 80049bc:	08004bd7 	.word	0x08004bd7
 80049c0:	0800493f 	.word	0x0800493f
 80049c4:	0800493f 	.word	0x0800493f
 80049c8:	08004bd7 	.word	0x08004bd7
 80049cc:	0800493f 	.word	0x0800493f
 80049d0:	0800493f 	.word	0x0800493f
 80049d4:	0800493f 	.word	0x0800493f
 80049d8:	08004ad9 	.word	0x08004ad9
 80049dc:	08004acd 	.word	0x08004acd
 80049e0:	0800493f 	.word	0x0800493f
 80049e4:	0800493f 	.word	0x0800493f
 80049e8:	0800493f 	.word	0x0800493f
 80049ec:	0800493f 	.word	0x0800493f
 80049f0:	08004b45 	.word	0x08004b45
 80049f4:	0800493f 	.word	0x0800493f
 80049f8:	08004b2b 	.word	0x08004b2b
		switch (uartRx[0]) {
 80049fc:	3b65      	subs	r3, #101	; 0x65
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	2a15      	cmp	r2, #21
 8004a02:	d89c      	bhi.n	800493e <uartReceiveHandler+0x2a>
 8004a04:	2b15      	cmp	r3, #21
 8004a06:	d89a      	bhi.n	800493e <uartReceiveHandler+0x2a>
 8004a08:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <uartReceiveHandler+0xfc>)
 8004a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a0e:	bf00      	nop
 8004a10:	08004ba7 	.word	0x08004ba7
 8004a14:	0800493f 	.word	0x0800493f
 8004a18:	0800493f 	.word	0x0800493f
 8004a1c:	08004bd7 	.word	0x08004bd7
 8004a20:	0800493f 	.word	0x0800493f
 8004a24:	0800493f 	.word	0x0800493f
 8004a28:	0800493f 	.word	0x0800493f
 8004a2c:	0800493f 	.word	0x0800493f
 8004a30:	0800493f 	.word	0x0800493f
 8004a34:	0800493f 	.word	0x0800493f
 8004a38:	08004b77 	.word	0x08004b77
 8004a3c:	0800493f 	.word	0x0800493f
 8004a40:	08004b03 	.word	0x08004b03
 8004a44:	0800493f 	.word	0x0800493f
 8004a48:	0800493f 	.word	0x0800493f
 8004a4c:	0800493f 	.word	0x0800493f
 8004a50:	08004b63 	.word	0x08004b63
 8004a54:	0800493f 	.word	0x0800493f
 8004a58:	08004b17 	.word	0x08004b17
 8004a5c:	0800493f 	.word	0x0800493f
 8004a60:	08004b8b 	.word	0x08004b8b
 8004a64:	08004b4d 	.word	0x08004b4d
			settings.realFrequency = DecToInt(ptr, l);
 8004a68:	4621      	mov	r1, r4
 8004a6a:	486b      	ldr	r0, [pc, #428]	; (8004c18 <uartReceiveHandler+0x304>)
 8004a6c:	f7fc f8dc 	bl	8000c28 <DecToInt>
 8004a70:	4b6a      	ldr	r3, [pc, #424]	; (8004c1c <uartReceiveHandler+0x308>)
			break;
		}
	else {
		switch (uartRx[0]) {
		case UART_FREQUENCY:
			nodeSettings.realFrequency = DecToInt(ptr, l);
 8004a72:	6018      	str	r0, [r3, #0]
			break;
 8004a74:	e013      	b.n	8004a9e <uartReceiveHandler+0x18a>
			settings.sf = DecToInt(ptr, l);
 8004a76:	4621      	mov	r1, r4
 8004a78:	4867      	ldr	r0, [pc, #412]	; (8004c18 <uartReceiveHandler+0x304>)
 8004a7a:	f7fc f8d5 	bl	8000c28 <DecToInt>
 8004a7e:	4b67      	ldr	r3, [pc, #412]	; (8004c1c <uartReceiveHandler+0x308>)
		case UART_BW:
			nodeSettings.bw = DecToInt(ptr, l);
			break;

		case UART_SYNCWORD:
			nodeSettings.sw = HexToInt(ptr, l);
 8004a80:	7398      	strb	r0, [r3, #14]
			break;
 8004a82:	e00c      	b.n	8004a9e <uartReceiveHandler+0x18a>
			settings.bw = DecToInt(ptr, l);
 8004a84:	4621      	mov	r1, r4
 8004a86:	4864      	ldr	r0, [pc, #400]	; (8004c18 <uartReceiveHandler+0x304>)
 8004a88:	f7fc f8ce 	bl	8000c28 <DecToInt>
 8004a8c:	4b63      	ldr	r3, [pc, #396]	; (8004c1c <uartReceiveHandler+0x308>)
		case UART_CR:
			nodeSettings.cr = DecToInt(ptr, l);
			break;

		case UART_POWER:
			nodeSettings.power = DecToInt(ptr, l);
 8004a8e:	73d8      	strb	r0, [r3, #15]
			break;
 8004a90:	e005      	b.n	8004a9e <uartReceiveHandler+0x18a>
			settings.syncWord = HexToInt(ptr, l);
 8004a92:	4621      	mov	r1, r4
 8004a94:	4860      	ldr	r0, [pc, #384]	; (8004c18 <uartReceiveHandler+0x304>)
 8004a96:	f7fc f8df 	bl	8000c58 <HexToInt>
 8004a9a:	4b60      	ldr	r3, [pc, #384]	; (8004c1c <uartReceiveHandler+0x308>)
 8004a9c:	7458      	strb	r0, [r3, #17]
		default:
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
			break;
		}
	}
}
 8004a9e:	b007      	add	sp, #28
 8004aa0:	bd30      	pop	{r4, r5, pc}
			settings.preamble = DecToInt(ptr, l);
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	485c      	ldr	r0, [pc, #368]	; (8004c18 <uartReceiveHandler+0x304>)
 8004aa6:	f7fc f8bf 	bl	8000c28 <DecToInt>
 8004aaa:	4b5c      	ldr	r3, [pc, #368]	; (8004c1c <uartReceiveHandler+0x308>)
 8004aac:	8198      	strh	r0, [r3, #12]
			break;
 8004aae:	e7f6      	b.n	8004a9e <uartReceiveHandler+0x18a>
			settings.cr = DecToInt(ptr, l);
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4859      	ldr	r0, [pc, #356]	; (8004c18 <uartReceiveHandler+0x304>)
 8004ab4:	f7fc f8b8 	bl	8000c28 <DecToInt>
 8004ab8:	4b58      	ldr	r3, [pc, #352]	; (8004c1c <uartReceiveHandler+0x308>)
			nodeSettings.useLed = DecToInt(ptr, l);
 8004aba:	7418      	strb	r0, [r3, #16]
			break;
 8004abc:	e7ef      	b.n	8004a9e <uartReceiveHandler+0x18a>
			settings.power = DecToInt(ptr, l);
 8004abe:	4621      	mov	r1, r4
 8004ac0:	4855      	ldr	r0, [pc, #340]	; (8004c18 <uartReceiveHandler+0x304>)
 8004ac2:	f7fc f8b1 	bl	8000c28 <DecToInt>
 8004ac6:	4b55      	ldr	r3, [pc, #340]	; (8004c1c <uartReceiveHandler+0x308>)
 8004ac8:	7498      	strb	r0, [r3, #18]
			break;
 8004aca:	e7e8      	b.n	8004a9e <uartReceiveHandler+0x18a>
			flag.saveSettings = 1;
 8004acc:	4a54      	ldr	r2, [pc, #336]	; (8004c20 <uartReceiveHandler+0x30c>)
 8004ace:	7813      	ldrb	r3, [r2, #0]
 8004ad0:	f043 0310 	orr.w	r3, r3, #16
			flag.sendConfig = 1;
 8004ad4:	7013      	strb	r3, [r2, #0]
			break;
 8004ad6:	e7e2      	b.n	8004a9e <uartReceiveHandler+0x18a>
			flag.sendConfig = 1;
 8004ad8:	4a51      	ldr	r2, [pc, #324]	; (8004c20 <uartReceiveHandler+0x30c>)
 8004ada:	7813      	ldrb	r3, [r2, #0]
 8004adc:	f043 0320 	orr.w	r3, r3, #32
 8004ae0:	e7f8      	b.n	8004ad4 <uartReceiveHandler+0x1c0>
			sprintf(tempString, "<aBv%d>", version);
 8004ae2:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <uartReceiveHandler+0x310>)
 8004ae4:	4950      	ldr	r1, [pc, #320]	; (8004c28 <uartReceiveHandler+0x314>)
 8004ae6:	881a      	ldrh	r2, [r3, #0]
 8004ae8:	a801      	add	r0, sp, #4
 8004aea:	f003 f8f1 	bl	8007cd0 <siprintf>
					strlen(tempString), 100);
 8004aee:	a801      	add	r0, sp, #4
 8004af0:	f7fb fb2c 	bl	800014c <strlen>
			HAL_UART_Transmit(&huart1, (uint8_t*) tempString,
 8004af4:	2364      	movs	r3, #100	; 0x64
 8004af6:	b282      	uxth	r2, r0
 8004af8:	a901      	add	r1, sp, #4
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
 8004afa:	484c      	ldr	r0, [pc, #304]	; (8004c2c <uartReceiveHandler+0x318>)
 8004afc:	f002 fe36 	bl	800776c <HAL_UART_Transmit>
}
 8004b00:	e7cd      	b.n	8004a9e <uartReceiveHandler+0x18a>
			settings.warningDelay = 1000 * DecToInt(ptr, l);
 8004b02:	4621      	mov	r1, r4
 8004b04:	4844      	ldr	r0, [pc, #272]	; (8004c18 <uartReceiveHandler+0x304>)
 8004b06:	f7fc f88f 	bl	8000c28 <DecToInt>
 8004b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b0e:	4343      	muls	r3, r0
 8004b10:	4a42      	ldr	r2, [pc, #264]	; (8004c1c <uartReceiveHandler+0x308>)
 8004b12:	6053      	str	r3, [r2, #4]
			break;
 8004b14:	e7c3      	b.n	8004a9e <uartReceiveHandler+0x18a>
			settings.superWarningDelay = 1000 * DecToInt(ptr, l);
 8004b16:	4621      	mov	r1, r4
 8004b18:	483f      	ldr	r0, [pc, #252]	; (8004c18 <uartReceiveHandler+0x304>)
 8004b1a:	f7fc f885 	bl	8000c28 <DecToInt>
 8004b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b22:	4343      	muls	r3, r0
 8004b24:	4a3d      	ldr	r2, [pc, #244]	; (8004c1c <uartReceiveHandler+0x308>)
 8004b26:	6093      	str	r3, [r2, #8]
			break;
 8004b28:	e7b9      	b.n	8004a9e <uartReceiveHandler+0x18a>
			memset(settings.SSID, 0, sizeof(settings.SSID));
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4840      	ldr	r0, [pc, #256]	; (8004c30 <uartReceiveHandler+0x31c>)
 8004b30:	f003 f838 	bl	8007ba4 <memset>
			memcpy(settings.SSID, ptr, l);
 8004b34:	4622      	mov	r2, r4
 8004b36:	4938      	ldr	r1, [pc, #224]	; (8004c18 <uartReceiveHandler+0x304>)
 8004b38:	483d      	ldr	r0, [pc, #244]	; (8004c30 <uartReceiveHandler+0x31c>)
}
 8004b3a:	b007      	add	sp, #28
 8004b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			memcpy(settings.WiFiPass, ptr, l);
 8004b40:	f003 b822 	b.w	8007b88 <memcpy>
 8004b44:	4622      	mov	r2, r4
 8004b46:	4934      	ldr	r1, [pc, #208]	; (8004c18 <uartReceiveHandler+0x304>)
 8004b48:	483a      	ldr	r0, [pc, #232]	; (8004c34 <uartReceiveHandler+0x320>)
 8004b4a:	e7f6      	b.n	8004b3a <uartReceiveHandler+0x226>
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b4c:	f000 fa84 	bl	8005058 <HAL_GetTick>
			netHandler.plugged = true;
 8004b50:	2201      	movs	r2, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b52:	4b39      	ldr	r3, [pc, #228]	; (8004c38 <uartReceiveHandler+0x324>)
 8004b54:	6118      	str	r0, [r3, #16]
			netHandler.plugged = true;
 8004b56:	701a      	strb	r2, [r3, #0]
			flag.lcdRefreshRequest = true;
 8004b58:	4a31      	ldr	r2, [pc, #196]	; (8004c20 <uartReceiveHandler+0x30c>)
 8004b5a:	7813      	ldrb	r3, [r2, #0]
 8004b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b60:	e7b8      	b.n	8004ad4 <uartReceiveHandler+0x1c0>
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b62:	f000 fa79 	bl	8005058 <HAL_GetTick>
			netHandler.connected = ptr[0];
 8004b66:	786b      	ldrb	r3, [r5, #1]
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <uartReceiveHandler+0x324>)
			netHandler.connected = ptr[0];
 8004b6a:	3b00      	subs	r3, #0
 8004b6c:	bf18      	it	ne
 8004b6e:	2301      	movne	r3, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b70:	6110      	str	r0, [r2, #16]
			netHandler.connected = ptr[0];
 8004b72:	7093      	strb	r3, [r2, #2]
 8004b74:	e7f0      	b.n	8004b58 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b76:	f000 fa6f 	bl	8005058 <HAL_GetTick>
			netHandler.online = ptr[0];
 8004b7a:	786b      	ldrb	r3, [r5, #1]
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b7c:	4a2e      	ldr	r2, [pc, #184]	; (8004c38 <uartReceiveHandler+0x324>)
			netHandler.online = ptr[0];
 8004b7e:	3b00      	subs	r3, #0
 8004b80:	bf18      	it	ne
 8004b82:	2301      	movne	r3, #1
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b84:	6110      	str	r0, [r2, #16]
			netHandler.online = ptr[0];
 8004b86:	70d3      	strb	r3, [r2, #3]
			flag.lcdRefreshRequest = true;
 8004b88:	e7e6      	b.n	8004b58 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b8a:	f000 fa65 	bl	8005058 <HAL_GetTick>
 8004b8e:	4d2a      	ldr	r5, [pc, #168]	; (8004c38 <uartReceiveHandler+0x324>)
			netHandler.netCount = DecToInt(ptr, l);
 8004b90:	4621      	mov	r1, r4
			netHandler.lastStatusCheck = HAL_GetTick();
 8004b92:	6128      	str	r0, [r5, #16]
			netHandler.netCount = DecToInt(ptr, l);
 8004b94:	4820      	ldr	r0, [pc, #128]	; (8004c18 <uartReceiveHandler+0x304>)
 8004b96:	f7fc f847 	bl	8000c28 <DecToInt>
			netHandler.netRefreshInProgress = false;
 8004b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
			netHandler.netCount = DecToInt(ptr, l);
 8004b9e:	f885 0631 	strb.w	r0, [r5, #1585]	; 0x631
			netHandler.netRefreshInProgress = false;
 8004ba2:	80eb      	strh	r3, [r5, #6]
			flag.lcdRefreshRequest = 1;
 8004ba4:	e7d8      	b.n	8004b58 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 8004ba6:	f000 fa57 	bl	8005058 <HAL_GetTick>
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <uartReceiveHandler+0x324>)
 8004bac:	6118      	str	r0, [r3, #16]
				while (i < 16) {
 8004bae:	461a      	mov	r2, r3
				int i = 0;
 8004bb0:	2000      	movs	r0, #0
					if (netHandler.nets[i][0] == 0) {
 8004bb2:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8004bb6:	b941      	cbnz	r1, 8004bca <uartReceiveHandler+0x2b6>
						sprintf(netHandler.nets[i], "%s", ptr);
 8004bb8:	eb02 1040 	add.w	r0, r2, r0, lsl #5
 8004bbc:	4916      	ldr	r1, [pc, #88]	; (8004c18 <uartReceiveHandler+0x304>)
 8004bbe:	3030      	adds	r0, #48	; 0x30
}
 8004bc0:	b007      	add	sp, #28
 8004bc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						sprintf(netHandler.nets[i], "%s", ptr);
 8004bc6:	f003 b8a3 	b.w	8007d10 <strcpy>
						i++;
 8004bca:	3001      	adds	r0, #1
				while (i < 16) {
 8004bcc:	2810      	cmp	r0, #16
 8004bce:	f103 0320 	add.w	r3, r3, #32
 8004bd2:	d1ee      	bne.n	8004bb2 <uartReceiveHandler+0x29e>
 8004bd4:	e763      	b.n	8004a9e <uartReceiveHandler+0x18a>
			netHandler.TX = false;
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	4c17      	ldr	r4, [pc, #92]	; (8004c38 <uartReceiveHandler+0x324>)
 8004bda:	7165      	strb	r5, [r4, #5]
			netHandler.lastStatusCheck = HAL_GetTick();
 8004bdc:	f000 fa3c 	bl	8005058 <HAL_GetTick>
			sprintf(netHandler.response, "%s", ptr);
 8004be0:	490d      	ldr	r1, [pc, #52]	; (8004c18 <uartReceiveHandler+0x304>)
			netHandler.lastStatusCheck = HAL_GetTick();
 8004be2:	6120      	str	r0, [r4, #16]
			sprintf(netHandler.response, "%s", ptr);
 8004be4:	f204 6032 	addw	r0, r4, #1586	; 0x632
 8004be8:	f003 f892 	bl	8007d10 <strcpy>
			netHandler.TX = false;
 8004bec:	7165      	strb	r5, [r4, #5]
			flag.lcdRefreshRequest = true;
 8004bee:	e7b3      	b.n	8004b58 <uartReceiveHandler+0x244>
			netHandler.lastStatusCheck = HAL_GetTick();
 8004bf0:	f000 fa32 	bl	8005058 <HAL_GetTick>
 8004bf4:	4c10      	ldr	r4, [pc, #64]	; (8004c38 <uartReceiveHandler+0x324>)
			sprintf(netHandler.ip, "%s", ptr);
 8004bf6:	4908      	ldr	r1, [pc, #32]	; (8004c18 <uartReceiveHandler+0x304>)
			netHandler.lastStatusCheck = HAL_GetTick();
 8004bf8:	6120      	str	r0, [r4, #16]
			sprintf(netHandler.ip, "%s", ptr);
 8004bfa:	f104 0014 	add.w	r0, r4, #20
 8004bfe:	f003 f887 	bl	8007d10 <strcpy>
			netHandler.connected = true;
 8004c02:	2301      	movs	r3, #1
 8004c04:	70a3      	strb	r3, [r4, #2]
			flag.lcdRefreshRequest = true;
 8004c06:	e7a7      	b.n	8004b58 <uartReceiveHandler+0x244>
 8004c08:	2000164b 	.word	0x2000164b
 8004c0c:	20000cdc 	.word	0x20000cdc
 8004c10:	200015cb 	.word	0x200015cb
 8004c14:	08009b01 	.word	0x08009b01
 8004c18:	200015cc 	.word	0x200015cc
 8004c1c:	20000a78 	.word	0x20000a78
 8004c20:	20000b4c 	.word	0x20000b4c
 8004c24:	080097a4 	.word	0x080097a4
 8004c28:	08009af9 	.word	0x08009af9
 8004c2c:	20000c30 	.word	0x20000c30
 8004c30:	20000a8b 	.word	0x20000a8b
 8004c34:	20000a9b 	.word	0x20000a9b
 8004c38:	20000e8c 	.word	0x20000e8c
		switch (uartRx[0]) {
 8004c3c:	2b39      	cmp	r3, #57	; 0x39
 8004c3e:	d80b      	bhi.n	8004c58 <uartReceiveHandler+0x344>
 8004c40:	2b30      	cmp	r3, #48	; 0x30
 8004c42:	d90f      	bls.n	8004c64 <uartReceiveHandler+0x350>
 8004c44:	3b31      	subs	r3, #49	; 0x31
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d80c      	bhi.n	8004c64 <uartReceiveHandler+0x350>
 8004c4a:	e8df f003 	tbb	[pc, r3]
 8004c4e:	150f      	.short	0x150f
 8004c50:	0b37231c 	.word	0x0b37231c
 8004c54:	290b      	.short	0x290b
 8004c56:	30          	.byte	0x30
 8004c57:	00          	.byte	0x00
 8004c58:	2b69      	cmp	r3, #105	; 0x69
 8004c5a:	d042      	beq.n	8004ce2 <uartReceiveHandler+0x3ce>
 8004c5c:	2b6e      	cmp	r3, #110	; 0x6e
 8004c5e:	d033      	beq.n	8004cc8 <uartReceiveHandler+0x3b4>
 8004c60:	2b4c      	cmp	r3, #76	; 0x4c
 8004c62:	d038      	beq.n	8004cd6 <uartReceiveHandler+0x3c2>
			HAL_UART_Transmit(&huart1, (uint8_t*) "Bad Format", 10, 100);
 8004c64:	2364      	movs	r3, #100	; 0x64
 8004c66:	220a      	movs	r2, #10
 8004c68:	4921      	ldr	r1, [pc, #132]	; (8004cf0 <uartReceiveHandler+0x3dc>)
 8004c6a:	e746      	b.n	8004afa <uartReceiveHandler+0x1e6>
			nodeSettings.realFrequency = DecToInt(ptr, l);
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4821      	ldr	r0, [pc, #132]	; (8004cf4 <uartReceiveHandler+0x3e0>)
 8004c70:	f7fb ffda 	bl	8000c28 <DecToInt>
 8004c74:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004c76:	e6fc      	b.n	8004a72 <uartReceiveHandler+0x15e>
			nodeSettings.sf = DecToInt(ptr, l);
 8004c78:	4621      	mov	r1, r4
 8004c7a:	481e      	ldr	r0, [pc, #120]	; (8004cf4 <uartReceiveHandler+0x3e0>)
 8004c7c:	f7fb ffd4 	bl	8000c28 <DecToInt>
 8004c80:	4b1d      	ldr	r3, [pc, #116]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004c82:	7318      	strb	r0, [r3, #12]
			break;
 8004c84:	e70b      	b.n	8004a9e <uartReceiveHandler+0x18a>
			nodeSettings.bw = DecToInt(ptr, l);
 8004c86:	4621      	mov	r1, r4
 8004c88:	481a      	ldr	r0, [pc, #104]	; (8004cf4 <uartReceiveHandler+0x3e0>)
 8004c8a:	f7fb ffcd 	bl	8000c28 <DecToInt>
 8004c8e:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004c90:	7358      	strb	r0, [r3, #13]
			break;
 8004c92:	e704      	b.n	8004a9e <uartReceiveHandler+0x18a>
			nodeSettings.sw = HexToInt(ptr, l);
 8004c94:	4621      	mov	r1, r4
 8004c96:	4817      	ldr	r0, [pc, #92]	; (8004cf4 <uartReceiveHandler+0x3e0>)
 8004c98:	f7fb ffde 	bl	8000c58 <HexToInt>
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004c9e:	e6ef      	b.n	8004a80 <uartReceiveHandler+0x16c>
			nodeSettings.preamble = DecToInt(ptr, l);
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	4814      	ldr	r0, [pc, #80]	; (8004cf4 <uartReceiveHandler+0x3e0>)
 8004ca4:	f7fb ffc0 	bl	8000c28 <DecToInt>
 8004ca8:	4b13      	ldr	r3, [pc, #76]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004caa:	8118      	strh	r0, [r3, #8]
			break;
 8004cac:	e6f7      	b.n	8004a9e <uartReceiveHandler+0x18a>
			nodeSettings.cr = DecToInt(ptr, l);
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4810      	ldr	r0, [pc, #64]	; (8004cf4 <uartReceiveHandler+0x3e0>)
 8004cb2:	f7fb ffb9 	bl	8000c28 <DecToInt>
 8004cb6:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004cb8:	72d8      	strb	r0, [r3, #11]
			break;
 8004cba:	e6f0      	b.n	8004a9e <uartReceiveHandler+0x18a>
			nodeSettings.power = DecToInt(ptr, l);
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	480d      	ldr	r0, [pc, #52]	; (8004cf4 <uartReceiveHandler+0x3e0>)
 8004cc0:	f7fb ffb2 	bl	8000c28 <DecToInt>
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004cc6:	e6e2      	b.n	8004a8e <uartReceiveHandler+0x17a>
			nodeNum = DecToInt(ptr, l);
 8004cc8:	4621      	mov	r1, r4
 8004cca:	1c68      	adds	r0, r5, #1
 8004ccc:	f7fb ffac 	bl	8000c28 <DecToInt>
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <uartReceiveHandler+0x3e8>)
 8004cd2:	7018      	strb	r0, [r3, #0]
			break;
 8004cd4:	e6e3      	b.n	8004a9e <uartReceiveHandler+0x18a>
			nodeSettings.useLed = DecToInt(ptr, l);
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	1c68      	adds	r0, r5, #1
 8004cda:	f7fb ffa5 	bl	8000c28 <DecToInt>
 8004cde:	4b06      	ldr	r3, [pc, #24]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004ce0:	e6eb      	b.n	8004aba <uartReceiveHandler+0x1a6>
			nodeSettings.workInterval = DecToInt(ptr, l);
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	1c68      	adds	r0, r5, #1
 8004ce6:	f7fb ff9f 	bl	8000c28 <DecToInt>
 8004cea:	4b03      	ldr	r3, [pc, #12]	; (8004cf8 <uartReceiveHandler+0x3e4>)
 8004cec:	6058      	str	r0, [r3, #4]
			break;
 8004cee:	e6d6      	b.n	8004a9e <uartReceiveHandler+0x18a>
 8004cf0:	08009b03 	.word	0x08009b03
 8004cf4:	200015cc 	.word	0x200015cc
 8004cf8:	20000c74 	.word	0x20000c74
 8004cfc:	200015ca 	.word	0x200015ca

08004d00 <sendConfig>:

void sendConfig(void) {
 8004d00:	b538      	push	{r3, r4, r5, lr}
	lastUartConnect = HAL_GetTick();
 8004d02:	f000 f9a9 	bl	8005058 <HAL_GetTick>
	printf("<3%u>\n", settings.bw);
	printf("<4%X>\n", settings.syncWord);
	printf("<5%u>\n", settings.power);
	printf("<8%u>\n", settings.preamble);
	printf("<9%u>\n", settings.cr);
	printf("<q%lu>\n", settings.warningDelay / 1000);
 8004d06:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	lastUartConnect = HAL_GetTick();
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <sendConfig+0x78>)
	printf("<1%ld>\n", settings.realFrequency);
 8004d0c:	4c1b      	ldr	r4, [pc, #108]	; (8004d7c <sendConfig+0x7c>)
	lastUartConnect = HAL_GetTick();
 8004d0e:	6018      	str	r0, [r3, #0]
	printf("<1%ld>\n", settings.realFrequency);
 8004d10:	6821      	ldr	r1, [r4, #0]
 8004d12:	481b      	ldr	r0, [pc, #108]	; (8004d80 <sendConfig+0x80>)
 8004d14:	f002 ff4e 	bl	8007bb4 <iprintf>
	printf("<2%u>\n", settings.sf);
 8004d18:	7ba1      	ldrb	r1, [r4, #14]
 8004d1a:	481a      	ldr	r0, [pc, #104]	; (8004d84 <sendConfig+0x84>)
 8004d1c:	f002 ff4a 	bl	8007bb4 <iprintf>
	printf("<3%u>\n", settings.bw);
 8004d20:	7be1      	ldrb	r1, [r4, #15]
 8004d22:	4819      	ldr	r0, [pc, #100]	; (8004d88 <sendConfig+0x88>)
 8004d24:	f002 ff46 	bl	8007bb4 <iprintf>
	printf("<4%X>\n", settings.syncWord);
 8004d28:	7c61      	ldrb	r1, [r4, #17]
 8004d2a:	4818      	ldr	r0, [pc, #96]	; (8004d8c <sendConfig+0x8c>)
 8004d2c:	f002 ff42 	bl	8007bb4 <iprintf>
	printf("<5%u>\n", settings.power);
 8004d30:	7ca1      	ldrb	r1, [r4, #18]
 8004d32:	4817      	ldr	r0, [pc, #92]	; (8004d90 <sendConfig+0x90>)
 8004d34:	f002 ff3e 	bl	8007bb4 <iprintf>
	printf("<8%u>\n", settings.preamble);
 8004d38:	89a1      	ldrh	r1, [r4, #12]
 8004d3a:	4816      	ldr	r0, [pc, #88]	; (8004d94 <sendConfig+0x94>)
 8004d3c:	f002 ff3a 	bl	8007bb4 <iprintf>
	printf("<9%u>\n", settings.cr);
 8004d40:	7c21      	ldrb	r1, [r4, #16]
 8004d42:	4815      	ldr	r0, [pc, #84]	; (8004d98 <sendConfig+0x98>)
 8004d44:	f002 ff36 	bl	8007bb4 <iprintf>
	printf("<q%lu>\n", settings.warningDelay / 1000);
 8004d48:	6861      	ldr	r1, [r4, #4]
 8004d4a:	4814      	ldr	r0, [pc, #80]	; (8004d9c <sendConfig+0x9c>)
 8004d4c:	fbb1 f1f5 	udiv	r1, r1, r5
 8004d50:	f002 ff30 	bl	8007bb4 <iprintf>
	printf("<w%lu>\n", settings.superWarningDelay / 1000);
 8004d54:	68a1      	ldr	r1, [r4, #8]
 8004d56:	4812      	ldr	r0, [pc, #72]	; (8004da0 <sendConfig+0xa0>)
 8004d58:	fbb1 f1f5 	udiv	r1, r1, r5
 8004d5c:	f002 ff2a 	bl	8007bb4 <iprintf>
	printf("<Z%s>\n", settings.SSID);
 8004d60:	f104 0113 	add.w	r1, r4, #19
 8004d64:	480f      	ldr	r0, [pc, #60]	; (8004da4 <sendConfig+0xa4>)
 8004d66:	f002 ff25 	bl	8007bb4 <iprintf>
	printf("<X%s>\n", settings.WiFiPass);
 8004d6a:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8004d6e:	480e      	ldr	r0, [pc, #56]	; (8004da8 <sendConfig+0xa8>)
}
 8004d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("<X%s>\n", settings.WiFiPass);
 8004d74:	f002 bf1e 	b.w	8007bb4 <iprintf>
 8004d78:	200015c0 	.word	0x200015c0
 8004d7c:	20000a78 	.word	0x20000a78
 8004d80:	08009b0e 	.word	0x08009b0e
 8004d84:	08009b16 	.word	0x08009b16
 8004d88:	08009b1d 	.word	0x08009b1d
 8004d8c:	08009b24 	.word	0x08009b24
 8004d90:	08009b2b 	.word	0x08009b2b
 8004d94:	08009b32 	.word	0x08009b32
 8004d98:	08009b39 	.word	0x08009b39
 8004d9c:	08009b40 	.word	0x08009b40
 8004da0:	08009b48 	.word	0x08009b48
 8004da4:	08009b50 	.word	0x08009b50
 8004da8:	08009b57 	.word	0x08009b57

08004dac <configNodeViaUart>:

void configNodeViaUart(uint8_t nodeNum) {
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	4606      	mov	r6, r0
	memset(&nodeSettings, 0, sizeof(nodeSettings_t));
 8004db0:	4d2f      	ldr	r5, [pc, #188]	; (8004e70 <configNodeViaUart+0xc4>)
	printf("<1%ld\n>", settings.realFrequency);
 8004db2:	4c30      	ldr	r4, [pc, #192]	; (8004e74 <configNodeViaUart+0xc8>)
	memset(&nodeSettings, 0, sizeof(nodeSettings_t));
 8004db4:	221c      	movs	r2, #28
 8004db6:	2100      	movs	r1, #0
 8004db8:	4628      	mov	r0, r5
 8004dba:	f002 fef3 	bl	8007ba4 <memset>
	printf("<1%ld\n>", settings.realFrequency);
 8004dbe:	6821      	ldr	r1, [r4, #0]
 8004dc0:	482d      	ldr	r0, [pc, #180]	; (8004e78 <configNodeViaUart+0xcc>)
 8004dc2:	f002 fef7 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004dc6:	2005      	movs	r0, #5
 8004dc8:	f000 f94c 	bl	8005064 <HAL_Delay>
	printf("<2%u>\n", settings.sf);
 8004dcc:	7ba1      	ldrb	r1, [r4, #14]
 8004dce:	482b      	ldr	r0, [pc, #172]	; (8004e7c <configNodeViaUart+0xd0>)
 8004dd0:	f002 fef0 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004dd4:	2005      	movs	r0, #5
 8004dd6:	f000 f945 	bl	8005064 <HAL_Delay>
	printf("<3%u>\n", settings.bw);
 8004dda:	7be1      	ldrb	r1, [r4, #15]
 8004ddc:	4828      	ldr	r0, [pc, #160]	; (8004e80 <configNodeViaUart+0xd4>)
 8004dde:	f002 fee9 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004de2:	2005      	movs	r0, #5
 8004de4:	f000 f93e 	bl	8005064 <HAL_Delay>
	printf("<4%X>\n", settings.syncWord);
 8004de8:	7c61      	ldrb	r1, [r4, #17]
 8004dea:	4826      	ldr	r0, [pc, #152]	; (8004e84 <configNodeViaUart+0xd8>)
 8004dec:	f002 fee2 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004df0:	2005      	movs	r0, #5
 8004df2:	f000 f937 	bl	8005064 <HAL_Delay>
	printf("<5%u>\n", settings.power);
 8004df6:	7ca1      	ldrb	r1, [r4, #18]
 8004df8:	4823      	ldr	r0, [pc, #140]	; (8004e88 <configNodeViaUart+0xdc>)
 8004dfa:	f002 fedb 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004dfe:	2005      	movs	r0, #5
 8004e00:	f000 f930 	bl	8005064 <HAL_Delay>
	printf("<8%u>\n", settings.preamble);
 8004e04:	89a1      	ldrh	r1, [r4, #12]
 8004e06:	4821      	ldr	r0, [pc, #132]	; (8004e8c <configNodeViaUart+0xe0>)
 8004e08:	f002 fed4 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004e0c:	2005      	movs	r0, #5
 8004e0e:	f000 f929 	bl	8005064 <HAL_Delay>
	printf("<9%u>\n", settings.cr);
 8004e12:	7c21      	ldrb	r1, [r4, #16]
 8004e14:	481e      	ldr	r0, [pc, #120]	; (8004e90 <configNodeViaUart+0xe4>)
 8004e16:	f002 fecd 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004e1a:	2005      	movs	r0, #5
 8004e1c:	f000 f922 	bl	8005064 <HAL_Delay>
	printf("<n%u>\n", nodeNum);
 8004e20:	4631      	mov	r1, r6
 8004e22:	481c      	ldr	r0, [pc, #112]	; (8004e94 <configNodeViaUart+0xe8>)
 8004e24:	f002 fec6 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004e28:	2005      	movs	r0, #5
 8004e2a:	f000 f91b 	bl	8005064 <HAL_Delay>
	printf("<i%lu>\n", nodeSettings.workInterval);
 8004e2e:	6869      	ldr	r1, [r5, #4]
 8004e30:	4819      	ldr	r0, [pc, #100]	; (8004e98 <configNodeViaUart+0xec>)
 8004e32:	f002 febf 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004e36:	2005      	movs	r0, #5
 8004e38:	f000 f914 	bl	8005064 <HAL_Delay>
	printf("<L%u>\n", nodeSettings.useLed);
 8004e3c:	7c29      	ldrb	r1, [r5, #16]
 8004e3e:	4817      	ldr	r0, [pc, #92]	; (8004e9c <configNodeViaUart+0xf0>)
 8004e40:	f002 feb8 	bl	8007bb4 <iprintf>
	HAL_Delay(5);
 8004e44:	2005      	movs	r0, #5
 8004e46:	f000 f90d 	bl	8005064 <HAL_Delay>
	printf("<S>\n");
 8004e4a:	4815      	ldr	r0, [pc, #84]	; (8004ea0 <configNodeViaUart+0xf4>)
 8004e4c:	f002 ff38 	bl	8007cc0 <puts>
	HAL_Delay(10);
 8004e50:	200a      	movs	r0, #10
 8004e52:	f000 f907 	bl	8005064 <HAL_Delay>
	printf("<R>\n");
 8004e56:	4813      	ldr	r0, [pc, #76]	; (8004ea4 <configNodeViaUart+0xf8>)
 8004e58:	f002 ff32 	bl	8007cc0 <puts>
	configTime = HAL_GetTick();
 8004e5c:	f000 f8fc 	bl	8005058 <HAL_GetTick>
 8004e60:	4b11      	ldr	r3, [pc, #68]	; (8004ea8 <configNodeViaUart+0xfc>)
 8004e62:	6018      	str	r0, [r3, #0]
	lastUartConnect = HAL_GetTick();
 8004e64:	f000 f8f8 	bl	8005058 <HAL_GetTick>
 8004e68:	4b10      	ldr	r3, [pc, #64]	; (8004eac <configNodeViaUart+0x100>)
 8004e6a:	6018      	str	r0, [r3, #0]
}
 8004e6c:	bd70      	pop	{r4, r5, r6, pc}
 8004e6e:	bf00      	nop
 8004e70:	20000c74 	.word	0x20000c74
 8004e74:	20000a78 	.word	0x20000a78
 8004e78:	08009b5e 	.word	0x08009b5e
 8004e7c:	08009b16 	.word	0x08009b16
 8004e80:	08009b1d 	.word	0x08009b1d
 8004e84:	08009b24 	.word	0x08009b24
 8004e88:	08009b2b 	.word	0x08009b2b
 8004e8c:	08009b32 	.word	0x08009b32
 8004e90:	08009b39 	.word	0x08009b39
 8004e94:	08009b66 	.word	0x08009b66
 8004e98:	08009b6d 	.word	0x08009b6d
 8004e9c:	08009b75 	.word	0x08009b75
 8004ea0:	08009b7c 	.word	0x08009b7c
 8004ea4:	08009b80 	.word	0x08009b80
 8004ea8:	20000cdc 	.word	0x20000cdc
 8004eac:	200015c0 	.word	0x200015c0

08004eb0 <wsSetColor>:

uint16_t wsBuffer[ARRAY_LEN];
color_t cBuffer[LED_COUNT];

void wsSetColor(uint8_t num, uint8_t red, uint8_t green, uint8_t blue)
{
 8004eb0:	b530      	push	{r4, r5, lr}
cBuffer[num].red=red;
 8004eb2:	4d04      	ldr	r5, [pc, #16]	; (8004ec4 <wsSetColor+0x14>)
 8004eb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004eb8:	182c      	adds	r4, r5, r0
 8004eba:	7061      	strb	r1, [r4, #1]
cBuffer[num].green=green;
cBuffer[num].blue=blue;
 8004ebc:	70a3      	strb	r3, [r4, #2]
cBuffer[num].green=green;
 8004ebe:	542a      	strb	r2, [r5, r0]
}
 8004ec0:	bd30      	pop	{r4, r5, pc}
 8004ec2:	bf00      	nop
 8004ec4:	2000198c 	.word	0x2000198c

08004ec8 <wsDoubleBright>:

void wsDoubleBright(uint8_t num)
{
	cBuffer[num].red*=2;
 8004ec8:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <wsDoubleBright+0x1c>)
 8004eca:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004ece:	1813      	adds	r3, r2, r0
 8004ed0:	7859      	ldrb	r1, [r3, #1]
 8004ed2:	0049      	lsls	r1, r1, #1
 8004ed4:	7059      	strb	r1, [r3, #1]
	cBuffer[num].green*=2;
 8004ed6:	5c11      	ldrb	r1, [r2, r0]
 8004ed8:	0049      	lsls	r1, r1, #1
 8004eda:	5411      	strb	r1, [r2, r0]
	cBuffer[num].blue*=2;
 8004edc:	789a      	ldrb	r2, [r3, #2]
 8004ede:	0052      	lsls	r2, r2, #1
 8004ee0:	709a      	strb	r2, [r3, #2]
}
 8004ee2:	4770      	bx	lr
 8004ee4:	2000198c 	.word	0x2000198c

08004ee8 <wsMultiply>:

void wsMultiply(uint8_t num, float k)
{
 8004ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eea:	460d      	mov	r5, r1
	cBuffer[num].red*=k;
 8004eec:	4f0f      	ldr	r7, [pc, #60]	; (8004f2c <wsMultiply+0x44>)
 8004eee:	eb00 0440 	add.w	r4, r0, r0, lsl #1
 8004ef2:	193e      	adds	r6, r7, r4
 8004ef4:	7870      	ldrb	r0, [r6, #1]
 8004ef6:	f7fb f9eb 	bl	80002d0 <__aeabi_i2f>
 8004efa:	4629      	mov	r1, r5
 8004efc:	f7fb fa3c 	bl	8000378 <__aeabi_fmul>
 8004f00:	f7fb fc26 	bl	8000750 <__aeabi_f2uiz>
 8004f04:	7070      	strb	r0, [r6, #1]
	cBuffer[num].green*=k;
 8004f06:	5d38      	ldrb	r0, [r7, r4]
 8004f08:	f7fb f9e2 	bl	80002d0 <__aeabi_i2f>
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb fa33 	bl	8000378 <__aeabi_fmul>
 8004f12:	f7fb fc1d 	bl	8000750 <__aeabi_f2uiz>
 8004f16:	5538      	strb	r0, [r7, r4]
	cBuffer[num].blue*=k;
 8004f18:	78b0      	ldrb	r0, [r6, #2]
 8004f1a:	f7fb f9d9 	bl	80002d0 <__aeabi_i2f>
 8004f1e:	4629      	mov	r1, r5
 8004f20:	f7fb fa2a 	bl	8000378 <__aeabi_fmul>
 8004f24:	f7fb fc14 	bl	8000750 <__aeabi_f2uiz>
 8004f28:	70b0      	strb	r0, [r6, #2]
}
 8004f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f2c:	2000198c 	.word	0x2000198c

08004f30 <wsPrepareArray>:


void wsPrepareArray()
{
 8004f30:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
}

uint32_t * getBitBanded(uint32_t * adr,uint8_t bit)
{
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8004f32:	2400      	movs	r4, #0
	  wsBuffer[i*8+j]=LOW;
 8004f34:	251a      	movs	r5, #26
      wsBuffer[i*8+j]=HIGH;
 8004f36:	2641      	movs	r6, #65	; 0x41
return (uint32_t*)(((((uint32_t)adr)&0xFFFF))*32+bit*4+0x22000000);
 8004f38:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <wsPrepareArray+0x40>)
 8004f3a:	480e      	ldr	r0, [pc, #56]	; (8004f74 <wsPrepareArray+0x44>)
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	015b      	lsls	r3, r3, #5
 8004f40:	f103 5308 	add.w	r3, r3, #570425344	; 0x22000000
 8004f44:	3320      	adds	r3, #32
{
 8004f46:	4602      	mov	r2, r0
 8004f48:	f1a3 0120 	sub.w	r1, r3, #32
		if (*adr++)
 8004f4c:	f851 7b04 	ldr.w	r7, [r1], #4
 8004f50:	b167      	cbz	r7, 8004f6c <wsPrepareArray+0x3c>
      wsBuffer[i*8+j]=HIGH;
 8004f52:	81d6      	strh	r6, [r2, #14]
	for(j=7;j>=0;j--)
 8004f54:	4299      	cmp	r1, r3
 8004f56:	f1a2 0202 	sub.w	r2, r2, #2
 8004f5a:	d1f7      	bne.n	8004f4c <wsPrepareArray+0x1c>
	for(i=0;i<LED_COUNT*3;i++)
 8004f5c:	3408      	adds	r4, #8
 8004f5e:	2cd8      	cmp	r4, #216	; 0xd8
 8004f60:	f101 0320 	add.w	r3, r1, #32
 8004f64:	f100 0010 	add.w	r0, r0, #16
 8004f68:	d1ed      	bne.n	8004f46 <wsPrepareArray+0x16>
}
 8004f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  wsBuffer[i*8+j]=LOW;
 8004f6c:	81d5      	strh	r5, [r2, #14]
 8004f6e:	e7f1      	b.n	8004f54 <wsPrepareArray+0x24>
 8004f70:	2000198c 	.word	0x2000198c
 8004f74:	2000164c 	.word	0x2000164c

08004f78 <wsInit>:
	HAL_TIM_PWM_Start_DMA(tim, chan, (uint32_t*)wsBuffer, ARRAY_LEN);
 8004f78:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004f7c:	4a01      	ldr	r2, [pc, #4]	; (8004f84 <wsInit+0xc>)
 8004f7e:	f002 bb1f 	b.w	80075c0 <HAL_TIM_PWM_Start_DMA>
 8004f82:	bf00      	nop
 8004f84:	2000164c 	.word	0x2000164c

08004f88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f88:	480c      	ldr	r0, [pc, #48]	; (8004fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004f8a:	490d      	ldr	r1, [pc, #52]	; (8004fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004f8c:	4a0d      	ldr	r2, [pc, #52]	; (8004fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f90:	e002      	b.n	8004f98 <LoopCopyDataInit>

08004f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f96:	3304      	adds	r3, #4

08004f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f9c:	d3f9      	bcc.n	8004f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004fa0:	4c0a      	ldr	r4, [pc, #40]	; (8004fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004fa4:	e001      	b.n	8004faa <LoopFillZerobss>

08004fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004fa8:	3204      	adds	r2, #4

08004faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004fac:	d3fb      	bcc.n	8004fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004fae:	f7ff fc79 	bl	80048a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004fb2:	f002 fdc5 	bl	8007b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004fb6:	f7fe fc13 	bl	80037e0 <main>
  bx lr
 8004fba:	4770      	bx	lr
  ldr r0, =_sdata
 8004fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004fc0:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8004fc4:	08009c38 	.word	0x08009c38
  ldr r2, =_sbss
 8004fc8:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8004fcc:	200019e0 	.word	0x200019e0

08004fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004fd0:	e7fe      	b.n	8004fd0 <ADC1_2_IRQHandler>
	...

08004fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fd4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <HAL_InitTick+0x3c>)
{
 8004fd8:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fda:	7818      	ldrb	r0, [r3, #0]
 8004fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fe0:	fbb3 f3f0 	udiv	r3, r3, r0
 8004fe4:	4a0b      	ldr	r2, [pc, #44]	; (8005014 <HAL_InitTick+0x40>)
 8004fe6:	6810      	ldr	r0, [r2, #0]
 8004fe8:	fbb0 f0f3 	udiv	r0, r0, r3
 8004fec:	f000 fac6 	bl	800557c <HAL_SYSTICK_Config>
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	b958      	cbnz	r0, 800500c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ff4:	2d0f      	cmp	r5, #15
 8004ff6:	d809      	bhi.n	800500c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8005000:	f000 fa7c 	bl	80054fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005004:	4620      	mov	r0, r4
 8005006:	4b04      	ldr	r3, [pc, #16]	; (8005018 <HAL_InitTick+0x44>)
 8005008:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800500a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800500c:	2001      	movs	r0, #1
 800500e:	e7fc      	b.n	800500a <HAL_InitTick+0x36>
 8005010:	20000050 	.word	0x20000050
 8005014:	2000004c 	.word	0x2000004c
 8005018:	20000054 	.word	0x20000054

0800501c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800501c:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_Init+0x20>)
{
 800501e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005020:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005022:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005024:	f043 0310 	orr.w	r3, r3, #16
 8005028:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800502a:	f000 fa55 	bl	80054d8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800502e:	2000      	movs	r0, #0
 8005030:	f7ff ffd0 	bl	8004fd4 <HAL_InitTick>
  HAL_MspInit();
 8005034:	f7fe ff38 	bl	8003ea8 <HAL_MspInit>
}
 8005038:	2000      	movs	r0, #0
 800503a:	bd08      	pop	{r3, pc}
 800503c:	40022000 	.word	0x40022000

08005040 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005040:	4a03      	ldr	r2, [pc, #12]	; (8005050 <HAL_IncTick+0x10>)
 8005042:	4b04      	ldr	r3, [pc, #16]	; (8005054 <HAL_IncTick+0x14>)
 8005044:	6811      	ldr	r1, [r2, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	440b      	add	r3, r1
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	200019a8 	.word	0x200019a8
 8005054:	20000050 	.word	0x20000050

08005058 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <HAL_GetTick+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	200019a8 	.word	0x200019a8

08005064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005068:	f7ff fff6 	bl	8005058 <HAL_GetTick>
 800506c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800506e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005070:	bf1e      	ittt	ne
 8005072:	4b04      	ldrne	r3, [pc, #16]	; (8005084 <HAL_Delay+0x20>)
 8005074:	781b      	ldrbne	r3, [r3, #0]
 8005076:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005078:	f7ff ffee 	bl	8005058 <HAL_GetTick>
 800507c:	1b43      	subs	r3, r0, r5
 800507e:	42a3      	cmp	r3, r4
 8005080:	d3fa      	bcc.n	8005078 <HAL_Delay+0x14>
  {
  }
}
 8005082:	bd38      	pop	{r3, r4, r5, pc}
 8005084:	20000050 	.word	0x20000050

08005088 <HAL_ADC_ConvCpltCallback>:
 8005088:	4770      	bx	lr

0800508a <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800508a:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800508c:	b510      	push	{r4, lr}
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800508e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005090:	f012 0f50 	tst.w	r2, #80	; 0x50
 8005094:	d11b      	bne.n	80050ce <ADC_DMAConvCplt+0x44>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005096:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	6892      	ldr	r2, [r2, #8]
 80050a2:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80050a6:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80050aa:	d10c      	bne.n	80050c6 <ADC_DMAConvCplt+0x3c>
 80050ac:	7b1a      	ldrb	r2, [r3, #12]
 80050ae:	b952      	cbnz	r2, 80050c6 <ADC_DMAConvCplt+0x3c>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80050b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050b6:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80050b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ba:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80050bc:	bf5e      	ittt	pl
 80050be:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
 80050c0:	f042 0201 	orrpl.w	r2, r2, #1
 80050c4:	629a      	strpl	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff ffde 	bl	8005088 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80050cc:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80050ce:	6a1b      	ldr	r3, [r3, #32]
}
 80050d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	4718      	bx	r3

080050d8 <HAL_ADC_ConvHalfCpltCallback>:
 80050d8:	4770      	bx	lr

080050da <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80050da:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80050de:	f7ff fffb 	bl	80050d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050e2:	bd08      	pop	{r3, pc}

080050e4 <HAL_ADC_ErrorCallback>:
 80050e4:	4770      	bx	lr

080050e6 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80050e6:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 80050e8:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80050ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050f0:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80050f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80050f4:	f043 0304 	orr.w	r3, r3, #4
 80050f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80050fa:	f7ff fff3 	bl	80050e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050fe:	bd08      	pop	{r3, pc}

08005100 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8005100:	2300      	movs	r3, #0
{ 
 8005102:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005104:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8005106:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{ 
 800510a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800510c:	2b01      	cmp	r3, #1
 800510e:	d06c      	beq.n	80051ea <HAL_ADC_ConfigChannel+0xea>
 8005110:	2301      	movs	r3, #1
 8005112:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8005116:	684d      	ldr	r5, [r1, #4]
 8005118:	6802      	ldr	r2, [r0, #0]
 800511a:	2d06      	cmp	r5, #6
 800511c:	6808      	ldr	r0, [r1, #0]
 800511e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8005122:	d822      	bhi.n	800516a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8005124:	261f      	movs	r6, #31
 8005126:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8005128:	3b05      	subs	r3, #5
 800512a:	409e      	lsls	r6, r3
 800512c:	ea25 0506 	bic.w	r5, r5, r6
 8005130:	fa00 f303 	lsl.w	r3, r0, r3
 8005134:	432b      	orrs	r3, r5
 8005136:	6353      	str	r3, [r2, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005138:	2809      	cmp	r0, #9
 800513a:	688b      	ldr	r3, [r1, #8]
 800513c:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8005140:	f04f 0107 	mov.w	r1, #7
 8005144:	d929      	bls.n	800519a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005146:	68d6      	ldr	r6, [r2, #12]
 8005148:	3d1e      	subs	r5, #30
 800514a:	40a9      	lsls	r1, r5
 800514c:	ea26 0101 	bic.w	r1, r6, r1
 8005150:	40ab      	lsls	r3, r5
 8005152:	430b      	orrs	r3, r1
 8005154:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005156:	f1a0 0310 	sub.w	r3, r0, #16
 800515a:	2b01      	cmp	r3, #1
 800515c:	d925      	bls.n	80051aa <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800515e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8005160:	2300      	movs	r3, #0
 8005162:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8005166:	b002      	add	sp, #8
 8005168:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800516a:	2d0c      	cmp	r5, #12
 800516c:	f04f 051f 	mov.w	r5, #31
 8005170:	d809      	bhi.n	8005186 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8005172:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8005174:	3b23      	subs	r3, #35	; 0x23
 8005176:	409d      	lsls	r5, r3
 8005178:	ea26 0505 	bic.w	r5, r6, r5
 800517c:	fa00 f303 	lsl.w	r3, r0, r3
 8005180:	432b      	orrs	r3, r5
 8005182:	6313      	str	r3, [r2, #48]	; 0x30
 8005184:	e7d8      	b.n	8005138 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005186:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8005188:	3b41      	subs	r3, #65	; 0x41
 800518a:	409d      	lsls	r5, r3
 800518c:	ea26 0505 	bic.w	r5, r6, r5
 8005190:	fa00 f303 	lsl.w	r3, r0, r3
 8005194:	432b      	orrs	r3, r5
 8005196:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005198:	e7ce      	b.n	8005138 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800519a:	6910      	ldr	r0, [r2, #16]
 800519c:	40a9      	lsls	r1, r5
 800519e:	ea20 0101 	bic.w	r1, r0, r1
 80051a2:	40ab      	lsls	r3, r5
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6113      	str	r3, [r2, #16]
 80051a8:	e7d9      	b.n	800515e <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <HAL_ADC_ConfigChannel+0xf0>)
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d116      	bne.n	80051de <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80051b0:	6893      	ldr	r3, [r2, #8]
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	d4d3      	bmi.n	800515e <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80051b6:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051b8:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80051ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051be:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051c0:	d1cd      	bne.n	800515e <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051c2:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <HAL_ADC_ConfigChannel+0xf4>)
 80051c4:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <HAL_ADC_ConfigChannel+0xf8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80051cc:	230a      	movs	r3, #10
 80051ce:	4353      	muls	r3, r2
            wait_loop_index--;
 80051d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80051d2:	9b01      	ldr	r3, [sp, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0c2      	beq.n	800515e <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80051d8:	9b01      	ldr	r3, [sp, #4]
 80051da:	3b01      	subs	r3, #1
 80051dc:	e7f8      	b.n	80051d0 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80051e0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051e2:	f043 0320 	orr.w	r3, r3, #32
 80051e6:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80051e8:	e7ba      	b.n	8005160 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80051ea:	2002      	movs	r0, #2
 80051ec:	e7bb      	b.n	8005166 <HAL_ADC_ConfigChannel+0x66>
 80051ee:	bf00      	nop
 80051f0:	40012400 	.word	0x40012400
 80051f4:	2000004c 	.word	0x2000004c
 80051f8:	000f4240 	.word	0x000f4240

080051fc <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80051fc:	2300      	movs	r3, #0
{
 80051fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8005200:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005202:	6803      	ldr	r3, [r0, #0]
{
 8005204:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005206:	689a      	ldr	r2, [r3, #8]
 8005208:	07d2      	lsls	r2, r2, #31
 800520a:	d502      	bpl.n	8005212 <ADC_Enable+0x16>
  return HAL_OK;
 800520c:	2000      	movs	r0, #0
}
 800520e:	b003      	add	sp, #12
 8005210:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800521a:	4b14      	ldr	r3, [pc, #80]	; (800526c <ADC_Enable+0x70>)
 800521c:	4a14      	ldr	r2, [pc, #80]	; (8005270 <ADC_Enable+0x74>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8005224:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8005226:	9b01      	ldr	r3, [sp, #4]
 8005228:	b9e3      	cbnz	r3, 8005264 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800522a:	f7ff ff15 	bl	8005058 <HAL_GetTick>
 800522e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	07db      	lsls	r3, r3, #31
 8005236:	d4e9      	bmi.n	800520c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005238:	f7ff ff0e 	bl	8005058 <HAL_GetTick>
 800523c:	1b40      	subs	r0, r0, r5
 800523e:	2802      	cmp	r0, #2
 8005240:	d9f6      	bls.n	8005230 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f013 0301 	ands.w	r3, r3, #1
 800524a:	d1f1      	bne.n	8005230 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800524c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800524e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005250:	f042 0210 	orr.w	r2, r2, #16
 8005254:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005256:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8005258:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800525c:	f042 0201 	orr.w	r2, r2, #1
 8005260:	62e2      	str	r2, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8005262:	e7d4      	b.n	800520e <ADC_Enable+0x12>
      wait_loop_index--;
 8005264:	9b01      	ldr	r3, [sp, #4]
 8005266:	3b01      	subs	r3, #1
 8005268:	e7dc      	b.n	8005224 <ADC_Enable+0x28>
 800526a:	bf00      	nop
 800526c:	2000004c 	.word	0x2000004c
 8005270:	000f4240 	.word	0x000f4240

08005274 <HAL_ADC_Start_DMA>:
{
 8005274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_ADC_Start_DMA+0x108>)
{
 800527a:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 800527c:	6802      	ldr	r2, [r0, #0]
{
 800527e:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005280:	429a      	cmp	r2, r3
{
 8005282:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8005284:	d002      	beq.n	800528c <HAL_ADC_Start_DMA+0x18>
 8005286:	493e      	ldr	r1, [pc, #248]	; (8005380 <HAL_ADC_Start_DMA+0x10c>)
 8005288:	428a      	cmp	r2, r1
 800528a:	d103      	bne.n	8005294 <HAL_ADC_Start_DMA+0x20>
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8005292:	d16e      	bne.n	8005372 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8005294:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005298:	2b01      	cmp	r3, #1
 800529a:	d06c      	beq.n	8005376 <HAL_ADC_Start_DMA+0x102>
 800529c:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 800529e:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 80052a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 80052a4:	f7ff ffaa 	bl	80051fc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80052a8:	4606      	mov	r6, r0
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d15d      	bne.n	800536a <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 80052ae:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80052b0:	6821      	ldr	r1, [r4, #0]
 80052b2:	4b33      	ldr	r3, [pc, #204]	; (8005380 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 80052b4:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80052b8:	f025 0501 	bic.w	r5, r5, #1
 80052bc:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80052c0:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 80052c2:	62a5      	str	r5, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80052c4:	d104      	bne.n	80052d0 <HAL_ADC_Start_DMA+0x5c>
 80052c6:	4a2d      	ldr	r2, [pc, #180]	; (800537c <HAL_ADC_Start_DMA+0x108>)
 80052c8:	6853      	ldr	r3, [r2, #4]
 80052ca:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 80052ce:	d13e      	bne.n	800534e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80052d6:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052d8:	684b      	ldr	r3, [r1, #4]
 80052da:	055a      	lsls	r2, r3, #21
 80052dc:	d505      	bpl.n	80052ea <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80052de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80052e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052e8:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80052ec:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052ee:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052f2:	bf18      	it	ne
 80052f4:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80052f6:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80052f8:	bf18      	it	ne
 80052fa:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80052fe:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8005300:	2300      	movs	r3, #0
 8005302:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005306:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005308:	314c      	adds	r1, #76	; 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800530a:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800530c:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_ADC_Start_DMA+0x114>)
 800530e:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005310:	4b1e      	ldr	r3, [pc, #120]	; (800538c <HAL_ADC_Start_DMA+0x118>)
 8005312:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8005314:	f06f 0302 	mvn.w	r3, #2
 8005318:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800531c:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8005320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005324:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005328:	4643      	mov	r3, r8
 800532a:	f000 f96b 	bl	8005604 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	689a      	ldr	r2, [r3, #8]
 8005332:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8005336:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	bf0c      	ite	eq
 800533e:	f442 02a0 	orreq.w	r2, r2, #5242880	; 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8005342:	f442 1280 	orrne.w	r2, r2, #1048576	; 0x100000
 8005346:	609a      	str	r2, [r3, #8]
}
 8005348:	4630      	mov	r0, r6
 800534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800534e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005354:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8005356:	6853      	ldr	r3, [r2, #4]
 8005358:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800535a:	bf41      	itttt	mi
 800535c:	6aa0      	ldrmi	r0, [r4, #40]	; 0x28
 800535e:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8005362:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8005366:	62a0      	strmi	r0, [r4, #40]	; 0x28
 8005368:	e7bf      	b.n	80052ea <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 800536a:	2300      	movs	r3, #0
 800536c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8005370:	e7ea      	b.n	8005348 <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8005372:	2601      	movs	r6, #1
 8005374:	e7e8      	b.n	8005348 <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8005376:	2602      	movs	r6, #2
 8005378:	e7e6      	b.n	8005348 <HAL_ADC_Start_DMA+0xd4>
 800537a:	bf00      	nop
 800537c:	40012400 	.word	0x40012400
 8005380:	40012800 	.word	0x40012800
 8005384:	0800508b 	.word	0x0800508b
 8005388:	080050db 	.word	0x080050db
 800538c:	080050e7 	.word	0x080050e7

08005390 <ADC_ConversionStop_Disable>:
{
 8005390:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005392:	6803      	ldr	r3, [r0, #0]
{
 8005394:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005396:	689a      	ldr	r2, [r3, #8]
 8005398:	07d1      	lsls	r1, r2, #31
 800539a:	d401      	bmi.n	80053a0 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 800539c:	2000      	movs	r0, #0
}
 800539e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	f022 0201 	bic.w	r2, r2, #1
 80053a6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80053a8:	f7ff fe56 	bl	8005058 <HAL_GetTick>
 80053ac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	07db      	lsls	r3, r3, #31
 80053b4:	d5f2      	bpl.n	800539c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80053b6:	f7ff fe4f 	bl	8005058 <HAL_GetTick>
 80053ba:	1b40      	subs	r0, r0, r5
 80053bc:	2802      	cmp	r0, #2
 80053be:	d9f6      	bls.n	80053ae <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	07da      	lsls	r2, r3, #31
 80053c6:	d5f2      	bpl.n	80053ae <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ca:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053cc:	f043 0310 	orr.w	r3, r3, #16
 80053d0:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80053da:	e7e0      	b.n	800539e <ADC_ConversionStop_Disable+0xe>

080053dc <HAL_ADC_Init>:
{
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80053de:	4604      	mov	r4, r0
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d06e      	beq.n	80054c2 <HAL_ADC_Init+0xe6>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053e4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80053e6:	b923      	cbnz	r3, 80053f2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80053e8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80053ea:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80053ee:	f7fe fd7d 	bl	8003eec <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80053f2:	4620      	mov	r0, r4
 80053f4:	f7ff ffcc 	bl	8005390 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80053f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80053fa:	f013 0310 	ands.w	r3, r3, #16
 80053fe:	d162      	bne.n	80054c6 <HAL_ADC_Init+0xea>
 8005400:	2800      	cmp	r0, #0
 8005402:	d160      	bne.n	80054c6 <HAL_ADC_Init+0xea>
    ADC_STATE_CLR_SET(hadc->State,
 8005404:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005406:	69e5      	ldr	r5, [r4, #28]
 8005408:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800540a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800540e:	f022 0202 	bic.w	r2, r2, #2
 8005412:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005416:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005418:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800541a:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800541c:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800541e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005422:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005426:	d037      	beq.n	8005498 <HAL_ADC_Init+0xbc>
 8005428:	2d01      	cmp	r5, #1
 800542a:	bf14      	ite	ne
 800542c:	2700      	movne	r7, #0
 800542e:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005432:	7d26      	ldrb	r6, [r4, #20]
 8005434:	2e01      	cmp	r6, #1
 8005436:	d106      	bne.n	8005446 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005438:	bb82      	cbnz	r2, 800549c <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800543a:	69a2      	ldr	r2, [r4, #24]
 800543c:	3a01      	subs	r2, #1
 800543e:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8005442:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8005446:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005448:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800544c:	6856      	ldr	r6, [r2, #4]
 800544e:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 8005452:	ea46 0607 	orr.w	r6, r6, r7
 8005456:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8005458:	6897      	ldr	r7, [r2, #8]
 800545a:	4e1d      	ldr	r6, [pc, #116]	; (80054d0 <HAL_ADC_Init+0xf4>)
 800545c:	ea06 0607 	and.w	r6, r6, r7
 8005460:	ea46 0601 	orr.w	r6, r6, r1
 8005464:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005466:	d001      	beq.n	800546c <HAL_ADC_Init+0x90>
 8005468:	2d01      	cmp	r5, #1
 800546a:	d102      	bne.n	8005472 <HAL_ADC_Init+0x96>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800546c:	6923      	ldr	r3, [r4, #16]
 800546e:	3b01      	subs	r3, #1
 8005470:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8005472:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 8005474:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8005478:	432b      	orrs	r3, r5
 800547a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800547c:	6892      	ldr	r2, [r2, #8]
 800547e:	4b15      	ldr	r3, [pc, #84]	; (80054d4 <HAL_ADC_Init+0xf8>)
 8005480:	4013      	ands	r3, r2
 8005482:	4299      	cmp	r1, r3
 8005484:	d113      	bne.n	80054ae <HAL_ADC_Init+0xd2>
      ADC_CLEAR_ERRORCODE(hadc);
 8005486:	2300      	movs	r3, #0
 8005488:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 800548a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800548c:	f023 0303 	bic.w	r3, r3, #3
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8005496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005498:	462f      	mov	r7, r5
 800549a:	e7ca      	b.n	8005432 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800549c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800549e:	f042 0220 	orr.w	r2, r2, #32
 80054a2:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80054a6:	f042 0201 	orr.w	r2, r2, #1
 80054aa:	62e2      	str	r2, [r4, #44]	; 0x2c
 80054ac:	e7cb      	b.n	8005446 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 80054ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054b0:	f023 0312 	bic.w	r3, r3, #18
 80054b4:	f043 0310 	orr.w	r3, r3, #16
 80054b8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80054c2:	2001      	movs	r0, #1
 80054c4:	e7e7      	b.n	8005496 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80054c8:	f043 0310 	orr.w	r3, r3, #16
 80054cc:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80054ce:	e7f8      	b.n	80054c2 <HAL_ADC_Init+0xe6>
 80054d0:	ffe1f7fd 	.word	0xffe1f7fd
 80054d4:	ff1f0efe 	.word	0xff1f0efe

080054d8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054d8:	4907      	ldr	r1, [pc, #28]	; (80054f8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80054da:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054dc:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80054de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054e2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054e6:	0412      	lsls	r2, r2, #16
 80054e8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80054f4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80054f6:	4770      	bx	lr
 80054f8:	e000ed00 	.word	0xe000ed00

080054fc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80054fe:	b530      	push	{r4, r5, lr}
 8005500:	68dc      	ldr	r4, [r3, #12]
 8005502:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005506:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800550c:	2b04      	cmp	r3, #4
 800550e:	bf28      	it	cs
 8005510:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005512:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005514:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005518:	bf98      	it	ls
 800551a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005520:	bf88      	it	hi
 8005522:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005524:	ea21 0303 	bic.w	r3, r1, r3
 8005528:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800552a:	fa05 f404 	lsl.w	r4, r5, r4
 800552e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8005532:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005534:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005538:	bfac      	ite	ge
 800553a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553e:	4a07      	ldrlt	r2, [pc, #28]	; (800555c <HAL_NVIC_SetPriority+0x60>)
 8005540:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005544:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005546:	bfab      	itete	ge
 8005548:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800554c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005550:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005554:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005556:	bd30      	pop	{r4, r5, pc}
 8005558:	e000ed00 	.word	0xe000ed00
 800555c:	e000ed14 	.word	0xe000ed14

08005560 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005560:	2800      	cmp	r0, #0
 8005562:	db08      	blt.n	8005576 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005564:	2301      	movs	r3, #1
 8005566:	0942      	lsrs	r2, r0, #5
 8005568:	f000 001f 	and.w	r0, r0, #31
 800556c:	fa03 f000 	lsl.w	r0, r3, r0
 8005570:	4b01      	ldr	r3, [pc, #4]	; (8005578 <HAL_NVIC_EnableIRQ+0x18>)
 8005572:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005576:	4770      	bx	lr
 8005578:	e000e100 	.word	0xe000e100

0800557c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800557c:	3801      	subs	r0, #1
 800557e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005582:	d20a      	bcs.n	800559a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005584:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005586:	4b06      	ldr	r3, [pc, #24]	; (80055a0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005588:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800558a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800558c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005590:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005592:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005594:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005598:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800559a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000e010 	.word	0xe000e010
 80055a4:	e000ed00 	.word	0xe000ed00

080055a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055a8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80055aa:	b320      	cbz	r0, 80055f6 <HAL_DMA_Init+0x4e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80055ac:	2214      	movs	r2, #20
 80055ae:	6801      	ldr	r1, [r0, #0]
 80055b0:	4b12      	ldr	r3, [pc, #72]	; (80055fc <HAL_DMA_Init+0x54>)
 80055b2:	440b      	add	r3, r1
 80055b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80055bc:	4b10      	ldr	r3, [pc, #64]	; (8005600 <HAL_DMA_Init+0x58>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055be:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 80055c0:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055c2:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80055c6:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055c8:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055ca:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055ce:	4323      	orrs	r3, r4
 80055d0:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055d2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055d6:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80055d8:	6944      	ldr	r4, [r0, #20]
 80055da:	4323      	orrs	r3, r4
 80055dc:	6984      	ldr	r4, [r0, #24]
 80055de:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80055e0:	69c4      	ldr	r4, [r0, #28]
 80055e2:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 80055e4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80055e6:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80055e8:	f44f 7280 	mov.w	r2, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ec:	2300      	movs	r3, #0
  hdma->Lock = HAL_UNLOCKED;
 80055ee:	8402      	strh	r2, [r0, #32]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055f0:	6383      	str	r3, [r0, #56]	; 0x38

  return HAL_OK;
 80055f2:	4618      	mov	r0, r3
}
 80055f4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80055f6:	2001      	movs	r0, #1
 80055f8:	e7fc      	b.n	80055f4 <HAL_DMA_Init+0x4c>
 80055fa:	bf00      	nop
 80055fc:	bffdfff8 	.word	0xbffdfff8
 8005600:	40020000 	.word	0x40020000

08005604 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005604:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005606:	f890 4020 	ldrb.w	r4, [r0, #32]
 800560a:	2c01      	cmp	r4, #1
 800560c:	d034      	beq.n	8005678 <HAL_DMA_Start_IT+0x74>
 800560e:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005610:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8005614:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005618:	42a5      	cmp	r5, r4
 800561a:	f04f 0600 	mov.w	r6, #0
 800561e:	f04f 0402 	mov.w	r4, #2
 8005622:	d127      	bne.n	8005674 <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005624:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005628:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800562a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800562c:	6826      	ldr	r6, [r4, #0]
 800562e:	f026 0601 	bic.w	r6, r6, #1
 8005632:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005634:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8005638:	40bd      	lsls	r5, r7
 800563a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800563c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800563e:	6843      	ldr	r3, [r0, #4]
 8005640:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8005642:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005644:	bf0b      	itete	eq
 8005646:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005648:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800564a:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800564c:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800564e:	b14b      	cbz	r3, 8005664 <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005658:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800565a:	6823      	ldr	r3, [r4, #0]
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	6023      	str	r3, [r4, #0]
}
 8005662:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005664:	6823      	ldr	r3, [r4, #0]
 8005666:	f023 0304 	bic.w	r3, r3, #4
 800566a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	f043 030a 	orr.w	r3, r3, #10
 8005672:	e7f0      	b.n	8005656 <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 8005674:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8005678:	2002      	movs	r0, #2
 800567a:	e7f2      	b.n	8005662 <HAL_DMA_Start_IT+0x5e>

0800567c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800567c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8005680:	2b02      	cmp	r3, #2
 8005682:	d006      	beq.n	8005692 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005684:	2304      	movs	r3, #4
 8005686:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005688:	2300      	movs	r3, #0
 800568a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800568e:	2001      	movs	r0, #1
 8005690:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005692:	6803      	ldr	r3, [r0, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	f022 020e 	bic.w	r2, r2, #14
 800569a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	f022 0201 	bic.w	r2, r2, #1
 80056a2:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80056a4:	2301      	movs	r3, #1
 80056a6:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 80056aa:	408b      	lsls	r3, r1
 80056ac:	6053      	str	r3, [r2, #4]
  __HAL_UNLOCK(hdma);      
 80056ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80056b2:	8403      	strh	r3, [r0, #32]
  return status; 
 80056b4:	2000      	movs	r0, #0
}
 80056b6:	4770      	bx	lr

080056b8 <HAL_DMA_Abort_IT>:
{  
 80056b8:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80056ba:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d003      	beq.n	80056ca <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056c2:	2304      	movs	r3, #4
 80056c4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80056c6:	2001      	movs	r0, #1
}
 80056c8:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056ca:	6803      	ldr	r3, [r0, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	f022 020e 	bic.w	r2, r2, #14
 80056d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	f022 0201 	bic.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80056dc:	4a17      	ldr	r2, [pc, #92]	; (800573c <HAL_DMA_Abort_IT+0x84>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d01c      	beq.n	800571c <HAL_DMA_Abort_IT+0x64>
 80056e2:	3214      	adds	r2, #20
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d01b      	beq.n	8005720 <HAL_DMA_Abort_IT+0x68>
 80056e8:	3214      	adds	r2, #20
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01a      	beq.n	8005724 <HAL_DMA_Abort_IT+0x6c>
 80056ee:	3214      	adds	r2, #20
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01a      	beq.n	800572a <HAL_DMA_Abort_IT+0x72>
 80056f4:	3214      	adds	r2, #20
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01a      	beq.n	8005730 <HAL_DMA_Abort_IT+0x78>
 80056fa:	3214      	adds	r2, #20
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bf0c      	ite	eq
 8005700:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8005704:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8005708:	4a0d      	ldr	r2, [pc, #52]	; (8005740 <HAL_DMA_Abort_IT+0x88>)
 800570a:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800570c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005710:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8005712:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005714:	b17b      	cbz	r3, 8005736 <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 8005716:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8005718:	2000      	movs	r0, #0
 800571a:	e7d5      	b.n	80056c8 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800571c:	2301      	movs	r3, #1
 800571e:	e7f3      	b.n	8005708 <HAL_DMA_Abort_IT+0x50>
 8005720:	2310      	movs	r3, #16
 8005722:	e7f1      	b.n	8005708 <HAL_DMA_Abort_IT+0x50>
 8005724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005728:	e7ee      	b.n	8005708 <HAL_DMA_Abort_IT+0x50>
 800572a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800572e:	e7eb      	b.n	8005708 <HAL_DMA_Abort_IT+0x50>
 8005730:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005734:	e7e8      	b.n	8005708 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 8005736:	4618      	mov	r0, r3
 8005738:	e7c6      	b.n	80056c8 <HAL_DMA_Abort_IT+0x10>
 800573a:	bf00      	nop
 800573c:	40020008 	.word	0x40020008
 8005740:	40020000 	.word	0x40020000

08005744 <HAL_DMA_IRQHandler>:
{
 8005744:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005746:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005748:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800574a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800574c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800574e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005750:	4095      	lsls	r5, r2
 8005752:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8005754:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005756:	d032      	beq.n	80057be <HAL_DMA_IRQHandler+0x7a>
 8005758:	074d      	lsls	r5, r1, #29
 800575a:	d530      	bpl.n	80057be <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005760:	bf5e      	ittt	pl
 8005762:	681a      	ldrpl	r2, [r3, #0]
 8005764:	f022 0204 	bicpl.w	r2, r2, #4
 8005768:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800576a:	4a3d      	ldr	r2, [pc, #244]	; (8005860 <HAL_DMA_IRQHandler+0x11c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d019      	beq.n	80057a4 <HAL_DMA_IRQHandler+0x60>
 8005770:	3214      	adds	r2, #20
 8005772:	4293      	cmp	r3, r2
 8005774:	d018      	beq.n	80057a8 <HAL_DMA_IRQHandler+0x64>
 8005776:	3214      	adds	r2, #20
 8005778:	4293      	cmp	r3, r2
 800577a:	d017      	beq.n	80057ac <HAL_DMA_IRQHandler+0x68>
 800577c:	3214      	adds	r2, #20
 800577e:	4293      	cmp	r3, r2
 8005780:	d017      	beq.n	80057b2 <HAL_DMA_IRQHandler+0x6e>
 8005782:	3214      	adds	r2, #20
 8005784:	4293      	cmp	r3, r2
 8005786:	d017      	beq.n	80057b8 <HAL_DMA_IRQHandler+0x74>
 8005788:	3214      	adds	r2, #20
 800578a:	4293      	cmp	r3, r2
 800578c:	bf0c      	ite	eq
 800578e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8005792:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8005796:	4a33      	ldr	r2, [pc, #204]	; (8005864 <HAL_DMA_IRQHandler+0x120>)
 8005798:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800579a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800579c:	2b00      	cmp	r3, #0
 800579e:	d05c      	beq.n	800585a <HAL_DMA_IRQHandler+0x116>
}
 80057a0:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80057a2:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80057a4:	2304      	movs	r3, #4
 80057a6:	e7f6      	b.n	8005796 <HAL_DMA_IRQHandler+0x52>
 80057a8:	2340      	movs	r3, #64	; 0x40
 80057aa:	e7f4      	b.n	8005796 <HAL_DMA_IRQHandler+0x52>
 80057ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b0:	e7f1      	b.n	8005796 <HAL_DMA_IRQHandler+0x52>
 80057b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057b6:	e7ee      	b.n	8005796 <HAL_DMA_IRQHandler+0x52>
 80057b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80057bc:	e7eb      	b.n	8005796 <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80057be:	2502      	movs	r5, #2
 80057c0:	4095      	lsls	r5, r2
 80057c2:	4225      	tst	r5, r4
 80057c4:	d035      	beq.n	8005832 <HAL_DMA_IRQHandler+0xee>
 80057c6:	078d      	lsls	r5, r1, #30
 80057c8:	d533      	bpl.n	8005832 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	0694      	lsls	r4, r2, #26
 80057ce:	d406      	bmi.n	80057de <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	f022 020a 	bic.w	r2, r2, #10
 80057d6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80057d8:	2201      	movs	r2, #1
 80057da:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80057de:	4a20      	ldr	r2, [pc, #128]	; (8005860 <HAL_DMA_IRQHandler+0x11c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d019      	beq.n	8005818 <HAL_DMA_IRQHandler+0xd4>
 80057e4:	3214      	adds	r2, #20
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d018      	beq.n	800581c <HAL_DMA_IRQHandler+0xd8>
 80057ea:	3214      	adds	r2, #20
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d017      	beq.n	8005820 <HAL_DMA_IRQHandler+0xdc>
 80057f0:	3214      	adds	r2, #20
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d017      	beq.n	8005826 <HAL_DMA_IRQHandler+0xe2>
 80057f6:	3214      	adds	r2, #20
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d017      	beq.n	800582c <HAL_DMA_IRQHandler+0xe8>
 80057fc:	3214      	adds	r2, #20
 80057fe:	4293      	cmp	r3, r2
 8005800:	bf0c      	ite	eq
 8005802:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8005806:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800580a:	4a16      	ldr	r2, [pc, #88]	; (8005864 <HAL_DMA_IRQHandler+0x120>)
 800580c:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 800580e:	2300      	movs	r3, #0
 8005810:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8005814:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005816:	e7c1      	b.n	800579c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005818:	2302      	movs	r3, #2
 800581a:	e7f6      	b.n	800580a <HAL_DMA_IRQHandler+0xc6>
 800581c:	2320      	movs	r3, #32
 800581e:	e7f4      	b.n	800580a <HAL_DMA_IRQHandler+0xc6>
 8005820:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005824:	e7f1      	b.n	800580a <HAL_DMA_IRQHandler+0xc6>
 8005826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800582a:	e7ee      	b.n	800580a <HAL_DMA_IRQHandler+0xc6>
 800582c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005830:	e7eb      	b.n	800580a <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005832:	2508      	movs	r5, #8
 8005834:	4095      	lsls	r5, r2
 8005836:	4225      	tst	r5, r4
 8005838:	d00f      	beq.n	800585a <HAL_DMA_IRQHandler+0x116>
 800583a:	0709      	lsls	r1, r1, #28
 800583c:	d50d      	bpl.n	800585a <HAL_DMA_IRQHandler+0x116>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800583e:	6819      	ldr	r1, [r3, #0]
 8005840:	f021 010e 	bic.w	r1, r1, #14
 8005844:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005846:	2301      	movs	r3, #1
 8005848:	fa03 f202 	lsl.w	r2, r3, r2
 800584c:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800584e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8005850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005854:	8403      	strh	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8005856:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8005858:	e7a0      	b.n	800579c <HAL_DMA_IRQHandler+0x58>
}
 800585a:	bc70      	pop	{r4, r5, r6}
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40020008 	.word	0x40020008
 8005864:	40020000 	.word	0x40020000

08005868 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8005868:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <FLASH_SetErrorCode+0x48>)
 800586a:	68d3      	ldr	r3, [r2, #12]
 800586c:	f013 0310 	ands.w	r3, r3, #16
 8005870:	d005      	beq.n	800587e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005872:	4910      	ldr	r1, [pc, #64]	; (80058b4 <FLASH_SetErrorCode+0x4c>)
 8005874:	69cb      	ldr	r3, [r1, #28]
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800587c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800587e:	68d2      	ldr	r2, [r2, #12]
 8005880:	0750      	lsls	r0, r2, #29
 8005882:	d506      	bpl.n	8005892 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005884:	490b      	ldr	r1, [pc, #44]	; (80058b4 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8005886:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800588a:	69ca      	ldr	r2, [r1, #28]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005892:	4a07      	ldr	r2, [pc, #28]	; (80058b0 <FLASH_SetErrorCode+0x48>)
 8005894:	69d1      	ldr	r1, [r2, #28]
 8005896:	07c9      	lsls	r1, r1, #31
 8005898:	d508      	bpl.n	80058ac <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800589a:	4806      	ldr	r0, [pc, #24]	; (80058b4 <FLASH_SetErrorCode+0x4c>)
 800589c:	69c1      	ldr	r1, [r0, #28]
 800589e:	f041 0104 	orr.w	r1, r1, #4
 80058a2:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80058a4:	69d1      	ldr	r1, [r2, #28]
 80058a6:	f021 0101 	bic.w	r1, r1, #1
 80058aa:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80058ac:	60d3      	str	r3, [r2, #12]
}  
 80058ae:	4770      	bx	lr
 80058b0:	40022000 	.word	0x40022000
 80058b4:	200019b0 	.word	0x200019b0

080058b8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <HAL_FLASH_Unlock+0x1c>)
 80058ba:	6918      	ldr	r0, [r3, #16]
 80058bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058c0:	d007      	beq.n	80058d2 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80058c2:	4a05      	ldr	r2, [pc, #20]	; (80058d8 <HAL_FLASH_Unlock+0x20>)
 80058c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80058c6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80058ca:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80058cc:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 80058ce:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 80058d2:	4770      	bx	lr
 80058d4:	40022000 	.word	0x40022000
 80058d8:	45670123 	.word	0x45670123

080058dc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80058dc:	4a03      	ldr	r2, [pc, #12]	; (80058ec <HAL_FLASH_Lock+0x10>)
}
 80058de:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80058e0:	6913      	ldr	r3, [r2, #16]
 80058e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e6:	6113      	str	r3, [r2, #16]
}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40022000 	.word	0x40022000

080058f0 <FLASH_WaitForLastOperation>:
{
 80058f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80058f4:	f7ff fbb0 	bl	8005058 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80058f8:	4d11      	ldr	r5, [pc, #68]	; (8005940 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 80058fa:	4607      	mov	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80058fc:	462e      	mov	r6, r5
 80058fe:	68eb      	ldr	r3, [r5, #12]
 8005900:	07d8      	lsls	r0, r3, #31
 8005902:	d412      	bmi.n	800592a <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005904:	68eb      	ldr	r3, [r5, #12]
 8005906:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005908:	bf44      	itt	mi
 800590a:	2320      	movmi	r3, #32
 800590c:	60eb      	strmi	r3, [r5, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800590e:	68f3      	ldr	r3, [r6, #12]
 8005910:	06da      	lsls	r2, r3, #27
 8005912:	d406      	bmi.n	8005922 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005914:	69f3      	ldr	r3, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005916:	07db      	lsls	r3, r3, #31
 8005918:	d403      	bmi.n	8005922 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800591a:	68f0      	ldr	r0, [r6, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800591c:	f010 0004 	ands.w	r0, r0, #4
 8005920:	d007      	beq.n	8005932 <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8005922:	f7ff ffa1 	bl	8005868 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005926:	2001      	movs	r0, #1
 8005928:	e003      	b.n	8005932 <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 800592a:	1c63      	adds	r3, r4, #1
 800592c:	d0e7      	beq.n	80058fe <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800592e:	b90c      	cbnz	r4, 8005934 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8005930:	2003      	movs	r0, #3
}
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005934:	f7ff fb90 	bl	8005058 <HAL_GetTick>
 8005938:	1bc0      	subs	r0, r0, r7
 800593a:	42a0      	cmp	r0, r4
 800593c:	d9df      	bls.n	80058fe <FLASH_WaitForLastOperation+0xe>
 800593e:	e7f7      	b.n	8005930 <FLASH_WaitForLastOperation+0x40>
 8005940:	40022000 	.word	0x40022000

08005944 <HAL_FLASH_Program>:
{
 8005944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8005948:	4e25      	ldr	r6, [pc, #148]	; (80059e0 <HAL_FLASH_Program+0x9c>)
{
 800594a:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 800594c:	7e33      	ldrb	r3, [r6, #24]
{
 800594e:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8005950:	2b01      	cmp	r3, #1
{
 8005952:	4688      	mov	r8, r1
 8005954:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8005956:	d040      	beq.n	80059da <HAL_FLASH_Program+0x96>
 8005958:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800595a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800595e:	7633      	strb	r3, [r6, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005960:	f7ff ffc6 	bl	80058f0 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005964:	bba8      	cbnz	r0, 80059d2 <HAL_FLASH_Program+0x8e>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005966:	2d01      	cmp	r5, #1
 8005968:	d003      	beq.n	8005972 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 800596a:	2d02      	cmp	r5, #2
 800596c:	bf0c      	ite	eq
 800596e:	2502      	moveq	r5, #2
 8005970:	2504      	movne	r5, #4
 8005972:	f04f 0a00 	mov.w	sl, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005976:	4653      	mov	r3, sl
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005978:	f8df b068 	ldr.w	fp, [pc, #104]	; 80059e4 <HAL_FLASH_Program+0xa0>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800597c:	ea4f 140a 	mov.w	r4, sl, lsl #4
 8005980:	f1c4 0120 	rsb	r1, r4, #32
 8005984:	f1a4 0220 	sub.w	r2, r4, #32
 8005988:	fa07 f101 	lsl.w	r1, r7, r1
 800598c:	fa29 f404 	lsr.w	r4, r9, r4
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005990:	61f3      	str	r3, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005992:	430c      	orrs	r4, r1
 8005994:	fa27 f202 	lsr.w	r2, r7, r2
 8005998:	4314      	orrs	r4, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800599a:	f8db 2010 	ldr.w	r2, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800599e:	b2a4      	uxth	r4, r4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	f8cb 2010 	str.w	r2, [fp, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059a8:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 80059ac:	f828 401a 	strh.w	r4, [r8, sl, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80059b0:	f7ff ff9e 	bl	80058f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80059b4:	f8db 2010 	ldr.w	r2, [fp, #16]
 80059b8:	f022 0201 	bic.w	r2, r2, #1
 80059bc:	f8cb 2010 	str.w	r2, [fp, #16]
      if (status != HAL_OK)
 80059c0:	b938      	cbnz	r0, 80059d2 <HAL_FLASH_Program+0x8e>
    for (index = 0U; index < nbiterations; index++)
 80059c2:	f10a 0a01 	add.w	sl, sl, #1
 80059c6:	fa5f f28a 	uxtb.w	r2, sl
 80059ca:	4295      	cmp	r5, r2
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	d8d4      	bhi.n	800597c <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 80059d2:	2300      	movs	r3, #0
 80059d4:	7633      	strb	r3, [r6, #24]
}
 80059d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 80059da:	2002      	movs	r0, #2
 80059dc:	e7fb      	b.n	80059d6 <HAL_FLASH_Program+0x92>
 80059de:	bf00      	nop
 80059e0:	200019b0 	.word	0x200019b0
 80059e4:	40022000 	.word	0x40022000

080059e8 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80059e8:	2200      	movs	r2, #0
 80059ea:	4b06      	ldr	r3, [pc, #24]	; (8005a04 <FLASH_MassErase.isra.0+0x1c>)
 80059ec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80059ee:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <FLASH_MassErase.isra.0+0x20>)
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	f042 0204 	orr.w	r2, r2, #4
 80059f6:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059fe:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	200019b0 	.word	0x200019b0
 8005a08:	40022000 	.word	0x40022000

08005a0c <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4b06      	ldr	r3, [pc, #24]	; (8005a28 <FLASH_PageErase+0x1c>)
 8005a10:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005a12:	4b06      	ldr	r3, [pc, #24]	; (8005a2c <FLASH_PageErase+0x20>)
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	f042 0202 	orr.w	r2, r2, #2
 8005a1a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005a1c:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a24:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005a26:	4770      	bx	lr
 8005a28:	200019b0 	.word	0x200019b0
 8005a2c:	40022000 	.word	0x40022000

08005a30 <HAL_FLASHEx_Erase>:
{
 8005a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8005a34:	4e22      	ldr	r6, [pc, #136]	; (8005ac0 <HAL_FLASHEx_Erase+0x90>)
{
 8005a36:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8005a38:	7e33      	ldrb	r3, [r6, #24]
{
 8005a3a:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d03d      	beq.n	8005abc <HAL_FLASHEx_Erase+0x8c>
 8005a40:	2401      	movs	r4, #1
 8005a42:	7634      	strb	r4, [r6, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a44:	6803      	ldr	r3, [r0, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005a46:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d113      	bne.n	8005a76 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005a4e:	f7ff ff4f 	bl	80058f0 <FLASH_WaitForLastOperation>
 8005a52:	b120      	cbz	r0, 8005a5e <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a54:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8005a56:	2300      	movs	r3, #0
 8005a58:	7633      	strb	r3, [r6, #24]
}
 8005a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8005a5e:	f7ff ffc3 	bl	80059e8 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a66:	f7ff ff43 	bl	80058f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005a6a:	4a16      	ldr	r2, [pc, #88]	; (8005ac4 <HAL_FLASHEx_Erase+0x94>)
 8005a6c:	6913      	ldr	r3, [r2, #16]
 8005a6e:	f023 0304 	bic.w	r3, r3, #4
 8005a72:	6113      	str	r3, [r2, #16]
 8005a74:	e7ef      	b.n	8005a56 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005a76:	f7ff ff3b 	bl	80058f0 <FLASH_WaitForLastOperation>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d1ea      	bne.n	8005a54 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8005a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a82:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a86:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8005a88:	68af      	ldr	r7, [r5, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005a8a:	4c0e      	ldr	r4, [pc, #56]	; (8005ac4 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005a8c:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
 8005a90:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8005a94:	42bb      	cmp	r3, r7
 8005a96:	d9de      	bls.n	8005a56 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8005a98:	4638      	mov	r0, r7
 8005a9a:	f7ff ffb7 	bl	8005a0c <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005aa2:	f7ff ff25 	bl	80058f0 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	f023 0302 	bic.w	r3, r3, #2
 8005aac:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8005aae:	b110      	cbz	r0, 8005ab6 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8005ab0:	f8c8 7000 	str.w	r7, [r8]
            break;
 8005ab4:	e7cf      	b.n	8005a56 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8005ab6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005aba:	e7e7      	b.n	8005a8c <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8005abc:	2002      	movs	r0, #2
 8005abe:	e7cc      	b.n	8005a5a <HAL_FLASHEx_Erase+0x2a>
 8005ac0:	200019b0 	.word	0x200019b0
 8005ac4:	40022000 	.word	0x40022000

08005ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005acc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8005ace:	4616      	mov	r6, r2
 8005ad0:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <HAL_GPIO_Init+0x19c>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005ad2:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8005c74 <HAL_GPIO_Init+0x1ac>
 8005ad6:	f8df e1a0 	ldr.w	lr, [pc, #416]	; 8005c78 <HAL_GPIO_Init+0x1b0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ada:	680d      	ldr	r5, [r1, #0]
 8005adc:	fa35 f406 	lsrs.w	r4, r5, r6
 8005ae0:	d102      	bne.n	8005ae8 <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8005ae2:	b003      	add	sp, #12
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8005ae8:	f04f 0801 	mov.w	r8, #1
 8005aec:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005af0:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8005af4:	ea38 0505 	bics.w	r5, r8, r5
 8005af8:	d17c      	bne.n	8005bf4 <HAL_GPIO_Init+0x12c>
      switch (GPIO_Init->Mode)
 8005afa:	684d      	ldr	r5, [r1, #4]
 8005afc:	2d03      	cmp	r5, #3
 8005afe:	d807      	bhi.n	8005b10 <HAL_GPIO_Init+0x48>
 8005b00:	3d01      	subs	r5, #1
 8005b02:	2d02      	cmp	r5, #2
 8005b04:	f200 8088 	bhi.w	8005c18 <HAL_GPIO_Init+0x150>
 8005b08:	e8df f005 	tbb	[pc, r5]
 8005b0c:	9b96      	.short	0x9b96
 8005b0e:	a1          	.byte	0xa1
 8005b0f:	00          	.byte	0x00
 8005b10:	2d12      	cmp	r5, #18
 8005b12:	f000 8099 	beq.w	8005c48 <HAL_GPIO_Init+0x180>
 8005b16:	d86f      	bhi.n	8005bf8 <HAL_GPIO_Init+0x130>
 8005b18:	2d11      	cmp	r5, #17
 8005b1a:	f000 808f 	beq.w	8005c3c <HAL_GPIO_Init+0x174>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b1e:	2cff      	cmp	r4, #255	; 0xff
 8005b20:	bf98      	it	ls
 8005b22:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b24:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005b28:	bf88      	it	hi
 8005b2a:	f100 0a04 	addhi.w	sl, r0, #4
 8005b2e:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b32:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005b36:	bf88      	it	hi
 8005b38:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005b3a:	fa09 fb05 	lsl.w	fp, r9, r5
 8005b3e:	ea28 080b 	bic.w	r8, r8, fp
 8005b42:	fa02 f505 	lsl.w	r5, r2, r5
 8005b46:	ea48 0505 	orr.w	r5, r8, r5
 8005b4a:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b4e:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8005b52:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8005b56:	d04d      	beq.n	8005bf4 <HAL_GPIO_Init+0x12c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b58:	4f43      	ldr	r7, [pc, #268]	; (8005c68 <HAL_GPIO_Init+0x1a0>)
 8005b5a:	f026 0803 	bic.w	r8, r6, #3
 8005b5e:	69bd      	ldr	r5, [r7, #24]
 8005b60:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8005b64:	f045 0501 	orr.w	r5, r5, #1
 8005b68:	61bd      	str	r5, [r7, #24]
 8005b6a:	69bd      	ldr	r5, [r7, #24]
 8005b6c:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8005b70:	f005 0501 	and.w	r5, r5, #1
 8005b74:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b76:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b7a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b7c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8005b80:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b84:	fa09 f90b 	lsl.w	r9, r9, fp
 8005b88:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b8c:	4d37      	ldr	r5, [pc, #220]	; (8005c6c <HAL_GPIO_Init+0x1a4>)
 8005b8e:	42a8      	cmp	r0, r5
 8005b90:	d061      	beq.n	8005c56 <HAL_GPIO_Init+0x18e>
 8005b92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b96:	42a8      	cmp	r0, r5
 8005b98:	d05f      	beq.n	8005c5a <HAL_GPIO_Init+0x192>
 8005b9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b9e:	42a8      	cmp	r0, r5
 8005ba0:	d05d      	beq.n	8005c5e <HAL_GPIO_Init+0x196>
 8005ba2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ba6:	42a8      	cmp	r0, r5
 8005ba8:	bf0c      	ite	eq
 8005baa:	2503      	moveq	r5, #3
 8005bac:	2504      	movne	r5, #4
 8005bae:	fa05 f50b 	lsl.w	r5, r5, fp
 8005bb2:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8005bb6:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8005bba:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bbc:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8005bc0:	bf14      	ite	ne
 8005bc2:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005bc4:	43a5      	biceq	r5, r4
 8005bc6:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8005bc8:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bca:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8005bce:	bf14      	ite	ne
 8005bd0:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005bd2:	43a5      	biceq	r5, r4
 8005bd4:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bd6:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005bd8:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8005bdc:	bf14      	ite	ne
 8005bde:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005be0:	43a5      	biceq	r5, r4
 8005be2:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8005be4:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005be6:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8005bea:	bf14      	ite	ne
 8005bec:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005bee:	ea25 0404 	biceq.w	r4, r5, r4
 8005bf2:	60dc      	str	r4, [r3, #12]
	position++;
 8005bf4:	3601      	adds	r6, #1
 8005bf6:	e770      	b.n	8005ada <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8005bf8:	4f1d      	ldr	r7, [pc, #116]	; (8005c70 <HAL_GPIO_Init+0x1a8>)
 8005bfa:	42bd      	cmp	r5, r7
 8005bfc:	d00c      	beq.n	8005c18 <HAL_GPIO_Init+0x150>
 8005bfe:	d817      	bhi.n	8005c30 <HAL_GPIO_Init+0x168>
 8005c00:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005c7c <HAL_GPIO_Init+0x1b4>
 8005c04:	454d      	cmp	r5, r9
 8005c06:	d007      	beq.n	8005c18 <HAL_GPIO_Init+0x150>
 8005c08:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8005c0c:	454d      	cmp	r5, r9
 8005c0e:	d003      	beq.n	8005c18 <HAL_GPIO_Init+0x150>
 8005c10:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8005c14:	454d      	cmp	r5, r9
 8005c16:	d182      	bne.n	8005b1e <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c18:	688a      	ldr	r2, [r1, #8]
 8005c1a:	b1d2      	cbz	r2, 8005c52 <HAL_GPIO_Init+0x18a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c1c:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8005c1e:	bf08      	it	eq
 8005c20:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c24:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8005c28:	bf18      	it	ne
 8005c2a:	f8c0 8014 	strne.w	r8, [r0, #20]
 8005c2e:	e776      	b.n	8005b1e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8005c30:	4565      	cmp	r5, ip
 8005c32:	d0f1      	beq.n	8005c18 <HAL_GPIO_Init+0x150>
 8005c34:	4575      	cmp	r5, lr
 8005c36:	e7ee      	b.n	8005c16 <HAL_GPIO_Init+0x14e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c38:	68ca      	ldr	r2, [r1, #12]
          break;
 8005c3a:	e770      	b.n	8005b1e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c3c:	68ca      	ldr	r2, [r1, #12]
 8005c3e:	3204      	adds	r2, #4
          break;
 8005c40:	e76d      	b.n	8005b1e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005c42:	68ca      	ldr	r2, [r1, #12]
 8005c44:	3208      	adds	r2, #8
          break;
 8005c46:	e76a      	b.n	8005b1e <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005c48:	68ca      	ldr	r2, [r1, #12]
 8005c4a:	320c      	adds	r2, #12
          break;
 8005c4c:	e767      	b.n	8005b1e <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8005c4e:	2200      	movs	r2, #0
 8005c50:	e765      	b.n	8005b1e <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c52:	2204      	movs	r2, #4
 8005c54:	e763      	b.n	8005b1e <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c56:	2500      	movs	r5, #0
 8005c58:	e7a9      	b.n	8005bae <HAL_GPIO_Init+0xe6>
 8005c5a:	2501      	movs	r5, #1
 8005c5c:	e7a7      	b.n	8005bae <HAL_GPIO_Init+0xe6>
 8005c5e:	2502      	movs	r5, #2
 8005c60:	e7a5      	b.n	8005bae <HAL_GPIO_Init+0xe6>
 8005c62:	bf00      	nop
 8005c64:	40010400 	.word	0x40010400
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40010800 	.word	0x40010800
 8005c70:	10220000 	.word	0x10220000
 8005c74:	10310000 	.word	0x10310000
 8005c78:	10320000 	.word	0x10320000
 8005c7c:	10120000 	.word	0x10120000

08005c80 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c80:	6883      	ldr	r3, [r0, #8]
 8005c82:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005c84:	bf14      	ite	ne
 8005c86:	2001      	movne	r0, #1
 8005c88:	2000      	moveq	r0, #0
 8005c8a:	4770      	bx	lr

08005c8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c8c:	b10a      	cbz	r2, 8005c92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c8e:	6101      	str	r1, [r0, #16]
  }
}
 8005c90:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005c92:	0409      	lsls	r1, r1, #16
 8005c94:	e7fb      	b.n	8005c8e <HAL_GPIO_WritePin+0x2>
	...

08005c98 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c98:	4a04      	ldr	r2, [pc, #16]	; (8005cac <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8005c9a:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c9c:	6951      	ldr	r1, [r2, #20]
 8005c9e:	4201      	tst	r1, r0
 8005ca0:	d002      	beq.n	8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ca2:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ca4:	f7fb fa76 	bl	8001194 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ca8:	bd08      	pop	{r3, pc}
 8005caa:	bf00      	nop
 8005cac:	40010400 	.word	0x40010400

08005cb0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cb0:	6801      	ldr	r1, [r0, #0]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	694b      	ldr	r3, [r1, #20]
 8005cb6:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005cba:	d010      	beq.n	8005cde <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cbc:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005cc0:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cc2:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc4:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005cc6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cca:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cce:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005cd4:	f043 0304 	orr.w	r3, r3, #4
 8005cd8:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8005cda:	2001      	movs	r0, #1
 8005cdc:	4770      	bx	lr
  }
  return HAL_OK;
 8005cde:	4618      	mov	r0, r3
}
 8005ce0:	4770      	bx	lr

08005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8005ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	460f      	mov	r7, r1
 8005cea:	4616      	mov	r6, r2
 8005cec:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005cee:	6825      	ldr	r5, [r4, #0]
 8005cf0:	6968      	ldr	r0, [r5, #20]
 8005cf2:	ea27 0000 	bic.w	r0, r7, r0
 8005cf6:	b280      	uxth	r0, r0
 8005cf8:	b1b8      	cbz	r0, 8005d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cfa:	696b      	ldr	r3, [r5, #20]
 8005cfc:	055a      	lsls	r2, r3, #21
 8005cfe:	d516      	bpl.n	8005d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d00:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d02:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d08:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d0a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8005d0e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d1c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d1e:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8005d22:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d24:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005d26:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005d2e:	1c73      	adds	r3, r6, #1
 8005d30:	d0de      	beq.n	8005cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d32:	f7ff f991 	bl	8005058 <HAL_GetTick>
 8005d36:	eba0 0008 	sub.w	r0, r0, r8
 8005d3a:	42b0      	cmp	r0, r6
 8005d3c:	d801      	bhi.n	8005d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8005d3e:	2e00      	cmp	r6, #0
 8005d40:	d1d5      	bne.n	8005cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d42:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d44:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d46:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d48:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d4c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005d52:	f042 0220 	orr.w	r2, r2, #32
 8005d56:	e7e4      	b.n	8005d22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08005d58 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	460d      	mov	r5, r1
 8005d5e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	075b      	lsls	r3, r3, #29
 8005d66:	d501      	bpl.n	8005d6c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005d68:	2000      	movs	r0, #0
}
 8005d6a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f7ff ff9f 	bl	8005cb0 <I2C_IsAcknowledgeFailed>
 8005d72:	b9a8      	cbnz	r0, 8005da0 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005d74:	1c6a      	adds	r2, r5, #1
 8005d76:	d0f3      	beq.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d78:	f7ff f96e 	bl	8005058 <HAL_GetTick>
 8005d7c:	1b80      	subs	r0, r0, r6
 8005d7e:	42a8      	cmp	r0, r5
 8005d80:	d801      	bhi.n	8005d86 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005d82:	2d00      	cmp	r5, #0
 8005d84:	d1ec      	bne.n	8005d60 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d86:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d88:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005d8a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005d8c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d94:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005d96:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	f042 0220 	orr.w	r2, r2, #32
 8005d9e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005da0:	2001      	movs	r0, #1
 8005da2:	e7e2      	b.n	8005d6a <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08005da4 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4604      	mov	r4, r0
 8005da8:	460d      	mov	r5, r1
 8005daa:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005dac:	6821      	ldr	r1, [r4, #0]
 8005dae:	694b      	ldr	r3, [r1, #20]
 8005db0:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005db4:	d001      	beq.n	8005dba <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005db6:	2000      	movs	r0, #0
 8005db8:	e010      	b.n	8005ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dba:	694a      	ldr	r2, [r1, #20]
 8005dbc:	06d2      	lsls	r2, r2, #27
 8005dbe:	d50e      	bpl.n	8005dde <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dc0:	f06f 0210 	mvn.w	r2, #16
 8005dc4:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dc6:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dc8:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dca:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dd2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005dd4:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dd6:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005dd8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7ff f93b 	bl	8005058 <HAL_GetTick>
 8005de2:	1b80      	subs	r0, r0, r6
 8005de4:	42a8      	cmp	r0, r5
 8005de6:	d801      	bhi.n	8005dec <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	d1df      	bne.n	8005dac <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005dec:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005dee:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005df0:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005df2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005df6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dfa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005dfc:	f042 0220 	orr.w	r2, r2, #32
 8005e00:	e7e8      	b.n	8005dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08005e02 <I2C_WaitOnFlagUntilTimeout>:
{
 8005e02:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8005e06:	4606      	mov	r6, r0
 8005e08:	460f      	mov	r7, r1
 8005e0a:	4691      	mov	r9, r2
 8005e0c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e0e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005e12:	6833      	ldr	r3, [r6, #0]
 8005e14:	f1ba 0f01 	cmp.w	sl, #1
 8005e18:	bf0c      	ite	eq
 8005e1a:	695c      	ldreq	r4, [r3, #20]
 8005e1c:	699c      	ldrne	r4, [r3, #24]
 8005e1e:	ea27 0404 	bic.w	r4, r7, r4
 8005e22:	b2a4      	uxth	r4, r4
 8005e24:	fab4 f484 	clz	r4, r4
 8005e28:	0964      	lsrs	r4, r4, #5
 8005e2a:	45a1      	cmp	r9, r4
 8005e2c:	d001      	beq.n	8005e32 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8005e2e:	2000      	movs	r0, #0
 8005e30:	e017      	b.n	8005e62 <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8005e32:	1c6a      	adds	r2, r5, #1
 8005e34:	d0ee      	beq.n	8005e14 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e36:	f7ff f90f 	bl	8005058 <HAL_GetTick>
 8005e3a:	9b08      	ldr	r3, [sp, #32]
 8005e3c:	1ac0      	subs	r0, r0, r3
 8005e3e:	42a8      	cmp	r0, r5
 8005e40:	d801      	bhi.n	8005e46 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005e42:	2d00      	cmp	r5, #0
 8005e44:	d1e5      	bne.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e46:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e48:	2220      	movs	r2, #32
        __HAL_UNLOCK(hi2c);
 8005e4a:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e4c:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e4e:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e52:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e56:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005e58:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e5c:	f042 0220 	orr.w	r2, r2, #32
 8005e60:	6432      	str	r2, [r6, #64]	; 0x40
}
 8005e62:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08005e66 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005e66:	b570      	push	{r4, r5, r6, lr}
 8005e68:	4604      	mov	r4, r0
 8005e6a:	460d      	mov	r5, r1
 8005e6c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e6e:	6823      	ldr	r3, [r4, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	061b      	lsls	r3, r3, #24
 8005e74:	d501      	bpl.n	8005e7a <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005e76:	2000      	movs	r0, #0
}
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f7ff ff18 	bl	8005cb0 <I2C_IsAcknowledgeFailed>
 8005e80:	b9a8      	cbnz	r0, 8005eae <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005e82:	1c6a      	adds	r2, r5, #1
 8005e84:	d0f3      	beq.n	8005e6e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e86:	f7ff f8e7 	bl	8005058 <HAL_GetTick>
 8005e8a:	1b80      	subs	r0, r0, r6
 8005e8c:	42a8      	cmp	r0, r5
 8005e8e:	d801      	bhi.n	8005e94 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	d1ec      	bne.n	8005e6e <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e94:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e96:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e98:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e9a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ea2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005ea4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ea8:	f042 0220 	orr.w	r2, r2, #32
 8005eac:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8005eae:	2001      	movs	r0, #1
 8005eb0:	e7e2      	b.n	8005e78 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08005eb4 <I2C_RequestMemoryWrite>:
{
 8005eb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eb8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eba:	6802      	ldr	r2, [r0, #0]
{
 8005ebc:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ebe:	6813      	ldr	r3, [r2, #0]
{
 8005ec0:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec6:	6013      	str	r3, [r2, #0]
{
 8005ec8:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8005ecc:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ece:	463b      	mov	r3, r7
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ed6:	f8cd 8000 	str.w	r8, [sp]
{
 8005eda:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005edc:	f7ff ff91 	bl	8005e02 <I2C_WaitOnFlagUntilTimeout>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	b138      	cbz	r0, 8005ef4 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	05db      	lsls	r3, r3, #23
 8005ee8:	d502      	bpl.n	8005ef0 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eee:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005ef0:	2003      	movs	r0, #3
 8005ef2:	e00a      	b.n	8005f0a <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ef4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8005ef8:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005efa:	463a      	mov	r2, r7
 8005efc:	4643      	mov	r3, r8
 8005efe:	4620      	mov	r0, r4
 8005f00:	4917      	ldr	r1, [pc, #92]	; (8005f60 <I2C_RequestMemoryWrite+0xac>)
 8005f02:	f7ff feee 	bl	8005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f06:	b118      	cbz	r0, 8005f10 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8005f08:	2001      	movs	r0, #1
}
 8005f0a:	b005      	add	sp, #20
 8005f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	9003      	str	r0, [sp, #12]
 8005f14:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f16:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f18:	9203      	str	r2, [sp, #12]
 8005f1a:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f1c:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1e:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f20:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f22:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f24:	f7ff ff9f 	bl	8005e66 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f28:	b140      	cbz	r0, 8005f3c <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f2c:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f2e:	bf01      	itttt	eq
 8005f30:	6822      	ldreq	r2, [r4, #0]
 8005f32:	6813      	ldreq	r3, [r2, #0]
 8005f34:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005f38:	6013      	streq	r3, [r2, #0]
 8005f3a:	e7e5      	b.n	8005f08 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f3c:	f1b9 0f01 	cmp.w	r9, #1
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	d102      	bne.n	8005f4a <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f44:	b2ed      	uxtb	r5, r5
 8005f46:	611d      	str	r5, [r3, #16]
 8005f48:	e7df      	b.n	8005f0a <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f4a:	0a2a      	lsrs	r2, r5, #8
 8005f4c:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4e:	4639      	mov	r1, r7
 8005f50:	4642      	mov	r2, r8
 8005f52:	4620      	mov	r0, r4
 8005f54:	f7ff ff87 	bl	8005e66 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d1e6      	bne.n	8005f2a <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	e7f1      	b.n	8005f44 <I2C_RequestMemoryWrite+0x90>
 8005f60:	00010002 	.word	0x00010002

08005f64 <I2C_RequestMemoryRead>:
{
 8005f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f68:	469a      	mov	sl, r3
 8005f6a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6e:	6803      	ldr	r3, [r0, #0]
{
 8005f70:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f72:	681a      	ldr	r2, [r3, #0]
{
 8005f74:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f7a:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f7c:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f7e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f86:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f88:	463b      	mov	r3, r7
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8cd 8000 	str.w	r8, [sp]
{
 8005f90:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f92:	f7ff ff36 	bl	8005e02 <I2C_WaitOnFlagUntilTimeout>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	b148      	cbz	r0, 8005fae <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f9a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f9c:	05db      	lsls	r3, r3, #23
 8005f9e:	d502      	bpl.n	8005fa6 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fa4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8005fa6:	2003      	movs	r0, #3
}
 8005fa8:	b004      	add	sp, #16
 8005faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005fae:	fa5f f986 	uxtb.w	r9, r6
 8005fb2:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8005fb6:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fb8:	463a      	mov	r2, r7
 8005fba:	4643      	mov	r3, r8
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4929      	ldr	r1, [pc, #164]	; (8006064 <I2C_RequestMemoryRead+0x100>)
 8005fc0:	f7ff fe8f 	bl	8005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fc4:	b108      	cbz	r0, 8005fca <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	e7ee      	b.n	8005fa8 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	9003      	str	r0, [sp, #12]
 8005fce:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd0:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd2:	9203      	str	r2, [sp, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fd6:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd8:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fda:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fdc:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fde:	f7ff ff42 	bl	8005e66 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe2:	b140      	cbz	r0, 8005ff6 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fe6:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe8:	bf01      	itttt	eq
 8005fea:	6822      	ldreq	r2, [r4, #0]
 8005fec:	6813      	ldreq	r3, [r2, #0]
 8005fee:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005ff2:	6013      	streq	r3, [r2, #0]
 8005ff4:	e7e7      	b.n	8005fc6 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ff6:	f1ba 0f01 	cmp.w	sl, #1
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	d11a      	bne.n	8006034 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ffe:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006000:	4642      	mov	r2, r8
 8006002:	4639      	mov	r1, r7
 8006004:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006006:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006008:	f7ff ff2d 	bl	8005e66 <I2C_WaitOnTXEFlagUntilTimeout>
 800600c:	4602      	mov	r2, r0
 800600e:	2800      	cmp	r0, #0
 8006010:	d1e8      	bne.n	8005fe4 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006012:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006014:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006016:	680b      	ldr	r3, [r1, #0]
 8006018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601c:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800601e:	463b      	mov	r3, r7
 8006020:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006024:	f8cd 8000 	str.w	r8, [sp]
 8006028:	f7ff feeb 	bl	8005e02 <I2C_WaitOnFlagUntilTimeout>
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	b160      	cbz	r0, 800604a <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006030:	6813      	ldr	r3, [r2, #0]
 8006032:	e7b3      	b.n	8005f9c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006034:	0a2a      	lsrs	r2, r5, #8
 8006036:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006038:	4639      	mov	r1, r7
 800603a:	4642      	mov	r2, r8
 800603c:	4620      	mov	r0, r4
 800603e:	f7ff ff12 	bl	8005e66 <I2C_WaitOnTXEFlagUntilTimeout>
 8006042:	2800      	cmp	r0, #0
 8006044:	d1ce      	bne.n	8005fe4 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	e7d9      	b.n	8005ffe <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800604a:	f049 0301 	orr.w	r3, r9, #1
 800604e:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006050:	4620      	mov	r0, r4
 8006052:	4643      	mov	r3, r8
 8006054:	463a      	mov	r2, r7
 8006056:	4903      	ldr	r1, [pc, #12]	; (8006064 <I2C_RequestMemoryRead+0x100>)
 8006058:	f7ff fe43 	bl	8005ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 800605c:	3800      	subs	r0, #0
 800605e:	bf18      	it	ne
 8006060:	2001      	movne	r0, #1
 8006062:	e7a1      	b.n	8005fa8 <I2C_RequestMemoryRead+0x44>
 8006064:	00010002 	.word	0x00010002

08006068 <HAL_I2C_Init>:
{
 8006068:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800606a:	4604      	mov	r4, r0
 800606c:	b908      	cbnz	r0, 8006072 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800606e:	2001      	movs	r0, #1
}
 8006070:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006072:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006076:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800607a:	b91b      	cbnz	r3, 8006084 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800607c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8006080:	f7fd ff7e 	bl	8003f80 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006084:	2324      	movs	r3, #36	; 0x24
 8006086:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	f022 0201 	bic.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800609a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060a2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80060a4:	f000 fcf6 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80060a8:	4a3f      	ldr	r2, [pc, #252]	; (80061a8 <HAL_I2C_Init+0x140>)
 80060aa:	6863      	ldr	r3, [r4, #4]
 80060ac:	4293      	cmp	r3, r2
 80060ae:	bf94      	ite	ls
 80060b0:	4a3e      	ldrls	r2, [pc, #248]	; (80061ac <HAL_I2C_Init+0x144>)
 80060b2:	4a3f      	ldrhi	r2, [pc, #252]	; (80061b0 <HAL_I2C_Init+0x148>)
 80060b4:	4290      	cmp	r0, r2
 80060b6:	bf8c      	ite	hi
 80060b8:	2200      	movhi	r2, #0
 80060ba:	2201      	movls	r2, #1
 80060bc:	2a00      	cmp	r2, #0
 80060be:	d1d6      	bne.n	800606e <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 80060c0:	4e3c      	ldr	r6, [pc, #240]	; (80061b4 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060c2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80060c4:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80060c8:	6851      	ldr	r1, [r2, #4]
 80060ca:	3801      	subs	r0, #1
 80060cc:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80060d0:	4331      	orrs	r1, r6
 80060d2:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80060d4:	4934      	ldr	r1, [pc, #208]	; (80061a8 <HAL_I2C_Init+0x140>)
 80060d6:	6a15      	ldr	r5, [r2, #32]
 80060d8:	428b      	cmp	r3, r1
 80060da:	bf81      	itttt	hi
 80060dc:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80060e0:	4371      	mulhi	r1, r6
 80060e2:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80060e6:	fbb1 f1f6 	udivhi	r1, r1, r6
 80060ea:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80060ee:	bf94      	ite	ls
 80060f0:	1c71      	addls	r1, r6, #1
 80060f2:	3101      	addhi	r1, #1
 80060f4:	4329      	orrs	r1, r5
 80060f6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80060f8:	69d1      	ldr	r1, [r2, #28]
 80060fa:	4d2b      	ldr	r5, [pc, #172]	; (80061a8 <HAL_I2C_Init+0x140>)
 80060fc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8006100:	42ab      	cmp	r3, r5
 8006102:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006106:	d832      	bhi.n	800616e <HAL_I2C_Init+0x106>
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	fbb0 f0f3 	udiv	r0, r0, r3
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	f640 70fc 	movw	r0, #4092	; 0xffc
 8006114:	4203      	tst	r3, r0
 8006116:	d042      	beq.n	800619e <HAL_I2C_Init+0x136>
 8006118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800611c:	430b      	orrs	r3, r1
 800611e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006120:	6811      	ldr	r1, [r2, #0]
 8006122:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8006126:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 800612a:	4303      	orrs	r3, r0
 800612c:	430b      	orrs	r3, r1
 800612e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006130:	6891      	ldr	r1, [r2, #8]
 8006132:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8006136:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800613a:	4303      	orrs	r3, r0
 800613c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006140:	430b      	orrs	r3, r1
 8006142:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006144:	68d1      	ldr	r1, [r2, #12]
 8006146:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800614a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800614e:	4303      	orrs	r3, r0
 8006150:	430b      	orrs	r3, r1
 8006152:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006154:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006156:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8006158:	f043 0301 	orr.w	r3, r3, #1
 800615c:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800615e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006160:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006162:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006166:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006168:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800616c:	e780      	b.n	8006070 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800616e:	68a5      	ldr	r5, [r4, #8]
 8006170:	b955      	cbnz	r5, 8006188 <HAL_I2C_Init+0x120>
 8006172:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006176:	fbb0 f3f3 	udiv	r3, r0, r3
 800617a:	3301      	adds	r3, #1
 800617c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006180:	b17b      	cbz	r3, 80061a2 <HAL_I2C_Init+0x13a>
 8006182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006186:	e7c9      	b.n	800611c <HAL_I2C_Init+0xb4>
 8006188:	2519      	movs	r5, #25
 800618a:	436b      	muls	r3, r5
 800618c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006190:	3301      	adds	r3, #1
 8006192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006196:	b123      	cbz	r3, 80061a2 <HAL_I2C_Init+0x13a>
 8006198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800619c:	e7be      	b.n	800611c <HAL_I2C_Init+0xb4>
 800619e:	2304      	movs	r3, #4
 80061a0:	e7bc      	b.n	800611c <HAL_I2C_Init+0xb4>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e7ba      	b.n	800611c <HAL_I2C_Init+0xb4>
 80061a6:	bf00      	nop
 80061a8:	000186a0 	.word	0x000186a0
 80061ac:	001e847f 	.word	0x001e847f
 80061b0:	003d08ff 	.word	0x003d08ff
 80061b4:	000f4240 	.word	0x000f4240

080061b8 <HAL_I2C_Mem_Write>:
{
 80061b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061bc:	4604      	mov	r4, r0
 80061be:	4699      	mov	r9, r3
 80061c0:	460f      	mov	r7, r1
 80061c2:	4690      	mov	r8, r2
 80061c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80061c6:	f7fe ff47 	bl	8005058 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80061ca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80061ce:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80061d0:	2b20      	cmp	r3, #32
 80061d2:	d003      	beq.n	80061dc <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80061d4:	2002      	movs	r0, #2
}
 80061d6:	b003      	add	sp, #12
 80061d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061dc:	9000      	str	r0, [sp, #0]
 80061de:	2319      	movs	r3, #25
 80061e0:	2201      	movs	r2, #1
 80061e2:	4620      	mov	r0, r4
 80061e4:	493a      	ldr	r1, [pc, #232]	; (80062d0 <HAL_I2C_Mem_Write+0x118>)
 80061e6:	f7ff fe0c 	bl	8005e02 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d1f2      	bne.n	80061d4 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80061ee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d0ee      	beq.n	80061d4 <HAL_I2C_Mem_Write+0x1c>
 80061f6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061f8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80061fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061fe:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006200:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006202:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8006204:	bf58      	it	pl
 8006206:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006208:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800620a:	bf5c      	itt	pl
 800620c:	f043 0301 	orrpl.w	r3, r3, #1
 8006210:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006212:	6803      	ldr	r3, [r0, #0]
 8006214:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006218:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800621a:	2321      	movs	r3, #33	; 0x21
 800621c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006220:	2340      	movs	r3, #64	; 0x40
 8006222:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006226:	2300      	movs	r3, #0
 8006228:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800622a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800622c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800622e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006230:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006234:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->XferCount   = Size;
 8006238:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800623a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800623c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800623e:	4b25      	ldr	r3, [pc, #148]	; (80062d4 <HAL_I2C_Mem_Write+0x11c>)
 8006240:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006242:	464b      	mov	r3, r9
 8006244:	f7ff fe36 	bl	8005eb4 <I2C_RequestMemoryWrite>
 8006248:	2800      	cmp	r0, #0
 800624a:	d02a      	beq.n	80062a2 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 800624c:	2001      	movs	r0, #1
 800624e:	e7c2      	b.n	80061d6 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006250:	f7ff fe09 	bl	8005e66 <I2C_WaitOnTXEFlagUntilTimeout>
 8006254:	b140      	cbz	r0, 8006268 <HAL_I2C_Mem_Write+0xb0>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006258:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625a:	bf01      	itttt	eq
 800625c:	6822      	ldreq	r2, [r4, #0]
 800625e:	6813      	ldreq	r3, [r2, #0]
 8006260:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8006264:	6013      	streq	r3, [r2, #0]
 8006266:	e7f1      	b.n	800624c <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800626a:	6827      	ldr	r7, [r4, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006272:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8006274:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8006276:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006278:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800627a:	3a01      	subs	r2, #1
 800627c:	b292      	uxth	r2, r2
 800627e:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006280:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8006282:	1e48      	subs	r0, r1, #1
 8006284:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006286:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8006288:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800628a:	d50a      	bpl.n	80062a2 <HAL_I2C_Mem_Write+0xea>
 800628c:	b148      	cbz	r0, 80062a2 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800628e:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8006290:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006292:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8006294:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8006296:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006298:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800629a:	3b01      	subs	r3, #1
 800629c:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800629e:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80062a0:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062a2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062a4:	462a      	mov	r2, r5
 80062a6:	4631      	mov	r1, r6
 80062a8:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1d0      	bne.n	8006250 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80062ae:	f7ff fd53 	bl	8005d58 <I2C_WaitOnBTFFlagUntilTimeout>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d1cf      	bne.n	8006256 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	6813      	ldr	r3, [r2, #0]
 80062ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062be:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80062c0:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80062c2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ca:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80062ce:	e782      	b.n	80061d6 <HAL_I2C_Mem_Write+0x1e>
 80062d0:	00100002 	.word	0x00100002
 80062d4:	ffff0000 	.word	0xffff0000

080062d8 <HAL_I2C_Mem_Read>:
{
 80062d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062dc:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80062de:	2300      	movs	r3, #0
{
 80062e0:	4604      	mov	r4, r0
 80062e2:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t count = 0U;
 80062e4:	9303      	str	r3, [sp, #12]
{
 80062e6:	460d      	mov	r5, r1
 80062e8:	4690      	mov	r8, r2
 80062ea:	9f12      	ldr	r7, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 80062ec:	f7fe feb4 	bl	8005058 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80062f4:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d004      	beq.n	8006304 <HAL_I2C_Mem_Read+0x2c>
    return HAL_BUSY;
 80062fa:	2502      	movs	r5, #2
}
 80062fc:	4628      	mov	r0, r5
 80062fe:	b009      	add	sp, #36	; 0x24
 8006300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006304:	9000      	str	r0, [sp, #0]
 8006306:	2319      	movs	r3, #25
 8006308:	2201      	movs	r2, #1
 800630a:	4620      	mov	r0, r4
 800630c:	498d      	ldr	r1, [pc, #564]	; (8006544 <HAL_I2C_Mem_Read+0x26c>)
 800630e:	f7ff fd78 	bl	8005e02 <I2C_WaitOnFlagUntilTimeout>
 8006312:	2800      	cmp	r0, #0
 8006314:	d1f1      	bne.n	80062fa <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8006316:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800631a:	2b01      	cmp	r3, #1
 800631c:	d0ed      	beq.n	80062fa <HAL_I2C_Mem_Read+0x22>
 800631e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006320:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8006322:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006326:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006328:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800632a:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800632c:	bf58      	it	pl
 800632e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006330:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8006332:	bf5c      	itt	pl
 8006334:	f043 0301 	orrpl.w	r3, r3, #1
 8006338:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800633a:	6803      	ldr	r3, [r0, #0]
 800633c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006340:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006342:	2322      	movs	r3, #34	; 0x22
 8006344:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006348:	2340      	movs	r3, #64	; 0x40
 800634a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800634e:	2300      	movs	r3, #0
 8006350:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8006352:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006354:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8006356:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006358:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800635c:	e9cd 7600 	strd	r7, r6, [sp]
    hi2c->XferCount   = Size;
 8006360:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006362:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006364:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006366:	4b78      	ldr	r3, [pc, #480]	; (8006548 <HAL_I2C_Mem_Read+0x270>)
 8006368:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800636a:	464b      	mov	r3, r9
 800636c:	f7ff fdfa 	bl	8005f64 <I2C_RequestMemoryRead>
 8006370:	4605      	mov	r5, r0
 8006372:	b108      	cbz	r0, 8006378 <HAL_I2C_Mem_Read+0xa0>
              return HAL_ERROR;
 8006374:	2501      	movs	r5, #1
 8006376:	e7c1      	b.n	80062fc <HAL_I2C_Mem_Read+0x24>
    if (hi2c->XferSize == 0U)
 8006378:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	b9c2      	cbnz	r2, 80063b0 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637e:	9004      	str	r0, [sp, #16]
 8006380:	695a      	ldr	r2, [r3, #20]
 8006382:	9204      	str	r2, [sp, #16]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	9204      	str	r2, [sp, #16]
 8006388:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006390:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006392:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 800654c <HAL_I2C_Mem_Read+0x274>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006396:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8006550 <HAL_I2C_Mem_Read+0x278>
    while (hi2c->XferSize > 0U)
 800639a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800639c:	2b00      	cmp	r3, #0
 800639e:	d137      	bne.n	8006410 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 80063a0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80063a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80063a6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80063ae:	e7a5      	b.n	80062fc <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 80063b0:	2a01      	cmp	r2, #1
 80063b2:	d111      	bne.n	80063d8 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063ba:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80063bc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	9005      	str	r0, [sp, #20]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	9205      	str	r2, [sp, #20]
 80063c6:	699a      	ldr	r2, [r3, #24]
 80063c8:	9205      	str	r2, [sp, #20]
 80063ca:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063d4:	b662      	cpsie	i
}
 80063d6:	e7dc      	b.n	8006392 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80063d8:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063da:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80063dc:	d10e      	bne.n	80063fc <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063e4:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	9006      	str	r0, [sp, #24]
 80063ea:	695a      	ldr	r2, [r3, #20]
 80063ec:	9206      	str	r2, [sp, #24]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	9206      	str	r2, [sp, #24]
 80063f2:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063fa:	e7ea      	b.n	80063d2 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006400:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006402:	9007      	str	r0, [sp, #28]
 8006404:	695a      	ldr	r2, [r3, #20]
 8006406:	9207      	str	r2, [sp, #28]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	9307      	str	r3, [sp, #28]
 800640c:	9b07      	ldr	r3, [sp, #28]
 800640e:	e7c0      	b.n	8006392 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8006410:	2b03      	cmp	r3, #3
 8006412:	d878      	bhi.n	8006506 <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8006414:	2b01      	cmp	r3, #1
 8006416:	d115      	bne.n	8006444 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006418:	4632      	mov	r2, r6
 800641a:	4639      	mov	r1, r7
 800641c:	4620      	mov	r0, r4
 800641e:	f7ff fcc1 	bl	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006422:	2800      	cmp	r0, #0
 8006424:	d1a6      	bne.n	8006374 <HAL_I2C_Mem_Read+0x9c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800642c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800642e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006430:	3301      	adds	r3, #1
 8006432:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006434:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006436:	3b01      	subs	r3, #1
 8006438:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800643a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800643c:	3b01      	subs	r3, #1
 800643e:	b29b      	uxth	r3, r3
 8006440:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006442:	e7aa      	b.n	800639a <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8006444:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	463b      	mov	r3, r7
 800644c:	4641      	mov	r1, r8
 800644e:	4620      	mov	r0, r4
 8006450:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8006452:	d118      	bne.n	8006486 <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006454:	f7ff fcd5 	bl	8005e02 <I2C_WaitOnFlagUntilTimeout>
 8006458:	2800      	cmp	r0, #0
 800645a:	d18b      	bne.n	8006374 <HAL_I2C_Mem_Read+0x9c>
 800645c:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006466:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800646c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800646e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006470:	3301      	adds	r3, #1
 8006472:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8006474:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006476:	3b01      	subs	r3, #1
 8006478:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800647a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800647c:	3b01      	subs	r3, #1
 800647e:	b29b      	uxth	r3, r3
 8006480:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006482:	b662      	cpsie	i
 8006484:	e7cf      	b.n	8006426 <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006486:	f7ff fcbc 	bl	8005e02 <I2C_WaitOnFlagUntilTimeout>
 800648a:	2800      	cmp	r0, #0
 800648c:	f47f af72 	bne.w	8006374 <HAL_I2C_Mem_Read+0x9c>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006490:	6822      	ldr	r2, [r4, #0]
 8006492:	6813      	ldr	r3, [r2, #0]
 8006494:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006498:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800649a:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a2:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064a4:	f246 12a8 	movw	r2, #25000	; 0x61a8
          hi2c->pBuffPtr++;
 80064a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064aa:	1c4b      	adds	r3, r1, #1
 80064ac:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80064ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064b0:	3b01      	subs	r3, #1
 80064b2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80064b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064bc:	f8d9 3000 	ldr.w	r3, [r9]
 80064c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80064c4:	2323      	movs	r3, #35	; 0x23
 80064c6:	4353      	muls	r3, r2
 80064c8:	9303      	str	r3, [sp, #12]
            count--;
 80064ca:	9b03      	ldr	r3, [sp, #12]
 80064cc:	3b01      	subs	r3, #1
 80064ce:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80064d0:	9b03      	ldr	r3, [sp, #12]
 80064d2:	b96b      	cbnz	r3, 80064f0 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80064d4:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80064d6:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80064d8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064e0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80064e2:	f042 0220 	orr.w	r2, r2, #32
 80064e6:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80064e8:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80064ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80064ee:	e741      	b.n	8006374 <HAL_I2C_Mem_Read+0x9c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	0750      	lsls	r0, r2, #29
 80064f6:	d5e8      	bpl.n	80064ca <HAL_I2C_Mem_Read+0x1f2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064fe:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	704b      	strb	r3, [r1, #1]
 8006504:	e7b3      	b.n	800646e <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006506:	4632      	mov	r2, r6
 8006508:	4639      	mov	r1, r7
 800650a:	4620      	mov	r0, r4
 800650c:	f7ff fc4a 	bl	8005da4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006510:	2800      	cmp	r0, #0
 8006512:	f47f af2f 	bne.w	8006374 <HAL_I2C_Mem_Read+0x9c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800651c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800651e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006520:	1c53      	adds	r3, r2, #1
 8006522:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8006524:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8006526:	3b01      	subs	r3, #1
 8006528:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800652a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800652c:	3b01      	subs	r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	6959      	ldr	r1, [r3, #20]
 8006536:	0749      	lsls	r1, r1, #29
 8006538:	f57f af2f 	bpl.w	800639a <HAL_I2C_Mem_Read+0xc2>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	7053      	strb	r3, [r2, #1]
 8006540:	e775      	b.n	800642e <HAL_I2C_Mem_Read+0x156>
 8006542:	bf00      	nop
 8006544:	00100002 	.word	0x00100002
 8006548:	ffff0000 	.word	0xffff0000
 800654c:	00010004 	.word	0x00010004
 8006550:	2000004c 	.word	0x2000004c

08006554 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8006554:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006556:	4604      	mov	r4, r0
 8006558:	b308      	cbz	r0, 800659e <HAL_IWDG_Init+0x4a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800655a:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800655e:	6803      	ldr	r3, [r0, #0]
 8006560:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006562:	f245 5255 	movw	r2, #21845	; 0x5555
 8006566:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006568:	6842      	ldr	r2, [r0, #4]
 800656a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800656c:	6882      	ldr	r2, [r0, #8]
 800656e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006570:	f7fe fd72 	bl	8005058 <HAL_GetTick>
 8006574:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	68d0      	ldr	r0, [r2, #12]
 800657a:	f010 0003 	ands.w	r0, r0, #3
 800657e:	d103      	bne.n	8006588 <HAL_IWDG_Init+0x34>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006580:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8006584:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8006586:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8006588:	f7fe fd66 	bl	8005058 <HAL_GetTick>
 800658c:	1b40      	subs	r0, r0, r5
 800658e:	2827      	cmp	r0, #39	; 0x27
 8006590:	d9f1      	bls.n	8006576 <HAL_IWDG_Init+0x22>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8006592:	6823      	ldr	r3, [r4, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	079b      	lsls	r3, r3, #30
 8006598:	d0ed      	beq.n	8006576 <HAL_IWDG_Init+0x22>
        return HAL_TIMEOUT;
 800659a:	2003      	movs	r0, #3
 800659c:	e7f3      	b.n	8006586 <HAL_IWDG_Init+0x32>
    return HAL_ERROR;
 800659e:	2001      	movs	r0, #1
 80065a0:	e7f1      	b.n	8006586 <HAL_IWDG_Init+0x32>

080065a2 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80065a2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80065a6:	6803      	ldr	r3, [r0, #0]

  /* Return function status */
  return HAL_OK;
}
 80065a8:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80065aa:	601a      	str	r2, [r3, #0]
}
 80065ac:	4770      	bx	lr
	...

080065b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065b4:	4605      	mov	r5, r0
 80065b6:	b338      	cbz	r0, 8006608 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065b8:	6803      	ldr	r3, [r0, #0]
 80065ba:	07db      	lsls	r3, r3, #31
 80065bc:	d410      	bmi.n	80065e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065be:	682b      	ldr	r3, [r5, #0]
 80065c0:	079f      	lsls	r7, r3, #30
 80065c2:	d45e      	bmi.n	8006682 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	0719      	lsls	r1, r3, #28
 80065c8:	f100 8095 	bmi.w	80066f6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	075a      	lsls	r2, r3, #29
 80065d0:	f100 80bf 	bmi.w	8006752 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065d4:	69e8      	ldr	r0, [r5, #28]
 80065d6:	2800      	cmp	r0, #0
 80065d8:	f040 812c 	bne.w	8006834 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80065dc:	2000      	movs	r0, #0
 80065de:	e029      	b.n	8006634 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065e0:	4c8f      	ldr	r4, [pc, #572]	; (8006820 <HAL_RCC_OscConfig+0x270>)
 80065e2:	6863      	ldr	r3, [r4, #4]
 80065e4:	f003 030c 	and.w	r3, r3, #12
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d007      	beq.n	80065fc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	f003 030c 	and.w	r3, r3, #12
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d10a      	bne.n	800660c <HAL_RCC_OscConfig+0x5c>
 80065f6:	6863      	ldr	r3, [r4, #4]
 80065f8:	03de      	lsls	r6, r3, #15
 80065fa:	d507      	bpl.n	800660c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	039c      	lsls	r4, r3, #14
 8006600:	d5dd      	bpl.n	80065be <HAL_RCC_OscConfig+0xe>
 8006602:	686b      	ldr	r3, [r5, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1da      	bne.n	80065be <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8006608:	2001      	movs	r0, #1
 800660a:	e013      	b.n	8006634 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800660c:	686b      	ldr	r3, [r5, #4]
 800660e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006612:	d112      	bne.n	800663a <HAL_RCC_OscConfig+0x8a>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800661c:	f7fe fd1c 	bl	8005058 <HAL_GetTick>
 8006620:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	0398      	lsls	r0, r3, #14
 8006626:	d4ca      	bmi.n	80065be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006628:	f7fe fd16 	bl	8005058 <HAL_GetTick>
 800662c:	1b80      	subs	r0, r0, r6
 800662e:	2864      	cmp	r0, #100	; 0x64
 8006630:	d9f7      	bls.n	8006622 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8006632:	2003      	movs	r0, #3
}
 8006634:	b002      	add	sp, #8
 8006636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800663a:	b99b      	cbnz	r3, 8006664 <HAL_RCC_OscConfig+0xb4>
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800664a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800664c:	f7fe fd04 	bl	8005058 <HAL_GetTick>
 8006650:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0399      	lsls	r1, r3, #14
 8006656:	d5b2      	bpl.n	80065be <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006658:	f7fe fcfe 	bl	8005058 <HAL_GetTick>
 800665c:	1b80      	subs	r0, r0, r6
 800665e:	2864      	cmp	r0, #100	; 0x64
 8006660:	d9f7      	bls.n	8006652 <HAL_RCC_OscConfig+0xa2>
 8006662:	e7e6      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	d103      	bne.n	8006674 <HAL_RCC_OscConfig+0xc4>
 800666c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	e7cf      	b.n	8006614 <HAL_RCC_OscConfig+0x64>
 8006674:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006680:	e7cb      	b.n	800661a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006682:	4c67      	ldr	r4, [pc, #412]	; (8006820 <HAL_RCC_OscConfig+0x270>)
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	f013 0f0c 	tst.w	r3, #12
 800668a:	d007      	beq.n	800669c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800668c:	6863      	ldr	r3, [r4, #4]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b08      	cmp	r3, #8
 8006694:	d110      	bne.n	80066b8 <HAL_RCC_OscConfig+0x108>
 8006696:	6863      	ldr	r3, [r4, #4]
 8006698:	03da      	lsls	r2, r3, #15
 800669a:	d40d      	bmi.n	80066b8 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	079b      	lsls	r3, r3, #30
 80066a0:	d502      	bpl.n	80066a8 <HAL_RCC_OscConfig+0xf8>
 80066a2:	692b      	ldr	r3, [r5, #16]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d1af      	bne.n	8006608 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	696a      	ldr	r2, [r5, #20]
 80066ac:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80066b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80066b4:	6023      	str	r3, [r4, #0]
 80066b6:	e785      	b.n	80065c4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066b8:	692a      	ldr	r2, [r5, #16]
 80066ba:	4b5a      	ldr	r3, [pc, #360]	; (8006824 <HAL_RCC_OscConfig+0x274>)
 80066bc:	b16a      	cbz	r2, 80066da <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80066c2:	f7fe fcc9 	bl	8005058 <HAL_GetTick>
 80066c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	079f      	lsls	r7, r3, #30
 80066cc:	d4ec      	bmi.n	80066a8 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ce:	f7fe fcc3 	bl	8005058 <HAL_GetTick>
 80066d2:	1b80      	subs	r0, r0, r6
 80066d4:	2802      	cmp	r0, #2
 80066d6:	d9f7      	bls.n	80066c8 <HAL_RCC_OscConfig+0x118>
 80066d8:	e7ab      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80066da:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80066dc:	f7fe fcbc 	bl	8005058 <HAL_GetTick>
 80066e0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	0798      	lsls	r0, r3, #30
 80066e6:	f57f af6d 	bpl.w	80065c4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ea:	f7fe fcb5 	bl	8005058 <HAL_GetTick>
 80066ee:	1b80      	subs	r0, r0, r6
 80066f0:	2802      	cmp	r0, #2
 80066f2:	d9f6      	bls.n	80066e2 <HAL_RCC_OscConfig+0x132>
 80066f4:	e79d      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066f6:	69aa      	ldr	r2, [r5, #24]
 80066f8:	4e49      	ldr	r6, [pc, #292]	; (8006820 <HAL_RCC_OscConfig+0x270>)
 80066fa:	4b4b      	ldr	r3, [pc, #300]	; (8006828 <HAL_RCC_OscConfig+0x278>)
 80066fc:	b1da      	cbz	r2, 8006736 <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 80066fe:	2201      	movs	r2, #1
 8006700:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006702:	f7fe fca9 	bl	8005058 <HAL_GetTick>
 8006706:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006708:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800670a:	079b      	lsls	r3, r3, #30
 800670c:	d50d      	bpl.n	800672a <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800670e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006712:	4b46      	ldr	r3, [pc, #280]	; (800682c <HAL_RCC_OscConfig+0x27c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	fbb3 f3f2 	udiv	r3, r3, r2
 800671a:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800671c:	bf00      	nop
  }
  while (Delay --);
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	1e5a      	subs	r2, r3, #1
 8006722:	9201      	str	r2, [sp, #4]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1f9      	bne.n	800671c <HAL_RCC_OscConfig+0x16c>
 8006728:	e750      	b.n	80065cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800672a:	f7fe fc95 	bl	8005058 <HAL_GetTick>
 800672e:	1b00      	subs	r0, r0, r4
 8006730:	2802      	cmp	r0, #2
 8006732:	d9e9      	bls.n	8006708 <HAL_RCC_OscConfig+0x158>
 8006734:	e77d      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8006736:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006738:	f7fe fc8e 	bl	8005058 <HAL_GetTick>
 800673c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800673e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006740:	079f      	lsls	r7, r3, #30
 8006742:	f57f af43 	bpl.w	80065cc <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006746:	f7fe fc87 	bl	8005058 <HAL_GetTick>
 800674a:	1b00      	subs	r0, r0, r4
 800674c:	2802      	cmp	r0, #2
 800674e:	d9f6      	bls.n	800673e <HAL_RCC_OscConfig+0x18e>
 8006750:	e76f      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006752:	4c33      	ldr	r4, [pc, #204]	; (8006820 <HAL_RCC_OscConfig+0x270>)
 8006754:	69e3      	ldr	r3, [r4, #28]
 8006756:	00d8      	lsls	r0, r3, #3
 8006758:	d424      	bmi.n	80067a4 <HAL_RCC_OscConfig+0x1f4>
      pwrclkchanged = SET;
 800675a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800675c:	69e3      	ldr	r3, [r4, #28]
 800675e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006762:	61e3      	str	r3, [r4, #28]
 8006764:	69e3      	ldr	r3, [r4, #28]
 8006766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800676e:	4e30      	ldr	r6, [pc, #192]	; (8006830 <HAL_RCC_OscConfig+0x280>)
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	05d9      	lsls	r1, r3, #23
 8006774:	d518      	bpl.n	80067a8 <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006776:	68eb      	ldr	r3, [r5, #12]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d126      	bne.n	80067ca <HAL_RCC_OscConfig+0x21a>
 800677c:	6a23      	ldr	r3, [r4, #32]
 800677e:	f043 0301 	orr.w	r3, r3, #1
 8006782:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006784:	f7fe fc68 	bl	8005058 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006788:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800678c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678e:	6a23      	ldr	r3, [r4, #32]
 8006790:	079b      	lsls	r3, r3, #30
 8006792:	d53f      	bpl.n	8006814 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 8006794:	2f00      	cmp	r7, #0
 8006796:	f43f af1d 	beq.w	80065d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800679a:	69e3      	ldr	r3, [r4, #28]
 800679c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067a0:	61e3      	str	r3, [r4, #28]
 80067a2:	e717      	b.n	80065d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80067a4:	2700      	movs	r7, #0
 80067a6:	e7e2      	b.n	800676e <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067a8:	6833      	ldr	r3, [r6, #0]
 80067aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067ae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80067b0:	f7fe fc52 	bl	8005058 <HAL_GetTick>
 80067b4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067b6:	6833      	ldr	r3, [r6, #0]
 80067b8:	05da      	lsls	r2, r3, #23
 80067ba:	d4dc      	bmi.n	8006776 <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067bc:	f7fe fc4c 	bl	8005058 <HAL_GetTick>
 80067c0:	eba0 0008 	sub.w	r0, r0, r8
 80067c4:	2864      	cmp	r0, #100	; 0x64
 80067c6:	d9f6      	bls.n	80067b6 <HAL_RCC_OscConfig+0x206>
 80067c8:	e733      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ca:	b9ab      	cbnz	r3, 80067f8 <HAL_RCC_OscConfig+0x248>
 80067cc:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ce:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	6223      	str	r3, [r4, #32]
 80067d8:	6a23      	ldr	r3, [r4, #32]
 80067da:	f023 0304 	bic.w	r3, r3, #4
 80067de:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80067e0:	f7fe fc3a 	bl	8005058 <HAL_GetTick>
 80067e4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e6:	6a23      	ldr	r3, [r4, #32]
 80067e8:	0798      	lsls	r0, r3, #30
 80067ea:	d5d3      	bpl.n	8006794 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ec:	f7fe fc34 	bl	8005058 <HAL_GetTick>
 80067f0:	1b80      	subs	r0, r0, r6
 80067f2:	4540      	cmp	r0, r8
 80067f4:	d9f7      	bls.n	80067e6 <HAL_RCC_OscConfig+0x236>
 80067f6:	e71c      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	6a23      	ldr	r3, [r4, #32]
 80067fc:	d103      	bne.n	8006806 <HAL_RCC_OscConfig+0x256>
 80067fe:	f043 0304 	orr.w	r3, r3, #4
 8006802:	6223      	str	r3, [r4, #32]
 8006804:	e7ba      	b.n	800677c <HAL_RCC_OscConfig+0x1cc>
 8006806:	f023 0301 	bic.w	r3, r3, #1
 800680a:	6223      	str	r3, [r4, #32]
 800680c:	6a23      	ldr	r3, [r4, #32]
 800680e:	f023 0304 	bic.w	r3, r3, #4
 8006812:	e7b6      	b.n	8006782 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006814:	f7fe fc20 	bl	8005058 <HAL_GetTick>
 8006818:	1b80      	subs	r0, r0, r6
 800681a:	4540      	cmp	r0, r8
 800681c:	d9b7      	bls.n	800678e <HAL_RCC_OscConfig+0x1de>
 800681e:	e708      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
 8006820:	40021000 	.word	0x40021000
 8006824:	42420000 	.word	0x42420000
 8006828:	42420480 	.word	0x42420480
 800682c:	2000004c 	.word	0x2000004c
 8006830:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006834:	4b2a      	ldr	r3, [pc, #168]	; (80068e0 <HAL_RCC_OscConfig+0x330>)
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	461c      	mov	r4, r3
 800683a:	f002 020c 	and.w	r2, r2, #12
 800683e:	2a08      	cmp	r2, #8
 8006840:	d03d      	beq.n	80068be <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006842:	2300      	movs	r3, #0
 8006844:	4e27      	ldr	r6, [pc, #156]	; (80068e4 <HAL_RCC_OscConfig+0x334>)
 8006846:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006848:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800684a:	d12b      	bne.n	80068a4 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800684c:	f7fe fc04 	bl	8005058 <HAL_GetTick>
 8006850:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	0199      	lsls	r1, r3, #6
 8006856:	d41f      	bmi.n	8006898 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006858:	6a2b      	ldr	r3, [r5, #32]
 800685a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685e:	d105      	bne.n	800686c <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006860:	6862      	ldr	r2, [r4, #4]
 8006862:	68a9      	ldr	r1, [r5, #8]
 8006864:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006868:	430a      	orrs	r2, r1
 800686a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800686e:	6862      	ldr	r2, [r4, #4]
 8006870:	430b      	orrs	r3, r1
 8006872:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8006876:	4313      	orrs	r3, r2
 8006878:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800687a:	2301      	movs	r3, #1
 800687c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800687e:	f7fe fbeb 	bl	8005058 <HAL_GetTick>
 8006882:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	019a      	lsls	r2, r3, #6
 8006888:	f53f aea8 	bmi.w	80065dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800688c:	f7fe fbe4 	bl	8005058 <HAL_GetTick>
 8006890:	1b40      	subs	r0, r0, r5
 8006892:	2802      	cmp	r0, #2
 8006894:	d9f6      	bls.n	8006884 <HAL_RCC_OscConfig+0x2d4>
 8006896:	e6cc      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006898:	f7fe fbde 	bl	8005058 <HAL_GetTick>
 800689c:	1bc0      	subs	r0, r0, r7
 800689e:	2802      	cmp	r0, #2
 80068a0:	d9d7      	bls.n	8006852 <HAL_RCC_OscConfig+0x2a2>
 80068a2:	e6c6      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80068a4:	f7fe fbd8 	bl	8005058 <HAL_GetTick>
 80068a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	019b      	lsls	r3, r3, #6
 80068ae:	f57f ae95 	bpl.w	80065dc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068b2:	f7fe fbd1 	bl	8005058 <HAL_GetTick>
 80068b6:	1b40      	subs	r0, r0, r5
 80068b8:	2802      	cmp	r0, #2
 80068ba:	d9f6      	bls.n	80068aa <HAL_RCC_OscConfig+0x2fa>
 80068bc:	e6b9      	b.n	8006632 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068be:	2801      	cmp	r0, #1
 80068c0:	f43f aeb8 	beq.w	8006634 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80068c4:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068c6:	6a2a      	ldr	r2, [r5, #32]
 80068c8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80068cc:	4291      	cmp	r1, r2
 80068ce:	f47f ae9b 	bne.w	8006608 <HAL_RCC_OscConfig+0x58>
 80068d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80068d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068d8:	4293      	cmp	r3, r2
 80068da:	f43f ae7f 	beq.w	80065dc <HAL_RCC_OscConfig+0x2c>
 80068de:	e693      	b.n	8006608 <HAL_RCC_OscConfig+0x58>
 80068e0:	40021000 	.word	0x40021000
 80068e4:	42420060 	.word	0x42420060

080068e8 <HAL_RCC_GetSysClockFreq>:
{
 80068e8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068ea:	4b18      	ldr	r3, [pc, #96]	; (800694c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80068ec:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80068ee:	ac02      	add	r4, sp, #8
 80068f0:	f103 0510 	add.w	r5, r3, #16
 80068f4:	4622      	mov	r2, r4
 80068f6:	6818      	ldr	r0, [r3, #0]
 80068f8:	6859      	ldr	r1, [r3, #4]
 80068fa:	3308      	adds	r3, #8
 80068fc:	c203      	stmia	r2!, {r0, r1}
 80068fe:	42ab      	cmp	r3, r5
 8006900:	4614      	mov	r4, r2
 8006902:	d1f7      	bne.n	80068f4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006904:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8006908:	4911      	ldr	r1, [pc, #68]	; (8006950 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800690a:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 800690e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8006910:	f003 020c 	and.w	r2, r3, #12
 8006914:	2a08      	cmp	r2, #8
 8006916:	d117      	bne.n	8006948 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006918:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800691c:	a806      	add	r0, sp, #24
 800691e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006920:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006922:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006926:	d50c      	bpl.n	8006942 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006928:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800692a:	480a      	ldr	r0, [pc, #40]	; (8006954 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800692c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006930:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006932:	aa06      	add	r2, sp, #24
 8006934:	4413      	add	r3, r2
 8006936:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800693a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800693e:	b007      	add	sp, #28
 8006940:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006942:	4805      	ldr	r0, [pc, #20]	; (8006958 <HAL_RCC_GetSysClockFreq+0x70>)
 8006944:	4350      	muls	r0, r2
 8006946:	e7fa      	b.n	800693e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8006948:	4802      	ldr	r0, [pc, #8]	; (8006954 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800694a:	e7f8      	b.n	800693e <HAL_RCC_GetSysClockFreq+0x56>
 800694c:	08009b84 	.word	0x08009b84
 8006950:	40021000 	.word	0x40021000
 8006954:	007a1200 	.word	0x007a1200
 8006958:	003d0900 	.word	0x003d0900

0800695c <HAL_RCC_ClockConfig>:
{
 800695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006960:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8006962:	4604      	mov	r4, r0
 8006964:	b910      	cbnz	r0, 800696c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8006966:	2001      	movs	r0, #1
}
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800696c:	4a44      	ldr	r2, [pc, #272]	; (8006a80 <HAL_RCC_ClockConfig+0x124>)
 800696e:	6813      	ldr	r3, [r2, #0]
 8006970:	f003 0307 	and.w	r3, r3, #7
 8006974:	428b      	cmp	r3, r1
 8006976:	d328      	bcc.n	80069ca <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006978:	6821      	ldr	r1, [r4, #0]
 800697a:	078e      	lsls	r6, r1, #30
 800697c:	d430      	bmi.n	80069e0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800697e:	07ca      	lsls	r2, r1, #31
 8006980:	d443      	bmi.n	8006a0a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006982:	4a3f      	ldr	r2, [pc, #252]	; (8006a80 <HAL_RCC_ClockConfig+0x124>)
 8006984:	6813      	ldr	r3, [r2, #0]
 8006986:	f003 0307 	and.w	r3, r3, #7
 800698a:	42ab      	cmp	r3, r5
 800698c:	d865      	bhi.n	8006a5a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698e:	6822      	ldr	r2, [r4, #0]
 8006990:	4d3c      	ldr	r5, [pc, #240]	; (8006a84 <HAL_RCC_ClockConfig+0x128>)
 8006992:	f012 0f04 	tst.w	r2, #4
 8006996:	d16c      	bne.n	8006a72 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006998:	0713      	lsls	r3, r2, #28
 800699a:	d506      	bpl.n	80069aa <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800699c:	686b      	ldr	r3, [r5, #4]
 800699e:	6922      	ldr	r2, [r4, #16]
 80069a0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80069a4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80069a8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069aa:	f7ff ff9d 	bl	80068e8 <HAL_RCC_GetSysClockFreq>
 80069ae:	686b      	ldr	r3, [r5, #4]
 80069b0:	4a35      	ldr	r2, [pc, #212]	; (8006a88 <HAL_RCC_ClockConfig+0x12c>)
 80069b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80069b6:	5cd3      	ldrb	r3, [r2, r3]
 80069b8:	40d8      	lsrs	r0, r3
 80069ba:	4b34      	ldr	r3, [pc, #208]	; (8006a8c <HAL_RCC_ClockConfig+0x130>)
 80069bc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80069be:	4b34      	ldr	r3, [pc, #208]	; (8006a90 <HAL_RCC_ClockConfig+0x134>)
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f7fe fb07 	bl	8004fd4 <HAL_InitTick>
  return HAL_OK;
 80069c6:	2000      	movs	r0, #0
 80069c8:	e7ce      	b.n	8006968 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ca:	6813      	ldr	r3, [r2, #0]
 80069cc:	f023 0307 	bic.w	r3, r3, #7
 80069d0:	430b      	orrs	r3, r1
 80069d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d4:	6813      	ldr	r3, [r2, #0]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	428b      	cmp	r3, r1
 80069dc:	d1c3      	bne.n	8006966 <HAL_RCC_ClockConfig+0xa>
 80069de:	e7cb      	b.n	8006978 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e0:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <HAL_RCC_ClockConfig+0x128>)
 80069e2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069e6:	bf1e      	ittt	ne
 80069e8:	685a      	ldrne	r2, [r3, #4]
 80069ea:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80069ee:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069f2:	bf42      	ittt	mi
 80069f4:	685a      	ldrmi	r2, [r3, #4]
 80069f6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80069fa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	68a0      	ldr	r0, [r4, #8]
 8006a00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006a04:	4302      	orrs	r2, r0
 8006a06:	605a      	str	r2, [r3, #4]
 8006a08:	e7b9      	b.n	800697e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a0a:	6862      	ldr	r2, [r4, #4]
 8006a0c:	4e1d      	ldr	r6, [pc, #116]	; (8006a84 <HAL_RCC_ClockConfig+0x128>)
 8006a0e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a10:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a12:	d11a      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a14:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a18:	d0a5      	beq.n	8006966 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a1a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a20:	f023 0303 	bic.w	r3, r3, #3
 8006a24:	4313      	orrs	r3, r2
 8006a26:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8006a28:	f7fe fb16 	bl	8005058 <HAL_GetTick>
 8006a2c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2e:	6873      	ldr	r3, [r6, #4]
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006a3a:	d0a2      	beq.n	8006982 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a3c:	f7fe fb0c 	bl	8005058 <HAL_GetTick>
 8006a40:	1bc0      	subs	r0, r0, r7
 8006a42:	4540      	cmp	r0, r8
 8006a44:	d9f3      	bls.n	8006a2e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8006a46:	2003      	movs	r0, #3
 8006a48:	e78e      	b.n	8006968 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a4a:	2a02      	cmp	r2, #2
 8006a4c:	d102      	bne.n	8006a54 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006a52:	e7e1      	b.n	8006a18 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a54:	f013 0f02 	tst.w	r3, #2
 8006a58:	e7de      	b.n	8006a18 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	f023 0307 	bic.w	r3, r3, #7
 8006a60:	432b      	orrs	r3, r5
 8006a62:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a64:	6813      	ldr	r3, [r2, #0]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	42ab      	cmp	r3, r5
 8006a6c:	f47f af7b 	bne.w	8006966 <HAL_RCC_ClockConfig+0xa>
 8006a70:	e78d      	b.n	800698e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a72:	686b      	ldr	r3, [r5, #4]
 8006a74:	68e1      	ldr	r1, [r4, #12]
 8006a76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	606b      	str	r3, [r5, #4]
 8006a7e:	e78b      	b.n	8006998 <HAL_RCC_ClockConfig+0x3c>
 8006a80:	40022000 	.word	0x40022000
 8006a84:	40021000 	.word	0x40021000
 8006a88:	08009ae1 	.word	0x08009ae1
 8006a8c:	2000004c 	.word	0x2000004c
 8006a90:	20000054 	.word	0x20000054

08006a94 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a94:	4b04      	ldr	r3, [pc, #16]	; (8006aa8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006a96:	4a05      	ldr	r2, [pc, #20]	; (8006aac <HAL_RCC_GetPCLK1Freq+0x18>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006a9e:	5cd3      	ldrb	r3, [r2, r3]
 8006aa0:	4a03      	ldr	r2, [pc, #12]	; (8006ab0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006aa2:	6810      	ldr	r0, [r2, #0]
}
 8006aa4:	40d8      	lsrs	r0, r3
 8006aa6:	4770      	bx	lr
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	08009af1 	.word	0x08009af1
 8006ab0:	2000004c 	.word	0x2000004c

08006ab4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ab4:	4b04      	ldr	r3, [pc, #16]	; (8006ac8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006ab6:	4a05      	ldr	r2, [pc, #20]	; (8006acc <HAL_RCC_GetPCLK2Freq+0x18>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8006abe:	5cd3      	ldrb	r3, [r2, r3]
 8006ac0:	4a03      	ldr	r2, [pc, #12]	; (8006ad0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006ac2:	6810      	ldr	r0, [r2, #0]
}
 8006ac4:	40d8      	lsrs	r0, r3
 8006ac6:	4770      	bx	lr
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	08009af1 	.word	0x08009af1
 8006ad0:	2000004c 	.word	0x2000004c

08006ad4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ad4:	6803      	ldr	r3, [r0, #0]
{
 8006ad6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ada:	07d9      	lsls	r1, r3, #31
{
 8006adc:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006ade:	d520      	bpl.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ae0:	4c35      	ldr	r4, [pc, #212]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006ae2:	69e3      	ldr	r3, [r4, #28]
 8006ae4:	00da      	lsls	r2, r3, #3
 8006ae6:	d432      	bmi.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8006ae8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aea:	69e3      	ldr	r3, [r4, #28]
 8006aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af0:	61e3      	str	r3, [r4, #28]
 8006af2:	69e3      	ldr	r3, [r4, #28]
 8006af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006afc:	4e2f      	ldr	r6, [pc, #188]	; (8006bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006afe:	6833      	ldr	r3, [r6, #0]
 8006b00:	05db      	lsls	r3, r3, #23
 8006b02:	d526      	bpl.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b04:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b06:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006b0a:	d136      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b0c:	6a23      	ldr	r3, [r4, #32]
 8006b0e:	686a      	ldr	r2, [r5, #4]
 8006b10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b14:	4313      	orrs	r3, r2
 8006b16:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b18:	b11f      	cbz	r7, 8006b22 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b1a:	69e3      	ldr	r3, [r4, #28]
 8006b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b20:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b22:	6828      	ldr	r0, [r5, #0]
 8006b24:	0783      	lsls	r3, r0, #30
 8006b26:	d506      	bpl.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b28:	4923      	ldr	r1, [pc, #140]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006b2a:	68ab      	ldr	r3, [r5, #8]
 8006b2c:	684a      	ldr	r2, [r1, #4]
 8006b2e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006b32:	431a      	orrs	r2, r3
 8006b34:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b36:	f010 0010 	ands.w	r0, r0, #16
 8006b3a:	d01b      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b3c:	4a1e      	ldr	r2, [pc, #120]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8006b3e:	68e9      	ldr	r1, [r5, #12]
 8006b40:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006b42:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b44:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6053      	str	r3, [r2, #4]
 8006b4c:	e012      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8006b4e:	2700      	movs	r7, #0
 8006b50:	e7d4      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b52:	6833      	ldr	r3, [r6, #0]
 8006b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b58:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006b5a:	f7fe fa7d 	bl	8005058 <HAL_GetTick>
 8006b5e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b60:	6833      	ldr	r3, [r6, #0]
 8006b62:	05d8      	lsls	r0, r3, #23
 8006b64:	d4ce      	bmi.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b66:	f7fe fa77 	bl	8005058 <HAL_GetTick>
 8006b6a:	eba0 0008 	sub.w	r0, r0, r8
 8006b6e:	2864      	cmp	r0, #100	; 0x64
 8006b70:	d9f6      	bls.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8006b72:	2003      	movs	r0, #3
}
 8006b74:	b002      	add	sp, #8
 8006b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b7a:	686a      	ldr	r2, [r5, #4]
 8006b7c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d0c3      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b84:	2001      	movs	r0, #1
 8006b86:	4a0e      	ldr	r2, [pc, #56]	; (8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b88:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b8a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b8c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b92:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8006b94:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006b96:	07d9      	lsls	r1, r3, #31
 8006b98:	d5b8      	bpl.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8006b9a:	f7fe fa5d 	bl	8005058 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b9e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006ba2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba4:	6a23      	ldr	r3, [r4, #32]
 8006ba6:	079a      	lsls	r2, r3, #30
 8006ba8:	d4b0      	bmi.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fe fa55 	bl	8005058 <HAL_GetTick>
 8006bae:	1b80      	subs	r0, r0, r6
 8006bb0:	4540      	cmp	r0, r8
 8006bb2:	d9f7      	bls.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8006bb4:	e7dd      	b.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8006bb6:	bf00      	nop
 8006bb8:	40021000 	.word	0x40021000
 8006bbc:	40007000 	.word	0x40007000
 8006bc0:	42420440 	.word	0x42420440

08006bc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006bc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006bc8:	461c      	mov	r4, r3
 8006bca:	4616      	mov	r6, r2
 8006bcc:	460f      	mov	r7, r1
 8006bce:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bd0:	f7fe fa42 	bl	8005058 <HAL_GetTick>
 8006bd4:	4434      	add	r4, r6
 8006bd6:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8006bd8:	f7fe fa3e 	bl	8005058 <HAL_GetTick>
 8006bdc:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bde:	4b23      	ldr	r3, [pc, #140]	; (8006c6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8006be6:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006be8:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8006bea:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bec:	6893      	ldr	r3, [r2, #8]
 8006bee:	ea37 0303 	bics.w	r3, r7, r3
 8006bf2:	d001      	beq.n	8006bf8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8006bf4:	2000      	movs	r0, #0
 8006bf6:	e02e      	b.n	8006c56 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8006bf8:	1c73      	adds	r3, r6, #1
 8006bfa:	d0f7      	beq.n	8006bec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bfc:	f7fe fa2c 	bl	8005058 <HAL_GetTick>
 8006c00:	eba0 0008 	sub.w	r0, r0, r8
 8006c04:	42a0      	cmp	r0, r4
 8006c06:	d329      	bcc.n	8006c5c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c10:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c12:	686a      	ldr	r2, [r5, #4]
 8006c14:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006c18:	d10a      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8006c1a:	68aa      	ldr	r2, [r5, #8]
 8006c1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006c20:	d002      	beq.n	8006c28 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c22:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006c26:	d103      	bne.n	8006c30 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c2e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c30:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006c32:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006c36:	d107      	bne.n	8006c48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c3e:	601a      	str	r2, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c46:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006c4e:	2300      	movs	r3, #0
 8006c50:	2003      	movs	r0, #3
 8006c52:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8006c56:	b002      	add	sp, #8
 8006c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8006c5c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006c5e:	2b00      	cmp	r3, #0
      count--;
 8006c60:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8006c62:	bf08      	it	eq
 8006c64:	2400      	moveq	r4, #0
      count--;
 8006c66:	3b01      	subs	r3, #1
 8006c68:	e7be      	b.n	8006be8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8006c6a:	bf00      	nop
 8006c6c:	2000004c 	.word	0x2000004c

08006c70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c74:	460a      	mov	r2, r1
 8006c76:	2180      	movs	r1, #128	; 0x80
{
 8006c78:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c7a:	f7ff ffa3 	bl	8006bc4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006c7e:	b120      	cbz	r0, 8006c8a <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
 8006c80:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c84:	f043 0320 	orr.w	r3, r3, #32
 8006c88:	6563      	str	r3, [r4, #84]	; 0x54
  }
  return HAL_OK;
}
 8006c8a:	bd10      	pop	{r4, pc}

08006c8c <HAL_SPI_Init>:
{
 8006c8c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006c8e:	4604      	mov	r4, r0
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d051      	beq.n	8006d38 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c94:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d14a      	bne.n	8006d30 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c9a:	6842      	ldr	r2, [r0, #4]
 8006c9c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006ca0:	d000      	beq.n	8006ca4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ca2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ca8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006cb0:	b923      	cbnz	r3, 8006cbc <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8006cb2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006cb4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006cb8:	f7fd f994 	bl	8003fe4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006cbc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8006cbe:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006cc4:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cc6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8006cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ccc:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8006cd4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8006cd8:	4303      	orrs	r3, r0
 8006cda:	68e0      	ldr	r0, [r4, #12]
 8006cdc:	69a1      	ldr	r1, [r4, #24]
 8006cde:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8006ce2:	4303      	orrs	r3, r0
 8006ce4:	6920      	ldr	r0, [r4, #16]
 8006ce6:	f000 0002 	and.w	r0, r0, #2
 8006cea:	4303      	orrs	r3, r0
 8006cec:	6960      	ldr	r0, [r4, #20]
 8006cee:	f000 0001 	and.w	r0, r0, #1
 8006cf2:	4303      	orrs	r3, r0
 8006cf4:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8006cf8:	4303      	orrs	r3, r0
 8006cfa:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006cfc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cfe:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8006d02:	4303      	orrs	r3, r0
 8006d04:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d06:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d0a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8006d0e:	4303      	orrs	r3, r0
 8006d10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006d12:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8006d16:	4303      	orrs	r3, r0
 8006d18:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d1a:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d1c:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d1e:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d24:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8006d26:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d28:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d2a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8006d2e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006d30:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d36:	e7b5      	b.n	8006ca4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8006d38:	2001      	movs	r0, #1
 8006d3a:	e7f8      	b.n	8006d2e <HAL_SPI_Init+0xa2>

08006d3c <HAL_SPI_Transmit>:
{
 8006d3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8006d42:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8006d46:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006d48:	2b01      	cmp	r3, #1
{
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006d4e:	f000 80a0 	beq.w	8006e92 <HAL_SPI_Transmit+0x156>
 8006d52:	2301      	movs	r3, #1
 8006d54:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006d58:	f7fe f97e 	bl	8005058 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8006d5c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8006d60:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	b2d8      	uxtb	r0, r3
 8006d66:	f040 8092 	bne.w	8006e8e <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8006d6a:	2d00      	cmp	r5, #0
 8006d6c:	d061      	beq.n	8006e32 <HAL_SPI_Transmit+0xf6>
 8006d6e:	f1b8 0f00 	cmp.w	r8, #0
 8006d72:	d05e      	beq.n	8006e32 <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d74:	2303      	movs	r3, #3
 8006d76:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006d7e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8006d82:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d86:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d88:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	6826      	ldr	r6, [r4, #0]
 8006d90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d94:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d96:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9a:	d107      	bne.n	8006dac <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8006d9c:	6833      	ldr	r3, [r6, #0]
 8006d9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006da2:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8006da4:	6833      	ldr	r3, [r6, #0]
 8006da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006daa:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dac:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dae:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db0:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006db2:	bf5e      	ittt	pl
 8006db4:	6833      	ldrpl	r3, [r6, #0]
 8006db6:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8006dba:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006dbc:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	d13f      	bne.n	8006e44 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dc4:	b113      	cbz	r3, 8006dcc <HAL_SPI_Transmit+0x90>
 8006dc6:	f1b8 0f01 	cmp.w	r8, #1
 8006dca:	d107      	bne.n	8006ddc <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dcc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006dd0:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd2:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006dd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006ddc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	b9a3      	cbnz	r3, 8006e0c <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de2:	464a      	mov	r2, r9
 8006de4:	4639      	mov	r1, r7
 8006de6:	4620      	mov	r0, r4
 8006de8:	f7ff ff42 	bl	8006c70 <SPI_EndRxTxTransaction>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	d14b      	bne.n	8006e88 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df0:	68a3      	ldr	r3, [r4, #8]
 8006df2:	b933      	cbnz	r3, 8006e02 <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	9201      	str	r2, [sp, #4]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	9301      	str	r3, [sp, #4]
 8006e00:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e02:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8006e04:	3800      	subs	r0, #0
 8006e06:	bf18      	it	ne
 8006e08:	2001      	movne	r0, #1
error:
 8006e0a:	e012      	b.n	8006e32 <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e0c:	6822      	ldr	r2, [r4, #0]
 8006e0e:	6893      	ldr	r3, [r2, #8]
 8006e10:	0798      	lsls	r0, r3, #30
 8006e12:	d505      	bpl.n	8006e20 <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e16:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006e1a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e1c:	6323      	str	r3, [r4, #48]	; 0x30
 8006e1e:	e7d9      	b.n	8006dd4 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e20:	f7fe f91a 	bl	8005058 <HAL_GetTick>
 8006e24:	eba0 0009 	sub.w	r0, r0, r9
 8006e28:	42b8      	cmp	r0, r7
 8006e2a:	d3d7      	bcc.n	8006ddc <HAL_SPI_Transmit+0xa0>
 8006e2c:	1c79      	adds	r1, r7, #1
 8006e2e:	d0d5      	beq.n	8006ddc <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8006e30:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006e32:	2301      	movs	r3, #1
 8006e34:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006e3e:	b003      	add	sp, #12
 8006e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e44:	b113      	cbz	r3, 8006e4c <HAL_SPI_Transmit+0x110>
 8006e46:	f1b8 0f01 	cmp.w	r8, #1
 8006e4a:	d108      	bne.n	8006e5e <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e4c:	782b      	ldrb	r3, [r5, #0]
 8006e4e:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e52:	3301      	adds	r3, #1
 8006e54:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006e56:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006e5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0bd      	beq.n	8006de2 <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	0792      	lsls	r2, r2, #30
 8006e6c:	d503      	bpl.n	8006e76 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	731a      	strb	r2, [r3, #12]
 8006e74:	e7ec      	b.n	8006e50 <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e76:	f7fe f8ef 	bl	8005058 <HAL_GetTick>
 8006e7a:	eba0 0009 	sub.w	r0, r0, r9
 8006e7e:	42b8      	cmp	r0, r7
 8006e80:	d3ed      	bcc.n	8006e5e <HAL_SPI_Transmit+0x122>
 8006e82:	1c7b      	adds	r3, r7, #1
 8006e84:	d0eb      	beq.n	8006e5e <HAL_SPI_Transmit+0x122>
 8006e86:	e7d3      	b.n	8006e30 <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e88:	2320      	movs	r3, #32
 8006e8a:	6563      	str	r3, [r4, #84]	; 0x54
 8006e8c:	e7b0      	b.n	8006df0 <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8006e8e:	2002      	movs	r0, #2
 8006e90:	e7cf      	b.n	8006e32 <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8006e92:	2002      	movs	r0, #2
 8006e94:	e7d3      	b.n	8006e3e <HAL_SPI_Transmit+0x102>

08006e96 <HAL_SPI_TransmitReceive>:
{
 8006e96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e9a:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006e9c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8006ea0:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8006ea2:	2b01      	cmp	r3, #1
{
 8006ea4:	460d      	mov	r5, r1
 8006ea6:	4691      	mov	r9, r2
 8006ea8:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006eac:	f000 80e0 	beq.w	8007070 <HAL_SPI_TransmitReceive+0x1da>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006eb6:	f7fe f8cf 	bl	8005058 <HAL_GetTick>
  tmp_state           = hspi->State;
 8006eba:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8006ebe:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ec0:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8006ec2:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8006ec4:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ec6:	d00a      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x48>
 8006ec8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006ecc:	f040 80ce 	bne.w	800706c <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ed0:	68a3      	ldr	r3, [r4, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 80ca 	bne.w	800706c <HAL_SPI_TransmitReceive+0x1d6>
 8006ed8:	2904      	cmp	r1, #4
 8006eda:	f040 80c7 	bne.w	800706c <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ede:	2d00      	cmp	r5, #0
 8006ee0:	d03f      	beq.n	8006f62 <HAL_SPI_TransmitReceive+0xcc>
 8006ee2:	f1b9 0f00 	cmp.w	r9, #0
 8006ee6:	d03c      	beq.n	8006f62 <HAL_SPI_TransmitReceive+0xcc>
 8006ee8:	2e00      	cmp	r6, #0
 8006eea:	d03a      	beq.n	8006f62 <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006eec:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006ef0:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ef4:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ef6:	bf1c      	itt	ne
 8006ef8:	2305      	movne	r3, #5
 8006efa:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8006f02:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f06:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006f08:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006f0a:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f0c:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8006f0e:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f10:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8006f12:	bf58      	it	pl
 8006f14:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f16:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8006f18:	bf58      	it	pl
 8006f1a:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8006f1e:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8006f20:	bf58      	it	pl
 8006f22:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f24:	68e1      	ldr	r1, [r4, #12]
 8006f26:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006f2a:	d151      	bne.n	8006fd0 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f2c:	b10a      	cbz	r2, 8006f32 <HAL_SPI_TransmitReceive+0x9c>
 8006f2e:	2e01      	cmp	r6, #1
 8006f30:	d107      	bne.n	8006f42 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f32:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006f36:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f3a:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006f42:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	b96b      	cbnz	r3, 8006f66 <HAL_SPI_TransmitReceive+0xd0>
 8006f4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	b953      	cbnz	r3, 8006f66 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f50:	463a      	mov	r2, r7
 8006f52:	4641      	mov	r1, r8
 8006f54:	4620      	mov	r0, r4
 8006f56:	f7ff fe8b 	bl	8006c70 <SPI_EndRxTxTransaction>
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d07b      	beq.n	8007056 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f5e:	2320      	movs	r3, #32
 8006f60:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006f62:	2001      	movs	r0, #1
 8006f64:	e02b      	b.n	8006fbe <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f66:	6821      	ldr	r1, [r4, #0]
 8006f68:	688b      	ldr	r3, [r1, #8]
 8006f6a:	079a      	lsls	r2, r3, #30
 8006f6c:	d50d      	bpl.n	8006f8a <HAL_SPI_TransmitReceive+0xf4>
 8006f6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	b153      	cbz	r3, 8006f8a <HAL_SPI_TransmitReceive+0xf4>
 8006f74:	b14d      	cbz	r5, 8006f8a <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 8006f76:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006f7a:	f833 2b02 	ldrh.w	r2, [r3], #2
 8006f7e:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f80:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006f82:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f8a:	688a      	ldr	r2, [r1, #8]
 8006f8c:	f012 0201 	ands.w	r2, r2, #1
 8006f90:	d00c      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x116>
 8006f92:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b14b      	cbz	r3, 8006fac <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 8006f98:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f9a:	68c9      	ldr	r1, [r1, #12]
 8006f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f9e:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fa2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006fa4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fac:	f7fe f854 	bl	8005058 <HAL_GetTick>
 8006fb0:	1bc0      	subs	r0, r0, r7
 8006fb2:	4540      	cmp	r0, r8
 8006fb4:	d3c6      	bcc.n	8006f44 <HAL_SPI_TransmitReceive+0xae>
 8006fb6:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006fba:	d0c3      	beq.n	8006f44 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8006fbc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006fca:	b003      	add	sp, #12
 8006fcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fd0:	b10a      	cbz	r2, 8006fd6 <HAL_SPI_TransmitReceive+0x140>
 8006fd2:	2e01      	cmp	r6, #1
 8006fd4:	d108      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006fd6:	782a      	ldrb	r2, [r5, #0]
 8006fd8:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006fdc:	3301      	adds	r3, #1
 8006fde:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006fe0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006fe8:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b91b      	cbnz	r3, 8006ff8 <HAL_SPI_TransmitReceive+0x162>
 8006ff0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0ab      	beq.n	8006f50 <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ff8:	6822      	ldr	r2, [r4, #0]
 8006ffa:	6893      	ldr	r3, [r2, #8]
 8006ffc:	079b      	lsls	r3, r3, #30
 8006ffe:	d50e      	bpl.n	800701e <HAL_SPI_TransmitReceive+0x188>
 8007000:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007002:	b29b      	uxth	r3, r3
 8007004:	b15b      	cbz	r3, 800701e <HAL_SPI_TransmitReceive+0x188>
 8007006:	b155      	cbz	r5, 800701e <HAL_SPI_TransmitReceive+0x188>
        txallowed = 0U;
 8007008:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800700a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8007010:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007012:	3301      	adds	r3, #1
 8007014:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8007016:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007018:	3b01      	subs	r3, #1
 800701a:	b29b      	uxth	r3, r3
 800701c:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	6891      	ldr	r1, [r2, #8]
 8007022:	f011 0101 	ands.w	r1, r1, #1
 8007026:	d00d      	beq.n	8007044 <HAL_SPI_TransmitReceive+0x1ae>
 8007028:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800702a:	b29b      	uxth	r3, r3
 800702c:	b153      	cbz	r3, 8007044 <HAL_SPI_TransmitReceive+0x1ae>
        txallowed = 1U;
 800702e:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007030:	68d2      	ldr	r2, [r2, #12]
 8007032:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007034:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007036:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007038:	3301      	adds	r3, #1
 800703a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800703c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800703e:	3b01      	subs	r3, #1
 8007040:	b29b      	uxth	r3, r3
 8007042:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007044:	f7fe f808 	bl	8005058 <HAL_GetTick>
 8007048:	1bc0      	subs	r0, r0, r7
 800704a:	4540      	cmp	r0, r8
 800704c:	d3cd      	bcc.n	8006fea <HAL_SPI_TransmitReceive+0x154>
 800704e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007052:	d0ca      	beq.n	8006fea <HAL_SPI_TransmitReceive+0x154>
 8007054:	e7b2      	b.n	8006fbc <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007056:	68a3      	ldr	r3, [r4, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1b0      	bne.n	8006fbe <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	9001      	str	r0, [sp, #4]
 8007060:	68da      	ldr	r2, [r3, #12]
 8007062:	9201      	str	r2, [sp, #4]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	9b01      	ldr	r3, [sp, #4]
 800706a:	e7a8      	b.n	8006fbe <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 800706c:	2002      	movs	r0, #2
 800706e:	e7a6      	b.n	8006fbe <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8007070:	2002      	movs	r0, #2
 8007072:	e7aa      	b.n	8006fca <HAL_SPI_TransmitReceive+0x134>

08007074 <HAL_SPI_GetState>:
  return hspi->State;
 8007074:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8007078:	4770      	bx	lr
	...

0800707c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800707c:	6a03      	ldr	r3, [r0, #32]
{
 800707e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007080:	f023 0301 	bic.w	r3, r3, #1
 8007084:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007086:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007088:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800708a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800708c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800708e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8007092:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007094:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007096:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800709a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800709c:	4d0a      	ldr	r5, [pc, #40]	; (80070c8 <TIM_OC1_SetConfig+0x4c>)
 800709e:	42a8      	cmp	r0, r5
 80070a0:	d10b      	bne.n	80070ba <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80070a4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80070a8:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070aa:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070ae:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80070b2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80070b4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80070b8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070be:	684a      	ldr	r2, [r1, #4]
 80070c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c2:	6203      	str	r3, [r0, #32]
}
 80070c4:	bd70      	pop	{r4, r5, r6, pc}
 80070c6:	bf00      	nop
 80070c8:	40012c00 	.word	0x40012c00

080070cc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070cc:	6a03      	ldr	r3, [r0, #32]
{
 80070ce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070d4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070da:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80070e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80070e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ee:	4d0b      	ldr	r5, [pc, #44]	; (800711c <TIM_OC3_SetConfig+0x50>)
 80070f0:	42a8      	cmp	r0, r5
 80070f2:	d10d      	bne.n	8007110 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80070f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070fa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070fe:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007102:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007106:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8007108:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800710c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007110:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007112:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007114:	684a      	ldr	r2, [r1, #4]
 8007116:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007118:	6203      	str	r3, [r0, #32]
}
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	40012c00 	.word	0x40012c00

08007120 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007120:	6a03      	ldr	r3, [r0, #32]
{
 8007122:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007128:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800712c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007132:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007136:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800713a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800713c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007140:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007144:	4d06      	ldr	r5, [pc, #24]	; (8007160 <TIM_OC4_SetConfig+0x40>)
 8007146:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007148:	bf02      	ittt	eq
 800714a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800714c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007150:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007154:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007156:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007158:	684a      	ldr	r2, [r1, #4]
 800715a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715c:	6203      	str	r3, [r0, #32]
}
 800715e:	bd30      	pop	{r4, r5, pc}
 8007160:	40012c00 	.word	0x40012c00

08007164 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007164:	4770      	bx	lr

08007166 <TIM_DMADelayPulseCplt>:
{
 8007166:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007168:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800716a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800716c:	4282      	cmp	r2, r0
 800716e:	d10b      	bne.n	8007188 <TIM_DMADelayPulseCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007170:	2301      	movs	r3, #1
 8007172:	7723      	strb	r3, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8007174:	6992      	ldr	r2, [r2, #24]
 8007176:	b90a      	cbnz	r2, 800717c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007178:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800717c:	4620      	mov	r0, r4
 800717e:	f7ff fff1 	bl	8007164 <HAL_TIM_PWM_PulseFinishedCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007182:	2300      	movs	r3, #0
 8007184:	7723      	strb	r3, [r4, #28]
}
 8007186:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800718a:	4283      	cmp	r3, r0
 800718c:	d108      	bne.n	80071a0 <TIM_DMADelayPulseCplt+0x3a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718e:	2202      	movs	r2, #2
 8007190:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1f1      	bne.n	800717c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007198:	2301      	movs	r3, #1
 800719a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800719e:	e7ed      	b.n	800717c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80071a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80071a2:	4283      	cmp	r3, r0
 80071a4:	d108      	bne.n	80071b8 <TIM_DMADelayPulseCplt+0x52>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071a6:	2204      	movs	r2, #4
 80071a8:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e5      	bne.n	800717c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80071b0:	2301      	movs	r3, #1
 80071b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80071b6:	e7e1      	b.n	800717c <TIM_DMADelayPulseCplt+0x16>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80071b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80071ba:	4283      	cmp	r3, r0
 80071bc:	d1de      	bne.n	800717c <TIM_DMADelayPulseCplt+0x16>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071be:	2208      	movs	r2, #8
 80071c0:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1d9      	bne.n	800717c <TIM_DMADelayPulseCplt+0x16>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80071c8:	2301      	movs	r3, #1
 80071ca:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80071ce:	e7d5      	b.n	800717c <TIM_DMADelayPulseCplt+0x16>

080071d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 80071d0:	4770      	bx	lr

080071d2 <TIM_DMADelayPulseHalfCplt>:
{
 80071d2:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80071d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d8:	4283      	cmp	r3, r0
 80071da:	d107      	bne.n	80071ec <TIM_DMADelayPulseHalfCplt+0x1a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071dc:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071de:	7723      	strb	r3, [r4, #28]
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80071e0:	4620      	mov	r0, r4
 80071e2:	f7ff fff5 	bl	80071d0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071e6:	2300      	movs	r3, #0
 80071e8:	7723      	strb	r3, [r4, #28]
}
 80071ea:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80071ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80071ee:	4283      	cmp	r3, r0
 80071f0:	d101      	bne.n	80071f6 <TIM_DMADelayPulseHalfCplt+0x24>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80071f2:	2302      	movs	r3, #2
 80071f4:	e7f3      	b.n	80071de <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80071f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80071f8:	4283      	cmp	r3, r0
 80071fa:	d101      	bne.n	8007200 <TIM_DMADelayPulseHalfCplt+0x2e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071fc:	2304      	movs	r3, #4
 80071fe:	e7ee      	b.n	80071de <TIM_DMADelayPulseHalfCplt+0xc>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007200:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007202:	4283      	cmp	r3, r0
 8007204:	d1ec      	bne.n	80071e0 <TIM_DMADelayPulseHalfCplt+0xe>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007206:	2308      	movs	r3, #8
 8007208:	e7e9      	b.n	80071de <TIM_DMADelayPulseHalfCplt+0xc>

0800720a <HAL_TIM_ErrorCallback>:
 800720a:	4770      	bx	lr

0800720c <TIM_DMAError>:
{
 800720c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800720e:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007212:	4283      	cmp	r3, r0
 8007214:	d109      	bne.n	800722a <TIM_DMAError+0x1e>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007216:	2301      	movs	r3, #1
 8007218:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800721a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800721e:	4620      	mov	r0, r4
 8007220:	f7ff fff3 	bl	800720a <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007224:	2300      	movs	r3, #0
 8007226:	7723      	strb	r3, [r4, #28]
}
 8007228:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800722a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800722c:	4283      	cmp	r3, r0
 800722e:	d105      	bne.n	800723c <TIM_DMAError+0x30>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007230:	2302      	movs	r3, #2
 8007232:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007234:	2301      	movs	r3, #1
 8007236:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800723a:	e7f0      	b.n	800721e <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800723c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800723e:	4283      	cmp	r3, r0
 8007240:	f04f 0301 	mov.w	r3, #1
 8007244:	d104      	bne.n	8007250 <TIM_DMAError+0x44>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007246:	2204      	movs	r2, #4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007248:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800724c:	7722      	strb	r2, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800724e:	e7e6      	b.n	800721e <TIM_DMAError+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007250:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007252:	4282      	cmp	r2, r0
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007254:	bf03      	ittte	eq
 8007256:	2208      	moveq	r2, #8
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8007258:	f884 3041 	strbeq.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800725c:	7722      	strbeq	r2, [r4, #28]
    htim->State = HAL_TIM_STATE_READY;
 800725e:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8007262:	e7dc      	b.n	800721e <TIM_DMAError+0x12>

08007264 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007264:	4a1a      	ldr	r2, [pc, #104]	; (80072d0 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8007266:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007268:	4290      	cmp	r0, r2
 800726a:	d00a      	beq.n	8007282 <TIM_Base_SetConfig+0x1e>
 800726c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007270:	d007      	beq.n	8007282 <TIM_Base_SetConfig+0x1e>
 8007272:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007276:	4290      	cmp	r0, r2
 8007278:	d003      	beq.n	8007282 <TIM_Base_SetConfig+0x1e>
 800727a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800727e:	4290      	cmp	r0, r2
 8007280:	d115      	bne.n	80072ae <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8007282:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007284:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8007288:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800728a:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <TIM_Base_SetConfig+0x6c>)
 800728c:	4290      	cmp	r0, r2
 800728e:	d00a      	beq.n	80072a6 <TIM_Base_SetConfig+0x42>
 8007290:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007294:	d007      	beq.n	80072a6 <TIM_Base_SetConfig+0x42>
 8007296:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800729a:	4290      	cmp	r0, r2
 800729c:	d003      	beq.n	80072a6 <TIM_Base_SetConfig+0x42>
 800729e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072a2:	4290      	cmp	r0, r2
 80072a4:	d103      	bne.n	80072ae <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80072a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072ac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ae:	694a      	ldr	r2, [r1, #20]
 80072b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80072b6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072b8:	688b      	ldr	r3, [r1, #8]
 80072ba:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80072bc:	680b      	ldr	r3, [r1, #0]
 80072be:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072c0:	4b03      	ldr	r3, [pc, #12]	; (80072d0 <TIM_Base_SetConfig+0x6c>)
 80072c2:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80072c4:	bf04      	itt	eq
 80072c6:	690b      	ldreq	r3, [r1, #16]
 80072c8:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80072ca:	2301      	movs	r3, #1
 80072cc:	6143      	str	r3, [r0, #20]
}
 80072ce:	4770      	bx	lr
 80072d0:	40012c00 	.word	0x40012c00

080072d4 <HAL_TIM_PWM_Init>:
{
 80072d4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80072d6:	4604      	mov	r4, r0
 80072d8:	b330      	cbz	r0, 8007328 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80072da:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80072de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072e2:	b91b      	cbnz	r3, 80072ec <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80072e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80072e8:	f7fc fedc 	bl	80040a4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80072ec:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ee:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80072f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072f4:	1d21      	adds	r1, r4, #4
 80072f6:	f7ff ffb5 	bl	8007264 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fa:	2301      	movs	r3, #1
  return HAL_OK;
 80072fc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007302:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8007306:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800730a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800730e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007312:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800731a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800731e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8007322:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007326:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007328:	2001      	movs	r0, #1
 800732a:	e7fc      	b.n	8007326 <HAL_TIM_PWM_Init+0x52>

0800732c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800732c:	6a03      	ldr	r3, [r0, #32]
{
 800732e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007330:	f023 0310 	bic.w	r3, r3, #16
 8007334:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007336:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007338:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800733a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800733c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800733e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007342:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007346:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007348:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800734c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007350:	4d0b      	ldr	r5, [pc, #44]	; (8007380 <TIM_OC2_SetConfig+0x54>)
 8007352:	42a8      	cmp	r0, r5
 8007354:	d10d      	bne.n	8007372 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007356:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800735c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007360:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007364:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8007368:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800736a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800736e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8007372:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8007374:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8007376:	684a      	ldr	r2, [r1, #4]
 8007378:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800737a:	6203      	str	r3, [r0, #32]
}
 800737c:	bd70      	pop	{r4, r5, r6, pc}
 800737e:	bf00      	nop
 8007380:	40012c00 	.word	0x40012c00

08007384 <HAL_TIM_PWM_ConfigChannel>:
{
 8007384:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007386:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800738a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800738c:	2b01      	cmp	r3, #1
 800738e:	d052      	beq.n	8007436 <HAL_TIM_PWM_ConfigChannel+0xb2>
 8007390:	2301      	movs	r3, #1
  switch (Channel)
 8007392:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8007394:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8007398:	d03c      	beq.n	8007414 <HAL_TIM_PWM_ConfigChannel+0x90>
 800739a:	d806      	bhi.n	80073aa <HAL_TIM_PWM_ConfigChannel+0x26>
 800739c:	b1c2      	cbz	r2, 80073d0 <HAL_TIM_PWM_ConfigChannel+0x4c>
 800739e:	2a04      	cmp	r2, #4
 80073a0:	d027      	beq.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 80073a2:	2000      	movs	r0, #0
 80073a4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80073a8:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80073aa:	2a0c      	cmp	r2, #12
 80073ac:	d1f9      	bne.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80073ae:	6800      	ldr	r0, [r0, #0]
 80073b0:	f7ff feb6 	bl	8007120 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073b4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073b6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80073c0:	69da      	ldr	r2, [r3, #28]
 80073c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80073ce:	e030      	b.n	8007432 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80073d0:	6800      	ldr	r0, [r0, #0]
 80073d2:	f7ff fe53 	bl	800707c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073d6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073d8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	f042 0208 	orr.w	r2, r2, #8
 80073e0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	f022 0204 	bic.w	r2, r2, #4
 80073e8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073ea:	699a      	ldr	r2, [r3, #24]
 80073ec:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073ee:	619a      	str	r2, [r3, #24]
      break;
 80073f0:	e7d7      	b.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073f2:	6800      	ldr	r0, [r0, #0]
 80073f4:	f7ff ff9a 	bl	800732c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073fa:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800740a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007412:	e7ec      	b.n	80073ee <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007414:	6800      	ldr	r0, [r0, #0]
 8007416:	f7ff fe59 	bl	80070cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800741a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800741c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800741e:	69da      	ldr	r2, [r3, #28]
 8007420:	f042 0208 	orr.w	r2, r2, #8
 8007424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007426:	69da      	ldr	r2, [r3, #28]
 8007428:	f022 0204 	bic.w	r2, r2, #4
 800742c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007432:	61da      	str	r2, [r3, #28]
      break;
 8007434:	e7b5      	b.n	80073a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8007436:	2002      	movs	r0, #2
 8007438:	e7b6      	b.n	80073a8 <HAL_TIM_PWM_ConfigChannel+0x24>

0800743a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800743a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800743c:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800743e:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007440:	f001 011f 	and.w	r1, r1, #31
 8007444:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007446:	ea23 0304 	bic.w	r3, r3, r4
 800744a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800744c:	6a03      	ldr	r3, [r0, #32]
 800744e:	408a      	lsls	r2, r1
 8007450:	431a      	orrs	r2, r3
 8007452:	6202      	str	r2, [r0, #32]
}
 8007454:	bd10      	pop	{r4, pc}
	...

08007458 <HAL_TIM_OC_Start_DMA>:
{
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	460d      	mov	r5, r1
 800745c:	4604      	mov	r4, r0
 800745e:	4611      	mov	r1, r2
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007460:	b92d      	cbnz	r5, 800746e <HAL_TIM_OC_Start_DMA+0x16>
 8007462:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8007466:	2a02      	cmp	r2, #2
 8007468:	b2d0      	uxtb	r0, r2
 800746a:	d11c      	bne.n	80074a6 <HAL_TIM_OC_Start_DMA+0x4e>
}
 800746c:	bd70      	pop	{r4, r5, r6, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800746e:	2d04      	cmp	r5, #4
 8007470:	d107      	bne.n	8007482 <HAL_TIM_OC_Start_DMA+0x2a>
 8007472:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8007476:	2a02      	cmp	r2, #2
 8007478:	b2d0      	uxtb	r0, r2
 800747a:	d0f7      	beq.n	800746c <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800747c:	f894 003f 	ldrb.w	r0, [r4, #63]	; 0x3f
 8007480:	e013      	b.n	80074aa <HAL_TIM_OC_Start_DMA+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007482:	2d08      	cmp	r5, #8
 8007484:	d107      	bne.n	8007496 <HAL_TIM_OC_Start_DMA+0x3e>
 8007486:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800748a:	2a02      	cmp	r2, #2
 800748c:	b2d0      	uxtb	r0, r2
 800748e:	d0ed      	beq.n	800746c <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007490:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8007494:	e009      	b.n	80074aa <HAL_TIM_OC_Start_DMA+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007496:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800749a:	2a02      	cmp	r2, #2
 800749c:	b2d0      	uxtb	r0, r2
 800749e:	d0e5      	beq.n	800746c <HAL_TIM_OC_Start_DMA+0x14>
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80074a0:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 80074a4:	e001      	b.n	80074aa <HAL_TIM_OC_Start_DMA+0x52>
 80074a6:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 80074aa:	1e42      	subs	r2, r0, #1
 80074ac:	4250      	negs	r0, r2
 80074ae:	4150      	adcs	r0, r2
 80074b0:	b908      	cbnz	r0, 80074b6 <HAL_TIM_OC_Start_DMA+0x5e>
    return HAL_ERROR;
 80074b2:	2001      	movs	r0, #1
 80074b4:	e7da      	b.n	800746c <HAL_TIM_OC_Start_DMA+0x14>
    if ((pData == NULL) && (Length > 0U))
 80074b6:	b909      	cbnz	r1, 80074bc <HAL_TIM_OC_Start_DMA+0x64>
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1fa      	bne.n	80074b2 <HAL_TIM_OC_Start_DMA+0x5a>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074bc:	2002      	movs	r0, #2
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	bb35      	cbnz	r5, 8007510 <HAL_TIM_OC_Start_DMA+0xb8>
 80074c2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80074c6:	4e39      	ldr	r6, [pc, #228]	; (80075ac <HAL_TIM_OC_Start_DMA+0x154>)
 80074c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80074ca:	3234      	adds	r2, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80074cc:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80074ce:	4e38      	ldr	r6, [pc, #224]	; (80075b0 <HAL_TIM_OC_Start_DMA+0x158>)
 80074d0:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80074d2:	4e38      	ldr	r6, [pc, #224]	; (80075b4 <HAL_TIM_OC_Start_DMA+0x15c>)
 80074d4:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80074d6:	f7fe f895 	bl	8005604 <HAL_DMA_Start_IT>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d1e9      	bne.n	80074b2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80074de:	6822      	ldr	r2, [r4, #0]
 80074e0:	68d3      	ldr	r3, [r2, #12]
 80074e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80074e6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074e8:	2201      	movs	r2, #1
 80074ea:	4629      	mov	r1, r5
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	f7ff ffa4 	bl	800743a <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	4a30      	ldr	r2, [pc, #192]	; (80075b8 <HAL_TIM_OC_Start_DMA+0x160>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d149      	bne.n	800758e <HAL_TIM_OC_Start_DMA+0x136>
    __HAL_TIM_MOE_ENABLE(htim);
 80074fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007500:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007502:	689a      	ldr	r2, [r3, #8]
 8007504:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007508:	2a06      	cmp	r2, #6
 800750a:	d14a      	bne.n	80075a2 <HAL_TIM_OC_Start_DMA+0x14a>
  return HAL_OK;
 800750c:	2000      	movs	r0, #0
 800750e:	e7ad      	b.n	800746c <HAL_TIM_OC_Start_DMA+0x14>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007510:	2d04      	cmp	r5, #4
 8007512:	d112      	bne.n	800753a <HAL_TIM_OC_Start_DMA+0xe2>
 8007514:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007518:	4e24      	ldr	r6, [pc, #144]	; (80075ac <HAL_TIM_OC_Start_DMA+0x154>)
 800751a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800751c:	3238      	adds	r2, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800751e:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007520:	4e23      	ldr	r6, [pc, #140]	; (80075b0 <HAL_TIM_OC_Start_DMA+0x158>)
 8007522:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007524:	4e23      	ldr	r6, [pc, #140]	; (80075b4 <HAL_TIM_OC_Start_DMA+0x15c>)
 8007526:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007528:	f7fe f86c 	bl	8005604 <HAL_DMA_Start_IT>
 800752c:	2800      	cmp	r0, #0
 800752e:	d1c0      	bne.n	80074b2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	68d3      	ldr	r3, [r2, #12]
 8007534:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007538:	e7d5      	b.n	80074e6 <HAL_TIM_OC_Start_DMA+0x8e>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800753a:	2d08      	cmp	r5, #8
 800753c:	d112      	bne.n	8007564 <HAL_TIM_OC_Start_DMA+0x10c>
 800753e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007542:	4e1a      	ldr	r6, [pc, #104]	; (80075ac <HAL_TIM_OC_Start_DMA+0x154>)
 8007544:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007546:	323c      	adds	r2, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007548:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800754a:	4e19      	ldr	r6, [pc, #100]	; (80075b0 <HAL_TIM_OC_Start_DMA+0x158>)
 800754c:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800754e:	4e19      	ldr	r6, [pc, #100]	; (80075b4 <HAL_TIM_OC_Start_DMA+0x15c>)
 8007550:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007552:	f7fe f857 	bl	8005604 <HAL_DMA_Start_IT>
 8007556:	2800      	cmp	r0, #0
 8007558:	d1ab      	bne.n	80074b2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800755a:	6822      	ldr	r2, [r4, #0]
 800755c:	68d3      	ldr	r3, [r2, #12]
 800755e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007562:	e7c0      	b.n	80074e6 <HAL_TIM_OC_Start_DMA+0x8e>
  switch (Channel)
 8007564:	2d0c      	cmp	r5, #12
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007566:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  switch (Channel)
 800756a:	d1bd      	bne.n	80074e8 <HAL_TIM_OC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800756c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800756e:	4e0f      	ldr	r6, [pc, #60]	; (80075ac <HAL_TIM_OC_Start_DMA+0x154>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007570:	3240      	adds	r2, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007572:	6286      	str	r6, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007574:	4e0e      	ldr	r6, [pc, #56]	; (80075b0 <HAL_TIM_OC_Start_DMA+0x158>)
 8007576:	62c6      	str	r6, [r0, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007578:	4e0e      	ldr	r6, [pc, #56]	; (80075b4 <HAL_TIM_OC_Start_DMA+0x15c>)
 800757a:	6306      	str	r6, [r0, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800757c:	f7fe f842 	bl	8005604 <HAL_DMA_Start_IT>
 8007580:	2800      	cmp	r0, #0
 8007582:	d196      	bne.n	80074b2 <HAL_TIM_OC_Start_DMA+0x5a>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007584:	6822      	ldr	r2, [r4, #0]
 8007586:	68d3      	ldr	r3, [r2, #12]
 8007588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800758c:	e7ab      	b.n	80074e6 <HAL_TIM_OC_Start_DMA+0x8e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007592:	d0b6      	beq.n	8007502 <HAL_TIM_OC_Start_DMA+0xaa>
 8007594:	4a09      	ldr	r2, [pc, #36]	; (80075bc <HAL_TIM_OC_Start_DMA+0x164>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d0b3      	beq.n	8007502 <HAL_TIM_OC_Start_DMA+0xaa>
 800759a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800759e:	4293      	cmp	r3, r2
 80075a0:	d0af      	beq.n	8007502 <HAL_TIM_OC_Start_DMA+0xaa>
    __HAL_TIM_ENABLE(htim);
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	f042 0201 	orr.w	r2, r2, #1
 80075a8:	601a      	str	r2, [r3, #0]
 80075aa:	e7af      	b.n	800750c <HAL_TIM_OC_Start_DMA+0xb4>
 80075ac:	08007167 	.word	0x08007167
 80075b0:	080071d3 	.word	0x080071d3
 80075b4:	0800720d 	.word	0x0800720d
 80075b8:	40012c00 	.word	0x40012c00
 80075bc:	40000400 	.word	0x40000400

080075c0 <HAL_TIM_PWM_Start_DMA>:
 80075c0:	f7ff bf4a 	b.w	8007458 <HAL_TIM_OC_Start_DMA>

080075c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075c4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075c6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80075ca:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	f04f 0002 	mov.w	r0, #2
 80075d2:	d022      	beq.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075d4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80075d6:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80075da:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075dc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80075de:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075e2:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 80075e4:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075e6:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075e8:	4c0c      	ldr	r4, [pc, #48]	; (800761c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	d00a      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80075ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f2:	d007      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80075f4:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80075f8:	42a3      	cmp	r3, r4
 80075fa:	d003      	beq.n	8007604 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80075fc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8007600:	42a3      	cmp	r3, r4
 8007602:	d104      	bne.n	800760e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007604:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007606:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800760a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800760c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800760e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8007610:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007612:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007616:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 800761a:	bd30      	pop	{r4, r5, pc}
 800761c:	40012c00 	.word	0x40012c00

08007620 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007620:	6803      	ldr	r3, [r0, #0]
 8007622:	68da      	ldr	r2, [r3, #12]
 8007624:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007628:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	f022 0201 	bic.w	r2, r2, #1
 8007630:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007632:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007634:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007636:	bf02      	ittt	eq
 8007638:	68da      	ldreq	r2, [r3, #12]
 800763a:	f022 0210 	biceq.w	r2, r2, #16
 800763e:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007640:	2320      	movs	r3, #32
 8007642:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007646:	2300      	movs	r3, #0
 8007648:	6303      	str	r3, [r0, #48]	; 0x30
}
 800764a:	4770      	bx	lr

0800764c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800764c:	b510      	push	{r4, lr}
 800764e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007650:	6803      	ldr	r3, [r0, #0]
 8007652:	68c1      	ldr	r1, [r0, #12]
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800765a:	430a      	orrs	r2, r1
 800765c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800765e:	6882      	ldr	r2, [r0, #8]
 8007660:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007662:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007664:	4302      	orrs	r2, r0
 8007666:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007668:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800766c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007670:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007672:	430a      	orrs	r2, r1
 8007674:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007676:	695a      	ldr	r2, [r3, #20]
 8007678:	69a1      	ldr	r1, [r4, #24]
 800767a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800767e:	430a      	orrs	r2, r1
 8007680:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007682:	4a0e      	ldr	r2, [pc, #56]	; (80076bc <UART_SetConfig+0x70>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d115      	bne.n	80076b4 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007688:	f7ff fa14 	bl	8006ab4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800768c:	2319      	movs	r3, #25
 800768e:	4343      	muls	r3, r0
 8007690:	6862      	ldr	r2, [r4, #4]
 8007692:	6820      	ldr	r0, [r4, #0]
 8007694:	0092      	lsls	r2, r2, #2
 8007696:	fbb3 f3f2 	udiv	r3, r3, r2
 800769a:	2264      	movs	r2, #100	; 0x64
 800769c:	fbb3 f1f2 	udiv	r1, r3, r2
 80076a0:	fb02 3311 	mls	r3, r2, r1, r3
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	3332      	adds	r3, #50	; 0x32
 80076a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80076ac:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80076b0:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 80076b2:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80076b4:	f7ff f9ee 	bl	8006a94 <HAL_RCC_GetPCLK1Freq>
 80076b8:	e7e8      	b.n	800768c <UART_SetConfig+0x40>
 80076ba:	bf00      	nop
 80076bc:	40013800 	.word	0x40013800

080076c0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	4604      	mov	r4, r0
 80076c4:	460e      	mov	r6, r1
 80076c6:	4617      	mov	r7, r2
 80076c8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076ca:	6822      	ldr	r2, [r4, #0]
 80076cc:	6813      	ldr	r3, [r2, #0]
 80076ce:	ea36 0303 	bics.w	r3, r6, r3
 80076d2:	d101      	bne.n	80076d8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80076d4:	2000      	movs	r0, #0
 80076d6:	e014      	b.n	8007702 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80076d8:	1c6b      	adds	r3, r5, #1
 80076da:	d0f7      	beq.n	80076cc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80076dc:	b995      	cbnz	r5, 8007704 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076de:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80076e0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80076e2:	68da      	ldr	r2, [r3, #12]
 80076e4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80076e8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ea:	695a      	ldr	r2, [r3, #20]
 80076ec:	f022 0201 	bic.w	r2, r2, #1
 80076f0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80076f2:	2320      	movs	r3, #32
 80076f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80076fc:	2300      	movs	r3, #0
 80076fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007704:	f7fd fca8 	bl	8005058 <HAL_GetTick>
 8007708:	1bc0      	subs	r0, r0, r7
 800770a:	4285      	cmp	r5, r0
 800770c:	d2dd      	bcs.n	80076ca <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800770e:	e7e6      	b.n	80076de <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08007710 <HAL_UART_Init>:
{
 8007710:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007712:	4604      	mov	r4, r0
 8007714:	b340      	cbz	r0, 8007768 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007716:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800771a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800771e:	b91b      	cbnz	r3, 8007728 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007720:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8007724:	f7fc fd18 	bl	8004158 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007728:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800772a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800772c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8007730:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007732:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007738:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800773a:	f7ff ff87 	bl	800764c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800773e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007740:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800774a:	695a      	ldr	r2, [r3, #20]
 800774c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007750:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007758:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800775a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800775c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800775e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007762:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8007766:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007768:	2001      	movs	r0, #1
 800776a:	e7fc      	b.n	8007766 <HAL_UART_Init+0x56>

0800776c <HAL_UART_Transmit>:
{
 800776c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007770:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007772:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8007776:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8007778:	2b20      	cmp	r3, #32
{
 800777a:	460e      	mov	r6, r1
 800777c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800777e:	d148      	bne.n	8007812 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8007780:	2900      	cmp	r1, #0
 8007782:	d044      	beq.n	800780e <HAL_UART_Transmit+0xa2>
 8007784:	2a00      	cmp	r2, #0
 8007786:	d042      	beq.n	800780e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8007788:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d040      	beq.n	8007812 <HAL_UART_Transmit+0xa6>
 8007790:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8007794:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007798:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779a:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80077a0:	f7fd fc5a 	bl	8005058 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80077a6:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 80077ac:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 80077ae:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b0:	d103      	bne.n	80077ba <HAL_UART_Transmit+0x4e>
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	b90b      	cbnz	r3, 80077ba <HAL_UART_Transmit+0x4e>
 80077b6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80077b8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80077ba:	2300      	movs	r3, #0
 80077bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 80077c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	b953      	cbnz	r3, 80077dc <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077c6:	464b      	mov	r3, r9
 80077c8:	4642      	mov	r2, r8
 80077ca:	2140      	movs	r1, #64	; 0x40
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff ff77 	bl	80076c0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80077d2:	b950      	cbnz	r0, 80077ea <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80077d4:	2320      	movs	r3, #32
 80077d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80077da:	e007      	b.n	80077ec <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077dc:	464b      	mov	r3, r9
 80077de:	4642      	mov	r2, r8
 80077e0:	2180      	movs	r1, #128	; 0x80
 80077e2:	4620      	mov	r0, r4
 80077e4:	f7ff ff6c 	bl	80076c0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80077e8:	b110      	cbz	r0, 80077f0 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80077ea:	2003      	movs	r0, #3
}
 80077ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 80077f0:	6822      	ldr	r2, [r4, #0]
 80077f2:	b94e      	cbnz	r6, 8007808 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077f4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80077f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077fc:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80077fe:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8007800:	3901      	subs	r1, #1
 8007802:	b289      	uxth	r1, r1
 8007804:	84e1      	strh	r1, [r4, #38]	; 0x26
 8007806:	e7db      	b.n	80077c0 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007808:	f816 3b01 	ldrb.w	r3, [r6], #1
 800780c:	e7f6      	b.n	80077fc <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800780e:	2001      	movs	r0, #1
 8007810:	e7ec      	b.n	80077ec <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8007812:	2002      	movs	r0, #2
 8007814:	e7ea      	b.n	80077ec <HAL_UART_Transmit+0x80>

08007816 <HAL_UART_TxCpltCallback>:
 8007816:	4770      	bx	lr

08007818 <HAL_UART_ErrorCallback>:
 8007818:	4770      	bx	lr

0800781a <UART_DMAAbortOnError>:
{
 800781a:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800781c:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800781e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8007820:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007822:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8007824:	f7ff fff8 	bl	8007818 <HAL_UART_ErrorCallback>
}
 8007828:	bd08      	pop	{r3, pc}

0800782a <HAL_UARTEx_RxEventCallback>:
}
 800782a:	4770      	bx	lr

0800782c <UART_Receive_IT>:
{
 800782c:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800782e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8007832:	2b22      	cmp	r3, #34	; 0x22
 8007834:	d149      	bne.n	80078ca <UART_Receive_IT+0x9e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007836:	6881      	ldr	r1, [r0, #8]
 8007838:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800783a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800783e:	6802      	ldr	r2, [r0, #0]
 8007840:	d133      	bne.n	80078aa <UART_Receive_IT+0x7e>
 8007842:	6901      	ldr	r1, [r0, #16]
 8007844:	2900      	cmp	r1, #0
 8007846:	d133      	bne.n	80078b0 <UART_Receive_IT+0x84>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007848:	6852      	ldr	r2, [r2, #4]
 800784a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800784e:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 8007852:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 8007854:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007856:	3c01      	subs	r4, #1
 8007858:	b2a4      	uxth	r4, r4
 800785a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800785c:	bb1c      	cbnz	r4, 80078a6 <UART_Receive_IT+0x7a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800785e:	6803      	ldr	r3, [r0, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	f022 0220 	bic.w	r2, r2, #32
 8007866:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800786e:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007870:	695a      	ldr	r2, [r3, #20]
 8007872:	f022 0201 	bic.w	r2, r2, #1
 8007876:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007878:	2220      	movs	r2, #32
 800787a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007880:	2a01      	cmp	r2, #1
 8007882:	d11f      	bne.n	80078c4 <UART_Receive_IT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	6304      	str	r4, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	f022 0210 	bic.w	r2, r2, #16
 800788c:	60da      	str	r2, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	06d2      	lsls	r2, r2, #27
 8007892:	d505      	bpl.n	80078a0 <UART_Receive_IT+0x74>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007894:	9401      	str	r4, [sp, #4]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	9201      	str	r2, [sp, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a0:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80078a2:	f7ff ffc2 	bl	800782a <HAL_UARTEx_RxEventCallback>
 80078a6:	2000      	movs	r0, #0
 80078a8:	e010      	b.n	80078cc <UART_Receive_IT+0xa0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078aa:	b939      	cbnz	r1, 80078bc <UART_Receive_IT+0x90>
 80078ac:	6901      	ldr	r1, [r0, #16]
 80078ae:	b929      	cbnz	r1, 80078bc <UART_Receive_IT+0x90>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078b0:	6852      	ldr	r2, [r2, #4]
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 80078b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80078b8:	3301      	adds	r3, #1
 80078ba:	e7ca      	b.n	8007852 <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078bc:	6852      	ldr	r2, [r2, #4]
 80078be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078c2:	e7f7      	b.n	80078b4 <UART_Receive_IT+0x88>
       HAL_UART_RxCpltCallback(huart);
 80078c4:	f7f9 face 	bl	8000e64 <HAL_UART_RxCpltCallback>
 80078c8:	e7ed      	b.n	80078a6 <UART_Receive_IT+0x7a>
    return HAL_BUSY;
 80078ca:	2002      	movs	r0, #2
}
 80078cc:	b002      	add	sp, #8
 80078ce:	bd10      	pop	{r4, pc}

080078d0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078d0:	6803      	ldr	r3, [r0, #0]
{
 80078d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80078d4:	681a      	ldr	r2, [r3, #0]
{
 80078d6:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80078d8:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078dc:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078de:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 80078e0:	d108      	bne.n	80078f4 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078e2:	0695      	lsls	r5, r2, #26
 80078e4:	d55f      	bpl.n	80079a6 <HAL_UART_IRQHandler+0xd6>
 80078e6:	068d      	lsls	r5, r1, #26
 80078e8:	d55d      	bpl.n	80079a6 <HAL_UART_IRQHandler+0xd6>
}
 80078ea:	b003      	add	sp, #12
 80078ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 80078f0:	f7ff bf9c 	b.w	800782c <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80078f4:	f005 0001 	and.w	r0, r5, #1
 80078f8:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80078fc:	4305      	orrs	r5, r0
 80078fe:	d052      	beq.n	80079a6 <HAL_UART_IRQHandler+0xd6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007900:	07d5      	lsls	r5, r2, #31
 8007902:	d505      	bpl.n	8007910 <HAL_UART_IRQHandler+0x40>
 8007904:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007906:	bf42      	ittt	mi
 8007908:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800790a:	f043 0301 	orrmi.w	r3, r3, #1
 800790e:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007910:	0755      	lsls	r5, r2, #29
 8007912:	d504      	bpl.n	800791e <HAL_UART_IRQHandler+0x4e>
 8007914:	b118      	cbz	r0, 800791e <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007916:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007918:	f043 0302 	orr.w	r3, r3, #2
 800791c:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800791e:	0793      	lsls	r3, r2, #30
 8007920:	d504      	bpl.n	800792c <HAL_UART_IRQHandler+0x5c>
 8007922:	b118      	cbz	r0, 800792c <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007926:	f043 0304 	orr.w	r3, r3, #4
 800792a:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800792c:	0715      	lsls	r5, r2, #28
 800792e:	d507      	bpl.n	8007940 <HAL_UART_IRQHandler+0x70>
 8007930:	f001 0320 	and.w	r3, r1, #32
 8007934:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007936:	bf1e      	ittt	ne
 8007938:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800793a:	f043 0308 	orrne.w	r3, r3, #8
 800793e:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007940:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007942:	b353      	cbz	r3, 800799a <HAL_UART_IRQHandler+0xca>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007944:	0692      	lsls	r2, r2, #26
 8007946:	d504      	bpl.n	8007952 <HAL_UART_IRQHandler+0x82>
 8007948:	068b      	lsls	r3, r1, #26
 800794a:	d502      	bpl.n	8007952 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 800794c:	4620      	mov	r0, r4
 800794e:	f7ff ff6d 	bl	800782c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007952:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8007954:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007956:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007958:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800795a:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800795e:	f005 0508 	and.w	r5, r5, #8
 8007962:	431d      	orrs	r5, r3
 8007964:	d01b      	beq.n	800799e <HAL_UART_IRQHandler+0xce>
        UART_EndRxTransfer(huart);
 8007966:	f7ff fe5b 	bl	8007620 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	695a      	ldr	r2, [r3, #20]
 800796e:	0655      	lsls	r5, r2, #25
 8007970:	d510      	bpl.n	8007994 <HAL_UART_IRQHandler+0xc4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007972:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007974:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800797a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800797c:	b150      	cbz	r0, 8007994 <HAL_UART_IRQHandler+0xc4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800797e:	4b53      	ldr	r3, [pc, #332]	; (8007acc <HAL_UART_IRQHandler+0x1fc>)
 8007980:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007982:	f7fd fe99 	bl	80056b8 <HAL_DMA_Abort_IT>
 8007986:	b140      	cbz	r0, 800799a <HAL_UART_IRQHandler+0xca>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007988:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800798a:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800798c:	b003      	add	sp, #12
 800798e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007992:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007994:	4620      	mov	r0, r4
 8007996:	f7ff ff3f 	bl	8007818 <HAL_UART_ErrorCallback>
}
 800799a:	b003      	add	sp, #12
 800799c:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800799e:	f7ff ff3b 	bl	8007818 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a2:	6425      	str	r5, [r4, #64]	; 0x40
 80079a4:	e7f9      	b.n	800799a <HAL_UART_IRQHandler+0xca>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80079a8:	2801      	cmp	r0, #1
 80079aa:	d155      	bne.n	8007a58 <HAL_UART_IRQHandler+0x188>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80079ac:	06d0      	lsls	r0, r2, #27
 80079ae:	d553      	bpl.n	8007a58 <HAL_UART_IRQHandler+0x188>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80079b0:	06cd      	lsls	r5, r1, #27
 80079b2:	d551      	bpl.n	8007a58 <HAL_UART_IRQHandler+0x188>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80079b4:	2100      	movs	r1, #0
 80079b6:	9101      	str	r1, [sp, #4]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	9201      	str	r2, [sp, #4]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	9201      	str	r2, [sp, #4]
 80079c0:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c2:	695a      	ldr	r2, [r3, #20]
 80079c4:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80079c8:	d02a      	beq.n	8007a20 <HAL_UART_IRQHandler+0x150>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80079cc:	6802      	ldr	r2, [r0, #0]
 80079ce:	6852      	ldr	r2, [r2, #4]
 80079d0:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 80079d2:	2a00      	cmp	r2, #0
 80079d4:	d0e1      	beq.n	800799a <HAL_UART_IRQHandler+0xca>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80079d6:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 80079d8:	4295      	cmp	r5, r2
 80079da:	d9de      	bls.n	800799a <HAL_UART_IRQHandler+0xca>
        huart->RxXferCount = nb_remaining_rx_data;
 80079dc:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079de:	6982      	ldr	r2, [r0, #24]
 80079e0:	2a20      	cmp	r2, #32
 80079e2:	d015      	beq.n	8007a10 <HAL_UART_IRQHandler+0x140>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079e4:	68da      	ldr	r2, [r3, #12]
 80079e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80079ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ec:	695a      	ldr	r2, [r3, #20]
 80079ee:	f022 0201 	bic.w	r2, r2, #1
 80079f2:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079f4:	695a      	ldr	r2, [r3, #20]
 80079f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fa:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 80079fc:	2220      	movs	r2, #32
 80079fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a02:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	f022 0210 	bic.w	r2, r2, #16
 8007a0a:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a0c:	f7fd fe36 	bl	800567c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a10:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8007a12:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007a14:	1ac9      	subs	r1, r1, r3
 8007a16:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f7ff ff06 	bl	800782a <HAL_UARTEx_RxEventCallback>
 8007a1e:	e7bc      	b.n	800799a <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a20:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8007a22:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 8007a24:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8007a26:	b289      	uxth	r1, r1
 8007a28:	2900      	cmp	r1, #0
 8007a2a:	d0b6      	beq.n	800799a <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a2c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8007a2e:	1a09      	subs	r1, r1, r0
 8007a30:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8007a32:	2900      	cmp	r1, #0
 8007a34:	d0b1      	beq.n	800799a <HAL_UART_IRQHandler+0xca>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a36:	68d8      	ldr	r0, [r3, #12]
 8007a38:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 8007a3c:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a3e:	6958      	ldr	r0, [r3, #20]
 8007a40:	f020 0001 	bic.w	r0, r0, #1
 8007a44:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8007a46:	2020      	movs	r0, #32
 8007a48:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4c:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	f022 0210 	bic.w	r2, r2, #16
 8007a54:	60da      	str	r2, [r3, #12]
 8007a56:	e7df      	b.n	8007a18 <HAL_UART_IRQHandler+0x148>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007a58:	0610      	lsls	r0, r2, #24
 8007a5a:	d526      	bpl.n	8007aaa <HAL_UART_IRQHandler+0x1da>
 8007a5c:	060d      	lsls	r5, r1, #24
 8007a5e:	d524      	bpl.n	8007aaa <HAL_UART_IRQHandler+0x1da>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a60:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8007a64:	2a21      	cmp	r2, #33	; 0x21
 8007a66:	d198      	bne.n	800799a <HAL_UART_IRQHandler+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a68:	68a1      	ldr	r1, [r4, #8]
 8007a6a:	6a22      	ldr	r2, [r4, #32]
 8007a6c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007a70:	d116      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x1d0>
 8007a72:	6921      	ldr	r1, [r4, #16]
 8007a74:	b9a1      	cbnz	r1, 8007aa0 <HAL_UART_IRQHandler+0x1d0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007a76:	f832 1b02 	ldrh.w	r1, [r2], #2
 8007a7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8007a7e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007a80:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8007a82:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8007a84:	3a01      	subs	r2, #1
 8007a86:	b292      	uxth	r2, r2
 8007a88:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007a8a:	2a00      	cmp	r2, #0
 8007a8c:	d185      	bne.n	800799a <HAL_UART_IRQHandler+0xca>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007a8e:	68da      	ldr	r2, [r3, #12]
 8007a90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a94:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007a96:	68da      	ldr	r2, [r3, #12]
 8007a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	e77c      	b.n	800799a <HAL_UART_IRQHandler+0xca>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007aa0:	1c51      	adds	r1, r2, #1
 8007aa2:	6221      	str	r1, [r4, #32]
 8007aa4:	7812      	ldrb	r2, [r2, #0]
 8007aa6:	605a      	str	r2, [r3, #4]
 8007aa8:	e7eb      	b.n	8007a82 <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007aaa:	0650      	lsls	r0, r2, #25
 8007aac:	f57f af75 	bpl.w	800799a <HAL_UART_IRQHandler+0xca>
 8007ab0:	064a      	lsls	r2, r1, #25
 8007ab2:	f57f af72 	bpl.w	800799a <HAL_UART_IRQHandler+0xca>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ab6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8007ab8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007abe:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	2320      	movs	r3, #32
 8007ac2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8007ac6:	f7ff fea6 	bl	8007816 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8007aca:	e766      	b.n	800799a <HAL_UART_IRQHandler+0xca>
 8007acc:	0800781b 	.word	0x0800781b

08007ad0 <UART_Start_Receive_IT>:
  huart->RxXferCount = Size;
 8007ad0:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 8007ad2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 8007ad4:	6281      	str	r1, [r0, #40]	; 0x28
{
 8007ad6:	4603      	mov	r3, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ad8:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ada:	2000      	movs	r0, #0
 8007adc:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 8007ade:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aee:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007af0:	695a      	ldr	r2, [r3, #20]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	f042 0220 	orr.w	r2, r2, #32
 8007afe:	60da      	str	r2, [r3, #12]
}
 8007b00:	4770      	bx	lr

08007b02 <HAL_UART_Receive_IT>:
{
 8007b02:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b04:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8007b08:	2e20      	cmp	r6, #32
 8007b0a:	d110      	bne.n	8007b2e <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8007b0c:	b161      	cbz	r1, 8007b28 <HAL_UART_Receive_IT+0x26>
 8007b0e:	b15a      	cbz	r2, 8007b28 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 8007b10:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8007b14:	2c01      	cmp	r4, #1
 8007b16:	d00a      	beq.n	8007b2e <HAL_UART_Receive_IT+0x2c>
 8007b18:	2401      	movs	r4, #1
 8007b1a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1e:	2400      	movs	r4, #0
 8007b20:	6304      	str	r4, [r0, #48]	; 0x30
}
 8007b22:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007b24:	f7ff bfd4 	b.w	8007ad0 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8007b28:	2001      	movs	r0, #1
}
 8007b2a:	bc70      	pop	{r4, r5, r6}
 8007b2c:	4770      	bx	lr
    return HAL_BUSY;
 8007b2e:	2002      	movs	r0, #2
 8007b30:	e7fb      	b.n	8007b2a <HAL_UART_Receive_IT+0x28>
	...

08007b34 <__errno>:
 8007b34:	4b01      	ldr	r3, [pc, #4]	; (8007b3c <__errno+0x8>)
 8007b36:	6818      	ldr	r0, [r3, #0]
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	20000058 	.word	0x20000058

08007b40 <__libc_init_array>:
 8007b40:	b570      	push	{r4, r5, r6, lr}
 8007b42:	2600      	movs	r6, #0
 8007b44:	4d0c      	ldr	r5, [pc, #48]	; (8007b78 <__libc_init_array+0x38>)
 8007b46:	4c0d      	ldr	r4, [pc, #52]	; (8007b7c <__libc_init_array+0x3c>)
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	d109      	bne.n	8007b64 <__libc_init_array+0x24>
 8007b50:	f001 f9d2 	bl	8008ef8 <_init>
 8007b54:	2600      	movs	r6, #0
 8007b56:	4d0a      	ldr	r5, [pc, #40]	; (8007b80 <__libc_init_array+0x40>)
 8007b58:	4c0a      	ldr	r4, [pc, #40]	; (8007b84 <__libc_init_array+0x44>)
 8007b5a:	1b64      	subs	r4, r4, r5
 8007b5c:	10a4      	asrs	r4, r4, #2
 8007b5e:	42a6      	cmp	r6, r4
 8007b60:	d105      	bne.n	8007b6e <__libc_init_array+0x2e>
 8007b62:	bd70      	pop	{r4, r5, r6, pc}
 8007b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b68:	4798      	blx	r3
 8007b6a:	3601      	adds	r6, #1
 8007b6c:	e7ee      	b.n	8007b4c <__libc_init_array+0xc>
 8007b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b72:	4798      	blx	r3
 8007b74:	3601      	adds	r6, #1
 8007b76:	e7f2      	b.n	8007b5e <__libc_init_array+0x1e>
 8007b78:	08009c30 	.word	0x08009c30
 8007b7c:	08009c30 	.word	0x08009c30
 8007b80:	08009c30 	.word	0x08009c30
 8007b84:	08009c34 	.word	0x08009c34

08007b88 <memcpy>:
 8007b88:	440a      	add	r2, r1
 8007b8a:	4291      	cmp	r1, r2
 8007b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b90:	d100      	bne.n	8007b94 <memcpy+0xc>
 8007b92:	4770      	bx	lr
 8007b94:	b510      	push	{r4, lr}
 8007b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b9a:	4291      	cmp	r1, r2
 8007b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ba0:	d1f9      	bne.n	8007b96 <memcpy+0xe>
 8007ba2:	bd10      	pop	{r4, pc}

08007ba4 <memset>:
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	4402      	add	r2, r0
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d100      	bne.n	8007bae <memset+0xa>
 8007bac:	4770      	bx	lr
 8007bae:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb2:	e7f9      	b.n	8007ba8 <memset+0x4>

08007bb4 <iprintf>:
 8007bb4:	b40f      	push	{r0, r1, r2, r3}
 8007bb6:	4b0a      	ldr	r3, [pc, #40]	; (8007be0 <iprintf+0x2c>)
 8007bb8:	b513      	push	{r0, r1, r4, lr}
 8007bba:	681c      	ldr	r4, [r3, #0]
 8007bbc:	b124      	cbz	r4, 8007bc8 <iprintf+0x14>
 8007bbe:	69a3      	ldr	r3, [r4, #24]
 8007bc0:	b913      	cbnz	r3, 8007bc8 <iprintf+0x14>
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f000 fa86 	bl	80080d4 <__sinit>
 8007bc8:	ab05      	add	r3, sp, #20
 8007bca:	4620      	mov	r0, r4
 8007bcc:	9a04      	ldr	r2, [sp, #16]
 8007bce:	68a1      	ldr	r1, [r4, #8]
 8007bd0:	9301      	str	r3, [sp, #4]
 8007bd2:	f000 fdad 	bl	8008730 <_vfiprintf_r>
 8007bd6:	b002      	add	sp, #8
 8007bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bdc:	b004      	add	sp, #16
 8007bde:	4770      	bx	lr
 8007be0:	20000058 	.word	0x20000058

08007be4 <_puts_r>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	460e      	mov	r6, r1
 8007be8:	4605      	mov	r5, r0
 8007bea:	b118      	cbz	r0, 8007bf4 <_puts_r+0x10>
 8007bec:	6983      	ldr	r3, [r0, #24]
 8007bee:	b90b      	cbnz	r3, 8007bf4 <_puts_r+0x10>
 8007bf0:	f000 fa70 	bl	80080d4 <__sinit>
 8007bf4:	69ab      	ldr	r3, [r5, #24]
 8007bf6:	68ac      	ldr	r4, [r5, #8]
 8007bf8:	b913      	cbnz	r3, 8007c00 <_puts_r+0x1c>
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	f000 fa6a 	bl	80080d4 <__sinit>
 8007c00:	4b2c      	ldr	r3, [pc, #176]	; (8007cb4 <_puts_r+0xd0>)
 8007c02:	429c      	cmp	r4, r3
 8007c04:	d120      	bne.n	8007c48 <_puts_r+0x64>
 8007c06:	686c      	ldr	r4, [r5, #4]
 8007c08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c0a:	07db      	lsls	r3, r3, #31
 8007c0c:	d405      	bmi.n	8007c1a <_puts_r+0x36>
 8007c0e:	89a3      	ldrh	r3, [r4, #12]
 8007c10:	0598      	lsls	r0, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_puts_r+0x36>
 8007c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c16:	f000 fafb 	bl	8008210 <__retarget_lock_acquire_recursive>
 8007c1a:	89a3      	ldrh	r3, [r4, #12]
 8007c1c:	0719      	lsls	r1, r3, #28
 8007c1e:	d51d      	bpl.n	8007c5c <_puts_r+0x78>
 8007c20:	6923      	ldr	r3, [r4, #16]
 8007c22:	b1db      	cbz	r3, 8007c5c <_puts_r+0x78>
 8007c24:	3e01      	subs	r6, #1
 8007c26:	68a3      	ldr	r3, [r4, #8]
 8007c28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	60a3      	str	r3, [r4, #8]
 8007c30:	bb39      	cbnz	r1, 8007c82 <_puts_r+0x9e>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da38      	bge.n	8007ca8 <_puts_r+0xc4>
 8007c36:	4622      	mov	r2, r4
 8007c38:	210a      	movs	r1, #10
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f000 f870 	bl	8007d20 <__swbuf_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d011      	beq.n	8007c68 <_puts_r+0x84>
 8007c44:	250a      	movs	r5, #10
 8007c46:	e011      	b.n	8007c6c <_puts_r+0x88>
 8007c48:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <_puts_r+0xd4>)
 8007c4a:	429c      	cmp	r4, r3
 8007c4c:	d101      	bne.n	8007c52 <_puts_r+0x6e>
 8007c4e:	68ac      	ldr	r4, [r5, #8]
 8007c50:	e7da      	b.n	8007c08 <_puts_r+0x24>
 8007c52:	4b1a      	ldr	r3, [pc, #104]	; (8007cbc <_puts_r+0xd8>)
 8007c54:	429c      	cmp	r4, r3
 8007c56:	bf08      	it	eq
 8007c58:	68ec      	ldreq	r4, [r5, #12]
 8007c5a:	e7d5      	b.n	8007c08 <_puts_r+0x24>
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 f8b0 	bl	8007dc4 <__swsetup_r>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d0dd      	beq.n	8007c24 <_puts_r+0x40>
 8007c68:	f04f 35ff 	mov.w	r5, #4294967295
 8007c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c6e:	07da      	lsls	r2, r3, #31
 8007c70:	d405      	bmi.n	8007c7e <_puts_r+0x9a>
 8007c72:	89a3      	ldrh	r3, [r4, #12]
 8007c74:	059b      	lsls	r3, r3, #22
 8007c76:	d402      	bmi.n	8007c7e <_puts_r+0x9a>
 8007c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c7a:	f000 faca 	bl	8008212 <__retarget_lock_release_recursive>
 8007c7e:	4628      	mov	r0, r5
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	da04      	bge.n	8007c90 <_puts_r+0xac>
 8007c86:	69a2      	ldr	r2, [r4, #24]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	dc06      	bgt.n	8007c9a <_puts_r+0xb6>
 8007c8c:	290a      	cmp	r1, #10
 8007c8e:	d004      	beq.n	8007c9a <_puts_r+0xb6>
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	6022      	str	r2, [r4, #0]
 8007c96:	7019      	strb	r1, [r3, #0]
 8007c98:	e7c5      	b.n	8007c26 <_puts_r+0x42>
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	f000 f83f 	bl	8007d20 <__swbuf_r>
 8007ca2:	3001      	adds	r0, #1
 8007ca4:	d1bf      	bne.n	8007c26 <_puts_r+0x42>
 8007ca6:	e7df      	b.n	8007c68 <_puts_r+0x84>
 8007ca8:	250a      	movs	r5, #10
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	701d      	strb	r5, [r3, #0]
 8007cb2:	e7db      	b.n	8007c6c <_puts_r+0x88>
 8007cb4:	08009bbc 	.word	0x08009bbc
 8007cb8:	08009bdc 	.word	0x08009bdc
 8007cbc:	08009b9c 	.word	0x08009b9c

08007cc0 <puts>:
 8007cc0:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <puts+0xc>)
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	f7ff bf8d 	b.w	8007be4 <_puts_r>
 8007cca:	bf00      	nop
 8007ccc:	20000058 	.word	0x20000058

08007cd0 <siprintf>:
 8007cd0:	b40e      	push	{r1, r2, r3}
 8007cd2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007cd6:	b500      	push	{lr}
 8007cd8:	b09c      	sub	sp, #112	; 0x70
 8007cda:	ab1d      	add	r3, sp, #116	; 0x74
 8007cdc:	9002      	str	r0, [sp, #8]
 8007cde:	9006      	str	r0, [sp, #24]
 8007ce0:	9107      	str	r1, [sp, #28]
 8007ce2:	9104      	str	r1, [sp, #16]
 8007ce4:	4808      	ldr	r0, [pc, #32]	; (8007d08 <siprintf+0x38>)
 8007ce6:	4909      	ldr	r1, [pc, #36]	; (8007d0c <siprintf+0x3c>)
 8007ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cec:	9105      	str	r1, [sp, #20]
 8007cee:	6800      	ldr	r0, [r0, #0]
 8007cf0:	a902      	add	r1, sp, #8
 8007cf2:	9301      	str	r3, [sp, #4]
 8007cf4:	f000 fbf4 	bl	80084e0 <_svfiprintf_r>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	b01c      	add	sp, #112	; 0x70
 8007d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d04:	b003      	add	sp, #12
 8007d06:	4770      	bx	lr
 8007d08:	20000058 	.word	0x20000058
 8007d0c:	ffff0208 	.word	0xffff0208

08007d10 <strcpy>:
 8007d10:	4603      	mov	r3, r0
 8007d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d16:	f803 2b01 	strb.w	r2, [r3], #1
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	d1f9      	bne.n	8007d12 <strcpy+0x2>
 8007d1e:	4770      	bx	lr

08007d20 <__swbuf_r>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	460e      	mov	r6, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	4605      	mov	r5, r0
 8007d28:	b118      	cbz	r0, 8007d32 <__swbuf_r+0x12>
 8007d2a:	6983      	ldr	r3, [r0, #24]
 8007d2c:	b90b      	cbnz	r3, 8007d32 <__swbuf_r+0x12>
 8007d2e:	f000 f9d1 	bl	80080d4 <__sinit>
 8007d32:	4b21      	ldr	r3, [pc, #132]	; (8007db8 <__swbuf_r+0x98>)
 8007d34:	429c      	cmp	r4, r3
 8007d36:	d12b      	bne.n	8007d90 <__swbuf_r+0x70>
 8007d38:	686c      	ldr	r4, [r5, #4]
 8007d3a:	69a3      	ldr	r3, [r4, #24]
 8007d3c:	60a3      	str	r3, [r4, #8]
 8007d3e:	89a3      	ldrh	r3, [r4, #12]
 8007d40:	071a      	lsls	r2, r3, #28
 8007d42:	d52f      	bpl.n	8007da4 <__swbuf_r+0x84>
 8007d44:	6923      	ldr	r3, [r4, #16]
 8007d46:	b36b      	cbz	r3, 8007da4 <__swbuf_r+0x84>
 8007d48:	6923      	ldr	r3, [r4, #16]
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	b2f6      	uxtb	r6, r6
 8007d4e:	1ac0      	subs	r0, r0, r3
 8007d50:	6963      	ldr	r3, [r4, #20]
 8007d52:	4637      	mov	r7, r6
 8007d54:	4283      	cmp	r3, r0
 8007d56:	dc04      	bgt.n	8007d62 <__swbuf_r+0x42>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4628      	mov	r0, r5
 8007d5c:	f000 f926 	bl	8007fac <_fflush_r>
 8007d60:	bb30      	cbnz	r0, 8007db0 <__swbuf_r+0x90>
 8007d62:	68a3      	ldr	r3, [r4, #8]
 8007d64:	3001      	adds	r0, #1
 8007d66:	3b01      	subs	r3, #1
 8007d68:	60a3      	str	r3, [r4, #8]
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	701e      	strb	r6, [r3, #0]
 8007d72:	6963      	ldr	r3, [r4, #20]
 8007d74:	4283      	cmp	r3, r0
 8007d76:	d004      	beq.n	8007d82 <__swbuf_r+0x62>
 8007d78:	89a3      	ldrh	r3, [r4, #12]
 8007d7a:	07db      	lsls	r3, r3, #31
 8007d7c:	d506      	bpl.n	8007d8c <__swbuf_r+0x6c>
 8007d7e:	2e0a      	cmp	r6, #10
 8007d80:	d104      	bne.n	8007d8c <__swbuf_r+0x6c>
 8007d82:	4621      	mov	r1, r4
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 f911 	bl	8007fac <_fflush_r>
 8007d8a:	b988      	cbnz	r0, 8007db0 <__swbuf_r+0x90>
 8007d8c:	4638      	mov	r0, r7
 8007d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <__swbuf_r+0x9c>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	d101      	bne.n	8007d9a <__swbuf_r+0x7a>
 8007d96:	68ac      	ldr	r4, [r5, #8]
 8007d98:	e7cf      	b.n	8007d3a <__swbuf_r+0x1a>
 8007d9a:	4b09      	ldr	r3, [pc, #36]	; (8007dc0 <__swbuf_r+0xa0>)
 8007d9c:	429c      	cmp	r4, r3
 8007d9e:	bf08      	it	eq
 8007da0:	68ec      	ldreq	r4, [r5, #12]
 8007da2:	e7ca      	b.n	8007d3a <__swbuf_r+0x1a>
 8007da4:	4621      	mov	r1, r4
 8007da6:	4628      	mov	r0, r5
 8007da8:	f000 f80c 	bl	8007dc4 <__swsetup_r>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	d0cb      	beq.n	8007d48 <__swbuf_r+0x28>
 8007db0:	f04f 37ff 	mov.w	r7, #4294967295
 8007db4:	e7ea      	b.n	8007d8c <__swbuf_r+0x6c>
 8007db6:	bf00      	nop
 8007db8:	08009bbc 	.word	0x08009bbc
 8007dbc:	08009bdc 	.word	0x08009bdc
 8007dc0:	08009b9c 	.word	0x08009b9c

08007dc4 <__swsetup_r>:
 8007dc4:	4b32      	ldr	r3, [pc, #200]	; (8007e90 <__swsetup_r+0xcc>)
 8007dc6:	b570      	push	{r4, r5, r6, lr}
 8007dc8:	681d      	ldr	r5, [r3, #0]
 8007dca:	4606      	mov	r6, r0
 8007dcc:	460c      	mov	r4, r1
 8007dce:	b125      	cbz	r5, 8007dda <__swsetup_r+0x16>
 8007dd0:	69ab      	ldr	r3, [r5, #24]
 8007dd2:	b913      	cbnz	r3, 8007dda <__swsetup_r+0x16>
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f000 f97d 	bl	80080d4 <__sinit>
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <__swsetup_r+0xd0>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	d10f      	bne.n	8007e00 <__swsetup_r+0x3c>
 8007de0:	686c      	ldr	r4, [r5, #4]
 8007de2:	89a3      	ldrh	r3, [r4, #12]
 8007de4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007de8:	0719      	lsls	r1, r3, #28
 8007dea:	d42c      	bmi.n	8007e46 <__swsetup_r+0x82>
 8007dec:	06dd      	lsls	r5, r3, #27
 8007dee:	d411      	bmi.n	8007e14 <__swsetup_r+0x50>
 8007df0:	2309      	movs	r3, #9
 8007df2:	6033      	str	r3, [r6, #0]
 8007df4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	81a3      	strh	r3, [r4, #12]
 8007dfe:	e03e      	b.n	8007e7e <__swsetup_r+0xba>
 8007e00:	4b25      	ldr	r3, [pc, #148]	; (8007e98 <__swsetup_r+0xd4>)
 8007e02:	429c      	cmp	r4, r3
 8007e04:	d101      	bne.n	8007e0a <__swsetup_r+0x46>
 8007e06:	68ac      	ldr	r4, [r5, #8]
 8007e08:	e7eb      	b.n	8007de2 <__swsetup_r+0x1e>
 8007e0a:	4b24      	ldr	r3, [pc, #144]	; (8007e9c <__swsetup_r+0xd8>)
 8007e0c:	429c      	cmp	r4, r3
 8007e0e:	bf08      	it	eq
 8007e10:	68ec      	ldreq	r4, [r5, #12]
 8007e12:	e7e6      	b.n	8007de2 <__swsetup_r+0x1e>
 8007e14:	0758      	lsls	r0, r3, #29
 8007e16:	d512      	bpl.n	8007e3e <__swsetup_r+0x7a>
 8007e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e1a:	b141      	cbz	r1, 8007e2e <__swsetup_r+0x6a>
 8007e1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e20:	4299      	cmp	r1, r3
 8007e22:	d002      	beq.n	8007e2a <__swsetup_r+0x66>
 8007e24:	4630      	mov	r0, r6
 8007e26:	f000 fa59 	bl	80082dc <_free_r>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	2300      	movs	r3, #0
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	f043 0308 	orr.w	r3, r3, #8
 8007e44:	81a3      	strh	r3, [r4, #12]
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	b94b      	cbnz	r3, 8007e5e <__swsetup_r+0x9a>
 8007e4a:	89a3      	ldrh	r3, [r4, #12]
 8007e4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e54:	d003      	beq.n	8007e5e <__swsetup_r+0x9a>
 8007e56:	4621      	mov	r1, r4
 8007e58:	4630      	mov	r0, r6
 8007e5a:	f000 f9ff 	bl	800825c <__smakebuf_r>
 8007e5e:	89a0      	ldrh	r0, [r4, #12]
 8007e60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e64:	f010 0301 	ands.w	r3, r0, #1
 8007e68:	d00a      	beq.n	8007e80 <__swsetup_r+0xbc>
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	6963      	ldr	r3, [r4, #20]
 8007e70:	425b      	negs	r3, r3
 8007e72:	61a3      	str	r3, [r4, #24]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	b943      	cbnz	r3, 8007e8a <__swsetup_r+0xc6>
 8007e78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e7c:	d1ba      	bne.n	8007df4 <__swsetup_r+0x30>
 8007e7e:	bd70      	pop	{r4, r5, r6, pc}
 8007e80:	0781      	lsls	r1, r0, #30
 8007e82:	bf58      	it	pl
 8007e84:	6963      	ldrpl	r3, [r4, #20]
 8007e86:	60a3      	str	r3, [r4, #8]
 8007e88:	e7f4      	b.n	8007e74 <__swsetup_r+0xb0>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e7f7      	b.n	8007e7e <__swsetup_r+0xba>
 8007e8e:	bf00      	nop
 8007e90:	20000058 	.word	0x20000058
 8007e94:	08009bbc 	.word	0x08009bbc
 8007e98:	08009bdc 	.word	0x08009bdc
 8007e9c:	08009b9c 	.word	0x08009b9c

08007ea0 <__sflush_r>:
 8007ea0:	898a      	ldrh	r2, [r1, #12]
 8007ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea6:	4605      	mov	r5, r0
 8007ea8:	0710      	lsls	r0, r2, #28
 8007eaa:	460c      	mov	r4, r1
 8007eac:	d458      	bmi.n	8007f60 <__sflush_r+0xc0>
 8007eae:	684b      	ldr	r3, [r1, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	dc05      	bgt.n	8007ec0 <__sflush_r+0x20>
 8007eb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	dc02      	bgt.n	8007ec0 <__sflush_r+0x20>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ec2:	2e00      	cmp	r6, #0
 8007ec4:	d0f9      	beq.n	8007eba <__sflush_r+0x1a>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ecc:	682f      	ldr	r7, [r5, #0]
 8007ece:	602b      	str	r3, [r5, #0]
 8007ed0:	d032      	beq.n	8007f38 <__sflush_r+0x98>
 8007ed2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	075a      	lsls	r2, r3, #29
 8007ed8:	d505      	bpl.n	8007ee6 <__sflush_r+0x46>
 8007eda:	6863      	ldr	r3, [r4, #4]
 8007edc:	1ac0      	subs	r0, r0, r3
 8007ede:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ee0:	b10b      	cbz	r3, 8007ee6 <__sflush_r+0x46>
 8007ee2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ee4:	1ac0      	subs	r0, r0, r3
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007eec:	4628      	mov	r0, r5
 8007eee:	6a21      	ldr	r1, [r4, #32]
 8007ef0:	47b0      	blx	r6
 8007ef2:	1c43      	adds	r3, r0, #1
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	d106      	bne.n	8007f06 <__sflush_r+0x66>
 8007ef8:	6829      	ldr	r1, [r5, #0]
 8007efa:	291d      	cmp	r1, #29
 8007efc:	d82c      	bhi.n	8007f58 <__sflush_r+0xb8>
 8007efe:	4a2a      	ldr	r2, [pc, #168]	; (8007fa8 <__sflush_r+0x108>)
 8007f00:	40ca      	lsrs	r2, r1
 8007f02:	07d6      	lsls	r6, r2, #31
 8007f04:	d528      	bpl.n	8007f58 <__sflush_r+0xb8>
 8007f06:	2200      	movs	r2, #0
 8007f08:	6062      	str	r2, [r4, #4]
 8007f0a:	6922      	ldr	r2, [r4, #16]
 8007f0c:	04d9      	lsls	r1, r3, #19
 8007f0e:	6022      	str	r2, [r4, #0]
 8007f10:	d504      	bpl.n	8007f1c <__sflush_r+0x7c>
 8007f12:	1c42      	adds	r2, r0, #1
 8007f14:	d101      	bne.n	8007f1a <__sflush_r+0x7a>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	b903      	cbnz	r3, 8007f1c <__sflush_r+0x7c>
 8007f1a:	6560      	str	r0, [r4, #84]	; 0x54
 8007f1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1e:	602f      	str	r7, [r5, #0]
 8007f20:	2900      	cmp	r1, #0
 8007f22:	d0ca      	beq.n	8007eba <__sflush_r+0x1a>
 8007f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f28:	4299      	cmp	r1, r3
 8007f2a:	d002      	beq.n	8007f32 <__sflush_r+0x92>
 8007f2c:	4628      	mov	r0, r5
 8007f2e:	f000 f9d5 	bl	80082dc <_free_r>
 8007f32:	2000      	movs	r0, #0
 8007f34:	6360      	str	r0, [r4, #52]	; 0x34
 8007f36:	e7c1      	b.n	8007ebc <__sflush_r+0x1c>
 8007f38:	6a21      	ldr	r1, [r4, #32]
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	47b0      	blx	r6
 8007f40:	1c41      	adds	r1, r0, #1
 8007f42:	d1c7      	bne.n	8007ed4 <__sflush_r+0x34>
 8007f44:	682b      	ldr	r3, [r5, #0]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0c4      	beq.n	8007ed4 <__sflush_r+0x34>
 8007f4a:	2b1d      	cmp	r3, #29
 8007f4c:	d001      	beq.n	8007f52 <__sflush_r+0xb2>
 8007f4e:	2b16      	cmp	r3, #22
 8007f50:	d101      	bne.n	8007f56 <__sflush_r+0xb6>
 8007f52:	602f      	str	r7, [r5, #0]
 8007f54:	e7b1      	b.n	8007eba <__sflush_r+0x1a>
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f5c:	81a3      	strh	r3, [r4, #12]
 8007f5e:	e7ad      	b.n	8007ebc <__sflush_r+0x1c>
 8007f60:	690f      	ldr	r7, [r1, #16]
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	d0a9      	beq.n	8007eba <__sflush_r+0x1a>
 8007f66:	0793      	lsls	r3, r2, #30
 8007f68:	bf18      	it	ne
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	680e      	ldr	r6, [r1, #0]
 8007f6e:	bf08      	it	eq
 8007f70:	694b      	ldreq	r3, [r1, #20]
 8007f72:	eba6 0807 	sub.w	r8, r6, r7
 8007f76:	600f      	str	r7, [r1, #0]
 8007f78:	608b      	str	r3, [r1, #8]
 8007f7a:	f1b8 0f00 	cmp.w	r8, #0
 8007f7e:	dd9c      	ble.n	8007eba <__sflush_r+0x1a>
 8007f80:	4643      	mov	r3, r8
 8007f82:	463a      	mov	r2, r7
 8007f84:	4628      	mov	r0, r5
 8007f86:	6a21      	ldr	r1, [r4, #32]
 8007f88:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f8a:	47b0      	blx	r6
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	dc06      	bgt.n	8007f9e <__sflush_r+0xfe>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f04f 30ff 	mov.w	r0, #4294967295
 8007f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9a:	81a3      	strh	r3, [r4, #12]
 8007f9c:	e78e      	b.n	8007ebc <__sflush_r+0x1c>
 8007f9e:	4407      	add	r7, r0
 8007fa0:	eba8 0800 	sub.w	r8, r8, r0
 8007fa4:	e7e9      	b.n	8007f7a <__sflush_r+0xda>
 8007fa6:	bf00      	nop
 8007fa8:	20400001 	.word	0x20400001

08007fac <_fflush_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	690b      	ldr	r3, [r1, #16]
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	460c      	mov	r4, r1
 8007fb4:	b913      	cbnz	r3, 8007fbc <_fflush_r+0x10>
 8007fb6:	2500      	movs	r5, #0
 8007fb8:	4628      	mov	r0, r5
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	b118      	cbz	r0, 8007fc6 <_fflush_r+0x1a>
 8007fbe:	6983      	ldr	r3, [r0, #24]
 8007fc0:	b90b      	cbnz	r3, 8007fc6 <_fflush_r+0x1a>
 8007fc2:	f000 f887 	bl	80080d4 <__sinit>
 8007fc6:	4b14      	ldr	r3, [pc, #80]	; (8008018 <_fflush_r+0x6c>)
 8007fc8:	429c      	cmp	r4, r3
 8007fca:	d11b      	bne.n	8008004 <_fflush_r+0x58>
 8007fcc:	686c      	ldr	r4, [r5, #4]
 8007fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0ef      	beq.n	8007fb6 <_fflush_r+0xa>
 8007fd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fd8:	07d0      	lsls	r0, r2, #31
 8007fda:	d404      	bmi.n	8007fe6 <_fflush_r+0x3a>
 8007fdc:	0599      	lsls	r1, r3, #22
 8007fde:	d402      	bmi.n	8007fe6 <_fflush_r+0x3a>
 8007fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fe2:	f000 f915 	bl	8008210 <__retarget_lock_acquire_recursive>
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	4621      	mov	r1, r4
 8007fea:	f7ff ff59 	bl	8007ea0 <__sflush_r>
 8007fee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ff0:	4605      	mov	r5, r0
 8007ff2:	07da      	lsls	r2, r3, #31
 8007ff4:	d4e0      	bmi.n	8007fb8 <_fflush_r+0xc>
 8007ff6:	89a3      	ldrh	r3, [r4, #12]
 8007ff8:	059b      	lsls	r3, r3, #22
 8007ffa:	d4dd      	bmi.n	8007fb8 <_fflush_r+0xc>
 8007ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ffe:	f000 f908 	bl	8008212 <__retarget_lock_release_recursive>
 8008002:	e7d9      	b.n	8007fb8 <_fflush_r+0xc>
 8008004:	4b05      	ldr	r3, [pc, #20]	; (800801c <_fflush_r+0x70>)
 8008006:	429c      	cmp	r4, r3
 8008008:	d101      	bne.n	800800e <_fflush_r+0x62>
 800800a:	68ac      	ldr	r4, [r5, #8]
 800800c:	e7df      	b.n	8007fce <_fflush_r+0x22>
 800800e:	4b04      	ldr	r3, [pc, #16]	; (8008020 <_fflush_r+0x74>)
 8008010:	429c      	cmp	r4, r3
 8008012:	bf08      	it	eq
 8008014:	68ec      	ldreq	r4, [r5, #12]
 8008016:	e7da      	b.n	8007fce <_fflush_r+0x22>
 8008018:	08009bbc 	.word	0x08009bbc
 800801c:	08009bdc 	.word	0x08009bdc
 8008020:	08009b9c 	.word	0x08009b9c

08008024 <std>:
 8008024:	2300      	movs	r3, #0
 8008026:	b510      	push	{r4, lr}
 8008028:	4604      	mov	r4, r0
 800802a:	e9c0 3300 	strd	r3, r3, [r0]
 800802e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008032:	6083      	str	r3, [r0, #8]
 8008034:	8181      	strh	r1, [r0, #12]
 8008036:	6643      	str	r3, [r0, #100]	; 0x64
 8008038:	81c2      	strh	r2, [r0, #14]
 800803a:	6183      	str	r3, [r0, #24]
 800803c:	4619      	mov	r1, r3
 800803e:	2208      	movs	r2, #8
 8008040:	305c      	adds	r0, #92	; 0x5c
 8008042:	f7ff fdaf 	bl	8007ba4 <memset>
 8008046:	4b05      	ldr	r3, [pc, #20]	; (800805c <std+0x38>)
 8008048:	6224      	str	r4, [r4, #32]
 800804a:	6263      	str	r3, [r4, #36]	; 0x24
 800804c:	4b04      	ldr	r3, [pc, #16]	; (8008060 <std+0x3c>)
 800804e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008050:	4b04      	ldr	r3, [pc, #16]	; (8008064 <std+0x40>)
 8008052:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008054:	4b04      	ldr	r3, [pc, #16]	; (8008068 <std+0x44>)
 8008056:	6323      	str	r3, [r4, #48]	; 0x30
 8008058:	bd10      	pop	{r4, pc}
 800805a:	bf00      	nop
 800805c:	08008cdd 	.word	0x08008cdd
 8008060:	08008cff 	.word	0x08008cff
 8008064:	08008d37 	.word	0x08008d37
 8008068:	08008d5b 	.word	0x08008d5b

0800806c <_cleanup_r>:
 800806c:	4901      	ldr	r1, [pc, #4]	; (8008074 <_cleanup_r+0x8>)
 800806e:	f000 b8af 	b.w	80081d0 <_fwalk_reent>
 8008072:	bf00      	nop
 8008074:	08007fad 	.word	0x08007fad

08008078 <__sfmoreglue>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	2568      	movs	r5, #104	; 0x68
 800807c:	1e4a      	subs	r2, r1, #1
 800807e:	4355      	muls	r5, r2
 8008080:	460e      	mov	r6, r1
 8008082:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008086:	f000 f975 	bl	8008374 <_malloc_r>
 800808a:	4604      	mov	r4, r0
 800808c:	b140      	cbz	r0, 80080a0 <__sfmoreglue+0x28>
 800808e:	2100      	movs	r1, #0
 8008090:	e9c0 1600 	strd	r1, r6, [r0]
 8008094:	300c      	adds	r0, #12
 8008096:	60a0      	str	r0, [r4, #8]
 8008098:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800809c:	f7ff fd82 	bl	8007ba4 <memset>
 80080a0:	4620      	mov	r0, r4
 80080a2:	bd70      	pop	{r4, r5, r6, pc}

080080a4 <__sfp_lock_acquire>:
 80080a4:	4801      	ldr	r0, [pc, #4]	; (80080ac <__sfp_lock_acquire+0x8>)
 80080a6:	f000 b8b3 	b.w	8008210 <__retarget_lock_acquire_recursive>
 80080aa:	bf00      	nop
 80080ac:	200019d8 	.word	0x200019d8

080080b0 <__sfp_lock_release>:
 80080b0:	4801      	ldr	r0, [pc, #4]	; (80080b8 <__sfp_lock_release+0x8>)
 80080b2:	f000 b8ae 	b.w	8008212 <__retarget_lock_release_recursive>
 80080b6:	bf00      	nop
 80080b8:	200019d8 	.word	0x200019d8

080080bc <__sinit_lock_acquire>:
 80080bc:	4801      	ldr	r0, [pc, #4]	; (80080c4 <__sinit_lock_acquire+0x8>)
 80080be:	f000 b8a7 	b.w	8008210 <__retarget_lock_acquire_recursive>
 80080c2:	bf00      	nop
 80080c4:	200019d3 	.word	0x200019d3

080080c8 <__sinit_lock_release>:
 80080c8:	4801      	ldr	r0, [pc, #4]	; (80080d0 <__sinit_lock_release+0x8>)
 80080ca:	f000 b8a2 	b.w	8008212 <__retarget_lock_release_recursive>
 80080ce:	bf00      	nop
 80080d0:	200019d3 	.word	0x200019d3

080080d4 <__sinit>:
 80080d4:	b510      	push	{r4, lr}
 80080d6:	4604      	mov	r4, r0
 80080d8:	f7ff fff0 	bl	80080bc <__sinit_lock_acquire>
 80080dc:	69a3      	ldr	r3, [r4, #24]
 80080de:	b11b      	cbz	r3, 80080e8 <__sinit+0x14>
 80080e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e4:	f7ff bff0 	b.w	80080c8 <__sinit_lock_release>
 80080e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80080ec:	6523      	str	r3, [r4, #80]	; 0x50
 80080ee:	4b13      	ldr	r3, [pc, #76]	; (800813c <__sinit+0x68>)
 80080f0:	4a13      	ldr	r2, [pc, #76]	; (8008140 <__sinit+0x6c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80080f6:	42a3      	cmp	r3, r4
 80080f8:	bf08      	it	eq
 80080fa:	2301      	moveq	r3, #1
 80080fc:	4620      	mov	r0, r4
 80080fe:	bf08      	it	eq
 8008100:	61a3      	streq	r3, [r4, #24]
 8008102:	f000 f81f 	bl	8008144 <__sfp>
 8008106:	6060      	str	r0, [r4, #4]
 8008108:	4620      	mov	r0, r4
 800810a:	f000 f81b 	bl	8008144 <__sfp>
 800810e:	60a0      	str	r0, [r4, #8]
 8008110:	4620      	mov	r0, r4
 8008112:	f000 f817 	bl	8008144 <__sfp>
 8008116:	2200      	movs	r2, #0
 8008118:	2104      	movs	r1, #4
 800811a:	60e0      	str	r0, [r4, #12]
 800811c:	6860      	ldr	r0, [r4, #4]
 800811e:	f7ff ff81 	bl	8008024 <std>
 8008122:	2201      	movs	r2, #1
 8008124:	2109      	movs	r1, #9
 8008126:	68a0      	ldr	r0, [r4, #8]
 8008128:	f7ff ff7c 	bl	8008024 <std>
 800812c:	2202      	movs	r2, #2
 800812e:	2112      	movs	r1, #18
 8008130:	68e0      	ldr	r0, [r4, #12]
 8008132:	f7ff ff77 	bl	8008024 <std>
 8008136:	2301      	movs	r3, #1
 8008138:	61a3      	str	r3, [r4, #24]
 800813a:	e7d1      	b.n	80080e0 <__sinit+0xc>
 800813c:	08009b98 	.word	0x08009b98
 8008140:	0800806d 	.word	0x0800806d

08008144 <__sfp>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	4607      	mov	r7, r0
 8008148:	f7ff ffac 	bl	80080a4 <__sfp_lock_acquire>
 800814c:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <__sfp+0x84>)
 800814e:	681e      	ldr	r6, [r3, #0]
 8008150:	69b3      	ldr	r3, [r6, #24]
 8008152:	b913      	cbnz	r3, 800815a <__sfp+0x16>
 8008154:	4630      	mov	r0, r6
 8008156:	f7ff ffbd 	bl	80080d4 <__sinit>
 800815a:	3648      	adds	r6, #72	; 0x48
 800815c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008160:	3b01      	subs	r3, #1
 8008162:	d503      	bpl.n	800816c <__sfp+0x28>
 8008164:	6833      	ldr	r3, [r6, #0]
 8008166:	b30b      	cbz	r3, 80081ac <__sfp+0x68>
 8008168:	6836      	ldr	r6, [r6, #0]
 800816a:	e7f7      	b.n	800815c <__sfp+0x18>
 800816c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008170:	b9d5      	cbnz	r5, 80081a8 <__sfp+0x64>
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <__sfp+0x88>)
 8008174:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008178:	60e3      	str	r3, [r4, #12]
 800817a:	6665      	str	r5, [r4, #100]	; 0x64
 800817c:	f000 f847 	bl	800820e <__retarget_lock_init_recursive>
 8008180:	f7ff ff96 	bl	80080b0 <__sfp_lock_release>
 8008184:	2208      	movs	r2, #8
 8008186:	4629      	mov	r1, r5
 8008188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800818c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008190:	6025      	str	r5, [r4, #0]
 8008192:	61a5      	str	r5, [r4, #24]
 8008194:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008198:	f7ff fd04 	bl	8007ba4 <memset>
 800819c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80081a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80081a4:	4620      	mov	r0, r4
 80081a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081a8:	3468      	adds	r4, #104	; 0x68
 80081aa:	e7d9      	b.n	8008160 <__sfp+0x1c>
 80081ac:	2104      	movs	r1, #4
 80081ae:	4638      	mov	r0, r7
 80081b0:	f7ff ff62 	bl	8008078 <__sfmoreglue>
 80081b4:	4604      	mov	r4, r0
 80081b6:	6030      	str	r0, [r6, #0]
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d1d5      	bne.n	8008168 <__sfp+0x24>
 80081bc:	f7ff ff78 	bl	80080b0 <__sfp_lock_release>
 80081c0:	230c      	movs	r3, #12
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	e7ee      	b.n	80081a4 <__sfp+0x60>
 80081c6:	bf00      	nop
 80081c8:	08009b98 	.word	0x08009b98
 80081cc:	ffff0001 	.word	0xffff0001

080081d0 <_fwalk_reent>:
 80081d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d4:	4606      	mov	r6, r0
 80081d6:	4688      	mov	r8, r1
 80081d8:	2700      	movs	r7, #0
 80081da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e2:	f1b9 0901 	subs.w	r9, r9, #1
 80081e6:	d505      	bpl.n	80081f4 <_fwalk_reent+0x24>
 80081e8:	6824      	ldr	r4, [r4, #0]
 80081ea:	2c00      	cmp	r4, #0
 80081ec:	d1f7      	bne.n	80081de <_fwalk_reent+0xe>
 80081ee:	4638      	mov	r0, r7
 80081f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f4:	89ab      	ldrh	r3, [r5, #12]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d907      	bls.n	800820a <_fwalk_reent+0x3a>
 80081fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081fe:	3301      	adds	r3, #1
 8008200:	d003      	beq.n	800820a <_fwalk_reent+0x3a>
 8008202:	4629      	mov	r1, r5
 8008204:	4630      	mov	r0, r6
 8008206:	47c0      	blx	r8
 8008208:	4307      	orrs	r7, r0
 800820a:	3568      	adds	r5, #104	; 0x68
 800820c:	e7e9      	b.n	80081e2 <_fwalk_reent+0x12>

0800820e <__retarget_lock_init_recursive>:
 800820e:	4770      	bx	lr

08008210 <__retarget_lock_acquire_recursive>:
 8008210:	4770      	bx	lr

08008212 <__retarget_lock_release_recursive>:
 8008212:	4770      	bx	lr

08008214 <__swhatbuf_r>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	460e      	mov	r6, r1
 8008218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821c:	4614      	mov	r4, r2
 800821e:	2900      	cmp	r1, #0
 8008220:	461d      	mov	r5, r3
 8008222:	b096      	sub	sp, #88	; 0x58
 8008224:	da07      	bge.n	8008236 <__swhatbuf_r+0x22>
 8008226:	2300      	movs	r3, #0
 8008228:	602b      	str	r3, [r5, #0]
 800822a:	89b3      	ldrh	r3, [r6, #12]
 800822c:	061a      	lsls	r2, r3, #24
 800822e:	d410      	bmi.n	8008252 <__swhatbuf_r+0x3e>
 8008230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008234:	e00e      	b.n	8008254 <__swhatbuf_r+0x40>
 8008236:	466a      	mov	r2, sp
 8008238:	f000 fdb6 	bl	8008da8 <_fstat_r>
 800823c:	2800      	cmp	r0, #0
 800823e:	dbf2      	blt.n	8008226 <__swhatbuf_r+0x12>
 8008240:	9a01      	ldr	r2, [sp, #4]
 8008242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800824a:	425a      	negs	r2, r3
 800824c:	415a      	adcs	r2, r3
 800824e:	602a      	str	r2, [r5, #0]
 8008250:	e7ee      	b.n	8008230 <__swhatbuf_r+0x1c>
 8008252:	2340      	movs	r3, #64	; 0x40
 8008254:	2000      	movs	r0, #0
 8008256:	6023      	str	r3, [r4, #0]
 8008258:	b016      	add	sp, #88	; 0x58
 800825a:	bd70      	pop	{r4, r5, r6, pc}

0800825c <__smakebuf_r>:
 800825c:	898b      	ldrh	r3, [r1, #12]
 800825e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008260:	079d      	lsls	r5, r3, #30
 8008262:	4606      	mov	r6, r0
 8008264:	460c      	mov	r4, r1
 8008266:	d507      	bpl.n	8008278 <__smakebuf_r+0x1c>
 8008268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	6123      	str	r3, [r4, #16]
 8008270:	2301      	movs	r3, #1
 8008272:	6163      	str	r3, [r4, #20]
 8008274:	b002      	add	sp, #8
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	466a      	mov	r2, sp
 800827a:	ab01      	add	r3, sp, #4
 800827c:	f7ff ffca 	bl	8008214 <__swhatbuf_r>
 8008280:	9900      	ldr	r1, [sp, #0]
 8008282:	4605      	mov	r5, r0
 8008284:	4630      	mov	r0, r6
 8008286:	f000 f875 	bl	8008374 <_malloc_r>
 800828a:	b948      	cbnz	r0, 80082a0 <__smakebuf_r+0x44>
 800828c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008290:	059a      	lsls	r2, r3, #22
 8008292:	d4ef      	bmi.n	8008274 <__smakebuf_r+0x18>
 8008294:	f023 0303 	bic.w	r3, r3, #3
 8008298:	f043 0302 	orr.w	r3, r3, #2
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	e7e3      	b.n	8008268 <__smakebuf_r+0xc>
 80082a0:	4b0d      	ldr	r3, [pc, #52]	; (80082d8 <__smakebuf_r+0x7c>)
 80082a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80082a4:	89a3      	ldrh	r3, [r4, #12]
 80082a6:	6020      	str	r0, [r4, #0]
 80082a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	9b00      	ldr	r3, [sp, #0]
 80082b0:	6120      	str	r0, [r4, #16]
 80082b2:	6163      	str	r3, [r4, #20]
 80082b4:	9b01      	ldr	r3, [sp, #4]
 80082b6:	b15b      	cbz	r3, 80082d0 <__smakebuf_r+0x74>
 80082b8:	4630      	mov	r0, r6
 80082ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082be:	f000 fd85 	bl	8008dcc <_isatty_r>
 80082c2:	b128      	cbz	r0, 80082d0 <__smakebuf_r+0x74>
 80082c4:	89a3      	ldrh	r3, [r4, #12]
 80082c6:	f023 0303 	bic.w	r3, r3, #3
 80082ca:	f043 0301 	orr.w	r3, r3, #1
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	89a0      	ldrh	r0, [r4, #12]
 80082d2:	4305      	orrs	r5, r0
 80082d4:	81a5      	strh	r5, [r4, #12]
 80082d6:	e7cd      	b.n	8008274 <__smakebuf_r+0x18>
 80082d8:	0800806d 	.word	0x0800806d

080082dc <_free_r>:
 80082dc:	b538      	push	{r3, r4, r5, lr}
 80082de:	4605      	mov	r5, r0
 80082e0:	2900      	cmp	r1, #0
 80082e2:	d043      	beq.n	800836c <_free_r+0x90>
 80082e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082e8:	1f0c      	subs	r4, r1, #4
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfb8      	it	lt
 80082ee:	18e4      	addlt	r4, r4, r3
 80082f0:	f000 fdb6 	bl	8008e60 <__malloc_lock>
 80082f4:	4a1e      	ldr	r2, [pc, #120]	; (8008370 <_free_r+0x94>)
 80082f6:	6813      	ldr	r3, [r2, #0]
 80082f8:	4610      	mov	r0, r2
 80082fa:	b933      	cbnz	r3, 800830a <_free_r+0x2e>
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	6014      	str	r4, [r2, #0]
 8008300:	4628      	mov	r0, r5
 8008302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008306:	f000 bdb1 	b.w	8008e6c <__malloc_unlock>
 800830a:	42a3      	cmp	r3, r4
 800830c:	d90a      	bls.n	8008324 <_free_r+0x48>
 800830e:	6821      	ldr	r1, [r4, #0]
 8008310:	1862      	adds	r2, r4, r1
 8008312:	4293      	cmp	r3, r2
 8008314:	bf01      	itttt	eq
 8008316:	681a      	ldreq	r2, [r3, #0]
 8008318:	685b      	ldreq	r3, [r3, #4]
 800831a:	1852      	addeq	r2, r2, r1
 800831c:	6022      	streq	r2, [r4, #0]
 800831e:	6063      	str	r3, [r4, #4]
 8008320:	6004      	str	r4, [r0, #0]
 8008322:	e7ed      	b.n	8008300 <_free_r+0x24>
 8008324:	461a      	mov	r2, r3
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	b10b      	cbz	r3, 800832e <_free_r+0x52>
 800832a:	42a3      	cmp	r3, r4
 800832c:	d9fa      	bls.n	8008324 <_free_r+0x48>
 800832e:	6811      	ldr	r1, [r2, #0]
 8008330:	1850      	adds	r0, r2, r1
 8008332:	42a0      	cmp	r0, r4
 8008334:	d10b      	bne.n	800834e <_free_r+0x72>
 8008336:	6820      	ldr	r0, [r4, #0]
 8008338:	4401      	add	r1, r0
 800833a:	1850      	adds	r0, r2, r1
 800833c:	4283      	cmp	r3, r0
 800833e:	6011      	str	r1, [r2, #0]
 8008340:	d1de      	bne.n	8008300 <_free_r+0x24>
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	4401      	add	r1, r0
 8008348:	6011      	str	r1, [r2, #0]
 800834a:	6053      	str	r3, [r2, #4]
 800834c:	e7d8      	b.n	8008300 <_free_r+0x24>
 800834e:	d902      	bls.n	8008356 <_free_r+0x7a>
 8008350:	230c      	movs	r3, #12
 8008352:	602b      	str	r3, [r5, #0]
 8008354:	e7d4      	b.n	8008300 <_free_r+0x24>
 8008356:	6820      	ldr	r0, [r4, #0]
 8008358:	1821      	adds	r1, r4, r0
 800835a:	428b      	cmp	r3, r1
 800835c:	bf01      	itttt	eq
 800835e:	6819      	ldreq	r1, [r3, #0]
 8008360:	685b      	ldreq	r3, [r3, #4]
 8008362:	1809      	addeq	r1, r1, r0
 8008364:	6021      	streq	r1, [r4, #0]
 8008366:	6063      	str	r3, [r4, #4]
 8008368:	6054      	str	r4, [r2, #4]
 800836a:	e7c9      	b.n	8008300 <_free_r+0x24>
 800836c:	bd38      	pop	{r3, r4, r5, pc}
 800836e:	bf00      	nop
 8008370:	20000378 	.word	0x20000378

08008374 <_malloc_r>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	1ccd      	adds	r5, r1, #3
 8008378:	f025 0503 	bic.w	r5, r5, #3
 800837c:	3508      	adds	r5, #8
 800837e:	2d0c      	cmp	r5, #12
 8008380:	bf38      	it	cc
 8008382:	250c      	movcc	r5, #12
 8008384:	2d00      	cmp	r5, #0
 8008386:	4606      	mov	r6, r0
 8008388:	db01      	blt.n	800838e <_malloc_r+0x1a>
 800838a:	42a9      	cmp	r1, r5
 800838c:	d903      	bls.n	8008396 <_malloc_r+0x22>
 800838e:	230c      	movs	r3, #12
 8008390:	6033      	str	r3, [r6, #0]
 8008392:	2000      	movs	r0, #0
 8008394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008396:	f000 fd63 	bl	8008e60 <__malloc_lock>
 800839a:	4921      	ldr	r1, [pc, #132]	; (8008420 <_malloc_r+0xac>)
 800839c:	680a      	ldr	r2, [r1, #0]
 800839e:	4614      	mov	r4, r2
 80083a0:	b99c      	cbnz	r4, 80083ca <_malloc_r+0x56>
 80083a2:	4f20      	ldr	r7, [pc, #128]	; (8008424 <_malloc_r+0xb0>)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	b923      	cbnz	r3, 80083b2 <_malloc_r+0x3e>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4630      	mov	r0, r6
 80083ac:	f000 fc86 	bl	8008cbc <_sbrk_r>
 80083b0:	6038      	str	r0, [r7, #0]
 80083b2:	4629      	mov	r1, r5
 80083b4:	4630      	mov	r0, r6
 80083b6:	f000 fc81 	bl	8008cbc <_sbrk_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d123      	bne.n	8008406 <_malloc_r+0x92>
 80083be:	230c      	movs	r3, #12
 80083c0:	4630      	mov	r0, r6
 80083c2:	6033      	str	r3, [r6, #0]
 80083c4:	f000 fd52 	bl	8008e6c <__malloc_unlock>
 80083c8:	e7e3      	b.n	8008392 <_malloc_r+0x1e>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	1b5b      	subs	r3, r3, r5
 80083ce:	d417      	bmi.n	8008400 <_malloc_r+0x8c>
 80083d0:	2b0b      	cmp	r3, #11
 80083d2:	d903      	bls.n	80083dc <_malloc_r+0x68>
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	441c      	add	r4, r3
 80083d8:	6025      	str	r5, [r4, #0]
 80083da:	e004      	b.n	80083e6 <_malloc_r+0x72>
 80083dc:	6863      	ldr	r3, [r4, #4]
 80083de:	42a2      	cmp	r2, r4
 80083e0:	bf0c      	ite	eq
 80083e2:	600b      	streq	r3, [r1, #0]
 80083e4:	6053      	strne	r3, [r2, #4]
 80083e6:	4630      	mov	r0, r6
 80083e8:	f000 fd40 	bl	8008e6c <__malloc_unlock>
 80083ec:	f104 000b 	add.w	r0, r4, #11
 80083f0:	1d23      	adds	r3, r4, #4
 80083f2:	f020 0007 	bic.w	r0, r0, #7
 80083f6:	1ac2      	subs	r2, r0, r3
 80083f8:	d0cc      	beq.n	8008394 <_malloc_r+0x20>
 80083fa:	1a1b      	subs	r3, r3, r0
 80083fc:	50a3      	str	r3, [r4, r2]
 80083fe:	e7c9      	b.n	8008394 <_malloc_r+0x20>
 8008400:	4622      	mov	r2, r4
 8008402:	6864      	ldr	r4, [r4, #4]
 8008404:	e7cc      	b.n	80083a0 <_malloc_r+0x2c>
 8008406:	1cc4      	adds	r4, r0, #3
 8008408:	f024 0403 	bic.w	r4, r4, #3
 800840c:	42a0      	cmp	r0, r4
 800840e:	d0e3      	beq.n	80083d8 <_malloc_r+0x64>
 8008410:	1a21      	subs	r1, r4, r0
 8008412:	4630      	mov	r0, r6
 8008414:	f000 fc52 	bl	8008cbc <_sbrk_r>
 8008418:	3001      	adds	r0, #1
 800841a:	d1dd      	bne.n	80083d8 <_malloc_r+0x64>
 800841c:	e7cf      	b.n	80083be <_malloc_r+0x4a>
 800841e:	bf00      	nop
 8008420:	20000378 	.word	0x20000378
 8008424:	2000037c 	.word	0x2000037c

08008428 <__ssputs_r>:
 8008428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800842c:	688e      	ldr	r6, [r1, #8]
 800842e:	4682      	mov	sl, r0
 8008430:	429e      	cmp	r6, r3
 8008432:	460c      	mov	r4, r1
 8008434:	4690      	mov	r8, r2
 8008436:	461f      	mov	r7, r3
 8008438:	d838      	bhi.n	80084ac <__ssputs_r+0x84>
 800843a:	898a      	ldrh	r2, [r1, #12]
 800843c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008440:	d032      	beq.n	80084a8 <__ssputs_r+0x80>
 8008442:	6825      	ldr	r5, [r4, #0]
 8008444:	6909      	ldr	r1, [r1, #16]
 8008446:	3301      	adds	r3, #1
 8008448:	eba5 0901 	sub.w	r9, r5, r1
 800844c:	6965      	ldr	r5, [r4, #20]
 800844e:	444b      	add	r3, r9
 8008450:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008458:	106d      	asrs	r5, r5, #1
 800845a:	429d      	cmp	r5, r3
 800845c:	bf38      	it	cc
 800845e:	461d      	movcc	r5, r3
 8008460:	0553      	lsls	r3, r2, #21
 8008462:	d531      	bpl.n	80084c8 <__ssputs_r+0xa0>
 8008464:	4629      	mov	r1, r5
 8008466:	f7ff ff85 	bl	8008374 <_malloc_r>
 800846a:	4606      	mov	r6, r0
 800846c:	b950      	cbnz	r0, 8008484 <__ssputs_r+0x5c>
 800846e:	230c      	movs	r3, #12
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	f8ca 3000 	str.w	r3, [sl]
 8008478:	89a3      	ldrh	r3, [r4, #12]
 800847a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800847e:	81a3      	strh	r3, [r4, #12]
 8008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008484:	464a      	mov	r2, r9
 8008486:	6921      	ldr	r1, [r4, #16]
 8008488:	f7ff fb7e 	bl	8007b88 <memcpy>
 800848c:	89a3      	ldrh	r3, [r4, #12]
 800848e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	6126      	str	r6, [r4, #16]
 800849a:	444e      	add	r6, r9
 800849c:	6026      	str	r6, [r4, #0]
 800849e:	463e      	mov	r6, r7
 80084a0:	6165      	str	r5, [r4, #20]
 80084a2:	eba5 0509 	sub.w	r5, r5, r9
 80084a6:	60a5      	str	r5, [r4, #8]
 80084a8:	42be      	cmp	r6, r7
 80084aa:	d900      	bls.n	80084ae <__ssputs_r+0x86>
 80084ac:	463e      	mov	r6, r7
 80084ae:	4632      	mov	r2, r6
 80084b0:	4641      	mov	r1, r8
 80084b2:	6820      	ldr	r0, [r4, #0]
 80084b4:	f000 fcba 	bl	8008e2c <memmove>
 80084b8:	68a3      	ldr	r3, [r4, #8]
 80084ba:	6822      	ldr	r2, [r4, #0]
 80084bc:	1b9b      	subs	r3, r3, r6
 80084be:	4432      	add	r2, r6
 80084c0:	2000      	movs	r0, #0
 80084c2:	60a3      	str	r3, [r4, #8]
 80084c4:	6022      	str	r2, [r4, #0]
 80084c6:	e7db      	b.n	8008480 <__ssputs_r+0x58>
 80084c8:	462a      	mov	r2, r5
 80084ca:	f000 fcd5 	bl	8008e78 <_realloc_r>
 80084ce:	4606      	mov	r6, r0
 80084d0:	2800      	cmp	r0, #0
 80084d2:	d1e1      	bne.n	8008498 <__ssputs_r+0x70>
 80084d4:	4650      	mov	r0, sl
 80084d6:	6921      	ldr	r1, [r4, #16]
 80084d8:	f7ff ff00 	bl	80082dc <_free_r>
 80084dc:	e7c7      	b.n	800846e <__ssputs_r+0x46>
	...

080084e0 <_svfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	4698      	mov	r8, r3
 80084e6:	898b      	ldrh	r3, [r1, #12]
 80084e8:	4607      	mov	r7, r0
 80084ea:	061b      	lsls	r3, r3, #24
 80084ec:	460d      	mov	r5, r1
 80084ee:	4614      	mov	r4, r2
 80084f0:	b09d      	sub	sp, #116	; 0x74
 80084f2:	d50e      	bpl.n	8008512 <_svfiprintf_r+0x32>
 80084f4:	690b      	ldr	r3, [r1, #16]
 80084f6:	b963      	cbnz	r3, 8008512 <_svfiprintf_r+0x32>
 80084f8:	2140      	movs	r1, #64	; 0x40
 80084fa:	f7ff ff3b 	bl	8008374 <_malloc_r>
 80084fe:	6028      	str	r0, [r5, #0]
 8008500:	6128      	str	r0, [r5, #16]
 8008502:	b920      	cbnz	r0, 800850e <_svfiprintf_r+0x2e>
 8008504:	230c      	movs	r3, #12
 8008506:	603b      	str	r3, [r7, #0]
 8008508:	f04f 30ff 	mov.w	r0, #4294967295
 800850c:	e0d1      	b.n	80086b2 <_svfiprintf_r+0x1d2>
 800850e:	2340      	movs	r3, #64	; 0x40
 8008510:	616b      	str	r3, [r5, #20]
 8008512:	2300      	movs	r3, #0
 8008514:	9309      	str	r3, [sp, #36]	; 0x24
 8008516:	2320      	movs	r3, #32
 8008518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800851c:	2330      	movs	r3, #48	; 0x30
 800851e:	f04f 0901 	mov.w	r9, #1
 8008522:	f8cd 800c 	str.w	r8, [sp, #12]
 8008526:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086cc <_svfiprintf_r+0x1ec>
 800852a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800852e:	4623      	mov	r3, r4
 8008530:	469a      	mov	sl, r3
 8008532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008536:	b10a      	cbz	r2, 800853c <_svfiprintf_r+0x5c>
 8008538:	2a25      	cmp	r2, #37	; 0x25
 800853a:	d1f9      	bne.n	8008530 <_svfiprintf_r+0x50>
 800853c:	ebba 0b04 	subs.w	fp, sl, r4
 8008540:	d00b      	beq.n	800855a <_svfiprintf_r+0x7a>
 8008542:	465b      	mov	r3, fp
 8008544:	4622      	mov	r2, r4
 8008546:	4629      	mov	r1, r5
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff ff6d 	bl	8008428 <__ssputs_r>
 800854e:	3001      	adds	r0, #1
 8008550:	f000 80aa 	beq.w	80086a8 <_svfiprintf_r+0x1c8>
 8008554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008556:	445a      	add	r2, fp
 8008558:	9209      	str	r2, [sp, #36]	; 0x24
 800855a:	f89a 3000 	ldrb.w	r3, [sl]
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 80a2 	beq.w	80086a8 <_svfiprintf_r+0x1c8>
 8008564:	2300      	movs	r3, #0
 8008566:	f04f 32ff 	mov.w	r2, #4294967295
 800856a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800856e:	f10a 0a01 	add.w	sl, sl, #1
 8008572:	9304      	str	r3, [sp, #16]
 8008574:	9307      	str	r3, [sp, #28]
 8008576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800857a:	931a      	str	r3, [sp, #104]	; 0x68
 800857c:	4654      	mov	r4, sl
 800857e:	2205      	movs	r2, #5
 8008580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008584:	4851      	ldr	r0, [pc, #324]	; (80086cc <_svfiprintf_r+0x1ec>)
 8008586:	f000 fc43 	bl	8008e10 <memchr>
 800858a:	9a04      	ldr	r2, [sp, #16]
 800858c:	b9d8      	cbnz	r0, 80085c6 <_svfiprintf_r+0xe6>
 800858e:	06d0      	lsls	r0, r2, #27
 8008590:	bf44      	itt	mi
 8008592:	2320      	movmi	r3, #32
 8008594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008598:	0711      	lsls	r1, r2, #28
 800859a:	bf44      	itt	mi
 800859c:	232b      	movmi	r3, #43	; 0x2b
 800859e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085a2:	f89a 3000 	ldrb.w	r3, [sl]
 80085a6:	2b2a      	cmp	r3, #42	; 0x2a
 80085a8:	d015      	beq.n	80085d6 <_svfiprintf_r+0xf6>
 80085aa:	4654      	mov	r4, sl
 80085ac:	2000      	movs	r0, #0
 80085ae:	f04f 0c0a 	mov.w	ip, #10
 80085b2:	9a07      	ldr	r2, [sp, #28]
 80085b4:	4621      	mov	r1, r4
 80085b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ba:	3b30      	subs	r3, #48	; 0x30
 80085bc:	2b09      	cmp	r3, #9
 80085be:	d94e      	bls.n	800865e <_svfiprintf_r+0x17e>
 80085c0:	b1b0      	cbz	r0, 80085f0 <_svfiprintf_r+0x110>
 80085c2:	9207      	str	r2, [sp, #28]
 80085c4:	e014      	b.n	80085f0 <_svfiprintf_r+0x110>
 80085c6:	eba0 0308 	sub.w	r3, r0, r8
 80085ca:	fa09 f303 	lsl.w	r3, r9, r3
 80085ce:	4313      	orrs	r3, r2
 80085d0:	46a2      	mov	sl, r4
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	e7d2      	b.n	800857c <_svfiprintf_r+0x9c>
 80085d6:	9b03      	ldr	r3, [sp, #12]
 80085d8:	1d19      	adds	r1, r3, #4
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	9103      	str	r1, [sp, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfbb      	ittet	lt
 80085e2:	425b      	neglt	r3, r3
 80085e4:	f042 0202 	orrlt.w	r2, r2, #2
 80085e8:	9307      	strge	r3, [sp, #28]
 80085ea:	9307      	strlt	r3, [sp, #28]
 80085ec:	bfb8      	it	lt
 80085ee:	9204      	strlt	r2, [sp, #16]
 80085f0:	7823      	ldrb	r3, [r4, #0]
 80085f2:	2b2e      	cmp	r3, #46	; 0x2e
 80085f4:	d10c      	bne.n	8008610 <_svfiprintf_r+0x130>
 80085f6:	7863      	ldrb	r3, [r4, #1]
 80085f8:	2b2a      	cmp	r3, #42	; 0x2a
 80085fa:	d135      	bne.n	8008668 <_svfiprintf_r+0x188>
 80085fc:	9b03      	ldr	r3, [sp, #12]
 80085fe:	3402      	adds	r4, #2
 8008600:	1d1a      	adds	r2, r3, #4
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	9203      	str	r2, [sp, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	bfb8      	it	lt
 800860a:	f04f 33ff 	movlt.w	r3, #4294967295
 800860e:	9305      	str	r3, [sp, #20]
 8008610:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80086dc <_svfiprintf_r+0x1fc>
 8008614:	2203      	movs	r2, #3
 8008616:	4650      	mov	r0, sl
 8008618:	7821      	ldrb	r1, [r4, #0]
 800861a:	f000 fbf9 	bl	8008e10 <memchr>
 800861e:	b140      	cbz	r0, 8008632 <_svfiprintf_r+0x152>
 8008620:	2340      	movs	r3, #64	; 0x40
 8008622:	eba0 000a 	sub.w	r0, r0, sl
 8008626:	fa03 f000 	lsl.w	r0, r3, r0
 800862a:	9b04      	ldr	r3, [sp, #16]
 800862c:	3401      	adds	r4, #1
 800862e:	4303      	orrs	r3, r0
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008636:	2206      	movs	r2, #6
 8008638:	4825      	ldr	r0, [pc, #148]	; (80086d0 <_svfiprintf_r+0x1f0>)
 800863a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800863e:	f000 fbe7 	bl	8008e10 <memchr>
 8008642:	2800      	cmp	r0, #0
 8008644:	d038      	beq.n	80086b8 <_svfiprintf_r+0x1d8>
 8008646:	4b23      	ldr	r3, [pc, #140]	; (80086d4 <_svfiprintf_r+0x1f4>)
 8008648:	bb1b      	cbnz	r3, 8008692 <_svfiprintf_r+0x1b2>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	3307      	adds	r3, #7
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	3308      	adds	r3, #8
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008658:	4433      	add	r3, r6
 800865a:	9309      	str	r3, [sp, #36]	; 0x24
 800865c:	e767      	b.n	800852e <_svfiprintf_r+0x4e>
 800865e:	460c      	mov	r4, r1
 8008660:	2001      	movs	r0, #1
 8008662:	fb0c 3202 	mla	r2, ip, r2, r3
 8008666:	e7a5      	b.n	80085b4 <_svfiprintf_r+0xd4>
 8008668:	2300      	movs	r3, #0
 800866a:	f04f 0c0a 	mov.w	ip, #10
 800866e:	4619      	mov	r1, r3
 8008670:	3401      	adds	r4, #1
 8008672:	9305      	str	r3, [sp, #20]
 8008674:	4620      	mov	r0, r4
 8008676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800867a:	3a30      	subs	r2, #48	; 0x30
 800867c:	2a09      	cmp	r2, #9
 800867e:	d903      	bls.n	8008688 <_svfiprintf_r+0x1a8>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0c5      	beq.n	8008610 <_svfiprintf_r+0x130>
 8008684:	9105      	str	r1, [sp, #20]
 8008686:	e7c3      	b.n	8008610 <_svfiprintf_r+0x130>
 8008688:	4604      	mov	r4, r0
 800868a:	2301      	movs	r3, #1
 800868c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008690:	e7f0      	b.n	8008674 <_svfiprintf_r+0x194>
 8008692:	ab03      	add	r3, sp, #12
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	462a      	mov	r2, r5
 8008698:	4638      	mov	r0, r7
 800869a:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <_svfiprintf_r+0x1f8>)
 800869c:	a904      	add	r1, sp, #16
 800869e:	f3af 8000 	nop.w
 80086a2:	1c42      	adds	r2, r0, #1
 80086a4:	4606      	mov	r6, r0
 80086a6:	d1d6      	bne.n	8008656 <_svfiprintf_r+0x176>
 80086a8:	89ab      	ldrh	r3, [r5, #12]
 80086aa:	065b      	lsls	r3, r3, #25
 80086ac:	f53f af2c 	bmi.w	8008508 <_svfiprintf_r+0x28>
 80086b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b2:	b01d      	add	sp, #116	; 0x74
 80086b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b8:	ab03      	add	r3, sp, #12
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	462a      	mov	r2, r5
 80086be:	4638      	mov	r0, r7
 80086c0:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <_svfiprintf_r+0x1f8>)
 80086c2:	a904      	add	r1, sp, #16
 80086c4:	f000 f9d4 	bl	8008a70 <_printf_i>
 80086c8:	e7eb      	b.n	80086a2 <_svfiprintf_r+0x1c2>
 80086ca:	bf00      	nop
 80086cc:	08009bfc 	.word	0x08009bfc
 80086d0:	08009c06 	.word	0x08009c06
 80086d4:	00000000 	.word	0x00000000
 80086d8:	08008429 	.word	0x08008429
 80086dc:	08009c02 	.word	0x08009c02

080086e0 <__sfputc_r>:
 80086e0:	6893      	ldr	r3, [r2, #8]
 80086e2:	b410      	push	{r4}
 80086e4:	3b01      	subs	r3, #1
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	6093      	str	r3, [r2, #8]
 80086ea:	da07      	bge.n	80086fc <__sfputc_r+0x1c>
 80086ec:	6994      	ldr	r4, [r2, #24]
 80086ee:	42a3      	cmp	r3, r4
 80086f0:	db01      	blt.n	80086f6 <__sfputc_r+0x16>
 80086f2:	290a      	cmp	r1, #10
 80086f4:	d102      	bne.n	80086fc <__sfputc_r+0x1c>
 80086f6:	bc10      	pop	{r4}
 80086f8:	f7ff bb12 	b.w	8007d20 <__swbuf_r>
 80086fc:	6813      	ldr	r3, [r2, #0]
 80086fe:	1c58      	adds	r0, r3, #1
 8008700:	6010      	str	r0, [r2, #0]
 8008702:	7019      	strb	r1, [r3, #0]
 8008704:	4608      	mov	r0, r1
 8008706:	bc10      	pop	{r4}
 8008708:	4770      	bx	lr

0800870a <__sfputs_r>:
 800870a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	4614      	mov	r4, r2
 8008712:	18d5      	adds	r5, r2, r3
 8008714:	42ac      	cmp	r4, r5
 8008716:	d101      	bne.n	800871c <__sfputs_r+0x12>
 8008718:	2000      	movs	r0, #0
 800871a:	e007      	b.n	800872c <__sfputs_r+0x22>
 800871c:	463a      	mov	r2, r7
 800871e:	4630      	mov	r0, r6
 8008720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008724:	f7ff ffdc 	bl	80086e0 <__sfputc_r>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d1f3      	bne.n	8008714 <__sfputs_r+0xa>
 800872c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008730 <_vfiprintf_r>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	460d      	mov	r5, r1
 8008736:	4614      	mov	r4, r2
 8008738:	4698      	mov	r8, r3
 800873a:	4606      	mov	r6, r0
 800873c:	b09d      	sub	sp, #116	; 0x74
 800873e:	b118      	cbz	r0, 8008748 <_vfiprintf_r+0x18>
 8008740:	6983      	ldr	r3, [r0, #24]
 8008742:	b90b      	cbnz	r3, 8008748 <_vfiprintf_r+0x18>
 8008744:	f7ff fcc6 	bl	80080d4 <__sinit>
 8008748:	4b89      	ldr	r3, [pc, #548]	; (8008970 <_vfiprintf_r+0x240>)
 800874a:	429d      	cmp	r5, r3
 800874c:	d11b      	bne.n	8008786 <_vfiprintf_r+0x56>
 800874e:	6875      	ldr	r5, [r6, #4]
 8008750:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008752:	07d9      	lsls	r1, r3, #31
 8008754:	d405      	bmi.n	8008762 <_vfiprintf_r+0x32>
 8008756:	89ab      	ldrh	r3, [r5, #12]
 8008758:	059a      	lsls	r2, r3, #22
 800875a:	d402      	bmi.n	8008762 <_vfiprintf_r+0x32>
 800875c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800875e:	f7ff fd57 	bl	8008210 <__retarget_lock_acquire_recursive>
 8008762:	89ab      	ldrh	r3, [r5, #12]
 8008764:	071b      	lsls	r3, r3, #28
 8008766:	d501      	bpl.n	800876c <_vfiprintf_r+0x3c>
 8008768:	692b      	ldr	r3, [r5, #16]
 800876a:	b9eb      	cbnz	r3, 80087a8 <_vfiprintf_r+0x78>
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f7ff fb28 	bl	8007dc4 <__swsetup_r>
 8008774:	b1c0      	cbz	r0, 80087a8 <_vfiprintf_r+0x78>
 8008776:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008778:	07dc      	lsls	r4, r3, #31
 800877a:	d50e      	bpl.n	800879a <_vfiprintf_r+0x6a>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	b01d      	add	sp, #116	; 0x74
 8008782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008786:	4b7b      	ldr	r3, [pc, #492]	; (8008974 <_vfiprintf_r+0x244>)
 8008788:	429d      	cmp	r5, r3
 800878a:	d101      	bne.n	8008790 <_vfiprintf_r+0x60>
 800878c:	68b5      	ldr	r5, [r6, #8]
 800878e:	e7df      	b.n	8008750 <_vfiprintf_r+0x20>
 8008790:	4b79      	ldr	r3, [pc, #484]	; (8008978 <_vfiprintf_r+0x248>)
 8008792:	429d      	cmp	r5, r3
 8008794:	bf08      	it	eq
 8008796:	68f5      	ldreq	r5, [r6, #12]
 8008798:	e7da      	b.n	8008750 <_vfiprintf_r+0x20>
 800879a:	89ab      	ldrh	r3, [r5, #12]
 800879c:	0598      	lsls	r0, r3, #22
 800879e:	d4ed      	bmi.n	800877c <_vfiprintf_r+0x4c>
 80087a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a2:	f7ff fd36 	bl	8008212 <__retarget_lock_release_recursive>
 80087a6:	e7e9      	b.n	800877c <_vfiprintf_r+0x4c>
 80087a8:	2300      	movs	r3, #0
 80087aa:	9309      	str	r3, [sp, #36]	; 0x24
 80087ac:	2320      	movs	r3, #32
 80087ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087b2:	2330      	movs	r3, #48	; 0x30
 80087b4:	f04f 0901 	mov.w	r9, #1
 80087b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800897c <_vfiprintf_r+0x24c>
 80087c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80087c4:	4623      	mov	r3, r4
 80087c6:	469a      	mov	sl, r3
 80087c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087cc:	b10a      	cbz	r2, 80087d2 <_vfiprintf_r+0xa2>
 80087ce:	2a25      	cmp	r2, #37	; 0x25
 80087d0:	d1f9      	bne.n	80087c6 <_vfiprintf_r+0x96>
 80087d2:	ebba 0b04 	subs.w	fp, sl, r4
 80087d6:	d00b      	beq.n	80087f0 <_vfiprintf_r+0xc0>
 80087d8:	465b      	mov	r3, fp
 80087da:	4622      	mov	r2, r4
 80087dc:	4629      	mov	r1, r5
 80087de:	4630      	mov	r0, r6
 80087e0:	f7ff ff93 	bl	800870a <__sfputs_r>
 80087e4:	3001      	adds	r0, #1
 80087e6:	f000 80aa 	beq.w	800893e <_vfiprintf_r+0x20e>
 80087ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087ec:	445a      	add	r2, fp
 80087ee:	9209      	str	r2, [sp, #36]	; 0x24
 80087f0:	f89a 3000 	ldrb.w	r3, [sl]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f000 80a2 	beq.w	800893e <_vfiprintf_r+0x20e>
 80087fa:	2300      	movs	r3, #0
 80087fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008800:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008804:	f10a 0a01 	add.w	sl, sl, #1
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	9307      	str	r3, [sp, #28]
 800880c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008810:	931a      	str	r3, [sp, #104]	; 0x68
 8008812:	4654      	mov	r4, sl
 8008814:	2205      	movs	r2, #5
 8008816:	f814 1b01 	ldrb.w	r1, [r4], #1
 800881a:	4858      	ldr	r0, [pc, #352]	; (800897c <_vfiprintf_r+0x24c>)
 800881c:	f000 faf8 	bl	8008e10 <memchr>
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	b9d8      	cbnz	r0, 800885c <_vfiprintf_r+0x12c>
 8008824:	06d1      	lsls	r1, r2, #27
 8008826:	bf44      	itt	mi
 8008828:	2320      	movmi	r3, #32
 800882a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800882e:	0713      	lsls	r3, r2, #28
 8008830:	bf44      	itt	mi
 8008832:	232b      	movmi	r3, #43	; 0x2b
 8008834:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008838:	f89a 3000 	ldrb.w	r3, [sl]
 800883c:	2b2a      	cmp	r3, #42	; 0x2a
 800883e:	d015      	beq.n	800886c <_vfiprintf_r+0x13c>
 8008840:	4654      	mov	r4, sl
 8008842:	2000      	movs	r0, #0
 8008844:	f04f 0c0a 	mov.w	ip, #10
 8008848:	9a07      	ldr	r2, [sp, #28]
 800884a:	4621      	mov	r1, r4
 800884c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008850:	3b30      	subs	r3, #48	; 0x30
 8008852:	2b09      	cmp	r3, #9
 8008854:	d94e      	bls.n	80088f4 <_vfiprintf_r+0x1c4>
 8008856:	b1b0      	cbz	r0, 8008886 <_vfiprintf_r+0x156>
 8008858:	9207      	str	r2, [sp, #28]
 800885a:	e014      	b.n	8008886 <_vfiprintf_r+0x156>
 800885c:	eba0 0308 	sub.w	r3, r0, r8
 8008860:	fa09 f303 	lsl.w	r3, r9, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	46a2      	mov	sl, r4
 8008868:	9304      	str	r3, [sp, #16]
 800886a:	e7d2      	b.n	8008812 <_vfiprintf_r+0xe2>
 800886c:	9b03      	ldr	r3, [sp, #12]
 800886e:	1d19      	adds	r1, r3, #4
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	9103      	str	r1, [sp, #12]
 8008874:	2b00      	cmp	r3, #0
 8008876:	bfbb      	ittet	lt
 8008878:	425b      	neglt	r3, r3
 800887a:	f042 0202 	orrlt.w	r2, r2, #2
 800887e:	9307      	strge	r3, [sp, #28]
 8008880:	9307      	strlt	r3, [sp, #28]
 8008882:	bfb8      	it	lt
 8008884:	9204      	strlt	r2, [sp, #16]
 8008886:	7823      	ldrb	r3, [r4, #0]
 8008888:	2b2e      	cmp	r3, #46	; 0x2e
 800888a:	d10c      	bne.n	80088a6 <_vfiprintf_r+0x176>
 800888c:	7863      	ldrb	r3, [r4, #1]
 800888e:	2b2a      	cmp	r3, #42	; 0x2a
 8008890:	d135      	bne.n	80088fe <_vfiprintf_r+0x1ce>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	3402      	adds	r4, #2
 8008896:	1d1a      	adds	r2, r3, #4
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	9203      	str	r2, [sp, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	bfb8      	it	lt
 80088a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80088a4:	9305      	str	r3, [sp, #20]
 80088a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800898c <_vfiprintf_r+0x25c>
 80088aa:	2203      	movs	r2, #3
 80088ac:	4650      	mov	r0, sl
 80088ae:	7821      	ldrb	r1, [r4, #0]
 80088b0:	f000 faae 	bl	8008e10 <memchr>
 80088b4:	b140      	cbz	r0, 80088c8 <_vfiprintf_r+0x198>
 80088b6:	2340      	movs	r3, #64	; 0x40
 80088b8:	eba0 000a 	sub.w	r0, r0, sl
 80088bc:	fa03 f000 	lsl.w	r0, r3, r0
 80088c0:	9b04      	ldr	r3, [sp, #16]
 80088c2:	3401      	adds	r4, #1
 80088c4:	4303      	orrs	r3, r0
 80088c6:	9304      	str	r3, [sp, #16]
 80088c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088cc:	2206      	movs	r2, #6
 80088ce:	482c      	ldr	r0, [pc, #176]	; (8008980 <_vfiprintf_r+0x250>)
 80088d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088d4:	f000 fa9c 	bl	8008e10 <memchr>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d03f      	beq.n	800895c <_vfiprintf_r+0x22c>
 80088dc:	4b29      	ldr	r3, [pc, #164]	; (8008984 <_vfiprintf_r+0x254>)
 80088de:	bb1b      	cbnz	r3, 8008928 <_vfiprintf_r+0x1f8>
 80088e0:	9b03      	ldr	r3, [sp, #12]
 80088e2:	3307      	adds	r3, #7
 80088e4:	f023 0307 	bic.w	r3, r3, #7
 80088e8:	3308      	adds	r3, #8
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ee:	443b      	add	r3, r7
 80088f0:	9309      	str	r3, [sp, #36]	; 0x24
 80088f2:	e767      	b.n	80087c4 <_vfiprintf_r+0x94>
 80088f4:	460c      	mov	r4, r1
 80088f6:	2001      	movs	r0, #1
 80088f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80088fc:	e7a5      	b.n	800884a <_vfiprintf_r+0x11a>
 80088fe:	2300      	movs	r3, #0
 8008900:	f04f 0c0a 	mov.w	ip, #10
 8008904:	4619      	mov	r1, r3
 8008906:	3401      	adds	r4, #1
 8008908:	9305      	str	r3, [sp, #20]
 800890a:	4620      	mov	r0, r4
 800890c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008910:	3a30      	subs	r2, #48	; 0x30
 8008912:	2a09      	cmp	r2, #9
 8008914:	d903      	bls.n	800891e <_vfiprintf_r+0x1ee>
 8008916:	2b00      	cmp	r3, #0
 8008918:	d0c5      	beq.n	80088a6 <_vfiprintf_r+0x176>
 800891a:	9105      	str	r1, [sp, #20]
 800891c:	e7c3      	b.n	80088a6 <_vfiprintf_r+0x176>
 800891e:	4604      	mov	r4, r0
 8008920:	2301      	movs	r3, #1
 8008922:	fb0c 2101 	mla	r1, ip, r1, r2
 8008926:	e7f0      	b.n	800890a <_vfiprintf_r+0x1da>
 8008928:	ab03      	add	r3, sp, #12
 800892a:	9300      	str	r3, [sp, #0]
 800892c:	462a      	mov	r2, r5
 800892e:	4630      	mov	r0, r6
 8008930:	4b15      	ldr	r3, [pc, #84]	; (8008988 <_vfiprintf_r+0x258>)
 8008932:	a904      	add	r1, sp, #16
 8008934:	f3af 8000 	nop.w
 8008938:	4607      	mov	r7, r0
 800893a:	1c78      	adds	r0, r7, #1
 800893c:	d1d6      	bne.n	80088ec <_vfiprintf_r+0x1bc>
 800893e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008940:	07d9      	lsls	r1, r3, #31
 8008942:	d405      	bmi.n	8008950 <_vfiprintf_r+0x220>
 8008944:	89ab      	ldrh	r3, [r5, #12]
 8008946:	059a      	lsls	r2, r3, #22
 8008948:	d402      	bmi.n	8008950 <_vfiprintf_r+0x220>
 800894a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800894c:	f7ff fc61 	bl	8008212 <__retarget_lock_release_recursive>
 8008950:	89ab      	ldrh	r3, [r5, #12]
 8008952:	065b      	lsls	r3, r3, #25
 8008954:	f53f af12 	bmi.w	800877c <_vfiprintf_r+0x4c>
 8008958:	9809      	ldr	r0, [sp, #36]	; 0x24
 800895a:	e711      	b.n	8008780 <_vfiprintf_r+0x50>
 800895c:	ab03      	add	r3, sp, #12
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	462a      	mov	r2, r5
 8008962:	4630      	mov	r0, r6
 8008964:	4b08      	ldr	r3, [pc, #32]	; (8008988 <_vfiprintf_r+0x258>)
 8008966:	a904      	add	r1, sp, #16
 8008968:	f000 f882 	bl	8008a70 <_printf_i>
 800896c:	e7e4      	b.n	8008938 <_vfiprintf_r+0x208>
 800896e:	bf00      	nop
 8008970:	08009bbc 	.word	0x08009bbc
 8008974:	08009bdc 	.word	0x08009bdc
 8008978:	08009b9c 	.word	0x08009b9c
 800897c:	08009bfc 	.word	0x08009bfc
 8008980:	08009c06 	.word	0x08009c06
 8008984:	00000000 	.word	0x00000000
 8008988:	0800870b 	.word	0x0800870b
 800898c:	08009c02 	.word	0x08009c02

08008990 <_printf_common>:
 8008990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008994:	4616      	mov	r6, r2
 8008996:	4699      	mov	r9, r3
 8008998:	688a      	ldr	r2, [r1, #8]
 800899a:	690b      	ldr	r3, [r1, #16]
 800899c:	4607      	mov	r7, r0
 800899e:	4293      	cmp	r3, r2
 80089a0:	bfb8      	it	lt
 80089a2:	4613      	movlt	r3, r2
 80089a4:	6033      	str	r3, [r6, #0]
 80089a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089aa:	460c      	mov	r4, r1
 80089ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089b0:	b10a      	cbz	r2, 80089b6 <_printf_common+0x26>
 80089b2:	3301      	adds	r3, #1
 80089b4:	6033      	str	r3, [r6, #0]
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	0699      	lsls	r1, r3, #26
 80089ba:	bf42      	ittt	mi
 80089bc:	6833      	ldrmi	r3, [r6, #0]
 80089be:	3302      	addmi	r3, #2
 80089c0:	6033      	strmi	r3, [r6, #0]
 80089c2:	6825      	ldr	r5, [r4, #0]
 80089c4:	f015 0506 	ands.w	r5, r5, #6
 80089c8:	d106      	bne.n	80089d8 <_printf_common+0x48>
 80089ca:	f104 0a19 	add.w	sl, r4, #25
 80089ce:	68e3      	ldr	r3, [r4, #12]
 80089d0:	6832      	ldr	r2, [r6, #0]
 80089d2:	1a9b      	subs	r3, r3, r2
 80089d4:	42ab      	cmp	r3, r5
 80089d6:	dc28      	bgt.n	8008a2a <_printf_common+0x9a>
 80089d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089dc:	1e13      	subs	r3, r2, #0
 80089de:	6822      	ldr	r2, [r4, #0]
 80089e0:	bf18      	it	ne
 80089e2:	2301      	movne	r3, #1
 80089e4:	0692      	lsls	r2, r2, #26
 80089e6:	d42d      	bmi.n	8008a44 <_printf_common+0xb4>
 80089e8:	4649      	mov	r1, r9
 80089ea:	4638      	mov	r0, r7
 80089ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089f0:	47c0      	blx	r8
 80089f2:	3001      	adds	r0, #1
 80089f4:	d020      	beq.n	8008a38 <_printf_common+0xa8>
 80089f6:	6823      	ldr	r3, [r4, #0]
 80089f8:	68e5      	ldr	r5, [r4, #12]
 80089fa:	f003 0306 	and.w	r3, r3, #6
 80089fe:	2b04      	cmp	r3, #4
 8008a00:	bf18      	it	ne
 8008a02:	2500      	movne	r5, #0
 8008a04:	6832      	ldr	r2, [r6, #0]
 8008a06:	f04f 0600 	mov.w	r6, #0
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	bf08      	it	eq
 8008a0e:	1aad      	subeq	r5, r5, r2
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	bf08      	it	eq
 8008a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	bfc4      	itt	gt
 8008a1c:	1a9b      	subgt	r3, r3, r2
 8008a1e:	18ed      	addgt	r5, r5, r3
 8008a20:	341a      	adds	r4, #26
 8008a22:	42b5      	cmp	r5, r6
 8008a24:	d11a      	bne.n	8008a5c <_printf_common+0xcc>
 8008a26:	2000      	movs	r0, #0
 8008a28:	e008      	b.n	8008a3c <_printf_common+0xac>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4652      	mov	r2, sl
 8008a2e:	4649      	mov	r1, r9
 8008a30:	4638      	mov	r0, r7
 8008a32:	47c0      	blx	r8
 8008a34:	3001      	adds	r0, #1
 8008a36:	d103      	bne.n	8008a40 <_printf_common+0xb0>
 8008a38:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a40:	3501      	adds	r5, #1
 8008a42:	e7c4      	b.n	80089ce <_printf_common+0x3e>
 8008a44:	2030      	movs	r0, #48	; 0x30
 8008a46:	18e1      	adds	r1, r4, r3
 8008a48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a52:	4422      	add	r2, r4
 8008a54:	3302      	adds	r3, #2
 8008a56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a5a:	e7c5      	b.n	80089e8 <_printf_common+0x58>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4622      	mov	r2, r4
 8008a60:	4649      	mov	r1, r9
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c0      	blx	r8
 8008a66:	3001      	adds	r0, #1
 8008a68:	d0e6      	beq.n	8008a38 <_printf_common+0xa8>
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7d9      	b.n	8008a22 <_printf_common+0x92>
	...

08008a70 <_printf_i>:
 8008a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	460c      	mov	r4, r1
 8008a76:	7e27      	ldrb	r7, [r4, #24]
 8008a78:	4691      	mov	r9, r2
 8008a7a:	2f78      	cmp	r7, #120	; 0x78
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	469a      	mov	sl, r3
 8008a80:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008a82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a86:	d807      	bhi.n	8008a98 <_printf_i+0x28>
 8008a88:	2f62      	cmp	r7, #98	; 0x62
 8008a8a:	d80a      	bhi.n	8008aa2 <_printf_i+0x32>
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	f000 80d9 	beq.w	8008c44 <_printf_i+0x1d4>
 8008a92:	2f58      	cmp	r7, #88	; 0x58
 8008a94:	f000 80a4 	beq.w	8008be0 <_printf_i+0x170>
 8008a98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008a9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008aa0:	e03a      	b.n	8008b18 <_printf_i+0xa8>
 8008aa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008aa6:	2b15      	cmp	r3, #21
 8008aa8:	d8f6      	bhi.n	8008a98 <_printf_i+0x28>
 8008aaa:	a001      	add	r0, pc, #4	; (adr r0, 8008ab0 <_printf_i+0x40>)
 8008aac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008ab0:	08008b09 	.word	0x08008b09
 8008ab4:	08008b1d 	.word	0x08008b1d
 8008ab8:	08008a99 	.word	0x08008a99
 8008abc:	08008a99 	.word	0x08008a99
 8008ac0:	08008a99 	.word	0x08008a99
 8008ac4:	08008a99 	.word	0x08008a99
 8008ac8:	08008b1d 	.word	0x08008b1d
 8008acc:	08008a99 	.word	0x08008a99
 8008ad0:	08008a99 	.word	0x08008a99
 8008ad4:	08008a99 	.word	0x08008a99
 8008ad8:	08008a99 	.word	0x08008a99
 8008adc:	08008c2b 	.word	0x08008c2b
 8008ae0:	08008b4d 	.word	0x08008b4d
 8008ae4:	08008c0d 	.word	0x08008c0d
 8008ae8:	08008a99 	.word	0x08008a99
 8008aec:	08008a99 	.word	0x08008a99
 8008af0:	08008c4d 	.word	0x08008c4d
 8008af4:	08008a99 	.word	0x08008a99
 8008af8:	08008b4d 	.word	0x08008b4d
 8008afc:	08008a99 	.word	0x08008a99
 8008b00:	08008a99 	.word	0x08008a99
 8008b04:	08008c15 	.word	0x08008c15
 8008b08:	680b      	ldr	r3, [r1, #0]
 8008b0a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008b0e:	1d1a      	adds	r2, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	600a      	str	r2, [r1, #0]
 8008b14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0a4      	b.n	8008c66 <_printf_i+0x1f6>
 8008b1c:	6825      	ldr	r5, [r4, #0]
 8008b1e:	6808      	ldr	r0, [r1, #0]
 8008b20:	062e      	lsls	r6, r5, #24
 8008b22:	f100 0304 	add.w	r3, r0, #4
 8008b26:	d50a      	bpl.n	8008b3e <_printf_i+0xce>
 8008b28:	6805      	ldr	r5, [r0, #0]
 8008b2a:	600b      	str	r3, [r1, #0]
 8008b2c:	2d00      	cmp	r5, #0
 8008b2e:	da03      	bge.n	8008b38 <_printf_i+0xc8>
 8008b30:	232d      	movs	r3, #45	; 0x2d
 8008b32:	426d      	negs	r5, r5
 8008b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b38:	230a      	movs	r3, #10
 8008b3a:	485e      	ldr	r0, [pc, #376]	; (8008cb4 <_printf_i+0x244>)
 8008b3c:	e019      	b.n	8008b72 <_printf_i+0x102>
 8008b3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008b42:	6805      	ldr	r5, [r0, #0]
 8008b44:	600b      	str	r3, [r1, #0]
 8008b46:	bf18      	it	ne
 8008b48:	b22d      	sxthne	r5, r5
 8008b4a:	e7ef      	b.n	8008b2c <_printf_i+0xbc>
 8008b4c:	680b      	ldr	r3, [r1, #0]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	1d18      	adds	r0, r3, #4
 8008b52:	6008      	str	r0, [r1, #0]
 8008b54:	0628      	lsls	r0, r5, #24
 8008b56:	d501      	bpl.n	8008b5c <_printf_i+0xec>
 8008b58:	681d      	ldr	r5, [r3, #0]
 8008b5a:	e002      	b.n	8008b62 <_printf_i+0xf2>
 8008b5c:	0669      	lsls	r1, r5, #25
 8008b5e:	d5fb      	bpl.n	8008b58 <_printf_i+0xe8>
 8008b60:	881d      	ldrh	r5, [r3, #0]
 8008b62:	2f6f      	cmp	r7, #111	; 0x6f
 8008b64:	bf0c      	ite	eq
 8008b66:	2308      	moveq	r3, #8
 8008b68:	230a      	movne	r3, #10
 8008b6a:	4852      	ldr	r0, [pc, #328]	; (8008cb4 <_printf_i+0x244>)
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b72:	6866      	ldr	r6, [r4, #4]
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	bfa8      	it	ge
 8008b78:	6821      	ldrge	r1, [r4, #0]
 8008b7a:	60a6      	str	r6, [r4, #8]
 8008b7c:	bfa4      	itt	ge
 8008b7e:	f021 0104 	bicge.w	r1, r1, #4
 8008b82:	6021      	strge	r1, [r4, #0]
 8008b84:	b90d      	cbnz	r5, 8008b8a <_printf_i+0x11a>
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d04d      	beq.n	8008c26 <_printf_i+0x1b6>
 8008b8a:	4616      	mov	r6, r2
 8008b8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b90:	fb03 5711 	mls	r7, r3, r1, r5
 8008b94:	5dc7      	ldrb	r7, [r0, r7]
 8008b96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b9a:	462f      	mov	r7, r5
 8008b9c:	42bb      	cmp	r3, r7
 8008b9e:	460d      	mov	r5, r1
 8008ba0:	d9f4      	bls.n	8008b8c <_printf_i+0x11c>
 8008ba2:	2b08      	cmp	r3, #8
 8008ba4:	d10b      	bne.n	8008bbe <_printf_i+0x14e>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	07df      	lsls	r7, r3, #31
 8008baa:	d508      	bpl.n	8008bbe <_printf_i+0x14e>
 8008bac:	6923      	ldr	r3, [r4, #16]
 8008bae:	6861      	ldr	r1, [r4, #4]
 8008bb0:	4299      	cmp	r1, r3
 8008bb2:	bfde      	ittt	le
 8008bb4:	2330      	movle	r3, #48	; 0x30
 8008bb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bbe:	1b92      	subs	r2, r2, r6
 8008bc0:	6122      	str	r2, [r4, #16]
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	4640      	mov	r0, r8
 8008bc8:	f8cd a000 	str.w	sl, [sp]
 8008bcc:	aa03      	add	r2, sp, #12
 8008bce:	f7ff fedf 	bl	8008990 <_printf_common>
 8008bd2:	3001      	adds	r0, #1
 8008bd4:	d14c      	bne.n	8008c70 <_printf_i+0x200>
 8008bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bda:	b004      	add	sp, #16
 8008bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008be0:	4834      	ldr	r0, [pc, #208]	; (8008cb4 <_printf_i+0x244>)
 8008be2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008be6:	680e      	ldr	r6, [r1, #0]
 8008be8:	6823      	ldr	r3, [r4, #0]
 8008bea:	f856 5b04 	ldr.w	r5, [r6], #4
 8008bee:	061f      	lsls	r7, r3, #24
 8008bf0:	600e      	str	r6, [r1, #0]
 8008bf2:	d514      	bpl.n	8008c1e <_printf_i+0x1ae>
 8008bf4:	07d9      	lsls	r1, r3, #31
 8008bf6:	bf44      	itt	mi
 8008bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8008bfc:	6023      	strmi	r3, [r4, #0]
 8008bfe:	b91d      	cbnz	r5, 8008c08 <_printf_i+0x198>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	f023 0320 	bic.w	r3, r3, #32
 8008c06:	6023      	str	r3, [r4, #0]
 8008c08:	2310      	movs	r3, #16
 8008c0a:	e7af      	b.n	8008b6c <_printf_i+0xfc>
 8008c0c:	6823      	ldr	r3, [r4, #0]
 8008c0e:	f043 0320 	orr.w	r3, r3, #32
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	2378      	movs	r3, #120	; 0x78
 8008c16:	4828      	ldr	r0, [pc, #160]	; (8008cb8 <_printf_i+0x248>)
 8008c18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c1c:	e7e3      	b.n	8008be6 <_printf_i+0x176>
 8008c1e:	065e      	lsls	r6, r3, #25
 8008c20:	bf48      	it	mi
 8008c22:	b2ad      	uxthmi	r5, r5
 8008c24:	e7e6      	b.n	8008bf4 <_printf_i+0x184>
 8008c26:	4616      	mov	r6, r2
 8008c28:	e7bb      	b.n	8008ba2 <_printf_i+0x132>
 8008c2a:	680b      	ldr	r3, [r1, #0]
 8008c2c:	6826      	ldr	r6, [r4, #0]
 8008c2e:	1d1d      	adds	r5, r3, #4
 8008c30:	6960      	ldr	r0, [r4, #20]
 8008c32:	600d      	str	r5, [r1, #0]
 8008c34:	0635      	lsls	r5, r6, #24
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	d501      	bpl.n	8008c3e <_printf_i+0x1ce>
 8008c3a:	6018      	str	r0, [r3, #0]
 8008c3c:	e002      	b.n	8008c44 <_printf_i+0x1d4>
 8008c3e:	0671      	lsls	r1, r6, #25
 8008c40:	d5fb      	bpl.n	8008c3a <_printf_i+0x1ca>
 8008c42:	8018      	strh	r0, [r3, #0]
 8008c44:	2300      	movs	r3, #0
 8008c46:	4616      	mov	r6, r2
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	e7ba      	b.n	8008bc2 <_printf_i+0x152>
 8008c4c:	680b      	ldr	r3, [r1, #0]
 8008c4e:	1d1a      	adds	r2, r3, #4
 8008c50:	600a      	str	r2, [r1, #0]
 8008c52:	681e      	ldr	r6, [r3, #0]
 8008c54:	2100      	movs	r1, #0
 8008c56:	4630      	mov	r0, r6
 8008c58:	6862      	ldr	r2, [r4, #4]
 8008c5a:	f000 f8d9 	bl	8008e10 <memchr>
 8008c5e:	b108      	cbz	r0, 8008c64 <_printf_i+0x1f4>
 8008c60:	1b80      	subs	r0, r0, r6
 8008c62:	6060      	str	r0, [r4, #4]
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c6e:	e7a8      	b.n	8008bc2 <_printf_i+0x152>
 8008c70:	4632      	mov	r2, r6
 8008c72:	4649      	mov	r1, r9
 8008c74:	4640      	mov	r0, r8
 8008c76:	6923      	ldr	r3, [r4, #16]
 8008c78:	47d0      	blx	sl
 8008c7a:	3001      	adds	r0, #1
 8008c7c:	d0ab      	beq.n	8008bd6 <_printf_i+0x166>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	079b      	lsls	r3, r3, #30
 8008c82:	d413      	bmi.n	8008cac <_printf_i+0x23c>
 8008c84:	68e0      	ldr	r0, [r4, #12]
 8008c86:	9b03      	ldr	r3, [sp, #12]
 8008c88:	4298      	cmp	r0, r3
 8008c8a:	bfb8      	it	lt
 8008c8c:	4618      	movlt	r0, r3
 8008c8e:	e7a4      	b.n	8008bda <_printf_i+0x16a>
 8008c90:	2301      	movs	r3, #1
 8008c92:	4632      	mov	r2, r6
 8008c94:	4649      	mov	r1, r9
 8008c96:	4640      	mov	r0, r8
 8008c98:	47d0      	blx	sl
 8008c9a:	3001      	adds	r0, #1
 8008c9c:	d09b      	beq.n	8008bd6 <_printf_i+0x166>
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	68e3      	ldr	r3, [r4, #12]
 8008ca2:	9903      	ldr	r1, [sp, #12]
 8008ca4:	1a5b      	subs	r3, r3, r1
 8008ca6:	42ab      	cmp	r3, r5
 8008ca8:	dcf2      	bgt.n	8008c90 <_printf_i+0x220>
 8008caa:	e7eb      	b.n	8008c84 <_printf_i+0x214>
 8008cac:	2500      	movs	r5, #0
 8008cae:	f104 0619 	add.w	r6, r4, #25
 8008cb2:	e7f5      	b.n	8008ca0 <_printf_i+0x230>
 8008cb4:	08009c0d 	.word	0x08009c0d
 8008cb8:	08009c1e 	.word	0x08009c1e

08008cbc <_sbrk_r>:
 8008cbc:	b538      	push	{r3, r4, r5, lr}
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4d05      	ldr	r5, [pc, #20]	; (8008cd8 <_sbrk_r+0x1c>)
 8008cc2:	4604      	mov	r4, r0
 8008cc4:	4608      	mov	r0, r1
 8008cc6:	602b      	str	r3, [r5, #0]
 8008cc8:	f7fb fdcc 	bl	8004864 <_sbrk>
 8008ccc:	1c43      	adds	r3, r0, #1
 8008cce:	d102      	bne.n	8008cd6 <_sbrk_r+0x1a>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	b103      	cbz	r3, 8008cd6 <_sbrk_r+0x1a>
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	bd38      	pop	{r3, r4, r5, pc}
 8008cd8:	200019dc 	.word	0x200019dc

08008cdc <__sread>:
 8008cdc:	b510      	push	{r4, lr}
 8008cde:	460c      	mov	r4, r1
 8008ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ce4:	f000 f8ee 	bl	8008ec4 <_read_r>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	bfab      	itete	ge
 8008cec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cee:	89a3      	ldrhlt	r3, [r4, #12]
 8008cf0:	181b      	addge	r3, r3, r0
 8008cf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cf6:	bfac      	ite	ge
 8008cf8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cfa:	81a3      	strhlt	r3, [r4, #12]
 8008cfc:	bd10      	pop	{r4, pc}

08008cfe <__swrite>:
 8008cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d02:	461f      	mov	r7, r3
 8008d04:	898b      	ldrh	r3, [r1, #12]
 8008d06:	4605      	mov	r5, r0
 8008d08:	05db      	lsls	r3, r3, #23
 8008d0a:	460c      	mov	r4, r1
 8008d0c:	4616      	mov	r6, r2
 8008d0e:	d505      	bpl.n	8008d1c <__swrite+0x1e>
 8008d10:	2302      	movs	r3, #2
 8008d12:	2200      	movs	r2, #0
 8008d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d18:	f000 f868 	bl	8008dec <_lseek_r>
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	4632      	mov	r2, r6
 8008d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d24:	81a3      	strh	r3, [r4, #12]
 8008d26:	4628      	mov	r0, r5
 8008d28:	463b      	mov	r3, r7
 8008d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d32:	f000 b817 	b.w	8008d64 <_write_r>

08008d36 <__sseek>:
 8008d36:	b510      	push	{r4, lr}
 8008d38:	460c      	mov	r4, r1
 8008d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d3e:	f000 f855 	bl	8008dec <_lseek_r>
 8008d42:	1c43      	adds	r3, r0, #1
 8008d44:	89a3      	ldrh	r3, [r4, #12]
 8008d46:	bf15      	itete	ne
 8008d48:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d52:	81a3      	strheq	r3, [r4, #12]
 8008d54:	bf18      	it	ne
 8008d56:	81a3      	strhne	r3, [r4, #12]
 8008d58:	bd10      	pop	{r4, pc}

08008d5a <__sclose>:
 8008d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d5e:	f000 b813 	b.w	8008d88 <_close_r>
	...

08008d64 <_write_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	4611      	mov	r1, r2
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4d05      	ldr	r5, [pc, #20]	; (8008d84 <_write_r+0x20>)
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f7f8 f812 	bl	8000d9c <_write>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_write_r+0x1e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_write_r+0x1e>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	200019dc 	.word	0x200019dc

08008d88 <_close_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	4d05      	ldr	r5, [pc, #20]	; (8008da4 <_close_r+0x1c>)
 8008d8e:	4604      	mov	r4, r0
 8008d90:	4608      	mov	r0, r1
 8008d92:	602b      	str	r3, [r5, #0]
 8008d94:	f7fb fd5a 	bl	800484c <_close>
 8008d98:	1c43      	adds	r3, r0, #1
 8008d9a:	d102      	bne.n	8008da2 <_close_r+0x1a>
 8008d9c:	682b      	ldr	r3, [r5, #0]
 8008d9e:	b103      	cbz	r3, 8008da2 <_close_r+0x1a>
 8008da0:	6023      	str	r3, [r4, #0]
 8008da2:	bd38      	pop	{r3, r4, r5, pc}
 8008da4:	200019dc 	.word	0x200019dc

08008da8 <_fstat_r>:
 8008da8:	b538      	push	{r3, r4, r5, lr}
 8008daa:	2300      	movs	r3, #0
 8008dac:	4d06      	ldr	r5, [pc, #24]	; (8008dc8 <_fstat_r+0x20>)
 8008dae:	4604      	mov	r4, r0
 8008db0:	4608      	mov	r0, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	602b      	str	r3, [r5, #0]
 8008db6:	f7fb fd4c 	bl	8004852 <_fstat>
 8008dba:	1c43      	adds	r3, r0, #1
 8008dbc:	d102      	bne.n	8008dc4 <_fstat_r+0x1c>
 8008dbe:	682b      	ldr	r3, [r5, #0]
 8008dc0:	b103      	cbz	r3, 8008dc4 <_fstat_r+0x1c>
 8008dc2:	6023      	str	r3, [r4, #0]
 8008dc4:	bd38      	pop	{r3, r4, r5, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200019dc 	.word	0x200019dc

08008dcc <_isatty_r>:
 8008dcc:	b538      	push	{r3, r4, r5, lr}
 8008dce:	2300      	movs	r3, #0
 8008dd0:	4d05      	ldr	r5, [pc, #20]	; (8008de8 <_isatty_r+0x1c>)
 8008dd2:	4604      	mov	r4, r0
 8008dd4:	4608      	mov	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7fb fd40 	bl	800485c <_isatty>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d102      	bne.n	8008de6 <_isatty_r+0x1a>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	b103      	cbz	r3, 8008de6 <_isatty_r+0x1a>
 8008de4:	6023      	str	r3, [r4, #0]
 8008de6:	bd38      	pop	{r3, r4, r5, pc}
 8008de8:	200019dc 	.word	0x200019dc

08008dec <_lseek_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	4604      	mov	r4, r0
 8008df0:	4608      	mov	r0, r1
 8008df2:	4611      	mov	r1, r2
 8008df4:	2200      	movs	r2, #0
 8008df6:	4d05      	ldr	r5, [pc, #20]	; (8008e0c <_lseek_r+0x20>)
 8008df8:	602a      	str	r2, [r5, #0]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f7fb fd30 	bl	8004860 <_lseek>
 8008e00:	1c43      	adds	r3, r0, #1
 8008e02:	d102      	bne.n	8008e0a <_lseek_r+0x1e>
 8008e04:	682b      	ldr	r3, [r5, #0]
 8008e06:	b103      	cbz	r3, 8008e0a <_lseek_r+0x1e>
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	bd38      	pop	{r3, r4, r5, pc}
 8008e0c:	200019dc 	.word	0x200019dc

08008e10 <memchr>:
 8008e10:	4603      	mov	r3, r0
 8008e12:	b510      	push	{r4, lr}
 8008e14:	b2c9      	uxtb	r1, r1
 8008e16:	4402      	add	r2, r0
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	d101      	bne.n	8008e22 <memchr+0x12>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	e003      	b.n	8008e2a <memchr+0x1a>
 8008e22:	7804      	ldrb	r4, [r0, #0]
 8008e24:	3301      	adds	r3, #1
 8008e26:	428c      	cmp	r4, r1
 8008e28:	d1f6      	bne.n	8008e18 <memchr+0x8>
 8008e2a:	bd10      	pop	{r4, pc}

08008e2c <memmove>:
 8008e2c:	4288      	cmp	r0, r1
 8008e2e:	b510      	push	{r4, lr}
 8008e30:	eb01 0402 	add.w	r4, r1, r2
 8008e34:	d902      	bls.n	8008e3c <memmove+0x10>
 8008e36:	4284      	cmp	r4, r0
 8008e38:	4623      	mov	r3, r4
 8008e3a:	d807      	bhi.n	8008e4c <memmove+0x20>
 8008e3c:	1e43      	subs	r3, r0, #1
 8008e3e:	42a1      	cmp	r1, r4
 8008e40:	d008      	beq.n	8008e54 <memmove+0x28>
 8008e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e4a:	e7f8      	b.n	8008e3e <memmove+0x12>
 8008e4c:	4601      	mov	r1, r0
 8008e4e:	4402      	add	r2, r0
 8008e50:	428a      	cmp	r2, r1
 8008e52:	d100      	bne.n	8008e56 <memmove+0x2a>
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e5e:	e7f7      	b.n	8008e50 <memmove+0x24>

08008e60 <__malloc_lock>:
 8008e60:	4801      	ldr	r0, [pc, #4]	; (8008e68 <__malloc_lock+0x8>)
 8008e62:	f7ff b9d5 	b.w	8008210 <__retarget_lock_acquire_recursive>
 8008e66:	bf00      	nop
 8008e68:	200019d4 	.word	0x200019d4

08008e6c <__malloc_unlock>:
 8008e6c:	4801      	ldr	r0, [pc, #4]	; (8008e74 <__malloc_unlock+0x8>)
 8008e6e:	f7ff b9d0 	b.w	8008212 <__retarget_lock_release_recursive>
 8008e72:	bf00      	nop
 8008e74:	200019d4 	.word	0x200019d4

08008e78 <_realloc_r>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	460e      	mov	r6, r1
 8008e80:	b921      	cbnz	r1, 8008e8c <_realloc_r+0x14>
 8008e82:	4611      	mov	r1, r2
 8008e84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e88:	f7ff ba74 	b.w	8008374 <_malloc_r>
 8008e8c:	b922      	cbnz	r2, 8008e98 <_realloc_r+0x20>
 8008e8e:	f7ff fa25 	bl	80082dc <_free_r>
 8008e92:	4625      	mov	r5, r4
 8008e94:	4628      	mov	r0, r5
 8008e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e98:	f000 f826 	bl	8008ee8 <_malloc_usable_size_r>
 8008e9c:	42a0      	cmp	r0, r4
 8008e9e:	d20f      	bcs.n	8008ec0 <_realloc_r+0x48>
 8008ea0:	4621      	mov	r1, r4
 8008ea2:	4638      	mov	r0, r7
 8008ea4:	f7ff fa66 	bl	8008374 <_malloc_r>
 8008ea8:	4605      	mov	r5, r0
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d0f2      	beq.n	8008e94 <_realloc_r+0x1c>
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4622      	mov	r2, r4
 8008eb2:	f7fe fe69 	bl	8007b88 <memcpy>
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4638      	mov	r0, r7
 8008eba:	f7ff fa0f 	bl	80082dc <_free_r>
 8008ebe:	e7e9      	b.n	8008e94 <_realloc_r+0x1c>
 8008ec0:	4635      	mov	r5, r6
 8008ec2:	e7e7      	b.n	8008e94 <_realloc_r+0x1c>

08008ec4 <_read_r>:
 8008ec4:	b538      	push	{r3, r4, r5, lr}
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	4611      	mov	r1, r2
 8008ecc:	2200      	movs	r2, #0
 8008ece:	4d05      	ldr	r5, [pc, #20]	; (8008ee4 <_read_r+0x20>)
 8008ed0:	602a      	str	r2, [r5, #0]
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	f7fb fcad 	bl	8004832 <_read>
 8008ed8:	1c43      	adds	r3, r0, #1
 8008eda:	d102      	bne.n	8008ee2 <_read_r+0x1e>
 8008edc:	682b      	ldr	r3, [r5, #0]
 8008ede:	b103      	cbz	r3, 8008ee2 <_read_r+0x1e>
 8008ee0:	6023      	str	r3, [r4, #0]
 8008ee2:	bd38      	pop	{r3, r4, r5, pc}
 8008ee4:	200019dc 	.word	0x200019dc

08008ee8 <_malloc_usable_size_r>:
 8008ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eec:	1f18      	subs	r0, r3, #4
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bfbc      	itt	lt
 8008ef2:	580b      	ldrlt	r3, [r1, r0]
 8008ef4:	18c0      	addlt	r0, r0, r3
 8008ef6:	4770      	bx	lr

08008ef8 <_init>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	bf00      	nop
 8008efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008efe:	bc08      	pop	{r3}
 8008f00:	469e      	mov	lr, r3
 8008f02:	4770      	bx	lr

08008f04 <_fini>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr
